
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
    4000:	48 83 ec 08          	sub    $0x8,%rsp
    4004:	48 8b 05 bd 0f 03 00 	mov    0x30fbd(%rip),%rax        # 34fc8 <__gmon_start__@Base>
    400b:	48 85 c0             	test   %rax,%rax
    400e:	74 02                	je     4012 <_init+0x12>
    4010:	ff d0                	call   *%rax
    4012:	48 83 c4 08          	add    $0x8,%rsp
    4016:	c3                   	ret

Disassembly of section .plt:

0000000000004020 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt-0x10>:
    4020:	ff 35 ca 0f 03 00    	push   0x30fca(%rip)        # 34ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    4026:	ff 25 cc 0f 03 00    	jmp    *0x30fcc(%rip)        # 34ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    402c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>:
    4030:	ff 25 ca 0f 03 00    	jmp    *0x30fca(%rip)        # 35000 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@GLIBCXX_3.4.21>
    4036:	68 00 00 00 00       	push   $0x0
    403b:	e9 e0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004040 <_ZNSt6chrono3_V212system_clock3nowEv@plt>:
    4040:	ff 25 c2 0f 03 00    	jmp    *0x30fc2(%rip)        # 35008 <_ZNSt6chrono3_V212system_clock3nowEv@GLIBCXX_3.4.19>
    4046:	68 01 00 00 00       	push   $0x1
    404b:	e9 d0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@plt>:
    4050:	ff 25 ba 0f 03 00    	jmp    *0x30fba(%rip)        # 35010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@GLIBCXX_3.4.21>
    4056:	68 02 00 00 00       	push   $0x2
    405b:	e9 c0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004060 <vkCmdEndRenderPass@plt>:
    4060:	ff 25 b2 0f 03 00    	jmp    *0x30fb2(%rip)        # 35018 <vkCmdEndRenderPass@Base>
    4066:	68 03 00 00 00       	push   $0x3
    406b:	e9 b0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004070 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    4070:	ff 25 aa 0f 03 00    	jmp    *0x30faa(%rip)        # 35020 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    4076:	68 04 00 00 00       	push   $0x4
    407b:	e9 a0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004080 <_ZNSaIcED2Ev@plt>:
    4080:	ff 25 a2 0f 03 00    	jmp    *0x30fa2(%rip)        # 35028 <_ZNSaIcED2Ev@GLIBCXX_3.4>
    4086:	68 05 00 00 00       	push   $0x5
    408b:	e9 90 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004090 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv@plt>:
    4090:	ff 25 9a 0f 03 00    	jmp    *0x30f9a(%rip)        # 35030 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv@GLIBCXX_3.4>
    4096:	68 06 00 00 00       	push   $0x6
    409b:	e9 80 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040a0 <vkGetBufferMemoryRequirements@plt>:
    40a0:	ff 25 92 0f 03 00    	jmp    *0x30f92(%rip)        # 35038 <vkGetBufferMemoryRequirements@Base>
    40a6:	68 07 00 00 00       	push   $0x7
    40ab:	e9 70 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040b0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>:
    40b0:	ff 25 8a 0f 03 00    	jmp    *0x30f8a(%rip)        # 35040 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    40b6:	68 08 00 00 00       	push   $0x8
    40bb:	e9 60 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040c0 <_ZNSolsEm@plt>:
    40c0:	ff 25 82 0f 03 00    	jmp    *0x30f82(%rip)        # 35048 <_ZNSolsEm@GLIBCXX_3.4>
    40c6:	68 09 00 00 00       	push   $0x9
    40cb:	e9 50 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040d0 <vkDeviceWaitIdle@plt>:
    40d0:	ff 25 7a 0f 03 00    	jmp    *0x30f7a(%rip)        # 35050 <vkDeviceWaitIdle@Base>
    40d6:	68 0a 00 00 00       	push   $0xa
    40db:	e9 40 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040e0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>:
    40e0:	ff 25 72 0f 03 00    	jmp    *0x30f72(%rip)        # 35058 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
    40e6:	68 0b 00 00 00       	push   $0xb
    40eb:	e9 30 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040f0 <vkDestroySwapchainKHR@plt>:
    40f0:	ff 25 6a 0f 03 00    	jmp    *0x30f6a(%rip)        # 35060 <vkDestroySwapchainKHR@Base>
    40f6:	68 0c 00 00 00       	push   $0xc
    40fb:	e9 20 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004100 <vkDestroySemaphore@plt>:
    4100:	ff 25 62 0f 03 00    	jmp    *0x30f62(%rip)        # 35068 <vkDestroySemaphore@Base>
    4106:	68 0d 00 00 00       	push   $0xd
    410b:	e9 10 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004110 <glfwDestroyWindow@plt>:
    4110:	ff 25 5a 0f 03 00    	jmp    *0x30f5a(%rip)        # 35070 <glfwDestroyWindow@Base>
    4116:	68 0e 00 00 00       	push   $0xe
    411b:	e9 00 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004120 <_ZSt17__throw_bad_allocv@plt>:
    4120:	ff 25 52 0f 03 00    	jmp    *0x30f52(%rip)        # 35078 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    4126:	68 0f 00 00 00       	push   $0xf
    412b:	e9 f0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004130 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@plt>:
    4130:	ff 25 4a 0f 03 00    	jmp    *0x30f4a(%rip)        # 35080 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@GLIBCXX_3.4.21>
    4136:	68 10 00 00 00       	push   $0x10
    413b:	e9 e0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004140 <_ZNSt13runtime_errorC1EPKc@plt>:
    4140:	ff 25 42 0f 03 00    	jmp    *0x30f42(%rip)        # 35088 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    4146:	68 11 00 00 00       	push   $0x11
    414b:	e9 d0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004150 <vkGetPhysicalDeviceProperties@plt>:
    4150:	ff 25 3a 0f 03 00    	jmp    *0x30f3a(%rip)        # 35090 <vkGetPhysicalDeviceProperties@Base>
    4156:	68 12 00 00 00       	push   $0x12
    415b:	e9 c0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004160 <vkCmdDrawIndexed@plt>:
    4160:	ff 25 32 0f 03 00    	jmp    *0x30f32(%rip)        # 35098 <vkCmdDrawIndexed@Base>
    4166:	68 13 00 00 00       	push   $0x13
    416b:	e9 b0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004170 <__cxa_begin_catch@plt>:
    4170:	ff 25 2a 0f 03 00    	jmp    *0x30f2a(%rip)        # 350a0 <__cxa_begin_catch@CXXABI_1.3>
    4176:	68 14 00 00 00       	push   $0x14
    417b:	e9 a0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004180 <vkAcquireNextImageKHR@plt>:
    4180:	ff 25 22 0f 03 00    	jmp    *0x30f22(%rip)        # 350a8 <vkAcquireNextImageKHR@Base>
    4186:	68 15 00 00 00       	push   $0x15
    418b:	e9 90 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004190 <vkCreateCommandPool@plt>:
    4190:	ff 25 1a 0f 03 00    	jmp    *0x30f1a(%rip)        # 350b0 <vkCreateCommandPool@Base>
    4196:	68 16 00 00 00       	push   $0x16
    419b:	e9 80 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041a0 <strlen@plt>:
    41a0:	ff 25 12 0f 03 00    	jmp    *0x30f12(%rip)        # 350b8 <strlen@GLIBC_2.2.5>
    41a6:	68 17 00 00 00       	push   $0x17
    41ab:	e9 70 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041b0 <memcmp@plt>:
    41b0:	ff 25 0a 0f 03 00    	jmp    *0x30f0a(%rip)        # 350c0 <memcmp@GLIBC_2.2.5>
    41b6:	68 18 00 00 00       	push   $0x18
    41bb:	e9 60 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041c0 <vkCreateGraphicsPipelines@plt>:
    41c0:	ff 25 02 0f 03 00    	jmp    *0x30f02(%rip)        # 350c8 <vkCreateGraphicsPipelines@Base>
    41c6:	68 19 00 00 00       	push   $0x19
    41cb:	e9 50 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041d0 <__cxa_allocate_exception@plt>:
    41d0:	ff 25 fa 0e 03 00    	jmp    *0x30efa(%rip)        # 350d0 <__cxa_allocate_exception@CXXABI_1.3>
    41d6:	68 1a 00 00 00       	push   $0x1a
    41db:	e9 40 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041e0 <vkDestroyBuffer@plt>:
    41e0:	ff 25 f2 0e 03 00    	jmp    *0x30ef2(%rip)        # 350d8 <vkDestroyBuffer@Base>
    41e6:	68 1b 00 00 00       	push   $0x1b
    41eb:	e9 30 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041f0 <glfwSetWindowUserPointer@plt>:
    41f0:	ff 25 ea 0e 03 00    	jmp    *0x30eea(%rip)        # 350e0 <glfwSetWindowUserPointer@Base>
    41f6:	68 1c 00 00 00       	push   $0x1c
    41fb:	e9 20 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004200 <_ZSt20__throw_length_errorPKc@plt>:
    4200:	ff 25 e2 0e 03 00    	jmp    *0x30ee2(%rip)        # 350e8 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    4206:	68 1d 00 00 00       	push   $0x1d
    420b:	e9 10 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004210 <vkEnumeratePhysicalDevices@plt>:
    4210:	ff 25 da 0e 03 00    	jmp    *0x30eda(%rip)        # 350f0 <vkEnumeratePhysicalDevices@Base>
    4216:	68 1e 00 00 00       	push   $0x1e
    421b:	e9 00 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004220 <memset@plt>:
    4220:	ff 25 d2 0e 03 00    	jmp    *0x30ed2(%rip)        # 350f8 <memset@GLIBC_2.2.5>
    4226:	68 1f 00 00 00       	push   $0x1f
    422b:	e9 f0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004230 <_ZNSaIcEC1ERKS_@plt>:
    4230:	ff 25 ca 0e 03 00    	jmp    *0x30eca(%rip)        # 35100 <_ZNSaIcEC1ERKS_@GLIBCXX_3.4>
    4236:	68 20 00 00 00       	push   $0x20
    423b:	e9 e0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004240 <vkWaitForFences@plt>:
    4240:	ff 25 c2 0e 03 00    	jmp    *0x30ec2(%rip)        # 35108 <vkWaitForFences@Base>
    4246:	68 21 00 00 00       	push   $0x21
    424b:	e9 d0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004250 <glfwWaitEvents@plt>:
    4250:	ff 25 ba 0e 03 00    	jmp    *0x30eba(%rip)        # 35110 <glfwWaitEvents@Base>
    4256:	68 22 00 00 00       	push   $0x22
    425b:	e9 c0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004260 <vkGetSwapchainImagesKHR@plt>:
    4260:	ff 25 b2 0e 03 00    	jmp    *0x30eb2(%rip)        # 35118 <vkGetSwapchainImagesKHR@Base>
    4266:	68 23 00 00 00       	push   $0x23
    426b:	e9 b0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>:
    4270:	ff 25 aa 0e 03 00    	jmp    *0x30eaa(%rip)        # 35120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@GLIBCXX_3.4.21>
    4276:	68 24 00 00 00       	push   $0x24
    427b:	e9 a0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
    4280:	ff 25 a2 0e 03 00    	jmp    *0x30ea2(%rip)        # 35128 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    4286:	68 25 00 00 00       	push   $0x25
    428b:	e9 90 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004290 <vkCreateRenderPass@plt>:
    4290:	ff 25 9a 0e 03 00    	jmp    *0x30e9a(%rip)        # 35130 <vkCreateRenderPass@Base>
    4296:	68 26 00 00 00       	push   $0x26
    429b:	e9 80 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042a0 <__cxa_guard_release@plt>:
    42a0:	ff 25 92 0e 03 00    	jmp    *0x30e92(%rip)        # 35138 <__cxa_guard_release@CXXABI_1.3>
    42a6:	68 27 00 00 00       	push   $0x27
    42ab:	e9 70 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042b0 <__assert_fail@plt>:
    42b0:	ff 25 8a 0e 03 00    	jmp    *0x30e8a(%rip)        # 35140 <__assert_fail@GLIBC_2.2.5>
    42b6:	68 28 00 00 00       	push   $0x28
    42bb:	e9 60 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@plt>:
    42c0:	ff 25 82 0e 03 00    	jmp    *0x30e82(%rip)        # 35148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@GLIBCXX_3.4.21>
    42c6:	68 29 00 00 00       	push   $0x29
    42cb:	e9 50 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    42d0:	ff 25 7a 0e 03 00    	jmp    *0x30e7a(%rip)        # 35150 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    42d6:	68 2a 00 00 00       	push   $0x2a
    42db:	e9 40 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@plt>:
    42e0:	ff 25 72 0e 03 00    	jmp    *0x30e72(%rip)        # 35158 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@GLIBCXX_3.4.21>
    42e6:	68 2b 00 00 00       	push   $0x2b
    42eb:	e9 30 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042f0 <_ZSt19__throw_logic_errorPKc@plt>:
    42f0:	ff 25 6a 0e 03 00    	jmp    *0x30e6a(%rip)        # 35160 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    42f6:	68 2c 00 00 00       	push   $0x2c
    42fb:	e9 20 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004300 <__cxa_free_exception@plt>:
    4300:	ff 25 62 0e 03 00    	jmp    *0x30e62(%rip)        # 35168 <__cxa_free_exception@CXXABI_1.3>
    4306:	68 2d 00 00 00       	push   $0x2d
    430b:	e9 10 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004310 <vkFreeCommandBuffers@plt>:
    4310:	ff 25 5a 0e 03 00    	jmp    *0x30e5a(%rip)        # 35170 <vkFreeCommandBuffers@Base>
    4316:	68 2e 00 00 00       	push   $0x2e
    431b:	e9 00 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004320 <cosf@plt>:
    4320:	ff 25 52 0e 03 00    	jmp    *0x30e52(%rip)        # 35178 <cosf@GLIBC_2.2.5>
    4326:	68 2f 00 00 00       	push   $0x2f
    432b:	e9 f0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004330 <vkGetPhysicalDeviceQueueFamilyProperties@plt>:
    4330:	ff 25 4a 0e 03 00    	jmp    *0x30e4a(%rip)        # 35180 <vkGetPhysicalDeviceQueueFamilyProperties@Base>
    4336:	68 30 00 00 00       	push   $0x30
    433b:	e9 e0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004340 <glfwGetRequiredInstanceExtensions@plt>:
    4340:	ff 25 42 0e 03 00    	jmp    *0x30e42(%rip)        # 35188 <glfwGetRequiredInstanceExtensions@Base>
    4346:	68 31 00 00 00       	push   $0x31
    434b:	e9 d0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004350 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    4350:	ff 25 3a 0e 03 00    	jmp    *0x30e3a(%rip)        # 35190 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    4356:	68 32 00 00 00       	push   $0x32
    435b:	e9 c0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004360 <vkCreateShaderModule@plt>:
    4360:	ff 25 32 0e 03 00    	jmp    *0x30e32(%rip)        # 35198 <vkCreateShaderModule@Base>
    4366:	68 33 00 00 00       	push   $0x33
    436b:	e9 b0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>:
    4370:	ff 25 2a 0e 03 00    	jmp    *0x30e2a(%rip)        # 351a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@GLIBCXX_3.4.21>
    4376:	68 34 00 00 00       	push   $0x34
    437b:	e9 a0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004380 <vkUnmapMemory@plt>:
    4380:	ff 25 22 0e 03 00    	jmp    *0x30e22(%rip)        # 351a8 <vkUnmapMemory@Base>
    4386:	68 35 00 00 00       	push   $0x35
    438b:	e9 90 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004390 <memcpy@plt>:
    4390:	ff 25 1a 0e 03 00    	jmp    *0x30e1a(%rip)        # 351b0 <memcpy@GLIBC_2.14>
    4396:	68 36 00 00 00       	push   $0x36
    439b:	e9 80 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043a0 <vkDestroyDevice@plt>:
    43a0:	ff 25 12 0e 03 00    	jmp    *0x30e12(%rip)        # 351b8 <vkDestroyDevice@Base>
    43a6:	68 37 00 00 00       	push   $0x37
    43ab:	e9 70 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043b0 <vkCreatePipelineLayout@plt>:
    43b0:	ff 25 0a 0e 03 00    	jmp    *0x30e0a(%rip)        # 351c0 <vkCreatePipelineLayout@Base>
    43b6:	68 38 00 00 00       	push   $0x38
    43bb:	e9 60 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043c0 <sinf@plt>:
    43c0:	ff 25 02 0e 03 00    	jmp    *0x30e02(%rip)        # 351c8 <sinf@GLIBC_2.2.5>
    43c6:	68 39 00 00 00       	push   $0x39
    43cb:	e9 50 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043d0 <vkEnumerateInstanceExtensionProperties@plt>:
    43d0:	ff 25 fa 0d 03 00    	jmp    *0x30dfa(%rip)        # 351d0 <vkEnumerateInstanceExtensionProperties@Base>
    43d6:	68 3a 00 00 00       	push   $0x3a
    43db:	e9 40 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@plt>:
    43e0:	ff 25 f2 0d 03 00    	jmp    *0x30df2(%rip)        # 351d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@GLIBCXX_3.4.21>
    43e6:	68 3b 00 00 00       	push   $0x3b
    43eb:	e9 30 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043f0 <glfwWindowHint@plt>:
    43f0:	ff 25 ea 0d 03 00    	jmp    *0x30dea(%rip)        # 351e0 <glfwWindowHint@Base>
    43f6:	68 3c 00 00 00       	push   $0x3c
    43fb:	e9 20 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004400 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>:
    4400:	ff 25 e2 0d 03 00    	jmp    *0x30de2(%rip)        # 351e8 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@Base>
    4406:	68 3d 00 00 00       	push   $0x3d
    440b:	e9 10 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004410 <vkCmdBindPipeline@plt>:
    4410:	ff 25 da 0d 03 00    	jmp    *0x30dda(%rip)        # 351f0 <vkCmdBindPipeline@Base>
    4416:	68 3e 00 00 00       	push   $0x3e
    441b:	e9 00 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004420 <__cxa_atexit@plt>:
    4420:	ff 25 d2 0d 03 00    	jmp    *0x30dd2(%rip)        # 351f8 <__cxa_atexit@GLIBC_2.2.5>
    4426:	68 3f 00 00 00       	push   $0x3f
    442b:	e9 f0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004430 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>:
    4430:	ff 25 ca 0d 03 00    	jmp    *0x30dca(%rip)        # 35200 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@GLIBCXX_3.4.21>
    4436:	68 40 00 00 00       	push   $0x40
    443b:	e9 e0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004440 <vkMapMemory@plt>:
    4440:	ff 25 c2 0d 03 00    	jmp    *0x30dc2(%rip)        # 35208 <vkMapMemory@Base>
    4446:	68 41 00 00 00       	push   $0x41
    444b:	e9 d0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004450 <vkFreeMemory@plt>:
    4450:	ff 25 ba 0d 03 00    	jmp    *0x30dba(%rip)        # 35210 <vkFreeMemory@Base>
    4456:	68 42 00 00 00       	push   $0x42
    445b:	e9 c0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004460 <vkAllocateCommandBuffers@plt>:
    4460:	ff 25 b2 0d 03 00    	jmp    *0x30db2(%rip)        # 35218 <vkAllocateCommandBuffers@Base>
    4466:	68 43 00 00 00       	push   $0x43
    446b:	e9 b0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004470 <vkGetPhysicalDeviceProperties2@plt>:
    4470:	ff 25 aa 0d 03 00    	jmp    *0x30daa(%rip)        # 35220 <vkGetPhysicalDeviceProperties2@Base>
    4476:	68 44 00 00 00       	push   $0x44
    447b:	e9 a0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004480 <vkGetInstanceProcAddr@plt>:
    4480:	ff 25 a2 0d 03 00    	jmp    *0x30da2(%rip)        # 35228 <vkGetInstanceProcAddr@Base>
    4486:	68 45 00 00 00       	push   $0x45
    448b:	e9 90 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004490 <glfwPollEvents@plt>:
    4490:	ff 25 9a 0d 03 00    	jmp    *0x30d9a(%rip)        # 35230 <glfwPollEvents@Base>
    4496:	68 46 00 00 00       	push   $0x46
    449b:	e9 80 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044a0 <vkDestroyRenderPass@plt>:
    44a0:	ff 25 92 0d 03 00    	jmp    *0x30d92(%rip)        # 35238 <vkDestroyRenderPass@Base>
    44a6:	68 47 00 00 00       	push   $0x47
    44ab:	e9 70 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044b0 <vkCreateBuffer@plt>:
    44b0:	ff 25 8a 0d 03 00    	jmp    *0x30d8a(%rip)        # 35240 <vkCreateBuffer@Base>
    44b6:	68 48 00 00 00       	push   $0x48
    44bb:	e9 60 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    44c0:	ff 25 82 0d 03 00    	jmp    *0x30d82(%rip)        # 35248 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    44c6:	68 49 00 00 00       	push   $0x49
    44cb:	e9 50 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044d0 <_Znwm@plt>:
    44d0:	ff 25 7a 0d 03 00    	jmp    *0x30d7a(%rip)        # 35250 <_Znwm@GLIBCXX_3.4>
    44d6:	68 4a 00 00 00       	push   $0x4a
    44db:	e9 40 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044e0 <vkBeginCommandBuffer@plt>:
    44e0:	ff 25 72 0d 03 00    	jmp    *0x30d72(%rip)        # 35258 <vkBeginCommandBuffer@Base>
    44e6:	68 4b 00 00 00       	push   $0x4b
    44eb:	e9 30 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044f0 <_ZdlPvm@plt>:
    44f0:	ff 25 6a 0d 03 00    	jmp    *0x30d6a(%rip)        # 35260 <_ZdlPvm@CXXABI_1.3.9>
    44f6:	68 4c 00 00 00       	push   $0x4c
    44fb:	e9 20 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004500 <vkDestroyInstance@plt>:
    4500:	ff 25 62 0d 03 00    	jmp    *0x30d62(%rip)        # 35268 <vkDestroyInstance@Base>
    4506:	68 4d 00 00 00       	push   $0x4d
    450b:	e9 10 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004510 <glfwTerminate@plt>:
    4510:	ff 25 5a 0d 03 00    	jmp    *0x30d5a(%rip)        # 35270 <glfwTerminate@Base>
    4516:	68 4e 00 00 00       	push   $0x4e
    451b:	e9 00 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004520 <vkCreateImageView@plt>:
    4520:	ff 25 52 0d 03 00    	jmp    *0x30d52(%rip)        # 35278 <vkCreateImageView@Base>
    4526:	68 4f 00 00 00       	push   $0x4f
    452b:	e9 f0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004530 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    4530:	ff 25 4a 0d 03 00    	jmp    *0x30d4a(%rip)        # 35280 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    4536:	68 50 00 00 00       	push   $0x50
    453b:	e9 e0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004540 <_ZNSolsEPFRSoS_E@plt>:
    4540:	ff 25 42 0d 03 00    	jmp    *0x30d42(%rip)        # 35288 <_ZNSolsEPFRSoS_E@GLIBCXX_3.4>
    4546:	68 51 00 00 00       	push   $0x51
    454b:	e9 d0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@plt>:
    4550:	ff 25 3a 0d 03 00    	jmp    *0x30d3a(%rip)        # 35290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@GLIBCXX_3.4.21>
    4556:	68 52 00 00 00       	push   $0x52
    455b:	e9 c0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004560 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>:
    4560:	ff 25 32 0d 03 00    	jmp    *0x30d32(%rip)        # 35298 <vkGetPhysicalDeviceSurfaceSupportKHR@Base>
    4566:	68 53 00 00 00       	push   $0x53
    456b:	e9 b0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@plt>:
    4570:	ff 25 2a 0d 03 00    	jmp    *0x30d2a(%rip)        # 352a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@GLIBCXX_3.4.21>
    4576:	68 54 00 00 00       	push   $0x54
    457b:	e9 a0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004580 <_ZNSaIcED1Ev@plt>:
    4580:	ff 25 22 0d 03 00    	jmp    *0x30d22(%rip)        # 352a8 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    4586:	68 55 00 00 00       	push   $0x55
    458b:	e9 90 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004590 <vkDestroyFence@plt>:
    4590:	ff 25 1a 0d 03 00    	jmp    *0x30d1a(%rip)        # 352b0 <vkDestroyFence@Base>
    4596:	68 56 00 00 00       	push   $0x56
    459b:	e9 80 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045a0 <vkDestroyPipeline@plt>:
    45a0:	ff 25 12 0d 03 00    	jmp    *0x30d12(%rip)        # 352b8 <vkDestroyPipeline@Base>
    45a6:	68 57 00 00 00       	push   $0x57
    45ab:	e9 70 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@plt>:
    45b0:	ff 25 0a 0d 03 00    	jmp    *0x30d0a(%rip)        # 352c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@GLIBCXX_3.4.21>
    45b6:	68 58 00 00 00       	push   $0x58
    45bb:	e9 60 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@plt>:
    45c0:	ff 25 02 0d 03 00    	jmp    *0x30d02(%rip)        # 352c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@GLIBCXX_3.4.21>
    45c6:	68 59 00 00 00       	push   $0x59
    45cb:	e9 50 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045d0 <vkEnumerateInstanceLayerProperties@plt>:
    45d0:	ff 25 fa 0c 03 00    	jmp    *0x30cfa(%rip)        # 352d0 <vkEnumerateInstanceLayerProperties@Base>
    45d6:	68 5a 00 00 00       	push   $0x5a
    45db:	e9 40 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045e0 <glfwInit@plt>:
    45e0:	ff 25 f2 0c 03 00    	jmp    *0x30cf2(%rip)        # 352d8 <glfwInit@Base>
    45e6:	68 5b 00 00 00       	push   $0x5b
    45eb:	e9 30 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    45f0:	ff 25 ea 0c 03 00    	jmp    *0x30cea(%rip)        # 352e0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    45f6:	68 5c 00 00 00       	push   $0x5c
    45fb:	e9 20 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004600 <vkBindBufferMemory@plt>:
    4600:	ff 25 e2 0c 03 00    	jmp    *0x30ce2(%rip)        # 352e8 <vkBindBufferMemory@Base>
    4606:	68 5d 00 00 00       	push   $0x5d
    460b:	e9 10 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004610 <vkCreateSwapchainKHR@plt>:
    4610:	ff 25 da 0c 03 00    	jmp    *0x30cda(%rip)        # 352f0 <vkCreateSwapchainKHR@Base>
    4616:	68 5e 00 00 00       	push   $0x5e
    461b:	e9 00 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004620 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@plt>:
    4620:	ff 25 d2 0c 03 00    	jmp    *0x30cd2(%rip)        # 352f8 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@GLIBCXX_3.4>
    4626:	68 5f 00 00 00       	push   $0x5f
    462b:	e9 f0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004630 <vkDestroyShaderModule@plt>:
    4630:	ff 25 ca 0c 03 00    	jmp    *0x30cca(%rip)        # 35300 <vkDestroyShaderModule@Base>
    4636:	68 60 00 00 00       	push   $0x60
    463b:	e9 e0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004640 <vkCreateInstance@plt>:
    4640:	ff 25 c2 0c 03 00    	jmp    *0x30cc2(%rip)        # 35308 <vkCreateInstance@Base>
    4646:	68 61 00 00 00       	push   $0x61
    464b:	e9 d0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@plt>:
    4650:	ff 25 ba 0c 03 00    	jmp    *0x30cba(%rip)        # 35310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@GLIBCXX_3.4.21>
    4656:	68 62 00 00 00       	push   $0x62
    465b:	e9 c0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004660 <vkCreateFence@plt>:
    4660:	ff 25 b2 0c 03 00    	jmp    *0x30cb2(%rip)        # 35318 <vkCreateFence@Base>
    4666:	68 63 00 00 00       	push   $0x63
    466b:	e9 b0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004670 <vkResetCommandBuffer@plt>:
    4670:	ff 25 aa 0c 03 00    	jmp    *0x30caa(%rip)        # 35320 <vkResetCommandBuffer@Base>
    4676:	68 64 00 00 00       	push   $0x64
    467b:	e9 a0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004680 <vkDestroyPipelineLayout@plt>:
    4680:	ff 25 a2 0c 03 00    	jmp    *0x30ca2(%rip)        # 35328 <vkDestroyPipelineLayout@Base>
    4686:	68 65 00 00 00       	push   $0x65
    468b:	e9 90 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004690 <_ZNSi4readEPcl@plt>:
    4690:	ff 25 9a 0c 03 00    	jmp    *0x30c9a(%rip)        # 35330 <_ZNSi4readEPcl@GLIBCXX_3.4>
    4696:	68 66 00 00 00       	push   $0x66
    469b:	e9 80 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046a0 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>:
    46a0:	ff 25 92 0c 03 00    	jmp    *0x30c92(%rip)        # 35338 <_ZNSi5seekgESt4fposI11__mbstate_tE@GLIBCXX_3.4>
    46a6:	68 67 00 00 00       	push   $0x67
    46ab:	e9 70 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046b0 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>:
    46b0:	ff 25 8a 0c 03 00    	jmp    *0x30c8a(%rip)        # 35340 <vkGetPhysicalDeviceSurfaceFormatsKHR@Base>
    46b6:	68 68 00 00 00       	push   $0x68
    46bb:	e9 60 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046c0 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>:
    46c0:	ff 25 82 0c 03 00    	jmp    *0x30c82(%rip)        # 35348 <vkGetPhysicalDeviceSurfacePresentModesKHR@Base>
    46c6:	68 69 00 00 00       	push   $0x69
    46cb:	e9 50 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046d0 <vkQueueSubmit@plt>:
    46d0:	ff 25 7a 0c 03 00    	jmp    *0x30c7a(%rip)        # 35350 <vkQueueSubmit@Base>
    46d6:	68 6a 00 00 00       	push   $0x6a
    46db:	e9 40 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046e0 <vkGetDeviceQueue@plt>:
    46e0:	ff 25 72 0c 03 00    	jmp    *0x30c72(%rip)        # 35358 <vkGetDeviceQueue@Base>
    46e6:	68 6b 00 00 00       	push   $0x6b
    46eb:	e9 30 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046f0 <_ZNSolsEj@plt>:
    46f0:	ff 25 6a 0c 03 00    	jmp    *0x30c6a(%rip)        # 35360 <_ZNSolsEj@GLIBCXX_3.4>
    46f6:	68 6c 00 00 00       	push   $0x6c
    46fb:	e9 20 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004700 <vkCreateFramebuffer@plt>:
    4700:	ff 25 62 0c 03 00    	jmp    *0x30c62(%rip)        # 35368 <vkCreateFramebuffer@Base>
    4706:	68 6d 00 00 00       	push   $0x6d
    470b:	e9 10 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004710 <glfwGetWindowUserPointer@plt>:
    4710:	ff 25 5a 0c 03 00    	jmp    *0x30c5a(%rip)        # 35370 <glfwGetWindowUserPointer@Base>
    4716:	68 6e 00 00 00       	push   $0x6e
    471b:	e9 00 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>:
    4720:	ff 25 52 0c 03 00    	jmp    *0x30c52(%rip)        # 35378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@GLIBCXX_3.4.21>
    4726:	68 6f 00 00 00       	push   $0x6f
    472b:	e9 f0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004730 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
    4730:	ff 25 4a 0c 03 00    	jmp    *0x30c4a(%rip)        # 35380 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
    4736:	68 70 00 00 00       	push   $0x70
    473b:	e9 e0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004740 <vkEnumerateDeviceExtensionProperties@plt>:
    4740:	ff 25 42 0c 03 00    	jmp    *0x30c42(%rip)        # 35388 <vkEnumerateDeviceExtensionProperties@Base>
    4746:	68 71 00 00 00       	push   $0x71
    474b:	e9 d0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004750 <vkCreateSemaphore@plt>:
    4750:	ff 25 3a 0c 03 00    	jmp    *0x30c3a(%rip)        # 35390 <vkCreateSemaphore@Base>
    4756:	68 72 00 00 00       	push   $0x72
    475b:	e9 c0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004760 <vkCmdBeginRenderPass@plt>:
    4760:	ff 25 32 0c 03 00    	jmp    *0x30c32(%rip)        # 35398 <vkCmdBeginRenderPass@Base>
    4766:	68 73 00 00 00       	push   $0x73
    476b:	e9 b0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004770 <vkDestroyCommandPool@plt>:
    4770:	ff 25 2a 0c 03 00    	jmp    *0x30c2a(%rip)        # 353a0 <vkDestroyCommandPool@Base>
    4776:	68 74 00 00 00       	push   $0x74
    477b:	e9 a0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004780 <vkCmdBindIndexBuffer@plt>:
    4780:	ff 25 22 0c 03 00    	jmp    *0x30c22(%rip)        # 353a8 <vkCmdBindIndexBuffer@Base>
    4786:	68 75 00 00 00       	push   $0x75
    478b:	e9 90 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004790 <vkCmdBindVertexBuffers@plt>:
    4790:	ff 25 1a 0c 03 00    	jmp    *0x30c1a(%rip)        # 353b0 <vkCmdBindVertexBuffers@Base>
    4796:	68 76 00 00 00       	push   $0x76
    479b:	e9 80 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047a0 <_ZNSaIcEC2ERKS_@plt>:
    47a0:	ff 25 12 0c 03 00    	jmp    *0x30c12(%rip)        # 353b8 <_ZNSaIcEC2ERKS_@GLIBCXX_3.4>
    47a6:	68 77 00 00 00       	push   $0x77
    47ab:	e9 70 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047b0 <vkCmdCopyBuffer@plt>:
    47b0:	ff 25 0a 0c 03 00    	jmp    *0x30c0a(%rip)        # 353c0 <vkCmdCopyBuffer@Base>
    47b6:	68 78 00 00 00       	push   $0x78
    47bb:	e9 60 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047c0 <tanf@plt>:
    47c0:	ff 25 02 0c 03 00    	jmp    *0x30c02(%rip)        # 353c8 <tanf@GLIBC_2.2.5>
    47c6:	68 79 00 00 00       	push   $0x79
    47cb:	e9 50 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047d0 <__cxa_rethrow@plt>:
    47d0:	ff 25 fa 0b 03 00    	jmp    *0x30bfa(%rip)        # 353d0 <__cxa_rethrow@CXXABI_1.3>
    47d6:	68 7a 00 00 00       	push   $0x7a
    47db:	e9 40 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047e0 <vkCreateDevice@plt>:
    47e0:	ff 25 f2 0b 03 00    	jmp    *0x30bf2(%rip)        # 353d8 <vkCreateDevice@Base>
    47e6:	68 7b 00 00 00       	push   $0x7b
    47eb:	e9 30 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047f0 <glfwSetFramebufferSizeCallback@plt>:
    47f0:	ff 25 ea 0b 03 00    	jmp    *0x30bea(%rip)        # 353e0 <glfwSetFramebufferSizeCallback@Base>
    47f6:	68 7c 00 00 00       	push   $0x7c
    47fb:	e9 20 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004800 <_ZNSt8ios_base4InitC1Ev@plt>:
    4800:	ff 25 e2 0b 03 00    	jmp    *0x30be2(%rip)        # 353e8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    4806:	68 7d 00 00 00       	push   $0x7d
    480b:	e9 10 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004810 <glfwCreateWindowSurface@plt>:
    4810:	ff 25 da 0b 03 00    	jmp    *0x30bda(%rip)        # 353f0 <glfwCreateWindowSurface@Base>
    4816:	68 7e 00 00 00       	push   $0x7e
    481b:	e9 00 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004820 <vkResetFences@plt>:
    4820:	ff 25 d2 0b 03 00    	jmp    *0x30bd2(%rip)        # 353f8 <vkResetFences@Base>
    4826:	68 7f 00 00 00       	push   $0x7f
    482b:	e9 f0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004830 <glfwCreateWindow@plt>:
    4830:	ff 25 ca 0b 03 00    	jmp    *0x30bca(%rip)        # 35400 <glfwCreateWindow@Base>
    4836:	68 80 00 00 00       	push   $0x80
    483b:	e9 e0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
    4840:	ff 25 c2 0b 03 00    	jmp    *0x30bc2(%rip)        # 35408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
    4846:	68 81 00 00 00       	push   $0x81
    484b:	e9 d0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004850 <vkDestroyDescriptorSetLayout@plt>:
    4850:	ff 25 ba 0b 03 00    	jmp    *0x30bba(%rip)        # 35410 <vkDestroyDescriptorSetLayout@Base>
    4856:	68 82 00 00 00       	push   $0x82
    485b:	e9 c0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004860 <vkQueuePresentKHR@plt>:
    4860:	ff 25 b2 0b 03 00    	jmp    *0x30bb2(%rip)        # 35418 <vkQueuePresentKHR@Base>
    4866:	68 83 00 00 00       	push   $0x83
    486b:	e9 b0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004870 <vkGetPhysicalDeviceMemoryProperties@plt>:
    4870:	ff 25 aa 0b 03 00    	jmp    *0x30baa(%rip)        # 35420 <vkGetPhysicalDeviceMemoryProperties@Base>
    4876:	68 84 00 00 00       	push   $0x84
    487b:	e9 a0 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004880 <glfwGetFramebufferSize@plt>:
    4880:	ff 25 a2 0b 03 00    	jmp    *0x30ba2(%rip)        # 35428 <glfwGetFramebufferSize@Base>
    4886:	68 85 00 00 00       	push   $0x85
    488b:	e9 90 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004890 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE7is_openEv@plt>:
    4890:	ff 25 9a 0b 03 00    	jmp    *0x30b9a(%rip)        # 35430 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE7is_openEv@GLIBCXX_3.4>
    4896:	68 86 00 00 00       	push   $0x86
    489b:	e9 80 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048a0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
    48a0:	ff 25 92 0b 03 00    	jmp    *0x30b92(%rip)        # 35438 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
    48a6:	68 87 00 00 00       	push   $0x87
    48ab:	e9 70 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048b0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    48b0:	ff 25 8a 0b 03 00    	jmp    *0x30b8a(%rip)        # 35440 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    48b6:	68 88 00 00 00       	push   $0x88
    48bb:	e9 60 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048c0 <memmove@plt>:
    48c0:	ff 25 82 0b 03 00    	jmp    *0x30b82(%rip)        # 35448 <memmove@GLIBC_2.2.5>
    48c6:	68 89 00 00 00       	push   $0x89
    48cb:	e9 50 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048d0 <__cxa_end_catch@plt>:
    48d0:	ff 25 7a 0b 03 00    	jmp    *0x30b7a(%rip)        # 35450 <__cxa_end_catch@CXXABI_1.3>
    48d6:	68 8a 00 00 00       	push   $0x8a
    48db:	e9 40 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048e0 <vkAllocateMemory@plt>:
    48e0:	ff 25 72 0b 03 00    	jmp    *0x30b72(%rip)        # 35458 <vkAllocateMemory@Base>
    48e6:	68 8b 00 00 00       	push   $0x8b
    48eb:	e9 30 f7 ff ff       	jmp    4020 <_init+0x20>

00000000000048f0 <vkDestroyFramebuffer@plt>:
    48f0:	ff 25 6a 0b 03 00    	jmp    *0x30b6a(%rip)        # 35460 <vkDestroyFramebuffer@Base>
    48f6:	68 8c 00 00 00       	push   $0x8c
    48fb:	e9 20 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004900 <__cxa_throw@plt>:
    4900:	ff 25 62 0b 03 00    	jmp    *0x30b62(%rip)        # 35468 <__cxa_throw@CXXABI_1.3>
    4906:	68 8d 00 00 00       	push   $0x8d
    490b:	e9 10 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@plt>:
    4910:	ff 25 5a 0b 03 00    	jmp    *0x30b5a(%rip)        # 35470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@GLIBCXX_3.4.21>
    4916:	68 8e 00 00 00       	push   $0x8e
    491b:	e9 00 f7 ff ff       	jmp    4020 <_init+0x20>

0000000000004920 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@plt>:
    4920:	ff 25 52 0b 03 00    	jmp    *0x30b52(%rip)        # 35478 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@GLIBCXX_3.4>
    4926:	68 8f 00 00 00       	push   $0x8f
    492b:	e9 f0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004930 <_ZNSolsEi@plt>:
    4930:	ff 25 4a 0b 03 00    	jmp    *0x30b4a(%rip)        # 35480 <_ZNSolsEi@GLIBCXX_3.4>
    4936:	68 90 00 00 00       	push   $0x90
    493b:	e9 e0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004940 <_ZNSi5tellgEv@plt>:
    4940:	ff 25 42 0b 03 00    	jmp    *0x30b42(%rip)        # 35488 <_ZNSi5tellgEv@GLIBCXX_3.4>
    4946:	68 91 00 00 00       	push   $0x91
    494b:	e9 d0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004950 <vkQueueWaitIdle@plt>:
    4950:	ff 25 3a 0b 03 00    	jmp    *0x30b3a(%rip)        # 35490 <vkQueueWaitIdle@Base>
    4956:	68 92 00 00 00       	push   $0x92
    495b:	e9 c0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004960 <vkDestroySurfaceKHR@plt>:
    4960:	ff 25 32 0b 03 00    	jmp    *0x30b32(%rip)        # 35498 <vkDestroySurfaceKHR@Base>
    4966:	68 93 00 00 00       	push   $0x93
    496b:	e9 b0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004970 <_Unwind_Resume@plt>:
    4970:	ff 25 2a 0b 03 00    	jmp    *0x30b2a(%rip)        # 354a0 <_Unwind_Resume@GCC_3.0>
    4976:	68 94 00 00 00       	push   $0x94
    497b:	e9 a0 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004980 <_ZNSaIcEC1Ev@plt>:
    4980:	ff 25 22 0b 03 00    	jmp    *0x30b22(%rip)        # 354a8 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    4986:	68 95 00 00 00       	push   $0x95
    498b:	e9 90 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004990 <vkDestroyImageView@plt>:
    4990:	ff 25 1a 0b 03 00    	jmp    *0x30b1a(%rip)        # 354b0 <vkDestroyImageView@Base>
    4996:	68 96 00 00 00       	push   $0x96
    499b:	e9 80 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
    49a0:	ff 25 12 0b 03 00    	jmp    *0x30b12(%rip)        # 354b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
    49a6:	68 97 00 00 00       	push   $0x97
    49ab:	e9 70 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049b0 <vkCreateDescriptorSetLayout@plt>:
    49b0:	ff 25 0a 0b 03 00    	jmp    *0x30b0a(%rip)        # 354c0 <vkCreateDescriptorSetLayout@Base>
    49b6:	68 98 00 00 00       	push   $0x98
    49bb:	e9 60 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049c0 <__cxa_guard_acquire@plt>:
    49c0:	ff 25 02 0b 03 00    	jmp    *0x30b02(%rip)        # 354c8 <__cxa_guard_acquire@CXXABI_1.3>
    49c6:	68 99 00 00 00       	push   $0x99
    49cb:	e9 50 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049d0 <sqrtf@plt>:
    49d0:	ff 25 fa 0a 03 00    	jmp    *0x30afa(%rip)        # 354d0 <sqrtf@GLIBC_2.2.5>
    49d6:	68 9a 00 00 00       	push   $0x9a
    49db:	e9 40 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049e0 <_ZNSt9exceptionD2Ev@plt>:
    49e0:	ff 25 f2 0a 03 00    	jmp    *0x30af2(%rip)        # 354d8 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    49e6:	68 9b 00 00 00       	push   $0x9b
    49eb:	e9 30 f6 ff ff       	jmp    4020 <_init+0x20>

00000000000049f0 <glfwWindowShouldClose@plt>:
    49f0:	ff 25 ea 0a 03 00    	jmp    *0x30aea(%rip)        # 354e0 <glfwWindowShouldClose@Base>
    49f6:	68 9c 00 00 00       	push   $0x9c
    49fb:	e9 20 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004a00 <vkEndCommandBuffer@plt>:
    4a00:	ff 25 e2 0a 03 00    	jmp    *0x30ae2(%rip)        # 354e8 <vkEndCommandBuffer@Base>
    4a06:	68 9d 00 00 00       	push   $0x9d
    4a0b:	e9 10 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@plt>:
    4a10:	ff 25 da 0a 03 00    	jmp    *0x30ada(%rip)        # 354f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@GLIBCXX_3.4.21>
    4a16:	68 9e 00 00 00       	push   $0x9e
    4a1b:	e9 00 f6 ff ff       	jmp    4020 <_init+0x20>

0000000000004a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@plt>:
    4a20:	ff 25 d2 0a 03 00    	jmp    *0x30ad2(%rip)        # 354f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@GLIBCXX_3.4.21>
    4a26:	68 9f 00 00 00       	push   $0x9f
    4a2b:	e9 f0 f5 ff ff       	jmp    4020 <_init+0x20>

Disassembly of section .plt.got:

0000000000004a30 <__cxa_finalize@plt>:
    4a30:	ff 25 6a 05 03 00    	jmp    *0x3056a(%rip)        # 34fa0 <__cxa_finalize@GLIBC_2.2.5>
    4a36:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000004a40 <_start>:
    4a40:	31 ed                	xor    %ebp,%ebp
    4a42:	49 89 d1             	mov    %rdx,%r9
    4a45:	5e                   	pop    %rsi
    4a46:	48 89 e2             	mov    %rsp,%rdx
    4a49:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    4a4d:	50                   	push   %rax
    4a4e:	54                   	push   %rsp
    4a4f:	45 31 c0             	xor    %r8d,%r8d
    4a52:	31 c9                	xor    %ecx,%ecx
    4a54:	48 8d 3d a9 01 00 00 	lea    0x1a9(%rip),%rdi        # 4c04 <main>
    4a5b:	ff 15 4f 05 03 00    	call   *0x3054f(%rip)        # 34fb0 <__libc_start_main@GLIBC_2.34>
    4a61:	f4                   	hlt
    4a62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    4a69:	00 00 00 
    4a6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004a70 <deregister_tm_clones>:
    4a70:	48 8d 3d a9 0a 03 00 	lea    0x30aa9(%rip),%rdi        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4a77:	48 8d 05 a2 0a 03 00 	lea    0x30aa2(%rip),%rax        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4a7e:	48 39 f8             	cmp    %rdi,%rax
    4a81:	74 15                	je     4a98 <deregister_tm_clones+0x28>
    4a83:	48 8b 05 36 05 03 00 	mov    0x30536(%rip),%rax        # 34fc0 <_ITM_deregisterTMCloneTable@Base>
    4a8a:	48 85 c0             	test   %rax,%rax
    4a8d:	74 09                	je     4a98 <deregister_tm_clones+0x28>
    4a8f:	ff e0                	jmp    *%rax
    4a91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4a98:	c3                   	ret
    4a99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004aa0 <register_tm_clones>:
    4aa0:	48 8d 3d 79 0a 03 00 	lea    0x30a79(%rip),%rdi        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4aa7:	48 8d 35 72 0a 03 00 	lea    0x30a72(%rip),%rsi        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4aae:	48 29 fe             	sub    %rdi,%rsi
    4ab1:	48 89 f0             	mov    %rsi,%rax
    4ab4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    4ab8:	48 c1 f8 03          	sar    $0x3,%rax
    4abc:	48 01 c6             	add    %rax,%rsi
    4abf:	48 d1 fe             	sar    %rsi
    4ac2:	74 14                	je     4ad8 <register_tm_clones+0x38>
    4ac4:	48 8b 05 05 05 03 00 	mov    0x30505(%rip),%rax        # 34fd0 <_ITM_registerTMCloneTable@Base>
    4acb:	48 85 c0             	test   %rax,%rax
    4ace:	74 08                	je     4ad8 <register_tm_clones+0x38>
    4ad0:	ff e0                	jmp    *%rax
    4ad2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4ad8:	c3                   	ret
    4ad9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004ae0 <__do_global_dtors_aux>:
    4ae0:	f3 0f 1e fa          	endbr64
    4ae4:	80 3d 45 0b 03 00 00 	cmpb   $0x0,0x30b45(%rip)        # 35630 <completed.0>
    4aeb:	75 2b                	jne    4b18 <__do_global_dtors_aux+0x38>
    4aed:	55                   	push   %rbp
    4aee:	48 83 3d aa 04 03 00 	cmpq   $0x0,0x304aa(%rip)        # 34fa0 <__cxa_finalize@GLIBC_2.2.5>
    4af5:	00 
    4af6:	48 89 e5             	mov    %rsp,%rbp
    4af9:	74 0c                	je     4b07 <__do_global_dtors_aux+0x27>
    4afb:	48 8b 3d 06 0a 03 00 	mov    0x30a06(%rip),%rdi        # 35508 <__dso_handle>
    4b02:	e8 29 ff ff ff       	call   4a30 <__cxa_finalize@plt>
    4b07:	e8 64 ff ff ff       	call   4a70 <deregister_tm_clones>
    4b0c:	c6 05 1d 0b 03 00 01 	movb   $0x1,0x30b1d(%rip)        # 35630 <completed.0>
    4b13:	5d                   	pop    %rbp
    4b14:	c3                   	ret
    4b15:	0f 1f 00             	nopl   (%rax)
    4b18:	c3                   	ret
    4b19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004b20 <frame_dummy>:
    4b20:	f3 0f 1e fa          	endbr64
    4b24:	e9 77 ff ff ff       	jmp    4aa0 <register_tm_clones>

0000000000004b29 <_Z14protected_mainv>:
#include <vulkan_app.hpp>

int protected_main() {
    4b29:	55                   	push   %rbp
    4b2a:	48 89 e5             	mov    %rsp,%rbp
    4b2d:	53                   	push   %rbx
    4b2e:	48 81 ec 28 02 00 00 	sub    $0x228,%rsp
  VulkanApp app;
    4b35:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4b3c:	48 89 c7             	mov    %rax,%rdi
    4b3f:	e8 2e da 00 00       	call   12572 <_ZN9VulkanAppC1Ev>
  app.run();
    4b44:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4b4b:	48 89 c7             	mov    %rax,%rdi
    4b4e:	e8 bb e0 00 00       	call   12c0e <_ZN9VulkanApp3runEv>
  app.writeInfo("info.log");
    4b53:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4b57:	48 89 c7             	mov    %rax,%rdi
    4b5a:	e8 21 fe ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    4b5f:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    4b63:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4b67:	48 8d 0d ca ba 01 00 	lea    0x1baca(%rip),%rcx        # 20638 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    4b6e:	48 89 ce             	mov    %rcx,%rsi
    4b71:	48 89 c7             	mov    %rax,%rdi
    4b74:	e8 af 06 00 00       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    4b79:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4b7d:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4b84:	48 89 d6             	mov    %rdx,%rsi
    4b87:	48 89 c7             	mov    %rax,%rdi
    4b8a:	e8 c9 e0 00 00       	call   12c58 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    4b8f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4b93:	48 89 c7             	mov    %rax,%rdi
    4b96:	e8 e5 f6 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    4b9b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4b9f:	48 89 c7             	mov    %rax,%rdi
    4ba2:	e8 d9 f9 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
  return EXIT_SUCCESS;
    4ba7:	bb 00 00 00 00       	mov    $0x0,%ebx
}
    4bac:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4bb3:	48 89 c7             	mov    %rax,%rdi
    4bb6:	e8 71 dd 00 00       	call   1292c <_ZN9VulkanAppD1Ev>
  return EXIT_SUCCESS;
    4bbb:	89 d8                	mov    %ebx,%eax
    4bbd:	eb 3f                	jmp    4bfe <_Z14protected_mainv+0xd5>
  app.writeInfo("info.log");
    4bbf:	48 89 c3             	mov    %rax,%rbx
    4bc2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bc6:	48 89 c7             	mov    %rax,%rdi
    4bc9:	e8 b2 f6 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    4bce:	eb 03                	jmp    4bd3 <_Z14protected_mainv+0xaa>
    4bd0:	48 89 c3             	mov    %rax,%rbx
    4bd3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    4bd7:	48 89 c7             	mov    %rax,%rdi
    4bda:	e8 a1 f9 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    4bdf:	eb 03                	jmp    4be4 <_Z14protected_mainv+0xbb>
}
    4be1:	48 89 c3             	mov    %rax,%rbx
    4be4:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    4beb:	48 89 c7             	mov    %rax,%rdi
    4bee:	e8 39 dd 00 00       	call   1292c <_ZN9VulkanAppD1Ev>
    4bf3:	48 89 d8             	mov    %rbx,%rax
    4bf6:	48 89 c7             	mov    %rax,%rdi
    4bf9:	e8 72 fd ff ff       	call   4970 <_Unwind_Resume@plt>
    4bfe:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    4c02:	c9                   	leave
    4c03:	c3                   	ret

0000000000004c04 <main>:

int main() {
    4c04:	55                   	push   %rbp
    4c05:	48 89 e5             	mov    %rsp,%rbp
    4c08:	53                   	push   %rbx
    4c09:	48 83 ec 18          	sub    $0x18,%rsp
  try {
    return protected_main();
    4c0d:	e8 17 ff ff ff       	call   4b29 <_Z14protected_mainv>
    4c12:	e9 aa 00 00 00       	jmp    4cc1 <main+0xbd>
  } catch (const std::exception &e) {
    std::cerr << e.what() << '\n';
  } catch (...) {
    std::cerr << "Uncaught exception.\n";
  }
  return EXIT_FAILURE;
    4c17:	b8 01 00 00 00       	mov    $0x1,%eax
    4c1c:	e9 a0 00 00 00       	jmp    4cc1 <main+0xbd>
  } catch (const std::exception &e) {
    4c21:	48 83 fa 01          	cmp    $0x1,%rdx
    4c25:	75 49                	jne    4c70 <main+0x6c>
    4c27:	48 89 c7             	mov    %rax,%rdi
    4c2a:	e8 41 f5 ff ff       	call   4170 <__cxa_begin_catch@plt>
    4c2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    std::cerr << e.what() << '\n';
    4c33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c37:	48 8b 00             	mov    (%rax),%rax
    4c3a:	48 83 c0 10          	add    $0x10,%rax
    4c3e:	48 8b 10             	mov    (%rax),%rdx
    4c41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c45:	48 89 c7             	mov    %rax,%rdi
    4c48:	ff d2                	call   *%rdx
    4c4a:	48 89 c6             	mov    %rax,%rsi
    4c4d:	48 8d 05 cc 08 03 00 	lea    0x308cc(%rip),%rax        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4c54:	48 89 c7             	mov    %rax,%rdi
    4c57:	e8 64 f8 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    4c5c:	be 0a 00 00 00       	mov    $0xa,%esi
    4c61:	48 89 c7             	mov    %rax,%rdi
    4c64:	e8 87 f9 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  } catch (...) {
    4c69:	e8 62 fc ff ff       	call   48d0 <__cxa_end_catch@plt>
    4c6e:	eb a7                	jmp    4c17 <main+0x13>
    4c70:	48 89 c7             	mov    %rax,%rdi
    4c73:	e8 f8 f4 ff ff       	call   4170 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception.\n";
    4c78:	48 8d 05 c2 b9 01 00 	lea    0x1b9c2(%rip),%rax        # 20641 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x11>
    4c7f:	48 89 c6             	mov    %rax,%rsi
    4c82:	48 8d 05 97 08 03 00 	lea    0x30897(%rip),%rax        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    4c89:	48 89 c7             	mov    %rax,%rdi
    4c8c:	e8 2f f8 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  }
    4c91:	e8 3a fc ff ff       	call   48d0 <__cxa_end_catch@plt>
    4c96:	e9 7c ff ff ff       	jmp    4c17 <main+0x13>
  } catch (...) {
    4c9b:	48 89 c3             	mov    %rax,%rbx
    4c9e:	e8 2d fc ff ff       	call   48d0 <__cxa_end_catch@plt>
    4ca3:	48 89 d8             	mov    %rbx,%rax
    4ca6:	48 89 c7             	mov    %rax,%rdi
    4ca9:	e8 c2 fc ff ff       	call   4970 <_Unwind_Resume@plt>
  }
    4cae:	48 89 c3             	mov    %rax,%rbx
    4cb1:	e8 1a fc ff ff       	call   48d0 <__cxa_end_catch@plt>
    4cb6:	48 89 d8             	mov    %rbx,%rax
    4cb9:	48 89 c7             	mov    %rax,%rdi
    4cbc:	e8 af fc ff ff       	call   4970 <_Unwind_Resume@plt>
    4cc1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    4cc5:	c9                   	leave
    4cc6:	c3                   	ret

0000000000004cc7 <_Z41__static_initialization_and_destruction_0ii>:
    4cc7:	55                   	push   %rbp
    4cc8:	48 89 e5             	mov    %rsp,%rbp
    4ccb:	41 57                	push   %r15
    4ccd:	41 56                	push   %r14
    4ccf:	41 55                	push   %r13
    4cd1:	41 54                	push   %r12
    4cd3:	53                   	push   %rbx
    4cd4:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    4cdb:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%rbp)
    4ce1:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%rbp)
    4ce7:	83 bd 5c ff ff ff 01 	cmpl   $0x1,-0xa4(%rbp)
    4cee:	0f 85 ca 02 00 00    	jne    4fbe <_Z41__static_initialization_and_destruction_0ii+0x2f7>
    4cf4:	81 bd 58 ff ff ff ff 	cmpl   $0xffff,-0xa8(%rbp)
    4cfb:	ff 00 00 
    4cfe:	0f 85 ba 02 00 00    	jne    4fbe <_Z41__static_initialization_and_destruction_0ii+0x2f7>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    4d04:	48 8d 05 26 09 03 00 	lea    0x30926(%rip),%rax        # 35631 <_ZStL8__ioinit>
    4d0b:	48 89 c7             	mov    %rax,%rdi
    4d0e:	e8 ed fa ff ff       	call   4800 <_ZNSt8ios_base4InitC1Ev@plt>
    4d13:	48 8d 05 ee 07 03 00 	lea    0x307ee(%rip),%rax        # 35508 <__dso_handle>
    4d1a:	48 89 c2             	mov    %rax,%rdx
    4d1d:	48 8d 05 0d 09 03 00 	lea    0x3090d(%rip),%rax        # 35631 <_ZStL8__ioinit>
    4d24:	48 89 c6             	mov    %rax,%rsi
    4d27:	48 8b 05 aa 02 03 00 	mov    0x302aa(%rip),%rax        # 34fd8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    4d2e:	48 89 c7             	mov    %rax,%rdi
    4d31:	e8 ea f6 ff ff       	call   4420 <__cxa_atexit@plt>
#include <vector>
#include <vkh.hpp>

namespace shader {

inline const std::vector<uint16_t> triangle_indices{0, 1, 2, 2, 3, 0};
    4d36:	48 8d 05 3b 09 03 00 	lea    0x3093b(%rip),%rax        # 35678 <_ZGVN6shader16triangle_indicesE>
    4d3d:	0f b6 00             	movzbl (%rax),%eax
    4d40:	84 c0                	test   %al,%al
    4d42:	0f 85 b9 00 00 00    	jne    4e01 <_Z41__static_initialization_and_destruction_0ii+0x13a>
    4d48:	48 8d 05 29 09 03 00 	lea    0x30929(%rip),%rax        # 35678 <_ZGVN6shader16triangle_indicesE>
    4d4f:	c6 00 01             	movb   $0x1,(%rax)
    4d52:	66 c7 85 62 ff ff ff 	movw   $0x0,-0x9e(%rbp)
    4d59:	00 00 
    4d5b:	66 c7 85 64 ff ff ff 	movw   $0x1,-0x9c(%rbp)
    4d62:	01 00 
    4d64:	66 c7 85 66 ff ff ff 	movw   $0x2,-0x9a(%rbp)
    4d6b:	02 00 
    4d6d:	66 c7 85 68 ff ff ff 	movw   $0x2,-0x98(%rbp)
    4d74:	02 00 
    4d76:	66 c7 85 6a ff ff ff 	movw   $0x3,-0x96(%rbp)
    4d7d:	03 00 
    4d7f:	66 c7 85 6c ff ff ff 	movw   $0x0,-0x94(%rbp)
    4d86:	00 00 
    4d88:	48 8d 85 62 ff ff ff 	lea    -0x9e(%rbp),%rax
    4d8f:	49 89 c6             	mov    %rax,%r14
    4d92:	41 bf 06 00 00 00    	mov    $0x6,%r15d
    4d98:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    4d9f:	48 89 c7             	mov    %rax,%rdi
    4da2:	e8 01 03 00 00       	call   50a8 <_ZNSaItEC1Ev>
    4da7:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    4dae:	4c 89 f6             	mov    %r14,%rsi
    4db1:	4c 89 ff             	mov    %r15,%rdi
    4db4:	4c 89 f1             	mov    %r14,%rcx
    4db7:	4c 89 fb             	mov    %r15,%rbx
    4dba:	48 89 da             	mov    %rbx,%rdx
    4dbd:	48 89 c1             	mov    %rax,%rcx
    4dc0:	48 8d 05 79 08 03 00 	lea    0x30879(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
    4dc7:	48 89 c7             	mov    %rax,%rdi
    4dca:	e8 11 03 00 00       	call   50e0 <_ZNSt6vectorItSaItEEC1ESt16initializer_listItERKS0_>
    4dcf:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    4dd6:	48 89 c7             	mov    %rax,%rdi
    4dd9:	e8 e6 02 00 00       	call   50c4 <_ZNSaItED1Ev>
    4dde:	48 8d 05 23 07 03 00 	lea    0x30723(%rip),%rax        # 35508 <__dso_handle>
    4de5:	48 89 c2             	mov    %rax,%rdx
    4de8:	48 8d 05 51 08 03 00 	lea    0x30851(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
    4def:	48 89 c6             	mov    %rax,%rsi
    4df2:	48 8d 05 17 15 00 00 	lea    0x1517(%rip),%rax        # 6310 <_ZNSt6vectorItSaItEED1Ev>
    4df9:	48 89 c7             	mov    %rax,%rdi
    4dfc:	e8 1f f6 ff ff       	call   4420 <__cxa_atexit@plt>
inline const std::vector<vkh::Vertex2D_RGB> triangle_index_data{
    4e01:	48 8d 05 78 08 03 00 	lea    0x30878(%rip),%rax        # 35680 <_ZGVN6shader19triangle_index_dataE>
    4e08:	0f b6 00             	movzbl (%rax),%eax
    4e0b:	84 c0                	test   %al,%al
    4e0d:	0f 85 ab 01 00 00    	jne    4fbe <_Z41__static_initialization_and_destruction_0ii+0x2f7>
    4e13:	48 8d 05 66 08 03 00 	lea    0x30866(%rip),%rax        # 35680 <_ZGVN6shader19triangle_index_dataE>
    4e1a:	c6 00 01             	movb   $0x1,(%rax)
    {{-0.5f, -0.5f}, {1.0f, 0.0f, 0.0f}},
    {{0.5f, -0.5f}, {0.0f, 1.0f, 0.0f}},
    {{0.5f, 0.5f}, {0.0f, 0.0f, 1.0f}},
    {{-0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}}};
    4e1d:	f3 0f 10 05 9f b8 01 	movss  0x1b89f(%rip),%xmm0        # 206c4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x94>
    4e24:	00 
    4e25:	f3 0f 11 85 70 ff ff 	movss  %xmm0,-0x90(%rbp)
    4e2c:	ff 
    4e2d:	f3 0f 10 05 8f b8 01 	movss  0x1b88f(%rip),%xmm0        # 206c4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x94>
    4e34:	00 
    4e35:	f3 0f 11 85 74 ff ff 	movss  %xmm0,-0x8c(%rbp)
    4e3c:	ff 
    4e3d:	f3 0f 10 05 83 b8 01 	movss  0x1b883(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4e44:	00 
    4e45:	f3 0f 11 85 78 ff ff 	movss  %xmm0,-0x88(%rbp)
    4e4c:	ff 
    4e4d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4e51:	f3 0f 11 85 7c ff ff 	movss  %xmm0,-0x84(%rbp)
    4e58:	ff 
    4e59:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4e5d:	f3 0f 11 45 80       	movss  %xmm0,-0x80(%rbp)
    4e62:	f3 0f 10 05 62 b8 01 	movss  0x1b862(%rip),%xmm0        # 206cc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9c>
    4e69:	00 
    4e6a:	f3 0f 11 45 84       	movss  %xmm0,-0x7c(%rbp)
    4e6f:	f3 0f 10 05 4d b8 01 	movss  0x1b84d(%rip),%xmm0        # 206c4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x94>
    4e76:	00 
    4e77:	f3 0f 11 45 88       	movss  %xmm0,-0x78(%rbp)
    4e7c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4e80:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)
    4e85:	f3 0f 10 05 3b b8 01 	movss  0x1b83b(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4e8c:	00 
    4e8d:	f3 0f 11 45 90       	movss  %xmm0,-0x70(%rbp)
    4e92:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4e96:	f3 0f 11 45 94       	movss  %xmm0,-0x6c(%rbp)
    4e9b:	f3 0f 10 05 29 b8 01 	movss  0x1b829(%rip),%xmm0        # 206cc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9c>
    4ea2:	00 
    4ea3:	f3 0f 11 45 98       	movss  %xmm0,-0x68(%rbp)
    4ea8:	f3 0f 10 05 1c b8 01 	movss  0x1b81c(%rip),%xmm0        # 206cc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9c>
    4eaf:	00 
    4eb0:	f3 0f 11 45 9c       	movss  %xmm0,-0x64(%rbp)
    4eb5:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4eb9:	f3 0f 11 45 a0       	movss  %xmm0,-0x60(%rbp)
    4ebe:	66 0f ef c0          	pxor   %xmm0,%xmm0
    4ec2:	f3 0f 11 45 a4       	movss  %xmm0,-0x5c(%rbp)
    4ec7:	f3 0f 10 05 f9 b7 01 	movss  0x1b7f9(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4ece:	00 
    4ecf:	f3 0f 11 45 a8       	movss  %xmm0,-0x58(%rbp)
    4ed4:	f3 0f 10 05 e8 b7 01 	movss  0x1b7e8(%rip),%xmm0        # 206c4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x94>
    4edb:	00 
    4edc:	f3 0f 11 45 ac       	movss  %xmm0,-0x54(%rbp)
    4ee1:	f3 0f 10 05 e3 b7 01 	movss  0x1b7e3(%rip),%xmm0        # 206cc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9c>
    4ee8:	00 
    4ee9:	f3 0f 11 45 b0       	movss  %xmm0,-0x50(%rbp)
    4eee:	f3 0f 10 05 d2 b7 01 	movss  0x1b7d2(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4ef5:	00 
    4ef6:	f3 0f 11 45 b4       	movss  %xmm0,-0x4c(%rbp)
    4efb:	f3 0f 10 05 c5 b7 01 	movss  0x1b7c5(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4f02:	00 
    4f03:	f3 0f 11 45 b8       	movss  %xmm0,-0x48(%rbp)
    4f08:	f3 0f 10 05 b8 b7 01 	movss  0x1b7b8(%rip),%xmm0        # 206c8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x98>
    4f0f:	00 
    4f10:	f3 0f 11 45 bc       	movss  %xmm0,-0x44(%rbp)
    4f15:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4f1c:	49 89 c4             	mov    %rax,%r12
    4f1f:	41 bd 04 00 00 00    	mov    $0x4,%r13d
    4f25:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    4f29:	48 89 c7             	mov    %rax,%rdi
    4f2c:	e8 37 02 00 00       	call   5168 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1Ev>
    4f31:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    4f35:	4c 89 e6             	mov    %r12,%rsi
    4f38:	4c 89 ef             	mov    %r13,%rdi
    4f3b:	4c 89 e1             	mov    %r12,%rcx
    4f3e:	4c 89 eb             	mov    %r13,%rbx
    4f41:	48 89 da             	mov    %rbx,%rdx
    4f44:	48 89 c1             	mov    %rax,%rcx
    4f47:	48 8d 05 12 07 03 00 	lea    0x30712(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
    4f4e:	48 89 c7             	mov    %rax,%rdi
    4f51:	e8 4a 02 00 00       	call   51a0 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ESt16initializer_listIS4_ERKS5_>
    4f56:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    4f5a:	48 89 c7             	mov    %rax,%rdi
    4f5d:	e8 22 02 00 00       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
inline const std::vector<vkh::Vertex2D_RGB> triangle_index_data{
    4f62:	48 8d 05 9f 05 03 00 	lea    0x3059f(%rip),%rax        # 35508 <__dso_handle>
    4f69:	48 89 c2             	mov    %rax,%rdx
    4f6c:	48 8d 05 ed 06 03 00 	lea    0x306ed(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
    4f73:	48 89 c6             	mov    %rax,%rsi
    4f76:	48 8d 05 d7 13 00 00 	lea    0x13d7(%rip),%rax        # 6354 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>
    4f7d:	48 89 c7             	mov    %rax,%rdi
    4f80:	e8 9b f4 ff ff       	call   4420 <__cxa_atexit@plt>
    4f85:	eb 37                	jmp    4fbe <_Z41__static_initialization_and_destruction_0ii+0x2f7>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2, 2, 3, 0};
    4f87:	48 89 c3             	mov    %rax,%rbx
    4f8a:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    4f91:	48 89 c7             	mov    %rax,%rdi
    4f94:	e8 2b 01 00 00       	call   50c4 <_ZNSaItED1Ev>
    4f99:	48 89 d8             	mov    %rbx,%rax
    4f9c:	48 89 c7             	mov    %rax,%rdi
    4f9f:	e8 cc f9 ff ff       	call   4970 <_Unwind_Resume@plt>
    {{-0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}}};
    4fa4:	48 89 c3             	mov    %rax,%rbx
    4fa7:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    4fab:	48 89 c7             	mov    %rax,%rdi
    4fae:	e8 d1 01 00 00       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
    4fb3:	48 89 d8             	mov    %rbx,%rax
    4fb6:	48 89 c7             	mov    %rax,%rdi
    4fb9:	e8 b2 f9 ff ff       	call   4970 <_Unwind_Resume@plt>
    4fbe:	90                   	nop
    4fbf:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    4fc6:	5b                   	pop    %rbx
    4fc7:	41 5c                	pop    %r12
    4fc9:	41 5d                	pop    %r13
    4fcb:	41 5e                	pop    %r14
    4fcd:	41 5f                	pop    %r15
    4fcf:	5d                   	pop    %rbp
    4fd0:	c3                   	ret

0000000000004fd1 <_GLOBAL__sub_I__Z14protected_mainv>:
    4fd1:	55                   	push   %rbp
    4fd2:	48 89 e5             	mov    %rsp,%rbp
    4fd5:	be ff ff 00 00       	mov    $0xffff,%esi
    4fda:	bf 01 00 00 00       	mov    $0x1,%edi
    4fdf:	e8 e3 fc ff ff       	call   4cc7 <_Z41__static_initialization_and_destruction_0ii>
    4fe4:	5d                   	pop    %rbp
    4fe5:	c3                   	ret

0000000000004fe6 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    4fe6:	55                   	push   %rbp
    4fe7:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    4fea:	b8 00 00 00 00       	mov    $0x0,%eax
#else
    return false;
#endif
  }
    4fef:	5d                   	pop    %rbp
    4ff0:	c3                   	ret

0000000000004ff1 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    4ff1:	55                   	push   %rbp
    4ff2:	48 89 e5             	mov    %rsp,%rbp
    4ff5:	48 83 ec 10          	sub    $0x10,%rsp
    4ff9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    4ffd:	e8 e4 ff ff ff       	call   4fe6 <_ZSt23__is_constant_evaluatedv>
    5002:	84 c0                	test   %al,%al
    5004:	74 0e                	je     5014 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    5006:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    500a:	48 89 c7             	mov    %rax,%rdi
    500d:	e8 12 00 00 00       	call   5024 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
    5012:	eb 0d                	jmp    5021 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
    5014:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5018:	48 89 c7             	mov    %rax,%rdi
    501b:	e8 80 f1 ff ff       	call   41a0 <strlen@plt>
    5020:	90                   	nop
      }
    5021:	c9                   	leave
    5022:	c3                   	ret
    5023:	90                   	nop

0000000000005024 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
    5024:	55                   	push   %rbp
    5025:	48 89 e5             	mov    %rsp,%rbp
    5028:	48 83 ec 20          	sub    $0x20,%rsp
    502c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
    5030:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5037:	00 
      while (!eq(__p[__i], char_type()))
    5038:	eb 05                	jmp    503f <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
    503a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
    503f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    5043:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    504b:	48 01 c2             	add    %rax,%rdx
    504e:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
    5052:	48 89 c6             	mov    %rax,%rsi
    5055:	48 89 d7             	mov    %rdx,%rdi
    5058:	e8 0d 00 00 00       	call   506a <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
    505d:	83 f0 01             	xor    $0x1,%eax
    5060:	84 c0                	test   %al,%al
    5062:	75 d6                	jne    503a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
    5064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    5068:	c9                   	leave
    5069:	c3                   	ret

000000000000506a <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
    506a:	55                   	push   %rbp
    506b:	48 89 e5             	mov    %rsp,%rbp
    506e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5072:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
    5076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    507a:	0f b6 10             	movzbl (%rax),%edx
    507d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5081:	0f b6 00             	movzbl (%rax),%eax
    5084:	38 c2                	cmp    %al,%dl
    5086:	0f 94 c0             	sete   %al
    5089:	5d                   	pop    %rbp
    508a:	c3                   	ret
    508b:	90                   	nop

000000000000508c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
    508c:	55                   	push   %rbp
    508d:	48 89 e5             	mov    %rsp,%rbp
    5090:	48 83 ec 10          	sub    $0x10,%rsp
    5094:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5098:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    509c:	48 89 c7             	mov    %rax,%rdi
    509f:	e8 dc ef ff ff       	call   4080 <_ZNSaIcED2Ev@plt>
    50a4:	90                   	nop
    50a5:	c9                   	leave
    50a6:	c3                   	ret
    50a7:	90                   	nop

00000000000050a8 <_ZNSaItEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
    50a8:	55                   	push   %rbp
    50a9:	48 89 e5             	mov    %rsp,%rbp
    50ac:	48 83 ec 10          	sub    $0x10,%rsp
    50b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    50b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50b8:	48 89 c7             	mov    %rax,%rdi
    50bb:	e8 34 03 00 00       	call   53f4 <_ZNSt15__new_allocatorItEC1Ev>
    50c0:	90                   	nop
    50c1:	c9                   	leave
    50c2:	c3                   	ret
    50c3:	90                   	nop

00000000000050c4 <_ZNSaItED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    50c4:	55                   	push   %rbp
    50c5:	48 89 e5             	mov    %rsp,%rbp
    50c8:	48 83 ec 10          	sub    $0x10,%rsp
    50cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    50d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50d4:	48 89 c7             	mov    %rax,%rdi
    50d7:	e8 24 03 00 00       	call   5400 <_ZNSt15__new_allocatorItED1Ev>
    50dc:	90                   	nop
    50dd:	c9                   	leave
    50de:	c3                   	ret
    50df:	90                   	nop

00000000000050e0 <_ZNSt6vectorItSaItEEC1ESt16initializer_listItERKS0_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
    50e0:	55                   	push   %rbp
    50e1:	48 89 e5             	mov    %rsp,%rbp
    50e4:	53                   	push   %rbx
    50e5:	48 83 ec 38          	sub    $0x38,%rsp
    50e9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    50ed:	48 89 f0             	mov    %rsi,%rax
    50f0:	48 89 d6             	mov    %rdx,%rsi
    50f3:	48 89 f2             	mov    %rsi,%rdx
    50f6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    50fa:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    50fe:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
    5102:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5106:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    510a:	48 89 d6             	mov    %rdx,%rsi
    510d:	48 89 c7             	mov    %rax,%rdi
    5110:	e8 13 03 00 00       	call   5428 <_ZNSt12_Vector_baseItSaItEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
    5115:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5119:	48 89 c7             	mov    %rax,%rdi
    511c:	e8 8b 03 00 00       	call   54ac <_ZNKSt16initializer_listItE3endEv>
    5121:	48 89 c3             	mov    %rax,%rbx
    5124:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5128:	48 89 c7             	mov    %rax,%rdi
    512b:	e8 6a 03 00 00       	call   549a <_ZNKSt16initializer_listItE5beginEv>
    5130:	48 89 c1             	mov    %rax,%rcx
    5133:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5137:	48 89 da             	mov    %rbx,%rdx
    513a:	48 89 ce             	mov    %rcx,%rsi
    513d:	48 89 c7             	mov    %rax,%rdi
    5140:	e8 cd 03 00 00       	call   5512 <_ZNSt6vectorItSaItEE19_M_range_initializeIPKtEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
    5145:	eb 1a                	jmp    5161 <_ZNSt6vectorItSaItEEC1ESt16initializer_listItERKS0_+0x81>
    5147:	48 89 c3             	mov    %rax,%rbx
    514a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    514e:	48 89 c7             	mov    %rax,%rdi
    5151:	e8 f8 02 00 00       	call   544e <_ZNSt12_Vector_baseItSaItEED1Ev>
    5156:	48 89 d8             	mov    %rbx,%rax
    5159:	48 89 c7             	mov    %rax,%rdi
    515c:	e8 0f f8 ff ff       	call   4970 <_Unwind_Resume@plt>
    5161:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5165:	c9                   	leave
    5166:	c3                   	ret
    5167:	90                   	nop

0000000000005168 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    5168:	55                   	push   %rbp
    5169:	48 89 e5             	mov    %rsp,%rbp
    516c:	48 83 ec 10          	sub    $0x10,%rsp
    5170:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5178:	48 89 c7             	mov    %rax,%rdi
    517b:	e8 40 04 00 00       	call   55c0 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEC1Ev>
    5180:	90                   	nop
    5181:	c9                   	leave
    5182:	c3                   	ret
    5183:	90                   	nop

0000000000005184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    5184:	55                   	push   %rbp
    5185:	48 89 e5             	mov    %rsp,%rbp
    5188:	48 83 ec 10          	sub    $0x10,%rsp
    518c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5194:	48 89 c7             	mov    %rax,%rdi
    5197:	e8 30 04 00 00       	call   55cc <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEED1Ev>
    519c:	90                   	nop
    519d:	c9                   	leave
    519e:	c3                   	ret
    519f:	90                   	nop

00000000000051a0 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ESt16initializer_listIS4_ERKS5_>:
      vector(initializer_list<value_type> __l,
    51a0:	55                   	push   %rbp
    51a1:	48 89 e5             	mov    %rsp,%rbp
    51a4:	53                   	push   %rbx
    51a5:	48 83 ec 38          	sub    $0x38,%rsp
    51a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    51ad:	48 89 f0             	mov    %rsi,%rax
    51b0:	48 89 d6             	mov    %rdx,%rsi
    51b3:	48 89 f2             	mov    %rsi,%rdx
    51b6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    51ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    51be:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
    51c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    51c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    51ca:	48 89 d6             	mov    %rdx,%rsi
    51cd:	48 89 c7             	mov    %rax,%rdi
    51d0:	e8 1f 04 00 00       	call   55f4 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ERKS5_>
	_M_range_initialize(__l.begin(), __l.end(),
    51d5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    51d9:	48 89 c7             	mov    %rax,%rdi
    51dc:	e8 a3 04 00 00       	call   5684 <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE3endEv>
    51e1:	48 89 c3             	mov    %rax,%rbx
    51e4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    51e8:	48 89 c7             	mov    %rax,%rdi
    51eb:	e8 82 04 00 00       	call   5672 <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE5beginEv>
    51f0:	48 89 c1             	mov    %rax,%rcx
    51f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    51f7:	48 89 da             	mov    %rbx,%rdx
    51fa:	48 89 ce             	mov    %rcx,%rsi
    51fd:	48 89 c7             	mov    %rax,%rdi
    5200:	e8 f3 04 00 00       	call   56f8 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_range_initializeIPKS4_EEvT_SA_St20forward_iterator_tag>
      }
    5205:	eb 1a                	jmp    5221 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ESt16initializer_listIS4_ERKS5_+0x81>
    5207:	48 89 c3             	mov    %rax,%rbx
    520a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    520e:	48 89 c7             	mov    %rax,%rdi
    5211:	e8 04 04 00 00       	call   561a <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>
    5216:	48 89 d8             	mov    %rbx,%rax
    5219:	48 89 c7             	mov    %rax,%rdi
    521c:	e8 4f f7 ff ff       	call   4970 <_Unwind_Resume@plt>
    5221:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5225:	c9                   	leave
    5226:	c3                   	ret
    5227:	90                   	nop

0000000000005228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    5228:	55                   	push   %rbp
    5229:	48 89 e5             	mov    %rsp,%rbp
    522c:	53                   	push   %rbx
    522d:	48 83 ec 38          	sub    $0x38,%rsp
    5231:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5235:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5239:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
    523d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5241:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5245:	48 89 c7             	mov    %rax,%rdi
    5248:	e8 23 f1 ff ff       	call   4370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>
    524d:	48 89 c1             	mov    %rax,%rcx
    5250:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5254:	48 89 c2             	mov    %rax,%rdx
    5257:	48 89 ce             	mov    %rcx,%rsi
    525a:	48 89 df             	mov    %rbx,%rdi
    525d:	e8 ee f2 ff ff       	call   4550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@plt>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
    5262:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    5267:	75 0f                	jne    5278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    5269:	48 8d 05 e8 b3 01 00 	lea    0x1b3e8(%rip),%rax        # 20658 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28>
    5270:	48 89 c7             	mov    %rax,%rdi
    5273:	e8 78 f0 ff ff       	call   42f0 <_ZSt19__throw_logic_errorPKc@plt>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
    5278:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    527c:	48 89 c7             	mov    %rax,%rdi
    527f:	e8 6d fd ff ff       	call   4ff1 <_ZNSt11char_traitsIcE6lengthEPKc>
    5284:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5288:	48 01 d0             	add    %rdx,%rax
    528b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
    528f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5293:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5297:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    529b:	48 89 ce             	mov    %rcx,%rsi
    529e:	48 89 c7             	mov    %rax,%rdi
    52a1:	e8 66 00 00 00       	call   530c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
    52a6:	eb 1a                	jmp    52c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x9a>
    52a8:	48 89 c3             	mov    %rax,%rbx
    52ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    52af:	48 89 c7             	mov    %rax,%rdi
    52b2:	e8 d5 fd ff ff       	call   508c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    52b7:	48 89 d8             	mov    %rbx,%rax
    52ba:	48 89 c7             	mov    %rax,%rdi
    52bd:	e8 ae f6 ff ff       	call   4970 <_Unwind_Resume@plt>
    52c2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    52c6:	c9                   	leave
    52c7:	c3                   	ret

00000000000052c8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    52c8:	55                   	push   %rbp
    52c9:	48 89 e5             	mov    %rsp,%rbp
    52cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    52d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    52d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52d8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    52dc:	48 89 10             	mov    %rdx,(%rax)
    52df:	90                   	nop
    52e0:	5d                   	pop    %rbp
    52e1:	c3                   	ret

00000000000052e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    52e2:	55                   	push   %rbp
    52e3:	48 89 e5             	mov    %rsp,%rbp
    52e6:	48 83 ec 10          	sub    $0x10,%rsp
    52ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    52ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52f2:	48 8b 00             	mov    (%rax),%rax
    52f5:	48 85 c0             	test   %rax,%rax
    52f8:	74 0f                	je     5309 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
    52fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52fe:	48 8b 00             	mov    (%rax),%rax
    5301:	48 89 c7             	mov    %rax,%rdi
    5304:	e8 47 f3 ff ff       	call   4650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@plt>
    5309:	90                   	nop
    530a:	c9                   	leave
    530b:	c3                   	ret

000000000000530c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
    530c:	55                   	push   %rbp
    530d:	48 89 e5             	mov    %rsp,%rbp
    5310:	48 83 ec 40          	sub    $0x40,%rsp
    5314:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5318:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    531c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    5320:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    5324:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5328:	48 89 d6             	mov    %rdx,%rsi
    532b:	48 89 c7             	mov    %rax,%rdi
    532e:	e8 7f 04 00 00       	call   57b2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    5333:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (__dnew > size_type(_S_local_capacity))
    5337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    533b:	48 83 f8 0f          	cmp    $0xf,%rax
    533f:	76 3f                	jbe    5380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x74>
	    _M_data(_M_create(__dnew, size_type(0)));
    5341:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
    5345:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5349:	ba 00 00 00 00       	mov    $0x0,%edx
    534e:	48 89 ce             	mov    %rcx,%rsi
    5351:	48 89 c7             	mov    %rax,%rdi
    5354:	e8 47 f6 ff ff       	call   49a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
    5359:	48 89 c2             	mov    %rax,%rdx
    535c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5360:	48 89 d6             	mov    %rdx,%rsi
    5363:	48 89 c7             	mov    %rax,%rdi
    5366:	e8 75 f0 ff ff       	call   43e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@plt>
	    _M_capacity(__dnew);
    536b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    536f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5373:	48 89 d6             	mov    %rdx,%rsi
    5376:	48 89 c7             	mov    %rax,%rdi
    5379:	e8 a2 f6 ff ff       	call   4a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@plt>
    537e:	eb 15                	jmp    5395 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x89>
    5380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5384:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return _M_local_data();
    5388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    538c:	48 89 c7             	mov    %rax,%rdi
    538f:	e8 dc ef ff ff       	call   4370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@plt>
    5394:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    5395:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    5399:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    539d:	48 89 d6             	mov    %rdx,%rsi
    53a0:	48 89 c7             	mov    %rax,%rdi
    53a3:	e8 20 ff ff ff       	call   52c8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
    53a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    53ac:	48 89 c7             	mov    %rax,%rdi
    53af:	e8 fc f1 ff ff       	call   45b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@plt>
    53b4:	48 89 c1             	mov    %rax,%rcx
    53b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    53bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    53bf:	48 89 c6             	mov    %rax,%rsi
    53c2:	48 89 cf             	mov    %rcx,%rdi
    53c5:	e8 f6 f1 ff ff       	call   45c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@plt>

	__guard._M_guarded = 0;
    53ca:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    53d1:	00 

	_M_set_length(__dnew);
    53d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    53d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    53da:	48 89 d6             	mov    %rdx,%rsi
    53dd:	48 89 c7             	mov    %rax,%rdi
    53e0:	e8 db ee ff ff       	call   42c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@plt>
      }
    53e5:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    53e9:	48 89 c7             	mov    %rax,%rdi
    53ec:	e8 f1 fe ff ff       	call   52e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
    53f1:	c9                   	leave
    53f2:	c3                   	ret
    53f3:	90                   	nop

00000000000053f4 <_ZNSt15__new_allocatorItEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    53f4:	55                   	push   %rbp
    53f5:	48 89 e5             	mov    %rsp,%rbp
    53f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    53fc:	90                   	nop
    53fd:	5d                   	pop    %rbp
    53fe:	c3                   	ret
    53ff:	90                   	nop

0000000000005400 <_ZNSt15__new_allocatorItED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    5400:	55                   	push   %rbp
    5401:	48 89 e5             	mov    %rsp,%rbp
    5404:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5408:	90                   	nop
    5409:	5d                   	pop    %rbp
    540a:	c3                   	ret
    540b:	90                   	nop

000000000000540c <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
    540c:	55                   	push   %rbp
    540d:	48 89 e5             	mov    %rsp,%rbp
    5410:	48 83 ec 10          	sub    $0x10,%rsp
    5414:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5418:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    541c:	48 89 c7             	mov    %rax,%rdi
    541f:	e8 a0 fc ff ff       	call   50c4 <_ZNSaItED1Ev>
    5424:	90                   	nop
    5425:	c9                   	leave
    5426:	c3                   	ret
    5427:	90                   	nop

0000000000005428 <_ZNSt12_Vector_baseItSaItEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
    5428:	55                   	push   %rbp
    5429:	48 89 e5             	mov    %rsp,%rbp
    542c:	48 83 ec 10          	sub    $0x10,%rsp
    5430:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5434:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
    5438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    543c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5440:	48 89 d6             	mov    %rdx,%rsi
    5443:	48 89 c7             	mov    %rax,%rdi
    5446:	e8 99 03 00 00       	call   57e4 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>
    544b:	90                   	nop
    544c:	c9                   	leave
    544d:	c3                   	ret

000000000000544e <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    544e:	55                   	push   %rbp
    544f:	48 89 e5             	mov    %rsp,%rbp
    5452:	48 83 ec 10          	sub    $0x10,%rsp
    5456:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    545a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    545e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    5462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5466:	48 8b 00             	mov    (%rax),%rax
    5469:	48 29 c2             	sub    %rax,%rdx
    546c:	48 89 d0             	mov    %rdx,%rax
    546f:	48 d1 f8             	sar    %rax
	_M_deallocate(_M_impl._M_start,
    5472:	48 89 c2             	mov    %rax,%rdx
    5475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5479:	48 8b 08             	mov    (%rax),%rcx
    547c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5480:	48 89 ce             	mov    %rcx,%rsi
    5483:	48 89 c7             	mov    %rax,%rdi
    5486:	e8 8b 03 00 00       	call   5816 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtm>
      }
    548b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    548f:	48 89 c7             	mov    %rax,%rdi
    5492:	e8 75 ff ff ff       	call   540c <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
    5497:	90                   	nop
    5498:	c9                   	leave
    5499:	c3                   	ret

000000000000549a <_ZNKSt16initializer_listItE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    549a:	55                   	push   %rbp
    549b:	48 89 e5             	mov    %rsp,%rbp
    549e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    54a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54a6:	48 8b 00             	mov    (%rax),%rax
    54a9:	5d                   	pop    %rbp
    54aa:	c3                   	ret
    54ab:	90                   	nop

00000000000054ac <_ZNKSt16initializer_listItE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    54ac:	55                   	push   %rbp
    54ad:	48 89 e5             	mov    %rsp,%rbp
    54b0:	53                   	push   %rbx
    54b1:	48 83 ec 18          	sub    $0x18,%rsp
    54b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    54b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    54bd:	48 89 c7             	mov    %rax,%rdi
    54c0:	e8 d5 ff ff ff       	call   549a <_ZNKSt16initializer_listItE5beginEv>
    54c5:	48 89 c3             	mov    %rax,%rbx
    54c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    54cc:	48 89 c7             	mov    %rax,%rdi
    54cf:	e8 78 03 00 00       	call   584c <_ZNKSt16initializer_listItE4sizeEv>
    54d4:	48 01 c0             	add    %rax,%rax
    54d7:	48 01 d8             	add    %rbx,%rax
    54da:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    54de:	c9                   	leave
    54df:	c3                   	ret

00000000000054e0 <_ZSt8distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    54e0:	55                   	push   %rbp
    54e1:	48 89 e5             	mov    %rsp,%rbp
    54e4:	48 83 ec 10          	sub    $0x10,%rsp
    54e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    54ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    54f0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    54f4:	48 89 c7             	mov    %rax,%rdi
    54f7:	e8 62 03 00 00       	call   585e <_ZSt19__iterator_categoryIPKtENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    54fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5500:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5504:	48 89 d6             	mov    %rdx,%rsi
    5507:	48 89 c7             	mov    %rax,%rdi
    550a:	e8 5a 03 00 00       	call   5869 <_ZSt10__distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    550f:	c9                   	leave
    5510:	c3                   	ret
    5511:	90                   	nop

0000000000005512 <_ZNSt6vectorItSaItEE19_M_range_initializeIPKtEEvT_S5_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
    5512:	55                   	push   %rbp
    5513:	48 89 e5             	mov    %rsp,%rbp
    5516:	53                   	push   %rbx
    5517:	48 83 ec 38          	sub    $0x38,%rsp
    551b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    551f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5523:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
    5527:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    552b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    552f:	48 89 d6             	mov    %rdx,%rsi
    5532:	48 89 c7             	mov    %rax,%rdi
    5535:	e8 a6 ff ff ff       	call   54e0 <_ZSt8distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    553a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    553e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5542:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5546:	48 89 c7             	mov    %rax,%rdi
    5549:	e8 94 03 00 00       	call   58e2 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
    554e:	48 89 c2             	mov    %rax,%rdx
    5551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5555:	48 89 d6             	mov    %rdx,%rsi
    5558:	48 89 c7             	mov    %rax,%rdi
    555b:	e8 22 03 00 00       	call   5882 <_ZNSt6vectorItSaItEE17_S_check_init_lenEmRKS0_>
    5560:	48 89 c6             	mov    %rax,%rsi
    5563:	48 89 df             	mov    %rbx,%rdi
    5566:	e8 85 03 00 00       	call   58f0 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEm>
    556b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    556f:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    5572:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5576:	48 8b 00             	mov    (%rax),%rax
    5579:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    557d:	48 01 d2             	add    %rdx,%rdx
    5580:	48 01 c2             	add    %rax,%rdx
    5583:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5587:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
    558b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    558f:	48 89 c7             	mov    %rax,%rdi
    5592:	e8 4b 03 00 00       	call   58e2 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
    5597:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
    559a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    559e:	48 8b 10             	mov    (%rax),%rdx
    55a1:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    55a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55a9:	48 89 c7             	mov    %rax,%rdi
    55ac:	e8 72 03 00 00       	call   5923 <_ZSt22__uninitialized_copy_aIPKtPttET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish =
    55b1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    55b5:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
    55b9:	90                   	nop
    55ba:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    55be:	c9                   	leave
    55bf:	c3                   	ret

00000000000055c0 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    55c0:	55                   	push   %rbp
    55c1:	48 89 e5             	mov    %rsp,%rbp
    55c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    55c8:	90                   	nop
    55c9:	5d                   	pop    %rbp
    55ca:	c3                   	ret
    55cb:	90                   	nop

00000000000055cc <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    55cc:	55                   	push   %rbp
    55cd:	48 89 e5             	mov    %rsp,%rbp
    55d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    55d4:	90                   	nop
    55d5:	5d                   	pop    %rbp
    55d6:	c3                   	ret
    55d7:	90                   	nop

00000000000055d8 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    55d8:	55                   	push   %rbp
    55d9:	48 89 e5             	mov    %rsp,%rbp
    55dc:	48 83 ec 10          	sub    $0x10,%rsp
    55e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    55e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    55e8:	48 89 c7             	mov    %rax,%rdi
    55eb:	e8 94 fb ff ff       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
    55f0:	90                   	nop
    55f1:	c9                   	leave
    55f2:	c3                   	ret
    55f3:	90                   	nop

00000000000055f4 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ERKS5_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
    55f4:	55                   	push   %rbp
    55f5:	48 89 e5             	mov    %rsp,%rbp
    55f8:	48 83 ec 10          	sub    $0x10,%rsp
    55fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5600:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
    5604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5608:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    560c:	48 89 d6             	mov    %rdx,%rsi
    560f:	48 89 c7             	mov    %rax,%rdi
    5612:	e8 3d 03 00 00       	call   5954 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE12_Vector_implC1ERKS5_>
    5617:	90                   	nop
    5618:	c9                   	leave
    5619:	c3                   	ret

000000000000561a <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    561a:	55                   	push   %rbp
    561b:	48 89 e5             	mov    %rsp,%rbp
    561e:	48 83 ec 10          	sub    $0x10,%rsp
    5622:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    5626:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    562a:	48 8b 50 10          	mov    0x10(%rax),%rdx
    562e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5632:	48 8b 00             	mov    (%rax),%rax
    5635:	48 29 c2             	sub    %rax,%rdx
    5638:	48 c1 fa 02          	sar    $0x2,%rdx
    563c:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
    5643:	cc cc cc 
    5646:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    564a:	48 89 c2             	mov    %rax,%rdx
    564d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5651:	48 8b 08             	mov    (%rax),%rcx
    5654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5658:	48 89 ce             	mov    %rcx,%rsi
    565b:	48 89 c7             	mov    %rax,%rdi
    565e:	e8 23 03 00 00       	call   5986 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE13_M_deallocateEPS4_m>
      }
    5663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5667:	48 89 c7             	mov    %rax,%rdi
    566a:	e8 69 ff ff ff       	call   55d8 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE12_Vector_implD1Ev>
    566f:	90                   	nop
    5670:	c9                   	leave
    5671:	c3                   	ret

0000000000005672 <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE5beginEv>:
      begin() const noexcept { return _M_array; }
    5672:	55                   	push   %rbp
    5673:	48 89 e5             	mov    %rsp,%rbp
    5676:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    567a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    567e:	48 8b 00             	mov    (%rax),%rax
    5681:	5d                   	pop    %rbp
    5682:	c3                   	ret
    5683:	90                   	nop

0000000000005684 <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE3endEv>:
      end() const noexcept { return begin() + size(); }
    5684:	55                   	push   %rbp
    5685:	48 89 e5             	mov    %rsp,%rbp
    5688:	53                   	push   %rbx
    5689:	48 83 ec 18          	sub    $0x18,%rsp
    568d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5695:	48 89 c7             	mov    %rax,%rdi
    5698:	e8 d5 ff ff ff       	call   5672 <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE5beginEv>
    569d:	48 89 c3             	mov    %rax,%rbx
    56a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    56a4:	48 89 c7             	mov    %rax,%rdi
    56a7:	e8 10 03 00 00       	call   59bc <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE4sizeEv>
    56ac:	48 89 c2             	mov    %rax,%rdx
    56af:	48 89 d0             	mov    %rdx,%rax
    56b2:	48 c1 e0 02          	shl    $0x2,%rax
    56b6:	48 01 d0             	add    %rdx,%rax
    56b9:	48 c1 e0 02          	shl    $0x2,%rax
    56bd:	48 01 d8             	add    %rbx,%rax
    56c0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    56c4:	c9                   	leave
    56c5:	c3                   	ret

00000000000056c6 <_ZSt8distanceIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E15difference_typeES8_S8_>:
    distance(_InputIterator __first, _InputIterator __last)
    56c6:	55                   	push   %rbp
    56c7:	48 89 e5             	mov    %rsp,%rbp
    56ca:	48 83 ec 10          	sub    $0x10,%rsp
    56ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    56d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
    56d6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    56da:	48 89 c7             	mov    %rax,%rdi
    56dd:	e8 ec 02 00 00       	call   59ce <_ZSt19__iterator_categoryIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__distance(__first, __last,
    56e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56e6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    56ea:	48 89 d6             	mov    %rdx,%rsi
    56ed:	48 89 c7             	mov    %rax,%rdi
    56f0:	e8 e4 02 00 00       	call   59d9 <_ZSt10__distanceIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag>
    }
    56f5:	c9                   	leave
    56f6:	c3                   	ret
    56f7:	90                   	nop

00000000000056f8 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_range_initializeIPKS4_EEvT_SA_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
    56f8:	55                   	push   %rbp
    56f9:	48 89 e5             	mov    %rsp,%rbp
    56fc:	53                   	push   %rbx
    56fd:	48 83 ec 38          	sub    $0x38,%rsp
    5701:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5705:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5709:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
    570d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    5711:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5715:	48 89 d6             	mov    %rdx,%rsi
    5718:	48 89 c7             	mov    %rax,%rdi
    571b:	e8 a6 ff ff ff       	call   56c6 <_ZSt8distanceIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E15difference_typeES8_S8_>
    5720:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    5724:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5728:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    572c:	48 89 c7             	mov    %rax,%rdi
    572f:	e8 30 03 00 00       	call   5a64 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_get_Tp_allocatorEv>
    5734:	48 89 c2             	mov    %rax,%rdx
    5737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    573b:	48 89 d6             	mov    %rdx,%rsi
    573e:	48 89 c7             	mov    %rax,%rdi
    5741:	e8 be 02 00 00       	call   5a04 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE17_S_check_init_lenEmRKS5_>
    5746:	48 89 c6             	mov    %rax,%rsi
    5749:	48 89 df             	mov    %rbx,%rdi
    574c:	e8 21 03 00 00       	call   5a72 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_allocateEm>
    5751:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    5755:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    5758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    575c:	48 8b 08             	mov    (%rax),%rcx
    575f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5763:	48 89 d0             	mov    %rdx,%rax
    5766:	48 c1 e0 02          	shl    $0x2,%rax
    576a:	48 01 d0             	add    %rdx,%rax
    576d:	48 c1 e0 02          	shl    $0x2,%rax
    5771:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    5775:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5779:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
    577d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5781:	48 89 c7             	mov    %rax,%rdi
    5784:	e8 db 02 00 00       	call   5a64 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_get_Tp_allocatorEv>
    5789:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
    578c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5790:	48 8b 10             	mov    (%rax),%rdx
    5793:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    5797:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    579b:	48 89 c7             	mov    %rax,%rdi
    579e:	e8 02 03 00 00       	call   5aa5 <_ZSt22__uninitialized_copy_aIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_S4_ET0_T_S9_S8_RSaIT1_E>
	  this->_M_impl._M_finish =
    57a3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    57a7:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
    57ab:	90                   	nop
    57ac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    57b0:	c9                   	leave
    57b1:	c3                   	ret

00000000000057b2 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
    57b2:	55                   	push   %rbp
    57b3:	48 89 e5             	mov    %rsp,%rbp
    57b6:	48 83 ec 10          	sub    $0x10,%rsp
    57ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    57be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
    57c2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    57c6:	48 89 c7             	mov    %rax,%rdi
    57c9:	e8 08 03 00 00       	call   5ad6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    57ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    57d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    57d6:	48 89 d6             	mov    %rdx,%rsi
    57d9:	48 89 c7             	mov    %rax,%rdi
    57dc:	e8 00 03 00 00       	call   5ae1 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    57e1:	c9                   	leave
    57e2:	c3                   	ret
    57e3:	90                   	nop

00000000000057e4 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    57e4:	55                   	push   %rbp
    57e5:	48 89 e5             	mov    %rsp,%rbp
    57e8:	48 83 ec 10          	sub    $0x10,%rsp
    57ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    57f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    57f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    57f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    57fc:	48 89 d6             	mov    %rdx,%rsi
    57ff:	48 89 c7             	mov    %rax,%rdi
    5802:	e8 f1 02 00 00       	call   5af8 <_ZNSaItEC1ERKS_>
    5807:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    580b:	48 89 c7             	mov    %rax,%rdi
    580e:	e8 0b 03 00 00       	call   5b1e <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
    5813:	90                   	nop
    5814:	c9                   	leave
    5815:	c3                   	ret

0000000000005816 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtm>:
      _M_deallocate(pointer __p, size_t __n)
    5816:	55                   	push   %rbp
    5817:	48 89 e5             	mov    %rsp,%rbp
    581a:	48 83 ec 20          	sub    $0x20,%rsp
    581e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5822:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5826:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    582a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    582f:	74 17                	je     5848 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtm+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    5831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5835:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5839:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    583d:	48 89 ce             	mov    %rcx,%rsi
    5840:	48 89 c7             	mov    %rax,%rdi
    5843:	e8 04 03 00 00       	call   5b4c <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptm>
      }
    5848:	90                   	nop
    5849:	c9                   	leave
    584a:	c3                   	ret
    584b:	90                   	nop

000000000000584c <_ZNKSt16initializer_listItE4sizeEv>:
      size() const noexcept { return _M_len; }
    584c:	55                   	push   %rbp
    584d:	48 89 e5             	mov    %rsp,%rbp
    5850:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5858:	48 8b 40 08          	mov    0x8(%rax),%rax
    585c:	5d                   	pop    %rbp
    585d:	c3                   	ret

000000000000585e <_ZSt19__iterator_categoryIPKtENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    585e:	55                   	push   %rbp
    585f:	48 89 e5             	mov    %rsp,%rbp
    5862:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    5866:	90                   	nop
    5867:	5d                   	pop    %rbp
    5868:	c3                   	ret

0000000000005869 <_ZSt10__distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    5869:	55                   	push   %rbp
    586a:	48 89 e5             	mov    %rsp,%rbp
    586d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5871:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    5875:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5879:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    587d:	48 d1 f8             	sar    %rax
    }
    5880:	5d                   	pop    %rbp
    5881:	c3                   	ret

0000000000005882 <_ZNSt6vectorItSaItEE17_S_check_init_lenEmRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
    5882:	55                   	push   %rbp
    5883:	48 89 e5             	mov    %rsp,%rbp
    5886:	53                   	push   %rbx
    5887:	48 83 ec 28          	sub    $0x28,%rsp
    588b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    588f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    5893:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5897:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    589b:	48 89 d6             	mov    %rdx,%rsi
    589e:	48 89 c7             	mov    %rax,%rdi
    58a1:	e8 52 02 00 00       	call   5af8 <_ZNSaItEC1ERKS_>
    58a6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    58aa:	48 89 c7             	mov    %rax,%rdi
    58ad:	e8 c8 02 00 00       	call   5b7a <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>
    58b2:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    58b6:	0f 92 c3             	setb   %bl
    58b9:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    58bd:	48 89 c7             	mov    %rax,%rdi
    58c0:	e8 ff f7 ff ff       	call   50c4 <_ZNSaItED1Ev>
    58c5:	84 db                	test   %bl,%bl
    58c7:	74 0f                	je     58d8 <_ZNSt6vectorItSaItEE17_S_check_init_lenEmRKS0_+0x56>
	  __throw_length_error(
    58c9:	48 8d 05 c0 ad 01 00 	lea    0x1adc0(%rip),%rax        # 20690 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x60>
    58d0:	48 89 c7             	mov    %rax,%rdi
    58d3:	e8 28 e9 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
    58d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    58dc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    58e0:	c9                   	leave
    58e1:	c3                   	ret

00000000000058e2 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    58e2:	55                   	push   %rbp
    58e3:	48 89 e5             	mov    %rsp,%rbp
    58e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    58ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    58ee:	5d                   	pop    %rbp
    58ef:	c3                   	ret

00000000000058f0 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEm>:
      _M_allocate(size_t __n)
    58f0:	55                   	push   %rbp
    58f1:	48 89 e5             	mov    %rsp,%rbp
    58f4:	48 83 ec 10          	sub    $0x10,%rsp
    58f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    58fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    5900:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5905:	74 15                	je     591c <_ZNSt12_Vector_baseItSaItEE11_M_allocateEm+0x2c>
    5907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    590b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    590f:	48 89 d6             	mov    %rdx,%rsi
    5912:	48 89 c7             	mov    %rax,%rdi
    5915:	e8 a2 02 00 00       	call   5bbc <_ZNSt16allocator_traitsISaItEE8allocateERS0_m>
    591a:	eb 05                	jmp    5921 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEm+0x31>
    591c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    5921:	c9                   	leave
    5922:	c3                   	ret

0000000000005923 <_ZSt22__uninitialized_copy_aIPKtPttET0_T_S4_S3_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    5923:	55                   	push   %rbp
    5924:	48 89 e5             	mov    %rsp,%rbp
    5927:	48 83 ec 20          	sub    $0x20,%rsp
    592b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    592f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5933:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    5937:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
    593b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    593f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5947:	48 89 ce             	mov    %rcx,%rsi
    594a:	48 89 c7             	mov    %rax,%rdi
    594d:	e8 94 02 00 00       	call   5be6 <_ZSt18uninitialized_copyIPKtPtET0_T_S4_S3_>
    }
    5952:	c9                   	leave
    5953:	c3                   	ret

0000000000005954 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE12_Vector_implC1ERKS5_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    5954:	55                   	push   %rbp
    5955:	48 89 e5             	mov    %rsp,%rbp
    5958:	48 83 ec 10          	sub    $0x10,%rsp
    595c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5960:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    5964:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5968:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    596c:	48 89 d6             	mov    %rdx,%rsi
    596f:	48 89 c7             	mov    %rax,%rdi
    5972:	e8 a5 02 00 00       	call   5c1c <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1ERKS4_>
    5977:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    597b:	48 89 c7             	mov    %rax,%rdi
    597e:	e8 bf 02 00 00       	call   5c42 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE17_Vector_impl_dataC1Ev>
	{ }
    5983:	90                   	nop
    5984:	c9                   	leave
    5985:	c3                   	ret

0000000000005986 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE13_M_deallocateEPS4_m>:
      _M_deallocate(pointer __p, size_t __n)
    5986:	55                   	push   %rbp
    5987:	48 89 e5             	mov    %rsp,%rbp
    598a:	48 83 ec 20          	sub    $0x20,%rsp
    598e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5992:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5996:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    599a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    599f:	74 17                	je     59b8 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE13_M_deallocateEPS4_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    59a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    59a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    59a9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    59ad:	48 89 ce             	mov    %rcx,%rsi
    59b0:	48 89 c7             	mov    %rax,%rdi
    59b3:	e8 b8 02 00 00       	call   5c70 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE10deallocateERS5_PS4_m>
      }
    59b8:	90                   	nop
    59b9:	c9                   	leave
    59ba:	c3                   	ret
    59bb:	90                   	nop

00000000000059bc <_ZNKSt16initializer_listIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE4sizeEv>:
    59bc:	55                   	push   %rbp
    59bd:	48 89 e5             	mov    %rsp,%rbp
    59c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    59c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    59c8:	48 8b 40 08          	mov    0x8(%rax),%rax
    59cc:	5d                   	pop    %rbp
    59cd:	c3                   	ret

00000000000059ce <_ZSt19__iterator_categoryIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
    59ce:	55                   	push   %rbp
    59cf:	48 89 e5             	mov    %rsp,%rbp
    59d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    59d6:	90                   	nop
    59d7:	5d                   	pop    %rbp
    59d8:	c3                   	ret

00000000000059d9 <_ZSt10__distanceIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    59d9:	55                   	push   %rbp
    59da:	48 89 e5             	mov    %rsp,%rbp
    59dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    59e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    59e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    59e9:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    59ed:	48 c1 f8 02          	sar    $0x2,%rax
    59f1:	48 89 c2             	mov    %rax,%rdx
    59f4:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
    59fb:	cc cc cc 
    59fe:	48 0f af c2          	imul   %rdx,%rax
    }
    5a02:	5d                   	pop    %rbp
    5a03:	c3                   	ret

0000000000005a04 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE17_S_check_init_lenEmRKS5_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    5a04:	55                   	push   %rbp
    5a05:	48 89 e5             	mov    %rsp,%rbp
    5a08:	53                   	push   %rbx
    5a09:	48 83 ec 28          	sub    $0x28,%rsp
    5a0d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5a11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    5a15:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5a19:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5a1d:	48 89 d6             	mov    %rdx,%rsi
    5a20:	48 89 c7             	mov    %rax,%rdi
    5a23:	e8 f4 01 00 00       	call   5c1c <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1ERKS4_>
    5a28:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5a2c:	48 89 c7             	mov    %rax,%rdi
    5a2f:	e8 6a 02 00 00       	call   5c9e <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_S_max_sizeERKS5_>
    5a34:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    5a38:	0f 92 c3             	setb   %bl
    5a3b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    5a3f:	48 89 c7             	mov    %rax,%rdi
    5a42:	e8 3d f7 ff ff       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
    5a47:	84 db                	test   %bl,%bl
    5a49:	74 0f                	je     5a5a <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE17_S_check_init_lenEmRKS5_+0x56>
	  __throw_length_error(
    5a4b:	48 8d 05 3e ac 01 00 	lea    0x1ac3e(%rip),%rax        # 20690 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x60>
    5a52:	48 89 c7             	mov    %rax,%rdi
    5a55:	e8 a6 e7 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    5a5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    5a5e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5a62:	c9                   	leave
    5a63:	c3                   	ret

0000000000005a64 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    5a64:	55                   	push   %rbp
    5a65:	48 89 e5             	mov    %rsp,%rbp
    5a68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    5a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a70:	5d                   	pop    %rbp
    5a71:	c3                   	ret

0000000000005a72 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    5a72:	55                   	push   %rbp
    5a73:	48 89 e5             	mov    %rsp,%rbp
    5a76:	48 83 ec 10          	sub    $0x10,%rsp
    5a7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5a7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    5a82:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5a87:	74 15                	je     5a9e <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_allocateEm+0x2c>
    5a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a8d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5a91:	48 89 d6             	mov    %rdx,%rsi
    5a94:	48 89 c7             	mov    %rax,%rdi
    5a97:	e8 44 02 00 00       	call   5ce0 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE8allocateERS5_m>
    5a9c:	eb 05                	jmp    5aa3 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_allocateEm+0x31>
    5a9e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    5aa3:	c9                   	leave
    5aa4:	c3                   	ret

0000000000005aa5 <_ZSt22__uninitialized_copy_aIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_S4_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    5aa5:	55                   	push   %rbp
    5aa6:	48 89 e5             	mov    %rsp,%rbp
    5aa9:	48 83 ec 20          	sub    $0x20,%rsp
    5aad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5ab1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5ab5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    5ab9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
    5abd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5ac1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5ac9:	48 89 ce             	mov    %rcx,%rsi
    5acc:	48 89 c7             	mov    %rax,%rdi
    5acf:	e8 36 02 00 00       	call   5d0a <_ZSt18uninitialized_copyIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET0_T_S9_S8_>
    }
    5ad4:	c9                   	leave
    5ad5:	c3                   	ret

0000000000005ad6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    5ad6:	55                   	push   %rbp
    5ad7:	48 89 e5             	mov    %rsp,%rbp
    5ada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    5ade:	90                   	nop
    5adf:	5d                   	pop    %rbp
    5ae0:	c3                   	ret

0000000000005ae1 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    5ae1:	55                   	push   %rbp
    5ae2:	48 89 e5             	mov    %rsp,%rbp
    5ae5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5ae9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    5aed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5af1:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    }
    5af5:	5d                   	pop    %rbp
    5af6:	c3                   	ret
    5af7:	90                   	nop

0000000000005af8 <_ZNSaItEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    5af8:	55                   	push   %rbp
    5af9:	48 89 e5             	mov    %rsp,%rbp
    5afc:	48 83 ec 10          	sub    $0x10,%rsp
    5b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5b04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    5b08:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b10:	48 89 d6             	mov    %rdx,%rsi
    5b13:	48 89 c7             	mov    %rax,%rdi
    5b16:	e8 25 02 00 00       	call   5d40 <_ZNSt15__new_allocatorItEC1ERKS0_>
    5b1b:	90                   	nop
    5b1c:	c9                   	leave
    5b1d:	c3                   	ret

0000000000005b1e <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    5b1e:	55                   	push   %rbp
    5b1f:	48 89 e5             	mov    %rsp,%rbp
    5b22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    5b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b2a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    5b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b35:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    5b3c:	00 
    5b3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b41:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    5b48:	00 
	{ }
    5b49:	90                   	nop
    5b4a:	5d                   	pop    %rbp
    5b4b:	c3                   	ret

0000000000005b4c <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptm>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    5b4c:	55                   	push   %rbp
    5b4d:	48 89 e5             	mov    %rsp,%rbp
    5b50:	48 83 ec 20          	sub    $0x20,%rsp
    5b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5b58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5b5c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    5b60:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5b64:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b6c:	48 89 ce             	mov    %rcx,%rsi
    5b6f:	48 89 c7             	mov    %rax,%rdi
    5b72:	e8 d9 01 00 00       	call   5d50 <_ZNSt15__new_allocatorItE10deallocateEPtm>
    5b77:	90                   	nop
    5b78:	c9                   	leave
    5b79:	c3                   	ret

0000000000005b7a <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    5b7a:	55                   	push   %rbp
    5b7b:	48 89 e5             	mov    %rsp,%rbp
    5b7e:	48 83 ec 20          	sub    $0x20,%rsp
    5b82:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
    5b86:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    5b8d:	ff ff 3f 
    5b90:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    5b94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b98:	48 89 c7             	mov    %rax,%rdi
    5b9b:	e8 dd 01 00 00       	call   5d7d <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
    5ba0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    5ba4:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    5ba8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    5bac:	48 89 d6             	mov    %rdx,%rsi
    5baf:	48 89 c7             	mov    %rax,%rdi
    5bb2:	e8 e0 01 00 00       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    5bb7:	48 8b 00             	mov    (%rax),%rax
      }
    5bba:	c9                   	leave
    5bbb:	c3                   	ret

0000000000005bbc <_ZNSt16allocator_traitsISaItEE8allocateERS0_m>:
      allocate(allocator_type& __a, size_type __n)
    5bbc:	55                   	push   %rbp
    5bbd:	48 89 e5             	mov    %rsp,%rbp
    5bc0:	48 83 ec 10          	sub    $0x10,%rsp
    5bc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5bc8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    5bcc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5bd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5bd4:	ba 00 00 00 00       	mov    $0x0,%edx
    5bd9:	48 89 ce             	mov    %rcx,%rsi
    5bdc:	48 89 c7             	mov    %rax,%rdi
    5bdf:	e8 de 01 00 00       	call   5dc2 <_ZNSt15__new_allocatorItE8allocateEmPKv>
    5be4:	c9                   	leave
    5be5:	c3                   	ret

0000000000005be6 <_ZSt18uninitialized_copyIPKtPtET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    5be6:	55                   	push   %rbp
    5be7:	48 89 e5             	mov    %rsp,%rbp
    5bea:	48 83 ec 30          	sub    $0x30,%rsp
    5bee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5bf2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5bf6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
    5bfa:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
    5bfe:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
    5c02:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    5c06:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    5c0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c0e:	48 89 ce             	mov    %rcx,%rsi
    5c11:	48 89 c7             	mov    %rax,%rdi
    5c14:	e8 02 02 00 00       	call   5e1b <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKtPtEET0_T_S6_S5_>
    }
    5c19:	c9                   	leave
    5c1a:	c3                   	ret
    5c1b:	90                   	nop

0000000000005c1c <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    5c1c:	55                   	push   %rbp
    5c1d:	48 89 e5             	mov    %rsp,%rbp
    5c20:	48 83 ec 10          	sub    $0x10,%rsp
    5c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5c28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    5c2c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c34:	48 89 d6             	mov    %rdx,%rsi
    5c37:	48 89 c7             	mov    %rax,%rdi
    5c3a:	e8 09 02 00 00       	call   5e48 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEC1ERKS5_>
    5c3f:	90                   	nop
    5c40:	c9                   	leave
    5c41:	c3                   	ret

0000000000005c42 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    5c42:	55                   	push   %rbp
    5c43:	48 89 e5             	mov    %rsp,%rbp
    5c46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    5c4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c4e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    5c55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c59:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    5c60:	00 
    5c61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c65:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    5c6c:	00 
	{ }
    5c6d:	90                   	nop
    5c6e:	5d                   	pop    %rbp
    5c6f:	c3                   	ret

0000000000005c70 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE10deallocateERS5_PS4_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    5c70:	55                   	push   %rbp
    5c71:	48 89 e5             	mov    %rsp,%rbp
    5c74:	48 83 ec 20          	sub    $0x20,%rsp
    5c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5c7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5c80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    5c84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5c88:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5c8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c90:	48 89 ce             	mov    %rcx,%rsi
    5c93:	48 89 c7             	mov    %rax,%rdi
    5c96:	e8 bd 01 00 00       	call   5e58 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE10deallocateEPS4_m>
    5c9b:	90                   	nop
    5c9c:	c9                   	leave
    5c9d:	c3                   	ret

0000000000005c9e <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    5c9e:	55                   	push   %rbp
    5c9f:	48 89 e5             	mov    %rsp,%rbp
    5ca2:	48 83 ec 20          	sub    $0x20,%rsp
    5ca6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    5caa:	48 b8 66 66 66 66 66 	movabs $0x666666666666666,%rax
    5cb1:	66 66 06 
    5cb4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    5cb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5cbc:	48 89 c7             	mov    %rax,%rdi
    5cbf:	e8 ce 01 00 00       	call   5e92 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE8max_sizeERKS5_>
    5cc4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    5cc8:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    5ccc:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    5cd0:	48 89 d6             	mov    %rdx,%rsi
    5cd3:	48 89 c7             	mov    %rax,%rdi
    5cd6:	e8 bc 00 00 00       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    5cdb:	48 8b 00             	mov    (%rax),%rax
      }
    5cde:	c9                   	leave
    5cdf:	c3                   	ret

0000000000005ce0 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE8allocateERS5_m>:
      allocate(allocator_type& __a, size_type __n)
    5ce0:	55                   	push   %rbp
    5ce1:	48 89 e5             	mov    %rsp,%rbp
    5ce4:	48 83 ec 10          	sub    $0x10,%rsp
    5ce8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5cec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    5cf0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cf8:	ba 00 00 00 00       	mov    $0x0,%edx
    5cfd:	48 89 ce             	mov    %rcx,%rsi
    5d00:	48 89 c7             	mov    %rax,%rdi
    5d03:	e8 a4 01 00 00       	call   5eac <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8allocateEmPKv>
    5d08:	c9                   	leave
    5d09:	c3                   	ret

0000000000005d0a <_ZSt18uninitialized_copyIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    5d0a:	55                   	push   %rbp
    5d0b:	48 89 e5             	mov    %rsp,%rbp
    5d0e:	48 83 ec 30          	sub    $0x30,%rsp
    5d12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5d16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5d1a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
    5d1e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
    5d22:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
    5d26:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    5d2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    5d2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5d32:	48 89 ce             	mov    %rcx,%rsi
    5d35:	48 89 c7             	mov    %rax,%rdi
    5d38:	e8 da 01 00 00       	call   5f17 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN3vkh6VertexILNS2_11PositionDimE0ELNS2_8ColorDimE0EEEPS6_EET0_T_SB_SA_>
    }
    5d3d:	c9                   	leave
    5d3e:	c3                   	ret
    5d3f:	90                   	nop

0000000000005d40 <_ZNSt15__new_allocatorItEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    5d40:	55                   	push   %rbp
    5d41:	48 89 e5             	mov    %rsp,%rbp
    5d44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5d48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5d4c:	90                   	nop
    5d4d:	5d                   	pop    %rbp
    5d4e:	c3                   	ret
    5d4f:	90                   	nop

0000000000005d50 <_ZNSt15__new_allocatorItE10deallocateEPtm>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    5d50:	55                   	push   %rbp
    5d51:	48 89 e5             	mov    %rsp,%rbp
    5d54:	48 83 ec 20          	sub    $0x20,%rsp
    5d58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5d5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5d60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    5d64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5d68:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    5d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5d70:	48 89 d6             	mov    %rdx,%rsi
    5d73:	48 89 c7             	mov    %rax,%rdi
    5d76:	e8 75 e7 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    5d7b:	c9                   	leave
    5d7c:	c3                   	ret

0000000000005d7d <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    5d7d:	55                   	push   %rbp
    5d7e:	48 89 e5             	mov    %rsp,%rbp
    5d81:	48 83 ec 10          	sub    $0x10,%rsp
    5d85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus <= 201703L
	return __a.max_size();
    5d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d8d:	48 89 c7             	mov    %rax,%rdi
    5d90:	e8 af 01 00 00       	call   5f44 <_ZNKSt15__new_allocatorItE8max_sizeEv>
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
    5d95:	c9                   	leave
    5d96:	c3                   	ret

0000000000005d97 <_ZSt3minImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    5d97:	55                   	push   %rbp
    5d98:	48 89 e5             	mov    %rsp,%rbp
    5d9b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5d9f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5da3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5da7:	48 8b 10             	mov    (%rax),%rdx
    5daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5dae:	48 8b 00             	mov    (%rax),%rax
    5db1:	48 39 c2             	cmp    %rax,%rdx
    5db4:	73 06                	jae    5dbc <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
    5db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5dba:	eb 04                	jmp    5dc0 <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
    5dbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    5dc0:	5d                   	pop    %rbp
    5dc1:	c3                   	ret

0000000000005dc2 <_ZNSt15__new_allocatorItE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    5dc2:	55                   	push   %rbp
    5dc3:	48 89 e5             	mov    %rsp,%rbp
    5dc6:	48 83 ec 20          	sub    $0x20,%rsp
    5dca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5dce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5dd2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    5dd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5dda:	48 89 c7             	mov    %rax,%rdi
    5ddd:	e8 7c 01 00 00       	call   5f5e <_ZNKSt15__new_allocatorItE11_M_max_sizeEv>
    5de2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    5de6:	0f 92 c0             	setb   %al
    5de9:	0f b6 c0             	movzbl %al,%eax
    5dec:	48 85 c0             	test   %rax,%rax
    5def:	0f 95 c0             	setne  %al
    5df2:	84 c0                	test   %al,%al
    5df4:	74 13                	je     5e09 <_ZNSt15__new_allocatorItE8allocateEmPKv+0x47>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    5df6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5dfa:	48 85 c0             	test   %rax,%rax
    5dfd:	79 05                	jns    5e04 <_ZNSt15__new_allocatorItE8allocateEmPKv+0x42>
	      std::__throw_bad_array_new_length();
    5dff:	e8 4c e5 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    5e04:	e8 17 e3 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    5e09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5e0d:	48 01 c0             	add    %rax,%rax
    5e10:	48 89 c7             	mov    %rax,%rdi
    5e13:	e8 b8 e6 ff ff       	call   44d0 <_Znwm@plt>
    5e18:	90                   	nop
      }
    5e19:	c9                   	leave
    5e1a:	c3                   	ret

0000000000005e1b <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKtPtEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
    5e1b:	55                   	push   %rbp
    5e1c:	48 89 e5             	mov    %rsp,%rbp
    5e1f:	48 83 ec 20          	sub    $0x20,%rsp
    5e23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5e27:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5e2b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
    5e2f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5e33:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5e37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5e3b:	48 89 ce             	mov    %rcx,%rsi
    5e3e:	48 89 c7             	mov    %rax,%rdi
    5e41:	e8 2c 01 00 00       	call   5f72 <_ZSt4copyIPKtPtET0_T_S4_S3_>
    5e46:	c9                   	leave
    5e47:	c3                   	ret

0000000000005e48 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEC1ERKS5_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    5e48:	55                   	push   %rbp
    5e49:	48 89 e5             	mov    %rsp,%rbp
    5e4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5e50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5e54:	90                   	nop
    5e55:	5d                   	pop    %rbp
    5e56:	c3                   	ret
    5e57:	90                   	nop

0000000000005e58 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE10deallocateEPS4_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    5e58:	55                   	push   %rbp
    5e59:	48 89 e5             	mov    %rsp,%rbp
    5e5c:	48 83 ec 20          	sub    $0x20,%rsp
    5e60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5e64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5e68:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    5e6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5e70:	48 89 d0             	mov    %rdx,%rax
    5e73:	48 c1 e0 02          	shl    $0x2,%rax
    5e77:	48 01 d0             	add    %rdx,%rax
    5e7a:	48 c1 e0 02          	shl    $0x2,%rax
    5e7e:	48 89 c2             	mov    %rax,%rdx
    5e81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5e85:	48 89 d6             	mov    %rdx,%rsi
    5e88:	48 89 c7             	mov    %rax,%rdi
    5e8b:	e8 60 e6 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    5e90:	c9                   	leave
    5e91:	c3                   	ret

0000000000005e92 <_ZNSt16allocator_traitsISaIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEE8max_sizeERKS5_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    5e92:	55                   	push   %rbp
    5e93:	48 89 e5             	mov    %rsp,%rbp
    5e96:	48 83 ec 10          	sub    $0x10,%rsp
    5e9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    5e9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5ea2:	48 89 c7             	mov    %rax,%rdi
    5ea5:	e8 14 01 00 00       	call   5fbe <_ZNKSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8max_sizeEv>
      }
    5eaa:	c9                   	leave
    5eab:	c3                   	ret

0000000000005eac <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    5eac:	55                   	push   %rbp
    5ead:	48 89 e5             	mov    %rsp,%rbp
    5eb0:	48 83 ec 20          	sub    $0x20,%rsp
    5eb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5eb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5ebc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    5ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5ec4:	48 89 c7             	mov    %rax,%rdi
    5ec7:	e8 0c 01 00 00       	call   5fd8 <_ZNKSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE11_M_max_sizeEv>
    5ecc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    5ed0:	0f 92 c0             	setb   %al
    5ed3:	0f b6 c0             	movzbl %al,%eax
    5ed6:	48 85 c0             	test   %rax,%rax
    5ed9:	0f 95 c0             	setne  %al
    5edc:	84 c0                	test   %al,%al
    5ede:	74 1a                	je     5efa <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    5ee0:	48 b8 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rax
    5ee7:	cc cc 0c 
    5eea:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    5eee:	73 05                	jae    5ef5 <_ZNSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    5ef0:	e8 5b e4 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    5ef5:	e8 26 e2 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    5efa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5efe:	48 89 d0             	mov    %rdx,%rax
    5f01:	48 c1 e0 02          	shl    $0x2,%rax
    5f05:	48 01 d0             	add    %rdx,%rax
    5f08:	48 c1 e0 02          	shl    $0x2,%rax
    5f0c:	48 89 c7             	mov    %rax,%rdi
    5f0f:	e8 bc e5 ff ff       	call   44d0 <_Znwm@plt>
    5f14:	90                   	nop
      }
    5f15:	c9                   	leave
    5f16:	c3                   	ret

0000000000005f17 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN3vkh6VertexILNS2_11PositionDimE0ELNS2_8ColorDimE0EEEPS6_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
    5f17:	55                   	push   %rbp
    5f18:	48 89 e5             	mov    %rsp,%rbp
    5f1b:	48 83 ec 20          	sub    $0x20,%rsp
    5f1f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5f23:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    5f27:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
    5f2b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5f2f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f37:	48 89 ce             	mov    %rcx,%rsi
    5f3a:	48 89 c7             	mov    %rax,%rdi
    5f3d:	e8 aa 00 00 00       	call   5fec <_ZSt4copyIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET0_T_S9_S8_>
    5f42:	c9                   	leave
    5f43:	c3                   	ret

0000000000005f44 <_ZNKSt15__new_allocatorItE8max_sizeEv>:
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    5f44:	55                   	push   %rbp
    5f45:	48 89 e5             	mov    %rsp,%rbp
    5f48:	48 83 ec 10          	sub    $0x10,%rsp
    5f4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    5f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f54:	48 89 c7             	mov    %rax,%rdi
    5f57:	e8 02 00 00 00       	call   5f5e <_ZNKSt15__new_allocatorItE11_M_max_sizeEv>
    5f5c:	c9                   	leave
    5f5d:	c3                   	ret

0000000000005f5e <_ZNKSt15__new_allocatorItE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    5f5e:	55                   	push   %rbp
    5f5f:	48 89 e5             	mov    %rsp,%rbp
    5f62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    5f66:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    5f6d:	ff ff 3f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    5f70:	5d                   	pop    %rbp
    5f71:	c3                   	ret

0000000000005f72 <_ZSt4copyIPKtPtET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    5f72:	55                   	push   %rbp
    5f73:	48 89 e5             	mov    %rsp,%rbp
    5f76:	53                   	push   %rbx
    5f77:	48 83 ec 28          	sub    $0x28,%rsp
    5f7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5f7f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5f83:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
    5f87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5f8b:	48 89 c7             	mov    %rax,%rdi
    5f8e:	e8 a4 00 00 00       	call   6037 <_ZSt12__miter_baseIPKtET_S2_>
    5f93:	48 89 c3             	mov    %rax,%rbx
    5f96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5f9a:	48 89 c7             	mov    %rax,%rdi
    5f9d:	e8 95 00 00 00       	call   6037 <_ZSt12__miter_baseIPKtET_S2_>
    5fa2:	48 89 c1             	mov    %rax,%rcx
    5fa5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5fa9:	48 89 c2             	mov    %rax,%rdx
    5fac:	48 89 de             	mov    %rbx,%rsi
    5faf:	48 89 cf             	mov    %rcx,%rdi
    5fb2:	e8 8e 00 00 00       	call   6045 <_ZSt13__copy_move_aILb0EPKtPtET1_T0_S4_S3_>
    }
    5fb7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5fbb:	c9                   	leave
    5fbc:	c3                   	ret
    5fbd:	90                   	nop

0000000000005fbe <_ZNKSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    5fbe:	55                   	push   %rbp
    5fbf:	48 89 e5             	mov    %rsp,%rbp
    5fc2:	48 83 ec 10          	sub    $0x10,%rsp
    5fc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    5fca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5fce:	48 89 c7             	mov    %rax,%rdi
    5fd1:	e8 02 00 00 00       	call   5fd8 <_ZNKSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE11_M_max_sizeEv>
    5fd6:	c9                   	leave
    5fd7:	c3                   	ret

0000000000005fd8 <_ZNKSt15__new_allocatorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    5fd8:	55                   	push   %rbp
    5fd9:	48 89 e5             	mov    %rsp,%rbp
    5fdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    5fe0:	48 b8 66 66 66 66 66 	movabs $0x666666666666666,%rax
    5fe7:	66 66 06 
      }
    5fea:	5d                   	pop    %rbp
    5feb:	c3                   	ret

0000000000005fec <_ZSt4copyIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
    5fec:	55                   	push   %rbp
    5fed:	48 89 e5             	mov    %rsp,%rbp
    5ff0:	53                   	push   %rbx
    5ff1:	48 83 ec 28          	sub    $0x28,%rsp
    5ff5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5ff9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5ffd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
    6001:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6005:	48 89 c7             	mov    %rax,%rdi
    6008:	e8 a2 00 00 00       	call   60af <_ZSt12__miter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>
    600d:	48 89 c3             	mov    %rax,%rbx
    6010:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6014:	48 89 c7             	mov    %rax,%rdi
    6017:	e8 93 00 00 00       	call   60af <_ZSt12__miter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>
    601c:	48 89 c1             	mov    %rax,%rcx
    601f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6023:	48 89 c2             	mov    %rax,%rdx
    6026:	48 89 de             	mov    %rbx,%rsi
    6029:	48 89 cf             	mov    %rcx,%rdi
    602c:	e8 8c 00 00 00       	call   60bd <_ZSt13__copy_move_aILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>
    }
    6031:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6035:	c9                   	leave
    6036:	c3                   	ret

0000000000006037 <_ZSt12__miter_baseIPKtET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
    6037:	55                   	push   %rbp
    6038:	48 89 e5             	mov    %rsp,%rbp
    603b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    603f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6043:	5d                   	pop    %rbp
    6044:	c3                   	ret

0000000000006045 <_ZSt13__copy_move_aILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
    6045:	55                   	push   %rbp
    6046:	48 89 e5             	mov    %rsp,%rbp
    6049:	41 54                	push   %r12
    604b:	53                   	push   %rbx
    604c:	48 83 ec 20          	sub    $0x20,%rsp
    6050:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6054:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6058:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
    605c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6060:	48 89 c7             	mov    %rax,%rdi
    6063:	e8 cd 00 00 00       	call   6135 <_ZSt12__niter_baseIPtET_S1_>
    6068:	49 89 c4             	mov    %rax,%r12
    606b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    606f:	48 89 c7             	mov    %rax,%rdi
    6072:	e8 b0 00 00 00       	call   6127 <_ZSt12__niter_baseIPKtET_S2_>
    6077:	48 89 c3             	mov    %rax,%rbx
    607a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    607e:	48 89 c7             	mov    %rax,%rdi
    6081:	e8 a1 00 00 00       	call   6127 <_ZSt12__niter_baseIPKtET_S2_>
    6086:	4c 89 e2             	mov    %r12,%rdx
    6089:	48 89 de             	mov    %rbx,%rsi
    608c:	48 89 c7             	mov    %rax,%rdi
    608f:	e8 af 00 00 00       	call   6143 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>
    6094:	48 89 c2             	mov    %rax,%rdx
    6097:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    609b:	48 89 d6             	mov    %rdx,%rsi
    609e:	48 89 c7             	mov    %rax,%rdi
    60a1:	e8 ca 00 00 00       	call   6170 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
    }
    60a6:	48 83 c4 20          	add    $0x20,%rsp
    60aa:	5b                   	pop    %rbx
    60ab:	41 5c                	pop    %r12
    60ad:	5d                   	pop    %rbp
    60ae:	c3                   	ret

00000000000060af <_ZSt12__miter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>:
    __miter_base(_Iterator __it)
    60af:	55                   	push   %rbp
    60b0:	48 89 e5             	mov    %rsp,%rbp
    60b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    60b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    60bb:	5d                   	pop    %rbp
    60bc:	c3                   	ret

00000000000060bd <_ZSt13__copy_move_aILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
    60bd:	55                   	push   %rbp
    60be:	48 89 e5             	mov    %rsp,%rbp
    60c1:	41 54                	push   %r12
    60c3:	53                   	push   %rbx
    60c4:	48 83 ec 20          	sub    $0x20,%rsp
    60c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    60cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    60d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
    60d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    60d8:	48 89 c7             	mov    %rax,%rdi
    60db:	e8 b0 00 00 00       	call   6190 <_ZSt12__niter_baseIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S6_>
    60e0:	49 89 c4             	mov    %rax,%r12
    60e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    60e7:	48 89 c7             	mov    %rax,%rdi
    60ea:	e8 93 00 00 00       	call   6182 <_ZSt12__niter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>
    60ef:	48 89 c3             	mov    %rax,%rbx
    60f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60f6:	48 89 c7             	mov    %rax,%rdi
    60f9:	e8 84 00 00 00       	call   6182 <_ZSt12__niter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>
    60fe:	4c 89 e2             	mov    %r12,%rdx
    6101:	48 89 de             	mov    %rbx,%rsi
    6104:	48 89 c7             	mov    %rax,%rdi
    6107:	e8 92 00 00 00       	call   619e <_ZSt14__copy_move_a1ILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>
    610c:	48 89 c2             	mov    %rax,%rdx
    610f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6113:	48 89 d6             	mov    %rdx,%rsi
    6116:	48 89 c7             	mov    %rax,%rdi
    6119:	e8 ad 00 00 00       	call   61cb <_ZSt12__niter_wrapIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_RKS6_S6_>
    }
    611e:	48 83 c4 20          	add    $0x20,%rsp
    6122:	5b                   	pop    %rbx
    6123:	41 5c                	pop    %r12
    6125:	5d                   	pop    %rbp
    6126:	c3                   	ret

0000000000006127 <_ZSt12__niter_baseIPKtET_S2_>:
    __niter_base(_Iterator __it)
    6127:	55                   	push   %rbp
    6128:	48 89 e5             	mov    %rsp,%rbp
    612b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    612f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6133:	5d                   	pop    %rbp
    6134:	c3                   	ret

0000000000006135 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
    6135:	55                   	push   %rbp
    6136:	48 89 e5             	mov    %rsp,%rbp
    6139:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    613d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6141:	5d                   	pop    %rbp
    6142:	c3                   	ret

0000000000006143 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
    6143:	55                   	push   %rbp
    6144:	48 89 e5             	mov    %rsp,%rbp
    6147:	48 83 ec 20          	sub    $0x20,%rsp
    614b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    614f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6153:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
    6157:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    615b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    615f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6163:	48 89 ce             	mov    %rcx,%rsi
    6166:	48 89 c7             	mov    %rax,%rdi
    6169:	e8 6f 00 00 00       	call   61dd <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>
    616e:	c9                   	leave
    616f:	c3                   	ret

0000000000006170 <_ZSt12__niter_wrapIPtET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
    6170:	55                   	push   %rbp
    6171:	48 89 e5             	mov    %rsp,%rbp
    6174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6178:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
    617c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6180:	5d                   	pop    %rbp
    6181:	c3                   	ret

0000000000006182 <_ZSt12__niter_baseIPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S7_>:
    __niter_base(_Iterator __it)
    6182:	55                   	push   %rbp
    6183:	48 89 e5             	mov    %rsp,%rbp
    6186:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    618a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    618e:	5d                   	pop    %rbp
    618f:	c3                   	ret

0000000000006190 <_ZSt12__niter_baseIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_S6_>:
    __niter_base(_Iterator __it)
    6190:	55                   	push   %rbp
    6191:	48 89 e5             	mov    %rsp,%rbp
    6194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    6198:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    619c:	5d                   	pop    %rbp
    619d:	c3                   	ret

000000000000619e <_ZSt14__copy_move_a1ILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
    619e:	55                   	push   %rbp
    619f:	48 89 e5             	mov    %rsp,%rbp
    61a2:	48 83 ec 20          	sub    $0x20,%rsp
    61a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    61ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
    61b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    61b6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    61ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61be:	48 89 ce             	mov    %rcx,%rsi
    61c1:	48 89 c7             	mov    %rax,%rdi
    61c4:	e8 41 00 00 00       	call   620a <_ZSt14__copy_move_a2ILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>
    61c9:	c9                   	leave
    61ca:	c3                   	ret

00000000000061cb <_ZSt12__niter_wrapIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
    61cb:	55                   	push   %rbp
    61cc:	48 89 e5             	mov    %rsp,%rbp
    61cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
    61d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61db:	5d                   	pop    %rbp
    61dc:	c3                   	ret

00000000000061dd <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
    61dd:	55                   	push   %rbp
    61de:	48 89 e5             	mov    %rsp,%rbp
    61e1:	48 83 ec 20          	sub    $0x20,%rsp
    61e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    61ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
    61f1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    61f5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    61f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61fd:	48 89 ce             	mov    %rcx,%rsi
    6200:	48 89 c7             	mov    %rax,%rdi
    6203:	e8 2f 00 00 00       	call   6237 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
    }
    6208:	c9                   	leave
    6209:	c3                   	ret

000000000000620a <_ZSt14__copy_move_a2ILb0EPKN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEPS4_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
    620a:	55                   	push   %rbp
    620b:	48 89 e5             	mov    %rsp,%rbp
    620e:	48 83 ec 20          	sub    $0x20,%rsp
    6212:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6216:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    621a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
    621e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6222:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    622a:	48 89 ce             	mov    %rcx,%rsi
    622d:	48 89 c7             	mov    %rax,%rdi
    6230:	e8 58 00 00 00       	call   628d <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN3vkh6VertexILNS3_11PositionDimE0ELNS3_8ColorDimE0EEEEEPT_PKS8_SB_S9_>
    }
    6235:	c9                   	leave
    6236:	c3                   	ret

0000000000006237 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    6237:	55                   	push   %rbp
    6238:	48 89 e5             	mov    %rsp,%rbp
    623b:	48 83 ec 30          	sub    $0x30,%rsp
    623f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6243:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6247:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
    624b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    624f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    6253:	48 d1 f8             	sar    %rax
    6256:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
    625a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    625f:	74 1b                	je     627c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x45>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    6261:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6265:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    6269:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    626d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6271:	48 89 ce             	mov    %rcx,%rsi
    6274:	48 89 c7             	mov    %rax,%rdi
    6277:	e8 44 e6 ff ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
    627c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6280:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    6284:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6288:	48 01 d0             	add    %rdx,%rax
	}
    628b:	c9                   	leave
    628c:	c3                   	ret

000000000000628d <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN3vkh6VertexILNS3_11PositionDimE0ELNS3_8ColorDimE0EEEEEPT_PKS8_SB_S9_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    628d:	55                   	push   %rbp
    628e:	48 89 e5             	mov    %rsp,%rbp
    6291:	48 83 ec 30          	sub    $0x30,%rsp
    6295:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6299:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    629d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
    62a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    62a5:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    62a9:	48 c1 f8 02          	sar    $0x2,%rax
    62ad:	48 89 c2             	mov    %rax,%rdx
    62b0:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
    62b7:	cc cc cc 
    62ba:	48 0f af c2          	imul   %rdx,%rax
    62be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
    62c2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    62c7:	74 28                	je     62f1 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN3vkh6VertexILNS3_11PositionDimE0ELNS3_8ColorDimE0EEEEEPT_PKS8_SB_S9_+0x64>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    62c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    62cd:	48 89 d0             	mov    %rdx,%rax
    62d0:	48 c1 e0 02          	shl    $0x2,%rax
    62d4:	48 01 d0             	add    %rdx,%rax
    62d7:	48 c1 e0 02          	shl    $0x2,%rax
    62db:	48 89 c2             	mov    %rax,%rdx
    62de:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    62e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    62e6:	48 89 ce             	mov    %rcx,%rsi
    62e9:	48 89 c7             	mov    %rax,%rdi
    62ec:	e8 cf e5 ff ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
    62f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    62f5:	48 89 d0             	mov    %rdx,%rax
    62f8:	48 c1 e0 02          	shl    $0x2,%rax
    62fc:	48 01 d0             	add    %rdx,%rax
    62ff:	48 c1 e0 02          	shl    $0x2,%rax
    6303:	48 89 c2             	mov    %rax,%rdx
    6306:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    630a:	48 01 d0             	add    %rdx,%rax
	}
    630d:	c9                   	leave
    630e:	c3                   	ret
    630f:	90                   	nop

0000000000006310 <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    6310:	55                   	push   %rbp
    6311:	48 89 e5             	mov    %rsp,%rbp
    6314:	48 83 ec 10          	sub    $0x10,%rsp
    6318:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    631c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6320:	48 89 c7             	mov    %rax,%rdi
    6323:	e8 ba f5 ff ff       	call   58e2 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
    6328:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    632b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    632f:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6333:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6337:	48 8b 00             	mov    (%rax),%rax
    633a:	48 89 ce             	mov    %rcx,%rsi
    633d:	48 89 c7             	mov    %rax,%rdi
    6340:	e8 53 00 00 00       	call   6398 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      }
    6345:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6349:	48 89 c7             	mov    %rax,%rdi
    634c:	e8 fd f0 ff ff       	call   544e <_ZNSt12_Vector_baseItSaItEED1Ev>
    6351:	90                   	nop
    6352:	c9                   	leave
    6353:	c3                   	ret

0000000000006354 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    6354:	55                   	push   %rbp
    6355:	48 89 e5             	mov    %rsp,%rbp
    6358:	48 83 ec 10          	sub    $0x10,%rsp
    635c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    6360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6364:	48 89 c7             	mov    %rax,%rdi
    6367:	e8 f8 f6 ff ff       	call   5a64 <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE19_M_get_Tp_allocatorEv>
    636c:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    636f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6373:	48 8b 48 08          	mov    0x8(%rax),%rcx
    6377:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    637b:	48 8b 00             	mov    (%rax),%rax
    637e:	48 89 ce             	mov    %rcx,%rsi
    6381:	48 89 c7             	mov    %rax,%rdi
    6384:	e8 39 00 00 00       	call   63c2 <_ZSt8_DestroyIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEES4_EvT_S6_RSaIT0_E>
      }
    6389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    638d:	48 89 c7             	mov    %rax,%rdi
    6390:	e8 85 f2 ff ff       	call   561a <_ZNSt12_Vector_baseIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>
    6395:	90                   	nop
    6396:	c9                   	leave
    6397:	c3                   	ret

0000000000006398 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    6398:	55                   	push   %rbp
    6399:	48 89 e5             	mov    %rsp,%rbp
    639c:	48 83 ec 20          	sub    $0x20,%rsp
    63a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    63a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    63a8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    63ac:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    63b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    63b4:	48 89 d6             	mov    %rdx,%rsi
    63b7:	48 89 c7             	mov    %rax,%rdi
    63ba:	e8 2d 00 00 00       	call   63ec <_ZSt8_DestroyIPtEvT_S1_>
    }
    63bf:	90                   	nop
    63c0:	c9                   	leave
    63c1:	c3                   	ret

00000000000063c2 <_ZSt8_DestroyIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEES4_EvT_S6_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    63c2:	55                   	push   %rbp
    63c3:	48 89 e5             	mov    %rsp,%rbp
    63c6:	48 83 ec 20          	sub    $0x20,%rsp
    63ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    63ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    63d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    63d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    63da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    63de:	48 89 d6             	mov    %rdx,%rsi
    63e1:	48 89 c7             	mov    %rax,%rdi
    63e4:	e8 29 00 00 00       	call   6412 <_ZSt8_DestroyIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEvT_S6_>
    }
    63e9:	90                   	nop
    63ea:	c9                   	leave
    63eb:	c3                   	ret

00000000000063ec <_ZSt8_DestroyIPtEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    63ec:	55                   	push   %rbp
    63ed:	48 89 e5             	mov    %rsp,%rbp
    63f0:	48 83 ec 10          	sub    $0x10,%rsp
    63f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    63f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
    63fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6400:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6404:	48 89 d6             	mov    %rdx,%rsi
    6407:	48 89 c7             	mov    %rax,%rdi
    640a:	e8 29 00 00 00       	call   6438 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
    640f:	90                   	nop
    6410:	c9                   	leave
    6411:	c3                   	ret

0000000000006412 <_ZSt8_DestroyIPN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEEEvT_S6_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    6412:	55                   	push   %rbp
    6413:	48 89 e5             	mov    %rsp,%rbp
    6416:	48 83 ec 10          	sub    $0x10,%rsp
    641a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    641e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    6422:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    642a:	48 89 d6             	mov    %rdx,%rsi
    642d:	48 89 c7             	mov    %rax,%rdi
    6430:	e8 12 00 00 00       	call   6447 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN3vkh6VertexILNS2_11PositionDimE0ELNS2_8ColorDimE0EEEEEvT_S8_>
    }
    6435:	90                   	nop
    6436:	c9                   	leave
    6437:	c3                   	ret

0000000000006438 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    6438:	55                   	push   %rbp
    6439:	48 89 e5             	mov    %rsp,%rbp
    643c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6440:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6444:	90                   	nop
    6445:	5d                   	pop    %rbp
    6446:	c3                   	ret

0000000000006447 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN3vkh6VertexILNS2_11PositionDimE0ELNS2_8ColorDimE0EEEEEvT_S8_>:
    6447:	55                   	push   %rbp
    6448:	48 89 e5             	mov    %rsp,%rbp
    644b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    644f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6453:	90                   	nop
    6454:	5d                   	pop    %rbp
    6455:	c3                   	ret

0000000000006456 <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo>:

namespace vkh {

VkCommandBuffer
allocateCommandBuffer(VkDevice device,
                      const VkCommandBufferAllocateInfo *pAllocateInfo) {
    6456:	55                   	push   %rbp
    6457:	48 89 e5             	mov    %rsp,%rbp
    645a:	41 54                	push   %r12
    645c:	53                   	push   %rbx
    645d:	48 83 ec 20          	sub    $0x20,%rsp
    6461:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    6465:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  if (pAllocateInfo->commandBufferCount != 1) {
    6469:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    646d:	8b 40 1c             	mov    0x1c(%rax),%eax
    6470:	83 f8 01             	cmp    $0x1,%eax
    6473:	74 3b                	je     64b0 <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0x5a>
    throw std::runtime_error(
        "VkCommandBufferAllocateInfo::commandBufferCount != 1, use "
        "{allocateCommandBuffers} instead.");
    6475:	bf 10 00 00 00       	mov    $0x10,%edi
    647a:	e8 51 dd ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    647f:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    6482:	48 8d 05 77 a8 01 00 	lea    0x1a877(%rip),%rax        # 20d00 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    6489:	48 89 c6             	mov    %rax,%rsi
    648c:	48 89 df             	mov    %rbx,%rdi
    648f:	e8 ac dc ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
        "{allocateCommandBuffers} instead.");
    6494:	48 8b 05 1d eb 02 00 	mov    0x2eb1d(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    649b:	48 89 c2             	mov    %rax,%rdx
    649e:	48 8d 05 9b e8 02 00 	lea    0x2e89b(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    64a5:	48 89 c6             	mov    %rax,%rsi
    64a8:	48 89 df             	mov    %rbx,%rdi
    64ab:	e8 50 e4 ff ff       	call   4900 <__cxa_throw@plt>
  }
  VkCommandBuffer commandBuffer;
  if (vkAllocateCommandBuffers(device, pAllocateInfo, &commandBuffer) !=
    64b0:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    64b4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    64b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    64bc:	48 89 ce             	mov    %rcx,%rsi
    64bf:	48 89 c7             	mov    %rax,%rdi
    64c2:	e8 99 df ff ff       	call   4460 <vkAllocateCommandBuffers@plt>
    64c7:	85 c0                	test   %eax,%eax
    64c9:	0f 95 c0             	setne  %al
    64cc:	84 c0                	test   %al,%al
    64ce:	74 3b                	je     650b <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xb5>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate command buffers.");
    64d0:	bf 10 00 00 00       	mov    $0x10,%edi
    64d5:	e8 f6 dc ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    64da:	48 89 c3             	mov    %rax,%rbx
    64dd:	48 8d 05 7c a8 01 00 	lea    0x1a87c(%rip),%rax        # 20d60 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x68>
    64e4:	48 89 c6             	mov    %rax,%rsi
    64e7:	48 89 df             	mov    %rbx,%rdi
    64ea:	e8 51 dc ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    64ef:	48 8b 05 c2 ea 02 00 	mov    0x2eac2(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    64f6:	48 89 c2             	mov    %rax,%rdx
    64f9:	48 8d 05 40 e8 02 00 	lea    0x2e840(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6500:	48 89 c6             	mov    %rax,%rsi
    6503:	48 89 df             	mov    %rbx,%rdi
    6506:	e8 f5 e3 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return commandBuffer;
    650b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    650f:	eb 2c                	jmp    653d <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xe7>
        "{allocateCommandBuffers} instead.");
    6511:	49 89 c4             	mov    %rax,%r12
    6514:	48 89 df             	mov    %rbx,%rdi
    6517:	e8 e4 dd ff ff       	call   4300 <__cxa_free_exception@plt>
    651c:	4c 89 e0             	mov    %r12,%rax
    651f:	48 89 c7             	mov    %rax,%rdi
    6522:	e8 49 e4 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate command buffers.");
    6527:	49 89 c4             	mov    %rax,%r12
    652a:	48 89 df             	mov    %rbx,%rdi
    652d:	e8 ce dd ff ff       	call   4300 <__cxa_free_exception@plt>
    6532:	4c 89 e0             	mov    %r12,%rax
    6535:	48 89 c7             	mov    %rax,%rdi
    6538:	e8 33 e4 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    653d:	48 83 c4 20          	add    $0x20,%rsp
    6541:	5b                   	pop    %rbx
    6542:	41 5c                	pop    %r12
    6544:	5d                   	pop    %rbp
    6545:	c3                   	ret

0000000000006546 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo>:

std::vector<VkCommandBuffer>
allocateCommandBuffers(VkDevice device,
                       const VkCommandBufferAllocateInfo *pAllocateInfo) {
    6546:	55                   	push   %rbp
    6547:	48 89 e5             	mov    %rsp,%rbp
    654a:	41 54                	push   %r12
    654c:	53                   	push   %rbx
    654d:	48 83 ec 30          	sub    $0x30,%rsp
    6551:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    6555:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    6559:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  std::vector<VkCommandBuffer> commandBuffers{
      pAllocateInfo->commandBufferCount};
    655d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6561:	8b 40 1c             	mov    0x1c(%rax),%eax
    6564:	89 c3                	mov    %eax,%ebx
    6566:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    656a:	48 89 c7             	mov    %rax,%rdi
    656d:	e8 1c 02 00 00       	call   678e <_ZNSaIP17VkCommandBuffer_TEC1Ev>
    6572:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    6576:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    657a:	48 89 de             	mov    %rbx,%rsi
    657d:	48 89 c7             	mov    %rax,%rdi
    6580:	e8 41 02 00 00       	call   67c6 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
    6585:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6589:	48 89 c7             	mov    %rax,%rdi
    658c:	e8 19 02 00 00       	call   67aa <_ZNSaIP17VkCommandBuffer_TED1Ev>
  /* If the allocation of any of those command buffers fails, the implementation
  must free all successfully allocated command buffer objects from this
  command, set all entries of the pCommandBuffers array to NULL and return
  the error. */
  if (vkAllocateCommandBuffers(device, pAllocateInfo, commandBuffers.data()) !=
    6591:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6595:	48 89 c7             	mov    %rax,%rdi
    6598:	e8 e3 02 00 00       	call   6880 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>
    659d:	48 89 c2             	mov    %rax,%rdx
    65a0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    65a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    65a8:	48 89 ce             	mov    %rcx,%rsi
    65ab:	48 89 c7             	mov    %rax,%rdi
    65ae:	e8 ad de ff ff       	call   4460 <vkAllocateCommandBuffers@plt>
    65b3:	85 c0                	test   %eax,%eax
    65b5:	0f 95 c0             	setne  %al
    65b8:	84 c0                	test   %al,%al
    65ba:	74 7f                	je     663b <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xf5>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate command buffers.");
    65bc:	bf 10 00 00 00       	mov    $0x10,%edi
    65c1:	e8 0a dc ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    65c6:	48 89 c3             	mov    %rax,%rbx
    65c9:	48 8d 05 90 a7 01 00 	lea    0x1a790(%rip),%rax        # 20d60 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x68>
    65d0:	48 89 c6             	mov    %rax,%rsi
    65d3:	48 89 df             	mov    %rbx,%rdi
    65d6:	e8 65 db ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    65db:	48 8b 05 d6 e9 02 00 	mov    0x2e9d6(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    65e2:	48 89 c2             	mov    %rax,%rdx
    65e5:	48 8d 05 54 e7 02 00 	lea    0x2e754(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    65ec:	48 89 c6             	mov    %rax,%rsi
    65ef:	48 89 df             	mov    %rbx,%rdi
    65f2:	e8 09 e3 ff ff       	call   4900 <__cxa_throw@plt>
      pAllocateInfo->commandBufferCount};
    65f7:	48 89 c3             	mov    %rax,%rbx
    65fa:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    65fe:	48 89 c7             	mov    %rax,%rdi
    6601:	e8 a4 01 00 00       	call   67aa <_ZNSaIP17VkCommandBuffer_TED1Ev>
    6606:	48 89 d8             	mov    %rbx,%rax
    6609:	48 89 c7             	mov    %rax,%rdi
    660c:	e8 5f e3 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate command buffers.");
    6611:	49 89 c4             	mov    %rax,%r12
    6614:	48 89 df             	mov    %rbx,%rdi
    6617:	e8 e4 dc ff ff       	call   4300 <__cxa_free_exception@plt>
    661c:	4c 89 e3             	mov    %r12,%rbx
    661f:	eb 03                	jmp    6624 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo+0xde>
  }
  return commandBuffers;
}
    6621:	48 89 c3             	mov    %rax,%rbx
    6624:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6628:	48 89 c7             	mov    %rax,%rdi
    662b:	e8 0c 02 00 00       	call   683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
    6630:	48 89 d8             	mov    %rbx,%rax
    6633:	48 89 c7             	mov    %rax,%rdi
    6636:	e8 35 e3 ff ff       	call   4970 <_Unwind_Resume@plt>
  return commandBuffers;
    663b:	90                   	nop
}
    663c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6640:	48 83 c4 30          	add    $0x30,%rsp
    6644:	5b                   	pop    %rbx
    6645:	41 5c                	pop    %r12
    6647:	5d                   	pop    %rbp
    6648:	c3                   	ret

0000000000006649 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo>:

void beginCommandBuffer(VkCommandBuffer commandBuffer,
                        const VkCommandBufferBeginInfo *pBeginInfo) {
    6649:	55                   	push   %rbp
    664a:	48 89 e5             	mov    %rsp,%rbp
    664d:	41 54                	push   %r12
    664f:	53                   	push   %rbx
    6650:	48 83 ec 10          	sub    $0x10,%rsp
    6654:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6658:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  if (vkBeginCommandBuffer(commandBuffer, pBeginInfo) != VK_SUCCESS) {
    665c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6660:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6664:	48 89 d6             	mov    %rdx,%rsi
    6667:	48 89 c7             	mov    %rax,%rdi
    666a:	e8 71 de ff ff       	call   44e0 <vkBeginCommandBuffer@plt>
    666f:	85 c0                	test   %eax,%eax
    6671:	0f 95 c0             	setne  %al
    6674:	84 c0                	test   %al,%al
    6676:	74 51                	je     66c9 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo+0x80>
    throw std::runtime_error("Failed to begin command buffer.");
    6678:	bf 10 00 00 00       	mov    $0x10,%edi
    667d:	e8 4e db ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    6682:	48 89 c3             	mov    %rax,%rbx
    6685:	48 8d 05 fc a6 01 00 	lea    0x1a6fc(%rip),%rax        # 20d88 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x90>
    668c:	48 89 c6             	mov    %rax,%rsi
    668f:	48 89 df             	mov    %rbx,%rdi
    6692:	e8 a9 da ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    6697:	48 8b 05 1a e9 02 00 	mov    0x2e91a(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    669e:	48 89 c2             	mov    %rax,%rdx
    66a1:	48 8d 05 98 e6 02 00 	lea    0x2e698(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    66a8:	48 89 c6             	mov    %rax,%rsi
    66ab:	48 89 df             	mov    %rbx,%rdi
    66ae:	e8 4d e2 ff ff       	call   4900 <__cxa_throw@plt>
    66b3:	49 89 c4             	mov    %rax,%r12
    66b6:	48 89 df             	mov    %rbx,%rdi
    66b9:	e8 42 dc ff ff       	call   4300 <__cxa_free_exception@plt>
    66be:	4c 89 e0             	mov    %r12,%rax
    66c1:	48 89 c7             	mov    %rax,%rdi
    66c4:	e8 a7 e2 ff ff       	call   4970 <_Unwind_Resume@plt>
  }
}
    66c9:	90                   	nop
    66ca:	48 83 c4 10          	add    $0x10,%rsp
    66ce:	5b                   	pop    %rbx
    66cf:	41 5c                	pop    %r12
    66d1:	5d                   	pop    %rbp
    66d2:	c3                   	ret

00000000000066d3 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T>:

void endCommandBuffer(VkCommandBuffer commandBuffer) {
    66d3:	55                   	push   %rbp
    66d4:	48 89 e5             	mov    %rsp,%rbp
    66d7:	41 54                	push   %r12
    66d9:	53                   	push   %rbx
    66da:	48 83 ec 10          	sub    $0x10,%rsp
    66de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
    66e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    66e6:	48 89 c7             	mov    %rax,%rdi
    66e9:	e8 12 e3 ff ff       	call   4a00 <vkEndCommandBuffer@plt>
    66ee:	85 c0                	test   %eax,%eax
    66f0:	0f 95 c0             	setne  %al
    66f3:	84 c0                	test   %al,%al
    66f5:	74 51                	je     6748 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T+0x75>
    throw std::runtime_error("Failed to end command buffer.");
    66f7:	bf 10 00 00 00       	mov    $0x10,%edi
    66fc:	e8 cf da ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    6701:	48 89 c3             	mov    %rax,%rbx
    6704:	48 8d 05 9d a6 01 00 	lea    0x1a69d(%rip),%rax        # 20da8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xb0>
    670b:	48 89 c6             	mov    %rax,%rsi
    670e:	48 89 df             	mov    %rbx,%rdi
    6711:	e8 2a da ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    6716:	48 8b 05 9b e8 02 00 	mov    0x2e89b(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    671d:	48 89 c2             	mov    %rax,%rdx
    6720:	48 8d 05 19 e6 02 00 	lea    0x2e619(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6727:	48 89 c6             	mov    %rax,%rsi
    672a:	48 89 df             	mov    %rbx,%rdi
    672d:	e8 ce e1 ff ff       	call   4900 <__cxa_throw@plt>
    6732:	49 89 c4             	mov    %rax,%r12
    6735:	48 89 df             	mov    %rbx,%rdi
    6738:	e8 c3 db ff ff       	call   4300 <__cxa_free_exception@plt>
    673d:	4c 89 e0             	mov    %r12,%rax
    6740:	48 89 c7             	mov    %rax,%rdi
    6743:	e8 28 e2 ff ff       	call   4970 <_Unwind_Resume@plt>
  }
}
    6748:	90                   	nop
    6749:	48 83 c4 10          	add    $0x10,%rsp
    674d:	5b                   	pop    %rbx
    674e:	41 5c                	pop    %r12
    6750:	5d                   	pop    %rbp
    6751:	c3                   	ret

0000000000006752 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    6752:	55                   	push   %rbp
    6753:	48 89 e5             	mov    %rsp,%rbp
    6756:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    675a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    675e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6762:	5d                   	pop    %rbp
    6763:	c3                   	ret

0000000000006764 <_ZSt17__size_to_integerm>:
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR long
  __size_to_integer(long __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
    6764:	55                   	push   %rbp
    6765:	48 89 e5             	mov    %rsp,%rbp
    6768:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    676c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6770:	5d                   	pop    %rbp
    6771:	c3                   	ret

0000000000006772 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    6772:	55                   	push   %rbp
    6773:	48 89 e5             	mov    %rsp,%rbp
    6776:	48 83 ec 10          	sub    $0x10,%rsp
    677a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    677e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6782:	48 89 c7             	mov    %rax,%rdi
    6785:	e8 20 00 00 00       	call   67aa <_ZNSaIP17VkCommandBuffer_TED1Ev>
    678a:	90                   	nop
    678b:	c9                   	leave
    678c:	c3                   	ret
    678d:	90                   	nop

000000000000678e <_ZNSaIP17VkCommandBuffer_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    678e:	55                   	push   %rbp
    678f:	48 89 e5             	mov    %rsp,%rbp
    6792:	48 83 ec 10          	sub    $0x10,%rsp
    6796:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    679a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    679e:	48 89 c7             	mov    %rax,%rdi
    67a1:	e8 4c 01 00 00       	call   68f2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>
    67a6:	90                   	nop
    67a7:	c9                   	leave
    67a8:	c3                   	ret
    67a9:	90                   	nop

00000000000067aa <_ZNSaIP17VkCommandBuffer_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    67aa:	55                   	push   %rbp
    67ab:	48 89 e5             	mov    %rsp,%rbp
    67ae:	48 83 ec 10          	sub    $0x10,%rsp
    67b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    67b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67ba:	48 89 c7             	mov    %rax,%rdi
    67bd:	e8 3c 01 00 00       	call   68fe <_ZNSt15__new_allocatorIP17VkCommandBuffer_TED1Ev>
    67c2:	90                   	nop
    67c3:	c9                   	leave
    67c4:	c3                   	ret
    67c5:	90                   	nop

00000000000067c6 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    67c6:	55                   	push   %rbp
    67c7:	48 89 e5             	mov    %rsp,%rbp
    67ca:	53                   	push   %rbx
    67cb:	48 83 ec 28          	sub    $0x28,%rsp
    67cf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    67d3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    67d7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    67db:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    67df:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    67e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    67e7:	48 89 d6             	mov    %rdx,%rsi
    67ea:	48 89 c7             	mov    %rax,%rdi
    67ed:	e8 17 01 00 00       	call   6909 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    67f2:	48 89 c1             	mov    %rax,%rcx
    67f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67f9:	48 89 c2             	mov    %rax,%rdx
    67fc:	48 89 ce             	mov    %rcx,%rsi
    67ff:	48 89 df             	mov    %rbx,%rdi
    6802:	e8 63 01 00 00       	call   696a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    6807:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    680b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    680f:	48 89 d6             	mov    %rdx,%rsi
    6812:	48 89 c7             	mov    %rax,%rdi
    6815:	e8 ae 01 00 00       	call   69c8 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>
    681a:	eb 1a                	jmp    6836 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x70>
    681c:	48 89 c3             	mov    %rax,%rbx
    681f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6823:	48 89 c7             	mov    %rax,%rdi
    6826:	e8 79 00 00 00       	call   68a4 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
    682b:	48 89 d8             	mov    %rbx,%rax
    682e:	48 89 c7             	mov    %rax,%rdi
    6831:	e8 3a e1 ff ff       	call   4970 <_Unwind_Resume@plt>
    6836:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    683a:	c9                   	leave
    683b:	c3                   	ret

000000000000683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    683c:	55                   	push   %rbp
    683d:	48 89 e5             	mov    %rsp,%rbp
    6840:	48 83 ec 10          	sub    $0x10,%rsp
    6844:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    6848:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    684c:	48 89 c7             	mov    %rax,%rdi
    684f:	e8 b4 01 00 00       	call   6a08 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
    6854:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    685b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    685f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6863:	48 8b 00             	mov    (%rax),%rax
    6866:	48 89 ce             	mov    %rcx,%rsi
    6869:	48 89 c7             	mov    %rax,%rdi
    686c:	e8 a5 01 00 00       	call   6a16 <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>
      }
    6871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6875:	48 89 c7             	mov    %rax,%rdi
    6878:	e8 27 00 00 00       	call   68a4 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>
    687d:	90                   	nop
    687e:	c9                   	leave
    687f:	c3                   	ret

0000000000006880 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    6880:	55                   	push   %rbp
    6881:	48 89 e5             	mov    %rsp,%rbp
    6884:	48 83 ec 10          	sub    $0x10,%rsp
    6888:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    688c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6890:	48 8b 10             	mov    (%rax),%rdx
    6893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6897:	48 89 d6             	mov    %rdx,%rsi
    689a:	48 89 c7             	mov    %rax,%rdi
    689d:	e8 9e 01 00 00       	call   6a40 <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    68a2:	c9                   	leave
    68a3:	c3                   	ret

00000000000068a4 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    68a4:	55                   	push   %rbp
    68a5:	48 89 e5             	mov    %rsp,%rbp
    68a8:	48 83 ec 10          	sub    $0x10,%rsp
    68ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    68b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68b4:	48 8b 50 10          	mov    0x10(%rax),%rdx
    68b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68bc:	48 8b 00             	mov    (%rax),%rax
    68bf:	48 29 c2             	sub    %rax,%rdx
    68c2:	48 89 d0             	mov    %rdx,%rax
    68c5:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    68c9:	48 89 c2             	mov    %rax,%rdx
    68cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68d0:	48 8b 08             	mov    (%rax),%rcx
    68d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68d7:	48 89 ce             	mov    %rcx,%rsi
    68da:	48 89 c7             	mov    %rax,%rdi
    68dd:	e8 96 01 00 00       	call   6a78 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    68e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68e6:	48 89 c7             	mov    %rax,%rdi
    68e9:	e8 84 fe ff ff       	call   6772 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
    68ee:	90                   	nop
    68ef:	c9                   	leave
    68f0:	c3                   	ret
    68f1:	90                   	nop

00000000000068f2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    68f2:	55                   	push   %rbp
    68f3:	48 89 e5             	mov    %rsp,%rbp
    68f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    68fa:	90                   	nop
    68fb:	5d                   	pop    %rbp
    68fc:	c3                   	ret
    68fd:	90                   	nop

00000000000068fe <_ZNSt15__new_allocatorIP17VkCommandBuffer_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    68fe:	55                   	push   %rbp
    68ff:	48 89 e5             	mov    %rsp,%rbp
    6902:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6906:	90                   	nop
    6907:	5d                   	pop    %rbp
    6908:	c3                   	ret

0000000000006909 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    6909:	55                   	push   %rbp
    690a:	48 89 e5             	mov    %rsp,%rbp
    690d:	53                   	push   %rbx
    690e:	48 83 ec 28          	sub    $0x28,%rsp
    6912:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    6916:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    691a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    691e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6922:	48 89 d6             	mov    %rdx,%rsi
    6925:	48 89 c7             	mov    %rax,%rdi
    6928:	e8 25 01 00 00       	call   6a52 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
    692d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6931:	48 89 c7             	mov    %rax,%rdi
    6934:	e8 74 01 00 00       	call   6aad <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>
    6939:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    693d:	0f 92 c3             	setb   %bl
    6940:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    6944:	48 89 c7             	mov    %rax,%rdi
    6947:	e8 5e fe ff ff       	call   67aa <_ZNSaIP17VkCommandBuffer_TED1Ev>
    694c:	84 db                	test   %bl,%bl
    694e:	74 0f                	je     695f <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    6950:	48 8d 05 71 a4 01 00 	lea    0x1a471(%rip),%rax        # 20dc8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xd0>
    6957:	48 89 c7             	mov    %rax,%rdi
    695a:	e8 a1 d8 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    695f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    6963:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6967:	c9                   	leave
    6968:	c3                   	ret
    6969:	90                   	nop

000000000000696a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    696a:	55                   	push   %rbp
    696b:	48 89 e5             	mov    %rsp,%rbp
    696e:	53                   	push   %rbx
    696f:	48 83 ec 28          	sub    $0x28,%rsp
    6973:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6977:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    697b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    697f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6983:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    6987:	48 89 d6             	mov    %rdx,%rsi
    698a:	48 89 c7             	mov    %rax,%rdi
    698d:	e8 5e 01 00 00       	call   6af0 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    6992:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6996:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    699a:	48 89 d6             	mov    %rdx,%rsi
    699d:	48 89 c7             	mov    %rax,%rdi
    69a0:	e8 7d 01 00 00       	call   6b22 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>
    69a5:	eb 1a                	jmp    69c1 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1EmRKS2_+0x57>
    69a7:	48 89 c3             	mov    %rax,%rbx
    69aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    69ae:	48 89 c7             	mov    %rax,%rdi
    69b1:	e8 bc fd ff ff       	call   6772 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implD1Ev>
    69b6:	48 89 d8             	mov    %rbx,%rax
    69b9:	48 89 c7             	mov    %rax,%rdi
    69bc:	e8 af df ff ff       	call   4970 <_Unwind_Resume@plt>
    69c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    69c5:	c9                   	leave
    69c6:	c3                   	ret
    69c7:	90                   	nop

00000000000069c8 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    69c8:	55                   	push   %rbp
    69c9:	48 89 e5             	mov    %rsp,%rbp
    69cc:	48 83 ec 10          	sub    $0x10,%rsp
    69d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    69d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    69d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69dc:	48 89 c7             	mov    %rax,%rdi
    69df:	e8 24 00 00 00       	call   6a08 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
    69e4:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    69e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69eb:	48 8b 00             	mov    (%rax),%rax
    69ee:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    69f2:	48 89 ce             	mov    %rcx,%rsi
    69f5:	48 89 c7             	mov    %rax,%rdi
    69f8:	e8 7b 01 00 00       	call   6b78 <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    69fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6a01:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    6a05:	90                   	nop
    6a06:	c9                   	leave
    6a07:	c3                   	ret

0000000000006a08 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    6a08:	55                   	push   %rbp
    6a09:	48 89 e5             	mov    %rsp,%rbp
    6a0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    6a10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a14:	5d                   	pop    %rbp
    6a15:	c3                   	ret

0000000000006a16 <_ZSt8_DestroyIPP17VkCommandBuffer_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    6a16:	55                   	push   %rbp
    6a17:	48 89 e5             	mov    %rsp,%rbp
    6a1a:	48 83 ec 20          	sub    $0x20,%rsp
    6a1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6a26:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    6a2a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a32:	48 89 d6             	mov    %rdx,%rsi
    6a35:	48 89 c7             	mov    %rax,%rdi
    6a38:	e8 64 01 00 00       	call   6ba1 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>
    }
    6a3d:	90                   	nop
    6a3e:	c9                   	leave
    6a3f:	c3                   	ret

0000000000006a40 <_ZNKSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    6a40:	55                   	push   %rbp
    6a41:	48 89 e5             	mov    %rsp,%rbp
    6a44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    6a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6a50:	5d                   	pop    %rbp
    6a51:	c3                   	ret

0000000000006a52 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    6a52:	55                   	push   %rbp
    6a53:	48 89 e5             	mov    %rsp,%rbp
    6a56:	48 83 ec 10          	sub    $0x10,%rsp
    6a5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    6a62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6a66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a6a:	48 89 d6             	mov    %rdx,%rsi
    6a6d:	48 89 c7             	mov    %rax,%rdi
    6a70:	e8 53 01 00 00       	call   6bc8 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>
    6a75:	90                   	nop
    6a76:	c9                   	leave
    6a77:	c3                   	ret

0000000000006a78 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    6a78:	55                   	push   %rbp
    6a79:	48 89 e5             	mov    %rsp,%rbp
    6a7c:	48 83 ec 20          	sub    $0x20,%rsp
    6a80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6a84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6a88:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    6a8c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    6a91:	74 17                	je     6aaa <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    6a93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6a9b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6a9f:	48 89 ce             	mov    %rcx,%rsi
    6aa2:	48 89 c7             	mov    %rax,%rdi
    6aa5:	e8 2d 01 00 00       	call   6bd7 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>
      }
    6aaa:	90                   	nop
    6aab:	c9                   	leave
    6aac:	c3                   	ret

0000000000006aad <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    6aad:	55                   	push   %rbp
    6aae:	48 89 e5             	mov    %rsp,%rbp
    6ab1:	48 83 ec 20          	sub    $0x20,%rsp
    6ab5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    6ab9:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    6ac0:	ff ff 0f 
    6ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    6ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6acb:	48 89 c7             	mov    %rax,%rdi
    6ace:	e8 32 01 00 00       	call   6c05 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>
    6ad3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    6ad7:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    6adb:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    6adf:	48 89 d6             	mov    %rdx,%rsi
    6ae2:	48 89 c7             	mov    %rax,%rdi
    6ae5:	e8 ad f2 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    6aea:	48 8b 00             	mov    (%rax),%rax
      }
    6aed:	c9                   	leave
    6aee:	c3                   	ret
    6aef:	90                   	nop

0000000000006af0 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    6af0:	55                   	push   %rbp
    6af1:	48 89 e5             	mov    %rsp,%rbp
    6af4:	48 83 ec 10          	sub    $0x10,%rsp
    6af8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6afc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    6b00:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b08:	48 89 d6             	mov    %rdx,%rsi
    6b0b:	48 89 c7             	mov    %rax,%rdi
    6b0e:	e8 3f ff ff ff       	call   6a52 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
    6b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b17:	48 89 c7             	mov    %rax,%rdi
    6b1a:	e8 01 01 00 00       	call   6c20 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    6b1f:	90                   	nop
    6b20:	c9                   	leave
    6b21:	c3                   	ret

0000000000006b22 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    6b22:	55                   	push   %rbp
    6b23:	48 89 e5             	mov    %rsp,%rbp
    6b26:	48 83 ec 10          	sub    $0x10,%rsp
    6b2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6b2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    6b32:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6b36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b3a:	48 89 d6             	mov    %rdx,%rsi
    6b3d:	48 89 c7             	mov    %rax,%rdi
    6b40:	e8 09 01 00 00       	call   6c4e <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>
    6b45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6b49:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b50:	48 8b 10             	mov    (%rax),%rdx
    6b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b57:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6b5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b5f:	48 8b 00             	mov    (%rax),%rax
    6b62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6b66:	48 c1 e2 03          	shl    $0x3,%rdx
    6b6a:	48 01 c2             	add    %rax,%rdx
    6b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b71:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    6b75:	90                   	nop
    6b76:	c9                   	leave
    6b77:	c3                   	ret

0000000000006b78 <_ZSt27__uninitialized_default_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    6b78:	55                   	push   %rbp
    6b79:	48 89 e5             	mov    %rsp,%rbp
    6b7c:	48 83 ec 20          	sub    $0x20,%rsp
    6b80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6b84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6b88:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
    6b8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6b90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6b94:	48 89 d6             	mov    %rdx,%rsi
    6b97:	48 89 c7             	mov    %rax,%rdi
    6b9a:	e8 e2 00 00 00       	call   6c81 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>
    6b9f:	c9                   	leave
    6ba0:	c3                   	ret

0000000000006ba1 <_ZSt8_DestroyIPP17VkCommandBuffer_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    6ba1:	55                   	push   %rbp
    6ba2:	48 89 e5             	mov    %rsp,%rbp
    6ba5:	48 83 ec 10          	sub    $0x10,%rsp
    6ba9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6bad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    6bb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6bb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6bb9:	48 89 d6             	mov    %rdx,%rsi
    6bbc:	48 89 c7             	mov    %rax,%rdi
    6bbf:	e8 e6 00 00 00       	call   6caa <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>
    }
    6bc4:	90                   	nop
    6bc5:	c9                   	leave
    6bc6:	c3                   	ret
    6bc7:	90                   	nop

0000000000006bc8 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    6bc8:	55                   	push   %rbp
    6bc9:	48 89 e5             	mov    %rsp,%rbp
    6bcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6bd0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6bd4:	90                   	nop
    6bd5:	5d                   	pop    %rbp
    6bd6:	c3                   	ret

0000000000006bd7 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    6bd7:	55                   	push   %rbp
    6bd8:	48 89 e5             	mov    %rsp,%rbp
    6bdb:	48 83 ec 20          	sub    $0x20,%rsp
    6bdf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6be3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6be7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    6beb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6bef:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6bf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6bf7:	48 89 ce             	mov    %rcx,%rsi
    6bfa:	48 89 c7             	mov    %rax,%rdi
    6bfd:	e8 b8 00 00 00       	call   6cba <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>
    6c02:	90                   	nop
    6c03:	c9                   	leave
    6c04:	c3                   	ret

0000000000006c05 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    6c05:	55                   	push   %rbp
    6c06:	48 89 e5             	mov    %rsp,%rbp
    6c09:	48 83 ec 10          	sub    $0x10,%rsp
    6c0d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    6c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c15:	48 89 c7             	mov    %rax,%rdi
    6c18:	e8 cf 00 00 00       	call   6cec <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE8max_sizeEv>
      }
    6c1d:	c9                   	leave
    6c1e:	c3                   	ret
    6c1f:	90                   	nop

0000000000006c20 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    6c20:	55                   	push   %rbp
    6c21:	48 89 e5             	mov    %rsp,%rbp
    6c24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    6c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c2c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    6c33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c37:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    6c3e:	00 
    6c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c43:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    6c4a:	00 
	{ }
    6c4b:	90                   	nop
    6c4c:	5d                   	pop    %rbp
    6c4d:	c3                   	ret

0000000000006c4e <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    6c4e:	55                   	push   %rbp
    6c4f:	48 89 e5             	mov    %rsp,%rbp
    6c52:	48 83 ec 10          	sub    $0x10,%rsp
    6c56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6c5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    6c5e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    6c63:	74 15                	je     6c7a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x2c>
    6c65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c69:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6c6d:	48 89 d6             	mov    %rdx,%rsi
    6c70:	48 89 c7             	mov    %rax,%rdi
    6c73:	e8 8e 00 00 00       	call   6d06 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>
    6c78:	eb 05                	jmp    6c7f <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE11_M_allocateEm+0x31>
    6c7a:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    6c7f:	c9                   	leave
    6c80:	c3                   	ret

0000000000006c81 <_ZSt25__uninitialized_default_nIPP17VkCommandBuffer_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    6c81:	55                   	push   %rbp
    6c82:	48 89 e5             	mov    %rsp,%rbp
    6c85:	48 83 ec 20          	sub    $0x20,%rsp
    6c89:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6c8d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    6c91:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    6c95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6c9d:	48 89 d6             	mov    %rdx,%rsi
    6ca0:	48 89 c7             	mov    %rax,%rdi
    6ca3:	e8 88 00 00 00       	call   6d30 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>
    }
    6ca8:	c9                   	leave
    6ca9:	c3                   	ret

0000000000006caa <_ZNSt12_Destroy_auxILb1EE9__destroyIPP17VkCommandBuffer_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    6caa:	55                   	push   %rbp
    6cab:	48 89 e5             	mov    %rsp,%rbp
    6cae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6cb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6cb6:	90                   	nop
    6cb7:	5d                   	pop    %rbp
    6cb8:	c3                   	ret
    6cb9:	90                   	nop

0000000000006cba <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    6cba:	55                   	push   %rbp
    6cbb:	48 89 e5             	mov    %rsp,%rbp
    6cbe:	48 83 ec 20          	sub    $0x20,%rsp
    6cc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6cc6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6cca:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    6cce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6cd2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6cd9:	00 
    6cda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6cde:	48 89 d6             	mov    %rdx,%rsi
    6ce1:	48 89 c7             	mov    %rax,%rdi
    6ce4:	e8 07 d8 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    6ce9:	c9                   	leave
    6cea:	c3                   	ret
    6ceb:	90                   	nop

0000000000006cec <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    6cec:	55                   	push   %rbp
    6ced:	48 89 e5             	mov    %rsp,%rbp
    6cf0:	48 83 ec 10          	sub    $0x10,%rsp
    6cf4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    6cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6cfc:	48 89 c7             	mov    %rax,%rdi
    6cff:	e8 8a 00 00 00       	call   6d8e <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>
    6d04:	c9                   	leave
    6d05:	c3                   	ret

0000000000006d06 <_ZNSt16allocator_traitsISaIP17VkCommandBuffer_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    6d06:	55                   	push   %rbp
    6d07:	48 89 e5             	mov    %rsp,%rbp
    6d0a:	48 83 ec 10          	sub    $0x10,%rsp
    6d0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6d12:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    6d16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6d1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6d1e:	ba 00 00 00 00       	mov    $0x0,%edx
    6d23:	48 89 ce             	mov    %rcx,%rsi
    6d26:	48 89 c7             	mov    %rax,%rdi
    6d29:	e8 74 00 00 00       	call   6da2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>
    6d2e:	c9                   	leave
    6d2f:	c3                   	ret

0000000000006d30 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    6d30:	55                   	push   %rbp
    6d31:	48 89 e5             	mov    %rsp,%rbp
    6d34:	48 83 ec 20          	sub    $0x20,%rsp
    6d38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6d3c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    6d40:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    6d45:	74 40                	je     6d87 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP17VkCommandBuffer_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    6d47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6d4b:	48 89 c7             	mov    %rax,%rdi
    6d4e:	e8 b0 00 00 00       	call   6e03 <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>
    6d53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    6d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6d5b:	48 89 c7             	mov    %rax,%rdi
    6d5e:	e8 ae 00 00 00       	call   6e11 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>
	      ++__first;
    6d63:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    6d68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6d6c:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    6d70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6d78:	48 89 ce             	mov    %rcx,%rsi
    6d7b:	48 89 c7             	mov    %rax,%rdi
    6d7e:	e8 b5 00 00 00       	call   6e38 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>
    6d83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    6d87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    6d8b:	c9                   	leave
    6d8c:	c3                   	ret
    6d8d:	90                   	nop

0000000000006d8e <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    6d8e:	55                   	push   %rbp
    6d8f:	48 89 e5             	mov    %rsp,%rbp
    6d92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    6d96:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    6d9d:	ff ff 0f 
      }
    6da0:	5d                   	pop    %rbp
    6da1:	c3                   	ret

0000000000006da2 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    6da2:	55                   	push   %rbp
    6da3:	48 89 e5             	mov    %rsp,%rbp
    6da6:	48 83 ec 20          	sub    $0x20,%rsp
    6daa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6dae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6db2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    6db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6dba:	48 89 c7             	mov    %rax,%rdi
    6dbd:	e8 cc ff ff ff       	call   6d8e <_ZNKSt15__new_allocatorIP17VkCommandBuffer_TE11_M_max_sizeEv>
    6dc2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    6dc6:	0f 92 c0             	setb   %al
    6dc9:	0f b6 c0             	movzbl %al,%eax
    6dcc:	48 85 c0             	test   %rax,%rax
    6dcf:	0f 95 c0             	setne  %al
    6dd2:	84 c0                	test   %al,%al
    6dd4:	74 1a                	je     6df0 <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    6dd6:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    6ddd:	ff ff 1f 
    6de0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    6de4:	73 05                	jae    6deb <_ZNSt15__new_allocatorIP17VkCommandBuffer_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    6de6:	e8 65 d5 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    6deb:	e8 30 d3 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    6df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6df4:	48 c1 e0 03          	shl    $0x3,%rax
    6df8:	48 89 c7             	mov    %rax,%rdi
    6dfb:	e8 d0 d6 ff ff       	call   44d0 <_Znwm@plt>
    6e00:	90                   	nop
      }
    6e01:	c9                   	leave
    6e02:	c3                   	ret

0000000000006e03 <_ZSt11__addressofIP17VkCommandBuffer_TEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    6e03:	55                   	push   %rbp
    6e04:	48 89 e5             	mov    %rsp,%rbp
    6e07:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    6e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e0f:	5d                   	pop    %rbp
    6e10:	c3                   	ret

0000000000006e11 <_ZSt10_ConstructIP17VkCommandBuffer_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    6e11:	55                   	push   %rbp
    6e12:	48 89 e5             	mov    %rsp,%rbp
    6e15:	48 83 ec 10          	sub    $0x10,%rsp
    6e19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    6e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e21:	48 89 c6             	mov    %rax,%rsi
    6e24:	bf 08 00 00 00       	mov    $0x8,%edi
    6e29:	e8 24 f9 ff ff       	call   6752 <_ZnwmPv>
    6e2e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    6e35:	90                   	nop
    6e36:	c9                   	leave
    6e37:	c3                   	ret

0000000000006e38 <_ZSt6fill_nIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    6e38:	55                   	push   %rbp
    6e39:	48 89 e5             	mov    %rsp,%rbp
    6e3c:	48 83 ec 20          	sub    $0x20,%rsp
    6e40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
    6e4c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    6e50:	48 89 c7             	mov    %rax,%rdi
    6e53:	e8 24 00 00 00       	call   6e7c <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    6e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6e5c:	48 89 c7             	mov    %rax,%rdi
    6e5f:	e8 00 f9 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    6e64:	48 89 c1             	mov    %rax,%rcx
    6e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6e6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6e6f:	48 89 ce             	mov    %rcx,%rsi
    6e72:	48 89 c7             	mov    %rax,%rdi
    6e75:	e8 0d 00 00 00       	call   6e87 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    6e7a:	c9                   	leave
    6e7b:	c3                   	ret

0000000000006e7c <_ZSt19__iterator_categoryIPP17VkCommandBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    6e7c:	55                   	push   %rbp
    6e7d:	48 89 e5             	mov    %rsp,%rbp
    6e80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    6e84:	90                   	nop
    6e85:	5d                   	pop    %rbp
    6e86:	c3                   	ret

0000000000006e87 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    6e87:	55                   	push   %rbp
    6e88:	48 89 e5             	mov    %rsp,%rbp
    6e8b:	48 83 ec 20          	sub    $0x20,%rsp
    6e8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6e93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6e97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    6e9b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    6ea0:	75 06                	jne    6ea8 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    6ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6ea6:	eb 3a                	jmp    6ee2 <_ZSt10__fill_n_aIPP17VkCommandBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    6ea8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6eac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6eb3:	00 
    6eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6eb8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    6ebc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6ec4:	48 89 ce             	mov    %rcx,%rsi
    6ec7:	48 89 c7             	mov    %rax,%rdi
    6eca:	e8 15 00 00 00       	call   6ee4 <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>
      return __first + __n;
    6ecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6ed3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6eda:	00 
    6edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6edf:	48 01 d0             	add    %rdx,%rax
    }
    6ee2:	c9                   	leave
    6ee3:	c3                   	ret

0000000000006ee4 <_ZSt8__fill_aIPP17VkCommandBuffer_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    6ee4:	55                   	push   %rbp
    6ee5:	48 89 e5             	mov    %rsp,%rbp
    6ee8:	48 83 ec 20          	sub    $0x20,%rsp
    6eec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6ef0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6ef4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    6ef8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6efc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6f00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6f04:	48 89 ce             	mov    %rcx,%rsi
    6f07:	48 89 c7             	mov    %rax,%rdi
    6f0a:	e8 03 00 00 00       	call   6f12 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    6f0f:	90                   	nop
    6f10:	c9                   	leave
    6f11:	c3                   	ret

0000000000006f12 <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    6f12:	55                   	push   %rbp
    6f13:	48 89 e5             	mov    %rsp,%rbp
    6f16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6f1a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    6f1e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    6f22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6f26:	48 8b 00             	mov    (%rax),%rax
    6f29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    6f2d:	eb 10                	jmp    6f3f <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    6f2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6f33:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6f37:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    6f3a:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    6f3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6f43:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    6f47:	75 e6                	jne    6f2f <_ZSt9__fill_a1IPP17VkCommandBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    6f49:	90                   	nop
    6f4a:	90                   	nop
    6f4b:	5d                   	pop    %rbp
    6f4c:	c3                   	ret

0000000000006f4d <_ZN3vkh12createWindowEiiPKcP11GLFWmonitorP10GLFWwindow>:
#include "create_object.hpp"

namespace vkh {
GLFWwindow *createWindow(int width, int height, const char *title,
                         GLFWmonitor *monitor, GLFWwindow *share) {
    6f4d:	55                   	push   %rbp
    6f4e:	48 89 e5             	mov    %rsp,%rbp
    6f51:	48 83 ec 20          	sub    $0x20,%rsp
    6f55:	89 7d fc             	mov    %edi,-0x4(%rbp)
    6f58:	89 75 f8             	mov    %esi,-0x8(%rbp)
    6f5b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    6f5f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    6f63:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    6f67:	be 00 00 00 00       	mov    $0x0,%esi
    6f6c:	bf 01 20 02 00       	mov    $0x22001,%edi
    6f71:	e8 7a d4 ff ff       	call   43f0 <glfwWindowHint@plt>
  // glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
  return glfwCreateWindow(width, height, title, monitor, share);
    6f76:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    6f7a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6f7e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6f82:	8b 75 f8             	mov    -0x8(%rbp),%esi
    6f85:	8b 45 fc             	mov    -0x4(%rbp),%eax
    6f88:	49 89 f8             	mov    %rdi,%r8
    6f8b:	89 c7                	mov    %eax,%edi
    6f8d:	e8 9e d8 ff ff       	call   4830 <glfwCreateWindow@plt>
}
    6f92:	c9                   	leave
    6f93:	c3                   	ret

0000000000006f94 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks>:

VkInstance createInstance(const VkInstanceCreateInfo *pCreateInfo,
                          const VkAllocationCallbacks *pAllocator) {
    6f94:	55                   	push   %rbp
    6f95:	48 89 e5             	mov    %rsp,%rbp
    6f98:	41 54                	push   %r12
    6f9a:	53                   	push   %rbx
    6f9b:	48 83 ec 20          	sub    $0x20,%rsp
    6f9f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    6fa3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  VkInstance instance;
  if (vkCreateInstance(pCreateInfo, pAllocator, &instance) != VK_SUCCESS) {
    6fa7:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    6fab:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    6faf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6fb3:	48 89 ce             	mov    %rcx,%rsi
    6fb6:	48 89 c7             	mov    %rax,%rdi
    6fb9:	e8 82 d6 ff ff       	call   4640 <vkCreateInstance@plt>
    6fbe:	85 c0                	test   %eax,%eax
    6fc0:	0f 95 c0             	setne  %al
    6fc3:	84 c0                	test   %al,%al
    6fc5:	74 3b                	je     7002 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks+0x6e>
    throw std::runtime_error("Failed to create an instance.");
    6fc7:	bf 10 00 00 00       	mov    $0x10,%edi
    6fcc:	e8 ff d1 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    6fd1:	48 89 c3             	mov    %rax,%rbx
    6fd4:	48 8d 05 55 a4 01 00 	lea    0x1a455(%rip),%rax        # 21430 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    6fdb:	48 89 c6             	mov    %rax,%rsi
    6fde:	48 89 df             	mov    %rbx,%rdi
    6fe1:	e8 5a d1 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    6fe6:	48 8b 05 cb df 02 00 	mov    0x2dfcb(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    6fed:	48 89 c2             	mov    %rax,%rdx
    6ff0:	48 8d 05 49 dd 02 00 	lea    0x2dd49(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    6ff7:	48 89 c6             	mov    %rax,%rsi
    6ffa:	48 89 df             	mov    %rbx,%rdi
    6ffd:	e8 fe d8 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return instance;
    7002:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7006:	eb 16                	jmp    701e <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks+0x8a>
    throw std::runtime_error("Failed to create an instance.");
    7008:	49 89 c4             	mov    %rax,%r12
    700b:	48 89 df             	mov    %rbx,%rdi
    700e:	e8 ed d2 ff ff       	call   4300 <__cxa_free_exception@plt>
    7013:	4c 89 e0             	mov    %r12,%rax
    7016:	48 89 c7             	mov    %rax,%rdi
    7019:	e8 52 d9 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    701e:	48 83 c4 20          	add    $0x20,%rsp
    7022:	5b                   	pop    %rbx
    7023:	41 5c                	pop    %r12
    7025:	5d                   	pop    %rbp
    7026:	c3                   	ret

0000000000007027 <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks>:

VkDevice createDevice(VkPhysicalDevice physicalDevice,
                      const VkDeviceCreateInfo *pCreateInfo,
                      const VkAllocationCallbacks *pAllocator) {
    7027:	55                   	push   %rbp
    7028:	48 89 e5             	mov    %rsp,%rbp
    702b:	41 54                	push   %r12
    702d:	53                   	push   %rbx
    702e:	48 83 ec 30          	sub    $0x30,%rsp
    7032:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7036:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    703a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkDevice device;
  if (vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, &device) !=
    703e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    7042:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7046:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    704a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    704e:	48 89 c7             	mov    %rax,%rdi
    7051:	e8 8a d7 ff ff       	call   47e0 <vkCreateDevice@plt>
    7056:	85 c0                	test   %eax,%eax
    7058:	0f 95 c0             	setne  %al
    705b:	84 c0                	test   %al,%al
    705d:	74 3b                	je     709a <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create logical device.");
    705f:	bf 10 00 00 00       	mov    $0x10,%edi
    7064:	e8 67 d1 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7069:	48 89 c3             	mov    %rax,%rbx
    706c:	48 8d 05 dd a3 01 00 	lea    0x1a3dd(%rip),%rax        # 21450 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28>
    7073:	48 89 c6             	mov    %rax,%rsi
    7076:	48 89 df             	mov    %rbx,%rdi
    7079:	e8 c2 d0 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    707e:	48 8b 05 33 df 02 00 	mov    0x2df33(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7085:	48 89 c2             	mov    %rax,%rdx
    7088:	48 8d 05 b1 dc 02 00 	lea    0x2dcb1(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    708f:	48 89 c6             	mov    %rax,%rsi
    7092:	48 89 df             	mov    %rbx,%rdi
    7095:	e8 66 d8 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return device;
    709a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    709e:	eb 16                	jmp    70b6 <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create logical device.");
    70a0:	49 89 c4             	mov    %rax,%r12
    70a3:	48 89 df             	mov    %rbx,%rdi
    70a6:	e8 55 d2 ff ff       	call   4300 <__cxa_free_exception@plt>
    70ab:	4c 89 e0             	mov    %r12,%rax
    70ae:	48 89 c7             	mov    %rax,%rdi
    70b1:	e8 ba d8 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    70b6:	48 83 c4 30          	add    $0x30,%rsp
    70ba:	5b                   	pop    %rbx
    70bb:	41 5c                	pop    %r12
    70bd:	5d                   	pop    %rbp
    70be:	c3                   	ret

00000000000070bf <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks>:

VkSurfaceKHR createSurface(VkInstance instance, GLFWwindow *window,
                           const VkAllocationCallbacks *allocator) {
    70bf:	55                   	push   %rbp
    70c0:	48 89 e5             	mov    %rsp,%rbp
    70c3:	41 54                	push   %r12
    70c5:	53                   	push   %rbx
    70c6:	48 83 ec 30          	sub    $0x30,%rsp
    70ca:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    70ce:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    70d2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSurfaceKHR surface;
  if (glfwCreateWindowSurface(instance, window, allocator, &surface) !=
    70d6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    70da:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    70de:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    70e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    70e6:	48 89 c7             	mov    %rax,%rdi
    70e9:	e8 22 d7 ff ff       	call   4810 <glfwCreateWindowSurface@plt>
    70ee:	85 c0                	test   %eax,%eax
    70f0:	0f 95 c0             	setne  %al
    70f3:	84 c0                	test   %al,%al
    70f5:	74 3b                	je     7132 <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create window surface.");
    70f7:	bf 10 00 00 00       	mov    $0x10,%edi
    70fc:	e8 cf d0 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7101:	48 89 c3             	mov    %rax,%rbx
    7104:	48 8d 05 6d a3 01 00 	lea    0x1a36d(%rip),%rax        # 21478 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x50>
    710b:	48 89 c6             	mov    %rax,%rsi
    710e:	48 89 df             	mov    %rbx,%rdi
    7111:	e8 2a d0 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    7116:	48 8b 05 9b de 02 00 	mov    0x2de9b(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    711d:	48 89 c2             	mov    %rax,%rdx
    7120:	48 8d 05 19 dc 02 00 	lea    0x2dc19(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7127:	48 89 c6             	mov    %rax,%rsi
    712a:	48 89 df             	mov    %rbx,%rdi
    712d:	e8 ce d7 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return surface;
    7132:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7136:	eb 16                	jmp    714e <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create window surface.");
    7138:	49 89 c4             	mov    %rax,%r12
    713b:	48 89 df             	mov    %rbx,%rdi
    713e:	e8 bd d1 ff ff       	call   4300 <__cxa_free_exception@plt>
    7143:	4c 89 e0             	mov    %r12,%rax
    7146:	48 89 c7             	mov    %rax,%rdi
    7149:	e8 22 d8 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    714e:	48 83 c4 30          	add    $0x30,%rsp
    7152:	5b                   	pop    %rbx
    7153:	41 5c                	pop    %r12
    7155:	5d                   	pop    %rbp
    7156:	c3                   	ret

0000000000007157 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks>:

VkSwapchainKHR createSwapchain(VkDevice device,
                               const VkSwapchainCreateInfoKHR *pCreateInfo,
                               const VkAllocationCallbacks *pAllocator) {
    7157:	55                   	push   %rbp
    7158:	48 89 e5             	mov    %rsp,%rbp
    715b:	41 54                	push   %r12
    715d:	53                   	push   %rbx
    715e:	48 83 ec 30          	sub    $0x30,%rsp
    7162:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7166:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    716a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSwapchainKHR swapchain{};
    716e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    7175:	00 
  if (vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, &swapchain) !=
    7176:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    717a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    717e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    7182:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7186:	48 89 c7             	mov    %rax,%rdi
    7189:	e8 82 d4 ff ff       	call   4610 <vkCreateSwapchainKHR@plt>
    718e:	85 c0                	test   %eax,%eax
    7190:	0f 95 c0             	setne  %al
    7193:	84 c0                	test   %al,%al
    7195:	74 3b                	je     71d2 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks+0x7b>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create a swapchain.");
    7197:	bf 10 00 00 00       	mov    $0x10,%edi
    719c:	e8 2f d0 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    71a1:	48 89 c3             	mov    %rax,%rbx
    71a4:	48 8d 05 ee a2 01 00 	lea    0x1a2ee(%rip),%rax        # 21499 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x71>
    71ab:	48 89 c6             	mov    %rax,%rsi
    71ae:	48 89 df             	mov    %rbx,%rdi
    71b1:	e8 8a cf ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    71b6:	48 8b 05 fb dd 02 00 	mov    0x2ddfb(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    71bd:	48 89 c2             	mov    %rax,%rdx
    71c0:	48 8d 05 79 db 02 00 	lea    0x2db79(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    71c7:	48 89 c6             	mov    %rax,%rsi
    71ca:	48 89 df             	mov    %rbx,%rdi
    71cd:	e8 2e d7 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return swapchain;
    71d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    71d6:	eb 16                	jmp    71ee <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks+0x97>
    throw std::runtime_error("Failed to create a swapchain.");
    71d8:	49 89 c4             	mov    %rax,%r12
    71db:	48 89 df             	mov    %rbx,%rdi
    71de:	e8 1d d1 ff ff       	call   4300 <__cxa_free_exception@plt>
    71e3:	4c 89 e0             	mov    %r12,%rax
    71e6:	48 89 c7             	mov    %rax,%rdi
    71e9:	e8 82 d7 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    71ee:	48 83 c4 30          	add    $0x30,%rsp
    71f2:	5b                   	pop    %rbx
    71f3:	41 5c                	pop    %r12
    71f5:	5d                   	pop    %rbp
    71f6:	c3                   	ret

00000000000071f7 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>:

VkImageView createImageView(VkDevice device,
                            const VkImageViewCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator) {
    71f7:	55                   	push   %rbp
    71f8:	48 89 e5             	mov    %rsp,%rbp
    71fb:	41 54                	push   %r12
    71fd:	53                   	push   %rbx
    71fe:	48 83 ec 30          	sub    $0x30,%rsp
    7202:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7206:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    720a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkImageView imageView;
  if (vkCreateImageView(device, pCreateInfo, pAllocator, &imageView) !=
    720e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    7212:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7216:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    721a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    721e:	48 89 c7             	mov    %rax,%rdi
    7221:	e8 fa d2 ff ff       	call   4520 <vkCreateImageView@plt>
    7226:	85 c0                	test   %eax,%eax
    7228:	0f 95 c0             	setne  %al
    722b:	84 c0                	test   %al,%al
    722d:	74 3b                	je     726a <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create an image view.");
    722f:	bf 10 00 00 00       	mov    $0x10,%edi
    7234:	e8 97 cf ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7239:	48 89 c3             	mov    %rax,%rbx
    723c:	48 8d 05 75 a2 01 00 	lea    0x1a275(%rip),%rax        # 214b8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x90>
    7243:	48 89 c6             	mov    %rax,%rsi
    7246:	48 89 df             	mov    %rbx,%rdi
    7249:	e8 f2 ce ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    724e:	48 8b 05 63 dd 02 00 	mov    0x2dd63(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7255:	48 89 c2             	mov    %rax,%rdx
    7258:	48 8d 05 e1 da 02 00 	lea    0x2dae1(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    725f:	48 89 c6             	mov    %rax,%rsi
    7262:	48 89 df             	mov    %rbx,%rdi
    7265:	e8 96 d6 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return imageView;
    726a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    726e:	eb 16                	jmp    7286 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create an image view.");
    7270:	49 89 c4             	mov    %rax,%r12
    7273:	48 89 df             	mov    %rbx,%rdi
    7276:	e8 85 d0 ff ff       	call   4300 <__cxa_free_exception@plt>
    727b:	4c 89 e0             	mov    %r12,%rax
    727e:	48 89 c7             	mov    %rax,%rdi
    7281:	e8 ea d6 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    7286:	48 83 c4 30          	add    $0x30,%rsp
    728a:	5b                   	pop    %rbx
    728b:	41 5c                	pop    %r12
    728d:	5d                   	pop    %rbp
    728e:	c3                   	ret

000000000000728f <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks>:

VkShaderModule createShaderModule(VkDevice device,
                                  const std::vector<char> &shaderCode,
                                  const VkAllocationCallbacks *pAllocator) {
    728f:	55                   	push   %rbp
    7290:	48 89 e5             	mov    %rsp,%rbp
    7293:	41 54                	push   %r12
    7295:	53                   	push   %rbx
    7296:	48 83 ec 60          	sub    $0x60,%rsp
    729a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    729e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    72a2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  VkShaderModuleCreateInfo shaderModuleInfo{};
    72a6:	66 0f ef c0          	pxor   %xmm0,%xmm0
    72aa:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
    72ae:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
    72b2:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
  shaderModuleInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    72b7:	c7 45 c0 10 00 00 00 	movl   $0x10,-0x40(%rbp)
  shaderModuleInfo.codeSize = shaderCode.size();
    72be:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    72c2:	48 89 c7             	mov    %rax,%rdi
    72c5:	e8 80 06 00 00       	call   794a <_ZNKSt6vectorIcSaIcEE4sizeEv>
    72ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  shaderModuleInfo.pCode =
      reinterpret_cast<const uint32_t *>(shaderCode.data());
    72ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    72d2:	48 89 c7             	mov    %rax,%rdi
    72d5:	e8 90 06 00 00       	call   796a <_ZNKSt6vectorIcSaIcEE4dataEv>
  shaderModuleInfo.pCode =
    72da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  shaderModuleInfo.pNext = nullptr;
    72de:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    72e5:	00 

  VkShaderModule shaderModule;
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    72e6:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
    72ea:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    72ee:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    72f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    72f6:	48 89 c7             	mov    %rax,%rdi
    72f9:	e8 62 d0 ff ff       	call   4360 <vkCreateShaderModule@plt>
                           &shaderModule) != VK_SUCCESS) {
    72fe:	85 c0                	test   %eax,%eax
    7300:	0f 95 c0             	setne  %al
  if (vkCreateShaderModule(device, &shaderModuleInfo, pAllocator,
    7303:	84 c0                	test   %al,%al
    7305:	74 3b                	je     7342 <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks+0xb3>
    throw std::runtime_error("Failed to create shader module.");
    7307:	bf 10 00 00 00       	mov    $0x10,%edi
    730c:	e8 bf ce ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7311:	48 89 c3             	mov    %rax,%rbx
    7314:	48 8d 05 bd a1 01 00 	lea    0x1a1bd(%rip),%rax        # 214d8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xb0>
    731b:	48 89 c6             	mov    %rax,%rsi
    731e:	48 89 df             	mov    %rbx,%rdi
    7321:	e8 1a ce ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    7326:	48 8b 05 8b dc 02 00 	mov    0x2dc8b(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    732d:	48 89 c2             	mov    %rax,%rdx
    7330:	48 8d 05 09 da 02 00 	lea    0x2da09(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7337:	48 89 c6             	mov    %rax,%rsi
    733a:	48 89 df             	mov    %rbx,%rdi
    733d:	e8 be d5 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return shaderModule;
    7342:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7346:	eb 16                	jmp    735e <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks+0xcf>
    throw std::runtime_error("Failed to create shader module.");
    7348:	49 89 c4             	mov    %rax,%r12
    734b:	48 89 df             	mov    %rbx,%rdi
    734e:	e8 ad cf ff ff       	call   4300 <__cxa_free_exception@plt>
    7353:	4c 89 e0             	mov    %r12,%rax
    7356:	48 89 c7             	mov    %rax,%rdi
    7359:	e8 12 d6 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    735e:	48 83 c4 60          	add    $0x60,%rsp
    7362:	5b                   	pop    %rbx
    7363:	41 5c                	pop    %r12
    7365:	5d                   	pop    %rbp
    7366:	c3                   	ret

0000000000007367 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks>:

VkShaderModule createShaderModule(VkDevice device, std::string shaderCodePath,
                                  const VkAllocationCallbacks *pAllocator) {
    7367:	55                   	push   %rbp
    7368:	48 89 e5             	mov    %rsp,%rbp
    736b:	41 54                	push   %r12
    736d:	53                   	push   %rbx
    736e:	48 81 ec b0 02 00 00 	sub    $0x2b0,%rsp
    7375:	48 89 bd 58 fd ff ff 	mov    %rdi,-0x2a8(%rbp)
    737c:	48 89 b5 50 fd ff ff 	mov    %rsi,-0x2b0(%rbp)
    7383:	48 89 95 48 fd ff ff 	mov    %rdx,-0x2b8(%rbp)
  std::ifstream file(shaderCodePath, std::ios::ate | std::ios::binary);
    738a:	be 04 00 00 00       	mov    $0x4,%esi
    738f:	bf 02 00 00 00       	mov    $0x2,%edi
    7394:	e8 9e 05 00 00       	call   7937 <_ZStorSt13_Ios_OpenmodeS_>
    7399:	89 c2                	mov    %eax,%edx
    739b:	48 8b 8d 50 fd ff ff 	mov    -0x2b0(%rbp),%rcx
    73a2:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    73a9:	48 89 ce             	mov    %rcx,%rsi
    73ac:	48 89 c7             	mov    %rax,%rdi
    73af:	e8 ec d4 ff ff       	call   48a0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>
  if (!file.is_open()) {
    73b4:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    73bb:	48 89 c7             	mov    %rax,%rdi
    73be:	e8 cd d4 ff ff       	call   4890 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE7is_openEv@plt>
    73c3:	83 f0 01             	xor    $0x1,%eax
    73c6:	84 c0                	test   %al,%al
    73c8:	74 61                	je     742b <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0xc4>
    throw std::runtime_error("Failed to open " + shaderCodePath);
    73ca:	bf 10 00 00 00       	mov    $0x10,%edi
    73cf:	e8 fc cd ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    73d4:	48 89 c3             	mov    %rax,%rbx
    73d7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    73db:	48 8b 95 50 fd ff ff 	mov    -0x2b0(%rbp),%rdx
    73e2:	48 8d 0d 0f a1 01 00 	lea    0x1a10f(%rip),%rcx        # 214f8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xd0>
    73e9:	48 89 ce             	mov    %rcx,%rsi
    73ec:	48 89 c7             	mov    %rax,%rdi
    73ef:	e8 9a 05 00 00       	call   798e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
    73f4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    73f8:	48 89 c6             	mov    %rax,%rsi
    73fb:	48 89 df             	mov    %rbx,%rdi
    73fe:	e8 ad d4 ff ff       	call   48b0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    7403:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7407:	48 89 c7             	mov    %rax,%rdi
    740a:	e8 71 ce ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    740f:	48 8b 05 a2 db 02 00 	mov    0x2dba2(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7416:	48 89 c2             	mov    %rax,%rdx
    7419:	48 8d 05 20 d9 02 00 	lea    0x2d920(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7420:	48 89 c6             	mov    %rax,%rsi
    7423:	48 89 df             	mov    %rbx,%rdi
    7426:	e8 d5 d4 ff ff       	call   4900 <__cxa_throw@plt>
  }
  size_t bufferSize = static_cast<size_t>(file.tellg());
    742b:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    7432:	48 89 c7             	mov    %rax,%rdi
    7435:	e8 06 d5 ff ff       	call   4940 <_ZNSi5tellgEv@plt>
    743a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    743e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    7442:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7446:	48 89 c7             	mov    %rax,%rdi
    7449:	e8 42 06 00 00       	call   7a90 <_ZNKSt4fposI11__mbstate_tEcvlEv>
    744e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  std::vector<char> buffer(bufferSize);
    7452:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    7456:	48 89 c7             	mov    %rax,%rdi
    7459:	e8 22 d5 ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    745e:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
    7462:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7466:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
    746d:	48 89 ce             	mov    %rcx,%rsi
    7470:	48 89 c7             	mov    %rax,%rdi
    7473:	e8 2a 06 00 00       	call   7aa2 <_ZNSt6vectorIcSaIcEEC1EmRKS0_>
    7478:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    747c:	48 89 c7             	mov    %rax,%rdi
    747f:	e8 fc d0 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
  file.seekg(0);
    7484:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7488:	be 00 00 00 00       	mov    $0x0,%esi
    748d:	48 89 c7             	mov    %rax,%rdi
    7490:	e8 c7 06 00 00       	call   7b5c <_ZNSt4fposI11__mbstate_tEC1El>
    7495:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    7499:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    749d:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    74a4:	48 89 ce             	mov    %rcx,%rsi
    74a7:	48 89 c7             	mov    %rax,%rdi
    74aa:	e8 f1 d1 ff ff       	call   46a0 <_ZNSi5seekgESt4fposI11__mbstate_tE@plt>
  file.read(buffer.data(), bufferSize);
    74af:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    74b3:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
    74ba:	48 89 c7             	mov    %rax,%rdi
    74bd:	e8 ca 06 00 00       	call   7b8c <_ZNSt6vectorIcSaIcEE4dataEv>
    74c2:	48 89 c1             	mov    %rax,%rcx
    74c5:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    74cc:	48 89 da             	mov    %rbx,%rdx
    74cf:	48 89 ce             	mov    %rcx,%rsi
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 b6 d1 ff ff       	call   4690 <_ZNSi4readEPcl@plt>
  file.close();
    74da:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    74e1:	48 89 c7             	mov    %rax,%rdi
    74e4:	e8 a7 cb ff ff       	call   4090 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv@plt>

  return createShaderModule(device, buffer, pAllocator);
    74e9:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
    74f0:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
    74f7:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
    74fe:	48 89 ce             	mov    %rcx,%rsi
    7501:	48 89 c7             	mov    %rax,%rdi
    7504:	e8 86 fd ff ff       	call   728f <_ZN3vkh18createShaderModuleEP10VkDevice_TRKSt6vectorIcSaIcEEPK21VkAllocationCallbacks>
    7509:	48 89 c3             	mov    %rax,%rbx
    750c:	90                   	nop
}
    750d:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
    7514:	48 89 c7             	mov    %rax,%rdi
    7517:	e8 fc 05 00 00       	call   7b18 <_ZNSt6vectorIcSaIcEED1Ev>
    751c:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    7523:	48 89 c7             	mov    %rax,%rdi
    7526:	e8 b5 cb ff ff       	call   40e0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>
  return createShaderModule(device, buffer, pAllocator);
    752b:	48 89 d8             	mov    %rbx,%rax
    752e:	eb 63                	jmp    7593 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x22c>
    throw std::runtime_error("Failed to open " + shaderCodePath);
    7530:	49 89 c4             	mov    %rax,%r12
    7533:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7537:	48 89 c7             	mov    %rax,%rdi
    753a:	e8 41 cd ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    753f:	eb 03                	jmp    7544 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x1dd>
    7541:	49 89 c4             	mov    %rax,%r12
    7544:	48 89 df             	mov    %rbx,%rdi
    7547:	e8 b4 cd ff ff       	call   4300 <__cxa_free_exception@plt>
    754c:	4c 89 e3             	mov    %r12,%rbx
    754f:	eb 28                	jmp    7579 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x212>
  std::vector<char> buffer(bufferSize);
    7551:	48 89 c3             	mov    %rax,%rbx
    7554:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    7558:	48 89 c7             	mov    %rax,%rdi
    755b:	e8 20 d0 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    7560:	eb 17                	jmp    7579 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x212>
}
    7562:	48 89 c3             	mov    %rax,%rbx
    7565:	48 8d 85 60 fd ff ff 	lea    -0x2a0(%rbp),%rax
    756c:	48 89 c7             	mov    %rax,%rdi
    756f:	e8 a4 05 00 00       	call   7b18 <_ZNSt6vectorIcSaIcEED1Ev>
    7574:	eb 03                	jmp    7579 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks+0x212>
    7576:	48 89 c3             	mov    %rax,%rbx
    7579:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    7580:	48 89 c7             	mov    %rax,%rdi
    7583:	e8 58 cb ff ff       	call   40e0 <_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@plt>
    7588:	48 89 d8             	mov    %rbx,%rax
    758b:	48 89 c7             	mov    %rax,%rdi
    758e:	e8 dd d3 ff ff       	call   4970 <_Unwind_Resume@plt>
    7593:	48 81 c4 b0 02 00 00 	add    $0x2b0,%rsp
    759a:	5b                   	pop    %rbx
    759b:	41 5c                	pop    %r12
    759d:	5d                   	pop    %rbp
    759e:	c3                   	ret

000000000000759f <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks>:

VkPipelineLayout
createPipelineLayout(VkDevice device,
                     const VkPipelineLayoutCreateInfo *pCreateInfo,
                     const VkAllocationCallbacks *pAllocator) {
    759f:	55                   	push   %rbp
    75a0:	48 89 e5             	mov    %rsp,%rbp
    75a3:	41 54                	push   %r12
    75a5:	53                   	push   %rbx
    75a6:	48 83 ec 30          	sub    $0x30,%rsp
    75aa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    75ae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    75b2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkPipelineLayout pipelineLayout;
  if (vkCreatePipelineLayout(device, pCreateInfo, pAllocator,
    75b6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    75ba:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    75be:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    75c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    75c6:	48 89 c7             	mov    %rax,%rdi
    75c9:	e8 e2 cd ff ff       	call   43b0 <vkCreatePipelineLayout@plt>
                             &pipelineLayout) != VK_SUCCESS) {
    75ce:	85 c0                	test   %eax,%eax
    75d0:	0f 95 c0             	setne  %al
  if (vkCreatePipelineLayout(device, pCreateInfo, pAllocator,
    75d3:	84 c0                	test   %al,%al
    75d5:	74 3b                	je     7612 <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks+0x73>
    throw std::runtime_error("Failed to create pipeline layout.");
    75d7:	bf 10 00 00 00       	mov    $0x10,%edi
    75dc:	e8 ef cb ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    75e1:	48 89 c3             	mov    %rax,%rbx
    75e4:	48 8d 05 1d 9f 01 00 	lea    0x19f1d(%rip),%rax        # 21508 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe0>
    75eb:	48 89 c6             	mov    %rax,%rsi
    75ee:	48 89 df             	mov    %rbx,%rdi
    75f1:	e8 4a cb ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    75f6:	48 8b 05 bb d9 02 00 	mov    0x2d9bb(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    75fd:	48 89 c2             	mov    %rax,%rdx
    7600:	48 8d 05 39 d7 02 00 	lea    0x2d739(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7607:	48 89 c6             	mov    %rax,%rsi
    760a:	48 89 df             	mov    %rbx,%rdi
    760d:	e8 ee d2 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return pipelineLayout;
    7612:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7616:	eb 16                	jmp    762e <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create pipeline layout.");
    7618:	49 89 c4             	mov    %rax,%r12
    761b:	48 89 df             	mov    %rbx,%rdi
    761e:	e8 dd cc ff ff       	call   4300 <__cxa_free_exception@plt>
    7623:	4c 89 e0             	mov    %r12,%rax
    7626:	48 89 c7             	mov    %rax,%rdi
    7629:	e8 42 d3 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    762e:	48 83 c4 30          	add    $0x30,%rsp
    7632:	5b                   	pop    %rbx
    7633:	41 5c                	pop    %r12
    7635:	5d                   	pop    %rbp
    7636:	c3                   	ret

0000000000007637 <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks>:

VkRenderPass createRenderPass(VkDevice device,
                              const VkRenderPassCreateInfo *pCreateInfo,
                              const VkAllocationCallbacks *pAllocator) {
    7637:	55                   	push   %rbp
    7638:	48 89 e5             	mov    %rsp,%rbp
    763b:	41 54                	push   %r12
    763d:	53                   	push   %rbx
    763e:	48 83 ec 30          	sub    $0x30,%rsp
    7642:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7646:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    764a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkRenderPass renderPass;
  if (vkCreateRenderPass(device, pCreateInfo, pAllocator, &renderPass) !=
    764e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    7652:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7656:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    765a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    765e:	48 89 c7             	mov    %rax,%rdi
    7661:	e8 2a cc ff ff       	call   4290 <vkCreateRenderPass@plt>
    7666:	85 c0                	test   %eax,%eax
    7668:	0f 95 c0             	setne  %al
    766b:	84 c0                	test   %al,%al
    766d:	74 3b                	je     76aa <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create pipeline layout.");
    766f:	bf 10 00 00 00       	mov    $0x10,%edi
    7674:	e8 57 cb ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7679:	48 89 c3             	mov    %rax,%rbx
    767c:	48 8d 05 85 9e 01 00 	lea    0x19e85(%rip),%rax        # 21508 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe0>
    7683:	48 89 c6             	mov    %rax,%rsi
    7686:	48 89 df             	mov    %rbx,%rdi
    7689:	e8 b2 ca ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    768e:	48 8b 05 23 d9 02 00 	mov    0x2d923(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7695:	48 89 c2             	mov    %rax,%rdx
    7698:	48 8d 05 a1 d6 02 00 	lea    0x2d6a1(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    769f:	48 89 c6             	mov    %rax,%rsi
    76a2:	48 89 df             	mov    %rbx,%rdi
    76a5:	e8 56 d2 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return renderPass;
    76aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    76ae:	eb 16                	jmp    76c6 <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create pipeline layout.");
    76b0:	49 89 c4             	mov    %rax,%r12
    76b3:	48 89 df             	mov    %rbx,%rdi
    76b6:	e8 45 cc ff ff       	call   4300 <__cxa_free_exception@plt>
    76bb:	4c 89 e0             	mov    %r12,%rax
    76be:	48 89 c7             	mov    %rax,%rdi
    76c1:	e8 aa d2 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    76c6:	48 83 c4 30          	add    $0x30,%rsp
    76ca:	5b                   	pop    %rbx
    76cb:	41 5c                	pop    %r12
    76cd:	5d                   	pop    %rbp
    76ce:	c3                   	ret

00000000000076cf <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks>:

VkFramebuffer createFramebuffer(VkDevice device,
                                const VkFramebufferCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator) {
    76cf:	55                   	push   %rbp
    76d0:	48 89 e5             	mov    %rsp,%rbp
    76d3:	41 54                	push   %r12
    76d5:	53                   	push   %rbx
    76d6:	48 83 ec 30          	sub    $0x30,%rsp
    76da:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    76de:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    76e2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkFramebuffer framebuffer;
  if (vkCreateFramebuffer(device, pCreateInfo, pAllocator, &framebuffer) !=
    76e6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    76ea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    76ee:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    76f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    76f6:	48 89 c7             	mov    %rax,%rdi
    76f9:	e8 02 d0 ff ff       	call   4700 <vkCreateFramebuffer@plt>
    76fe:	85 c0                	test   %eax,%eax
    7700:	0f 95 c0             	setne  %al
    7703:	84 c0                	test   %al,%al
    7705:	74 3b                	je     7742 <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create framebuffer.");
    7707:	bf 10 00 00 00       	mov    $0x10,%edi
    770c:	e8 bf ca ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7711:	48 89 c3             	mov    %rax,%rbx
    7714:	48 8d 05 0f 9e 01 00 	lea    0x19e0f(%rip),%rax        # 2152a <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x102>
    771b:	48 89 c6             	mov    %rax,%rsi
    771e:	48 89 df             	mov    %rbx,%rdi
    7721:	e8 1a ca ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    7726:	48 8b 05 8b d8 02 00 	mov    0x2d88b(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    772d:	48 89 c2             	mov    %rax,%rdx
    7730:	48 8d 05 09 d6 02 00 	lea    0x2d609(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7737:	48 89 c6             	mov    %rax,%rsi
    773a:	48 89 df             	mov    %rbx,%rdi
    773d:	e8 be d1 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return framebuffer;
    7742:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7746:	eb 16                	jmp    775e <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create framebuffer.");
    7748:	49 89 c4             	mov    %rax,%r12
    774b:	48 89 df             	mov    %rbx,%rdi
    774e:	e8 ad cb ff ff       	call   4300 <__cxa_free_exception@plt>
    7753:	4c 89 e0             	mov    %r12,%rax
    7756:	48 89 c7             	mov    %rax,%rdi
    7759:	e8 12 d2 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    775e:	48 83 c4 30          	add    $0x30,%rsp
    7762:	5b                   	pop    %rbx
    7763:	41 5c                	pop    %r12
    7765:	5d                   	pop    %rbp
    7766:	c3                   	ret

0000000000007767 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>:

VkCommandPool createCommandPool(VkDevice device,
                                const VkCommandPoolCreateInfo *pCreateInfo,
                                const VkAllocationCallbacks *pAllocator) {
    7767:	55                   	push   %rbp
    7768:	48 89 e5             	mov    %rsp,%rbp
    776b:	41 54                	push   %r12
    776d:	53                   	push   %rbx
    776e:	48 83 ec 30          	sub    $0x30,%rsp
    7772:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7776:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    777a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkCommandPool commandPool{};
    777e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    7785:	00 
  if (vkCreateCommandPool(device, pCreateInfo, pAllocator, &commandPool) !=
    7786:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    778a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    778e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    7792:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7796:	48 89 c7             	mov    %rax,%rdi
    7799:	e8 f2 c9 ff ff       	call   4190 <vkCreateCommandPool@plt>
    779e:	85 c0                	test   %eax,%eax
    77a0:	0f 95 c0             	setne  %al
    77a3:	84 c0                	test   %al,%al
    77a5:	74 3b                	je     77e2 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks+0x7b>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create command pool.");
    77a7:	bf 10 00 00 00       	mov    $0x10,%edi
    77ac:	e8 1f ca ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    77b1:	48 89 c3             	mov    %rax,%rbx
    77b4:	48 8d 05 8d 9d 01 00 	lea    0x19d8d(%rip),%rax        # 21548 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x120>
    77bb:	48 89 c6             	mov    %rax,%rsi
    77be:	48 89 df             	mov    %rbx,%rdi
    77c1:	e8 7a c9 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    77c6:	48 8b 05 eb d7 02 00 	mov    0x2d7eb(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    77cd:	48 89 c2             	mov    %rax,%rdx
    77d0:	48 8d 05 69 d5 02 00 	lea    0x2d569(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    77d7:	48 89 c6             	mov    %rax,%rsi
    77da:	48 89 df             	mov    %rbx,%rdi
    77dd:	e8 1e d1 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return commandPool;
    77e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    77e6:	eb 16                	jmp    77fe <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks+0x97>
    throw std::runtime_error("Failed to create command pool.");
    77e8:	49 89 c4             	mov    %rax,%r12
    77eb:	48 89 df             	mov    %rbx,%rdi
    77ee:	e8 0d cb ff ff       	call   4300 <__cxa_free_exception@plt>
    77f3:	4c 89 e0             	mov    %r12,%rax
    77f6:	48 89 c7             	mov    %rax,%rdi
    77f9:	e8 72 d1 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    77fe:	48 83 c4 30          	add    $0x30,%rsp
    7802:	5b                   	pop    %rbx
    7803:	41 5c                	pop    %r12
    7805:	5d                   	pop    %rbp
    7806:	c3                   	ret

0000000000007807 <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks>:

VkSemaphore createSemaphore(VkDevice device,
                            const VkSemaphoreCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator) {
    7807:	55                   	push   %rbp
    7808:	48 89 e5             	mov    %rsp,%rbp
    780b:	41 54                	push   %r12
    780d:	53                   	push   %rbx
    780e:	48 83 ec 30          	sub    $0x30,%rsp
    7812:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7816:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    781a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSemaphore semaphore;
  if (vkCreateSemaphore(device, pCreateInfo, pAllocator, &semaphore) !=
    781e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    7822:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7826:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    782a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    782e:	48 89 c7             	mov    %rax,%rdi
    7831:	e8 1a cf ff ff       	call   4750 <vkCreateSemaphore@plt>
    7836:	85 c0                	test   %eax,%eax
    7838:	0f 95 c0             	setne  %al
    783b:	84 c0                	test   %al,%al
    783d:	74 3b                	je     787a <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks+0x73>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to create semaphore.");
    783f:	bf 10 00 00 00       	mov    $0x10,%edi
    7844:	e8 87 c9 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    7849:	48 89 c3             	mov    %rax,%rbx
    784c:	48 8d 05 14 9d 01 00 	lea    0x19d14(%rip),%rax        # 21567 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x13f>
    7853:	48 89 c6             	mov    %rax,%rsi
    7856:	48 89 df             	mov    %rbx,%rdi
    7859:	e8 e2 c8 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    785e:	48 8b 05 53 d7 02 00 	mov    0x2d753(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    7865:	48 89 c2             	mov    %rax,%rdx
    7868:	48 8d 05 d1 d4 02 00 	lea    0x2d4d1(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    786f:	48 89 c6             	mov    %rax,%rsi
    7872:	48 89 df             	mov    %rbx,%rdi
    7875:	e8 86 d0 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return semaphore;
    787a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    787e:	eb 16                	jmp    7896 <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create semaphore.");
    7880:	49 89 c4             	mov    %rax,%r12
    7883:	48 89 df             	mov    %rbx,%rdi
    7886:	e8 75 ca ff ff       	call   4300 <__cxa_free_exception@plt>
    788b:	4c 89 e0             	mov    %r12,%rax
    788e:	48 89 c7             	mov    %rax,%rdi
    7891:	e8 da d0 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    7896:	48 83 c4 30          	add    $0x30,%rsp
    789a:	5b                   	pop    %rbx
    789b:	41 5c                	pop    %r12
    789d:	5d                   	pop    %rbp
    789e:	c3                   	ret

000000000000789f <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks>:

VkFence createFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo,
                    const VkAllocationCallbacks *pAllocator) {
    789f:	55                   	push   %rbp
    78a0:	48 89 e5             	mov    %rsp,%rbp
    78a3:	41 54                	push   %r12
    78a5:	53                   	push   %rbx
    78a6:	48 83 ec 30          	sub    $0x30,%rsp
    78aa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    78ae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    78b2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkFence fence;
  if (vkCreateFence(device, pCreateInfo, pAllocator, &fence) != VK_SUCCESS) {
    78b6:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    78ba:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    78be:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    78c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    78c6:	48 89 c7             	mov    %rax,%rdi
    78c9:	e8 92 cd ff ff       	call   4660 <vkCreateFence@plt>
    78ce:	85 c0                	test   %eax,%eax
    78d0:	0f 95 c0             	setne  %al
    78d3:	84 c0                	test   %al,%al
    78d5:	74 3b                	je     7912 <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks+0x73>
    throw std::runtime_error("Failed to create fence.");
    78d7:	bf 10 00 00 00       	mov    $0x10,%edi
    78dc:	e8 ef c8 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    78e1:	48 89 c3             	mov    %rax,%rbx
    78e4:	48 8d 05 98 9c 01 00 	lea    0x19c98(%rip),%rax        # 21583 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x15b>
    78eb:	48 89 c6             	mov    %rax,%rsi
    78ee:	48 89 df             	mov    %rbx,%rdi
    78f1:	e8 4a c8 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    78f6:	48 8b 05 bb d6 02 00 	mov    0x2d6bb(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    78fd:	48 89 c2             	mov    %rax,%rdx
    7900:	48 8d 05 39 d4 02 00 	lea    0x2d439(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    7907:	48 89 c6             	mov    %rax,%rsi
    790a:	48 89 df             	mov    %rbx,%rdi
    790d:	e8 ee cf ff ff       	call   4900 <__cxa_throw@plt>
  }
  return fence;
    7912:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7916:	eb 16                	jmp    792e <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks+0x8f>
    throw std::runtime_error("Failed to create fence.");
    7918:	49 89 c4             	mov    %rax,%r12
    791b:	48 89 df             	mov    %rbx,%rdi
    791e:	e8 dd c9 ff ff       	call   4300 <__cxa_free_exception@plt>
    7923:	4c 89 e0             	mov    %r12,%rax
    7926:	48 89 c7             	mov    %rax,%rdi
    7929:	e8 42 d0 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    792e:	48 83 c4 30          	add    $0x30,%rsp
    7932:	5b                   	pop    %rbx
    7933:	41 5c                	pop    %r12
    7935:	5d                   	pop    %rbp
    7936:	c3                   	ret

0000000000007937 <_ZStorSt13_Ios_OpenmodeS_>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
    7937:	55                   	push   %rbp
    7938:	48 89 e5             	mov    %rsp,%rbp
    793b:	89 7d fc             	mov    %edi,-0x4(%rbp)
    793e:	89 75 f8             	mov    %esi,-0x8(%rbp)
    7941:	8b 45 fc             	mov    -0x4(%rbp),%eax
    7944:	0b 45 f8             	or     -0x8(%rbp),%eax
    7947:	5d                   	pop    %rbp
    7948:	c3                   	ret
    7949:	90                   	nop

000000000000794a <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    794a:	55                   	push   %rbp
    794b:	48 89 e5             	mov    %rsp,%rbp
    794e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7956:	48 8b 50 08          	mov    0x8(%rax),%rdx
    795a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    795e:	48 8b 00             	mov    (%rax),%rax
    7961:	48 29 c2             	sub    %rax,%rdx
    7964:	48 89 d0             	mov    %rdx,%rax
    7967:	5d                   	pop    %rbp
    7968:	c3                   	ret
    7969:	90                   	nop

000000000000796a <_ZNKSt6vectorIcSaIcEE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
    796a:	55                   	push   %rbp
    796b:	48 89 e5             	mov    %rsp,%rbp
    796e:	48 83 ec 10          	sub    $0x10,%rsp
    7972:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    7976:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    797a:	48 8b 10             	mov    (%rax),%rdx
    797d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7981:	48 89 d6             	mov    %rdx,%rsi
    7984:	48 89 c7             	mov    %rax,%rdi
    7987:	e8 24 02 00 00       	call   7bb0 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
    798c:	c9                   	leave
    798d:	c3                   	ret

000000000000798e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
#endif

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
    798e:	55                   	push   %rbp
    798f:	48 89 e5             	mov    %rsp,%rbp
    7992:	53                   	push   %rbx
    7993:	48 83 ec 38          	sub    $0x38,%rsp
    7997:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    799b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    799f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
    79a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    79a7:	48 89 c7             	mov    %rax,%rdi
    79aa:	e8 42 d6 ff ff       	call   4ff1 <_ZNSt11char_traitsIcE6lengthEPKc>
    79af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      __string_type __str(_Alloc_traits::_S_select_on_copy(
    79b3:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    79b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    79bb:	48 89 d6             	mov    %rdx,%rsi
    79be:	48 89 c7             	mov    %rax,%rdi
    79c1:	e8 6a c7 ff ff       	call   4130 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv@plt>
    79c6:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    79ca:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
    79ce:	48 89 d6             	mov    %rdx,%rsi
    79d1:	48 89 c7             	mov    %rax,%rdi
    79d4:	e8 e9 01 00 00       	call   7bc2 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
    79d9:	48 8d 55 e6          	lea    -0x1a(%rbp),%rdx
    79dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    79e1:	48 89 d6             	mov    %rdx,%rsi
    79e4:	48 89 c7             	mov    %rax,%rdi
    79e7:	e8 24 cf ff ff       	call   4910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_@plt>
    79ec:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    79f0:	48 89 c7             	mov    %rax,%rdi
    79f3:	e8 88 cb ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    79f8:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    79fc:	48 89 c7             	mov    %rax,%rdi
    79ff:	e8 7c cb ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
    7a04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a08:	48 89 c7             	mov    %rax,%rdi
    7a0b:	e8 d0 c8 ff ff       	call   42e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@plt>
    7a10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7a14:	48 01 c2             	add    %rax,%rdx
    7a17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7a1b:	48 89 d6             	mov    %rdx,%rsi
    7a1e:	48 89 c7             	mov    %rax,%rdi
    7a21:	e8 1a ce ff ff       	call   4840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>
      __str.append(__lhs, __len);
    7a26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7a2a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    7a2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7a32:	48 89 ce             	mov    %rcx,%rsi
    7a35:	48 89 c7             	mov    %rax,%rdi
    7a38:	e8 13 c6 ff ff       	call   4050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm@plt>
      __str.append(__rhs);
    7a3d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7a41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7a45:	48 89 d6             	mov    %rdx,%rsi
    7a48:	48 89 c7             	mov    %rax,%rdi
    7a4b:	e8 c0 cf ff ff       	call   4a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_@plt>
      return __str;
    7a50:	eb 34                	jmp    7a86 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0xf8>
      __string_type __str(_Alloc_traits::_S_select_on_copy(
    7a52:	48 89 c3             	mov    %rax,%rbx
    7a55:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    7a59:	48 89 c7             	mov    %rax,%rdi
    7a5c:	e8 1f cb ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    7a61:	48 89 d8             	mov    %rbx,%rax
    7a64:	48 89 c7             	mov    %rax,%rdi
    7a67:	e8 04 cf ff ff       	call   4970 <_Unwind_Resume@plt>
    }
    7a6c:	48 89 c3             	mov    %rax,%rbx
    7a6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7a73:	48 89 c7             	mov    %rax,%rdi
    7a76:	e8 05 c8 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    7a7b:	48 89 d8             	mov    %rbx,%rax
    7a7e:	48 89 c7             	mov    %rax,%rdi
    7a81:	e8 ea ce ff ff       	call   4970 <_Unwind_Resume@plt>
    7a86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7a8a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a8e:	c9                   	leave
    7a8f:	c3                   	ret

0000000000007a90 <_ZNKSt4fposI11__mbstate_tEcvlEv>:
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;
#endif

      /// Convert to streamoff.
      operator streamoff() const { return _M_off; }
    7a90:	55                   	push   %rbp
    7a91:	48 89 e5             	mov    %rsp,%rbp
    7a94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a9c:	48 8b 00             	mov    (%rax),%rax
    7a9f:	5d                   	pop    %rbp
    7aa0:	c3                   	ret
    7aa1:	90                   	nop

0000000000007aa2 <_ZNSt6vectorIcSaIcEEC1EmRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    7aa2:	55                   	push   %rbp
    7aa3:	48 89 e5             	mov    %rsp,%rbp
    7aa6:	53                   	push   %rbx
    7aa7:	48 83 ec 28          	sub    $0x28,%rsp
    7aab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7aaf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7ab3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    7ab7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    7abb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7abf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7ac3:	48 89 d6             	mov    %rdx,%rsi
    7ac6:	48 89 c7             	mov    %rax,%rdi
    7ac9:	e8 1d 01 00 00       	call   7beb <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEmRKS0_>
    7ace:	48 89 c1             	mov    %rax,%rcx
    7ad1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7ad5:	48 89 c2             	mov    %rax,%rdx
    7ad8:	48 89 ce             	mov    %rcx,%rsi
    7adb:	48 89 df             	mov    %rbx,%rdi
    7ade:	e8 85 01 00 00       	call   7c68 <_ZNSt12_Vector_baseIcSaIcEEC1EmRKS0_>
      { _M_default_initialize(__n); }
    7ae3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7ae7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7aeb:	48 89 d6             	mov    %rdx,%rsi
    7aee:	48 89 c7             	mov    %rax,%rdi
    7af1:	e8 14 02 00 00       	call   7d0a <_ZNSt6vectorIcSaIcEE21_M_default_initializeEm>
    7af6:	eb 1a                	jmp    7b12 <_ZNSt6vectorIcSaIcEEC1EmRKS0_+0x70>
    7af8:	48 89 c3             	mov    %rax,%rbx
    7afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7aff:	48 89 c7             	mov    %rax,%rdi
    7b02:	e8 bf 01 00 00       	call   7cc6 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
    7b07:	48 89 d8             	mov    %rbx,%rax
    7b0a:	48 89 c7             	mov    %rax,%rdi
    7b0d:	e8 5e ce ff ff       	call   4970 <_Unwind_Resume@plt>
    7b12:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7b16:	c9                   	leave
    7b17:	c3                   	ret

0000000000007b18 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    7b18:	55                   	push   %rbp
    7b19:	48 89 e5             	mov    %rsp,%rbp
    7b1c:	48 83 ec 10          	sub    $0x10,%rsp
    7b20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    7b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b28:	48 89 c7             	mov    %rax,%rdi
    7b2b:	e8 1a 02 00 00       	call   7d4a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
    7b30:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    7b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b37:	48 8b 48 08          	mov    0x8(%rax),%rcx
    7b3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b3f:	48 8b 00             	mov    (%rax),%rax
    7b42:	48 89 ce             	mov    %rcx,%rsi
    7b45:	48 89 c7             	mov    %rax,%rdi
    7b48:	e8 0b 02 00 00       	call   7d58 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
    7b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b51:	48 89 c7             	mov    %rax,%rdi
    7b54:	e8 6d 01 00 00       	call   7cc6 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
    7b59:	90                   	nop
    7b5a:	c9                   	leave
    7b5b:	c3                   	ret

0000000000007b5c <_ZNSt4fposI11__mbstate_tEC1El>:
      fpos(streamoff __off)
    7b5c:	55                   	push   %rbp
    7b5d:	48 89 e5             	mov    %rsp,%rbp
    7b60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7b64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_off(__off), _M_state() { }
    7b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7b70:	48 89 10             	mov    %rdx,(%rax)
    7b73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b77:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    7b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b82:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    7b89:	90                   	nop
    7b8a:	5d                   	pop    %rbp
    7b8b:	c3                   	ret

0000000000007b8c <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    7b8c:	55                   	push   %rbp
    7b8d:	48 89 e5             	mov    %rsp,%rbp
    7b90:	48 83 ec 10          	sub    $0x10,%rsp
    7b94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    7b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b9c:	48 8b 10             	mov    (%rax),%rdx
    7b9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ba3:	48 89 d6             	mov    %rdx,%rsi
    7ba6:	48 89 c7             	mov    %rax,%rdi
    7ba9:	e8 02 00 00 00       	call   7bb0 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
    7bae:	c9                   	leave
    7baf:	c3                   	ret

0000000000007bb0 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    7bb0:	55                   	push   %rbp
    7bb1:	48 89 e5             	mov    %rsp,%rbp
    7bb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7bb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    7bbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7bc0:	5d                   	pop    %rbp
    7bc1:	c3                   	ret

0000000000007bc2 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    7bc2:	55                   	push   %rbp
    7bc3:	48 89 e5             	mov    %rsp,%rbp
    7bc6:	48 83 ec 10          	sub    $0x10,%rsp
    7bca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7bce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
    7bd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7bd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7bda:	48 89 d6             	mov    %rdx,%rsi
    7bdd:	48 89 c7             	mov    %rax,%rdi
    7be0:	e8 a8 01 00 00       	call   7d8d <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
    7be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7be9:	c9                   	leave
    7bea:	c3                   	ret

0000000000007beb <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEmRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    7beb:	55                   	push   %rbp
    7bec:	48 89 e5             	mov    %rsp,%rbp
    7bef:	53                   	push   %rbx
    7bf0:	48 83 ec 28          	sub    $0x28,%rsp
    7bf4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7bf8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    7bfc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7c00:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7c04:	48 89 d6             	mov    %rdx,%rsi
    7c07:	48 89 c7             	mov    %rax,%rdi
    7c0a:	e8 21 c6 ff ff       	call   4230 <_ZNSaIcEC1ERKS_@plt>
    7c0f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7c13:	48 89 c7             	mov    %rax,%rdi
    7c16:	e8 9b 01 00 00       	call   7db6 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
    7c1b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    7c1f:	0f 92 c3             	setb   %bl
    7c22:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    7c26:	48 89 c7             	mov    %rax,%rdi
    7c29:	e8 52 c9 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    7c2e:	84 db                	test   %bl,%bl
    7c30:	74 0f                	je     7c41 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEmRKS0_+0x56>
	  __throw_length_error(
    7c32:	48 8d 05 67 99 01 00 	lea    0x19967(%rip),%rax        # 215a0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x178>
    7c39:	48 89 c7             	mov    %rax,%rdi
    7c3c:	e8 bf c5 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    7c41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    7c45:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7c49:	c9                   	leave
    7c4a:	c3                   	ret
    7c4b:	90                   	nop

0000000000007c4c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
    7c4c:	55                   	push   %rbp
    7c4d:	48 89 e5             	mov    %rsp,%rbp
    7c50:	48 83 ec 10          	sub    $0x10,%rsp
    7c54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7c58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7c5c:	48 89 c7             	mov    %rax,%rdi
    7c5f:	e8 1c c4 ff ff       	call   4080 <_ZNSaIcED2Ev@plt>
    7c64:	90                   	nop
    7c65:	c9                   	leave
    7c66:	c3                   	ret
    7c67:	90                   	nop

0000000000007c68 <_ZNSt12_Vector_baseIcSaIcEEC1EmRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    7c68:	55                   	push   %rbp
    7c69:	48 89 e5             	mov    %rsp,%rbp
    7c6c:	53                   	push   %rbx
    7c6d:	48 83 ec 28          	sub    $0x28,%rsp
    7c71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7c75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    7c79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    7c7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c81:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7c85:	48 89 d6             	mov    %rdx,%rsi
    7c88:	48 89 c7             	mov    %rax,%rdi
    7c8b:	e8 68 01 00 00       	call   7df8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
    7c90:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7c94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c98:	48 89 d6             	mov    %rdx,%rsi
    7c9b:	48 89 c7             	mov    %rax,%rdi
    7c9e:	e8 87 01 00 00       	call   7e2a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEm>
    7ca3:	eb 1a                	jmp    7cbf <_ZNSt12_Vector_baseIcSaIcEEC1EmRKS0_+0x57>
    7ca5:	48 89 c3             	mov    %rax,%rbx
    7ca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7cac:	48 89 c7             	mov    %rax,%rdi
    7caf:	e8 98 ff ff ff       	call   7c4c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
    7cb4:	48 89 d8             	mov    %rbx,%rax
    7cb7:	48 89 c7             	mov    %rax,%rdi
    7cba:	e8 b1 cc ff ff       	call   4970 <_Unwind_Resume@plt>
    7cbf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7cc3:	c9                   	leave
    7cc4:	c3                   	ret
    7cc5:	90                   	nop

0000000000007cc6 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    7cc6:	55                   	push   %rbp
    7cc7:	48 89 e5             	mov    %rsp,%rbp
    7cca:	48 83 ec 10          	sub    $0x10,%rsp
    7cce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    7cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7cd6:	48 8b 50 10          	mov    0x10(%rax),%rdx
    7cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7cde:	48 8b 00             	mov    (%rax),%rax
    7ce1:	48 29 c2             	sub    %rax,%rdx
	_M_deallocate(_M_impl._M_start,
    7ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ce8:	48 8b 08             	mov    (%rax),%rcx
    7ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7cef:	48 89 ce             	mov    %rcx,%rsi
    7cf2:	48 89 c7             	mov    %rax,%rdi
    7cf5:	e8 82 01 00 00       	call   7e7c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>
      }
    7cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7cfe:	48 89 c7             	mov    %rax,%rdi
    7d01:	e8 46 ff ff ff       	call   7c4c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
    7d06:	90                   	nop
    7d07:	c9                   	leave
    7d08:	c3                   	ret
    7d09:	90                   	nop

0000000000007d0a <_ZNSt6vectorIcSaIcEE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    7d0a:	55                   	push   %rbp
    7d0b:	48 89 e5             	mov    %rsp,%rbp
    7d0e:	48 83 ec 10          	sub    $0x10,%rsp
    7d12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7d16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    7d1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7d1e:	48 89 c7             	mov    %rax,%rdi
    7d21:	e8 24 00 00 00       	call   7d4a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
    7d26:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    7d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7d2d:	48 8b 00             	mov    (%rax),%rax
    7d30:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7d34:	48 89 ce             	mov    %rcx,%rsi
    7d37:	48 89 c7             	mov    %rax,%rdi
    7d3a:	e8 72 01 00 00       	call   7eb1 <_ZSt27__uninitialized_default_n_aIPcmcET_S1_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    7d3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7d43:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    7d47:	90                   	nop
    7d48:	c9                   	leave
    7d49:	c3                   	ret

0000000000007d4a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    7d4a:	55                   	push   %rbp
    7d4b:	48 89 e5             	mov    %rsp,%rbp
    7d4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    7d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7d56:	5d                   	pop    %rbp
    7d57:	c3                   	ret

0000000000007d58 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    7d58:	55                   	push   %rbp
    7d59:	48 89 e5             	mov    %rsp,%rbp
    7d5c:	48 83 ec 20          	sub    $0x20,%rsp
    7d60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7d64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7d68:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    7d6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7d70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7d74:	48 89 d6             	mov    %rdx,%rsi
    7d77:	48 89 c7             	mov    %rax,%rdi
    7d7a:	e8 5b 01 00 00       	call   7eda <_ZSt8_DestroyIPcEvT_S1_>
    }
    7d7f:	90                   	nop
    7d80:	c9                   	leave
    7d81:	c3                   	ret

0000000000007d82 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
    7d82:	55                   	push   %rbp
    7d83:	48 89 e5             	mov    %rsp,%rbp
    7d86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    7d8a:	90                   	nop
    7d8b:	5d                   	pop    %rbp
    7d8c:	c3                   	ret

0000000000007d8d <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
    7d8d:	55                   	push   %rbp
    7d8e:	48 89 e5             	mov    %rsp,%rbp
    7d91:	48 83 ec 10          	sub    $0x10,%rsp
    7d95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7d99:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
    7d9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7da1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7da5:	48 89 d6             	mov    %rdx,%rsi
    7da8:	48 89 c7             	mov    %rax,%rdi
    7dab:	e8 80 c4 ff ff       	call   4230 <_ZNSaIcEC1ERKS_@plt>
    7db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7db4:	c9                   	leave
    7db5:	c3                   	ret

0000000000007db6 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    7db6:	55                   	push   %rbp
    7db7:	48 89 e5             	mov    %rsp,%rbp
    7dba:	48 83 ec 20          	sub    $0x20,%rsp
    7dbe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    7dc2:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    7dc9:	ff ff 7f 
    7dcc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    7dd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7dd4:	48 89 c7             	mov    %rax,%rdi
    7dd7:	e8 52 01 00 00       	call   7f2e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
    7ddc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    7de0:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    7de4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    7de8:	48 89 d6             	mov    %rdx,%rsi
    7deb:	48 89 c7             	mov    %rax,%rdi
    7dee:	e8 a4 df ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    7df3:	48 8b 00             	mov    (%rax),%rax
      }
    7df6:	c9                   	leave
    7df7:	c3                   	ret

0000000000007df8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    7df8:	55                   	push   %rbp
    7df9:	48 89 e5             	mov    %rsp,%rbp
    7dfc:	48 83 ec 10          	sub    $0x10,%rsp
    7e00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    7e08:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7e0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e10:	48 89 d6             	mov    %rdx,%rsi
    7e13:	48 89 c7             	mov    %rax,%rdi
    7e16:	e8 85 c9 ff ff       	call   47a0 <_ZNSaIcEC2ERKS_@plt>
    7e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e1f:	48 89 c7             	mov    %rax,%rdi
    7e22:	e8 21 01 00 00       	call   7f48 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
    7e27:	90                   	nop
    7e28:	c9                   	leave
    7e29:	c3                   	ret

0000000000007e2a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    7e2a:	55                   	push   %rbp
    7e2b:	48 89 e5             	mov    %rsp,%rbp
    7e2e:	48 83 ec 10          	sub    $0x10,%rsp
    7e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    7e3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e42:	48 89 d6             	mov    %rdx,%rsi
    7e45:	48 89 c7             	mov    %rax,%rdi
    7e48:	e8 29 01 00 00       	call   7f76 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>
    7e4d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7e51:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    7e54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e58:	48 8b 10             	mov    (%rax),%rdx
    7e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    7e63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e67:	48 8b 10             	mov    (%rax),%rdx
    7e6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7e6e:	48 01 c2             	add    %rax,%rdx
    7e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e75:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    7e79:	90                   	nop
    7e7a:	c9                   	leave
    7e7b:	c3                   	ret

0000000000007e7c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>:
      _M_deallocate(pointer __p, size_t __n)
    7e7c:	55                   	push   %rbp
    7e7d:	48 89 e5             	mov    %rsp,%rbp
    7e80:	48 83 ec 20          	sub    $0x20,%rsp
    7e84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7e88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7e8c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    7e90:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7e95:	74 17                	je     7eae <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    7e97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7e9f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7ea3:	48 89 ce             	mov    %rcx,%rsi
    7ea6:	48 89 c7             	mov    %rax,%rdi
    7ea9:	e8 52 00 00 00       	call   7f00 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>
      }
    7eae:	90                   	nop
    7eaf:	c9                   	leave
    7eb0:	c3                   	ret

0000000000007eb1 <_ZSt27__uninitialized_default_n_aIPcmcET_S1_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    7eb1:	55                   	push   %rbp
    7eb2:	48 89 e5             	mov    %rsp,%rbp
    7eb5:	48 83 ec 20          	sub    $0x20,%rsp
    7eb9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7ebd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7ec1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    7ec5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7ec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ecd:	48 89 d6             	mov    %rdx,%rsi
    7ed0:	48 89 c7             	mov    %rax,%rdi
    7ed3:	e8 d1 00 00 00       	call   7fa9 <_ZSt25__uninitialized_default_nIPcmET_S1_T0_>
    7ed8:	c9                   	leave
    7ed9:	c3                   	ret

0000000000007eda <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    7eda:	55                   	push   %rbp
    7edb:	48 89 e5             	mov    %rsp,%rbp
    7ede:	48 83 ec 10          	sub    $0x10,%rsp
    7ee2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7ee6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    7eea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7eee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ef2:	48 89 d6             	mov    %rdx,%rsi
    7ef5:	48 89 c7             	mov    %rax,%rdi
    7ef8:	e8 d5 00 00 00       	call   7fd2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
    7efd:	90                   	nop
    7efe:	c9                   	leave
    7eff:	c3                   	ret

0000000000007f00 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    7f00:	55                   	push   %rbp
    7f01:	48 89 e5             	mov    %rsp,%rbp
    7f04:	48 83 ec 20          	sub    $0x20,%rsp
    7f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7f0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7f10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    7f14:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7f18:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f20:	48 89 ce             	mov    %rcx,%rsi
    7f23:	48 89 c7             	mov    %rax,%rdi
    7f26:	e8 c5 00 00 00       	call   7ff0 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
    7f2b:	90                   	nop
    7f2c:	c9                   	leave
    7f2d:	c3                   	ret

0000000000007f2e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    7f2e:	55                   	push   %rbp
    7f2f:	48 89 e5             	mov    %rsp,%rbp
    7f32:	48 83 ec 10          	sub    $0x10,%rsp
    7f36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    7f3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f3e:	48 89 c7             	mov    %rax,%rdi
    7f41:	e8 d4 00 00 00       	call   801a <_ZNKSt15__new_allocatorIcE8max_sizeEv>
      }
    7f46:	c9                   	leave
    7f47:	c3                   	ret

0000000000007f48 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    7f48:	55                   	push   %rbp
    7f49:	48 89 e5             	mov    %rsp,%rbp
    7f4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    7f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f54:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    7f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f5f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    7f66:	00 
    7f67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f6b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    7f72:	00 
	{ }
    7f73:	90                   	nop
    7f74:	5d                   	pop    %rbp
    7f75:	c3                   	ret

0000000000007f76 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>:
      _M_allocate(size_t __n)
    7f76:	55                   	push   %rbp
    7f77:	48 89 e5             	mov    %rsp,%rbp
    7f7a:	48 83 ec 10          	sub    $0x10,%rsp
    7f7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7f82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    7f86:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7f8b:	74 15                	je     7fa2 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm+0x2c>
    7f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7f91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    7f95:	48 89 d6             	mov    %rdx,%rsi
    7f98:	48 89 c7             	mov    %rax,%rdi
    7f9b:	e8 94 00 00 00       	call   8034 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    7fa0:	eb 05                	jmp    7fa7 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm+0x31>
    7fa2:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    7fa7:	c9                   	leave
    7fa8:	c3                   	ret

0000000000007fa9 <_ZSt25__uninitialized_default_nIPcmET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    7fa9:	55                   	push   %rbp
    7faa:	48 89 e5             	mov    %rsp,%rbp
    7fad:	48 83 ec 20          	sub    $0x20,%rsp
    7fb1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7fb5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    7fb9:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    7fbd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7fc5:	48 89 d6             	mov    %rdx,%rsi
    7fc8:	48 89 c7             	mov    %rax,%rdi
    7fcb:	e8 8e 00 00 00       	call   805e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPcmEET_S3_T0_>
    }
    7fd0:	c9                   	leave
    7fd1:	c3                   	ret

0000000000007fd2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    7fd2:	55                   	push   %rbp
    7fd3:	48 89 e5             	mov    %rsp,%rbp
    7fd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7fda:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    7fde:	90                   	nop
    7fdf:	5d                   	pop    %rbp
    7fe0:	c3                   	ret

0000000000007fe1 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    7fe1:	55                   	push   %rbp
    7fe2:	48 89 e5             	mov    %rsp,%rbp
    7fe5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    7fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7fed:	5d                   	pop    %rbp
    7fee:	c3                   	ret
    7fef:	90                   	nop

0000000000007ff0 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    7ff0:	55                   	push   %rbp
    7ff1:	48 89 e5             	mov    %rsp,%rbp
    7ff4:	48 83 ec 20          	sub    $0x20,%rsp
    7ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7ffc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8000:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    8004:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8008:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    800c:	48 89 d6             	mov    %rdx,%rsi
    800f:	48 89 c7             	mov    %rax,%rdi
    8012:	e8 d9 c4 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    8017:	c9                   	leave
    8018:	c3                   	ret
    8019:	90                   	nop

000000000000801a <_ZNKSt15__new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    801a:	55                   	push   %rbp
    801b:	48 89 e5             	mov    %rsp,%rbp
    801e:	48 83 ec 10          	sub    $0x10,%rsp
    8022:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    8026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    802a:	48 89 c7             	mov    %rax,%rdi
    802d:	e8 8a 00 00 00       	call   80bc <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
    8032:	c9                   	leave
    8033:	c3                   	ret

0000000000008034 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>:
      allocate(allocator_type& __a, size_type __n)
    8034:	55                   	push   %rbp
    8035:	48 89 e5             	mov    %rsp,%rbp
    8038:	48 83 ec 10          	sub    $0x10,%rsp
    803c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8040:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    8044:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    804c:	ba 00 00 00 00       	mov    $0x0,%edx
    8051:	48 89 ce             	mov    %rcx,%rsi
    8054:	48 89 c7             	mov    %rax,%rdi
    8057:	e8 74 00 00 00       	call   80d0 <_ZNSt15__new_allocatorIcE8allocateEmPKv>
    805c:	c9                   	leave
    805d:	c3                   	ret

000000000000805e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPcmEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    805e:	55                   	push   %rbp
    805f:	48 89 e5             	mov    %rsp,%rbp
    8062:	48 83 ec 20          	sub    $0x20,%rsp
    8066:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    806a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    806e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    8073:	74 40                	je     80b5 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPcmEET_S3_T0_+0x57>
		= std::__addressof(*__first);
    8075:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8079:	48 89 c7             	mov    %rax,%rdi
    807c:	e8 60 ff ff ff       	call   7fe1 <_ZSt11__addressofIcEPT_RS0_>
    8081:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    8085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8089:	48 89 c7             	mov    %rax,%rdi
    808c:	e8 87 00 00 00       	call   8118 <_ZSt10_ConstructIcJEEvPT_DpOT0_>
	      ++__first;
    8091:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    8096:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    809a:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    809e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    80a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    80a6:	48 89 ce             	mov    %rcx,%rsi
    80a9:	48 89 c7             	mov    %rax,%rdi
    80ac:	e8 8a 00 00 00       	call   813b <_ZSt6fill_nIPcmcET_S1_T0_RKT1_>
    80b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    80b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    80b9:	c9                   	leave
    80ba:	c3                   	ret
    80bb:	90                   	nop

00000000000080bc <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    80bc:	55                   	push   %rbp
    80bd:	48 89 e5             	mov    %rsp,%rbp
    80c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    80c4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    80cb:	ff ff 7f 
      }
    80ce:	5d                   	pop    %rbp
    80cf:	c3                   	ret

00000000000080d0 <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    80d0:	55                   	push   %rbp
    80d1:	48 89 e5             	mov    %rsp,%rbp
    80d4:	48 83 ec 20          	sub    $0x20,%rsp
    80d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    80dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    80e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    80e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    80e8:	48 89 c7             	mov    %rax,%rdi
    80eb:	e8 cc ff ff ff       	call   80bc <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
    80f0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    80f4:	0f 92 c0             	setb   %al
    80f7:	0f b6 c0             	movzbl %al,%eax
    80fa:	48 85 c0             	test   %rax,%rax
    80fd:	0f 95 c0             	setne  %al
    8100:	84 c0                	test   %al,%al
    8102:	74 05                	je     8109 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x39>
	    std::__throw_bad_alloc();
    8104:	e8 17 c0 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    8109:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    810d:	48 89 c7             	mov    %rax,%rdi
    8110:	e8 bb c3 ff ff       	call   44d0 <_Znwm@plt>
    8115:	90                   	nop
      }
    8116:	c9                   	leave
    8117:	c3                   	ret

0000000000008118 <_ZSt10_ConstructIcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    8118:	55                   	push   %rbp
    8119:	48 89 e5             	mov    %rsp,%rbp
    811c:	48 83 ec 10          	sub    $0x10,%rsp
    8120:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    8124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8128:	48 89 c6             	mov    %rax,%rsi
    812b:	bf 01 00 00 00       	mov    $0x1,%edi
    8130:	e8 1d e6 ff ff       	call   6752 <_ZnwmPv>
    8135:	c6 00 00             	movb   $0x0,(%rax)
    }
    8138:	90                   	nop
    8139:	c9                   	leave
    813a:	c3                   	ret

000000000000813b <_ZSt6fill_nIPcmcET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    813b:	55                   	push   %rbp
    813c:	48 89 e5             	mov    %rsp,%rbp
    813f:	48 83 ec 20          	sub    $0x20,%rsp
    8143:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8147:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    814b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    814f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8153:	48 89 c7             	mov    %rax,%rdi
    8156:	e8 27 fc ff ff       	call   7d82 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    815b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    815f:	48 89 c7             	mov    %rax,%rdi
    8162:	e8 fd e5 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    8167:	48 89 c1             	mov    %rax,%rcx
    816a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    816e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8172:	48 89 ce             	mov    %rcx,%rsi
    8175:	48 89 c7             	mov    %rax,%rdi
    8178:	e8 02 00 00 00       	call   817f <_ZSt10__fill_n_aIPcmcET_S1_T0_RKT1_St26random_access_iterator_tag>
    }
    817d:	c9                   	leave
    817e:	c3                   	ret

000000000000817f <_ZSt10__fill_n_aIPcmcET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    817f:	55                   	push   %rbp
    8180:	48 89 e5             	mov    %rsp,%rbp
    8183:	48 83 ec 20          	sub    $0x20,%rsp
    8187:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    818b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    818f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    8193:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    8198:	75 06                	jne    81a0 <_ZSt10__fill_n_aIPcmcET_S1_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    819a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    819e:	eb 2a                	jmp    81ca <_ZSt10__fill_n_aIPcmcET_S1_T0_RKT1_St26random_access_iterator_tag+0x4b>
      std::__fill_a(__first, __first + __n, __value);
    81a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    81a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    81a8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    81ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    81b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81b4:	48 89 ce             	mov    %rcx,%rsi
    81b7:	48 89 c7             	mov    %rax,%rdi
    81ba:	e8 0d 00 00 00       	call   81cc <_ZSt8__fill_aIPccEvT_S1_RKT0_>
      return __first + __n;
    81bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    81c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    81c7:	48 01 d0             	add    %rdx,%rax
    }
    81ca:	c9                   	leave
    81cb:	c3                   	ret

00000000000081cc <_ZSt8__fill_aIPccEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    81cc:	55                   	push   %rbp
    81cd:	48 89 e5             	mov    %rsp,%rbp
    81d0:	48 83 ec 20          	sub    $0x20,%rsp
    81d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    81d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    81dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    81e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    81e4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    81e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    81ec:	48 89 ce             	mov    %rcx,%rsi
    81ef:	48 89 c7             	mov    %rax,%rdi
    81f2:	e8 03 00 00 00       	call   81fa <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
    81f7:	90                   	nop
    81f8:	c9                   	leave
    81f9:	c3                   	ret

00000000000081fa <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
    81fa:	55                   	push   %rbp
    81fb:	48 89 e5             	mov    %rsp,%rbp
    81fe:	48 83 ec 30          	sub    $0x30,%rsp
    8202:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8206:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    820a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __c;
    820e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8212:	0f b6 00             	movzbl (%rax),%eax
    8215:	88 45 ff             	mov    %al,-0x1(%rbp)
      if (const size_t __len = __last - __first)
    8218:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    821c:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    8220:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8224:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    8229:	74 19                	je     8244 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x4a>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    822b:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
    822f:	0f b6 c8             	movzbl %al,%ecx
    8232:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8236:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    823a:	89 ce                	mov    %ecx,%esi
    823c:	48 89 c7             	mov    %rax,%rdi
    823f:	e8 dc bf ff ff       	call   4220 <memset@plt>
    }
    8244:	90                   	nop
    8245:	c9                   	leave
    8246:	c3                   	ret

0000000000008247 <_ZN3vkh13destroyWindowEP10GLFWwindow>:
#include "destroy_object.hpp"

namespace vkh {

void destroyWindow(GLFWwindow *window) { glfwDestroyWindow(window); }
    8247:	55                   	push   %rbp
    8248:	48 89 e5             	mov    %rsp,%rbp
    824b:	48 83 ec 10          	sub    $0x10,%rsp
    824f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8253:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8257:	48 89 c7             	mov    %rax,%rdi
    825a:	e8 b1 be ff ff       	call   4110 <glfwDestroyWindow@plt>
    825f:	90                   	nop
    8260:	c9                   	leave
    8261:	c3                   	ret

0000000000008262 <_ZN3vkh15destroyInstanceEP12VkInstance_TPK21VkAllocationCallbacks>:

void destroyInstance(VkInstance instance,
                     const VkAllocationCallbacks *pAllocator) {
    8262:	55                   	push   %rbp
    8263:	48 89 e5             	mov    %rsp,%rbp
    8266:	48 83 ec 10          	sub    $0x10,%rsp
    826a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    826e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  vkDestroyInstance(instance, pAllocator);
    8272:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    827a:	48 89 d6             	mov    %rdx,%rsi
    827d:	48 89 c7             	mov    %rax,%rdi
    8280:	e8 7b c2 ff ff       	call   4500 <vkDestroyInstance@plt>
}
    8285:	90                   	nop
    8286:	c9                   	leave
    8287:	c3                   	ret

0000000000008288 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>:

void destroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
    8288:	55                   	push   %rbp
    8289:	48 89 e5             	mov    %rsp,%rbp
    828c:	48 83 ec 10          	sub    $0x10,%rsp
    8290:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8294:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  vkDestroyDevice(device, pAllocator);
    8298:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    829c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    82a0:	48 89 d6             	mov    %rdx,%rsi
    82a3:	48 89 c7             	mov    %rax,%rdi
    82a6:	e8 f5 c0 ff ff       	call   43a0 <vkDestroyDevice@plt>
}
    82ab:	90                   	nop
    82ac:	c9                   	leave
    82ad:	c3                   	ret

00000000000082ae <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>:

void destroySurface(VkInstance instance, VkSurfaceKHR surface,
                    const VkAllocationCallbacks *pAllocator) {
    82ae:	55                   	push   %rbp
    82af:	48 89 e5             	mov    %rsp,%rbp
    82b2:	48 83 ec 20          	sub    $0x20,%rsp
    82b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    82ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    82be:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroySurfaceKHR(instance, surface, pAllocator);
    82c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    82c6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    82ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    82ce:	48 89 ce             	mov    %rcx,%rsi
    82d1:	48 89 c7             	mov    %rax,%rdi
    82d4:	e8 87 c6 ff ff       	call   4960 <vkDestroySurfaceKHR@plt>
}
    82d9:	90                   	nop
    82da:	c9                   	leave
    82db:	c3                   	ret

00000000000082dc <_ZN3vkh16destroySwapchainEP10VkDevice_TP16VkSwapchainKHR_TPK21VkAllocationCallbacks>:

void destroySwapchain(VkDevice device, VkSwapchainKHR swapchain,
                      const VkAllocationCallbacks *pAllocator) {
    82dc:	55                   	push   %rbp
    82dd:	48 89 e5             	mov    %rsp,%rbp
    82e0:	48 83 ec 20          	sub    $0x20,%rsp
    82e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    82e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    82ec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroySwapchainKHR(device, swapchain, pAllocator);
    82f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    82f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    82f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    82fc:	48 89 ce             	mov    %rcx,%rsi
    82ff:	48 89 c7             	mov    %rax,%rdi
    8302:	e8 e9 bd ff ff       	call   40f0 <vkDestroySwapchainKHR@plt>
}
    8307:	90                   	nop
    8308:	c9                   	leave
    8309:	c3                   	ret

000000000000830a <_ZN3vkh16destroyImageViewEP10VkDevice_TP13VkImageView_TPK21VkAllocationCallbacks>:

void destroyImageView(VkDevice device, VkImageView imageView,
                      const VkAllocationCallbacks *pAllocator) {
    830a:	55                   	push   %rbp
    830b:	48 89 e5             	mov    %rsp,%rbp
    830e:	48 83 ec 20          	sub    $0x20,%rsp
    8312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8316:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    831a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyImageView(device, imageView, pAllocator);
    831e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8322:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8326:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    832a:	48 89 ce             	mov    %rcx,%rsi
    832d:	48 89 c7             	mov    %rax,%rdi
    8330:	e8 5b c6 ff ff       	call   4990 <vkDestroyImageView@plt>
}
    8335:	90                   	nop
    8336:	c9                   	leave
    8337:	c3                   	ret

0000000000008338 <_ZN3vkh19destroyShaderModuleEP10VkDevice_TP16VkShaderModule_TPK21VkAllocationCallbacks>:

void destroyShaderModule(VkDevice device, VkShaderModule shaderModule,
                         const VkAllocationCallbacks *pAllocator) {
    8338:	55                   	push   %rbp
    8339:	48 89 e5             	mov    %rsp,%rbp
    833c:	48 83 ec 20          	sub    $0x20,%rsp
    8340:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8344:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8348:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyShaderModule(device, shaderModule, pAllocator);
    834c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8350:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8358:	48 89 ce             	mov    %rcx,%rsi
    835b:	48 89 c7             	mov    %rax,%rdi
    835e:	e8 cd c2 ff ff       	call   4630 <vkDestroyShaderModule@plt>
}
    8363:	90                   	nop
    8364:	c9                   	leave
    8365:	c3                   	ret

0000000000008366 <_ZN3vkh21destroyPipelineLayoutEP10VkDevice_TP18VkPipelineLayout_TPK21VkAllocationCallbacks>:

void destroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout,
                           const VkAllocationCallbacks *pAllocator) {
    8366:	55                   	push   %rbp
    8367:	48 89 e5             	mov    %rsp,%rbp
    836a:	48 83 ec 20          	sub    $0x20,%rsp
    836e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8372:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8376:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    837a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    837e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8386:	48 89 ce             	mov    %rcx,%rsi
    8389:	48 89 c7             	mov    %rax,%rdi
    838c:	e8 ef c2 ff ff       	call   4680 <vkDestroyPipelineLayout@plt>
}
    8391:	90                   	nop
    8392:	c9                   	leave
    8393:	c3                   	ret

0000000000008394 <_ZN3vkh17destroyRenderPassEP10VkDevice_TP14VkRenderPass_TPK21VkAllocationCallbacks>:

void destroyRenderPass(VkDevice device, VkRenderPass renderPass,
                       const VkAllocationCallbacks *pAllocator) {
    8394:	55                   	push   %rbp
    8395:	48 89 e5             	mov    %rsp,%rbp
    8398:	48 83 ec 20          	sub    $0x20,%rsp
    839c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    83a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    83a4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyRenderPass(device, renderPass, pAllocator);
    83a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    83ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    83b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83b4:	48 89 ce             	mov    %rcx,%rsi
    83b7:	48 89 c7             	mov    %rax,%rdi
    83ba:	e8 e1 c0 ff ff       	call   44a0 <vkDestroyRenderPass@plt>
}
    83bf:	90                   	nop
    83c0:	c9                   	leave
    83c1:	c3                   	ret

00000000000083c2 <_ZN3vkh15destroyPipelineEP10VkDevice_TP12VkPipeline_TPK21VkAllocationCallbacks>:

void destroyPipeline(VkDevice device, VkPipeline pipeline,
                     const VkAllocationCallbacks *pAllocator) {
    83c2:	55                   	push   %rbp
    83c3:	48 89 e5             	mov    %rsp,%rbp
    83c6:	48 83 ec 20          	sub    $0x20,%rsp
    83ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    83ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    83d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyPipeline(device, pipeline, pAllocator);
    83d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    83da:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    83de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    83e2:	48 89 ce             	mov    %rcx,%rsi
    83e5:	48 89 c7             	mov    %rax,%rdi
    83e8:	e8 b3 c1 ff ff       	call   45a0 <vkDestroyPipeline@plt>
}
    83ed:	90                   	nop
    83ee:	c9                   	leave
    83ef:	c3                   	ret

00000000000083f0 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks>:

void destroyPipelines(VkDevice device, std::vector<VkPipeline> pipelines,
                      const VkAllocationCallbacks *pAllocator) {
    83f0:	55                   	push   %rbp
    83f1:	48 89 e5             	mov    %rsp,%rbp
    83f4:	48 83 ec 40          	sub    $0x40,%rsp
    83f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    83fc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    8400:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  for (auto &pipeline : pipelines) {
    8404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8408:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    840c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8410:	48 89 c7             	mov    %rax,%rdi
    8413:	e8 20 01 00 00       	call   8538 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE5beginEv>
    8418:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    841c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8420:	48 89 c7             	mov    %rax,%rdi
    8423:	e8 36 01 00 00       	call   855e <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE3endEv>
    8428:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    842c:	eb 36                	jmp    8464 <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x74>
    842e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    8432:	48 89 c7             	mov    %rax,%rdi
    8435:	e8 a8 01 00 00       	call   85e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEdeEv>
    843a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    vkDestroyPipeline(device, pipeline, pAllocator);
    843e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8442:	48 8b 08             	mov    (%rax),%rcx
    8445:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    8449:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    844d:	48 89 ce             	mov    %rcx,%rsi
    8450:	48 89 c7             	mov    %rax,%rdi
    8453:	e8 48 c1 ff ff       	call   45a0 <vkDestroyPipeline@plt>
  for (auto &pipeline : pipelines) {
    8458:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    845c:	48 89 c7             	mov    %rax,%rdi
    845f:	e8 5e 01 00 00       	call   85c2 <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEppEv>
    8464:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    8468:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    846c:	48 89 d6             	mov    %rdx,%rsi
    846f:	48 89 c7             	mov    %rax,%rdi
    8472:	e8 10 01 00 00       	call   8587 <_ZN9__gnu_cxxneIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    8477:	84 c0                	test   %al,%al
    8479:	75 b3                	jne    842e <_ZN3vkh16destroyPipelinesEP10VkDevice_TSt6vectorIP12VkPipeline_TSaIS4_EEPK21VkAllocationCallbacks+0x3e>
  }
}
    847b:	90                   	nop
    847c:	90                   	nop
    847d:	c9                   	leave
    847e:	c3                   	ret

000000000000847f <_ZN3vkh18destroyFramebufferEP10VkDevice_TP15VkFramebuffer_TPK21VkAllocationCallbacks>:

void destroyFramebuffer(VkDevice device, VkFramebuffer framebuffer,
                        const VkAllocationCallbacks *pAllocator) {
    847f:	55                   	push   %rbp
    8480:	48 89 e5             	mov    %rsp,%rbp
    8483:	48 83 ec 20          	sub    $0x20,%rsp
    8487:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    848b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    848f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyFramebuffer(device, framebuffer, pAllocator);
    8493:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8497:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    849b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    849f:	48 89 ce             	mov    %rcx,%rsi
    84a2:	48 89 c7             	mov    %rax,%rdi
    84a5:	e8 46 c4 ff ff       	call   48f0 <vkDestroyFramebuffer@plt>
}
    84aa:	90                   	nop
    84ab:	c9                   	leave
    84ac:	c3                   	ret

00000000000084ad <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>:

void destroyCommandPool(VkDevice device, VkCommandPool commandPool,
                        const VkAllocationCallbacks *pAllocator) {
    84ad:	55                   	push   %rbp
    84ae:	48 89 e5             	mov    %rsp,%rbp
    84b1:	48 83 ec 20          	sub    $0x20,%rsp
    84b5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    84b9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    84bd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyCommandPool(device, commandPool, pAllocator);
    84c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    84c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    84c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    84cd:	48 89 ce             	mov    %rcx,%rsi
    84d0:	48 89 c7             	mov    %rax,%rdi
    84d3:	e8 98 c2 ff ff       	call   4770 <vkDestroyCommandPool@plt>
}
    84d8:	90                   	nop
    84d9:	c9                   	leave
    84da:	c3                   	ret

00000000000084db <_ZN3vkh16destroySemaphoreEP10VkDevice_TP13VkSemaphore_TPK21VkAllocationCallbacks>:

void destroySemaphore(VkDevice device, VkSemaphore semaphore,
                      const VkAllocationCallbacks *pAllocator) {
    84db:	55                   	push   %rbp
    84dc:	48 89 e5             	mov    %rsp,%rbp
    84df:	48 83 ec 20          	sub    $0x20,%rsp
    84e3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    84e7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    84eb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroySemaphore(device, semaphore, pAllocator);
    84ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    84f3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    84f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    84fb:	48 89 ce             	mov    %rcx,%rsi
    84fe:	48 89 c7             	mov    %rax,%rdi
    8501:	e8 fa bb ff ff       	call   4100 <vkDestroySemaphore@plt>
}
    8506:	90                   	nop
    8507:	c9                   	leave
    8508:	c3                   	ret

0000000000008509 <_ZN3vkh12destroyFenceEP10VkDevice_TP9VkFence_TPK21VkAllocationCallbacks>:

void destroyFence(VkDevice device, VkFence fence,
                  const VkAllocationCallbacks *pAllocator) {
    8509:	55                   	push   %rbp
    850a:	48 89 e5             	mov    %rsp,%rbp
    850d:	48 83 ec 20          	sub    $0x20,%rsp
    8511:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8515:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8519:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  vkDestroyFence(device, fence, pAllocator);
    851d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8521:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8525:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8529:	48 89 ce             	mov    %rcx,%rsi
    852c:	48 89 c7             	mov    %rax,%rdi
    852f:	e8 5c c0 ff ff       	call   4590 <vkDestroyFence@plt>
}
    8534:	90                   	nop
    8535:	c9                   	leave
    8536:	c3                   	ret
    8537:	90                   	nop

0000000000008538 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    8538:	55                   	push   %rbp
    8539:	48 89 e5             	mov    %rsp,%rbp
    853c:	48 83 ec 20          	sub    $0x20,%rsp
    8540:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    8544:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8548:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    854c:	48 89 d6             	mov    %rdx,%rsi
    854f:	48 89 c7             	mov    %rax,%rdi
    8552:	e8 9d 00 00 00       	call   85f4 <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    8557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    855b:	c9                   	leave
    855c:	c3                   	ret
    855d:	90                   	nop

000000000000855e <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    855e:	55                   	push   %rbp
    855f:	48 89 e5             	mov    %rsp,%rbp
    8562:	48 83 ec 20          	sub    $0x20,%rsp
    8566:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    856a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    856e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    8572:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    8576:	48 89 d6             	mov    %rdx,%rsi
    8579:	48 89 c7             	mov    %rax,%rdi
    857c:	e8 73 00 00 00       	call   85f4 <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
    8581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8585:	c9                   	leave
    8586:	c3                   	ret

0000000000008587 <_ZN9__gnu_cxxneIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    8587:	55                   	push   %rbp
    8588:	48 89 e5             	mov    %rsp,%rbp
    858b:	53                   	push   %rbx
    858c:	48 83 ec 18          	sub    $0x18,%rsp
    8590:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8594:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
    8598:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    859c:	48 89 c7             	mov    %rax,%rdi
    859f:	e8 6e 00 00 00       	call   8612 <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>
    85a4:	48 8b 18             	mov    (%rax),%rbx
    85a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    85ab:	48 89 c7             	mov    %rax,%rdi
    85ae:	e8 5f 00 00 00       	call   8612 <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>
    85b3:	48 8b 00             	mov    (%rax),%rax
    85b6:	48 39 c3             	cmp    %rax,%rbx
    85b9:	0f 95 c0             	setne  %al
    85bc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    85c0:	c9                   	leave
    85c1:	c3                   	ret

00000000000085c2 <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    85c2:	55                   	push   %rbp
    85c3:	48 89 e5             	mov    %rsp,%rbp
    85c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    85ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    85ce:	48 8b 00             	mov    (%rax),%rax
    85d1:	48 8d 50 08          	lea    0x8(%rax),%rdx
    85d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    85d9:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    85dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    85e0:	5d                   	pop    %rbp
    85e1:	c3                   	ret

00000000000085e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    85e2:	55                   	push   %rbp
    85e3:	48 89 e5             	mov    %rsp,%rbp
    85e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    85ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    85ee:	48 8b 00             	mov    (%rax),%rax
    85f1:	5d                   	pop    %rbp
    85f2:	c3                   	ret
    85f3:	90                   	nop

00000000000085f4 <_ZN9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    85f4:	55                   	push   %rbp
    85f5:	48 89 e5             	mov    %rsp,%rbp
    85f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    85fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    8600:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8604:	48 8b 10             	mov    (%rax),%rdx
    8607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    860b:	48 89 10             	mov    %rdx,(%rax)
    860e:	90                   	nop
    860f:	5d                   	pop    %rbp
    8610:	c3                   	ret
    8611:	90                   	nop

0000000000008612 <_ZNK9__gnu_cxx17__normal_iteratorIPP12VkPipeline_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    8612:	55                   	push   %rbp
    8613:	48 89 e5             	mov    %rsp,%rbp
    8616:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    861a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    861e:	5d                   	pop    %rbp
    861f:	c3                   	ret

0000000000008620 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv>:
#include "get_list.hpp"

namespace vkh {

std::vector<VkLayerProperties> getAvailableInstanceLayerPropertyList() {
    8620:	55                   	push   %rbp
    8621:	48 89 e5             	mov    %rsp,%rbp
    8624:	53                   	push   %rbx
    8625:	48 83 ec 28          	sub    $0x28,%rsp
    8629:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    862d:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    8631:	be 00 00 00 00       	mov    $0x0,%esi
    8636:	48 89 c7             	mov    %rax,%rdi
    8639:	e8 92 bf ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    863e:	8b 45 e8             	mov    -0x18(%rbp),%eax
    8641:	89 c3                	mov    %eax,%ebx
    8643:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8647:	48 89 c7             	mov    %rax,%rdi
    864a:	e8 47 11 00 00       	call   9796 <_ZNSaI17VkLayerPropertiesEC1Ev>
    864f:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    8653:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8657:	48 89 de             	mov    %rbx,%rsi
    865a:	48 89 c7             	mov    %rax,%rdi
    865d:	e8 6c 11 00 00       	call   97ce <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    8662:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8666:	48 89 c7             	mov    %rax,%rdi
    8669:	e8 44 11 00 00       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    866e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8672:	48 89 c7             	mov    %rax,%rdi
    8675:	e8 0e 12 00 00       	call   9888 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    867a:	48 89 c2             	mov    %rax,%rdx
    867d:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    8681:	48 89 d6             	mov    %rdx,%rsi
    8684:	48 89 c7             	mov    %rax,%rdi
    8687:	e8 44 bf ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>
  return availableLayers;
    868c:	eb 34                	jmp    86c2 <_ZN3vkh37getAvailableInstanceLayerPropertyListEv+0xa2>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    868e:	48 89 c3             	mov    %rax,%rbx
    8691:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8695:	48 89 c7             	mov    %rax,%rdi
    8698:	e8 15 11 00 00       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
    869d:	48 89 d8             	mov    %rbx,%rax
    86a0:	48 89 c7             	mov    %rax,%rdi
    86a3:	e8 c8 c2 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    86a8:	48 89 c3             	mov    %rax,%rbx
    86ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86af:	48 89 c7             	mov    %rax,%rdi
    86b2:	e8 8d 11 00 00       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    86b7:	48 89 d8             	mov    %rbx,%rax
    86ba:	48 89 c7             	mov    %rax,%rdi
    86bd:	e8 ae c2 ff ff       	call   4970 <_Unwind_Resume@plt>
    86c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    86ca:	c9                   	leave
    86cb:	c3                   	ret

00000000000086cc <_ZN3vkh33getAvailableInstanceExtensionListEPKc>:

std::vector<VkExtensionProperties>
getAvailableInstanceExtensionList(const char *pLayerName) {
    86cc:	55                   	push   %rbp
    86cd:	48 89 e5             	mov    %rsp,%rbp
    86d0:	41 54                	push   %r12
    86d2:	53                   	push   %rbx
    86d3:	48 83 ec 20          	sub    $0x20,%rsp
    86d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    86db:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t propertyCount;
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    86df:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    86e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    86e7:	ba 00 00 00 00       	mov    $0x0,%edx
    86ec:	48 89 ce             	mov    %rcx,%rsi
    86ef:	48 89 c7             	mov    %rax,%rdi
    86f2:	e8 d9 bc ff ff       	call   43d0 <vkEnumerateInstanceExtensionProperties@plt>
                                             nullptr) != VK_SUCCESS) {
    86f7:	85 c0                	test   %eax,%eax
    86f9:	0f 95 c0             	setne  %al
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    86fc:	84 c0                	test   %al,%al
    86fe:	74 3b                	je     873b <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x6f>
    throw std::runtime_error("Failed to get instance extension list.");
    8700:	bf 10 00 00 00       	mov    $0x10,%edi
    8705:	e8 c6 ba ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    870a:	48 89 c3             	mov    %rax,%rbx
    870d:	48 8d 05 24 9b 01 00 	lea    0x19b24(%rip),%rax        # 22238 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    8714:	48 89 c6             	mov    %rax,%rsi
    8717:	48 89 df             	mov    %rbx,%rdi
    871a:	e8 21 ba ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    871f:	48 8b 05 92 c8 02 00 	mov    0x2c892(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8726:	48 89 c2             	mov    %rax,%rdx
    8729:	48 8d 05 10 c6 02 00 	lea    0x2c610(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8730:	48 89 c6             	mov    %rax,%rsi
    8733:	48 89 df             	mov    %rbx,%rdi
    8736:	e8 c5 c1 ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
    873b:	8b 45 e8             	mov    -0x18(%rbp),%eax
    873e:	89 c3                	mov    %eax,%ebx
    8740:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8744:	48 89 c7             	mov    %rax,%rdi
    8747:	e8 b8 11 00 00       	call   9904 <_ZNSaI21VkExtensionPropertiesEC1Ev>
    874c:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    8750:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8754:	48 89 de             	mov    %rbx,%rsi
    8757:	48 89 c7             	mov    %rax,%rdi
    875a:	e8 dd 11 00 00       	call   993c <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
    875f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8763:	48 89 c7             	mov    %rax,%rdi
    8766:	e8 b5 11 00 00       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    876b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    876f:	48 89 c7             	mov    %rax,%rdi
    8772:	e8 7f 12 00 00       	call   99f6 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>
    8777:	48 89 c2             	mov    %rax,%rdx
    877a:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    877e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8782:	48 89 ce             	mov    %rcx,%rsi
    8785:	48 89 c7             	mov    %rax,%rdi
    8788:	e8 43 bc ff ff       	call   43d0 <vkEnumerateInstanceExtensionProperties@plt>
                                             instanceExtensions.data()) !=
    878d:	85 c0                	test   %eax,%eax
    878f:	0f 95 c0             	setne  %al
  if (vkEnumerateInstanceExtensionProperties(pLayerName, &propertyCount,
    8792:	84 c0                	test   %al,%al
    8794:	0f 84 95 00 00 00    	je     882f <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x163>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to get instance extension list.");
    879a:	bf 10 00 00 00       	mov    $0x10,%edi
    879f:	e8 2c ba ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    87a4:	48 89 c3             	mov    %rax,%rbx
    87a7:	48 8d 05 8a 9a 01 00 	lea    0x19a8a(%rip),%rax        # 22238 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    87ae:	48 89 c6             	mov    %rax,%rsi
    87b1:	48 89 df             	mov    %rbx,%rdi
    87b4:	e8 87 b9 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    87b9:	48 8b 05 f8 c7 02 00 	mov    0x2c7f8(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    87c0:	48 89 c2             	mov    %rax,%rdx
    87c3:	48 8d 05 76 c5 02 00 	lea    0x2c576(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    87ca:	48 89 c6             	mov    %rax,%rsi
    87cd:	48 89 df             	mov    %rbx,%rdi
    87d0:	e8 2b c1 ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get instance extension list.");
    87d5:	49 89 c4             	mov    %rax,%r12
    87d8:	48 89 df             	mov    %rbx,%rdi
    87db:	e8 20 bb ff ff       	call   4300 <__cxa_free_exception@plt>
    87e0:	4c 89 e0             	mov    %r12,%rax
    87e3:	48 89 c7             	mov    %rax,%rdi
    87e6:	e8 85 c1 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkExtensionProperties> instanceExtensions{propertyCount};
    87eb:	48 89 c3             	mov    %rax,%rbx
    87ee:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    87f2:	48 89 c7             	mov    %rax,%rdi
    87f5:	e8 26 11 00 00       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
    87fa:	48 89 d8             	mov    %rbx,%rax
    87fd:	48 89 c7             	mov    %rax,%rdi
    8800:	e8 6b c1 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get instance extension list.");
    8805:	49 89 c4             	mov    %rax,%r12
    8808:	48 89 df             	mov    %rbx,%rdi
    880b:	e8 f0 ba ff ff       	call   4300 <__cxa_free_exception@plt>
    8810:	4c 89 e3             	mov    %r12,%rbx
    8813:	eb 03                	jmp    8818 <_ZN3vkh33getAvailableInstanceExtensionListEPKc+0x14c>
  }
  return instanceExtensions;
}
    8815:	48 89 c3             	mov    %rax,%rbx
    8818:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    881c:	48 89 c7             	mov    %rax,%rdi
    881f:	e8 8e 11 00 00       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    8824:	48 89 d8             	mov    %rbx,%rax
    8827:	48 89 c7             	mov    %rax,%rdi
    882a:	e8 41 c1 ff ff       	call   4970 <_Unwind_Resume@plt>
  return instanceExtensions;
    882f:	90                   	nop
}
    8830:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8834:	48 83 c4 20          	add    $0x20,%rsp
    8838:	5b                   	pop    %rbx
    8839:	41 5c                	pop    %r12
    883b:	5d                   	pop    %rbp
    883c:	c3                   	ret

000000000000883d <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>:

std::vector<VkExtensionProperties>
getAvailableDeviceExtensionList(VkPhysicalDevice physicalDevice,
                                const char *pLayerName) {
    883d:	55                   	push   %rbp
    883e:	48 89 e5             	mov    %rsp,%rbp
    8841:	41 54                	push   %r12
    8843:	53                   	push   %rbx
    8844:	48 83 ec 30          	sub    $0x30,%rsp
    8848:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    884c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    8850:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t propertyCount;
  if (vkEnumerateDeviceExtensionProperties(
    8854:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    8858:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    885c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8860:	b9 00 00 00 00       	mov    $0x0,%ecx
    8865:	48 89 c7             	mov    %rax,%rdi
    8868:	e8 d3 be ff ff       	call   4740 <vkEnumerateDeviceExtensionProperties@plt>
          physicalDevice, pLayerName, &propertyCount, nullptr) != VK_SUCCESS) {
    886d:	85 c0                	test   %eax,%eax
    886f:	0f 95 c0             	setne  %al
  if (vkEnumerateDeviceExtensionProperties(
    8872:	84 c0                	test   %al,%al
    8874:	74 3b                	je     88b1 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x74>
    throw std::runtime_error("Failed to get device extension list.");
    8876:	bf 10 00 00 00       	mov    $0x10,%edi
    887b:	e8 50 b9 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    8880:	48 89 c3             	mov    %rax,%rbx
    8883:	48 8d 05 d6 99 01 00 	lea    0x199d6(%rip),%rax        # 22260 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x30>
    888a:	48 89 c6             	mov    %rax,%rsi
    888d:	48 89 df             	mov    %rbx,%rdi
    8890:	e8 ab b8 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    8895:	48 8b 05 1c c7 02 00 	mov    0x2c71c(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    889c:	48 89 c2             	mov    %rax,%rdx
    889f:	48 8d 05 9a c4 02 00 	lea    0x2c49a(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    88a6:	48 89 c6             	mov    %rax,%rsi
    88a9:	48 89 df             	mov    %rbx,%rdi
    88ac:	e8 4f c0 ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
    88b1:	8b 45 e8             	mov    -0x18(%rbp),%eax
    88b4:	89 c3                	mov    %eax,%ebx
    88b6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    88ba:	48 89 c7             	mov    %rax,%rdi
    88bd:	e8 42 10 00 00       	call   9904 <_ZNSaI21VkExtensionPropertiesEC1Ev>
    88c2:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    88c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    88ca:	48 89 de             	mov    %rbx,%rsi
    88cd:	48 89 c7             	mov    %rax,%rdi
    88d0:	e8 67 10 00 00       	call   993c <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
    88d5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    88d9:	48 89 c7             	mov    %rax,%rdi
    88dc:	e8 3f 10 00 00       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
  if (vkEnumerateDeviceExtensionProperties(
    88e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    88e5:	48 89 c7             	mov    %rax,%rdi
    88e8:	e8 09 11 00 00       	call   99f6 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>
    88ed:	48 89 c1             	mov    %rax,%rcx
    88f0:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    88f4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    88f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    88fc:	48 89 c7             	mov    %rax,%rdi
    88ff:	e8 3c be ff ff       	call   4740 <vkEnumerateDeviceExtensionProperties@plt>
          physicalDevice, pLayerName, &propertyCount,
          deviceExtensions.data()) != VK_SUCCESS) {
    8904:	85 c0                	test   %eax,%eax
    8906:	0f 95 c0             	setne  %al
  if (vkEnumerateDeviceExtensionProperties(
    8909:	84 c0                	test   %al,%al
    890b:	0f 84 95 00 00 00    	je     89a6 <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x169>
    throw std::runtime_error("Failed to get device extension list.");
    8911:	bf 10 00 00 00       	mov    $0x10,%edi
    8916:	e8 b5 b8 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    891b:	48 89 c3             	mov    %rax,%rbx
    891e:	48 8d 05 3b 99 01 00 	lea    0x1993b(%rip),%rax        # 22260 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x30>
    8925:	48 89 c6             	mov    %rax,%rsi
    8928:	48 89 df             	mov    %rbx,%rdi
    892b:	e8 10 b8 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    8930:	48 8b 05 81 c6 02 00 	mov    0x2c681(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8937:	48 89 c2             	mov    %rax,%rdx
    893a:	48 8d 05 ff c3 02 00 	lea    0x2c3ff(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8941:	48 89 c6             	mov    %rax,%rsi
    8944:	48 89 df             	mov    %rbx,%rdi
    8947:	e8 b4 bf ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get device extension list.");
    894c:	49 89 c4             	mov    %rax,%r12
    894f:	48 89 df             	mov    %rbx,%rdi
    8952:	e8 a9 b9 ff ff       	call   4300 <__cxa_free_exception@plt>
    8957:	4c 89 e0             	mov    %r12,%rax
    895a:	48 89 c7             	mov    %rax,%rdi
    895d:	e8 0e c0 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkExtensionProperties> deviceExtensions{propertyCount};
    8962:	48 89 c3             	mov    %rax,%rbx
    8965:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8969:	48 89 c7             	mov    %rax,%rdi
    896c:	e8 af 0f 00 00       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
    8971:	48 89 d8             	mov    %rbx,%rax
    8974:	48 89 c7             	mov    %rax,%rdi
    8977:	e8 f4 bf ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get device extension list.");
    897c:	49 89 c4             	mov    %rax,%r12
    897f:	48 89 df             	mov    %rbx,%rdi
    8982:	e8 79 b9 ff ff       	call   4300 <__cxa_free_exception@plt>
    8987:	4c 89 e3             	mov    %r12,%rbx
    898a:	eb 03                	jmp    898f <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc+0x152>
  }
  return deviceExtensions;
}
    898c:	48 89 c3             	mov    %rax,%rbx
    898f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8993:	48 89 c7             	mov    %rax,%rdi
    8996:	e8 17 10 00 00       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    899b:	48 89 d8             	mov    %rbx,%rax
    899e:	48 89 c7             	mov    %rax,%rdi
    89a1:	e8 ca bf ff ff       	call   4970 <_Unwind_Resume@plt>
  return deviceExtensions;
    89a6:	90                   	nop
}
    89a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    89ab:	48 83 c4 30          	add    $0x30,%rsp
    89af:	5b                   	pop    %rbx
    89b0:	41 5c                	pop    %r12
    89b2:	5d                   	pop    %rbp
    89b3:	c3                   	ret

00000000000089b4 <_ZN3vkh36getRequiredInstanceExtensionNameListEv>:

std::vector<const char *> getRequiredInstanceExtensionNameList() {
    89b4:	55                   	push   %rbp
    89b5:	48 89 e5             	mov    %rsp,%rbp
    89b8:	53                   	push   %rbx
    89b9:	48 83 ec 38          	sub    $0x38,%rsp
    89bd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  uint32_t requiredExtensionCount;
  const char **ppRequiredExtensions =
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
    89c1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    89c5:	48 89 c7             	mov    %rax,%rdi
    89c8:	e8 73 b9 ff ff       	call   4340 <glfwGetRequiredInstanceExtensions@plt>
    89cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  std::vector<const char *> requiredInstanceExtensions{requiredExtensionCount};
    89d1:	8b 45 d8             	mov    -0x28(%rbp),%eax
    89d4:	89 c3                	mov    %eax,%ebx
    89d6:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    89da:	48 89 c7             	mov    %rax,%rdi
    89dd:	e8 90 10 00 00       	call   9a72 <_ZNSaIPKcEC1Ev>
    89e2:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
    89e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    89ea:	48 89 de             	mov    %rbx,%rsi
    89ed:	48 89 c7             	mov    %rax,%rdi
    89f0:	e8 b5 10 00 00       	call   9aaa <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>
    89f5:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    89f9:	48 89 c7             	mov    %rax,%rdi
    89fc:	e8 8d 10 00 00       	call   9a8e <_ZNSaIPKcED1Ev>
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    8a01:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    8a08:	eb 2e                	jmp    8a38 <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x84>
    requiredInstanceExtensions[i] = ppRequiredExtensions[i];
    8a0a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    8a0d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    8a14:	00 
    8a15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8a19:	48 01 d0             	add    %rdx,%rax
    8a1c:	48 8b 18             	mov    (%rax),%rbx
    8a1f:	8b 55 ec             	mov    -0x14(%rbp),%edx
    8a22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a26:	48 89 d6             	mov    %rdx,%rsi
    8a29:	48 89 c7             	mov    %rax,%rdi
    8a2c:	e8 ef 10 00 00       	call   9b20 <_ZNSt6vectorIPKcSaIS1_EEixEm>
    8a31:	48 89 18             	mov    %rbx,(%rax)
  for (uint32_t i = 0; i < requiredExtensionCount; ++i) {
    8a34:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    8a38:	8b 45 d8             	mov    -0x28(%rbp),%eax
    8a3b:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    8a3e:	72 ca                	jb     8a0a <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0x56>
  }
  return requiredInstanceExtensions;
    8a40:	eb 1a                	jmp    8a5c <_ZN3vkh36getRequiredInstanceExtensionNameListEv+0xa8>
  std::vector<const char *> requiredInstanceExtensions{requiredExtensionCount};
    8a42:	48 89 c3             	mov    %rax,%rbx
    8a45:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    8a49:	48 89 c7             	mov    %rax,%rdi
    8a4c:	e8 3d 10 00 00       	call   9a8e <_ZNSaIPKcED1Ev>
    8a51:	48 89 d8             	mov    %rbx,%rax
    8a54:	48 89 c7             	mov    %rax,%rdi
    8a57:	e8 14 bf ff ff       	call   4970 <_Unwind_Resume@plt>
}
    8a5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a60:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8a64:	c9                   	leave
    8a65:	c3                   	ret

0000000000008a66 <_ZN3vkh29getAvailableInstanceLayerListEv>:

std::vector<VkLayerProperties> getAvailableInstanceLayerList() {
    8a66:	55                   	push   %rbp
    8a67:	48 89 e5             	mov    %rsp,%rbp
    8a6a:	53                   	push   %rbx
    8a6b:	48 83 ec 28          	sub    $0x28,%rsp
    8a6f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    8a73:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    8a77:	be 00 00 00 00       	mov    $0x0,%esi
    8a7c:	48 89 c7             	mov    %rax,%rdi
    8a7f:	e8 4c bb ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    8a84:	8b 45 e8             	mov    -0x18(%rbp),%eax
    8a87:	89 c3                	mov    %eax,%ebx
    8a89:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8a8d:	48 89 c7             	mov    %rax,%rdi
    8a90:	e8 01 0d 00 00       	call   9796 <_ZNSaI17VkLayerPropertiesEC1Ev>
    8a95:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    8a99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8a9d:	48 89 de             	mov    %rbx,%rsi
    8aa0:	48 89 c7             	mov    %rax,%rdi
    8aa3:	e8 26 0d 00 00       	call   97ce <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    8aa8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8aac:	48 89 c7             	mov    %rax,%rdi
    8aaf:	e8 fe 0c 00 00       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    8ab4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8ab8:	48 89 c7             	mov    %rax,%rdi
    8abb:	e8 c8 0d 00 00       	call   9888 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    8ac0:	48 89 c2             	mov    %rax,%rdx
    8ac3:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    8ac7:	48 89 d6             	mov    %rdx,%rsi
    8aca:	48 89 c7             	mov    %rax,%rdi
    8acd:	e8 fe ba ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>
  return availableLayers;
    8ad2:	eb 34                	jmp    8b08 <_ZN3vkh29getAvailableInstanceLayerListEv+0xa2>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    8ad4:	48 89 c3             	mov    %rax,%rbx
    8ad7:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8adb:	48 89 c7             	mov    %rax,%rdi
    8ade:	e8 cf 0c 00 00       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
    8ae3:	48 89 d8             	mov    %rbx,%rax
    8ae6:	48 89 c7             	mov    %rax,%rdi
    8ae9:	e8 82 be ff ff       	call   4970 <_Unwind_Resume@plt>
}
    8aee:	48 89 c3             	mov    %rax,%rbx
    8af1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8af5:	48 89 c7             	mov    %rax,%rdi
    8af8:	e8 47 0d 00 00       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    8afd:	48 89 d8             	mov    %rbx,%rax
    8b00:	48 89 c7             	mov    %rax,%rdi
    8b03:	e8 68 be ff ff       	call   4970 <_Unwind_Resume@plt>
    8b08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8b0c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8b10:	c9                   	leave
    8b11:	c3                   	ret

0000000000008b12 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>:

std::vector<VkPhysicalDevice> getPhysicalDeviceList(VkInstance instance) {
    8b12:	55                   	push   %rbp
    8b13:	48 89 e5             	mov    %rsp,%rbp
    8b16:	41 54                	push   %r12
    8b18:	53                   	push   %rbx
    8b19:	48 83 ec 20          	sub    $0x20,%rsp
    8b1d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    8b21:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t physicalDeviceCount;
  vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, nullptr);
    8b25:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    8b29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8b2d:	ba 00 00 00 00       	mov    $0x0,%edx
    8b32:	48 89 ce             	mov    %rcx,%rsi
    8b35:	48 89 c7             	mov    %rax,%rdi
    8b38:	e8 d3 b6 ff ff       	call   4210 <vkEnumeratePhysicalDevices@plt>
  if (physicalDeviceCount == 0) {
    8b3d:	8b 45 e8             	mov    -0x18(%rbp),%eax
    8b40:	85 c0                	test   %eax,%eax
    8b42:	75 3b                	jne    8b7f <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x6d>
    throw std::runtime_error(
        "Failed to find any physical device with Vulkan support.");
    8b44:	bf 10 00 00 00       	mov    $0x10,%edi
    8b49:	e8 82 b6 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    8b4e:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    8b51:	48 8d 05 30 97 01 00 	lea    0x19730(%rip),%rax        # 22288 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x58>
    8b58:	48 89 c6             	mov    %rax,%rsi
    8b5b:	48 89 df             	mov    %rbx,%rdi
    8b5e:	e8 dd b5 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
        "Failed to find any physical device with Vulkan support.");
    8b63:	48 8b 05 4e c4 02 00 	mov    0x2c44e(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8b6a:	48 89 c2             	mov    %rax,%rdx
    8b6d:	48 8d 05 cc c1 02 00 	lea    0x2c1cc(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8b74:	48 89 c6             	mov    %rax,%rsi
    8b77:	48 89 df             	mov    %rbx,%rdi
    8b7a:	e8 81 bd ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkPhysicalDevice> physicalDevices{physicalDeviceCount};
    8b7f:	8b 45 e8             	mov    -0x18(%rbp),%eax
    8b82:	89 c3                	mov    %eax,%ebx
    8b84:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8b88:	48 89 c7             	mov    %rax,%rdi
    8b8b:	e8 fe 0f 00 00       	call   9b8e <_ZNSaIP18VkPhysicalDevice_TEC1Ev>
    8b90:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    8b94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8b98:	48 89 de             	mov    %rbx,%rsi
    8b9b:	48 89 c7             	mov    %rax,%rdi
    8b9e:	e8 23 10 00 00       	call   9bc6 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>
    8ba3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8ba7:	48 89 c7             	mov    %rax,%rdi
    8baa:	e8 fb 0f 00 00       	call   9baa <_ZNSaIP18VkPhysicalDevice_TED1Ev>
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    8baf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8bb3:	48 89 c7             	mov    %rax,%rdi
    8bb6:	e8 c5 10 00 00       	call   9c80 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>
    8bbb:	48 89 c2             	mov    %rax,%rdx
    8bbe:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    8bc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8bc6:	48 89 ce             	mov    %rcx,%rsi
    8bc9:	48 89 c7             	mov    %rax,%rdi
    8bcc:	e8 3f b6 ff ff       	call   4210 <vkEnumeratePhysicalDevices@plt>
                                 physicalDevices.data()) != VK_SUCCESS) {
    8bd1:	85 c0                	test   %eax,%eax
    8bd3:	0f 95 c0             	setne  %al
  if (vkEnumeratePhysicalDevices(instance, &physicalDeviceCount,
    8bd6:	84 c0                	test   %al,%al
    8bd8:	0f 84 95 00 00 00    	je     8c73 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x161>
    throw std::runtime_error("Failed to get physical devices list.");
    8bde:	bf 10 00 00 00       	mov    $0x10,%edi
    8be3:	e8 e8 b5 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    8be8:	48 89 c3             	mov    %rax,%rbx
    8beb:	48 8d 05 ce 96 01 00 	lea    0x196ce(%rip),%rax        # 222c0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x90>
    8bf2:	48 89 c6             	mov    %rax,%rsi
    8bf5:	48 89 df             	mov    %rbx,%rdi
    8bf8:	e8 43 b5 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    8bfd:	48 8b 05 b4 c3 02 00 	mov    0x2c3b4(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    8c04:	48 89 c2             	mov    %rax,%rdx
    8c07:	48 8d 05 32 c1 02 00 	lea    0x2c132(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    8c0e:	48 89 c6             	mov    %rax,%rsi
    8c11:	48 89 df             	mov    %rbx,%rdi
    8c14:	e8 e7 bc ff ff       	call   4900 <__cxa_throw@plt>
        "Failed to find any physical device with Vulkan support.");
    8c19:	49 89 c4             	mov    %rax,%r12
    8c1c:	48 89 df             	mov    %rbx,%rdi
    8c1f:	e8 dc b6 ff ff       	call   4300 <__cxa_free_exception@plt>
    8c24:	4c 89 e0             	mov    %r12,%rax
    8c27:	48 89 c7             	mov    %rax,%rdi
    8c2a:	e8 41 bd ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkPhysicalDevice> physicalDevices{physicalDeviceCount};
    8c2f:	48 89 c3             	mov    %rax,%rbx
    8c32:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8c36:	48 89 c7             	mov    %rax,%rdi
    8c39:	e8 6c 0f 00 00       	call   9baa <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    8c3e:	48 89 d8             	mov    %rbx,%rax
    8c41:	48 89 c7             	mov    %rax,%rdi
    8c44:	e8 27 bd ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get physical devices list.");
    8c49:	49 89 c4             	mov    %rax,%r12
    8c4c:	48 89 df             	mov    %rbx,%rdi
    8c4f:	e8 ac b6 ff ff       	call   4300 <__cxa_free_exception@plt>
    8c54:	4c 89 e3             	mov    %r12,%rbx
    8c57:	eb 03                	jmp    8c5c <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T+0x14a>
  };
  return physicalDevices;
}
    8c59:	48 89 c3             	mov    %rax,%rbx
    8c5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8c60:	48 89 c7             	mov    %rax,%rdi
    8c63:	e8 d4 0f 00 00       	call   9c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    8c68:	48 89 d8             	mov    %rbx,%rax
    8c6b:	48 89 c7             	mov    %rax,%rdi
    8c6e:	e8 fd bc ff ff       	call   4970 <_Unwind_Resume@plt>
  return physicalDevices;
    8c73:	90                   	nop
}
    8c74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8c78:	48 83 c4 20          	add    $0x20,%rsp
    8c7c:	5b                   	pop    %rbx
    8c7d:	41 5c                	pop    %r12
    8c7f:	5d                   	pop    %rbp
    8c80:	c3                   	ret

0000000000008c81 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>:

VkPhysicalDeviceProperties
getPhysicalDevicePropertyList(VkPhysicalDevice physicalDevice) {
    8c81:	55                   	push   %rbp
    8c82:	48 89 e5             	mov    %rsp,%rbp
    8c85:	48 83 ec 10          	sub    $0x10,%rsp
    8c89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8c8d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  VkPhysicalDeviceProperties properties;
  vkGetPhysicalDeviceProperties(physicalDevice, &properties);
    8c91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8c99:	48 89 d6             	mov    %rdx,%rsi
    8c9c:	48 89 c7             	mov    %rax,%rdi
    8c9f:	e8 ac b4 ff ff       	call   4150 <vkGetPhysicalDeviceProperties@plt>
  return properties;
    8ca4:	90                   	nop
}
    8ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ca9:	c9                   	leave
    8caa:	c3                   	ret

0000000000008cab <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>:

VkPhysicalDeviceProperties2
getPhysicalDevicePropertyList(VkPhysicalDevice physicalDevice,
                              void *pNextProperty) {
    8cab:	55                   	push   %rbp
    8cac:	48 89 e5             	mov    %rsp,%rbp
    8caf:	48 83 ec 20          	sub    $0x20,%rsp
    8cb3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8cb7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8cbb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  VkPhysicalDeviceProperties2 properties;
  properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    8cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8cc3:	c7 00 79 b0 9b 3b    	movl   $0x3b9bb079,(%rax)
  properties.pNext = pNextProperty;
    8cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ccd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8cd1:	48 89 50 08          	mov    %rdx,0x8(%rax)
  vkGetPhysicalDeviceProperties2(physicalDevice, &properties);
    8cd5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8cdd:	48 89 d6             	mov    %rdx,%rsi
    8ce0:	48 89 c7             	mov    %rax,%rdi
    8ce3:	e8 88 b7 ff ff       	call   4470 <vkGetPhysicalDeviceProperties2@plt>
  return properties;
    8ce8:	90                   	nop
}
    8ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ced:	c9                   	leave
    8cee:	c3                   	ret

0000000000008cef <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<VkQueueFamilyProperties>
getPhysicalDeviceQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    8cef:	55                   	push   %rbp
    8cf0:	48 89 e5             	mov    %rsp,%rbp
    8cf3:	53                   	push   %rbx
    8cf4:	48 83 ec 28          	sub    $0x28,%rsp
    8cf8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    8cfc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  uint32_t queueFamilyPropertyCount;
  vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,
    8d00:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    8d04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8d08:	ba 00 00 00 00       	mov    $0x0,%edx
    8d0d:	48 89 ce             	mov    %rcx,%rsi
    8d10:	48 89 c7             	mov    %rax,%rdi
    8d13:	e8 18 b6 ff ff       	call   4330 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
                                           &queueFamilyPropertyCount, nullptr);
  std::vector<VkQueueFamilyProperties> queueFamilyProperties{
      queueFamilyPropertyCount};
    8d18:	8b 45 e8             	mov    -0x18(%rbp),%eax
    8d1b:	89 c3                	mov    %eax,%ebx
    8d1d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8d21:	48 89 c7             	mov    %rax,%rdi
    8d24:	e8 c9 0f 00 00       	call   9cf2 <_ZNSaI23VkQueueFamilyPropertiesEC1Ev>
    8d29:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    8d2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8d31:	48 89 de             	mov    %rbx,%rsi
    8d34:	48 89 c7             	mov    %rax,%rdi
    8d37:	e8 ee 0f 00 00       	call   9d2a <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>
    8d3c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8d40:	48 89 c7             	mov    %rax,%rdi
    8d43:	e8 c6 0f 00 00       	call   9d0e <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
  vkGetPhysicalDeviceQueueFamilyProperties(
    8d48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8d4c:	48 89 c7             	mov    %rax,%rdi
    8d4f:	e8 90 10 00 00       	call   9de4 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4dataEv>
    8d54:	48 89 c2             	mov    %rax,%rdx
    8d57:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    8d5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8d5f:	48 89 ce             	mov    %rcx,%rsi
    8d62:	48 89 c7             	mov    %rax,%rdi
    8d65:	e8 c6 b5 ff ff       	call   4330 <vkGetPhysicalDeviceQueueFamilyProperties@plt>
      physicalDevice, &queueFamilyPropertyCount, queueFamilyProperties.data());
  return queueFamilyProperties;
    8d6a:	eb 34                	jmp    8da0 <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xb1>
      queueFamilyPropertyCount};
    8d6c:	48 89 c3             	mov    %rax,%rbx
    8d6f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    8d73:	48 89 c7             	mov    %rax,%rdi
    8d76:	e8 93 0f 00 00       	call   9d0e <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    8d7b:	48 89 d8             	mov    %rbx,%rax
    8d7e:	48 89 c7             	mov    %rax,%rdi
    8d81:	e8 ea bb ff ff       	call   4970 <_Unwind_Resume@plt>
}
    8d86:	48 89 c3             	mov    %rax,%rbx
    8d89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8d8d:	48 89 c7             	mov    %rax,%rdi
    8d90:	e8 0b 10 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    8d95:	48 89 d8             	mov    %rbx,%rax
    8d98:	48 89 c7             	mov    %rax,%rdi
    8d9b:	e8 d0 bb ff ff       	call   4970 <_Unwind_Resume@plt>
    8da0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8da4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8da8:	c9                   	leave
    8da9:	c3                   	ret

0000000000008daa <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getGraphicsQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    8daa:	55                   	push   %rbp
    8dab:	48 89 e5             	mov    %rsp,%rbp
    8dae:	53                   	push   %rbx
    8daf:	48 83 ec 68          	sub    $0x68,%rsp
    8db3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    8db7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    8dbb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8dbf:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    8dc3:	48 89 d6             	mov    %rdx,%rsi
    8dc6:	48 89 c7             	mov    %rax,%rdi
    8dc9:	e8 21 ff ff ff       	call   8cef <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> graphicsQueueFamilies{
      queueFamilyProps.size()};
    8dce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8dd2:	48 89 c7             	mov    %rax,%rdi
    8dd5:	e8 86 10 00 00       	call   9e60 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    8dda:	48 89 c3             	mov    %rax,%rbx
    8ddd:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8de1:	48 89 c7             	mov    %rax,%rdi
    8de4:	e8 a5 10 00 00       	call   9e8e <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    8de9:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    8ded:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8df1:	48 89 de             	mov    %rbx,%rsi
    8df4:	48 89 c7             	mov    %rax,%rdi
    8df7:	e8 ca 10 00 00       	call   9ec6 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    8dfc:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8e00:	48 89 c7             	mov    %rax,%rdi
    8e03:	e8 a2 10 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  std::size_t index = 0;
    8e08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    8e0f:	00 
  for (const auto &queueFamilyProp : queueFamilyProps) {
    8e10:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8e14:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    8e18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8e1c:	48 89 c7             	mov    %rax,%rdi
    8e1f:	e8 5c 11 00 00       	call   9f80 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    8e24:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8e28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8e2c:	48 89 c7             	mov    %rax,%rdi
    8e2f:	e8 72 11 00 00       	call   9fa6 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    8e34:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    8e38:	eb 4e                	jmp    8e88 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xde>
    8e3a:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8e3e:	48 89 c7             	mov    %rax,%rdi
    8e41:	e8 e4 11 00 00       	call   a02a <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    8e46:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (queueFamilyProp.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
    8e4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8e4e:	8b 00                	mov    (%rax),%eax
    8e50:	83 e0 01             	and    $0x1,%eax
    8e53:	85 c0                	test   %eax,%eax
    8e55:	74 25                	je     8e7c <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xd2>
      graphicsQueueFamilies[index] = queueFamilyProp;
    8e57:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8e5b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8e5f:	48 89 d6             	mov    %rdx,%rsi
    8e62:	48 89 c7             	mov    %rax,%rdi
    8e65:	e8 d2 11 00 00       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    8e6a:	48 89 c2             	mov    %rax,%rdx
    8e6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8e71:	48 89 c6             	mov    %rax,%rsi
    8e74:	48 89 d7             	mov    %rdx,%rdi
    8e77:	e8 ea 11 00 00       	call   a066 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
  for (const auto &queueFamilyProp : queueFamilyProps) {
    8e7c:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8e80:	48 89 c7             	mov    %rax,%rdi
    8e83:	e8 82 11 00 00       	call   a00a <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    8e88:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    8e8c:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8e90:	48 89 d6             	mov    %rdx,%rsi
    8e93:	48 89 c7             	mov    %rax,%rdi
    8e96:	e8 34 11 00 00       	call   9fcf <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    8e9b:	84 c0                	test   %al,%al
    8e9d:	75 9b                	jne    8e3a <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
    }
  }
  return graphicsQueueFamilies;
    8e9f:	90                   	nop
}
    8ea0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8ea4:	48 89 c7             	mov    %rax,%rdi
    8ea7:	e8 f4 0e 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return graphicsQueueFamilies;
    8eac:	eb 26                	jmp    8ed4 <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x12a>
      queueFamilyProps.size()};
    8eae:	48 89 c3             	mov    %rax,%rbx
    8eb1:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8eb5:	48 89 c7             	mov    %rax,%rdi
    8eb8:	e8 ed 0f 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
}
    8ebd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8ec1:	48 89 c7             	mov    %rax,%rdi
    8ec4:	e8 d7 0e 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    8ec9:	48 89 d8             	mov    %rbx,%rax
    8ecc:	48 89 c7             	mov    %rax,%rdi
    8ecf:	e8 9c ba ff ff       	call   4970 <_Unwind_Resume@plt>
    8ed4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8ed8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8edc:	c9                   	leave
    8edd:	c3                   	ret

0000000000008ede <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getComputeQueueFamilyPropertyList(VkPhysicalDevice physicalDevice) {
    8ede:	55                   	push   %rbp
    8edf:	48 89 e5             	mov    %rsp,%rbp
    8ee2:	53                   	push   %rbx
    8ee3:	48 83 ec 68          	sub    $0x68,%rsp
    8ee7:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    8eeb:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    8eef:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8ef3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    8ef7:	48 89 d6             	mov    %rdx,%rsi
    8efa:	48 89 c7             	mov    %rax,%rdi
    8efd:	e8 ed fd ff ff       	call   8cef <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> computeQueueFamilies{
      queueFamilyProps.size()};
    8f02:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8f06:	48 89 c7             	mov    %rax,%rdi
    8f09:	e8 52 0f 00 00       	call   9e60 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    8f0e:	48 89 c3             	mov    %rax,%rbx
    8f11:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8f15:	48 89 c7             	mov    %rax,%rdi
    8f18:	e8 71 0f 00 00       	call   9e8e <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    8f1d:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    8f21:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8f25:	48 89 de             	mov    %rbx,%rsi
    8f28:	48 89 c7             	mov    %rax,%rdi
    8f2b:	e8 96 0f 00 00       	call   9ec6 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    8f30:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8f34:	48 89 c7             	mov    %rax,%rdi
    8f37:	e8 6e 0f 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  std::size_t index = 0;
    8f3c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    8f43:	00 
  for (const auto &queueFamilyProp : queueFamilyProps) {
    8f44:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8f48:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    8f4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8f50:	48 89 c7             	mov    %rax,%rdi
    8f53:	e8 28 10 00 00       	call   9f80 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    8f58:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    8f5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8f60:	48 89 c7             	mov    %rax,%rdi
    8f63:	e8 3e 10 00 00       	call   9fa6 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    8f68:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    8f6c:	eb 53                	jmp    8fc1 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xe3>
    8f6e:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8f72:	48 89 c7             	mov    %rax,%rdi
    8f75:	e8 b0 10 00 00       	call   a02a <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    8f7a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (queueFamilyProp.queueFlags & VK_QUEUE_COMPUTE_BIT) {
    8f7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8f82:	8b 00                	mov    (%rax),%eax
    8f84:	83 e0 02             	and    $0x2,%eax
    8f87:	85 c0                	test   %eax,%eax
    8f89:	74 25                	je     8fb0 <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0xd2>
      computeQueueFamilies[index] = queueFamilyProp;
    8f8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8f8f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8f93:	48 89 d6             	mov    %rdx,%rsi
    8f96:	48 89 c7             	mov    %rax,%rdi
    8f99:	e8 9e 10 00 00       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    8f9e:	48 89 c2             	mov    %rax,%rdx
    8fa1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8fa5:	48 89 c6             	mov    %rax,%rsi
    8fa8:	48 89 d7             	mov    %rdx,%rdi
    8fab:	e8 b6 10 00 00       	call   a066 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
    }
    ++index;
    8fb0:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    8fb5:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8fb9:	48 89 c7             	mov    %rax,%rdi
    8fbc:	e8 49 10 00 00       	call   a00a <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    8fc1:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    8fc5:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    8fc9:	48 89 d6             	mov    %rdx,%rsi
    8fcc:	48 89 c7             	mov    %rax,%rdi
    8fcf:	e8 fb 0f 00 00       	call   9fcf <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    8fd4:	84 c0                	test   %al,%al
    8fd6:	75 96                	jne    8f6e <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x90>
  }
  return computeQueueFamilies;
    8fd8:	90                   	nop
}
    8fd9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8fdd:	48 89 c7             	mov    %rax,%rdi
    8fe0:	e8 bb 0d 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return computeQueueFamilies;
    8fe5:	eb 26                	jmp    900d <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T+0x12f>
      queueFamilyProps.size()};
    8fe7:	48 89 c3             	mov    %rax,%rbx
    8fea:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    8fee:	48 89 c7             	mov    %rax,%rdi
    8ff1:	e8 b4 0e 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
}
    8ff6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    8ffa:	48 89 c7             	mov    %rax,%rdi
    8ffd:	e8 9e 0d 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    9002:	48 89 d8             	mov    %rbx,%rax
    9005:	48 89 c7             	mov    %rax,%rdi
    9008:	e8 63 b9 ff ff       	call   4970 <_Unwind_Resume@plt>
    900d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9011:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9015:	c9                   	leave
    9016:	c3                   	ret

0000000000009017 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

std::vector<std::optional<VkQueueFamilyProperties>>
getPresentQueueFamilyPropertyList(VkPhysicalDevice physicalDevice,
                                  VkSurfaceKHR surface) {
    9017:	55                   	push   %rbp
    9018:	48 89 e5             	mov    %rsp,%rbp
    901b:	53                   	push   %rbx
    901c:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    9023:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    9027:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    902b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  auto queueFamilyProps =
      getPhysicalDeviceQueueFamilyPropertyList(physicalDevice);
    9032:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    9036:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    903a:	48 89 d6             	mov    %rdx,%rsi
    903d:	48 89 c7             	mov    %rax,%rdi
    9040:	e8 aa fc ff ff       	call   8cef <_ZN3vkh40getPhysicalDeviceQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  std::vector<std::optional<VkQueueFamilyProperties>> presentQueueFamilies{
      queueFamilyProps.size()};
    9045:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    9049:	48 89 c7             	mov    %rax,%rdi
    904c:	e8 0f 0e 00 00       	call   9e60 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>
    9051:	48 89 c3             	mov    %rax,%rbx
    9054:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    9058:	48 89 c7             	mov    %rax,%rdi
    905b:	e8 2e 0e 00 00       	call   9e8e <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    9060:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
    9064:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    9068:	48 89 de             	mov    %rbx,%rsi
    906b:	48 89 c7             	mov    %rax,%rdi
    906e:	e8 53 0e 00 00       	call   9ec6 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
    9073:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    9077:	48 89 c7             	mov    %rax,%rdi
    907a:	e8 2b 0e 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
  uint32_t index = 0;
    907f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    9086:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    908a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    908e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9092:	48 89 c7             	mov    %rax,%rdi
    9095:	e8 e6 0e 00 00       	call   9f80 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>
    909a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    909e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    90a2:	48 89 c7             	mov    %rax,%rdi
    90a5:	e8 fc 0e 00 00       	call   9fa6 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>
    90aa:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    90ae:	eb 6c                	jmp    911c <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x105>
    90b0:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    90b4:	48 89 c7             	mov    %rax,%rdi
    90b7:	e8 6e 0f 00 00       	call   a02a <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    90bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    VkBool32 presentSupported = false;
    90c0:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, index, surface,
    90c7:	48 8d 4d 9c          	lea    -0x64(%rbp),%rcx
    90cb:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    90d2:	8b 75 ec             	mov    -0x14(%rbp),%esi
    90d5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    90d9:	48 89 c7             	mov    %rax,%rdi
    90dc:	e8 7f b4 ff ff       	call   4560 <vkGetPhysicalDeviceSurfaceSupportKHR@plt>
                                         &presentSupported);
    if (presentSupported) {
    90e1:	8b 45 9c             	mov    -0x64(%rbp),%eax
    90e4:	85 c0                	test   %eax,%eax
    90e6:	74 24                	je     910c <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xf5>
      presentQueueFamilies[index] = queueFamilyProp;
    90e8:	8b 55 ec             	mov    -0x14(%rbp),%edx
    90eb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    90ef:	48 89 d6             	mov    %rdx,%rsi
    90f2:	48 89 c7             	mov    %rax,%rdi
    90f5:	e8 42 0f 00 00       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    90fa:	48 89 c2             	mov    %rax,%rdx
    90fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9101:	48 89 c6             	mov    %rax,%rsi
    9104:	48 89 d7             	mov    %rdx,%rdi
    9107:	e8 5a 0f 00 00       	call   a066 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>
    }
    ++index;
    910c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  for (const auto &queueFamilyProp : queueFamilyProps) {
    9110:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    9114:	48 89 c7             	mov    %rax,%rdi
    9117:	e8 ee 0e 00 00       	call   a00a <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    911c:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    9120:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    9124:	48 89 d6             	mov    %rdx,%rsi
    9127:	48 89 c7             	mov    %rax,%rdi
    912a:	e8 a0 0e 00 00       	call   9fcf <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    912f:	84 c0                	test   %al,%al
    9131:	0f 85 79 ff ff ff    	jne    90b0 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x99>
  }
  return presentQueueFamilies;
    9137:	90                   	nop
}
    9138:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    913c:	48 89 c7             	mov    %rax,%rdi
    913f:	e8 5c 0c 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
  return presentQueueFamilies;
    9144:	eb 37                	jmp    917d <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x166>
      queueFamilyProps.size()};
    9146:	48 89 c3             	mov    %rax,%rbx
    9149:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    914d:	48 89 c7             	mov    %rax,%rdi
    9150:	e8 55 0d 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    9155:	eb 0f                	jmp    9166 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x14f>
}
    9157:	48 89 c3             	mov    %rax,%rbx
    915a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    915e:	48 89 c7             	mov    %rax,%rdi
    9161:	e8 d6 0d 00 00       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    9166:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    916a:	48 89 c7             	mov    %rax,%rdi
    916d:	e8 2e 0c 00 00       	call   9da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    9172:	48 89 d8             	mov    %rbx,%rax
    9175:	48 89 c7             	mov    %rax,%rdi
    9178:	e8 f3 b7 ff ff       	call   4970 <_Unwind_Resume@plt>
    917d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    9181:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9185:	c9                   	leave
    9186:	c3                   	ret

0000000000009187 <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

VkSurfaceCapabilitiesKHR
getPhysicalDeviceSurfaceCapabilities(VkPhysicalDevice physicalDevice,
                                     VkSurfaceKHR surface) {
    9187:	55                   	push   %rbp
    9188:	48 89 e5             	mov    %rsp,%rbp
    918b:	41 54                	push   %r12
    918d:	53                   	push   %rbx
    918e:	48 83 ec 20          	sub    $0x20,%rsp
    9192:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9196:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    919a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  VkSurfaceCapabilitiesKHR surfaceCapabilities{};
    919e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    91a2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    91a6:	0f 11 00             	movups %xmm0,(%rax)
    91a9:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    91ad:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    91b1:	66 0f 7e 40 30       	movd   %xmm0,0x30(%rax)
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    91b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    91ba:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    91be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    91c2:	48 89 ce             	mov    %rcx,%rsi
    91c5:	48 89 c7             	mov    %rax,%rdi
    91c8:	e8 33 b2 ff ff       	call   4400 <vkGetPhysicalDeviceSurfaceCapabilitiesKHR@plt>
          physicalDevice, surface, &surfaceCapabilities) != VK_SUCCESS) {
    91cd:	85 c0                	test   %eax,%eax
    91cf:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    91d2:	84 c0                	test   %al,%al
    91d4:	74 51                	je     9227 <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0xa0>
    throw std::runtime_error("Failed to get surface capabilities.");
    91d6:	bf 10 00 00 00       	mov    $0x10,%edi
    91db:	e8 f0 af ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    91e0:	48 89 c3             	mov    %rax,%rbx
    91e3:	48 8d 05 fe 90 01 00 	lea    0x190fe(%rip),%rax        # 222e8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xb8>
    91ea:	48 89 c6             	mov    %rax,%rsi
    91ed:	48 89 df             	mov    %rbx,%rdi
    91f0:	e8 4b af ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    91f5:	48 8b 05 bc bd 02 00 	mov    0x2bdbc(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    91fc:	48 89 c2             	mov    %rax,%rdx
    91ff:	48 8d 05 3a bb 02 00 	lea    0x2bb3a(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9206:	48 89 c6             	mov    %rax,%rsi
    9209:	48 89 df             	mov    %rbx,%rdi
    920c:	e8 ef b6 ff ff       	call   4900 <__cxa_throw@plt>
    9211:	49 89 c4             	mov    %rax,%r12
    9214:	48 89 df             	mov    %rbx,%rdi
    9217:	e8 e4 b0 ff ff       	call   4300 <__cxa_free_exception@plt>
    921c:	4c 89 e0             	mov    %r12,%rax
    921f:	48 89 c7             	mov    %rax,%rdi
    9222:	e8 49 b7 ff ff       	call   4970 <_Unwind_Resume@plt>
  }
  return surfaceCapabilities;
    9227:	90                   	nop
}
    9228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    922c:	48 83 c4 20          	add    $0x20,%rsp
    9230:	5b                   	pop    %rbx
    9231:	41 5c                	pop    %r12
    9233:	5d                   	pop    %rbp
    9234:	c3                   	ret

0000000000009235 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:

std::vector<VkSurfaceFormatKHR>
getPhysicalDeviceSurfaceFormatList(VkPhysicalDevice physicalDevice,
                                   VkSurfaceKHR surface) {
    9235:	55                   	push   %rbp
    9236:	48 89 e5             	mov    %rsp,%rbp
    9239:	41 54                	push   %r12
    923b:	53                   	push   %rbx
    923c:	48 83 ec 30          	sub    $0x30,%rsp
    9240:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    9244:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    9248:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t surfaceFormatCount;
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    924c:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    9250:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    9254:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9258:	b9 00 00 00 00       	mov    $0x0,%ecx
    925d:	48 89 c7             	mov    %rax,%rdi
    9260:	e8 4b b4 ff ff       	call   46b0 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
                                           &surfaceFormatCount,
                                           nullptr) != VK_SUCCESS) {
    9265:	85 c0                	test   %eax,%eax
    9267:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface,
    926a:	84 c0                	test   %al,%al
    926c:	74 3b                	je     92a9 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x74>
    throw std::runtime_error("Failed to get surface format list.");
    926e:	bf 10 00 00 00       	mov    $0x10,%edi
    9273:	e8 58 af ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    9278:	48 89 c3             	mov    %rax,%rbx
    927b:	48 8d 05 8e 90 01 00 	lea    0x1908e(%rip),%rax        # 22310 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe0>
    9282:	48 89 c6             	mov    %rax,%rsi
    9285:	48 89 df             	mov    %rbx,%rdi
    9288:	e8 b3 ae ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    928d:	48 8b 05 24 bd 02 00 	mov    0x2bd24(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9294:	48 89 c2             	mov    %rax,%rdx
    9297:	48 8d 05 a2 ba 02 00 	lea    0x2baa2(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    929e:	48 89 c6             	mov    %rax,%rsi
    92a1:	48 89 df             	mov    %rbx,%rdi
    92a4:	e8 57 b6 ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
    92a9:	8b 45 e8             	mov    -0x18(%rbp),%eax
    92ac:	89 c3                	mov    %eax,%ebx
    92ae:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    92b2:	48 89 c7             	mov    %rax,%rdi
    92b5:	e8 84 0e 00 00       	call   a13e <_ZNSaI18VkSurfaceFormatKHREC1Ev>
    92ba:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    92be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    92c2:	48 89 de             	mov    %rbx,%rsi
    92c5:	48 89 c7             	mov    %rax,%rdi
    92c8:	e8 a9 0e 00 00       	call   a176 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>
    92cd:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    92d1:	48 89 c7             	mov    %rax,%rdi
    92d4:	e8 81 0e 00 00       	call   a15a <_ZNSaI18VkSurfaceFormatKHRED1Ev>
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
    92d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    92dd:	48 89 c7             	mov    %rax,%rdi
    92e0:	e8 4b 0f 00 00       	call   a230 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE4dataEv>
    92e5:	48 89 c1             	mov    %rax,%rcx
    92e8:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    92ec:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    92f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    92f4:	48 89 c7             	mov    %rax,%rdi
    92f7:	e8 b4 b3 ff ff       	call   46b0 <vkGetPhysicalDeviceSurfaceFormatsKHR@plt>
          physicalDevice, surface, &surfaceFormatCount,
          surfaceFormats.data()) != VK_SUCCESS) {
    92fc:	85 c0                	test   %eax,%eax
    92fe:	0f 95 c0             	setne  %al
  if (vkGetPhysicalDeviceSurfaceFormatsKHR(
    9301:	84 c0                	test   %al,%al
    9303:	0f 84 95 00 00 00    	je     939e <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x169>
    throw std::runtime_error("Failed to get surface format list.");
    9309:	bf 10 00 00 00       	mov    $0x10,%edi
    930e:	e8 bd ae ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    9313:	48 89 c3             	mov    %rax,%rbx
    9316:	48 8d 05 f3 8f 01 00 	lea    0x18ff3(%rip),%rax        # 22310 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe0>
    931d:	48 89 c6             	mov    %rax,%rsi
    9320:	48 89 df             	mov    %rbx,%rdi
    9323:	e8 18 ae ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    9328:	48 8b 05 89 bc 02 00 	mov    0x2bc89(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    932f:	48 89 c2             	mov    %rax,%rdx
    9332:	48 8d 05 07 ba 02 00 	lea    0x2ba07(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9339:	48 89 c6             	mov    %rax,%rsi
    933c:	48 89 df             	mov    %rbx,%rdi
    933f:	e8 bc b5 ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get surface format list.");
    9344:	49 89 c4             	mov    %rax,%r12
    9347:	48 89 df             	mov    %rbx,%rdi
    934a:	e8 b1 af ff ff       	call   4300 <__cxa_free_exception@plt>
    934f:	4c 89 e0             	mov    %r12,%rax
    9352:	48 89 c7             	mov    %rax,%rdi
    9355:	e8 16 b6 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkSurfaceFormatKHR> surfaceFormats{surfaceFormatCount};
    935a:	48 89 c3             	mov    %rax,%rbx
    935d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    9361:	48 89 c7             	mov    %rax,%rdi
    9364:	e8 f1 0d 00 00       	call   a15a <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    9369:	48 89 d8             	mov    %rbx,%rax
    936c:	48 89 c7             	mov    %rax,%rdi
    936f:	e8 fc b5 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface format list.");
    9374:	49 89 c4             	mov    %rax,%r12
    9377:	48 89 df             	mov    %rbx,%rdi
    937a:	e8 81 af ff ff       	call   4300 <__cxa_free_exception@plt>
    937f:	4c 89 e3             	mov    %r12,%rbx
    9382:	eb 03                	jmp    9387 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x152>
  }
  return surfaceFormats;
}
    9384:	48 89 c3             	mov    %rax,%rbx
    9387:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    938b:	48 89 c7             	mov    %rax,%rdi
    938e:	e8 59 0e 00 00       	call   a1ec <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    9393:	48 89 d8             	mov    %rbx,%rax
    9396:	48 89 c7             	mov    %rax,%rdi
    9399:	e8 d2 b5 ff ff       	call   4970 <_Unwind_Resume@plt>
  return surfaceFormats;
    939e:	90                   	nop
}
    939f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    93a3:	48 83 c4 30          	add    $0x30,%rsp
    93a7:	5b                   	pop    %rbx
    93a8:	41 5c                	pop    %r12
    93aa:	5d                   	pop    %rbp
    93ab:	c3                   	ret

00000000000093ac <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>:
std::vector<VkPresentModeKHR>
getPhysicalDeviceSurfacePresentModeList(VkPhysicalDevice physicalDevice,
                                        VkSurfaceKHR surface) {
    93ac:	55                   	push   %rbp
    93ad:	48 89 e5             	mov    %rsp,%rbp
    93b0:	41 54                	push   %r12
    93b2:	53                   	push   %rbx
    93b3:	48 83 ec 30          	sub    $0x30,%rsp
    93b7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    93bb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    93bf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t presentModeCount;
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface,
    93c3:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    93c7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    93cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    93cf:	b9 00 00 00 00       	mov    $0x0,%ecx
    93d4:	48 89 c7             	mov    %rax,%rdi
    93d7:	e8 e4 b2 ff ff       	call   46c0 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    93dc:	85 c0                	test   %eax,%eax
    93de:	0f 95 c0             	setne  %al
    93e1:	84 c0                	test   %al,%al
    93e3:	74 3b                	je     9420 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x74>
                                                &presentModeCount, nullptr)) {
    throw std::runtime_error("Failed to get surface present mode list.");
    93e5:	bf 10 00 00 00       	mov    $0x10,%edi
    93ea:	e8 e1 ad ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    93ef:	48 89 c3             	mov    %rax,%rbx
    93f2:	48 8d 05 3f 8f 01 00 	lea    0x18f3f(%rip),%rax        # 22338 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x108>
    93f9:	48 89 c6             	mov    %rax,%rsi
    93fc:	48 89 df             	mov    %rbx,%rdi
    93ff:	e8 3c ad ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    9404:	48 8b 05 ad bb 02 00 	mov    0x2bbad(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    940b:	48 89 c2             	mov    %rax,%rdx
    940e:	48 8d 05 2b b9 02 00 	lea    0x2b92b(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9415:	48 89 c6             	mov    %rax,%rsi
    9418:	48 89 df             	mov    %rbx,%rdi
    941b:	e8 e0 b4 ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
    9420:	8b 45 e8             	mov    -0x18(%rbp),%eax
    9423:	89 c3                	mov    %eax,%ebx
    9425:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    9429:	48 89 c7             	mov    %rax,%rdi
    942c:	e8 71 0e 00 00       	call   a2a2 <_ZNSaI16VkPresentModeKHREC1Ev>
    9431:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    9435:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9439:	48 89 de             	mov    %rbx,%rsi
    943c:	48 89 c7             	mov    %rax,%rdi
    943f:	e8 96 0e 00 00       	call   a2da <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>
    9444:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    9448:	48 89 c7             	mov    %rax,%rdi
    944b:	e8 6e 0e 00 00       	call   a2be <_ZNSaI16VkPresentModeKHRED1Ev>
  if (vkGetPhysicalDeviceSurfacePresentModesKHR(
    9450:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9454:	48 89 c7             	mov    %rax,%rdi
    9457:	e8 38 0f 00 00       	call   a394 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE4dataEv>
    945c:	48 89 c1             	mov    %rax,%rcx
    945f:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    9463:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    9467:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    946b:	48 89 c7             	mov    %rax,%rdi
    946e:	e8 4d b2 ff ff       	call   46c0 <vkGetPhysicalDeviceSurfacePresentModesKHR@plt>
    9473:	85 c0                	test   %eax,%eax
    9475:	0f 95 c0             	setne  %al
    9478:	84 c0                	test   %al,%al
    947a:	0f 84 95 00 00 00    	je     9515 <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x169>
          physicalDevice, surface, &presentModeCount, presentModes.data())) {
    throw std::runtime_error("Failed to get surface present mode list.");
    9480:	bf 10 00 00 00       	mov    $0x10,%edi
    9485:	e8 46 ad ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    948a:	48 89 c3             	mov    %rax,%rbx
    948d:	48 8d 05 a4 8e 01 00 	lea    0x18ea4(%rip),%rax        # 22338 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x108>
    9494:	48 89 c6             	mov    %rax,%rsi
    9497:	48 89 df             	mov    %rbx,%rdi
    949a:	e8 a1 ac ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    949f:	48 8b 05 12 bb 02 00 	mov    0x2bb12(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    94a6:	48 89 c2             	mov    %rax,%rdx
    94a9:	48 8d 05 90 b8 02 00 	lea    0x2b890(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    94b0:	48 89 c6             	mov    %rax,%rsi
    94b3:	48 89 df             	mov    %rbx,%rdi
    94b6:	e8 45 b4 ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    94bb:	49 89 c4             	mov    %rax,%r12
    94be:	48 89 df             	mov    %rbx,%rdi
    94c1:	e8 3a ae ff ff       	call   4300 <__cxa_free_exception@plt>
    94c6:	4c 89 e0             	mov    %r12,%rax
    94c9:	48 89 c7             	mov    %rax,%rdi
    94cc:	e8 9f b4 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkPresentModeKHR> presentModes{presentModeCount};
    94d1:	48 89 c3             	mov    %rax,%rbx
    94d4:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    94d8:	48 89 c7             	mov    %rax,%rdi
    94db:	e8 de 0d 00 00       	call   a2be <_ZNSaI16VkPresentModeKHRED1Ev>
    94e0:	48 89 d8             	mov    %rbx,%rax
    94e3:	48 89 c7             	mov    %rax,%rdi
    94e6:	e8 85 b4 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get surface present mode list.");
    94eb:	49 89 c4             	mov    %rax,%r12
    94ee:	48 89 df             	mov    %rbx,%rdi
    94f1:	e8 0a ae ff ff       	call   4300 <__cxa_free_exception@plt>
    94f6:	4c 89 e3             	mov    %r12,%rbx
    94f9:	eb 03                	jmp    94fe <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T+0x152>
  }
  return presentModes;
}
    94fb:	48 89 c3             	mov    %rax,%rbx
    94fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9502:	48 89 c7             	mov    %rax,%rdi
    9505:	e8 46 0e 00 00       	call   a350 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    950a:	48 89 d8             	mov    %rbx,%rax
    950d:	48 89 c7             	mov    %rax,%rdi
    9510:	e8 5b b4 ff ff       	call   4970 <_Unwind_Resume@plt>
  return presentModes;
    9515:	90                   	nop
}
    9516:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    951a:	48 83 c4 30          	add    $0x30,%rsp
    951e:	5b                   	pop    %rbx
    951f:	41 5c                	pop    %r12
    9521:	5d                   	pop    %rbp
    9522:	c3                   	ret

0000000000009523 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T>:

std::vector<VkImage> getSwapchainImages(VkDevice device,
                                        VkSwapchainKHR swapchain) {
    9523:	55                   	push   %rbp
    9524:	48 89 e5             	mov    %rsp,%rbp
    9527:	41 54                	push   %r12
    9529:	53                   	push   %rbx
    952a:	48 83 ec 30          	sub    $0x30,%rsp
    952e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    9532:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    9536:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  uint32_t swapchainImageCount;
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    953a:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    953e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    9542:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9546:	b9 00 00 00 00       	mov    $0x0,%ecx
    954b:	48 89 c7             	mov    %rax,%rdi
    954e:	e8 0d ad ff ff       	call   4260 <vkGetSwapchainImagesKHR@plt>
                              nullptr) != VK_SUCCESS) {
    9553:	85 c0                	test   %eax,%eax
    9555:	0f 95 c0             	setne  %al
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    9558:	84 c0                	test   %al,%al
    955a:	74 3b                	je     9597 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x74>
    throw std::runtime_error("Failed to get swapchain images");
    955c:	bf 10 00 00 00       	mov    $0x10,%edi
    9561:	e8 6a ac ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    9566:	48 89 c3             	mov    %rax,%rbx
    9569:	48 8d 05 f8 8d 01 00 	lea    0x18df8(%rip),%rax        # 22368 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x138>
    9570:	48 89 c6             	mov    %rax,%rsi
    9573:	48 89 df             	mov    %rbx,%rdi
    9576:	e8 c5 ab ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    957b:	48 8b 05 36 ba 02 00 	mov    0x2ba36(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    9582:	48 89 c2             	mov    %rax,%rdx
    9585:	48 8d 05 b4 b7 02 00 	lea    0x2b7b4(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    958c:	48 89 c6             	mov    %rax,%rsi
    958f:	48 89 df             	mov    %rbx,%rdi
    9592:	e8 69 b3 ff ff       	call   4900 <__cxa_throw@plt>
  }
  std::vector<VkImage> swapchainImages{swapchainImageCount};
    9597:	8b 45 e8             	mov    -0x18(%rbp),%eax
    959a:	89 c3                	mov    %eax,%ebx
    959c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    95a0:	48 89 c7             	mov    %rax,%rdi
    95a3:	e8 5e 0e 00 00       	call   a406 <_ZNSaIP9VkImage_TEC1Ev>
    95a8:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
    95ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    95b0:	48 89 de             	mov    %rbx,%rsi
    95b3:	48 89 c7             	mov    %rax,%rdi
    95b6:	e8 83 0e 00 00       	call   a43e <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_>
    95bb:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    95bf:	48 89 c7             	mov    %rax,%rdi
    95c2:	e8 5b 0e 00 00       	call   a422 <_ZNSaIP9VkImage_TED1Ev>
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    95c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    95cb:	48 89 c7             	mov    %rax,%rdi
    95ce:	e8 25 0f 00 00       	call   a4f8 <_ZNSt6vectorIP9VkImage_TSaIS1_EE4dataEv>
    95d3:	48 89 c1             	mov    %rax,%rcx
    95d6:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    95da:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    95de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    95e2:	48 89 c7             	mov    %rax,%rdi
    95e5:	e8 76 ac ff ff       	call   4260 <vkGetSwapchainImagesKHR@plt>
                              swapchainImages.data()) != VK_SUCCESS) {
    95ea:	85 c0                	test   %eax,%eax
    95ec:	0f 95 c0             	setne  %al
  if (vkGetSwapchainImagesKHR(device, swapchain, &swapchainImageCount,
    95ef:	84 c0                	test   %al,%al
    95f1:	0f 84 95 00 00 00    	je     968c <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x169>
    throw std::runtime_error("Failed to get swapchain images");
    95f7:	bf 10 00 00 00       	mov    $0x10,%edi
    95fc:	e8 cf ab ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    9601:	48 89 c3             	mov    %rax,%rbx
    9604:	48 8d 05 5d 8d 01 00 	lea    0x18d5d(%rip),%rax        # 22368 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x138>
    960b:	48 89 c6             	mov    %rax,%rsi
    960e:	48 89 df             	mov    %rbx,%rdi
    9611:	e8 2a ab ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    9616:	48 8b 05 9b b9 02 00 	mov    0x2b99b(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    961d:	48 89 c2             	mov    %rax,%rdx
    9620:	48 8d 05 19 b7 02 00 	lea    0x2b719(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9627:	48 89 c6             	mov    %rax,%rsi
    962a:	48 89 df             	mov    %rbx,%rdi
    962d:	e8 ce b2 ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("Failed to get swapchain images");
    9632:	49 89 c4             	mov    %rax,%r12
    9635:	48 89 df             	mov    %rbx,%rdi
    9638:	e8 c3 ac ff ff       	call   4300 <__cxa_free_exception@plt>
    963d:	4c 89 e0             	mov    %r12,%rax
    9640:	48 89 c7             	mov    %rax,%rdi
    9643:	e8 28 b3 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkImage> swapchainImages{swapchainImageCount};
    9648:	48 89 c3             	mov    %rax,%rbx
    964b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    964f:	48 89 c7             	mov    %rax,%rdi
    9652:	e8 cb 0d 00 00       	call   a422 <_ZNSaIP9VkImage_TED1Ev>
    9657:	48 89 d8             	mov    %rbx,%rax
    965a:	48 89 c7             	mov    %rax,%rdi
    965d:	e8 0e b3 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to get swapchain images");
    9662:	49 89 c4             	mov    %rax,%r12
    9665:	48 89 df             	mov    %rbx,%rdi
    9668:	e8 93 ac ff ff       	call   4300 <__cxa_free_exception@plt>
    966d:	4c 89 e3             	mov    %r12,%rbx
    9670:	eb 03                	jmp    9675 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T+0x152>
  }
  return swapchainImages;
}
    9672:	48 89 c3             	mov    %rax,%rbx
    9675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9679:	48 89 c7             	mov    %rax,%rdi
    967c:	e8 33 0e 00 00       	call   a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
    9681:	48 89 d8             	mov    %rbx,%rax
    9684:	48 89 c7             	mov    %rax,%rdi
    9687:	e8 e4 b2 ff ff       	call   4970 <_Unwind_Resume@plt>
  return swapchainImages;
    968c:	90                   	nop
}
    968d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9691:	48 83 c4 30          	add    $0x30,%rsp
    9695:	5b                   	pop    %rbx
    9696:	41 5c                	pop    %r12
    9698:	5d                   	pop    %rbp
    9699:	c3                   	ret

000000000000969a <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
    969a:	55                   	push   %rbp
    969b:	48 89 e5             	mov    %rsp,%rbp
    969e:	48 83 ec 10          	sub    $0x10,%rsp
    96a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96aa:	48 89 c7             	mov    %rax,%rdi
    96ad:	e8 00 01 00 00       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
    96b2:	90                   	nop
    96b3:	c9                   	leave
    96b4:	c3                   	ret
    96b5:	90                   	nop

00000000000096b6 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>:
    96b6:	55                   	push   %rbp
    96b7:	48 89 e5             	mov    %rsp,%rbp
    96ba:	48 83 ec 10          	sub    $0x10,%rsp
    96be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96c6:	48 89 c7             	mov    %rax,%rdi
    96c9:	e8 52 02 00 00       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
    96ce:	90                   	nop
    96cf:	c9                   	leave
    96d0:	c3                   	ret
    96d1:	90                   	nop

00000000000096d2 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>:
    96d2:	55                   	push   %rbp
    96d3:	48 89 e5             	mov    %rsp,%rbp
    96d6:	48 83 ec 10          	sub    $0x10,%rsp
    96da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96e2:	48 89 c7             	mov    %rax,%rdi
    96e5:	e8 a4 03 00 00       	call   9a8e <_ZNSaIPKcED1Ev>
    96ea:	90                   	nop
    96eb:	c9                   	leave
    96ec:	c3                   	ret
    96ed:	90                   	nop

00000000000096ee <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>:
    96ee:	55                   	push   %rbp
    96ef:	48 89 e5             	mov    %rsp,%rbp
    96f2:	48 83 ec 10          	sub    $0x10,%rsp
    96f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    96fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96fe:	48 89 c7             	mov    %rax,%rdi
    9701:	e8 a4 04 00 00       	call   9baa <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    9706:	90                   	nop
    9707:	c9                   	leave
    9708:	c3                   	ret
    9709:	90                   	nop

000000000000970a <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>:
    970a:	55                   	push   %rbp
    970b:	48 89 e5             	mov    %rsp,%rbp
    970e:	48 83 ec 10          	sub    $0x10,%rsp
    9712:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    971a:	48 89 c7             	mov    %rax,%rdi
    971d:	e8 ec 05 00 00       	call   9d0e <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    9722:	90                   	nop
    9723:	c9                   	leave
    9724:	c3                   	ret
    9725:	90                   	nop

0000000000009726 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>:
    9726:	55                   	push   %rbp
    9727:	48 89 e5             	mov    %rsp,%rbp
    972a:	48 83 ec 10          	sub    $0x10,%rsp
    972e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9732:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9736:	48 89 c7             	mov    %rax,%rdi
    9739:	e8 6c 07 00 00       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    973e:	90                   	nop
    973f:	c9                   	leave
    9740:	c3                   	ret
    9741:	90                   	nop

0000000000009742 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>:
    9742:	55                   	push   %rbp
    9743:	48 89 e5             	mov    %rsp,%rbp
    9746:	48 83 ec 10          	sub    $0x10,%rsp
    974a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    974e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9752:	48 89 c7             	mov    %rax,%rdi
    9755:	e8 00 0a 00 00       	call   a15a <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    975a:	90                   	nop
    975b:	c9                   	leave
    975c:	c3                   	ret
    975d:	90                   	nop

000000000000975e <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>:
    975e:	55                   	push   %rbp
    975f:	48 89 e5             	mov    %rsp,%rbp
    9762:	48 83 ec 10          	sub    $0x10,%rsp
    9766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    976a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    976e:	48 89 c7             	mov    %rax,%rdi
    9771:	e8 48 0b 00 00       	call   a2be <_ZNSaI16VkPresentModeKHRED1Ev>
    9776:	90                   	nop
    9777:	c9                   	leave
    9778:	c3                   	ret
    9779:	90                   	nop

000000000000977a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>:
    977a:	55                   	push   %rbp
    977b:	48 89 e5             	mov    %rsp,%rbp
    977e:	48 83 ec 10          	sub    $0x10,%rsp
    9782:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9786:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    978a:	48 89 c7             	mov    %rax,%rdi
    978d:	e8 90 0c 00 00       	call   a422 <_ZNSaIP9VkImage_TED1Ev>
    9792:	90                   	nop
    9793:	c9                   	leave
    9794:	c3                   	ret
    9795:	90                   	nop

0000000000009796 <_ZNSaI17VkLayerPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9796:	55                   	push   %rbp
    9797:	48 89 e5             	mov    %rsp,%rbp
    979a:	48 83 ec 10          	sub    $0x10,%rsp
    979e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    97a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97a6:	48 89 c7             	mov    %rax,%rdi
    97a9:	e8 bc 0d 00 00       	call   a56a <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1Ev>
    97ae:	90                   	nop
    97af:	c9                   	leave
    97b0:	c3                   	ret
    97b1:	90                   	nop

00000000000097b2 <_ZNSaI17VkLayerPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    97b2:	55                   	push   %rbp
    97b3:	48 89 e5             	mov    %rsp,%rbp
    97b6:	48 83 ec 10          	sub    $0x10,%rsp
    97ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    97be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97c2:	48 89 c7             	mov    %rax,%rdi
    97c5:	e8 ac 0d 00 00       	call   a576 <_ZNSt15__new_allocatorI17VkLayerPropertiesED1Ev>
    97ca:	90                   	nop
    97cb:	c9                   	leave
    97cc:	c3                   	ret
    97cd:	90                   	nop

00000000000097ce <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    97ce:	55                   	push   %rbp
    97cf:	48 89 e5             	mov    %rsp,%rbp
    97d2:	53                   	push   %rbx
    97d3:	48 83 ec 28          	sub    $0x28,%rsp
    97d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    97db:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    97df:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    97e3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    97e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    97eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    97ef:	48 89 d6             	mov    %rdx,%rsi
    97f2:	48 89 c7             	mov    %rax,%rdi
    97f5:	e8 87 0d 00 00       	call   a581 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    97fa:	48 89 c1             	mov    %rax,%rcx
    97fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9801:	48 89 c2             	mov    %rax,%rdx
    9804:	48 89 ce             	mov    %rcx,%rsi
    9807:	48 89 df             	mov    %rbx,%rdi
    980a:	e8 d3 0d 00 00       	call   a5e2 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    980f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9813:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9817:	48 89 d6             	mov    %rdx,%rsi
    981a:	48 89 c7             	mov    %rax,%rdi
    981d:	e8 1e 0e 00 00       	call   a640 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE21_M_default_initializeEm>
    9822:	eb 1a                	jmp    983e <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_+0x70>
    9824:	48 89 c3             	mov    %rax,%rbx
    9827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    982b:	48 89 c7             	mov    %rax,%rdi
    982e:	e8 79 00 00 00       	call   98ac <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>
    9833:	48 89 d8             	mov    %rbx,%rax
    9836:	48 89 c7             	mov    %rax,%rdi
    9839:	e8 32 b1 ff ff       	call   4970 <_Unwind_Resume@plt>
    983e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9842:	c9                   	leave
    9843:	c3                   	ret

0000000000009844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    9844:	55                   	push   %rbp
    9845:	48 89 e5             	mov    %rsp,%rbp
    9848:	48 83 ec 10          	sub    $0x10,%rsp
    984c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    9850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9854:	48 89 c7             	mov    %rax,%rdi
    9857:	e8 24 0e 00 00       	call   a680 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    985c:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    985f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9863:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    986b:	48 8b 00             	mov    (%rax),%rax
    986e:	48 89 ce             	mov    %rcx,%rsi
    9871:	48 89 c7             	mov    %rax,%rdi
    9874:	e8 15 0e 00 00       	call   a68e <_ZSt8_DestroyIP17VkLayerPropertiesS0_EvT_S2_RSaIT0_E>
      }
    9879:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    987d:	48 89 c7             	mov    %rax,%rdi
    9880:	e8 27 00 00 00       	call   98ac <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>
    9885:	90                   	nop
    9886:	c9                   	leave
    9887:	c3                   	ret

0000000000009888 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    9888:	55                   	push   %rbp
    9889:	48 89 e5             	mov    %rsp,%rbp
    988c:	48 83 ec 10          	sub    $0x10,%rsp
    9890:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    9894:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9898:	48 8b 10             	mov    (%rax),%rdx
    989b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    989f:	48 89 d6             	mov    %rdx,%rsi
    98a2:	48 89 c7             	mov    %rax,%rdi
    98a5:	e8 0e 0e 00 00       	call   a6b8 <_ZNKSt6vectorI17VkLayerPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    98aa:	c9                   	leave
    98ab:	c3                   	ret

00000000000098ac <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    98ac:	55                   	push   %rbp
    98ad:	48 89 e5             	mov    %rsp,%rbp
    98b0:	48 83 ec 10          	sub    $0x10,%rsp
    98b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    98b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98bc:	48 8b 50 10          	mov    0x10(%rax),%rdx
    98c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98c4:	48 8b 00             	mov    (%rax),%rax
    98c7:	48 29 c2             	sub    %rax,%rdx
    98ca:	48 c1 fa 03          	sar    $0x3,%rdx
    98ce:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
    98d5:	fc c0 0f 
    98d8:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    98dc:	48 89 c2             	mov    %rax,%rdx
    98df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98e3:	48 8b 08             	mov    (%rax),%rcx
    98e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98ea:	48 89 ce             	mov    %rcx,%rsi
    98ed:	48 89 c7             	mov    %rax,%rdi
    98f0:	e8 fb 0d 00 00       	call   a6f0 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    98f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    98f9:	48 89 c7             	mov    %rax,%rdi
    98fc:	e8 99 fd ff ff       	call   969a <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>
    9901:	90                   	nop
    9902:	c9                   	leave
    9903:	c3                   	ret

0000000000009904 <_ZNSaI21VkExtensionPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9904:	55                   	push   %rbp
    9905:	48 89 e5             	mov    %rsp,%rbp
    9908:	48 83 ec 10          	sub    $0x10,%rsp
    990c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9914:	48 89 c7             	mov    %rax,%rdi
    9917:	e8 0a 0e 00 00       	call   a726 <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1Ev>
    991c:	90                   	nop
    991d:	c9                   	leave
    991e:	c3                   	ret
    991f:	90                   	nop

0000000000009920 <_ZNSaI21VkExtensionPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    9920:	55                   	push   %rbp
    9921:	48 89 e5             	mov    %rsp,%rbp
    9924:	48 83 ec 10          	sub    $0x10,%rsp
    9928:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    992c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9930:	48 89 c7             	mov    %rax,%rdi
    9933:	e8 fa 0d 00 00       	call   a732 <_ZNSt15__new_allocatorI21VkExtensionPropertiesED1Ev>
    9938:	90                   	nop
    9939:	c9                   	leave
    993a:	c3                   	ret
    993b:	90                   	nop

000000000000993c <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    993c:	55                   	push   %rbp
    993d:	48 89 e5             	mov    %rsp,%rbp
    9940:	53                   	push   %rbx
    9941:	48 83 ec 28          	sub    $0x28,%rsp
    9945:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9949:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    994d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    9951:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9955:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9959:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    995d:	48 89 d6             	mov    %rdx,%rsi
    9960:	48 89 c7             	mov    %rax,%rdi
    9963:	e8 d5 0d 00 00       	call   a73d <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    9968:	48 89 c1             	mov    %rax,%rcx
    996b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    996f:	48 89 c2             	mov    %rax,%rdx
    9972:	48 89 ce             	mov    %rcx,%rsi
    9975:	48 89 df             	mov    %rbx,%rdi
    9978:	e8 21 0e 00 00       	call   a79e <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    997d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9985:	48 89 d6             	mov    %rdx,%rsi
    9988:	48 89 c7             	mov    %rax,%rdi
    998b:	e8 6c 0e 00 00       	call   a7fc <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE21_M_default_initializeEm>
    9990:	eb 1a                	jmp    99ac <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_+0x70>
    9992:	48 89 c3             	mov    %rax,%rbx
    9995:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9999:	48 89 c7             	mov    %rax,%rdi
    999c:	e8 79 00 00 00       	call   9a1a <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>
    99a1:	48 89 d8             	mov    %rbx,%rax
    99a4:	48 89 c7             	mov    %rax,%rdi
    99a7:	e8 c4 af ff ff       	call   4970 <_Unwind_Resume@plt>
    99ac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    99b0:	c9                   	leave
    99b1:	c3                   	ret

00000000000099b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    99b2:	55                   	push   %rbp
    99b3:	48 89 e5             	mov    %rsp,%rbp
    99b6:	48 83 ec 10          	sub    $0x10,%rsp
    99ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    99be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99c2:	48 89 c7             	mov    %rax,%rdi
    99c5:	e8 72 0e 00 00       	call   a83c <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    99ca:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    99cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99d1:	48 8b 48 08          	mov    0x8(%rax),%rcx
    99d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99d9:	48 8b 00             	mov    (%rax),%rax
    99dc:	48 89 ce             	mov    %rcx,%rsi
    99df:	48 89 c7             	mov    %rax,%rdi
    99e2:	e8 63 0e 00 00       	call   a84a <_ZSt8_DestroyIP21VkExtensionPropertiesS0_EvT_S2_RSaIT0_E>
      }
    99e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99eb:	48 89 c7             	mov    %rax,%rdi
    99ee:	e8 27 00 00 00       	call   9a1a <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>
    99f3:	90                   	nop
    99f4:	c9                   	leave
    99f5:	c3                   	ret

00000000000099f6 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    99f6:	55                   	push   %rbp
    99f7:	48 89 e5             	mov    %rsp,%rbp
    99fa:	48 83 ec 10          	sub    $0x10,%rsp
    99fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    9a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a06:	48 8b 10             	mov    (%rax),%rdx
    9a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a0d:	48 89 d6             	mov    %rdx,%rsi
    9a10:	48 89 c7             	mov    %rax,%rdi
    9a13:	e8 5c 0e 00 00       	call   a874 <_ZNKSt6vectorI21VkExtensionPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    9a18:	c9                   	leave
    9a19:	c3                   	ret

0000000000009a1a <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    9a1a:	55                   	push   %rbp
    9a1b:	48 89 e5             	mov    %rsp,%rbp
    9a1e:	48 83 ec 10          	sub    $0x10,%rsp
    9a22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a2a:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a32:	48 8b 00             	mov    (%rax),%rax
    9a35:	48 29 c2             	sub    %rax,%rdx
    9a38:	48 c1 fa 02          	sar    $0x2,%rdx
    9a3c:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
    9a43:	fc c0 0f 
    9a46:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    9a4a:	48 89 c2             	mov    %rax,%rdx
    9a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a51:	48 8b 08             	mov    (%rax),%rcx
    9a54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a58:	48 89 ce             	mov    %rcx,%rsi
    9a5b:	48 89 c7             	mov    %rax,%rdi
    9a5e:	e8 49 0e 00 00       	call   a8ac <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    9a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a67:	48 89 c7             	mov    %rax,%rdi
    9a6a:	e8 47 fc ff ff       	call   96b6 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>
    9a6f:	90                   	nop
    9a70:	c9                   	leave
    9a71:	c3                   	ret

0000000000009a72 <_ZNSaIPKcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9a72:	55                   	push   %rbp
    9a73:	48 89 e5             	mov    %rsp,%rbp
    9a76:	48 83 ec 10          	sub    $0x10,%rsp
    9a7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a82:	48 89 c7             	mov    %rax,%rdi
    9a85:	e8 58 0e 00 00       	call   a8e2 <_ZNSt15__new_allocatorIPKcEC1Ev>
    9a8a:	90                   	nop
    9a8b:	c9                   	leave
    9a8c:	c3                   	ret
    9a8d:	90                   	nop

0000000000009a8e <_ZNSaIPKcED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    9a8e:	55                   	push   %rbp
    9a8f:	48 89 e5             	mov    %rsp,%rbp
    9a92:	48 83 ec 10          	sub    $0x10,%rsp
    9a96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a9e:	48 89 c7             	mov    %rax,%rdi
    9aa1:	e8 48 0e 00 00       	call   a8ee <_ZNSt15__new_allocatorIPKcED1Ev>
    9aa6:	90                   	nop
    9aa7:	c9                   	leave
    9aa8:	c3                   	ret
    9aa9:	90                   	nop

0000000000009aaa <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    9aaa:	55                   	push   %rbp
    9aab:	48 89 e5             	mov    %rsp,%rbp
    9aae:	53                   	push   %rbx
    9aaf:	48 83 ec 28          	sub    $0x28,%rsp
    9ab3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9ab7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9abb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    9abf:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9ac3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9ac7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9acb:	48 89 d6             	mov    %rdx,%rsi
    9ace:	48 89 c7             	mov    %rax,%rdi
    9ad1:	e8 23 0e 00 00       	call   a8f9 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
    9ad6:	48 89 c1             	mov    %rax,%rcx
    9ad9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9add:	48 89 c2             	mov    %rax,%rdx
    9ae0:	48 89 ce             	mov    %rcx,%rsi
    9ae3:	48 89 df             	mov    %rbx,%rdi
    9ae6:	e8 6f 0e 00 00       	call   a95a <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    9aeb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9aef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9af3:	48 89 d6             	mov    %rdx,%rsi
    9af6:	48 89 c7             	mov    %rax,%rdi
    9af9:	e8 ba 0e 00 00       	call   a9b8 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>
    9afe:	eb 1a                	jmp    9b1a <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_+0x70>
    9b00:	48 89 c3             	mov    %rax,%rbx
    9b03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b07:	48 89 c7             	mov    %rax,%rdi
    9b0a:	e8 31 00 00 00       	call   9b40 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
    9b0f:	48 89 d8             	mov    %rbx,%rax
    9b12:	48 89 c7             	mov    %rax,%rdi
    9b15:	e8 56 ae ff ff       	call   4970 <_Unwind_Resume@plt>
    9b1a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9b1e:	c9                   	leave
    9b1f:	c3                   	ret

0000000000009b20 <_ZNSt6vectorIPKcSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    9b20:	55                   	push   %rbp
    9b21:	48 89 e5             	mov    %rsp,%rbp
    9b24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9b28:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    9b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b30:	48 8b 00             	mov    (%rax),%rax
    9b33:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    9b37:	48 c1 e2 03          	shl    $0x3,%rdx
    9b3b:	48 01 d0             	add    %rdx,%rax
      }
    9b3e:	5d                   	pop    %rbp
    9b3f:	c3                   	ret

0000000000009b40 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    9b40:	55                   	push   %rbp
    9b41:	48 89 e5             	mov    %rsp,%rbp
    9b44:	48 83 ec 10          	sub    $0x10,%rsp
    9b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b50:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9b54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b58:	48 8b 00             	mov    (%rax),%rax
    9b5b:	48 29 c2             	sub    %rax,%rdx
    9b5e:	48 89 d0             	mov    %rdx,%rax
    9b61:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    9b65:	48 89 c2             	mov    %rax,%rdx
    9b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b6c:	48 8b 08             	mov    (%rax),%rcx
    9b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b73:	48 89 ce             	mov    %rcx,%rsi
    9b76:	48 89 c7             	mov    %rax,%rdi
    9b79:	e8 ae 0e 00 00       	call   aa2c <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      }
    9b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b82:	48 89 c7             	mov    %rax,%rdi
    9b85:	e8 48 fb ff ff       	call   96d2 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
    9b8a:	90                   	nop
    9b8b:	c9                   	leave
    9b8c:	c3                   	ret
    9b8d:	90                   	nop

0000000000009b8e <_ZNSaIP18VkPhysicalDevice_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9b8e:	55                   	push   %rbp
    9b8f:	48 89 e5             	mov    %rsp,%rbp
    9b92:	48 83 ec 10          	sub    $0x10,%rsp
    9b96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b9e:	48 89 c7             	mov    %rax,%rdi
    9ba1:	e8 bc 0e 00 00       	call   aa62 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1Ev>
    9ba6:	90                   	nop
    9ba7:	c9                   	leave
    9ba8:	c3                   	ret
    9ba9:	90                   	nop

0000000000009baa <_ZNSaIP18VkPhysicalDevice_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    9baa:	55                   	push   %rbp
    9bab:	48 89 e5             	mov    %rsp,%rbp
    9bae:	48 83 ec 10          	sub    $0x10,%rsp
    9bb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9bba:	48 89 c7             	mov    %rax,%rdi
    9bbd:	e8 ac 0e 00 00       	call   aa6e <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TED1Ev>
    9bc2:	90                   	nop
    9bc3:	c9                   	leave
    9bc4:	c3                   	ret
    9bc5:	90                   	nop

0000000000009bc6 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    9bc6:	55                   	push   %rbp
    9bc7:	48 89 e5             	mov    %rsp,%rbp
    9bca:	53                   	push   %rbx
    9bcb:	48 83 ec 28          	sub    $0x28,%rsp
    9bcf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9bd3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9bd7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    9bdb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9bdf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9be3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9be7:	48 89 d6             	mov    %rdx,%rsi
    9bea:	48 89 c7             	mov    %rax,%rdi
    9bed:	e8 87 0e 00 00       	call   aa79 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    9bf2:	48 89 c1             	mov    %rax,%rcx
    9bf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bf9:	48 89 c2             	mov    %rax,%rdx
    9bfc:	48 89 ce             	mov    %rcx,%rsi
    9bff:	48 89 df             	mov    %rbx,%rdi
    9c02:	e8 d3 0e 00 00       	call   aada <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    9c07:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9c0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c0f:	48 89 d6             	mov    %rdx,%rsi
    9c12:	48 89 c7             	mov    %rax,%rdi
    9c15:	e8 1e 0f 00 00       	call   ab38 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE21_M_default_initializeEm>
    9c1a:	eb 1a                	jmp    9c36 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_+0x70>
    9c1c:	48 89 c3             	mov    %rax,%rbx
    9c1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c23:	48 89 c7             	mov    %rax,%rdi
    9c26:	e8 79 00 00 00       	call   9ca4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    9c2b:	48 89 d8             	mov    %rbx,%rax
    9c2e:	48 89 c7             	mov    %rax,%rdi
    9c31:	e8 3a ad ff ff       	call   4970 <_Unwind_Resume@plt>
    9c36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9c3a:	c9                   	leave
    9c3b:	c3                   	ret

0000000000009c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    9c3c:	55                   	push   %rbp
    9c3d:	48 89 e5             	mov    %rsp,%rbp
    9c40:	48 83 ec 10          	sub    $0x10,%rsp
    9c44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    9c48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c4c:	48 89 c7             	mov    %rax,%rdi
    9c4f:	e8 24 0f 00 00       	call   ab78 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
    9c54:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9c57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c5b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c63:	48 8b 00             	mov    (%rax),%rax
    9c66:	48 89 ce             	mov    %rcx,%rsi
    9c69:	48 89 c7             	mov    %rax,%rdi
    9c6c:	e8 15 0f 00 00       	call   ab86 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
      }
    9c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c75:	48 89 c7             	mov    %rax,%rdi
    9c78:	e8 27 00 00 00       	call   9ca4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    9c7d:	90                   	nop
    9c7e:	c9                   	leave
    9c7f:	c3                   	ret

0000000000009c80 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    9c80:	55                   	push   %rbp
    9c81:	48 89 e5             	mov    %rsp,%rbp
    9c84:	48 83 ec 10          	sub    $0x10,%rsp
    9c88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    9c8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c90:	48 8b 10             	mov    (%rax),%rdx
    9c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9c97:	48 89 d6             	mov    %rdx,%rsi
    9c9a:	48 89 c7             	mov    %rax,%rdi
    9c9d:	e8 0e 0f 00 00       	call   abb0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    9ca2:	c9                   	leave
    9ca3:	c3                   	ret

0000000000009ca4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    9ca4:	55                   	push   %rbp
    9ca5:	48 89 e5             	mov    %rsp,%rbp
    9ca8:	48 83 ec 10          	sub    $0x10,%rsp
    9cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cb4:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9cb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cbc:	48 8b 00             	mov    (%rax),%rax
    9cbf:	48 29 c2             	sub    %rax,%rdx
    9cc2:	48 89 d0             	mov    %rdx,%rax
    9cc5:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    9cc9:	48 89 c2             	mov    %rax,%rdx
    9ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cd0:	48 8b 08             	mov    (%rax),%rcx
    9cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cd7:	48 89 ce             	mov    %rcx,%rsi
    9cda:	48 89 c7             	mov    %rax,%rdi
    9cdd:	e8 06 0f 00 00       	call   abe8 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    9ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ce6:	48 89 c7             	mov    %rax,%rdi
    9ce9:	e8 00 fa ff ff       	call   96ee <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
    9cee:	90                   	nop
    9cef:	c9                   	leave
    9cf0:	c3                   	ret
    9cf1:	90                   	nop

0000000000009cf2 <_ZNSaI23VkQueueFamilyPropertiesEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9cf2:	55                   	push   %rbp
    9cf3:	48 89 e5             	mov    %rsp,%rbp
    9cf6:	48 83 ec 10          	sub    $0x10,%rsp
    9cfa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d02:	48 89 c7             	mov    %rax,%rdi
    9d05:	e8 14 0f 00 00       	call   ac1e <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1Ev>
    9d0a:	90                   	nop
    9d0b:	c9                   	leave
    9d0c:	c3                   	ret
    9d0d:	90                   	nop

0000000000009d0e <_ZNSaI23VkQueueFamilyPropertiesED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    9d0e:	55                   	push   %rbp
    9d0f:	48 89 e5             	mov    %rsp,%rbp
    9d12:	48 83 ec 10          	sub    $0x10,%rsp
    9d16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9d1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d1e:	48 89 c7             	mov    %rax,%rdi
    9d21:	e8 04 0f 00 00       	call   ac2a <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED1Ev>
    9d26:	90                   	nop
    9d27:	c9                   	leave
    9d28:	c3                   	ret
    9d29:	90                   	nop

0000000000009d2a <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    9d2a:	55                   	push   %rbp
    9d2b:	48 89 e5             	mov    %rsp,%rbp
    9d2e:	53                   	push   %rbx
    9d2f:	48 83 ec 28          	sub    $0x28,%rsp
    9d33:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d37:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9d3b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    9d3f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9d43:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9d47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9d4b:	48 89 d6             	mov    %rdx,%rsi
    9d4e:	48 89 c7             	mov    %rax,%rdi
    9d51:	e8 df 0e 00 00       	call   ac35 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>
    9d56:	48 89 c1             	mov    %rax,%rcx
    9d59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9d5d:	48 89 c2             	mov    %rax,%rdx
    9d60:	48 89 ce             	mov    %rcx,%rsi
    9d63:	48 89 df             	mov    %rbx,%rdi
    9d66:	e8 2b 0f 00 00       	call   ac96 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    9d6b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9d6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d73:	48 89 d6             	mov    %rdx,%rsi
    9d76:	48 89 c7             	mov    %rax,%rdi
    9d79:	e8 76 0f 00 00       	call   acf4 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE21_M_default_initializeEm>
    9d7e:	eb 1a                	jmp    9d9a <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_+0x70>
    9d80:	48 89 c3             	mov    %rax,%rbx
    9d83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d87:	48 89 c7             	mov    %rax,%rdi
    9d8a:	e8 79 00 00 00       	call   9e08 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    9d8f:	48 89 d8             	mov    %rbx,%rax
    9d92:	48 89 c7             	mov    %rax,%rdi
    9d95:	e8 d6 ab ff ff       	call   4970 <_Unwind_Resume@plt>
    9d9a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9d9e:	c9                   	leave
    9d9f:	c3                   	ret

0000000000009da0 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    9da0:	55                   	push   %rbp
    9da1:	48 89 e5             	mov    %rsp,%rbp
    9da4:	48 83 ec 10          	sub    $0x10,%rsp
    9da8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    9dac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9db0:	48 89 c7             	mov    %rax,%rdi
    9db3:	e8 7c 0f 00 00       	call   ad34 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    9db8:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9dbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dbf:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9dc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dc7:	48 8b 00             	mov    (%rax),%rax
    9dca:	48 89 ce             	mov    %rcx,%rsi
    9dcd:	48 89 c7             	mov    %rax,%rdi
    9dd0:	e8 6d 0f 00 00       	call   ad42 <_ZSt8_DestroyIP23VkQueueFamilyPropertiesS0_EvT_S2_RSaIT0_E>
      }
    9dd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dd9:	48 89 c7             	mov    %rax,%rdi
    9ddc:	e8 27 00 00 00       	call   9e08 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>
    9de1:	90                   	nop
    9de2:	c9                   	leave
    9de3:	c3                   	ret

0000000000009de4 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    9de4:	55                   	push   %rbp
    9de5:	48 89 e5             	mov    %rsp,%rbp
    9de8:	48 83 ec 10          	sub    $0x10,%rsp
    9dec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    9df0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9df4:	48 8b 10             	mov    (%rax),%rdx
    9df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9dfb:	48 89 d6             	mov    %rdx,%rsi
    9dfe:	48 89 c7             	mov    %rax,%rdi
    9e01:	e8 66 0f 00 00       	call   ad6c <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    9e06:	c9                   	leave
    9e07:	c3                   	ret

0000000000009e08 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    9e08:	55                   	push   %rbp
    9e09:	48 89 e5             	mov    %rsp,%rbp
    9e0c:	48 83 ec 10          	sub    $0x10,%rsp
    9e10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    9e14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e18:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9e1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e20:	48 8b 00             	mov    (%rax),%rax
    9e23:	48 29 c2             	sub    %rax,%rdx
    9e26:	48 c1 fa 03          	sar    $0x3,%rdx
    9e2a:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    9e31:	aa aa aa 
    9e34:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    9e38:	48 89 c2             	mov    %rax,%rdx
    9e3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e3f:	48 8b 08             	mov    (%rax),%rcx
    9e42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e46:	48 89 ce             	mov    %rcx,%rsi
    9e49:	48 89 c7             	mov    %rax,%rdi
    9e4c:	e8 53 0f 00 00       	call   ada4 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m>
      }
    9e51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e55:	48 89 c7             	mov    %rax,%rdi
    9e58:	e8 ad f8 ff ff       	call   970a <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>
    9e5d:	90                   	nop
    9e5e:	c9                   	leave
    9e5f:	c3                   	ret

0000000000009e60 <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    9e60:	55                   	push   %rbp
    9e61:	48 89 e5             	mov    %rsp,%rbp
    9e64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9e68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e6c:	48 8b 50 08          	mov    0x8(%rax),%rdx
    9e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e74:	48 8b 00             	mov    (%rax),%rax
    9e77:	48 29 c2             	sub    %rax,%rdx
    9e7a:	48 c1 fa 03          	sar    $0x3,%rdx
    9e7e:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    9e85:	aa aa aa 
    9e88:	48 0f af c2          	imul   %rdx,%rax
    9e8c:	5d                   	pop    %rbp
    9e8d:	c3                   	ret

0000000000009e8e <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    9e8e:	55                   	push   %rbp
    9e8f:	48 89 e5             	mov    %rsp,%rbp
    9e92:	48 83 ec 10          	sub    $0x10,%rsp
    9e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e9e:	48 89 c7             	mov    %rax,%rdi
    9ea1:	e8 34 0f 00 00       	call   adda <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>
    9ea6:	90                   	nop
    9ea7:	c9                   	leave
    9ea8:	c3                   	ret
    9ea9:	90                   	nop

0000000000009eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    9eaa:	55                   	push   %rbp
    9eab:	48 89 e5             	mov    %rsp,%rbp
    9eae:	48 83 ec 10          	sub    $0x10,%rsp
    9eb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9eb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9eba:	48 89 c7             	mov    %rax,%rdi
    9ebd:	e8 24 0f 00 00       	call   ade6 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    9ec2:	90                   	nop
    9ec3:	c9                   	leave
    9ec4:	c3                   	ret
    9ec5:	90                   	nop

0000000000009ec6 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    9ec6:	55                   	push   %rbp
    9ec7:	48 89 e5             	mov    %rsp,%rbp
    9eca:	53                   	push   %rbx
    9ecb:	48 83 ec 28          	sub    $0x28,%rsp
    9ecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9ed3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9ed7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    9edb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9edf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9ee3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ee7:	48 89 d6             	mov    %rdx,%rsi
    9eea:	48 89 c7             	mov    %rax,%rdi
    9eed:	e8 ff 0e 00 00       	call   adf1 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_>
    9ef2:	48 89 c1             	mov    %rax,%rcx
    9ef5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ef9:	48 89 c2             	mov    %rax,%rdx
    9efc:	48 89 ce             	mov    %rcx,%rsi
    9eff:	48 89 df             	mov    %rbx,%rdi
    9f02:	e8 4b 0f 00 00       	call   ae52 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>
      { _M_default_initialize(__n); }
    9f07:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9f0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f0f:	48 89 d6             	mov    %rdx,%rsi
    9f12:	48 89 c7             	mov    %rax,%rdi
    9f15:	e8 96 0f 00 00       	call   aeb0 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE21_M_default_initializeEm>
    9f1a:	eb 1a                	jmp    9f36 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_+0x70>
    9f1c:	48 89 c3             	mov    %rax,%rbx
    9f1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f23:	48 89 c7             	mov    %rax,%rdi
    9f26:	e8 bb 01 00 00       	call   a0e6 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    9f2b:	48 89 d8             	mov    %rbx,%rax
    9f2e:	48 89 c7             	mov    %rax,%rdi
    9f31:	e8 3a aa ff ff       	call   4970 <_Unwind_Resume@plt>
    9f36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9f3a:	c9                   	leave
    9f3b:	c3                   	ret

0000000000009f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    9f3c:	55                   	push   %rbp
    9f3d:	48 89 e5             	mov    %rsp,%rbp
    9f40:	48 83 ec 10          	sub    $0x10,%rsp
    9f44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    9f48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f4c:	48 89 c7             	mov    %rax,%rdi
    9f4f:	e8 9c 0f 00 00       	call   aef0 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>
    9f54:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    9f57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f5b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    9f5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f63:	48 8b 00             	mov    (%rax),%rax
    9f66:	48 89 ce             	mov    %rcx,%rsi
    9f69:	48 89 c7             	mov    %rax,%rdi
    9f6c:	e8 8d 0f 00 00       	call   aefe <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesES2_EvT_S4_RSaIT0_E>
      }
    9f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9f75:	48 89 c7             	mov    %rax,%rdi
    9f78:	e8 69 01 00 00       	call   a0e6 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    9f7d:	90                   	nop
    9f7e:	c9                   	leave
    9f7f:	c3                   	ret

0000000000009f80 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    9f80:	55                   	push   %rbp
    9f81:	48 89 e5             	mov    %rsp,%rbp
    9f84:	48 83 ec 20          	sub    $0x20,%rsp
    9f88:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    9f8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9f90:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    9f94:	48 89 d6             	mov    %rdx,%rsi
    9f97:	48 89 c7             	mov    %rax,%rdi
    9f9a:	e8 89 0f 00 00       	call   af28 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    9f9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9fa3:	c9                   	leave
    9fa4:	c3                   	ret
    9fa5:	90                   	nop

0000000000009fa6 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    9fa6:	55                   	push   %rbp
    9fa7:	48 89 e5             	mov    %rsp,%rbp
    9faa:	48 83 ec 20          	sub    $0x20,%rsp
    9fae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    9fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fb6:	48 8d 50 08          	lea    0x8(%rax),%rdx
    9fba:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    9fbe:	48 89 d6             	mov    %rdx,%rsi
    9fc1:	48 89 c7             	mov    %rax,%rdi
    9fc4:	e8 5f 0f 00 00       	call   af28 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    9fc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9fcd:	c9                   	leave
    9fce:	c3                   	ret

0000000000009fcf <_ZN9__gnu_cxxneIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    9fcf:	55                   	push   %rbp
    9fd0:	48 89 e5             	mov    %rsp,%rbp
    9fd3:	53                   	push   %rbx
    9fd4:	48 83 ec 18          	sub    $0x18,%rsp
    9fd8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9fdc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    9fe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fe4:	48 89 c7             	mov    %rax,%rdi
    9fe7:	e8 5a 0f 00 00       	call   af46 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    9fec:	48 8b 18             	mov    (%rax),%rbx
    9fef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ff3:	48 89 c7             	mov    %rax,%rdi
    9ff6:	e8 4b 0f 00 00       	call   af46 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    9ffb:	48 8b 00             	mov    (%rax),%rax
    9ffe:	48 39 c3             	cmp    %rax,%rbx
    a001:	0f 95 c0             	setne  %al
    a004:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a008:	c9                   	leave
    a009:	c3                   	ret

000000000000a00a <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    a00a:	55                   	push   %rbp
    a00b:	48 89 e5             	mov    %rsp,%rbp
    a00e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    a012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a016:	48 8b 00             	mov    (%rax),%rax
    a019:	48 8d 50 18          	lea    0x18(%rax),%rdx
    a01d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a021:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    a024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a028:	5d                   	pop    %rbp
    a029:	c3                   	ret

000000000000a02a <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    a02a:	55                   	push   %rbp
    a02b:	48 89 e5             	mov    %rsp,%rbp
    a02e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    a032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a036:	48 8b 00             	mov    (%rax),%rax
    a039:	5d                   	pop    %rbp
    a03a:	c3                   	ret
    a03b:	90                   	nop

000000000000a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    a03c:	55                   	push   %rbp
    a03d:	48 89 e5             	mov    %rsp,%rbp
    a040:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a044:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    a048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a04c:	48 8b 08             	mov    (%rax),%rcx
    a04f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a053:	48 89 d0             	mov    %rdx,%rax
    a056:	48 c1 e0 03          	shl    $0x3,%rax
    a05a:	48 29 d0             	sub    %rdx,%rax
    a05d:	48 c1 e0 02          	shl    $0x2,%rax
    a061:	48 01 c8             	add    %rcx,%rax
      }
    a064:	5d                   	pop    %rbp
    a065:	c3                   	ret

000000000000a066 <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_>:
			    __not_<__and_<is_scalar<_Tp>,
					  is_same<_Tp, decay_t<_Up>>>>,
			    is_constructible<_Tp, _Up>,
			    is_assignable<_Tp&, _Up>>,
		    optional&>
	operator=(_Up&& __u)
    a066:	55                   	push   %rbp
    a067:	48 89 e5             	mov    %rsp,%rbp
    a06a:	53                   	push   %rbx
    a06b:	48 83 ec 18          	sub    $0x18,%rsp
    a06f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a073:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	noexcept(__and_v<is_nothrow_constructible<_Tp, _Up>,
			 is_nothrow_assignable<_Tp&, _Up>>)
	{
	  if (this->_M_is_engaged())
    a077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a07b:	48 89 c7             	mov    %rax,%rdi
    a07e:	e8 d1 0e 00 00       	call   af54 <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    a083:	84 c0                	test   %al,%al
    a085:	74 36                	je     a0bd <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_+0x57>
	    this->_M_get() = std::forward<_Up>(__u);
    a087:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a08b:	48 89 c7             	mov    %rax,%rdi
    a08e:	e8 17 0f 00 00       	call   afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    a093:	48 89 c3             	mov    %rax,%rbx
    a096:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a09a:	48 89 c7             	mov    %rax,%rdi
    a09d:	e8 c4 0e 00 00       	call   af66 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
    a0a2:	48 89 c1             	mov    %rax,%rcx
    a0a5:	48 8b 03             	mov    (%rbx),%rax
    a0a8:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    a0ac:	48 89 01             	mov    %rax,(%rcx)
    a0af:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    a0b3:	48 8b 43 10          	mov    0x10(%rbx),%rax
    a0b7:	48 89 41 10          	mov    %rax,0x10(%rcx)
    a0bb:	eb 1e                	jmp    a0db <_ZNSt8optionalI23VkQueueFamilyPropertiesEaSIRKS0_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS1_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES6_ISt6__and_IJSt9is_scalarIS0_ES7_IS0_NSt5decayISA_E4typeEEEEESt16is_constructibleIS0_JSA_EESt13is_assignableIRS0_SA_EEERS1_E4typeEOSA_+0x75>
	  else
	    this->_M_construct(std::forward<_Up>(__u));
    a0bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a0c1:	48 89 c7             	mov    %rax,%rdi
    a0c4:	e8 e1 0e 00 00       	call   afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    a0c9:	48 89 c2             	mov    %rax,%rdx
    a0cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a0d0:	48 89 d6             	mov    %rdx,%rsi
    a0d3:	48 89 c7             	mov    %rax,%rdi
    a0d6:	e8 dd 0e 00 00       	call   afb8 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE12_M_constructIJRKS0_EEEvDpOT_>

	  return *this;
    a0db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    a0df:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a0e3:	c9                   	leave
    a0e4:	c3                   	ret
    a0e5:	90                   	nop

000000000000a0e6 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    a0e6:	55                   	push   %rbp
    a0e7:	48 89 e5             	mov    %rsp,%rbp
    a0ea:	48 83 ec 10          	sub    $0x10,%rsp
    a0ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a0f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0f6:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a0fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0fe:	48 8b 00             	mov    (%rax),%rax
    a101:	48 29 c2             	sub    %rax,%rdx
    a104:	48 c1 fa 02          	sar    $0x2,%rdx
    a108:	48 b8 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rax
    a10f:	db b6 6d 
    a112:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
    a116:	48 89 c2             	mov    %rax,%rdx
    a119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a11d:	48 8b 08             	mov    (%rax),%rcx
    a120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a124:	48 89 ce             	mov    %rcx,%rsi
    a127:	48 89 c7             	mov    %rax,%rdi
    a12a:	e8 e3 0e 00 00       	call   b012 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m>
      }
    a12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a133:	48 89 c7             	mov    %rax,%rdi
    a136:	e8 eb f5 ff ff       	call   9726 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>
    a13b:	90                   	nop
    a13c:	c9                   	leave
    a13d:	c3                   	ret

000000000000a13e <_ZNSaI18VkSurfaceFormatKHREC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    a13e:	55                   	push   %rbp
    a13f:	48 89 e5             	mov    %rsp,%rbp
    a142:	48 83 ec 10          	sub    $0x10,%rsp
    a146:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a14a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a14e:	48 89 c7             	mov    %rax,%rdi
    a151:	e8 f2 0e 00 00       	call   b048 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1Ev>
    a156:	90                   	nop
    a157:	c9                   	leave
    a158:	c3                   	ret
    a159:	90                   	nop

000000000000a15a <_ZNSaI18VkSurfaceFormatKHRED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    a15a:	55                   	push   %rbp
    a15b:	48 89 e5             	mov    %rsp,%rbp
    a15e:	48 83 ec 10          	sub    $0x10,%rsp
    a162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a16a:	48 89 c7             	mov    %rax,%rdi
    a16d:	e8 e2 0e 00 00       	call   b054 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRED1Ev>
    a172:	90                   	nop
    a173:	c9                   	leave
    a174:	c3                   	ret
    a175:	90                   	nop

000000000000a176 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    a176:	55                   	push   %rbp
    a177:	48 89 e5             	mov    %rsp,%rbp
    a17a:	53                   	push   %rbx
    a17b:	48 83 ec 28          	sub    $0x28,%rsp
    a17f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a183:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a187:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    a18b:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a18f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a193:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a197:	48 89 d6             	mov    %rdx,%rsi
    a19a:	48 89 c7             	mov    %rax,%rdi
    a19d:	e8 bd 0e 00 00       	call   b05f <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_>
    a1a2:	48 89 c1             	mov    %rax,%rcx
    a1a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a1a9:	48 89 c2             	mov    %rax,%rdx
    a1ac:	48 89 ce             	mov    %rcx,%rsi
    a1af:	48 89 df             	mov    %rbx,%rdi
    a1b2:	e8 09 0f 00 00       	call   b0c0 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    a1b7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a1bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1bf:	48 89 d6             	mov    %rdx,%rsi
    a1c2:	48 89 c7             	mov    %rax,%rdi
    a1c5:	e8 54 0f 00 00       	call   b11e <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE21_M_default_initializeEm>
    a1ca:	eb 1a                	jmp    a1e6 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_+0x70>
    a1cc:	48 89 c3             	mov    %rax,%rbx
    a1cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1d3:	48 89 c7             	mov    %rax,%rdi
    a1d6:	e8 79 00 00 00       	call   a254 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    a1db:	48 89 d8             	mov    %rbx,%rax
    a1de:	48 89 c7             	mov    %rax,%rdi
    a1e1:	e8 8a a7 ff ff       	call   4970 <_Unwind_Resume@plt>
    a1e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a1ea:	c9                   	leave
    a1eb:	c3                   	ret

000000000000a1ec <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    a1ec:	55                   	push   %rbp
    a1ed:	48 89 e5             	mov    %rsp,%rbp
    a1f0:	48 83 ec 10          	sub    $0x10,%rsp
    a1f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    a1f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1fc:	48 89 c7             	mov    %rax,%rdi
    a1ff:	e8 5a 0f 00 00       	call   b15e <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    a204:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    a207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a20b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    a20f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a213:	48 8b 00             	mov    (%rax),%rax
    a216:	48 89 ce             	mov    %rcx,%rsi
    a219:	48 89 c7             	mov    %rax,%rdi
    a21c:	e8 4b 0f 00 00       	call   b16c <_ZSt8_DestroyIP18VkSurfaceFormatKHRS0_EvT_S2_RSaIT0_E>
      }
    a221:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a225:	48 89 c7             	mov    %rax,%rdi
    a228:	e8 27 00 00 00       	call   a254 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    a22d:	90                   	nop
    a22e:	c9                   	leave
    a22f:	c3                   	ret

000000000000a230 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    a230:	55                   	push   %rbp
    a231:	48 89 e5             	mov    %rsp,%rbp
    a234:	48 83 ec 10          	sub    $0x10,%rsp
    a238:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    a23c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a240:	48 8b 10             	mov    (%rax),%rdx
    a243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a247:	48 89 d6             	mov    %rdx,%rsi
    a24a:	48 89 c7             	mov    %rax,%rdi
    a24d:	e8 44 0f 00 00       	call   b196 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    a252:	c9                   	leave
    a253:	c3                   	ret

000000000000a254 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    a254:	55                   	push   %rbp
    a255:	48 89 e5             	mov    %rsp,%rbp
    a258:	48 83 ec 10          	sub    $0x10,%rsp
    a25c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a264:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a26c:	48 8b 00             	mov    (%rax),%rax
    a26f:	48 29 c2             	sub    %rax,%rdx
    a272:	48 89 d0             	mov    %rdx,%rax
    a275:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    a279:	48 89 c2             	mov    %rax,%rdx
    a27c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a280:	48 8b 08             	mov    (%rax),%rcx
    a283:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a287:	48 89 ce             	mov    %rcx,%rsi
    a28a:	48 89 c7             	mov    %rax,%rdi
    a28d:	e8 3c 0f 00 00       	call   b1ce <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m>
      }
    a292:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a296:	48 89 c7             	mov    %rax,%rdi
    a299:	e8 a4 f4 ff ff       	call   9742 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>
    a29e:	90                   	nop
    a29f:	c9                   	leave
    a2a0:	c3                   	ret
    a2a1:	90                   	nop

000000000000a2a2 <_ZNSaI16VkPresentModeKHREC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    a2a2:	55                   	push   %rbp
    a2a3:	48 89 e5             	mov    %rsp,%rbp
    a2a6:	48 83 ec 10          	sub    $0x10,%rsp
    a2aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a2ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2b2:	48 89 c7             	mov    %rax,%rdi
    a2b5:	e8 4a 0f 00 00       	call   b204 <_ZNSt15__new_allocatorI16VkPresentModeKHREC1Ev>
    a2ba:	90                   	nop
    a2bb:	c9                   	leave
    a2bc:	c3                   	ret
    a2bd:	90                   	nop

000000000000a2be <_ZNSaI16VkPresentModeKHRED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    a2be:	55                   	push   %rbp
    a2bf:	48 89 e5             	mov    %rsp,%rbp
    a2c2:	48 83 ec 10          	sub    $0x10,%rsp
    a2c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a2ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a2ce:	48 89 c7             	mov    %rax,%rdi
    a2d1:	e8 3a 0f 00 00       	call   b210 <_ZNSt15__new_allocatorI16VkPresentModeKHRED1Ev>
    a2d6:	90                   	nop
    a2d7:	c9                   	leave
    a2d8:	c3                   	ret
    a2d9:	90                   	nop

000000000000a2da <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    a2da:	55                   	push   %rbp
    a2db:	48 89 e5             	mov    %rsp,%rbp
    a2de:	53                   	push   %rbx
    a2df:	48 83 ec 28          	sub    $0x28,%rsp
    a2e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a2e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a2eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    a2ef:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a2f3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a2f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a2fb:	48 89 d6             	mov    %rdx,%rsi
    a2fe:	48 89 c7             	mov    %rax,%rdi
    a301:	e8 15 0f 00 00       	call   b21b <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_>
    a306:	48 89 c1             	mov    %rax,%rcx
    a309:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a30d:	48 89 c2             	mov    %rax,%rdx
    a310:	48 89 ce             	mov    %rcx,%rsi
    a313:	48 89 df             	mov    %rbx,%rdi
    a316:	e8 61 0f 00 00       	call   b27c <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>
      { _M_default_initialize(__n); }
    a31b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a31f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a323:	48 89 d6             	mov    %rdx,%rsi
    a326:	48 89 c7             	mov    %rax,%rdi
    a329:	e8 ac 0f 00 00       	call   b2da <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE21_M_default_initializeEm>
    a32e:	eb 1a                	jmp    a34a <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EEC1EmRKS1_+0x70>
    a330:	48 89 c3             	mov    %rax,%rbx
    a333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a337:	48 89 c7             	mov    %rax,%rdi
    a33a:	e8 79 00 00 00       	call   a3b8 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>
    a33f:	48 89 d8             	mov    %rbx,%rax
    a342:	48 89 c7             	mov    %rax,%rdi
    a345:	e8 26 a6 ff ff       	call   4970 <_Unwind_Resume@plt>
    a34a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a34e:	c9                   	leave
    a34f:	c3                   	ret

000000000000a350 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    a350:	55                   	push   %rbp
    a351:	48 89 e5             	mov    %rsp,%rbp
    a354:	48 83 ec 10          	sub    $0x10,%rsp
    a358:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    a35c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a360:	48 89 c7             	mov    %rax,%rdi
    a363:	e8 b2 0f 00 00       	call   b31a <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    a368:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    a36b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a36f:	48 8b 48 08          	mov    0x8(%rax),%rcx
    a373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a377:	48 8b 00             	mov    (%rax),%rax
    a37a:	48 89 ce             	mov    %rcx,%rsi
    a37d:	48 89 c7             	mov    %rax,%rdi
    a380:	e8 a3 0f 00 00       	call   b328 <_ZSt8_DestroyIP16VkPresentModeKHRS0_EvT_S2_RSaIT0_E>
      }
    a385:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a389:	48 89 c7             	mov    %rax,%rdi
    a38c:	e8 27 00 00 00       	call   a3b8 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>
    a391:	90                   	nop
    a392:	c9                   	leave
    a393:	c3                   	ret

000000000000a394 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    a394:	55                   	push   %rbp
    a395:	48 89 e5             	mov    %rsp,%rbp
    a398:	48 83 ec 10          	sub    $0x10,%rsp
    a39c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    a3a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3a4:	48 8b 10             	mov    (%rax),%rdx
    a3a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3ab:	48 89 d6             	mov    %rdx,%rsi
    a3ae:	48 89 c7             	mov    %rax,%rdi
    a3b1:	e8 9c 0f 00 00       	call   b352 <_ZNKSt6vectorI16VkPresentModeKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
    a3b6:	c9                   	leave
    a3b7:	c3                   	ret

000000000000a3b8 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    a3b8:	55                   	push   %rbp
    a3b9:	48 89 e5             	mov    %rsp,%rbp
    a3bc:	48 83 ec 10          	sub    $0x10,%rsp
    a3c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a3c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3c8:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a3cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3d0:	48 8b 00             	mov    (%rax),%rax
    a3d3:	48 29 c2             	sub    %rax,%rdx
    a3d6:	48 89 d0             	mov    %rdx,%rax
    a3d9:	48 c1 f8 02          	sar    $0x2,%rax
	_M_deallocate(_M_impl._M_start,
    a3dd:	48 89 c2             	mov    %rax,%rdx
    a3e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3e4:	48 8b 08             	mov    (%rax),%rcx
    a3e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3eb:	48 89 ce             	mov    %rcx,%rsi
    a3ee:	48 89 c7             	mov    %rax,%rdi
    a3f1:	e8 94 0f 00 00       	call   b38a <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m>
      }
    a3f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3fa:	48 89 c7             	mov    %rax,%rdi
    a3fd:	e8 5c f3 ff ff       	call   975e <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>
    a402:	90                   	nop
    a403:	c9                   	leave
    a404:	c3                   	ret
    a405:	90                   	nop

000000000000a406 <_ZNSaIP9VkImage_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
    a406:	55                   	push   %rbp
    a407:	48 89 e5             	mov    %rsp,%rbp
    a40a:	48 83 ec 10          	sub    $0x10,%rsp
    a40e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a416:	48 89 c7             	mov    %rax,%rdi
    a419:	e8 a2 0f 00 00       	call   b3c0 <_ZNSt15__new_allocatorIP9VkImage_TEC1Ev>
    a41e:	90                   	nop
    a41f:	c9                   	leave
    a420:	c3                   	ret
    a421:	90                   	nop

000000000000a422 <_ZNSaIP9VkImage_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
    a422:	55                   	push   %rbp
    a423:	48 89 e5             	mov    %rsp,%rbp
    a426:	48 83 ec 10          	sub    $0x10,%rsp
    a42a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a42e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a432:	48 89 c7             	mov    %rax,%rdi
    a435:	e8 92 0f 00 00       	call   b3cc <_ZNSt15__new_allocatorIP9VkImage_TED1Ev>
    a43a:	90                   	nop
    a43b:	c9                   	leave
    a43c:	c3                   	ret
    a43d:	90                   	nop

000000000000a43e <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    a43e:	55                   	push   %rbp
    a43f:	48 89 e5             	mov    %rsp,%rbp
    a442:	53                   	push   %rbx
    a443:	48 83 ec 28          	sub    $0x28,%rsp
    a447:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a44b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a44f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
    a453:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a457:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a45b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a45f:	48 89 d6             	mov    %rdx,%rsi
    a462:	48 89 c7             	mov    %rax,%rdi
    a465:	e8 6d 0f 00 00       	call   b3d7 <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_>
    a46a:	48 89 c1             	mov    %rax,%rcx
    a46d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a471:	48 89 c2             	mov    %rax,%rdx
    a474:	48 89 ce             	mov    %rcx,%rsi
    a477:	48 89 df             	mov    %rbx,%rdi
    a47a:	e8 b9 0f 00 00       	call   b438 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
    a47f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a487:	48 89 d6             	mov    %rdx,%rsi
    a48a:	48 89 c7             	mov    %rax,%rdi
    a48d:	e8 04 10 00 00       	call   b496 <_ZNSt6vectorIP9VkImage_TSaIS1_EE21_M_default_initializeEm>
    a492:	eb 1a                	jmp    a4ae <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1EmRKS2_+0x70>
    a494:	48 89 c3             	mov    %rax,%rbx
    a497:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a49b:	48 89 c7             	mov    %rax,%rdi
    a49e:	e8 79 00 00 00       	call   a51c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>
    a4a3:	48 89 d8             	mov    %rbx,%rax
    a4a6:	48 89 c7             	mov    %rax,%rdi
    a4a9:	e8 c2 a4 ff ff       	call   4970 <_Unwind_Resume@plt>
    a4ae:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a4b2:	c9                   	leave
    a4b3:	c3                   	ret

000000000000a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    a4b4:	55                   	push   %rbp
    a4b5:	48 89 e5             	mov    %rsp,%rbp
    a4b8:	48 83 ec 10          	sub    $0x10,%rsp
    a4bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
    a4c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4c4:	48 89 c7             	mov    %rax,%rdi
    a4c7:	e8 0a 10 00 00       	call   b4d6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    a4cc:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    a4cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4d3:	48 8b 48 08          	mov    0x8(%rax),%rcx
    a4d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4db:	48 8b 00             	mov    (%rax),%rax
    a4de:	48 89 ce             	mov    %rcx,%rsi
    a4e1:	48 89 c7             	mov    %rax,%rdi
    a4e4:	e8 fb 0f 00 00       	call   b4e4 <_ZSt8_DestroyIPP9VkImage_TS1_EvT_S3_RSaIT0_E>
      }
    a4e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4ed:	48 89 c7             	mov    %rax,%rdi
    a4f0:	e8 27 00 00 00       	call   a51c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>
    a4f5:	90                   	nop
    a4f6:	c9                   	leave
    a4f7:	c3                   	ret

000000000000a4f8 <_ZNSt6vectorIP9VkImage_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
    a4f8:	55                   	push   %rbp
    a4f9:	48 89 e5             	mov    %rsp,%rbp
    a4fc:	48 83 ec 10          	sub    $0x10,%rsp
    a500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    a504:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a508:	48 8b 10             	mov    (%rax),%rdx
    a50b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a50f:	48 89 d6             	mov    %rdx,%rsi
    a512:	48 89 c7             	mov    %rax,%rdi
    a515:	e8 f4 0f 00 00       	call   b50e <_ZNKSt6vectorIP9VkImage_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
    a51a:	c9                   	leave
    a51b:	c3                   	ret

000000000000a51c <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    a51c:	55                   	push   %rbp
    a51d:	48 89 e5             	mov    %rsp,%rbp
    a520:	48 83 ec 10          	sub    $0x10,%rsp
    a524:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    a528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a52c:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a534:	48 8b 00             	mov    (%rax),%rax
    a537:	48 29 c2             	sub    %rax,%rdx
    a53a:	48 89 d0             	mov    %rdx,%rax
    a53d:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
    a541:	48 89 c2             	mov    %rax,%rdx
    a544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a548:	48 8b 08             	mov    (%rax),%rcx
    a54b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a54f:	48 89 ce             	mov    %rcx,%rsi
    a552:	48 89 c7             	mov    %rax,%rdi
    a555:	e8 ec 0f 00 00       	call   b546 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m>
      }
    a55a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a55e:	48 89 c7             	mov    %rax,%rdi
    a561:	e8 14 f2 ff ff       	call   977a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>
    a566:	90                   	nop
    a567:	c9                   	leave
    a568:	c3                   	ret
    a569:	90                   	nop

000000000000a56a <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a56a:	55                   	push   %rbp
    a56b:	48 89 e5             	mov    %rsp,%rbp
    a56e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a572:	90                   	nop
    a573:	5d                   	pop    %rbp
    a574:	c3                   	ret
    a575:	90                   	nop

000000000000a576 <_ZNSt15__new_allocatorI17VkLayerPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a576:	55                   	push   %rbp
    a577:	48 89 e5             	mov    %rsp,%rbp
    a57a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a57e:	90                   	nop
    a57f:	5d                   	pop    %rbp
    a580:	c3                   	ret

000000000000a581 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    a581:	55                   	push   %rbp
    a582:	48 89 e5             	mov    %rsp,%rbp
    a585:	53                   	push   %rbx
    a586:	48 83 ec 28          	sub    $0x28,%rsp
    a58a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a58e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a592:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a596:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a59a:	48 89 d6             	mov    %rdx,%rsi
    a59d:	48 89 c7             	mov    %rax,%rdi
    a5a0:	e8 25 01 00 00       	call   a6ca <_ZNSaI17VkLayerPropertiesEC1ERKS0_>
    a5a5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a5a9:	48 89 c7             	mov    %rax,%rdi
    a5ac:	e8 ca 0f 00 00       	call   b57b <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    a5b1:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    a5b5:	0f 92 c3             	setb   %bl
    a5b8:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a5bc:	48 89 c7             	mov    %rax,%rdi
    a5bf:	e8 ee f1 ff ff       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
    a5c4:	84 db                	test   %bl,%bl
    a5c6:	74 0f                	je     a5d7 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    a5c8:	48 8d 05 b9 7d 01 00 	lea    0x17db9(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    a5cf:	48 89 c7             	mov    %rax,%rdi
    a5d2:	e8 29 9c ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    a5d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    a5db:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a5df:	c9                   	leave
    a5e0:	c3                   	ret
    a5e1:	90                   	nop

000000000000a5e2 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    a5e2:	55                   	push   %rbp
    a5e3:	48 89 e5             	mov    %rsp,%rbp
    a5e6:	53                   	push   %rbx
    a5e7:	48 83 ec 28          	sub    $0x28,%rsp
    a5eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a5ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a5f3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    a5f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a5fb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a5ff:	48 89 d6             	mov    %rdx,%rsi
    a602:	48 89 c7             	mov    %rax,%rdi
    a605:	e8 b4 0f 00 00       	call   b5be <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    a60a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a60e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a612:	48 89 d6             	mov    %rdx,%rsi
    a615:	48 89 c7             	mov    %rax,%rdi
    a618:	e8 d3 0f 00 00       	call   b5f0 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_M_create_storageEm>
    a61d:	eb 1a                	jmp    a639 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EEC1EmRKS1_+0x57>
    a61f:	48 89 c3             	mov    %rax,%rbx
    a622:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a626:	48 89 c7             	mov    %rax,%rdi
    a629:	e8 6c f0 ff ff       	call   969a <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implD1Ev>
    a62e:	48 89 d8             	mov    %rbx,%rax
    a631:	48 89 c7             	mov    %rax,%rdi
    a634:	e8 37 a3 ff ff       	call   4970 <_Unwind_Resume@plt>
    a639:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a63d:	c9                   	leave
    a63e:	c3                   	ret
    a63f:	90                   	nop

000000000000a640 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    a640:	55                   	push   %rbp
    a641:	48 89 e5             	mov    %rsp,%rbp
    a644:	48 83 ec 10          	sub    $0x10,%rsp
    a648:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a64c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    a650:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a654:	48 89 c7             	mov    %rax,%rdi
    a657:	e8 24 00 00 00       	call   a680 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    a65c:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    a65f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a663:	48 8b 00             	mov    (%rax),%rax
    a666:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a66a:	48 89 ce             	mov    %rcx,%rsi
    a66d:	48 89 c7             	mov    %rax,%rdi
    a670:	e8 dc 0f 00 00       	call   b651 <_ZSt27__uninitialized_default_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    a675:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a679:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    a67d:	90                   	nop
    a67e:	c9                   	leave
    a67f:	c3                   	ret

000000000000a680 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    a680:	55                   	push   %rbp
    a681:	48 89 e5             	mov    %rsp,%rbp
    a684:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    a688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a68c:	5d                   	pop    %rbp
    a68d:	c3                   	ret

000000000000a68e <_ZSt8_DestroyIP17VkLayerPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    a68e:	55                   	push   %rbp
    a68f:	48 89 e5             	mov    %rsp,%rbp
    a692:	48 83 ec 20          	sub    $0x20,%rsp
    a696:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a69a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a69e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    a6a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a6a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6aa:	48 89 d6             	mov    %rdx,%rsi
    a6ad:	48 89 c7             	mov    %rax,%rdi
    a6b0:	e8 c5 0f 00 00       	call   b67a <_ZSt8_DestroyIP17VkLayerPropertiesEvT_S2_>
    }
    a6b5:	90                   	nop
    a6b6:	c9                   	leave
    a6b7:	c3                   	ret

000000000000a6b8 <_ZNKSt6vectorI17VkLayerPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    a6b8:	55                   	push   %rbp
    a6b9:	48 89 e5             	mov    %rsp,%rbp
    a6bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a6c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    a6c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6c8:	5d                   	pop    %rbp
    a6c9:	c3                   	ret

000000000000a6ca <_ZNSaI17VkLayerPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    a6ca:	55                   	push   %rbp
    a6cb:	48 89 e5             	mov    %rsp,%rbp
    a6ce:	48 83 ec 10          	sub    $0x10,%rsp
    a6d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a6d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    a6da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a6de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6e2:	48 89 d6             	mov    %rdx,%rsi
    a6e5:	48 89 c7             	mov    %rax,%rdi
    a6e8:	e8 b3 0f 00 00       	call   b6a0 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1ERKS1_>
    a6ed:	90                   	nop
    a6ee:	c9                   	leave
    a6ef:	c3                   	ret

000000000000a6f0 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    a6f0:	55                   	push   %rbp
    a6f1:	48 89 e5             	mov    %rsp,%rbp
    a6f4:	48 83 ec 20          	sub    $0x20,%rsp
    a6f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a6fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a700:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    a704:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a709:	74 17                	je     a722 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    a70b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a70f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a713:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a717:	48 89 ce             	mov    %rcx,%rsi
    a71a:	48 89 c7             	mov    %rax,%rdi
    a71d:	e8 8d 0f 00 00       	call   b6af <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE10deallocateERS1_PS0_m>
      }
    a722:	90                   	nop
    a723:	c9                   	leave
    a724:	c3                   	ret
    a725:	90                   	nop

000000000000a726 <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a726:	55                   	push   %rbp
    a727:	48 89 e5             	mov    %rsp,%rbp
    a72a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a72e:	90                   	nop
    a72f:	5d                   	pop    %rbp
    a730:	c3                   	ret
    a731:	90                   	nop

000000000000a732 <_ZNSt15__new_allocatorI21VkExtensionPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a732:	55                   	push   %rbp
    a733:	48 89 e5             	mov    %rsp,%rbp
    a736:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a73a:	90                   	nop
    a73b:	5d                   	pop    %rbp
    a73c:	c3                   	ret

000000000000a73d <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    a73d:	55                   	push   %rbp
    a73e:	48 89 e5             	mov    %rsp,%rbp
    a741:	53                   	push   %rbx
    a742:	48 83 ec 28          	sub    $0x28,%rsp
    a746:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a74a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a74e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a752:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a756:	48 89 d6             	mov    %rdx,%rsi
    a759:	48 89 c7             	mov    %rax,%rdi
    a75c:	e8 25 01 00 00       	call   a886 <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>
    a761:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a765:	48 89 c7             	mov    %rax,%rdi
    a768:	e8 70 0f 00 00       	call   b6dd <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    a76d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    a771:	0f 92 c3             	setb   %bl
    a774:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a778:	48 89 c7             	mov    %rax,%rdi
    a77b:	e8 a0 f1 ff ff       	call   9920 <_ZNSaI21VkExtensionPropertiesED1Ev>
    a780:	84 db                	test   %bl,%bl
    a782:	74 0f                	je     a793 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    a784:	48 8d 05 fd 7b 01 00 	lea    0x17bfd(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    a78b:	48 89 c7             	mov    %rax,%rdi
    a78e:	e8 6d 9a ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    a793:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    a797:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a79b:	c9                   	leave
    a79c:	c3                   	ret
    a79d:	90                   	nop

000000000000a79e <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    a79e:	55                   	push   %rbp
    a79f:	48 89 e5             	mov    %rsp,%rbp
    a7a2:	53                   	push   %rbx
    a7a3:	48 83 ec 28          	sub    $0x28,%rsp
    a7a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a7ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a7af:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    a7b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7b7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a7bb:	48 89 d6             	mov    %rdx,%rsi
    a7be:	48 89 c7             	mov    %rax,%rdi
    a7c1:	e8 5a 0f 00 00       	call   b720 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    a7c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a7ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7ce:	48 89 d6             	mov    %rdx,%rsi
    a7d1:	48 89 c7             	mov    %rax,%rdi
    a7d4:	e8 79 0f 00 00       	call   b752 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_M_create_storageEm>
    a7d9:	eb 1a                	jmp    a7f5 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EEC1EmRKS1_+0x57>
    a7db:	48 89 c3             	mov    %rax,%rbx
    a7de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7e2:	48 89 c7             	mov    %rax,%rdi
    a7e5:	e8 cc ee ff ff       	call   96b6 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implD1Ev>
    a7ea:	48 89 d8             	mov    %rbx,%rax
    a7ed:	48 89 c7             	mov    %rax,%rdi
    a7f0:	e8 7b a1 ff ff       	call   4970 <_Unwind_Resume@plt>
    a7f5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a7f9:	c9                   	leave
    a7fa:	c3                   	ret
    a7fb:	90                   	nop

000000000000a7fc <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    a7fc:	55                   	push   %rbp
    a7fd:	48 89 e5             	mov    %rsp,%rbp
    a800:	48 83 ec 10          	sub    $0x10,%rsp
    a804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a808:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    a80c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a810:	48 89 c7             	mov    %rax,%rdi
    a813:	e8 24 00 00 00       	call   a83c <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    a818:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    a81b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a81f:	48 8b 00             	mov    (%rax),%rax
    a822:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a826:	48 89 ce             	mov    %rcx,%rsi
    a829:	48 89 c7             	mov    %rax,%rdi
    a82c:	e8 82 0f 00 00       	call   b7b3 <_ZSt27__uninitialized_default_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    a831:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a835:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    a839:	90                   	nop
    a83a:	c9                   	leave
    a83b:	c3                   	ret

000000000000a83c <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    a83c:	55                   	push   %rbp
    a83d:	48 89 e5             	mov    %rsp,%rbp
    a840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    a844:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a848:	5d                   	pop    %rbp
    a849:	c3                   	ret

000000000000a84a <_ZSt8_DestroyIP21VkExtensionPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    a84a:	55                   	push   %rbp
    a84b:	48 89 e5             	mov    %rsp,%rbp
    a84e:	48 83 ec 20          	sub    $0x20,%rsp
    a852:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a856:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a85a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    a85e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a862:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a866:	48 89 d6             	mov    %rdx,%rsi
    a869:	48 89 c7             	mov    %rax,%rdi
    a86c:	e8 6b 0f 00 00       	call   b7dc <_ZSt8_DestroyIP21VkExtensionPropertiesEvT_S2_>
    }
    a871:	90                   	nop
    a872:	c9                   	leave
    a873:	c3                   	ret

000000000000a874 <_ZNKSt6vectorI21VkExtensionPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    a874:	55                   	push   %rbp
    a875:	48 89 e5             	mov    %rsp,%rbp
    a878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a87c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    a880:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a884:	5d                   	pop    %rbp
    a885:	c3                   	ret

000000000000a886 <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    a886:	55                   	push   %rbp
    a887:	48 89 e5             	mov    %rsp,%rbp
    a88a:	48 83 ec 10          	sub    $0x10,%rsp
    a88e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a892:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    a896:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a89a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a89e:	48 89 d6             	mov    %rdx,%rsi
    a8a1:	48 89 c7             	mov    %rax,%rdi
    a8a4:	e8 59 0f 00 00       	call   b802 <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1ERKS1_>
    a8a9:	90                   	nop
    a8aa:	c9                   	leave
    a8ab:	c3                   	ret

000000000000a8ac <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    a8ac:	55                   	push   %rbp
    a8ad:	48 89 e5             	mov    %rsp,%rbp
    a8b0:	48 83 ec 20          	sub    $0x20,%rsp
    a8b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a8bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    a8c0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a8c5:	74 17                	je     a8de <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    a8c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a8cf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a8d3:	48 89 ce             	mov    %rcx,%rsi
    a8d6:	48 89 c7             	mov    %rax,%rdi
    a8d9:	e8 33 0f 00 00       	call   b811 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE10deallocateERS1_PS0_m>
      }
    a8de:	90                   	nop
    a8df:	c9                   	leave
    a8e0:	c3                   	ret
    a8e1:	90                   	nop

000000000000a8e2 <_ZNSt15__new_allocatorIPKcEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a8e2:	55                   	push   %rbp
    a8e3:	48 89 e5             	mov    %rsp,%rbp
    a8e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8ea:	90                   	nop
    a8eb:	5d                   	pop    %rbp
    a8ec:	c3                   	ret
    a8ed:	90                   	nop

000000000000a8ee <_ZNSt15__new_allocatorIPKcED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    a8ee:	55                   	push   %rbp
    a8ef:	48 89 e5             	mov    %rsp,%rbp
    a8f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8f6:	90                   	nop
    a8f7:	5d                   	pop    %rbp
    a8f8:	c3                   	ret

000000000000a8f9 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    a8f9:	55                   	push   %rbp
    a8fa:	48 89 e5             	mov    %rsp,%rbp
    a8fd:	53                   	push   %rbx
    a8fe:	48 83 ec 28          	sub    $0x28,%rsp
    a902:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a906:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    a90a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a90e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a912:	48 89 d6             	mov    %rdx,%rsi
    a915:	48 89 c7             	mov    %rax,%rdi
    a918:	e8 e9 00 00 00       	call   aa06 <_ZNSaIPKcEC1ERKS1_>
    a91d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a921:	48 89 c7             	mov    %rax,%rdi
    a924:	e8 16 0f 00 00       	call   b83f <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
    a929:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    a92d:	0f 92 c3             	setb   %bl
    a930:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    a934:	48 89 c7             	mov    %rax,%rdi
    a937:	e8 52 f1 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
    a93c:	84 db                	test   %bl,%bl
    a93e:	74 0f                	je     a94f <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    a940:	48 8d 05 41 7a 01 00 	lea    0x17a41(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    a947:	48 89 c7             	mov    %rax,%rdi
    a94a:	e8 b1 98 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    a94f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    a953:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a957:	c9                   	leave
    a958:	c3                   	ret
    a959:	90                   	nop

000000000000a95a <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    a95a:	55                   	push   %rbp
    a95b:	48 89 e5             	mov    %rsp,%rbp
    a95e:	53                   	push   %rbx
    a95f:	48 83 ec 28          	sub    $0x28,%rsp
    a963:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a967:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a96b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    a96f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a973:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a977:	48 89 d6             	mov    %rdx,%rsi
    a97a:	48 89 c7             	mov    %rax,%rdi
    a97d:	e8 00 0f 00 00       	call   b882 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    a982:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a98a:	48 89 d6             	mov    %rdx,%rsi
    a98d:	48 89 c7             	mov    %rax,%rdi
    a990:	e8 1f 0f 00 00       	call   b8b4 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>
    a995:	eb 1a                	jmp    a9b1 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_+0x57>
    a997:	48 89 c3             	mov    %rax,%rbx
    a99a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a99e:	48 89 c7             	mov    %rax,%rdi
    a9a1:	e8 2c ed ff ff       	call   96d2 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
    a9a6:	48 89 d8             	mov    %rbx,%rax
    a9a9:	48 89 c7             	mov    %rax,%rdi
    a9ac:	e8 bf 9f ff ff       	call   4970 <_Unwind_Resume@plt>
    a9b1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a9b5:	c9                   	leave
    a9b6:	c3                   	ret
    a9b7:	90                   	nop

000000000000a9b8 <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    a9b8:	55                   	push   %rbp
    a9b9:	48 89 e5             	mov    %rsp,%rbp
    a9bc:	48 83 ec 10          	sub    $0x10,%rsp
    a9c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a9c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    a9c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9cc:	48 89 c7             	mov    %rax,%rdi
    a9cf:	e8 24 00 00 00       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
    a9d4:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    a9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a9db:	48 8b 00             	mov    (%rax),%rax
    a9de:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    a9e2:	48 89 ce             	mov    %rcx,%rsi
    a9e5:	48 89 c7             	mov    %rax,%rdi
    a9e8:	e8 1d 0f 00 00       	call   b90a <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    a9ed:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a9f1:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    a9f5:	90                   	nop
    a9f6:	c9                   	leave
    a9f7:	c3                   	ret

000000000000a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    a9f8:	55                   	push   %rbp
    a9f9:	48 89 e5             	mov    %rsp,%rbp
    a9fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    aa00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa04:	5d                   	pop    %rbp
    aa05:	c3                   	ret

000000000000aa06 <_ZNSaIPKcEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    aa06:	55                   	push   %rbp
    aa07:	48 89 e5             	mov    %rsp,%rbp
    aa0a:	48 83 ec 10          	sub    $0x10,%rsp
    aa0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa12:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    aa16:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    aa1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa1e:	48 89 d6             	mov    %rdx,%rsi
    aa21:	48 89 c7             	mov    %rax,%rdi
    aa24:	e8 0b 0f 00 00       	call   b934 <_ZNSt15__new_allocatorIPKcEC1ERKS2_>
    aa29:	90                   	nop
    aa2a:	c9                   	leave
    aa2b:	c3                   	ret

000000000000aa2c <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    aa2c:	55                   	push   %rbp
    aa2d:	48 89 e5             	mov    %rsp,%rbp
    aa30:	48 83 ec 20          	sub    $0x20,%rsp
    aa34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    aa3c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    aa40:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    aa45:	74 17                	je     aa5e <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    aa47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa4b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    aa4f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    aa53:	48 89 ce             	mov    %rcx,%rsi
    aa56:	48 89 c7             	mov    %rax,%rdi
    aa59:	e8 e5 0e 00 00       	call   b943 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>
      }
    aa5e:	90                   	nop
    aa5f:	c9                   	leave
    aa60:	c3                   	ret
    aa61:	90                   	nop

000000000000aa62 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    aa62:	55                   	push   %rbp
    aa63:	48 89 e5             	mov    %rsp,%rbp
    aa66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa6a:	90                   	nop
    aa6b:	5d                   	pop    %rbp
    aa6c:	c3                   	ret
    aa6d:	90                   	nop

000000000000aa6e <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    aa6e:	55                   	push   %rbp
    aa6f:	48 89 e5             	mov    %rsp,%rbp
    aa72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa76:	90                   	nop
    aa77:	5d                   	pop    %rbp
    aa78:	c3                   	ret

000000000000aa79 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    aa79:	55                   	push   %rbp
    aa7a:	48 89 e5             	mov    %rsp,%rbp
    aa7d:	53                   	push   %rbx
    aa7e:	48 83 ec 28          	sub    $0x28,%rsp
    aa82:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    aa86:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    aa8a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    aa8e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    aa92:	48 89 d6             	mov    %rdx,%rsi
    aa95:	48 89 c7             	mov    %rax,%rdi
    aa98:	e8 25 01 00 00       	call   abc2 <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>
    aa9d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    aaa1:	48 89 c7             	mov    %rax,%rdi
    aaa4:	e8 c8 0e 00 00       	call   b971 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>
    aaa9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    aaad:	0f 92 c3             	setb   %bl
    aab0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    aab4:	48 89 c7             	mov    %rax,%rdi
    aab7:	e8 ee f0 ff ff       	call   9baa <_ZNSaIP18VkPhysicalDevice_TED1Ev>
    aabc:	84 db                	test   %bl,%bl
    aabe:	74 0f                	je     aacf <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    aac0:	48 8d 05 c1 78 01 00 	lea    0x178c1(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    aac7:	48 89 c7             	mov    %rax,%rdi
    aaca:	e8 31 97 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    aacf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    aad3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aad7:	c9                   	leave
    aad8:	c3                   	ret
    aad9:	90                   	nop

000000000000aada <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    aada:	55                   	push   %rbp
    aadb:	48 89 e5             	mov    %rsp,%rbp
    aade:	53                   	push   %rbx
    aadf:	48 83 ec 28          	sub    $0x28,%rsp
    aae3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    aae7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    aaeb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    aaef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaf3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    aaf7:	48 89 d6             	mov    %rdx,%rsi
    aafa:	48 89 c7             	mov    %rax,%rdi
    aafd:	e8 b2 0e 00 00       	call   b9b4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    ab02:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ab06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab0a:	48 89 d6             	mov    %rdx,%rsi
    ab0d:	48 89 c7             	mov    %rax,%rdi
    ab10:	e8 d1 0e 00 00       	call   b9e6 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_M_create_storageEm>
    ab15:	eb 1a                	jmp    ab31 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EEC1EmRKS2_+0x57>
    ab17:	48 89 c3             	mov    %rax,%rbx
    ab1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab1e:	48 89 c7             	mov    %rax,%rdi
    ab21:	e8 c8 eb ff ff       	call   96ee <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
    ab26:	48 89 d8             	mov    %rbx,%rax
    ab29:	48 89 c7             	mov    %rax,%rdi
    ab2c:	e8 3f 9e ff ff       	call   4970 <_Unwind_Resume@plt>
    ab31:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ab35:	c9                   	leave
    ab36:	c3                   	ret
    ab37:	90                   	nop

000000000000ab38 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    ab38:	55                   	push   %rbp
    ab39:	48 89 e5             	mov    %rsp,%rbp
    ab3c:	48 83 ec 10          	sub    $0x10,%rsp
    ab40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    ab48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab4c:	48 89 c7             	mov    %rax,%rdi
    ab4f:	e8 24 00 00 00       	call   ab78 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
    ab54:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    ab57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab5b:	48 8b 00             	mov    (%rax),%rax
    ab5e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ab62:	48 89 ce             	mov    %rcx,%rsi
    ab65:	48 89 c7             	mov    %rax,%rdi
    ab68:	e8 cf 0e 00 00       	call   ba3c <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    ab6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ab71:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    ab75:	90                   	nop
    ab76:	c9                   	leave
    ab77:	c3                   	ret

000000000000ab78 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    ab78:	55                   	push   %rbp
    ab79:	48 89 e5             	mov    %rsp,%rbp
    ab7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    ab80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab84:	5d                   	pop    %rbp
    ab85:	c3                   	ret

000000000000ab86 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    ab86:	55                   	push   %rbp
    ab87:	48 89 e5             	mov    %rsp,%rbp
    ab8a:	48 83 ec 20          	sub    $0x20,%rsp
    ab8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ab92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ab96:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    ab9a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ab9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aba2:	48 89 d6             	mov    %rdx,%rsi
    aba5:	48 89 c7             	mov    %rax,%rdi
    aba8:	e8 b8 0e 00 00       	call   ba65 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>
    }
    abad:	90                   	nop
    abae:	c9                   	leave
    abaf:	c3                   	ret

000000000000abb0 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    abb0:	55                   	push   %rbp
    abb1:	48 89 e5             	mov    %rsp,%rbp
    abb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    abbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    abc0:	5d                   	pop    %rbp
    abc1:	c3                   	ret

000000000000abc2 <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    abc2:	55                   	push   %rbp
    abc3:	48 89 e5             	mov    %rsp,%rbp
    abc6:	48 83 ec 10          	sub    $0x10,%rsp
    abca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    abd2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    abd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abda:	48 89 d6             	mov    %rdx,%rsi
    abdd:	48 89 c7             	mov    %rax,%rdi
    abe0:	e8 a7 0e 00 00       	call   ba8c <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1ERKS2_>
    abe5:	90                   	nop
    abe6:	c9                   	leave
    abe7:	c3                   	ret

000000000000abe8 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    abe8:	55                   	push   %rbp
    abe9:	48 89 e5             	mov    %rsp,%rbp
    abec:	48 83 ec 20          	sub    $0x20,%rsp
    abf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abf4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    abf8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    abfc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ac01:	74 17                	je     ac1a <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    ac03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ac0b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ac0f:	48 89 ce             	mov    %rcx,%rsi
    ac12:	48 89 c7             	mov    %rax,%rdi
    ac15:	e8 81 0e 00 00       	call   ba9b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>
      }
    ac1a:	90                   	nop
    ac1b:	c9                   	leave
    ac1c:	c3                   	ret
    ac1d:	90                   	nop

000000000000ac1e <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    ac1e:	55                   	push   %rbp
    ac1f:	48 89 e5             	mov    %rsp,%rbp
    ac22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac26:	90                   	nop
    ac27:	5d                   	pop    %rbp
    ac28:	c3                   	ret
    ac29:	90                   	nop

000000000000ac2a <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    ac2a:	55                   	push   %rbp
    ac2b:	48 89 e5             	mov    %rsp,%rbp
    ac2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac32:	90                   	nop
    ac33:	5d                   	pop    %rbp
    ac34:	c3                   	ret

000000000000ac35 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    ac35:	55                   	push   %rbp
    ac36:	48 89 e5             	mov    %rsp,%rbp
    ac39:	53                   	push   %rbx
    ac3a:	48 83 ec 28          	sub    $0x28,%rsp
    ac3e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ac42:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    ac46:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ac4a:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ac4e:	48 89 d6             	mov    %rdx,%rsi
    ac51:	48 89 c7             	mov    %rax,%rdi
    ac54:	e8 25 01 00 00       	call   ad7e <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>
    ac59:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ac5d:	48 89 c7             	mov    %rax,%rdi
    ac60:	e8 64 0e 00 00       	call   bac9 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_S_max_sizeERKS1_>
    ac65:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ac69:	0f 92 c3             	setb   %bl
    ac6c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ac70:	48 89 c7             	mov    %rax,%rdi
    ac73:	e8 96 f0 ff ff       	call   9d0e <_ZNSaI23VkQueueFamilyPropertiesED1Ev>
    ac78:	84 db                	test   %bl,%bl
    ac7a:	74 0f                	je     ac8b <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    ac7c:	48 8d 05 05 77 01 00 	lea    0x17705(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    ac83:	48 89 c7             	mov    %rax,%rdi
    ac86:	e8 75 95 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    ac8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    ac8f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ac93:	c9                   	leave
    ac94:	c3                   	ret
    ac95:	90                   	nop

000000000000ac96 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    ac96:	55                   	push   %rbp
    ac97:	48 89 e5             	mov    %rsp,%rbp
    ac9a:	53                   	push   %rbx
    ac9b:	48 83 ec 28          	sub    $0x28,%rsp
    ac9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    aca3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    aca7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    acab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    acaf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    acb3:	48 89 d6             	mov    %rdx,%rsi
    acb6:	48 89 c7             	mov    %rax,%rdi
    acb9:	e8 4e 0e 00 00       	call   bb0c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    acbe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    acc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    acc6:	48 89 d6             	mov    %rdx,%rsi
    acc9:	48 89 c7             	mov    %rax,%rdi
    accc:	e8 6d 0e 00 00       	call   bb3e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_M_create_storageEm>
    acd1:	eb 1a                	jmp    aced <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EEC1EmRKS1_+0x57>
    acd3:	48 89 c3             	mov    %rax,%rbx
    acd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    acda:	48 89 c7             	mov    %rax,%rdi
    acdd:	e8 28 ea ff ff       	call   970a <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implD1Ev>
    ace2:	48 89 d8             	mov    %rbx,%rax
    ace5:	48 89 c7             	mov    %rax,%rdi
    ace8:	e8 83 9c ff ff       	call   4970 <_Unwind_Resume@plt>
    aced:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    acf1:	c9                   	leave
    acf2:	c3                   	ret
    acf3:	90                   	nop

000000000000acf4 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    acf4:	55                   	push   %rbp
    acf5:	48 89 e5             	mov    %rsp,%rbp
    acf8:	48 83 ec 10          	sub    $0x10,%rsp
    acfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad00:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    ad04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad08:	48 89 c7             	mov    %rax,%rdi
    ad0b:	e8 24 00 00 00       	call   ad34 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>
    ad10:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    ad13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad17:	48 8b 00             	mov    (%rax),%rax
    ad1a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ad1e:	48 89 ce             	mov    %rcx,%rsi
    ad21:	48 89 c7             	mov    %rax,%rdi
    ad24:	e8 75 0e 00 00       	call   bb9e <_ZSt27__uninitialized_default_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    ad29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ad2d:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    ad31:	90                   	nop
    ad32:	c9                   	leave
    ad33:	c3                   	ret

000000000000ad34 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    ad34:	55                   	push   %rbp
    ad35:	48 89 e5             	mov    %rsp,%rbp
    ad38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    ad3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad40:	5d                   	pop    %rbp
    ad41:	c3                   	ret

000000000000ad42 <_ZSt8_DestroyIP23VkQueueFamilyPropertiesS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    ad42:	55                   	push   %rbp
    ad43:	48 89 e5             	mov    %rsp,%rbp
    ad46:	48 83 ec 20          	sub    $0x20,%rsp
    ad4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ad52:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    ad56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ad5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad5e:	48 89 d6             	mov    %rdx,%rsi
    ad61:	48 89 c7             	mov    %rax,%rdi
    ad64:	e8 5e 0e 00 00       	call   bbc7 <_ZSt8_DestroyIP23VkQueueFamilyPropertiesEvT_S2_>
    }
    ad69:	90                   	nop
    ad6a:	c9                   	leave
    ad6b:	c3                   	ret

000000000000ad6c <_ZNKSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    ad6c:	55                   	push   %rbp
    ad6d:	48 89 e5             	mov    %rsp,%rbp
    ad70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    ad78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ad7c:	5d                   	pop    %rbp
    ad7d:	c3                   	ret

000000000000ad7e <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    ad7e:	55                   	push   %rbp
    ad7f:	48 89 e5             	mov    %rsp,%rbp
    ad82:	48 83 ec 10          	sub    $0x10,%rsp
    ad86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ad8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    ad8e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ad92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad96:	48 89 d6             	mov    %rdx,%rsi
    ad99:	48 89 c7             	mov    %rax,%rdi
    ad9c:	e8 4d 0e 00 00       	call   bbee <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1ERKS1_>
    ada1:	90                   	nop
    ada2:	c9                   	leave
    ada3:	c3                   	ret

000000000000ada4 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    ada4:	55                   	push   %rbp
    ada5:	48 89 e5             	mov    %rsp,%rbp
    ada8:	48 83 ec 20          	sub    $0x20,%rsp
    adac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    adb4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    adb8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    adbd:	74 17                	je     add6 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    adbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    adc7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    adcb:	48 89 ce             	mov    %rcx,%rsi
    adce:	48 89 c7             	mov    %rax,%rdi
    add1:	e8 27 0e 00 00       	call   bbfd <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE10deallocateERS1_PS0_m>
      }
    add6:	90                   	nop
    add7:	c9                   	leave
    add8:	c3                   	ret
    add9:	90                   	nop

000000000000adda <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    adda:	55                   	push   %rbp
    addb:	48 89 e5             	mov    %rsp,%rbp
    adde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ade2:	90                   	nop
    ade3:	5d                   	pop    %rbp
    ade4:	c3                   	ret
    ade5:	90                   	nop

000000000000ade6 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    ade6:	55                   	push   %rbp
    ade7:	48 89 e5             	mov    %rsp,%rbp
    adea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    adee:	90                   	nop
    adef:	5d                   	pop    %rbp
    adf0:	c3                   	ret

000000000000adf1 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    adf1:	55                   	push   %rbp
    adf2:	48 89 e5             	mov    %rsp,%rbp
    adf5:	53                   	push   %rbx
    adf6:	48 83 ec 28          	sub    $0x28,%rsp
    adfa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    adfe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    ae02:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ae06:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ae0a:	48 89 d6             	mov    %rdx,%rsi
    ae0d:	48 89 c7             	mov    %rax,%rdi
    ae10:	e8 d7 01 00 00       	call   afec <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>
    ae15:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ae19:	48 89 c7             	mov    %rax,%rdi
    ae1c:	e8 0a 0e 00 00       	call   bc2b <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_S_max_sizeERKS3_>
    ae21:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ae25:	0f 92 c3             	setb   %bl
    ae28:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    ae2c:	48 89 c7             	mov    %rax,%rdi
    ae2f:	e8 76 f0 ff ff       	call   9eaa <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEED1Ev>
    ae34:	84 db                	test   %bl,%bl
    ae36:	74 0f                	je     ae47 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_S_check_init_lenEmRKS3_+0x56>
	  __throw_length_error(
    ae38:	48 8d 05 49 75 01 00 	lea    0x17549(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    ae3f:	48 89 c7             	mov    %rax,%rdi
    ae42:	e8 b9 93 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    ae47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    ae4b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ae4f:	c9                   	leave
    ae50:	c3                   	ret
    ae51:	90                   	nop

000000000000ae52 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    ae52:	55                   	push   %rbp
    ae53:	48 89 e5             	mov    %rsp,%rbp
    ae56:	53                   	push   %rbx
    ae57:	48 83 ec 28          	sub    $0x28,%rsp
    ae5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ae5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ae63:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    ae67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae6b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ae6f:	48 89 d6             	mov    %rdx,%rsi
    ae72:	48 89 c7             	mov    %rax,%rdi
    ae75:	e8 f4 0d 00 00       	call   bc6e <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implC1ERKS3_>
      { _M_create_storage(__n); }
    ae7a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ae7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae82:	48 89 d6             	mov    %rdx,%rsi
    ae85:	48 89 c7             	mov    %rax,%rdi
    ae88:	e8 13 0e 00 00       	call   bca0 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_M_create_storageEm>
    ae8d:	eb 1a                	jmp    aea9 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEC1EmRKS3_+0x57>
    ae8f:	48 89 c3             	mov    %rax,%rbx
    ae92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae96:	48 89 c7             	mov    %rax,%rdi
    ae99:	e8 88 e8 ff ff       	call   9726 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implD1Ev>
    ae9e:	48 89 d8             	mov    %rbx,%rax
    aea1:	48 89 c7             	mov    %rax,%rdi
    aea4:	e8 c7 9a ff ff       	call   4970 <_Unwind_Resume@plt>
    aea9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aead:	c9                   	leave
    aeae:	c3                   	ret
    aeaf:	90                   	nop

000000000000aeb0 <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    aeb0:	55                   	push   %rbp
    aeb1:	48 89 e5             	mov    %rsp,%rbp
    aeb4:	48 83 ec 10          	sub    $0x10,%rsp
    aeb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aebc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    aec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aec4:	48 89 c7             	mov    %rax,%rdi
    aec7:	e8 24 00 00 00       	call   aef0 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>
    aecc:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    aecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aed3:	48 8b 00             	mov    (%rax),%rax
    aed6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    aeda:	48 89 ce             	mov    %rcx,%rsi
    aedd:	48 89 c7             	mov    %rax,%rdi
    aee0:	e8 1c 0e 00 00       	call   bd01 <_ZSt27__uninitialized_default_n_aIPSt8optionalI23VkQueueFamilyPropertiesEmS2_ET_S4_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    aee5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    aee9:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    aeed:	90                   	nop
    aeee:	c9                   	leave
    aeef:	c3                   	ret

000000000000aef0 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    aef0:	55                   	push   %rbp
    aef1:	48 89 e5             	mov    %rsp,%rbp
    aef4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    aef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aefc:	5d                   	pop    %rbp
    aefd:	c3                   	ret

000000000000aefe <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    aefe:	55                   	push   %rbp
    aeff:	48 89 e5             	mov    %rsp,%rbp
    af02:	48 83 ec 20          	sub    $0x20,%rsp
    af06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    af0e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    af12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    af16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af1a:	48 89 d6             	mov    %rdx,%rsi
    af1d:	48 89 c7             	mov    %rax,%rdi
    af20:	e8 05 0e 00 00       	call   bd2a <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesEEvT_S4_>
    }
    af25:	90                   	nop
    af26:	c9                   	leave
    af27:	c3                   	ret

000000000000af28 <_ZN9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    af28:	55                   	push   %rbp
    af29:	48 89 e5             	mov    %rsp,%rbp
    af2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    af34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    af38:	48 8b 10             	mov    (%rax),%rdx
    af3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af3f:	48 89 10             	mov    %rdx,(%rax)
    af42:	90                   	nop
    af43:	5d                   	pop    %rbp
    af44:	c3                   	ret
    af45:	90                   	nop

000000000000af46 <_ZNK9__gnu_cxx17__normal_iteratorIP23VkQueueFamilyPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    af46:	55                   	push   %rbp
    af47:	48 89 e5             	mov    %rsp,%rbp
    af4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    af4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af52:	5d                   	pop    %rbp
    af53:	c3                   	ret

000000000000af54 <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
    af54:	55                   	push   %rbp
    af55:	48 89 e5             	mov    %rsp,%rbp
    af58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
    af5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af60:	0f b6 40 18          	movzbl 0x18(%rax),%eax
    af64:	5d                   	pop    %rbp
    af65:	c3                   	ret

000000000000af66 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
    af66:	55                   	push   %rbp
    af67:	48 89 e5             	mov    %rsp,%rbp
    af6a:	48 83 ec 10          	sub    $0x10,%rsp
    af6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
    af72:	e8 6f a0 ff ff       	call   4fe6 <_ZSt23__is_constant_evaluatedv>
    af77:	84 c0                	test   %al,%al
    af79:	74 1a                	je     af95 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2f>
    af7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af7f:	48 89 c7             	mov    %rax,%rdi
    af82:	e8 cd ff ff ff       	call   af54 <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
    af87:	83 f0 01             	xor    $0x1,%eax
    af8a:	84 c0                	test   %al,%al
    af8c:	74 07                	je     af95 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x2f>
    af8e:	b8 01 00 00 00       	mov    $0x1,%eax
    af93:	eb 05                	jmp    af9a <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv+0x34>
    af95:	b8 00 00 00 00       	mov    $0x0,%eax
    af9a:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
    af9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afa0:	48 89 c7             	mov    %rax,%rdi
    afa3:	e8 a8 0d 00 00       	call   bd50 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE6_M_getEv>
      }
    afa8:	c9                   	leave
    afa9:	c3                   	ret

000000000000afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    afaa:	55                   	push   %rbp
    afab:	48 89 e5             	mov    %rsp,%rbp
    afae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    afb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afb6:	5d                   	pop    %rbp
    afb7:	c3                   	ret

000000000000afb8 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE12_M_constructIJRKS0_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
    afb8:	55                   	push   %rbp
    afb9:	48 89 e5             	mov    %rsp,%rbp
    afbc:	53                   	push   %rbx
    afbd:	48 83 ec 18          	sub    $0x18,%rsp
    afc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    afc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  static_cast<_Dp*>(this)->_M_payload._M_construct(
    afc9:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    afcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    afd1:	48 89 c7             	mov    %rax,%rdi
    afd4:	e8 d1 ff ff ff       	call   afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    afd9:	48 89 c6             	mov    %rax,%rsi
    afdc:	48 89 df             	mov    %rbx,%rdi
    afdf:	e8 7a 0d 00 00       	call   bd5e <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE12_M_constructIJRKS0_EEEvDpOT_>
	}
    afe4:	90                   	nop
    afe5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    afe9:	c9                   	leave
    afea:	c3                   	ret
    afeb:	90                   	nop

000000000000afec <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    afec:	55                   	push   %rbp
    afed:	48 89 e5             	mov    %rsp,%rbp
    aff0:	48 83 ec 10          	sub    $0x10,%rsp
    aff4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aff8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    affc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b004:	48 89 d6             	mov    %rdx,%rsi
    b007:	48 89 c7             	mov    %rax,%rdi
    b00a:	e8 95 0d 00 00       	call   bda4 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS3_>
    b00f:	90                   	nop
    b010:	c9                   	leave
    b011:	c3                   	ret

000000000000b012 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
    b012:	55                   	push   %rbp
    b013:	48 89 e5             	mov    %rsp,%rbp
    b016:	48 83 ec 20          	sub    $0x20,%rsp
    b01a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b01e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b022:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    b026:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    b02b:	74 17                	je     b044 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    b02d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b031:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b035:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b039:	48 89 ce             	mov    %rcx,%rsi
    b03c:	48 89 c7             	mov    %rax,%rdi
    b03f:	e8 6f 0d 00 00       	call   bdb3 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE10deallocateERS3_PS2_m>
      }
    b044:	90                   	nop
    b045:	c9                   	leave
    b046:	c3                   	ret
    b047:	90                   	nop

000000000000b048 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b048:	55                   	push   %rbp
    b049:	48 89 e5             	mov    %rsp,%rbp
    b04c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b050:	90                   	nop
    b051:	5d                   	pop    %rbp
    b052:	c3                   	ret
    b053:	90                   	nop

000000000000b054 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b054:	55                   	push   %rbp
    b055:	48 89 e5             	mov    %rsp,%rbp
    b058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b05c:	90                   	nop
    b05d:	5d                   	pop    %rbp
    b05e:	c3                   	ret

000000000000b05f <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    b05f:	55                   	push   %rbp
    b060:	48 89 e5             	mov    %rsp,%rbp
    b063:	53                   	push   %rbx
    b064:	48 83 ec 28          	sub    $0x28,%rsp
    b068:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b06c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    b070:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b074:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b078:	48 89 d6             	mov    %rdx,%rsi
    b07b:	48 89 c7             	mov    %rax,%rdi
    b07e:	e8 25 01 00 00       	call   b1a8 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>
    b083:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b087:	48 89 c7             	mov    %rax,%rdi
    b08a:	e8 52 0d 00 00       	call   bde1 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_S_max_sizeERKS1_>
    b08f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    b093:	0f 92 c3             	setb   %bl
    b096:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b09a:	48 89 c7             	mov    %rax,%rdi
    b09d:	e8 b8 f0 ff ff       	call   a15a <_ZNSaI18VkSurfaceFormatKHRED1Ev>
    b0a2:	84 db                	test   %bl,%bl
    b0a4:	74 0f                	je     b0b5 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    b0a6:	48 8d 05 db 72 01 00 	lea    0x172db(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    b0ad:	48 89 c7             	mov    %rax,%rdi
    b0b0:	e8 4b 91 ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    b0b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    b0b9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b0bd:	c9                   	leave
    b0be:	c3                   	ret
    b0bf:	90                   	nop

000000000000b0c0 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    b0c0:	55                   	push   %rbp
    b0c1:	48 89 e5             	mov    %rsp,%rbp
    b0c4:	53                   	push   %rbx
    b0c5:	48 83 ec 28          	sub    $0x28,%rsp
    b0c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b0cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b0d1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    b0d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b0dd:	48 89 d6             	mov    %rdx,%rsi
    b0e0:	48 89 c7             	mov    %rax,%rdi
    b0e3:	e8 3c 0d 00 00       	call   be24 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    b0e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b0ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0f0:	48 89 d6             	mov    %rdx,%rsi
    b0f3:	48 89 c7             	mov    %rax,%rdi
    b0f6:	e8 5b 0d 00 00       	call   be56 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_M_create_storageEm>
    b0fb:	eb 1a                	jmp    b117 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EEC1EmRKS1_+0x57>
    b0fd:	48 89 c3             	mov    %rax,%rbx
    b100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b104:	48 89 c7             	mov    %rax,%rdi
    b107:	e8 36 e6 ff ff       	call   9742 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implD1Ev>
    b10c:	48 89 d8             	mov    %rbx,%rax
    b10f:	48 89 c7             	mov    %rax,%rdi
    b112:	e8 59 98 ff ff       	call   4970 <_Unwind_Resume@plt>
    b117:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b11b:	c9                   	leave
    b11c:	c3                   	ret
    b11d:	90                   	nop

000000000000b11e <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    b11e:	55                   	push   %rbp
    b11f:	48 89 e5             	mov    %rsp,%rbp
    b122:	48 83 ec 10          	sub    $0x10,%rsp
    b126:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b12a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    b12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b132:	48 89 c7             	mov    %rax,%rdi
    b135:	e8 24 00 00 00       	call   b15e <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    b13a:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    b13d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b141:	48 8b 00             	mov    (%rax),%rax
    b144:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b148:	48 89 ce             	mov    %rcx,%rsi
    b14b:	48 89 c7             	mov    %rax,%rdi
    b14e:	e8 59 0d 00 00       	call   beac <_ZSt27__uninitialized_default_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    b153:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b157:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    b15b:	90                   	nop
    b15c:	c9                   	leave
    b15d:	c3                   	ret

000000000000b15e <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    b15e:	55                   	push   %rbp
    b15f:	48 89 e5             	mov    %rsp,%rbp
    b162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    b166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b16a:	5d                   	pop    %rbp
    b16b:	c3                   	ret

000000000000b16c <_ZSt8_DestroyIP18VkSurfaceFormatKHRS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    b16c:	55                   	push   %rbp
    b16d:	48 89 e5             	mov    %rsp,%rbp
    b170:	48 83 ec 20          	sub    $0x20,%rsp
    b174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b178:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b17c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    b180:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b184:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b188:	48 89 d6             	mov    %rdx,%rsi
    b18b:	48 89 c7             	mov    %rax,%rdi
    b18e:	e8 42 0d 00 00       	call   bed5 <_ZSt8_DestroyIP18VkSurfaceFormatKHREvT_S2_>
    }
    b193:	90                   	nop
    b194:	c9                   	leave
    b195:	c3                   	ret

000000000000b196 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    b196:	55                   	push   %rbp
    b197:	48 89 e5             	mov    %rsp,%rbp
    b19a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b19e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    b1a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b1a6:	5d                   	pop    %rbp
    b1a7:	c3                   	ret

000000000000b1a8 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    b1a8:	55                   	push   %rbp
    b1a9:	48 89 e5             	mov    %rsp,%rbp
    b1ac:	48 83 ec 10          	sub    $0x10,%rsp
    b1b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b1b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    b1b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b1bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b1c0:	48 89 d6             	mov    %rdx,%rsi
    b1c3:	48 89 c7             	mov    %rax,%rdi
    b1c6:	e8 31 0d 00 00       	call   befc <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1ERKS1_>
    b1cb:	90                   	nop
    b1cc:	c9                   	leave
    b1cd:	c3                   	ret

000000000000b1ce <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    b1ce:	55                   	push   %rbp
    b1cf:	48 89 e5             	mov    %rsp,%rbp
    b1d2:	48 83 ec 20          	sub    $0x20,%rsp
    b1d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b1da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b1de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    b1e2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    b1e7:	74 17                	je     b200 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    b1e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b1ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b1f1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b1f5:	48 89 ce             	mov    %rcx,%rsi
    b1f8:	48 89 c7             	mov    %rax,%rdi
    b1fb:	e8 0b 0d 00 00       	call   bf0b <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE10deallocateERS1_PS0_m>
      }
    b200:	90                   	nop
    b201:	c9                   	leave
    b202:	c3                   	ret
    b203:	90                   	nop

000000000000b204 <_ZNSt15__new_allocatorI16VkPresentModeKHREC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b204:	55                   	push   %rbp
    b205:	48 89 e5             	mov    %rsp,%rbp
    b208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b20c:	90                   	nop
    b20d:	5d                   	pop    %rbp
    b20e:	c3                   	ret
    b20f:	90                   	nop

000000000000b210 <_ZNSt15__new_allocatorI16VkPresentModeKHRED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b210:	55                   	push   %rbp
    b211:	48 89 e5             	mov    %rsp,%rbp
    b214:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b218:	90                   	nop
    b219:	5d                   	pop    %rbp
    b21a:	c3                   	ret

000000000000b21b <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    b21b:	55                   	push   %rbp
    b21c:	48 89 e5             	mov    %rsp,%rbp
    b21f:	53                   	push   %rbx
    b220:	48 83 ec 28          	sub    $0x28,%rsp
    b224:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b228:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    b22c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b230:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b234:	48 89 d6             	mov    %rdx,%rsi
    b237:	48 89 c7             	mov    %rax,%rdi
    b23a:	e8 25 01 00 00       	call   b364 <_ZNSaI16VkPresentModeKHREC1ERKS0_>
    b23f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b243:	48 89 c7             	mov    %rax,%rdi
    b246:	e8 ee 0c 00 00       	call   bf39 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE11_S_max_sizeERKS1_>
    b24b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    b24f:	0f 92 c3             	setb   %bl
    b252:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b256:	48 89 c7             	mov    %rax,%rdi
    b259:	e8 60 f0 ff ff       	call   a2be <_ZNSaI16VkPresentModeKHRED1Ev>
    b25e:	84 db                	test   %bl,%bl
    b260:	74 0f                	je     b271 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
    b262:	48 8d 05 1f 71 01 00 	lea    0x1711f(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    b269:	48 89 c7             	mov    %rax,%rdi
    b26c:	e8 8f 8f ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    b271:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    b275:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b279:	c9                   	leave
    b27a:	c3                   	ret
    b27b:	90                   	nop

000000000000b27c <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    b27c:	55                   	push   %rbp
    b27d:	48 89 e5             	mov    %rsp,%rbp
    b280:	53                   	push   %rbx
    b281:	48 83 ec 28          	sub    $0x28,%rsp
    b285:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b289:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b28d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    b291:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b295:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b299:	48 89 d6             	mov    %rdx,%rsi
    b29c:	48 89 c7             	mov    %rax,%rdi
    b29f:	e8 d8 0c 00 00       	call   bf7c <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
    b2a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b2a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2ac:	48 89 d6             	mov    %rdx,%rsi
    b2af:	48 89 c7             	mov    %rax,%rdi
    b2b2:	e8 f7 0c 00 00       	call   bfae <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_M_create_storageEm>
    b2b7:	eb 1a                	jmp    b2d3 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EEC1EmRKS1_+0x57>
    b2b9:	48 89 c3             	mov    %rax,%rbx
    b2bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b2c0:	48 89 c7             	mov    %rax,%rdi
    b2c3:	e8 96 e4 ff ff       	call   975e <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implD1Ev>
    b2c8:	48 89 d8             	mov    %rbx,%rax
    b2cb:	48 89 c7             	mov    %rax,%rdi
    b2ce:	e8 9d 96 ff ff       	call   4970 <_Unwind_Resume@plt>
    b2d3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b2d7:	c9                   	leave
    b2d8:	c3                   	ret
    b2d9:	90                   	nop

000000000000b2da <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    b2da:	55                   	push   %rbp
    b2db:	48 89 e5             	mov    %rsp,%rbp
    b2de:	48 83 ec 10          	sub    $0x10,%rsp
    b2e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b2e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    b2ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2ee:	48 89 c7             	mov    %rax,%rdi
    b2f1:	e8 24 00 00 00       	call   b31a <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>
    b2f6:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    b2f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2fd:	48 8b 00             	mov    (%rax),%rax
    b300:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b304:	48 89 ce             	mov    %rcx,%rsi
    b307:	48 89 c7             	mov    %rax,%rdi
    b30a:	e8 f5 0c 00 00       	call   c004 <_ZSt27__uninitialized_default_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    b30f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b313:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    b317:	90                   	nop
    b318:	c9                   	leave
    b319:	c3                   	ret

000000000000b31a <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    b31a:	55                   	push   %rbp
    b31b:	48 89 e5             	mov    %rsp,%rbp
    b31e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    b322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b326:	5d                   	pop    %rbp
    b327:	c3                   	ret

000000000000b328 <_ZSt8_DestroyIP16VkPresentModeKHRS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    b328:	55                   	push   %rbp
    b329:	48 89 e5             	mov    %rsp,%rbp
    b32c:	48 83 ec 20          	sub    $0x20,%rsp
    b330:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b334:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b338:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    b33c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b340:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b344:	48 89 d6             	mov    %rdx,%rsi
    b347:	48 89 c7             	mov    %rax,%rdi
    b34a:	e8 de 0c 00 00       	call   c02d <_ZSt8_DestroyIP16VkPresentModeKHREvT_S2_>
    }
    b34f:	90                   	nop
    b350:	c9                   	leave
    b351:	c3                   	ret

000000000000b352 <_ZNKSt6vectorI16VkPresentModeKHRSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    b352:	55                   	push   %rbp
    b353:	48 89 e5             	mov    %rsp,%rbp
    b356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b35a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    b35e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b362:	5d                   	pop    %rbp
    b363:	c3                   	ret

000000000000b364 <_ZNSaI16VkPresentModeKHREC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    b364:	55                   	push   %rbp
    b365:	48 89 e5             	mov    %rsp,%rbp
    b368:	48 83 ec 10          	sub    $0x10,%rsp
    b36c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b370:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    b374:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b37c:	48 89 d6             	mov    %rdx,%rsi
    b37f:	48 89 c7             	mov    %rax,%rdi
    b382:	e8 cd 0c 00 00       	call   c054 <_ZNSt15__new_allocatorI16VkPresentModeKHREC1ERKS1_>
    b387:	90                   	nop
    b388:	c9                   	leave
    b389:	c3                   	ret

000000000000b38a <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
    b38a:	55                   	push   %rbp
    b38b:	48 89 e5             	mov    %rsp,%rbp
    b38e:	48 83 ec 20          	sub    $0x20,%rsp
    b392:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b396:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b39a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    b39e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    b3a3:	74 17                	je     b3bc <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    b3a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b3a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b3ad:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b3b1:	48 89 ce             	mov    %rcx,%rsi
    b3b4:	48 89 c7             	mov    %rax,%rdi
    b3b7:	e8 a7 0c 00 00       	call   c063 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE10deallocateERS1_PS0_m>
      }
    b3bc:	90                   	nop
    b3bd:	c9                   	leave
    b3be:	c3                   	ret
    b3bf:	90                   	nop

000000000000b3c0 <_ZNSt15__new_allocatorIP9VkImage_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b3c0:	55                   	push   %rbp
    b3c1:	48 89 e5             	mov    %rsp,%rbp
    b3c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b3c8:	90                   	nop
    b3c9:	5d                   	pop    %rbp
    b3ca:	c3                   	ret
    b3cb:	90                   	nop

000000000000b3cc <_ZNSt15__new_allocatorIP9VkImage_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    b3cc:	55                   	push   %rbp
    b3cd:	48 89 e5             	mov    %rsp,%rbp
    b3d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b3d4:	90                   	nop
    b3d5:	5d                   	pop    %rbp
    b3d6:	c3                   	ret

000000000000b3d7 <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    b3d7:	55                   	push   %rbp
    b3d8:	48 89 e5             	mov    %rsp,%rbp
    b3db:	53                   	push   %rbx
    b3dc:	48 83 ec 28          	sub    $0x28,%rsp
    b3e0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b3e4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    b3e8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b3ec:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b3f0:	48 89 d6             	mov    %rdx,%rsi
    b3f3:	48 89 c7             	mov    %rax,%rdi
    b3f6:	e8 25 01 00 00       	call   b520 <_ZNSaIP9VkImage_TEC1ERKS1_>
    b3fb:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b3ff:	48 89 c7             	mov    %rax,%rdi
    b402:	e8 8a 0c 00 00       	call   c091 <_ZNSt6vectorIP9VkImage_TSaIS1_EE11_S_max_sizeERKS2_>
    b407:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    b40b:	0f 92 c3             	setb   %bl
    b40e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b412:	48 89 c7             	mov    %rax,%rdi
    b415:	e8 08 f0 ff ff       	call   a422 <_ZNSaIP9VkImage_TED1Ev>
    b41a:	84 db                	test   %bl,%bl
    b41c:	74 0f                	je     b42d <_ZNSt6vectorIP9VkImage_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
    b41e:	48 8d 05 63 6f 01 00 	lea    0x16f63(%rip),%rax        # 22388 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x158>
    b425:	48 89 c7             	mov    %rax,%rdi
    b428:	e8 d3 8d ff ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    b42d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    b431:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b435:	c9                   	leave
    b436:	c3                   	ret
    b437:	90                   	nop

000000000000b438 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    b438:	55                   	push   %rbp
    b439:	48 89 e5             	mov    %rsp,%rbp
    b43c:	53                   	push   %rbx
    b43d:	48 83 ec 28          	sub    $0x28,%rsp
    b441:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b445:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    b449:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    b44d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b451:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b455:	48 89 d6             	mov    %rdx,%rsi
    b458:	48 89 c7             	mov    %rax,%rdi
    b45b:	e8 74 0c 00 00       	call   c0d4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
    b460:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    b464:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b468:	48 89 d6             	mov    %rdx,%rsi
    b46b:	48 89 c7             	mov    %rax,%rdi
    b46e:	e8 93 0c 00 00       	call   c106 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_M_create_storageEm>
    b473:	eb 1a                	jmp    b48f <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1EmRKS2_+0x57>
    b475:	48 89 c3             	mov    %rax,%rbx
    b478:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b47c:	48 89 c7             	mov    %rax,%rdi
    b47f:	e8 f6 e2 ff ff       	call   977a <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implD1Ev>
    b484:	48 89 d8             	mov    %rbx,%rax
    b487:	48 89 c7             	mov    %rax,%rdi
    b48a:	e8 e1 94 ff ff       	call   4970 <_Unwind_Resume@plt>
    b48f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b493:	c9                   	leave
    b494:	c3                   	ret
    b495:	90                   	nop

000000000000b496 <_ZNSt6vectorIP9VkImage_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
    b496:	55                   	push   %rbp
    b497:	48 89 e5             	mov    %rsp,%rbp
    b49a:	48 83 ec 10          	sub    $0x10,%rsp
    b49e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b4a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
    b4a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4aa:	48 89 c7             	mov    %rax,%rdi
    b4ad:	e8 24 00 00 00       	call   b4d6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
    b4b2:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    b4b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4b9:	48 8b 00             	mov    (%rax),%rax
    b4bc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b4c0:	48 89 ce             	mov    %rcx,%rsi
    b4c3:	48 89 c7             	mov    %rax,%rdi
    b4c6:	e8 91 0c 00 00       	call   c15c <_ZSt27__uninitialized_default_n_aIPP9VkImage_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
    b4cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b4cf:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    b4d3:	90                   	nop
    b4d4:	c9                   	leave
    b4d5:	c3                   	ret

000000000000b4d6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    b4d6:	55                   	push   %rbp
    b4d7:	48 89 e5             	mov    %rsp,%rbp
    b4da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    b4de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b4e2:	5d                   	pop    %rbp
    b4e3:	c3                   	ret

000000000000b4e4 <_ZSt8_DestroyIPP9VkImage_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    b4e4:	55                   	push   %rbp
    b4e5:	48 89 e5             	mov    %rsp,%rbp
    b4e8:	48 83 ec 20          	sub    $0x20,%rsp
    b4ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b4f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b4f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
    b4f8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b4fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b500:	48 89 d6             	mov    %rdx,%rsi
    b503:	48 89 c7             	mov    %rax,%rdi
    b506:	e8 7a 0c 00 00       	call   c185 <_ZSt8_DestroyIPP9VkImage_TEvT_S3_>
    }
    b50b:	90                   	nop
    b50c:	c9                   	leave
    b50d:	c3                   	ret

000000000000b50e <_ZNKSt6vectorIP9VkImage_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    b50e:	55                   	push   %rbp
    b50f:	48 89 e5             	mov    %rsp,%rbp
    b512:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b516:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    b51a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b51e:	5d                   	pop    %rbp
    b51f:	c3                   	ret

000000000000b520 <_ZNSaIP9VkImage_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    b520:	55                   	push   %rbp
    b521:	48 89 e5             	mov    %rsp,%rbp
    b524:	48 83 ec 10          	sub    $0x10,%rsp
    b528:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b52c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    b530:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b534:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b538:	48 89 d6             	mov    %rdx,%rsi
    b53b:	48 89 c7             	mov    %rax,%rdi
    b53e:	e8 69 0c 00 00       	call   c1ac <_ZNSt15__new_allocatorIP9VkImage_TEC1ERKS2_>
    b543:	90                   	nop
    b544:	c9                   	leave
    b545:	c3                   	ret

000000000000b546 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
    b546:	55                   	push   %rbp
    b547:	48 89 e5             	mov    %rsp,%rbp
    b54a:	48 83 ec 20          	sub    $0x20,%rsp
    b54e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b552:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b556:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    b55a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    b55f:	74 17                	je     b578 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    b561:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b565:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b569:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b56d:	48 89 ce             	mov    %rcx,%rsi
    b570:	48 89 c7             	mov    %rax,%rdi
    b573:	e8 43 0c 00 00       	call   c1bb <_ZNSt16allocator_traitsISaIP9VkImage_TEE10deallocateERS2_PS1_m>
      }
    b578:	90                   	nop
    b579:	c9                   	leave
    b57a:	c3                   	ret

000000000000b57b <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    b57b:	55                   	push   %rbp
    b57c:	48 89 e5             	mov    %rsp,%rbp
    b57f:	48 83 ec 20          	sub    $0x20,%rsp
    b583:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    b587:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
    b58e:	03 3f 00 
    b591:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    b595:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b599:	48 89 c7             	mov    %rax,%rdi
    b59c:	e8 48 0c 00 00       	call   c1e9 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8max_sizeERKS1_>
    b5a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    b5a5:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    b5a9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b5ad:	48 89 d6             	mov    %rdx,%rsi
    b5b0:	48 89 c7             	mov    %rax,%rdi
    b5b3:	e8 df a7 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    b5b8:	48 8b 00             	mov    (%rax),%rax
      }
    b5bb:	c9                   	leave
    b5bc:	c3                   	ret
    b5bd:	90                   	nop

000000000000b5be <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    b5be:	55                   	push   %rbp
    b5bf:	48 89 e5             	mov    %rsp,%rbp
    b5c2:	48 83 ec 10          	sub    $0x10,%rsp
    b5c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b5ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    b5ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b5d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b5d6:	48 89 d6             	mov    %rdx,%rsi
    b5d9:	48 89 c7             	mov    %rax,%rdi
    b5dc:	e8 e9 f0 ff ff       	call   a6ca <_ZNSaI17VkLayerPropertiesEC1ERKS0_>
    b5e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b5e5:	48 89 c7             	mov    %rax,%rdi
    b5e8:	e8 17 0c 00 00       	call   c204 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    b5ed:	90                   	nop
    b5ee:	c9                   	leave
    b5ef:	c3                   	ret

000000000000b5f0 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    b5f0:	55                   	push   %rbp
    b5f1:	48 89 e5             	mov    %rsp,%rbp
    b5f4:	48 83 ec 10          	sub    $0x10,%rsp
    b5f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b5fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    b600:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b608:	48 89 d6             	mov    %rdx,%rsi
    b60b:	48 89 c7             	mov    %rax,%rdi
    b60e:	e8 1f 0c 00 00       	call   c232 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm>
    b613:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b617:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    b61a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b61e:	48 8b 10             	mov    (%rax),%rdx
    b621:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b625:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    b629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b62d:	48 8b 08             	mov    (%rax),%rcx
    b630:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b634:	48 89 d0             	mov    %rdx,%rax
    b637:	48 c1 e0 06          	shl    $0x6,%rax
    b63b:	48 01 d0             	add    %rdx,%rax
    b63e:	48 c1 e0 03          	shl    $0x3,%rax
    b642:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    b646:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b64a:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    b64e:	90                   	nop
    b64f:	c9                   	leave
    b650:	c3                   	ret

000000000000b651 <_ZSt27__uninitialized_default_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    b651:	55                   	push   %rbp
    b652:	48 89 e5             	mov    %rsp,%rbp
    b655:	48 83 ec 20          	sub    $0x20,%rsp
    b659:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b65d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b661:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    b665:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b669:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b66d:	48 89 d6             	mov    %rdx,%rsi
    b670:	48 89 c7             	mov    %rax,%rdi
    b673:	e8 ed 0b 00 00       	call   c265 <_ZSt25__uninitialized_default_nIP17VkLayerPropertiesmET_S2_T0_>
    b678:	c9                   	leave
    b679:	c3                   	ret

000000000000b67a <_ZSt8_DestroyIP17VkLayerPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    b67a:	55                   	push   %rbp
    b67b:	48 89 e5             	mov    %rsp,%rbp
    b67e:	48 83 ec 10          	sub    $0x10,%rsp
    b682:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b686:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    b68a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b68e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b692:	48 89 d6             	mov    %rdx,%rsi
    b695:	48 89 c7             	mov    %rax,%rdi
    b698:	e8 f1 0b 00 00       	call   c28e <_ZNSt12_Destroy_auxILb1EE9__destroyIP17VkLayerPropertiesEEvT_S4_>
    }
    b69d:	90                   	nop
    b69e:	c9                   	leave
    b69f:	c3                   	ret

000000000000b6a0 <_ZNSt15__new_allocatorI17VkLayerPropertiesEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    b6a0:	55                   	push   %rbp
    b6a1:	48 89 e5             	mov    %rsp,%rbp
    b6a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b6a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b6ac:	90                   	nop
    b6ad:	5d                   	pop    %rbp
    b6ae:	c3                   	ret

000000000000b6af <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b6af:	55                   	push   %rbp
    b6b0:	48 89 e5             	mov    %rsp,%rbp
    b6b3:	48 83 ec 20          	sub    $0x20,%rsp
    b6b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b6bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b6bf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    b6c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b6c7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b6cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6cf:	48 89 ce             	mov    %rcx,%rsi
    b6d2:	48 89 c7             	mov    %rax,%rdi
    b6d5:	e8 c4 0b 00 00       	call   c29e <_ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m>
    b6da:	90                   	nop
    b6db:	c9                   	leave
    b6dc:	c3                   	ret

000000000000b6dd <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    b6dd:	55                   	push   %rbp
    b6de:	48 89 e5             	mov    %rsp,%rbp
    b6e1:	48 83 ec 20          	sub    $0x20,%rsp
    b6e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    b6e9:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    b6f0:	07 7e 00 
    b6f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    b6f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b6fb:	48 89 c7             	mov    %rax,%rdi
    b6fe:	e8 d5 0b 00 00       	call   c2d8 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8max_sizeERKS1_>
    b703:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    b707:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    b70b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b70f:	48 89 d6             	mov    %rdx,%rsi
    b712:	48 89 c7             	mov    %rax,%rdi
    b715:	e8 7d a6 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    b71a:	48 8b 00             	mov    (%rax),%rax
      }
    b71d:	c9                   	leave
    b71e:	c3                   	ret
    b71f:	90                   	nop

000000000000b720 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    b720:	55                   	push   %rbp
    b721:	48 89 e5             	mov    %rsp,%rbp
    b724:	48 83 ec 10          	sub    $0x10,%rsp
    b728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b72c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    b730:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b738:	48 89 d6             	mov    %rdx,%rsi
    b73b:	48 89 c7             	mov    %rax,%rdi
    b73e:	e8 43 f1 ff ff       	call   a886 <_ZNSaI21VkExtensionPropertiesEC1ERKS0_>
    b743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b747:	48 89 c7             	mov    %rax,%rdi
    b74a:	e8 a3 0b 00 00       	call   c2f2 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    b74f:	90                   	nop
    b750:	c9                   	leave
    b751:	c3                   	ret

000000000000b752 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    b752:	55                   	push   %rbp
    b753:	48 89 e5             	mov    %rsp,%rbp
    b756:	48 83 ec 10          	sub    $0x10,%rsp
    b75a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b75e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    b762:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b76a:	48 89 d6             	mov    %rdx,%rsi
    b76d:	48 89 c7             	mov    %rax,%rdi
    b770:	e8 ab 0b 00 00       	call   c320 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm>
    b775:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b779:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    b77c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b780:	48 8b 10             	mov    (%rax),%rdx
    b783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b787:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    b78b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b78f:	48 8b 08             	mov    (%rax),%rcx
    b792:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b796:	48 89 d0             	mov    %rdx,%rax
    b799:	48 c1 e0 06          	shl    $0x6,%rax
    b79d:	48 01 d0             	add    %rdx,%rax
    b7a0:	48 c1 e0 02          	shl    $0x2,%rax
    b7a4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    b7a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7ac:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    b7b0:	90                   	nop
    b7b1:	c9                   	leave
    b7b2:	c3                   	ret

000000000000b7b3 <_ZSt27__uninitialized_default_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    b7b3:	55                   	push   %rbp
    b7b4:	48 89 e5             	mov    %rsp,%rbp
    b7b7:	48 83 ec 20          	sub    $0x20,%rsp
    b7bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7bf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b7c3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    b7c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7cf:	48 89 d6             	mov    %rdx,%rsi
    b7d2:	48 89 c7             	mov    %rax,%rdi
    b7d5:	e8 79 0b 00 00       	call   c353 <_ZSt25__uninitialized_default_nIP21VkExtensionPropertiesmET_S2_T0_>
    b7da:	c9                   	leave
    b7db:	c3                   	ret

000000000000b7dc <_ZSt8_DestroyIP21VkExtensionPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    b7dc:	55                   	push   %rbp
    b7dd:	48 89 e5             	mov    %rsp,%rbp
    b7e0:	48 83 ec 10          	sub    $0x10,%rsp
    b7e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    b7ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7f4:	48 89 d6             	mov    %rdx,%rsi
    b7f7:	48 89 c7             	mov    %rax,%rdi
    b7fa:	e8 7d 0b 00 00       	call   c37c <_ZNSt12_Destroy_auxILb1EE9__destroyIP21VkExtensionPropertiesEEvT_S4_>
    }
    b7ff:	90                   	nop
    b800:	c9                   	leave
    b801:	c3                   	ret

000000000000b802 <_ZNSt15__new_allocatorI21VkExtensionPropertiesEC1ERKS1_>:
    b802:	55                   	push   %rbp
    b803:	48 89 e5             	mov    %rsp,%rbp
    b806:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b80a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b80e:	90                   	nop
    b80f:	5d                   	pop    %rbp
    b810:	c3                   	ret

000000000000b811 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b811:	55                   	push   %rbp
    b812:	48 89 e5             	mov    %rsp,%rbp
    b815:	48 83 ec 20          	sub    $0x20,%rsp
    b819:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b81d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b821:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    b825:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b829:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b82d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b831:	48 89 ce             	mov    %rcx,%rsi
    b834:	48 89 c7             	mov    %rax,%rdi
    b837:	e8 50 0b 00 00       	call   c38c <_ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m>
    b83c:	90                   	nop
    b83d:	c9                   	leave
    b83e:	c3                   	ret

000000000000b83f <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    b83f:	55                   	push   %rbp
    b840:	48 89 e5             	mov    %rsp,%rbp
    b843:	48 83 ec 20          	sub    $0x20,%rsp
    b847:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    b84b:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    b852:	ff ff 0f 
    b855:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    b859:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b85d:	48 89 c7             	mov    %rax,%rdi
    b860:	e8 61 0b 00 00       	call   c3c6 <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>
    b865:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    b869:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    b86d:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b871:	48 89 d6             	mov    %rdx,%rsi
    b874:	48 89 c7             	mov    %rax,%rdi
    b877:	e8 1b a5 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    b87c:	48 8b 00             	mov    (%rax),%rax
      }
    b87f:	c9                   	leave
    b880:	c3                   	ret
    b881:	90                   	nop

000000000000b882 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    b882:	55                   	push   %rbp
    b883:	48 89 e5             	mov    %rsp,%rbp
    b886:	48 83 ec 10          	sub    $0x10,%rsp
    b88a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b88e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    b892:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b89a:	48 89 d6             	mov    %rdx,%rsi
    b89d:	48 89 c7             	mov    %rax,%rdi
    b8a0:	e8 61 f1 ff ff       	call   aa06 <_ZNSaIPKcEC1ERKS1_>
    b8a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8a9:	48 89 c7             	mov    %rax,%rdi
    b8ac:	e8 2f 0b 00 00       	call   c3e0 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    b8b1:	90                   	nop
    b8b2:	c9                   	leave
    b8b3:	c3                   	ret

000000000000b8b4 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    b8b4:	55                   	push   %rbp
    b8b5:	48 89 e5             	mov    %rsp,%rbp
    b8b8:	48 83 ec 10          	sub    $0x10,%rsp
    b8bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b8c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    b8c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b8c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8cc:	48 89 d6             	mov    %rdx,%rsi
    b8cf:	48 89 c7             	mov    %rax,%rdi
    b8d2:	e8 37 0b 00 00       	call   c40e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
    b8d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b8db:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    b8de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8e2:	48 8b 10             	mov    (%rax),%rdx
    b8e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8e9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    b8ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8f1:	48 8b 00             	mov    (%rax),%rax
    b8f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b8f8:	48 c1 e2 03          	shl    $0x3,%rdx
    b8fc:	48 01 c2             	add    %rax,%rdx
    b8ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b903:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    b907:	90                   	nop
    b908:	c9                   	leave
    b909:	c3                   	ret

000000000000b90a <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    b90a:	55                   	push   %rbp
    b90b:	48 89 e5             	mov    %rsp,%rbp
    b90e:	48 83 ec 20          	sub    $0x20,%rsp
    b912:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b916:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b91a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    b91e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b922:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b926:	48 89 d6             	mov    %rdx,%rsi
    b929:	48 89 c7             	mov    %rax,%rdi
    b92c:	e8 10 0b 00 00       	call   c441 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>
    b931:	c9                   	leave
    b932:	c3                   	ret
    b933:	90                   	nop

000000000000b934 <_ZNSt15__new_allocatorIPKcEC1ERKS2_>:
    b934:	55                   	push   %rbp
    b935:	48 89 e5             	mov    %rsp,%rbp
    b938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b93c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b940:	90                   	nop
    b941:	5d                   	pop    %rbp
    b942:	c3                   	ret

000000000000b943 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b943:	55                   	push   %rbp
    b944:	48 89 e5             	mov    %rsp,%rbp
    b947:	48 83 ec 20          	sub    $0x20,%rsp
    b94b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b94f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b953:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    b957:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b95b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b95f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b963:	48 89 ce             	mov    %rcx,%rsi
    b966:	48 89 c7             	mov    %rax,%rdi
    b969:	e8 fc 0a 00 00       	call   c46a <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>
    b96e:	90                   	nop
    b96f:	c9                   	leave
    b970:	c3                   	ret

000000000000b971 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    b971:	55                   	push   %rbp
    b972:	48 89 e5             	mov    %rsp,%rbp
    b975:	48 83 ec 20          	sub    $0x20,%rsp
    b979:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    b97d:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    b984:	ff ff 0f 
    b987:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    b98b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b98f:	48 89 c7             	mov    %rax,%rdi
    b992:	e8 04 0b 00 00       	call   c49b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>
    b997:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    b99b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    b99f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    b9a3:	48 89 d6             	mov    %rdx,%rsi
    b9a6:	48 89 c7             	mov    %rax,%rdi
    b9a9:	e8 e9 a3 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    b9ae:	48 8b 00             	mov    (%rax),%rax
      }
    b9b1:	c9                   	leave
    b9b2:	c3                   	ret
    b9b3:	90                   	nop

000000000000b9b4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    b9b4:	55                   	push   %rbp
    b9b5:	48 89 e5             	mov    %rsp,%rbp
    b9b8:	48 83 ec 10          	sub    $0x10,%rsp
    b9bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    b9c4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b9c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9cc:	48 89 d6             	mov    %rdx,%rsi
    b9cf:	48 89 c7             	mov    %rax,%rdi
    b9d2:	e8 eb f1 ff ff       	call   abc2 <_ZNSaIP18VkPhysicalDevice_TEC1ERKS1_>
    b9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9db:	48 89 c7             	mov    %rax,%rdi
    b9de:	e8 d3 0a 00 00       	call   c4b6 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    b9e3:	90                   	nop
    b9e4:	c9                   	leave
    b9e5:	c3                   	ret

000000000000b9e6 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    b9e6:	55                   	push   %rbp
    b9e7:	48 89 e5             	mov    %rsp,%rbp
    b9ea:	48 83 ec 10          	sub    $0x10,%rsp
    b9ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    b9f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b9fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9fe:	48 89 d6             	mov    %rdx,%rsi
    ba01:	48 89 c7             	mov    %rax,%rdi
    ba04:	e8 db 0a 00 00       	call   c4e4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>
    ba09:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ba0d:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    ba10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba14:	48 8b 10             	mov    (%rax),%rdx
    ba17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba1b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    ba1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba23:	48 8b 00             	mov    (%rax),%rax
    ba26:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ba2a:	48 c1 e2 03          	shl    $0x3,%rdx
    ba2e:	48 01 c2             	add    %rax,%rdx
    ba31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba35:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    ba39:	90                   	nop
    ba3a:	c9                   	leave
    ba3b:	c3                   	ret

000000000000ba3c <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    ba3c:	55                   	push   %rbp
    ba3d:	48 89 e5             	mov    %rsp,%rbp
    ba40:	48 83 ec 20          	sub    $0x20,%rsp
    ba44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ba4c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    ba50:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ba54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba58:	48 89 d6             	mov    %rdx,%rsi
    ba5b:	48 89 c7             	mov    %rax,%rdi
    ba5e:	e8 b4 0a 00 00       	call   c517 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>
    ba63:	c9                   	leave
    ba64:	c3                   	ret

000000000000ba65 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    ba65:	55                   	push   %rbp
    ba66:	48 89 e5             	mov    %rsp,%rbp
    ba69:	48 83 ec 10          	sub    $0x10,%rsp
    ba6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    ba75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ba79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba7d:	48 89 d6             	mov    %rdx,%rsi
    ba80:	48 89 c7             	mov    %rax,%rdi
    ba83:	e8 b8 0a 00 00       	call   c540 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
    }
    ba88:	90                   	nop
    ba89:	c9                   	leave
    ba8a:	c3                   	ret
    ba8b:	90                   	nop

000000000000ba8c <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TEC1ERKS2_>:
    ba8c:	55                   	push   %rbp
    ba8d:	48 89 e5             	mov    %rsp,%rbp
    ba90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ba98:	90                   	nop
    ba99:	5d                   	pop    %rbp
    ba9a:	c3                   	ret

000000000000ba9b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    ba9b:	55                   	push   %rbp
    ba9c:	48 89 e5             	mov    %rsp,%rbp
    ba9f:	48 83 ec 20          	sub    $0x20,%rsp
    baa3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    baa7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    baab:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    baaf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bab3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    babb:	48 89 ce             	mov    %rcx,%rsi
    babe:	48 89 c7             	mov    %rax,%rdi
    bac1:	e8 8a 0a 00 00       	call   c550 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>
    bac6:	90                   	nop
    bac7:	c9                   	leave
    bac8:	c3                   	ret

000000000000bac9 <_ZNSt6vectorI23VkQueueFamilyPropertiesSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    bac9:	55                   	push   %rbp
    baca:	48 89 e5             	mov    %rsp,%rbp
    bacd:	48 83 ec 20          	sub    $0x20,%rsp
    bad1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    bad5:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    badc:	55 55 05 
    badf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    bae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bae7:	48 89 c7             	mov    %rax,%rdi
    baea:	e8 92 0a 00 00       	call   c581 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8max_sizeERKS1_>
    baef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    baf3:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    baf7:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    bafb:	48 89 d6             	mov    %rdx,%rsi
    bafe:	48 89 c7             	mov    %rax,%rdi
    bb01:	e8 91 a2 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    bb06:	48 8b 00             	mov    (%rax),%rax
      }
    bb09:	c9                   	leave
    bb0a:	c3                   	ret
    bb0b:	90                   	nop

000000000000bb0c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    bb0c:	55                   	push   %rbp
    bb0d:	48 89 e5             	mov    %rsp,%rbp
    bb10:	48 83 ec 10          	sub    $0x10,%rsp
    bb14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    bb1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bb20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb24:	48 89 d6             	mov    %rdx,%rsi
    bb27:	48 89 c7             	mov    %rax,%rdi
    bb2a:	e8 4f f2 ff ff       	call   ad7e <_ZNSaI23VkQueueFamilyPropertiesEC1ERKS0_>
    bb2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb33:	48 89 c7             	mov    %rax,%rdi
    bb36:	e8 61 0a 00 00       	call   c59c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    bb3b:	90                   	nop
    bb3c:	c9                   	leave
    bb3d:	c3                   	ret

000000000000bb3e <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    bb3e:	55                   	push   %rbp
    bb3f:	48 89 e5             	mov    %rsp,%rbp
    bb42:	48 83 ec 10          	sub    $0x10,%rsp
    bb46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    bb4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bb52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb56:	48 89 d6             	mov    %rdx,%rsi
    bb59:	48 89 c7             	mov    %rax,%rdi
    bb5c:	e8 69 0a 00 00       	call   c5ca <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm>
    bb61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    bb65:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    bb68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb6c:	48 8b 10             	mov    (%rax),%rdx
    bb6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb73:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    bb77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb7b:	48 8b 08             	mov    (%rax),%rcx
    bb7e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bb82:	48 89 d0             	mov    %rdx,%rax
    bb85:	48 01 c0             	add    %rax,%rax
    bb88:	48 01 d0             	add    %rdx,%rax
    bb8b:	48 c1 e0 03          	shl    $0x3,%rax
    bb8f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    bb93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb97:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    bb9b:	90                   	nop
    bb9c:	c9                   	leave
    bb9d:	c3                   	ret

000000000000bb9e <_ZSt27__uninitialized_default_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    bb9e:	55                   	push   %rbp
    bb9f:	48 89 e5             	mov    %rsp,%rbp
    bba2:	48 83 ec 20          	sub    $0x20,%rsp
    bba6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbaa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bbae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    bbb2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bbb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbba:	48 89 d6             	mov    %rdx,%rsi
    bbbd:	48 89 c7             	mov    %rax,%rdi
    bbc0:	e8 38 0a 00 00       	call   c5fd <_ZSt25__uninitialized_default_nIP23VkQueueFamilyPropertiesmET_S2_T0_>
    bbc5:	c9                   	leave
    bbc6:	c3                   	ret

000000000000bbc7 <_ZSt8_DestroyIP23VkQueueFamilyPropertiesEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    bbc7:	55                   	push   %rbp
    bbc8:	48 89 e5             	mov    %rsp,%rbp
    bbcb:	48 83 ec 10          	sub    $0x10,%rsp
    bbcf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbd3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    bbd7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bbdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbdf:	48 89 d6             	mov    %rdx,%rsi
    bbe2:	48 89 c7             	mov    %rax,%rdi
    bbe5:	e8 3c 0a 00 00       	call   c626 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23VkQueueFamilyPropertiesEEvT_S4_>
    }
    bbea:	90                   	nop
    bbeb:	c9                   	leave
    bbec:	c3                   	ret
    bbed:	90                   	nop

000000000000bbee <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesEC1ERKS1_>:
    bbee:	55                   	push   %rbp
    bbef:	48 89 e5             	mov    %rsp,%rbp
    bbf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbf6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bbfa:	90                   	nop
    bbfb:	5d                   	pop    %rbp
    bbfc:	c3                   	ret

000000000000bbfd <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    bbfd:	55                   	push   %rbp
    bbfe:	48 89 e5             	mov    %rsp,%rbp
    bc01:	48 83 ec 20          	sub    $0x20,%rsp
    bc05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bc0d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    bc11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bc15:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bc19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc1d:	48 89 ce             	mov    %rcx,%rsi
    bc20:	48 89 c7             	mov    %rax,%rdi
    bc23:	e8 0e 0a 00 00       	call   c636 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m>
    bc28:	90                   	nop
    bc29:	c9                   	leave
    bc2a:	c3                   	ret

000000000000bc2b <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    bc2b:	55                   	push   %rbp
    bc2c:	48 89 e5             	mov    %rsp,%rbp
    bc2f:	48 83 ec 20          	sub    $0x20,%rsp
    bc33:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    bc37:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
    bc3e:	49 92 04 
    bc41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    bc45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc49:	48 89 c7             	mov    %rax,%rdi
    bc4c:	e8 1e 0a 00 00       	call   c66f <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8max_sizeERKS3_>
    bc51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    bc55:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    bc59:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    bc5d:	48 89 d6             	mov    %rdx,%rsi
    bc60:	48 89 c7             	mov    %rax,%rdi
    bc63:	e8 2f a1 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    bc68:	48 8b 00             	mov    (%rax),%rax
      }
    bc6b:	c9                   	leave
    bc6c:	c3                   	ret
    bc6d:	90                   	nop

000000000000bc6e <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    bc6e:	55                   	push   %rbp
    bc6f:	48 89 e5             	mov    %rsp,%rbp
    bc72:	48 83 ec 10          	sub    $0x10,%rsp
    bc76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    bc7e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bc82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc86:	48 89 d6             	mov    %rdx,%rsi
    bc89:	48 89 c7             	mov    %rax,%rdi
    bc8c:	e8 5b f3 ff ff       	call   afec <_ZNSaISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS2_>
    bc91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc95:	48 89 c7             	mov    %rax,%rdi
    bc98:	e8 ed 09 00 00       	call   c68a <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
    bc9d:	90                   	nop
    bc9e:	c9                   	leave
    bc9f:	c3                   	ret

000000000000bca0 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    bca0:	55                   	push   %rbp
    bca1:	48 89 e5             	mov    %rsp,%rbp
    bca4:	48 83 ec 10          	sub    $0x10,%rsp
    bca8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bcac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    bcb0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bcb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcb8:	48 89 d6             	mov    %rdx,%rsi
    bcbb:	48 89 c7             	mov    %rax,%rdi
    bcbe:	e8 f5 09 00 00       	call   c6b8 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm>
    bcc3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    bcc7:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    bcca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcce:	48 8b 10             	mov    (%rax),%rdx
    bcd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcd5:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    bcd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcdd:	48 8b 08             	mov    (%rax),%rcx
    bce0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bce4:	48 89 d0             	mov    %rdx,%rax
    bce7:	48 c1 e0 03          	shl    $0x3,%rax
    bceb:	48 29 d0             	sub    %rdx,%rax
    bcee:	48 c1 e0 02          	shl    $0x2,%rax
    bcf2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    bcf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcfa:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    bcfe:	90                   	nop
    bcff:	c9                   	leave
    bd00:	c3                   	ret

000000000000bd01 <_ZSt27__uninitialized_default_n_aIPSt8optionalI23VkQueueFamilyPropertiesEmS2_ET_S4_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    bd01:	55                   	push   %rbp
    bd02:	48 89 e5             	mov    %rsp,%rbp
    bd05:	48 83 ec 20          	sub    $0x20,%rsp
    bd09:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd0d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bd11:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    bd15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bd19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd1d:	48 89 d6             	mov    %rdx,%rsi
    bd20:	48 89 c7             	mov    %rax,%rdi
    bd23:	e8 c3 09 00 00       	call   c6eb <_ZSt25__uninitialized_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmET_S4_T0_>
    bd28:	c9                   	leave
    bd29:	c3                   	ret

000000000000bd2a <_ZSt8_DestroyIPSt8optionalI23VkQueueFamilyPropertiesEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    bd2a:	55                   	push   %rbp
    bd2b:	48 89 e5             	mov    %rsp,%rbp
    bd2e:	48 83 ec 10          	sub    $0x10,%rsp
    bd32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    bd3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bd3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd42:	48 89 d6             	mov    %rdx,%rsi
    bd45:	48 89 c7             	mov    %rax,%rdi
    bd48:	e8 c7 09 00 00       	call   c714 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt8optionalI23VkQueueFamilyPropertiesEEEvT_S6_>
    }
    bd4d:	90                   	nop
    bd4e:	c9                   	leave
    bd4f:	c3                   	ret

000000000000bd50 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE6_M_getEv>:
      _M_get() noexcept
    bd50:	55                   	push   %rbp
    bd51:	48 89 e5             	mov    %rsp,%rbp
    bd54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
    bd58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd5c:	5d                   	pop    %rbp
    bd5d:	c3                   	ret

000000000000bd5e <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE12_M_constructIJRKS0_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
    bd5e:	55                   	push   %rbp
    bd5f:	48 89 e5             	mov    %rsp,%rbp
    bd62:	53                   	push   %rbx
    bd63:	48 83 ec 18          	sub    $0x18,%rsp
    bd67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    bd6b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  std::_Construct(std::__addressof(this->_M_payload._M_value),
    bd6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bd73:	48 89 c7             	mov    %rax,%rdi
    bd76:	e8 2f f2 ff ff       	call   afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    bd7b:	48 89 c3             	mov    %rax,%rbx
    bd7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd82:	48 89 c7             	mov    %rax,%rdi
    bd85:	e8 99 09 00 00       	call   c723 <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>
    bd8a:	48 89 de             	mov    %rbx,%rsi
    bd8d:	48 89 c7             	mov    %rax,%rdi
    bd90:	e8 9c 09 00 00       	call   c731 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJRKS0_EEvPT_DpOT0_>
	  this->_M_engaged = true;
    bd95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd99:	c6 40 18 01          	movb   $0x1,0x18(%rax)
	}
    bd9d:	90                   	nop
    bd9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    bda2:	c9                   	leave
    bda3:	c3                   	ret

000000000000bda4 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEEC1ERKS3_>:
    bda4:	55                   	push   %rbp
    bda5:	48 89 e5             	mov    %rsp,%rbp
    bda8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bdac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bdb0:	90                   	nop
    bdb1:	5d                   	pop    %rbp
    bdb2:	c3                   	ret

000000000000bdb3 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    bdb3:	55                   	push   %rbp
    bdb4:	48 89 e5             	mov    %rsp,%rbp
    bdb7:	48 83 ec 20          	sub    $0x20,%rsp
    bdbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bdbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bdc3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    bdc7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bdcb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bdcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdd3:	48 89 ce             	mov    %rcx,%rsi
    bdd6:	48 89 c7             	mov    %rax,%rdi
    bdd9:	e8 a4 09 00 00       	call   c782 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE10deallocateEPS2_m>
    bdde:	90                   	nop
    bddf:	c9                   	leave
    bde0:	c3                   	ret

000000000000bde1 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    bde1:	55                   	push   %rbp
    bde2:	48 89 e5             	mov    %rsp,%rbp
    bde5:	48 83 ec 20          	sub    $0x20,%rsp
    bde9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    bded:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    bdf4:	ff ff 0f 
    bdf7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    bdfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bdff:	48 89 c7             	mov    %rax,%rdi
    be02:	e8 b5 09 00 00       	call   c7bc <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8max_sizeERKS1_>
    be07:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    be0b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    be0f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    be13:	48 89 d6             	mov    %rdx,%rsi
    be16:	48 89 c7             	mov    %rax,%rdi
    be19:	e8 79 9f ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    be1e:	48 8b 00             	mov    (%rax),%rax
      }
    be21:	c9                   	leave
    be22:	c3                   	ret
    be23:	90                   	nop

000000000000be24 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    be24:	55                   	push   %rbp
    be25:	48 89 e5             	mov    %rsp,%rbp
    be28:	48 83 ec 10          	sub    $0x10,%rsp
    be2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    be34:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    be38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be3c:	48 89 d6             	mov    %rdx,%rsi
    be3f:	48 89 c7             	mov    %rax,%rdi
    be42:	e8 61 f3 ff ff       	call   b1a8 <_ZNSaI18VkSurfaceFormatKHREC1ERKS0_>
    be47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be4b:	48 89 c7             	mov    %rax,%rdi
    be4e:	e8 83 09 00 00       	call   c7d6 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    be53:	90                   	nop
    be54:	c9                   	leave
    be55:	c3                   	ret

000000000000be56 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    be56:	55                   	push   %rbp
    be57:	48 89 e5             	mov    %rsp,%rbp
    be5a:	48 83 ec 10          	sub    $0x10,%rsp
    be5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be62:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    be66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    be6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be6e:	48 89 d6             	mov    %rdx,%rsi
    be71:	48 89 c7             	mov    %rax,%rdi
    be74:	e8 8b 09 00 00       	call   c804 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm>
    be79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    be7d:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    be80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be84:	48 8b 10             	mov    (%rax),%rdx
    be87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be8b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    be8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be93:	48 8b 00             	mov    (%rax),%rax
    be96:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    be9a:	48 c1 e2 03          	shl    $0x3,%rdx
    be9e:	48 01 c2             	add    %rax,%rdx
    bea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bea5:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    bea9:	90                   	nop
    beaa:	c9                   	leave
    beab:	c3                   	ret

000000000000beac <_ZSt27__uninitialized_default_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    beac:	55                   	push   %rbp
    bead:	48 89 e5             	mov    %rsp,%rbp
    beb0:	48 83 ec 20          	sub    $0x20,%rsp
    beb4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    beb8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bebc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    bec0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bec8:	48 89 d6             	mov    %rdx,%rsi
    becb:	48 89 c7             	mov    %rax,%rdi
    bece:	e8 64 09 00 00       	call   c837 <_ZSt25__uninitialized_default_nIP18VkSurfaceFormatKHRmET_S2_T0_>
    bed3:	c9                   	leave
    bed4:	c3                   	ret

000000000000bed5 <_ZSt8_DestroyIP18VkSurfaceFormatKHREvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    bed5:	55                   	push   %rbp
    bed6:	48 89 e5             	mov    %rsp,%rbp
    bed9:	48 83 ec 10          	sub    $0x10,%rsp
    bedd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bee1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    bee5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bee9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    beed:	48 89 d6             	mov    %rdx,%rsi
    bef0:	48 89 c7             	mov    %rax,%rdi
    bef3:	e8 68 09 00 00       	call   c860 <_ZNSt12_Destroy_auxILb1EE9__destroyIP18VkSurfaceFormatKHREEvT_S4_>
    }
    bef8:	90                   	nop
    bef9:	c9                   	leave
    befa:	c3                   	ret
    befb:	90                   	nop

000000000000befc <_ZNSt15__new_allocatorI18VkSurfaceFormatKHREC1ERKS1_>:
    befc:	55                   	push   %rbp
    befd:	48 89 e5             	mov    %rsp,%rbp
    bf00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf08:	90                   	nop
    bf09:	5d                   	pop    %rbp
    bf0a:	c3                   	ret

000000000000bf0b <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    bf0b:	55                   	push   %rbp
    bf0c:	48 89 e5             	mov    %rsp,%rbp
    bf0f:	48 83 ec 20          	sub    $0x20,%rsp
    bf13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bf1b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    bf1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bf23:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    bf27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf2b:	48 89 ce             	mov    %rcx,%rsi
    bf2e:	48 89 c7             	mov    %rax,%rdi
    bf31:	e8 3a 09 00 00       	call   c870 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m>
    bf36:	90                   	nop
    bf37:	c9                   	leave
    bf38:	c3                   	ret

000000000000bf39 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    bf39:	55                   	push   %rbp
    bf3a:	48 89 e5             	mov    %rsp,%rbp
    bf3d:	48 83 ec 20          	sub    $0x20,%rsp
    bf41:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    bf45:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    bf4c:	ff ff 1f 
    bf4f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    bf53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bf57:	48 89 c7             	mov    %rax,%rdi
    bf5a:	e8 42 09 00 00       	call   c8a1 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8max_sizeERKS1_>
    bf5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    bf63:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    bf67:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    bf6b:	48 89 d6             	mov    %rdx,%rsi
    bf6e:	48 89 c7             	mov    %rax,%rdi
    bf71:	e8 21 9e ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    bf76:	48 8b 00             	mov    (%rax),%rax
      }
    bf79:	c9                   	leave
    bf7a:	c3                   	ret
    bf7b:	90                   	nop

000000000000bf7c <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    bf7c:	55                   	push   %rbp
    bf7d:	48 89 e5             	mov    %rsp,%rbp
    bf80:	48 83 ec 10          	sub    $0x10,%rsp
    bf84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    bf8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bf90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf94:	48 89 d6             	mov    %rdx,%rsi
    bf97:	48 89 c7             	mov    %rax,%rdi
    bf9a:	e8 c5 f3 ff ff       	call   b364 <_ZNSaI16VkPresentModeKHREC1ERKS0_>
    bf9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfa3:	48 89 c7             	mov    %rax,%rdi
    bfa6:	e8 11 09 00 00       	call   c8bc <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
    bfab:	90                   	nop
    bfac:	c9                   	leave
    bfad:	c3                   	ret

000000000000bfae <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    bfae:	55                   	push   %rbp
    bfaf:	48 89 e5             	mov    %rsp,%rbp
    bfb2:	48 83 ec 10          	sub    $0x10,%rsp
    bfb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    bfbe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bfc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfc6:	48 89 d6             	mov    %rdx,%rsi
    bfc9:	48 89 c7             	mov    %rax,%rdi
    bfcc:	e8 19 09 00 00       	call   c8ea <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm>
    bfd1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    bfd5:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    bfd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfdc:	48 8b 10             	mov    (%rax),%rdx
    bfdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfe3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    bfe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfeb:	48 8b 00             	mov    (%rax),%rax
    bfee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bff2:	48 c1 e2 02          	shl    $0x2,%rdx
    bff6:	48 01 c2             	add    %rax,%rdx
    bff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bffd:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    c001:	90                   	nop
    c002:	c9                   	leave
    c003:	c3                   	ret

000000000000c004 <_ZSt27__uninitialized_default_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    c004:	55                   	push   %rbp
    c005:	48 89 e5             	mov    %rsp,%rbp
    c008:	48 83 ec 20          	sub    $0x20,%rsp
    c00c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c010:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c014:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    c018:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c01c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c020:	48 89 d6             	mov    %rdx,%rsi
    c023:	48 89 c7             	mov    %rax,%rdi
    c026:	e8 f2 08 00 00       	call   c91d <_ZSt25__uninitialized_default_nIP16VkPresentModeKHRmET_S2_T0_>
    c02b:	c9                   	leave
    c02c:	c3                   	ret

000000000000c02d <_ZSt8_DestroyIP16VkPresentModeKHREvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    c02d:	55                   	push   %rbp
    c02e:	48 89 e5             	mov    %rsp,%rbp
    c031:	48 83 ec 10          	sub    $0x10,%rsp
    c035:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c039:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    c03d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c045:	48 89 d6             	mov    %rdx,%rsi
    c048:	48 89 c7             	mov    %rax,%rdi
    c04b:	e8 f6 08 00 00       	call   c946 <_ZNSt12_Destroy_auxILb1EE9__destroyIP16VkPresentModeKHREEvT_S4_>
    }
    c050:	90                   	nop
    c051:	c9                   	leave
    c052:	c3                   	ret
    c053:	90                   	nop

000000000000c054 <_ZNSt15__new_allocatorI16VkPresentModeKHREC1ERKS1_>:
    c054:	55                   	push   %rbp
    c055:	48 89 e5             	mov    %rsp,%rbp
    c058:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c05c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c060:	90                   	nop
    c061:	5d                   	pop    %rbp
    c062:	c3                   	ret

000000000000c063 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    c063:	55                   	push   %rbp
    c064:	48 89 e5             	mov    %rsp,%rbp
    c067:	48 83 ec 20          	sub    $0x20,%rsp
    c06b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c06f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c073:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    c077:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c07b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c07f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c083:	48 89 ce             	mov    %rcx,%rsi
    c086:	48 89 c7             	mov    %rax,%rdi
    c089:	e8 c8 08 00 00       	call   c956 <_ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m>
    c08e:	90                   	nop
    c08f:	c9                   	leave
    c090:	c3                   	ret

000000000000c091 <_ZNSt6vectorIP9VkImage_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    c091:	55                   	push   %rbp
    c092:	48 89 e5             	mov    %rsp,%rbp
    c095:	48 83 ec 20          	sub    $0x20,%rsp
    c099:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
    c09d:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    c0a4:	ff ff 0f 
    c0a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    c0ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c0af:	48 89 c7             	mov    %rax,%rdi
    c0b2:	e8 d0 08 00 00       	call   c987 <_ZNSt16allocator_traitsISaIP9VkImage_TEE8max_sizeERKS2_>
    c0b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    c0bb:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    c0bf:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    c0c3:	48 89 d6             	mov    %rdx,%rsi
    c0c6:	48 89 c7             	mov    %rax,%rdi
    c0c9:	e8 c9 9c ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    c0ce:	48 8b 00             	mov    (%rax),%rax
      }
    c0d1:	c9                   	leave
    c0d2:	c3                   	ret
    c0d3:	90                   	nop

000000000000c0d4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    c0d4:	55                   	push   %rbp
    c0d5:	48 89 e5             	mov    %rsp,%rbp
    c0d8:	48 83 ec 10          	sub    $0x10,%rsp
    c0dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    c0e4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c0e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0ec:	48 89 d6             	mov    %rdx,%rsi
    c0ef:	48 89 c7             	mov    %rax,%rdi
    c0f2:	e8 29 f4 ff ff       	call   b520 <_ZNSaIP9VkImage_TEC1ERKS1_>
    c0f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0fb:	48 89 c7             	mov    %rax,%rdi
    c0fe:	e8 9f 08 00 00       	call   c9a2 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
    c103:	90                   	nop
    c104:	c9                   	leave
    c105:	c3                   	ret

000000000000c106 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    c106:	55                   	push   %rbp
    c107:	48 89 e5             	mov    %rsp,%rbp
    c10a:	48 83 ec 10          	sub    $0x10,%rsp
    c10e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c112:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    c116:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c11a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c11e:	48 89 d6             	mov    %rdx,%rsi
    c121:	48 89 c7             	mov    %rax,%rdi
    c124:	e8 a7 08 00 00       	call   c9d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm>
    c129:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    c12d:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    c130:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c134:	48 8b 10             	mov    (%rax),%rdx
    c137:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c13b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    c13f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c143:	48 8b 00             	mov    (%rax),%rax
    c146:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c14a:	48 c1 e2 03          	shl    $0x3,%rdx
    c14e:	48 01 c2             	add    %rax,%rdx
    c151:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c155:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    c159:	90                   	nop
    c15a:	c9                   	leave
    c15b:	c3                   	ret

000000000000c15c <_ZSt27__uninitialized_default_n_aIPP9VkImage_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    c15c:	55                   	push   %rbp
    c15d:	48 89 e5             	mov    %rsp,%rbp
    c160:	48 83 ec 20          	sub    $0x20,%rsp
    c164:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c168:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c16c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
    c170:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c178:	48 89 d6             	mov    %rdx,%rsi
    c17b:	48 89 c7             	mov    %rax,%rdi
    c17e:	e8 80 08 00 00       	call   ca03 <_ZSt25__uninitialized_default_nIPP9VkImage_TmET_S3_T0_>
    c183:	c9                   	leave
    c184:	c3                   	ret

000000000000c185 <_ZSt8_DestroyIPP9VkImage_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    c185:	55                   	push   %rbp
    c186:	48 89 e5             	mov    %rsp,%rbp
    c189:	48 83 ec 10          	sub    $0x10,%rsp
    c18d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c191:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
    c195:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c19d:	48 89 d6             	mov    %rdx,%rsi
    c1a0:	48 89 c7             	mov    %rax,%rdi
    c1a3:	e8 84 08 00 00       	call   ca2c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkImage_TEEvT_S5_>
    }
    c1a8:	90                   	nop
    c1a9:	c9                   	leave
    c1aa:	c3                   	ret
    c1ab:	90                   	nop

000000000000c1ac <_ZNSt15__new_allocatorIP9VkImage_TEC1ERKS2_>:
    c1ac:	55                   	push   %rbp
    c1ad:	48 89 e5             	mov    %rsp,%rbp
    c1b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c1b8:	90                   	nop
    c1b9:	5d                   	pop    %rbp
    c1ba:	c3                   	ret

000000000000c1bb <_ZNSt16allocator_traitsISaIP9VkImage_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    c1bb:	55                   	push   %rbp
    c1bc:	48 89 e5             	mov    %rsp,%rbp
    c1bf:	48 83 ec 20          	sub    $0x20,%rsp
    c1c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1c7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c1cb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    c1cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c1d3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    c1d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1db:	48 89 ce             	mov    %rcx,%rsi
    c1de:	48 89 c7             	mov    %rax,%rdi
    c1e1:	e8 56 08 00 00       	call   ca3c <_ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m>
    c1e6:	90                   	nop
    c1e7:	c9                   	leave
    c1e8:	c3                   	ret

000000000000c1e9 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c1e9:	55                   	push   %rbp
    c1ea:	48 89 e5             	mov    %rsp,%rbp
    c1ed:	48 83 ec 10          	sub    $0x10,%rsp
    c1f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c1f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1f9:	48 89 c7             	mov    %rax,%rdi
    c1fc:	e8 6d 08 00 00       	call   ca6e <_ZNKSt15__new_allocatorI17VkLayerPropertiesE8max_sizeEv>
      }
    c201:	c9                   	leave
    c202:	c3                   	ret
    c203:	90                   	nop

000000000000c204 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c204:	55                   	push   %rbp
    c205:	48 89 e5             	mov    %rsp,%rbp
    c208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c20c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c210:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c21b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c222:	00 
    c223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c227:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c22e:	00 
	{ }
    c22f:	90                   	nop
    c230:	5d                   	pop    %rbp
    c231:	c3                   	ret

000000000000c232 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c232:	55                   	push   %rbp
    c233:	48 89 e5             	mov    %rsp,%rbp
    c236:	48 83 ec 10          	sub    $0x10,%rsp
    c23a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c23e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c242:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c247:	74 15                	je     c25e <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    c249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c24d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c251:	48 89 d6             	mov    %rdx,%rsi
    c254:	48 89 c7             	mov    %rax,%rdi
    c257:	e8 2c 08 00 00       	call   ca88 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8allocateERS1_m>
    c25c:	eb 05                	jmp    c263 <_ZNSt12_Vector_baseI17VkLayerPropertiesSaIS0_EE11_M_allocateEm+0x31>
    c25e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c263:	c9                   	leave
    c264:	c3                   	ret

000000000000c265 <_ZSt25__uninitialized_default_nIP17VkLayerPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c265:	55                   	push   %rbp
    c266:	48 89 e5             	mov    %rsp,%rbp
    c269:	48 83 ec 20          	sub    $0x20,%rsp
    c26d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c271:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c275:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c279:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c27d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c281:	48 89 d6             	mov    %rdx,%rsi
    c284:	48 89 c7             	mov    %rax,%rdi
    c287:	e8 26 08 00 00       	call   cab2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_>
    }
    c28c:	c9                   	leave
    c28d:	c3                   	ret

000000000000c28e <_ZNSt12_Destroy_auxILb1EE9__destroyIP17VkLayerPropertiesEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    c28e:	55                   	push   %rbp
    c28f:	48 89 e5             	mov    %rsp,%rbp
    c292:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c296:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c29a:	90                   	nop
    c29b:	5d                   	pop    %rbp
    c29c:	c3                   	ret
    c29d:	90                   	nop

000000000000c29e <_ZNSt15__new_allocatorI17VkLayerPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c29e:	55                   	push   %rbp
    c29f:	48 89 e5             	mov    %rsp,%rbp
    c2a2:	48 83 ec 20          	sub    $0x20,%rsp
    c2a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c2ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c2b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c2b6:	48 89 d0             	mov    %rdx,%rax
    c2b9:	48 c1 e0 06          	shl    $0x6,%rax
    c2bd:	48 01 d0             	add    %rdx,%rax
    c2c0:	48 c1 e0 03          	shl    $0x3,%rax
    c2c4:	48 89 c2             	mov    %rax,%rdx
    c2c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c2cb:	48 89 d6             	mov    %rdx,%rsi
    c2ce:	48 89 c7             	mov    %rax,%rdi
    c2d1:	e8 1a 82 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c2d6:	c9                   	leave
    c2d7:	c3                   	ret

000000000000c2d8 <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c2d8:	55                   	push   %rbp
    c2d9:	48 89 e5             	mov    %rsp,%rbp
    c2dc:	48 83 ec 10          	sub    $0x10,%rsp
    c2e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c2e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2e8:	48 89 c7             	mov    %rax,%rdi
    c2eb:	e8 22 08 00 00       	call   cb12 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE8max_sizeEv>
      }
    c2f0:	c9                   	leave
    c2f1:	c3                   	ret

000000000000c2f2 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c2f2:	55                   	push   %rbp
    c2f3:	48 89 e5             	mov    %rsp,%rbp
    c2f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2fe:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c305:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c309:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c310:	00 
    c311:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c315:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c31c:	00 
	{ }
    c31d:	90                   	nop
    c31e:	5d                   	pop    %rbp
    c31f:	c3                   	ret

000000000000c320 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c320:	55                   	push   %rbp
    c321:	48 89 e5             	mov    %rsp,%rbp
    c324:	48 83 ec 10          	sub    $0x10,%rsp
    c328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c32c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c330:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c335:	74 15                	je     c34c <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    c337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c33b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c33f:	48 89 d6             	mov    %rdx,%rsi
    c342:	48 89 c7             	mov    %rax,%rdi
    c345:	e8 e2 07 00 00       	call   cb2c <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8allocateERS1_m>
    c34a:	eb 05                	jmp    c351 <_ZNSt12_Vector_baseI21VkExtensionPropertiesSaIS0_EE11_M_allocateEm+0x31>
    c34c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c351:	c9                   	leave
    c352:	c3                   	ret

000000000000c353 <_ZSt25__uninitialized_default_nIP21VkExtensionPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c353:	55                   	push   %rbp
    c354:	48 89 e5             	mov    %rsp,%rbp
    c357:	48 83 ec 20          	sub    $0x20,%rsp
    c35b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c35f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c363:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c367:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c36b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c36f:	48 89 d6             	mov    %rdx,%rsi
    c372:	48 89 c7             	mov    %rax,%rdi
    c375:	e8 dc 07 00 00       	call   cb56 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_>
    }
    c37a:	c9                   	leave
    c37b:	c3                   	ret

000000000000c37c <_ZNSt12_Destroy_auxILb1EE9__destroyIP21VkExtensionPropertiesEEvT_S4_>:
    c37c:	55                   	push   %rbp
    c37d:	48 89 e5             	mov    %rsp,%rbp
    c380:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c384:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c388:	90                   	nop
    c389:	5d                   	pop    %rbp
    c38a:	c3                   	ret
    c38b:	90                   	nop

000000000000c38c <_ZNSt15__new_allocatorI21VkExtensionPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c38c:	55                   	push   %rbp
    c38d:	48 89 e5             	mov    %rsp,%rbp
    c390:	48 83 ec 20          	sub    $0x20,%rsp
    c394:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c398:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c39c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c3a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c3a4:	48 89 d0             	mov    %rdx,%rax
    c3a7:	48 c1 e0 06          	shl    $0x6,%rax
    c3ab:	48 01 d0             	add    %rdx,%rax
    c3ae:	48 c1 e0 02          	shl    $0x2,%rax
    c3b2:	48 89 c2             	mov    %rax,%rdx
    c3b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c3b9:	48 89 d6             	mov    %rdx,%rsi
    c3bc:	48 89 c7             	mov    %rax,%rdi
    c3bf:	e8 2c 81 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c3c4:	c9                   	leave
    c3c5:	c3                   	ret

000000000000c3c6 <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c3c6:	55                   	push   %rbp
    c3c7:	48 89 e5             	mov    %rsp,%rbp
    c3ca:	48 83 ec 10          	sub    $0x10,%rsp
    c3ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c3d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3d6:	48 89 c7             	mov    %rax,%rdi
    c3d9:	e8 d8 07 00 00       	call   cbb6 <_ZNKSt15__new_allocatorIPKcE8max_sizeEv>
      }
    c3de:	c9                   	leave
    c3df:	c3                   	ret

000000000000c3e0 <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c3e0:	55                   	push   %rbp
    c3e1:	48 89 e5             	mov    %rsp,%rbp
    c3e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c3e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3ec:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c3f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3f7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c3fe:	00 
    c3ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c403:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c40a:	00 
	{ }
    c40b:	90                   	nop
    c40c:	5d                   	pop    %rbp
    c40d:	c3                   	ret

000000000000c40e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c40e:	55                   	push   %rbp
    c40f:	48 89 e5             	mov    %rsp,%rbp
    c412:	48 83 ec 10          	sub    $0x10,%rsp
    c416:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c41a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c41e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c423:	74 15                	je     c43a <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x2c>
    c425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c42d:	48 89 d6             	mov    %rdx,%rsi
    c430:	48 89 c7             	mov    %rax,%rdi
    c433:	e8 98 07 00 00       	call   cbd0 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>
    c438:	eb 05                	jmp    c43f <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x31>
    c43a:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c43f:	c9                   	leave
    c440:	c3                   	ret

000000000000c441 <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c441:	55                   	push   %rbp
    c442:	48 89 e5             	mov    %rsp,%rbp
    c445:	48 83 ec 20          	sub    $0x20,%rsp
    c449:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c44d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c451:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c455:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c459:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c45d:	48 89 d6             	mov    %rdx,%rsi
    c460:	48 89 c7             	mov    %rax,%rdi
    c463:	e8 92 07 00 00       	call   cbfa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>
    }
    c468:	c9                   	leave
    c469:	c3                   	ret

000000000000c46a <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c46a:	55                   	push   %rbp
    c46b:	48 89 e5             	mov    %rsp,%rbp
    c46e:	48 83 ec 20          	sub    $0x20,%rsp
    c472:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c476:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c47a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c47e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c482:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c489:	00 
    c48a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c48e:	48 89 d6             	mov    %rdx,%rsi
    c491:	48 89 c7             	mov    %rax,%rdi
    c494:	e8 57 80 ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c499:	c9                   	leave
    c49a:	c3                   	ret

000000000000c49b <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c49b:	55                   	push   %rbp
    c49c:	48 89 e5             	mov    %rsp,%rbp
    c49f:	48 83 ec 10          	sub    $0x10,%rsp
    c4a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c4a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4ab:	48 89 c7             	mov    %rax,%rdi
    c4ae:	e8 a5 07 00 00       	call   cc58 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE8max_sizeEv>
      }
    c4b3:	c9                   	leave
    c4b4:	c3                   	ret
    c4b5:	90                   	nop

000000000000c4b6 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c4b6:	55                   	push   %rbp
    c4b7:	48 89 e5             	mov    %rsp,%rbp
    c4ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c4be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4c2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c4c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4cd:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c4d4:	00 
    c4d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4d9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c4e0:	00 
	{ }
    c4e1:	90                   	nop
    c4e2:	5d                   	pop    %rbp
    c4e3:	c3                   	ret

000000000000c4e4 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c4e4:	55                   	push   %rbp
    c4e5:	48 89 e5             	mov    %rsp,%rbp
    c4e8:	48 83 ec 10          	sub    $0x10,%rsp
    c4ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c4f4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c4f9:	74 15                	je     c510 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x2c>
    c4fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c503:	48 89 d6             	mov    %rdx,%rsi
    c506:	48 89 c7             	mov    %rax,%rdi
    c509:	e8 64 07 00 00       	call   cc72 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>
    c50e:	eb 05                	jmp    c515 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x31>
    c510:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c515:	c9                   	leave
    c516:	c3                   	ret

000000000000c517 <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c517:	55                   	push   %rbp
    c518:	48 89 e5             	mov    %rsp,%rbp
    c51b:	48 83 ec 20          	sub    $0x20,%rsp
    c51f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c523:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c527:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c52b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c52f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c533:	48 89 d6             	mov    %rdx,%rsi
    c536:	48 89 c7             	mov    %rax,%rdi
    c539:	e8 5e 07 00 00       	call   cc9c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>
    }
    c53e:	c9                   	leave
    c53f:	c3                   	ret

000000000000c540 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
    c540:	55                   	push   %rbp
    c541:	48 89 e5             	mov    %rsp,%rbp
    c544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c548:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c54c:	90                   	nop
    c54d:	5d                   	pop    %rbp
    c54e:	c3                   	ret
    c54f:	90                   	nop

000000000000c550 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c550:	55                   	push   %rbp
    c551:	48 89 e5             	mov    %rsp,%rbp
    c554:	48 83 ec 20          	sub    $0x20,%rsp
    c558:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c55c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c560:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c568:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c56f:	00 
    c570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c574:	48 89 d6             	mov    %rdx,%rsi
    c577:	48 89 c7             	mov    %rax,%rdi
    c57a:	e8 71 7f ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c57f:	c9                   	leave
    c580:	c3                   	ret

000000000000c581 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c581:	55                   	push   %rbp
    c582:	48 89 e5             	mov    %rsp,%rbp
    c585:	48 83 ec 10          	sub    $0x10,%rsp
    c589:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c58d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c591:	48 89 c7             	mov    %rax,%rdi
    c594:	e8 61 07 00 00       	call   ccfa <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE8max_sizeEv>
      }
    c599:	c9                   	leave
    c59a:	c3                   	ret
    c59b:	90                   	nop

000000000000c59c <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c59c:	55                   	push   %rbp
    c59d:	48 89 e5             	mov    %rsp,%rbp
    c5a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c5a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5a8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c5af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5b3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c5ba:	00 
    c5bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5bf:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c5c6:	00 
	{ }
    c5c7:	90                   	nop
    c5c8:	5d                   	pop    %rbp
    c5c9:	c3                   	ret

000000000000c5ca <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c5ca:	55                   	push   %rbp
    c5cb:	48 89 e5             	mov    %rsp,%rbp
    c5ce:	48 83 ec 10          	sub    $0x10,%rsp
    c5d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c5da:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c5df:	74 15                	je     c5f6 <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm+0x2c>
    c5e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5e5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c5e9:	48 89 d6             	mov    %rdx,%rsi
    c5ec:	48 89 c7             	mov    %rax,%rdi
    c5ef:	e8 20 07 00 00       	call   cd14 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8allocateERS1_m>
    c5f4:	eb 05                	jmp    c5fb <_ZNSt12_Vector_baseI23VkQueueFamilyPropertiesSaIS0_EE11_M_allocateEm+0x31>
    c5f6:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c5fb:	c9                   	leave
    c5fc:	c3                   	ret

000000000000c5fd <_ZSt25__uninitialized_default_nIP23VkQueueFamilyPropertiesmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c5fd:	55                   	push   %rbp
    c5fe:	48 89 e5             	mov    %rsp,%rbp
    c601:	48 83 ec 20          	sub    $0x20,%rsp
    c605:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c609:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c60d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c611:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c615:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c619:	48 89 d6             	mov    %rdx,%rsi
    c61c:	48 89 c7             	mov    %rax,%rdi
    c61f:	e8 1a 07 00 00       	call   cd3e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_>
    }
    c624:	c9                   	leave
    c625:	c3                   	ret

000000000000c626 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23VkQueueFamilyPropertiesEEvT_S4_>:
    c626:	55                   	push   %rbp
    c627:	48 89 e5             	mov    %rsp,%rbp
    c62a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c62e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c632:	90                   	nop
    c633:	5d                   	pop    %rbp
    c634:	c3                   	ret
    c635:	90                   	nop

000000000000c636 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c636:	55                   	push   %rbp
    c637:	48 89 e5             	mov    %rsp,%rbp
    c63a:	48 83 ec 20          	sub    $0x20,%rsp
    c63e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c642:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c646:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c64a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c64e:	48 89 d0             	mov    %rdx,%rax
    c651:	48 01 c0             	add    %rax,%rax
    c654:	48 01 d0             	add    %rdx,%rax
    c657:	48 c1 e0 03          	shl    $0x3,%rax
    c65b:	48 89 c2             	mov    %rax,%rdx
    c65e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c662:	48 89 d6             	mov    %rdx,%rsi
    c665:	48 89 c7             	mov    %rax,%rdi
    c668:	e8 83 7e ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c66d:	c9                   	leave
    c66e:	c3                   	ret

000000000000c66f <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c66f:	55                   	push   %rbp
    c670:	48 89 e5             	mov    %rsp,%rbp
    c673:	48 83 ec 10          	sub    $0x10,%rsp
    c677:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c67b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c67f:	48 89 c7             	mov    %rax,%rdi
    c682:	e8 15 07 00 00       	call   cd9c <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8max_sizeEv>
      }
    c687:	c9                   	leave
    c688:	c3                   	ret
    c689:	90                   	nop

000000000000c68a <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c68a:	55                   	push   %rbp
    c68b:	48 89 e5             	mov    %rsp,%rbp
    c68e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c696:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c69d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6a1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c6a8:	00 
    c6a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6ad:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c6b4:	00 
	{ }
    c6b5:	90                   	nop
    c6b6:	5d                   	pop    %rbp
    c6b7:	c3                   	ret

000000000000c6b8 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c6b8:	55                   	push   %rbp
    c6b9:	48 89 e5             	mov    %rsp,%rbp
    c6bc:	48 83 ec 10          	sub    $0x10,%rsp
    c6c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c6c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c6c8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c6cd:	74 15                	je     c6e4 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm+0x2c>
    c6cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c6d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c6d7:	48 89 d6             	mov    %rdx,%rsi
    c6da:	48 89 c7             	mov    %rax,%rdi
    c6dd:	e8 d4 06 00 00       	call   cdb6 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8allocateERS3_m>
    c6e2:	eb 05                	jmp    c6e9 <_ZNSt12_Vector_baseISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE11_M_allocateEm+0x31>
    c6e4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c6e9:	c9                   	leave
    c6ea:	c3                   	ret

000000000000c6eb <_ZSt25__uninitialized_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmET_S4_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c6eb:	55                   	push   %rbp
    c6ec:	48 89 e5             	mov    %rsp,%rbp
    c6ef:	48 83 ec 20          	sub    $0x20,%rsp
    c6f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c6f7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c6fb:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c6ff:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c703:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c707:	48 89 d6             	mov    %rdx,%rsi
    c70a:	48 89 c7             	mov    %rax,%rdi
    c70d:	e8 ce 06 00 00       	call   cde0 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_>
    }
    c712:	c9                   	leave
    c713:	c3                   	ret

000000000000c714 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt8optionalI23VkQueueFamilyPropertiesEEEvT_S6_>:
    c714:	55                   	push   %rbp
    c715:	48 89 e5             	mov    %rsp,%rbp
    c718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c71c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c720:	90                   	nop
    c721:	5d                   	pop    %rbp
    c722:	c3                   	ret

000000000000c723 <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    c723:	55                   	push   %rbp
    c724:	48 89 e5             	mov    %rsp,%rbp
    c727:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    c72b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c72f:	5d                   	pop    %rbp
    c730:	c3                   	ret

000000000000c731 <_ZSt10_ConstructI23VkQueueFamilyPropertiesJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    c731:	55                   	push   %rbp
    c732:	48 89 e5             	mov    %rsp,%rbp
    c735:	53                   	push   %rbx
    c736:	48 83 ec 18          	sub    $0x18,%rsp
    c73a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c73e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    c742:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c746:	48 89 c6             	mov    %rax,%rsi
    c749:	bf 18 00 00 00       	mov    $0x18,%edi
    c74e:	e8 ff 9f ff ff       	call   6752 <_ZnwmPv>
    c753:	48 89 c3             	mov    %rax,%rbx
    c756:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c75a:	48 89 c7             	mov    %rax,%rdi
    c75d:	e8 48 e8 ff ff       	call   afaa <_ZSt7forwardIRK23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS3_E4typeE>
    c762:	48 89 c1             	mov    %rax,%rcx
    c765:	48 8b 01             	mov    (%rcx),%rax
    c768:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    c76c:	48 89 03             	mov    %rax,(%rbx)
    c76f:	48 89 53 08          	mov    %rdx,0x8(%rbx)
    c773:	48 8b 41 10          	mov    0x10(%rcx),%rax
    c777:	48 89 43 10          	mov    %rax,0x10(%rbx)
    }
    c77b:	90                   	nop
    c77c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    c780:	c9                   	leave
    c781:	c3                   	ret

000000000000c782 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE10deallocateEPS2_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c782:	55                   	push   %rbp
    c783:	48 89 e5             	mov    %rsp,%rbp
    c786:	48 83 ec 20          	sub    $0x20,%rsp
    c78a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c78e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c792:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c796:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c79a:	48 89 d0             	mov    %rdx,%rax
    c79d:	48 c1 e0 03          	shl    $0x3,%rax
    c7a1:	48 29 d0             	sub    %rdx,%rax
    c7a4:	48 c1 e0 02          	shl    $0x2,%rax
    c7a8:	48 89 c2             	mov    %rax,%rdx
    c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c7af:	48 89 d6             	mov    %rdx,%rsi
    c7b2:	48 89 c7             	mov    %rax,%rdi
    c7b5:	e8 36 7d ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c7ba:	c9                   	leave
    c7bb:	c3                   	ret

000000000000c7bc <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c7bc:	55                   	push   %rbp
    c7bd:	48 89 e5             	mov    %rsp,%rbp
    c7c0:	48 83 ec 10          	sub    $0x10,%rsp
    c7c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c7c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7cc:	48 89 c7             	mov    %rax,%rdi
    c7cf:	e8 52 06 00 00       	call   ce26 <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE8max_sizeEv>
      }
    c7d4:	c9                   	leave
    c7d5:	c3                   	ret

000000000000c7d6 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c7d6:	55                   	push   %rbp
    c7d7:	48 89 e5             	mov    %rsp,%rbp
    c7da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c7de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7e2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c7e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7ed:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c7f4:	00 
    c7f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c7f9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c800:	00 
	{ }
    c801:	90                   	nop
    c802:	5d                   	pop    %rbp
    c803:	c3                   	ret

000000000000c804 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c804:	55                   	push   %rbp
    c805:	48 89 e5             	mov    %rsp,%rbp
    c808:	48 83 ec 10          	sub    $0x10,%rsp
    c80c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c810:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c819:	74 15                	je     c830 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm+0x2c>
    c81b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c81f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c823:	48 89 d6             	mov    %rdx,%rsi
    c826:	48 89 c7             	mov    %rax,%rdi
    c829:	e8 12 06 00 00       	call   ce40 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8allocateERS1_m>
    c82e:	eb 05                	jmp    c835 <_ZNSt12_Vector_baseI18VkSurfaceFormatKHRSaIS0_EE11_M_allocateEm+0x31>
    c830:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c835:	c9                   	leave
    c836:	c3                   	ret

000000000000c837 <_ZSt25__uninitialized_default_nIP18VkSurfaceFormatKHRmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c837:	55                   	push   %rbp
    c838:	48 89 e5             	mov    %rsp,%rbp
    c83b:	48 83 ec 20          	sub    $0x20,%rsp
    c83f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c843:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c847:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c84b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c84f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c853:	48 89 d6             	mov    %rdx,%rsi
    c856:	48 89 c7             	mov    %rax,%rdi
    c859:	e8 0c 06 00 00       	call   ce6a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_>
    }
    c85e:	c9                   	leave
    c85f:	c3                   	ret

000000000000c860 <_ZNSt12_Destroy_auxILb1EE9__destroyIP18VkSurfaceFormatKHREEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    c860:	55                   	push   %rbp
    c861:	48 89 e5             	mov    %rsp,%rbp
    c864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c86c:	90                   	nop
    c86d:	5d                   	pop    %rbp
    c86e:	c3                   	ret
    c86f:	90                   	nop

000000000000c870 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c870:	55                   	push   %rbp
    c871:	48 89 e5             	mov    %rsp,%rbp
    c874:	48 83 ec 20          	sub    $0x20,%rsp
    c878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c87c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c880:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c884:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c888:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c88f:	00 
    c890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c894:	48 89 d6             	mov    %rdx,%rsi
    c897:	48 89 c7             	mov    %rax,%rdi
    c89a:	e8 51 7c ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c89f:	c9                   	leave
    c8a0:	c3                   	ret

000000000000c8a1 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c8a1:	55                   	push   %rbp
    c8a2:	48 89 e5             	mov    %rsp,%rbp
    c8a5:	48 83 ec 10          	sub    $0x10,%rsp
    c8a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c8ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8b1:	48 89 c7             	mov    %rax,%rdi
    c8b4:	e8 0f 06 00 00       	call   cec8 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE8max_sizeEv>
      }
    c8b9:	c9                   	leave
    c8ba:	c3                   	ret
    c8bb:	90                   	nop

000000000000c8bc <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c8bc:	55                   	push   %rbp
    c8bd:	48 89 e5             	mov    %rsp,%rbp
    c8c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c8c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8c8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c8cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8d3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c8da:	00 
    c8db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c8df:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c8e6:	00 
	{ }
    c8e7:	90                   	nop
    c8e8:	5d                   	pop    %rbp
    c8e9:	c3                   	ret

000000000000c8ea <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c8ea:	55                   	push   %rbp
    c8eb:	48 89 e5             	mov    %rsp,%rbp
    c8ee:	48 83 ec 10          	sub    $0x10,%rsp
    c8f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c8f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c8fa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c8ff:	74 15                	je     c916 <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm+0x2c>
    c901:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c905:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c909:	48 89 d6             	mov    %rdx,%rsi
    c90c:	48 89 c7             	mov    %rax,%rdi
    c90f:	e8 ce 05 00 00       	call   cee2 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8allocateERS1_m>
    c914:	eb 05                	jmp    c91b <_ZNSt12_Vector_baseI16VkPresentModeKHRSaIS0_EE11_M_allocateEm+0x31>
    c916:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    c91b:	c9                   	leave
    c91c:	c3                   	ret

000000000000c91d <_ZSt25__uninitialized_default_nIP16VkPresentModeKHRmET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    c91d:	55                   	push   %rbp
    c91e:	48 89 e5             	mov    %rsp,%rbp
    c921:	48 83 ec 20          	sub    $0x20,%rsp
    c925:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c929:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    c92d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    c931:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c939:	48 89 d6             	mov    %rdx,%rsi
    c93c:	48 89 c7             	mov    %rax,%rdi
    c93f:	e8 c8 05 00 00       	call   cf0c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_>
    }
    c944:	c9                   	leave
    c945:	c3                   	ret

000000000000c946 <_ZNSt12_Destroy_auxILb1EE9__destroyIP16VkPresentModeKHREEvT_S4_>:
    c946:	55                   	push   %rbp
    c947:	48 89 e5             	mov    %rsp,%rbp
    c94a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c94e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c952:	90                   	nop
    c953:	5d                   	pop    %rbp
    c954:	c3                   	ret
    c955:	90                   	nop

000000000000c956 <_ZNSt15__new_allocatorI16VkPresentModeKHRE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    c956:	55                   	push   %rbp
    c957:	48 89 e5             	mov    %rsp,%rbp
    c95a:	48 83 ec 20          	sub    $0x20,%rsp
    c95e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c962:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    c966:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    c96a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c96e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    c975:	00 
    c976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c97a:	48 89 d6             	mov    %rdx,%rsi
    c97d:	48 89 c7             	mov    %rax,%rdi
    c980:	e8 6b 7b ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    c985:	c9                   	leave
    c986:	c3                   	ret

000000000000c987 <_ZNSt16allocator_traitsISaIP9VkImage_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    c987:	55                   	push   %rbp
    c988:	48 89 e5             	mov    %rsp,%rbp
    c98b:	48 83 ec 10          	sub    $0x10,%rsp
    c98f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
    c993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c997:	48 89 c7             	mov    %rax,%rdi
    c99a:	e8 cb 05 00 00       	call   cf6a <_ZNKSt15__new_allocatorIP9VkImage_TE8max_sizeEv>
      }
    c99f:	c9                   	leave
    c9a0:	c3                   	ret
    c9a1:	90                   	nop

000000000000c9a2 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    c9a2:	55                   	push   %rbp
    c9a3:	48 89 e5             	mov    %rsp,%rbp
    c9a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    c9aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9ae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c9b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9b9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c9c0:	00 
    c9c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9c5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    c9cc:	00 
	{ }
    c9cd:	90                   	nop
    c9ce:	5d                   	pop    %rbp
    c9cf:	c3                   	ret

000000000000c9d0 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
    c9d0:	55                   	push   %rbp
    c9d1:	48 89 e5             	mov    %rsp,%rbp
    c9d4:	48 83 ec 10          	sub    $0x10,%rsp
    c9d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c9dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c9e0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    c9e5:	74 15                	je     c9fc <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm+0x2c>
    c9e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9eb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c9ef:	48 89 d6             	mov    %rdx,%rsi
    c9f2:	48 89 c7             	mov    %rax,%rdi
    c9f5:	e8 8a 05 00 00       	call   cf84 <_ZNSt16allocator_traitsISaIP9VkImage_TEE8allocateERS2_m>
    c9fa:	eb 05                	jmp    ca01 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE11_M_allocateEm+0x31>
    c9fc:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    ca01:	c9                   	leave
    ca02:	c3                   	ret

000000000000ca03 <_ZSt25__uninitialized_default_nIPP9VkImage_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    ca03:	55                   	push   %rbp
    ca04:	48 89 e5             	mov    %rsp,%rbp
    ca07:	48 83 ec 20          	sub    $0x20,%rsp
    ca0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ca0f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
    ca13:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
    ca17:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ca1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ca1f:	48 89 d6             	mov    %rdx,%rsi
    ca22:	48 89 c7             	mov    %rax,%rdi
    ca25:	e8 84 05 00 00       	call   cfae <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_>
    }
    ca2a:	c9                   	leave
    ca2b:	c3                   	ret

000000000000ca2c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkImage_TEEvT_S5_>:
    ca2c:	55                   	push   %rbp
    ca2d:	48 89 e5             	mov    %rsp,%rbp
    ca30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca34:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ca38:	90                   	nop
    ca39:	5d                   	pop    %rbp
    ca3a:	c3                   	ret
    ca3b:	90                   	nop

000000000000ca3c <_ZNSt15__new_allocatorIP9VkImage_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    ca3c:	55                   	push   %rbp
    ca3d:	48 89 e5             	mov    %rsp,%rbp
    ca40:	48 83 ec 20          	sub    $0x20,%rsp
    ca44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca48:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ca4c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    ca50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ca54:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ca5b:	00 
    ca5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ca60:	48 89 d6             	mov    %rdx,%rsi
    ca63:	48 89 c7             	mov    %rax,%rdi
    ca66:	e8 85 7a ff ff       	call   44f0 <_ZdlPvm@plt>
      }
    ca6b:	c9                   	leave
    ca6c:	c3                   	ret
    ca6d:	90                   	nop

000000000000ca6e <_ZNKSt15__new_allocatorI17VkLayerPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    ca6e:	55                   	push   %rbp
    ca6f:	48 89 e5             	mov    %rsp,%rbp
    ca72:	48 83 ec 10          	sub    $0x10,%rsp
    ca76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    ca7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca7e:	48 89 c7             	mov    %rax,%rdi
    ca81:	e8 86 05 00 00       	call   d00c <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>
    ca86:	c9                   	leave
    ca87:	c3                   	ret

000000000000ca88 <_ZNSt16allocator_traitsISaI17VkLayerPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    ca88:	55                   	push   %rbp
    ca89:	48 89 e5             	mov    %rsp,%rbp
    ca8c:	48 83 ec 10          	sub    $0x10,%rsp
    ca90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ca94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    ca98:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ca9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    caa0:	ba 00 00 00 00       	mov    $0x0,%edx
    caa5:	48 89 ce             	mov    %rcx,%rsi
    caa8:	48 89 c7             	mov    %rax,%rdi
    caab:	e8 70 05 00 00       	call   d020 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv>
    cab0:	c9                   	leave
    cab1:	c3                   	ret

000000000000cab2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cab2:	55                   	push   %rbp
    cab3:	48 89 e5             	mov    %rsp,%rbp
    cab6:	48 83 ec 20          	sub    $0x20,%rsp
    caba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cabe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cac2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cac7:	74 43                	je     cb0c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP17VkLayerPropertiesmEET_S4_T0_+0x5a>
		= std::__addressof(*__first);
    cac9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cacd:	48 89 c7             	mov    %rax,%rdi
    cad0:	e8 b6 05 00 00       	call   d08b <_ZSt11__addressofI17VkLayerPropertiesEPT_RS1_>
    cad5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cadd:	48 89 c7             	mov    %rax,%rdi
    cae0:	e8 b4 05 00 00       	call   d099 <_ZSt10_ConstructI17VkLayerPropertiesJEEvPT_DpOT0_>
	      ++__first;
    cae5:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
    caec:	00 
	      __first = std::fill_n(__first, __n - 1, *__val);
    caed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    caf1:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    caf5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    caf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cafd:	48 89 ce             	mov    %rcx,%rsi
    cb00:	48 89 c7             	mov    %rax,%rdi
    cb03:	e8 eb 05 00 00       	call   d0f3 <_ZSt6fill_nIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_>
    cb08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cb0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cb10:	c9                   	leave
    cb11:	c3                   	ret

000000000000cb12 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cb12:	55                   	push   %rbp
    cb13:	48 89 e5             	mov    %rsp,%rbp
    cb16:	48 83 ec 10          	sub    $0x10,%rsp
    cb1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cb1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb22:	48 89 c7             	mov    %rax,%rdi
    cb25:	e8 0e 06 00 00       	call   d138 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>
    cb2a:	c9                   	leave
    cb2b:	c3                   	ret

000000000000cb2c <_ZNSt16allocator_traitsISaI21VkExtensionPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    cb2c:	55                   	push   %rbp
    cb2d:	48 89 e5             	mov    %rsp,%rbp
    cb30:	48 83 ec 10          	sub    $0x10,%rsp
    cb34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cb38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cb3c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cb40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb44:	ba 00 00 00 00       	mov    $0x0,%edx
    cb49:	48 89 ce             	mov    %rcx,%rsi
    cb4c:	48 89 c7             	mov    %rax,%rdi
    cb4f:	e8 f8 05 00 00       	call   d14c <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv>
    cb54:	c9                   	leave
    cb55:	c3                   	ret

000000000000cb56 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cb56:	55                   	push   %rbp
    cb57:	48 89 e5             	mov    %rsp,%rbp
    cb5a:	48 83 ec 20          	sub    $0x20,%rsp
    cb5e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cb62:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cb66:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cb6b:	74 43                	je     cbb0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP21VkExtensionPropertiesmEET_S4_T0_+0x5a>
		= std::__addressof(*__first);
    cb6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cb71:	48 89 c7             	mov    %rax,%rdi
    cb74:	e8 3e 06 00 00       	call   d1b7 <_ZSt11__addressofI21VkExtensionPropertiesEPT_RS1_>
    cb79:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cb7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cb81:	48 89 c7             	mov    %rax,%rdi
    cb84:	e8 3c 06 00 00       	call   d1c5 <_ZSt10_ConstructI21VkExtensionPropertiesJEEvPT_DpOT0_>
	      ++__first;
    cb89:	48 81 45 e8 04 01 00 	addq   $0x104,-0x18(%rbp)
    cb90:	00 
	      __first = std::fill_n(__first, __n - 1, *__val);
    cb91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cb95:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    cb99:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cb9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cba1:	48 89 ce             	mov    %rcx,%rsi
    cba4:	48 89 c7             	mov    %rax,%rdi
    cba7:	e8 73 06 00 00       	call   d21f <_ZSt6fill_nIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_>
    cbac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cbb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cbb4:	c9                   	leave
    cbb5:	c3                   	ret

000000000000cbb6 <_ZNKSt15__new_allocatorIPKcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cbb6:	55                   	push   %rbp
    cbb7:	48 89 e5             	mov    %rsp,%rbp
    cbba:	48 83 ec 10          	sub    $0x10,%rsp
    cbbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cbc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbc6:	48 89 c7             	mov    %rax,%rdi
    cbc9:	e8 96 06 00 00       	call   d264 <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
    cbce:	c9                   	leave
    cbcf:	c3                   	ret

000000000000cbd0 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    cbd0:	55                   	push   %rbp
    cbd1:	48 89 e5             	mov    %rsp,%rbp
    cbd4:	48 83 ec 10          	sub    $0x10,%rsp
    cbd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cbdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cbe0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cbe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cbe8:	ba 00 00 00 00       	mov    $0x0,%edx
    cbed:	48 89 ce             	mov    %rcx,%rsi
    cbf0:	48 89 c7             	mov    %rax,%rdi
    cbf3:	e8 80 06 00 00       	call   d278 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>
    cbf8:	c9                   	leave
    cbf9:	c3                   	ret

000000000000cbfa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cbfa:	55                   	push   %rbp
    cbfb:	48 89 e5             	mov    %rsp,%rbp
    cbfe:	48 83 ec 20          	sub    $0x20,%rsp
    cc02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cc06:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cc0a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cc0f:	74 40                	je     cc51 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    cc11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cc15:	48 89 c7             	mov    %rax,%rdi
    cc18:	e8 bc 06 00 00       	call   d2d9 <_ZSt11__addressofIPKcEPT_RS2_>
    cc1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cc21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc25:	48 89 c7             	mov    %rax,%rdi
    cc28:	e8 ba 06 00 00       	call   d2e7 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>
	      ++__first;
    cc2d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    cc32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cc36:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    cc3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cc3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cc42:	48 89 ce             	mov    %rcx,%rsi
    cc45:	48 89 c7             	mov    %rax,%rdi
    cc48:	e8 c1 06 00 00       	call   d30e <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>
    cc4d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cc51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cc55:	c9                   	leave
    cc56:	c3                   	ret
    cc57:	90                   	nop

000000000000cc58 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cc58:	55                   	push   %rbp
    cc59:	48 89 e5             	mov    %rsp,%rbp
    cc5c:	48 83 ec 10          	sub    $0x10,%rsp
    cc60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cc64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc68:	48 89 c7             	mov    %rax,%rdi
    cc6b:	e8 e2 06 00 00       	call   d352 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
    cc70:	c9                   	leave
    cc71:	c3                   	ret

000000000000cc72 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    cc72:	55                   	push   %rbp
    cc73:	48 89 e5             	mov    %rsp,%rbp
    cc76:	48 83 ec 10          	sub    $0x10,%rsp
    cc7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cc7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cc82:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cc86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cc8a:	ba 00 00 00 00       	mov    $0x0,%edx
    cc8f:	48 89 ce             	mov    %rcx,%rsi
    cc92:	48 89 c7             	mov    %rax,%rdi
    cc95:	e8 cc 06 00 00       	call   d366 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>
    cc9a:	c9                   	leave
    cc9b:	c3                   	ret

000000000000cc9c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cc9c:	55                   	push   %rbp
    cc9d:	48 89 e5             	mov    %rsp,%rbp
    cca0:	48 83 ec 20          	sub    $0x20,%rsp
    cca4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cca8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    ccac:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    ccb1:	74 40                	je     ccf3 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    ccb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ccb7:	48 89 c7             	mov    %rax,%rdi
    ccba:	e8 08 07 00 00       	call   d3c7 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
    ccbf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    ccc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ccc7:	48 89 c7             	mov    %rax,%rdi
    ccca:	e8 06 07 00 00       	call   d3d5 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>
	      ++__first;
    cccf:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    ccd4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ccd8:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ccdc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cce4:	48 89 ce             	mov    %rcx,%rsi
    cce7:	48 89 c7             	mov    %rax,%rdi
    ccea:	e8 0d 07 00 00       	call   d3fc <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>
    ccef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    ccf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    ccf7:	c9                   	leave
    ccf8:	c3                   	ret
    ccf9:	90                   	nop

000000000000ccfa <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    ccfa:	55                   	push   %rbp
    ccfb:	48 89 e5             	mov    %rsp,%rbp
    ccfe:	48 83 ec 10          	sub    $0x10,%rsp
    cd02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cd06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd0a:	48 89 c7             	mov    %rax,%rdi
    cd0d:	e8 2e 07 00 00       	call   d440 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>
    cd12:	c9                   	leave
    cd13:	c3                   	ret

000000000000cd14 <_ZNSt16allocator_traitsISaI23VkQueueFamilyPropertiesEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    cd14:	55                   	push   %rbp
    cd15:	48 89 e5             	mov    %rsp,%rbp
    cd18:	48 83 ec 10          	sub    $0x10,%rsp
    cd1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cd20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cd24:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cd28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd2c:	ba 00 00 00 00       	mov    $0x0,%edx
    cd31:	48 89 ce             	mov    %rcx,%rsi
    cd34:	48 89 c7             	mov    %rax,%rdi
    cd37:	e8 18 07 00 00       	call   d454 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv>
    cd3c:	c9                   	leave
    cd3d:	c3                   	ret

000000000000cd3e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cd3e:	55                   	push   %rbp
    cd3f:	48 89 e5             	mov    %rsp,%rbp
    cd42:	48 83 ec 20          	sub    $0x20,%rsp
    cd46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cd4a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cd4e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cd53:	74 40                	je     cd95 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP23VkQueueFamilyPropertiesmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    cd55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cd59:	48 89 c7             	mov    %rax,%rdi
    cd5c:	e8 c2 f9 ff ff       	call   c723 <_ZSt11__addressofI23VkQueueFamilyPropertiesEPT_RS1_>
    cd61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cd65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd69:	48 89 c7             	mov    %rax,%rdi
    cd6c:	e8 4d 07 00 00       	call   d4be <_ZSt10_ConstructI23VkQueueFamilyPropertiesJEEvPT_DpOT0_>
	      ++__first;
    cd71:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    cd76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cd7a:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    cd7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cd82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cd86:	48 89 ce             	mov    %rcx,%rsi
    cd89:	48 89 c7             	mov    %rax,%rdi
    cd8c:	e8 76 07 00 00       	call   d507 <_ZSt6fill_nIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_>
    cd91:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cd95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cd99:	c9                   	leave
    cd9a:	c3                   	ret
    cd9b:	90                   	nop

000000000000cd9c <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cd9c:	55                   	push   %rbp
    cd9d:	48 89 e5             	mov    %rsp,%rbp
    cda0:	48 83 ec 10          	sub    $0x10,%rsp
    cda4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cda8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdac:	48 89 c7             	mov    %rax,%rdi
    cdaf:	e8 98 07 00 00       	call   d54c <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>
    cdb4:	c9                   	leave
    cdb5:	c3                   	ret

000000000000cdb6 <_ZNSt16allocator_traitsISaISt8optionalI23VkQueueFamilyPropertiesEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
    cdb6:	55                   	push   %rbp
    cdb7:	48 89 e5             	mov    %rsp,%rbp
    cdba:	48 83 ec 10          	sub    $0x10,%rsp
    cdbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cdc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cdc6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cdca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdce:	ba 00 00 00 00       	mov    $0x0,%edx
    cdd3:	48 89 ce             	mov    %rcx,%rsi
    cdd6:	48 89 c7             	mov    %rax,%rdi
    cdd9:	e8 82 07 00 00       	call   d560 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv>
    cdde:	c9                   	leave
    cddf:	c3                   	ret

000000000000cde0 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cde0:	55                   	push   %rbp
    cde1:	48 89 e5             	mov    %rsp,%rbp
    cde4:	48 83 ec 20          	sub    $0x20,%rsp
    cde8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cdec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
    cdf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cdf4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
    cdf8:	eb 1e                	jmp    ce18 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
    cdfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdfe:	48 89 c7             	mov    %rax,%rdi
    ce01:	e8 c5 07 00 00       	call   d5cb <_ZSt11__addressofISt8optionalI23VkQueueFamilyPropertiesEEPT_RS3_>
    ce06:	48 89 c7             	mov    %rax,%rdi
    ce09:	e8 cb 07 00 00       	call   d5d9 <_ZSt10_ConstructISt8optionalI23VkQueueFamilyPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
    ce0e:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
    ce13:	48 83 45 f8 1c       	addq   $0x1c,-0x8(%rbp)
    ce18:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    ce1d:	75 db                	jne    cdfa <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt8optionalI23VkQueueFamilyPropertiesEmEET_S6_T0_+0x1a>
	      return __cur;
    ce1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
    ce23:	c9                   	leave
    ce24:	c3                   	ret
    ce25:	90                   	nop

000000000000ce26 <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    ce26:	55                   	push   %rbp
    ce27:	48 89 e5             	mov    %rsp,%rbp
    ce2a:	48 83 ec 10          	sub    $0x10,%rsp
    ce2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    ce32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce36:	48 89 c7             	mov    %rax,%rdi
    ce39:	e8 c4 07 00 00       	call   d602 <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>
    ce3e:	c9                   	leave
    ce3f:	c3                   	ret

000000000000ce40 <_ZNSt16allocator_traitsISaI18VkSurfaceFormatKHREE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    ce40:	55                   	push   %rbp
    ce41:	48 89 e5             	mov    %rsp,%rbp
    ce44:	48 83 ec 10          	sub    $0x10,%rsp
    ce48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ce4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    ce50:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ce54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce58:	ba 00 00 00 00       	mov    $0x0,%edx
    ce5d:	48 89 ce             	mov    %rcx,%rsi
    ce60:	48 89 c7             	mov    %rax,%rdi
    ce63:	e8 ae 07 00 00       	call   d616 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv>
    ce68:	c9                   	leave
    ce69:	c3                   	ret

000000000000ce6a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    ce6a:	55                   	push   %rbp
    ce6b:	48 89 e5             	mov    %rsp,%rbp
    ce6e:	48 83 ec 20          	sub    $0x20,%rsp
    ce72:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ce76:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    ce7a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    ce7f:	74 40                	je     cec1 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP18VkSurfaceFormatKHRmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    ce81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ce85:	48 89 c7             	mov    %rax,%rdi
    ce88:	e8 ea 07 00 00       	call   d677 <_ZSt11__addressofI18VkSurfaceFormatKHREPT_RS1_>
    ce8d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    ce91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce95:	48 89 c7             	mov    %rax,%rdi
    ce98:	e8 e8 07 00 00       	call   d685 <_ZSt10_ConstructI18VkSurfaceFormatKHRJEEvPT_DpOT0_>
	      ++__first;
    ce9d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    cea2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cea6:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    ceaa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ceae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ceb2:	48 89 ce             	mov    %rcx,%rsi
    ceb5:	48 89 c7             	mov    %rax,%rdi
    ceb8:	e8 f5 07 00 00       	call   d6b2 <_ZSt6fill_nIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_>
    cebd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cec5:	c9                   	leave
    cec6:	c3                   	ret
    cec7:	90                   	nop

000000000000cec8 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cec8:	55                   	push   %rbp
    cec9:	48 89 e5             	mov    %rsp,%rbp
    cecc:	48 83 ec 10          	sub    $0x10,%rsp
    ced0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    ced4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ced8:	48 89 c7             	mov    %rax,%rdi
    cedb:	e8 16 08 00 00       	call   d6f6 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>
    cee0:	c9                   	leave
    cee1:	c3                   	ret

000000000000cee2 <_ZNSt16allocator_traitsISaI16VkPresentModeKHREE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
    cee2:	55                   	push   %rbp
    cee3:	48 89 e5             	mov    %rsp,%rbp
    cee6:	48 83 ec 10          	sub    $0x10,%rsp
    ceea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ceee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cef2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cefa:	ba 00 00 00 00       	mov    $0x0,%edx
    ceff:	48 89 ce             	mov    %rcx,%rsi
    cf02:	48 89 c7             	mov    %rax,%rdi
    cf05:	e8 00 08 00 00       	call   d70a <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv>
    cf0a:	c9                   	leave
    cf0b:	c3                   	ret

000000000000cf0c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cf0c:	55                   	push   %rbp
    cf0d:	48 89 e5             	mov    %rsp,%rbp
    cf10:	48 83 ec 20          	sub    $0x20,%rsp
    cf14:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cf18:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cf1c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cf21:	74 40                	je     cf63 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP16VkPresentModeKHRmEET_S4_T0_+0x57>
		= std::__addressof(*__first);
    cf23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cf27:	48 89 c7             	mov    %rax,%rdi
    cf2a:	e8 3c 08 00 00       	call   d76b <_ZSt11__addressofI16VkPresentModeKHREPT_RS1_>
    cf2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cf33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf37:	48 89 c7             	mov    %rax,%rdi
    cf3a:	e8 3a 08 00 00       	call   d779 <_ZSt10_ConstructI16VkPresentModeKHRJEEvPT_DpOT0_>
	      ++__first;
    cf3f:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    cf44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cf48:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    cf4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cf50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cf54:	48 89 ce             	mov    %rcx,%rsi
    cf57:	48 89 c7             	mov    %rax,%rdi
    cf5a:	e8 40 08 00 00       	call   d79f <_ZSt6fill_nIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_>
    cf5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    cf63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    cf67:	c9                   	leave
    cf68:	c3                   	ret
    cf69:	90                   	nop

000000000000cf6a <_ZNKSt15__new_allocatorIP9VkImage_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    cf6a:	55                   	push   %rbp
    cf6b:	48 89 e5             	mov    %rsp,%rbp
    cf6e:	48 83 ec 10          	sub    $0x10,%rsp
    cf72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
    cf76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf7a:	48 89 c7             	mov    %rax,%rdi
    cf7d:	e8 62 08 00 00       	call   d7e4 <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>
    cf82:	c9                   	leave
    cf83:	c3                   	ret

000000000000cf84 <_ZNSt16allocator_traitsISaIP9VkImage_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
    cf84:	55                   	push   %rbp
    cf85:	48 89 e5             	mov    %rsp,%rbp
    cf88:	48 83 ec 10          	sub    $0x10,%rsp
    cf8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    cf90:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    cf94:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    cf98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf9c:	ba 00 00 00 00       	mov    $0x0,%edx
    cfa1:	48 89 ce             	mov    %rcx,%rsi
    cfa4:	48 89 c7             	mov    %rax,%rdi
    cfa7:	e8 4c 08 00 00       	call   d7f8 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv>
    cfac:	c9                   	leave
    cfad:	c3                   	ret

000000000000cfae <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    cfae:	55                   	push   %rbp
    cfaf:	48 89 e5             	mov    %rsp,%rbp
    cfb2:	48 83 ec 20          	sub    $0x20,%rsp
    cfb6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cfba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
    cfbe:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    cfc3:	74 40                	je     d005 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkImage_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
    cfc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cfc9:	48 89 c7             	mov    %rax,%rdi
    cfcc:	e8 88 08 00 00       	call   d859 <_ZSt11__addressofIP9VkImage_TEPT_RS2_>
    cfd1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
    cfd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cfd9:	48 89 c7             	mov    %rax,%rdi
    cfdc:	e8 86 08 00 00       	call   d867 <_ZSt10_ConstructIP9VkImage_TJEEvPT_DpOT0_>
	      ++__first;
    cfe1:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
    cfe6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cfea:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    cfee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cff2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cff6:	48 89 ce             	mov    %rcx,%rsi
    cff9:	48 89 c7             	mov    %rax,%rdi
    cffc:	e8 8d 08 00 00       	call   d88e <_ZSt6fill_nIPP9VkImage_TmS1_ET_S3_T0_RKT1_>
    d001:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
    d005:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
    d009:	c9                   	leave
    d00a:	c3                   	ret
    d00b:	90                   	nop

000000000000d00c <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d00c:	55                   	push   %rbp
    d00d:	48 89 e5             	mov    %rsp,%rbp
    d010:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d014:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
    d01b:	03 3f 00 
      }
    d01e:	5d                   	pop    %rbp
    d01f:	c3                   	ret

000000000000d020 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d020:	55                   	push   %rbp
    d021:	48 89 e5             	mov    %rsp,%rbp
    d024:	48 83 ec 20          	sub    $0x20,%rsp
    d028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d02c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d030:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d038:	48 89 c7             	mov    %rax,%rdi
    d03b:	e8 cc ff ff ff       	call   d00c <_ZNKSt15__new_allocatorI17VkLayerPropertiesE11_M_max_sizeEv>
    d040:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d044:	0f 92 c0             	setb   %al
    d047:	0f b6 c0             	movzbl %al,%eax
    d04a:	48 85 c0             	test   %rax,%rax
    d04d:	0f 95 c0             	setne  %al
    d050:	84 c0                	test   %al,%al
    d052:	74 1a                	je     d06e <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d054:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    d05b:	07 7e 00 
    d05e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d062:	73 05                	jae    d069 <_ZNSt15__new_allocatorI17VkLayerPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d064:	e8 e7 72 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d069:	e8 b2 70 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d06e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d072:	48 89 d0             	mov    %rdx,%rax
    d075:	48 c1 e0 06          	shl    $0x6,%rax
    d079:	48 01 d0             	add    %rdx,%rax
    d07c:	48 c1 e0 03          	shl    $0x3,%rax
    d080:	48 89 c7             	mov    %rax,%rdi
    d083:	e8 48 74 ff ff       	call   44d0 <_Znwm@plt>
    d088:	90                   	nop
      }
    d089:	c9                   	leave
    d08a:	c3                   	ret

000000000000d08b <_ZSt11__addressofI17VkLayerPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d08b:	55                   	push   %rbp
    d08c:	48 89 e5             	mov    %rsp,%rbp
    d08f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d093:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d097:	5d                   	pop    %rbp
    d098:	c3                   	ret

000000000000d099 <_ZSt10_ConstructI17VkLayerPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d099:	55                   	push   %rbp
    d09a:	48 89 e5             	mov    %rsp,%rbp
    d09d:	48 83 ec 10          	sub    $0x10,%rsp
    d0a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d0a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d0a9:	48 89 c6             	mov    %rax,%rsi
    d0ac:	bf 08 02 00 00       	mov    $0x208,%edi
    d0b1:	e8 9c 96 ff ff       	call   6752 <_ZnwmPv>
    d0b6:	b9 08 02 00 00       	mov    $0x208,%ecx
    d0bb:	be 00 00 00 00       	mov    $0x0,%esi
    d0c0:	48 89 30             	mov    %rsi,(%rax)
    d0c3:	89 ca                	mov    %ecx,%edx
    d0c5:	48 01 c2             	add    %rax,%rdx
    d0c8:	48 83 c2 08          	add    $0x8,%rdx
    d0cc:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
    d0d0:	48 8d 50 08          	lea    0x8(%rax),%rdx
    d0d4:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    d0d8:	48 29 d0             	sub    %rdx,%rax
    d0db:	01 c1                	add    %eax,%ecx
    d0dd:	83 e1 f8             	and    $0xfffffff8,%ecx
    d0e0:	89 c8                	mov    %ecx,%eax
    d0e2:	c1 e8 03             	shr    $0x3,%eax
    d0e5:	89 c1                	mov    %eax,%ecx
    d0e7:	48 89 d7             	mov    %rdx,%rdi
    d0ea:	48 89 f0             	mov    %rsi,%rax
    d0ed:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    }
    d0f0:	90                   	nop
    d0f1:	c9                   	leave
    d0f2:	c3                   	ret

000000000000d0f3 <_ZSt6fill_nIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d0f3:	55                   	push   %rbp
    d0f4:	48 89 e5             	mov    %rsp,%rbp
    d0f7:	48 83 ec 20          	sub    $0x20,%rsp
    d0fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d0ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d103:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d107:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d10b:	48 89 c7             	mov    %rax,%rdi
    d10e:	e8 bf 07 00 00       	call   d8d2 <_ZSt19__iterator_categoryIP17VkLayerPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d113:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d117:	48 89 c7             	mov    %rax,%rdi
    d11a:	e8 45 96 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d11f:	48 89 c1             	mov    %rax,%rcx
    d122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d126:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d12a:	48 89 ce             	mov    %rcx,%rsi
    d12d:	48 89 c7             	mov    %rax,%rdi
    d130:	e8 a8 07 00 00       	call   d8dd <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    d135:	c9                   	leave
    d136:	c3                   	ret
    d137:	90                   	nop

000000000000d138 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d138:	55                   	push   %rbp
    d139:	48 89 e5             	mov    %rsp,%rbp
    d13c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d140:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
    d147:	07 7e 00 
      }
    d14a:	5d                   	pop    %rbp
    d14b:	c3                   	ret

000000000000d14c <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d14c:	55                   	push   %rbp
    d14d:	48 89 e5             	mov    %rsp,%rbp
    d150:	48 83 ec 20          	sub    $0x20,%rsp
    d154:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d158:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d15c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d164:	48 89 c7             	mov    %rax,%rdi
    d167:	e8 cc ff ff ff       	call   d138 <_ZNKSt15__new_allocatorI21VkExtensionPropertiesE11_M_max_sizeEv>
    d16c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d170:	0f 92 c0             	setb   %al
    d173:	0f b6 c0             	movzbl %al,%eax
    d176:	48 85 c0             	test   %rax,%rax
    d179:	0f 95 c0             	setne  %al
    d17c:	84 c0                	test   %al,%al
    d17e:	74 1a                	je     d19a <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d180:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
    d187:	0f fc 00 
    d18a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d18e:	73 05                	jae    d195 <_ZNSt15__new_allocatorI21VkExtensionPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d190:	e8 bb 71 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d195:	e8 86 6f ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d19a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d19e:	48 89 d0             	mov    %rdx,%rax
    d1a1:	48 c1 e0 06          	shl    $0x6,%rax
    d1a5:	48 01 d0             	add    %rdx,%rax
    d1a8:	48 c1 e0 02          	shl    $0x2,%rax
    d1ac:	48 89 c7             	mov    %rax,%rdi
    d1af:	e8 1c 73 ff ff       	call   44d0 <_Znwm@plt>
    d1b4:	90                   	nop
      }
    d1b5:	c9                   	leave
    d1b6:	c3                   	ret

000000000000d1b7 <_ZSt11__addressofI21VkExtensionPropertiesEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d1b7:	55                   	push   %rbp
    d1b8:	48 89 e5             	mov    %rsp,%rbp
    d1bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d1bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d1c3:	5d                   	pop    %rbp
    d1c4:	c3                   	ret

000000000000d1c5 <_ZSt10_ConstructI21VkExtensionPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d1c5:	55                   	push   %rbp
    d1c6:	48 89 e5             	mov    %rsp,%rbp
    d1c9:	48 83 ec 10          	sub    $0x10,%rsp
    d1cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d1d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d1d5:	48 89 c6             	mov    %rax,%rsi
    d1d8:	bf 04 01 00 00       	mov    $0x104,%edi
    d1dd:	e8 70 95 ff ff       	call   6752 <_ZnwmPv>
    d1e2:	b9 04 01 00 00       	mov    $0x104,%ecx
    d1e7:	be 00 00 00 00       	mov    $0x0,%esi
    d1ec:	48 89 30             	mov    %rsi,(%rax)
    d1ef:	89 ca                	mov    %ecx,%edx
    d1f1:	48 01 c2             	add    %rax,%rdx
    d1f4:	48 83 c2 08          	add    $0x8,%rdx
    d1f8:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
    d1fc:	48 8d 50 08          	lea    0x8(%rax),%rdx
    d200:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    d204:	48 29 d0             	sub    %rdx,%rax
    d207:	01 c1                	add    %eax,%ecx
    d209:	83 e1 f8             	and    $0xfffffff8,%ecx
    d20c:	89 c8                	mov    %ecx,%eax
    d20e:	c1 e8 03             	shr    $0x3,%eax
    d211:	89 c1                	mov    %eax,%ecx
    d213:	48 89 d7             	mov    %rdx,%rdi
    d216:	48 89 f0             	mov    %rsi,%rax
    d219:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    }
    d21c:	90                   	nop
    d21d:	c9                   	leave
    d21e:	c3                   	ret

000000000000d21f <_ZSt6fill_nIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d21f:	55                   	push   %rbp
    d220:	48 89 e5             	mov    %rsp,%rbp
    d223:	48 83 ec 20          	sub    $0x20,%rsp
    d227:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d22b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d22f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d233:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d237:	48 89 c7             	mov    %rax,%rdi
    d23a:	e8 0d 07 00 00       	call   d94c <_ZSt19__iterator_categoryIP21VkExtensionPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d23f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d243:	48 89 c7             	mov    %rax,%rdi
    d246:	e8 19 95 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d24b:	48 89 c1             	mov    %rax,%rcx
    d24e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d252:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d256:	48 89 ce             	mov    %rcx,%rsi
    d259:	48 89 c7             	mov    %rax,%rdi
    d25c:	e8 f6 06 00 00       	call   d957 <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    d261:	c9                   	leave
    d262:	c3                   	ret
    d263:	90                   	nop

000000000000d264 <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d264:	55                   	push   %rbp
    d265:	48 89 e5             	mov    %rsp,%rbp
    d268:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d26c:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    d273:	ff ff 0f 
      }
    d276:	5d                   	pop    %rbp
    d277:	c3                   	ret

000000000000d278 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d278:	55                   	push   %rbp
    d279:	48 89 e5             	mov    %rsp,%rbp
    d27c:	48 83 ec 20          	sub    $0x20,%rsp
    d280:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d284:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d288:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d28c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d290:	48 89 c7             	mov    %rax,%rdi
    d293:	e8 cc ff ff ff       	call   d264 <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
    d298:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d29c:	0f 92 c0             	setb   %al
    d29f:	0f b6 c0             	movzbl %al,%eax
    d2a2:	48 85 c0             	test   %rax,%rax
    d2a5:	0f 95 c0             	setne  %al
    d2a8:	84 c0                	test   %al,%al
    d2aa:	74 1a                	je     d2c6 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d2ac:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d2b3:	ff ff 1f 
    d2b6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d2ba:	73 05                	jae    d2c1 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d2bc:	e8 8f 70 ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d2c1:	e8 5a 6e ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d2c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d2ca:	48 c1 e0 03          	shl    $0x3,%rax
    d2ce:	48 89 c7             	mov    %rax,%rdi
    d2d1:	e8 fa 71 ff ff       	call   44d0 <_Znwm@plt>
    d2d6:	90                   	nop
      }
    d2d7:	c9                   	leave
    d2d8:	c3                   	ret

000000000000d2d9 <_ZSt11__addressofIPKcEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d2d9:	55                   	push   %rbp
    d2da:	48 89 e5             	mov    %rsp,%rbp
    d2dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d2e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d2e5:	5d                   	pop    %rbp
    d2e6:	c3                   	ret

000000000000d2e7 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d2e7:	55                   	push   %rbp
    d2e8:	48 89 e5             	mov    %rsp,%rbp
    d2eb:	48 83 ec 10          	sub    $0x10,%rsp
    d2ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d2f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d2f7:	48 89 c6             	mov    %rax,%rsi
    d2fa:	bf 08 00 00 00       	mov    $0x8,%edi
    d2ff:	e8 4e 94 ff ff       	call   6752 <_ZnwmPv>
    d304:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    d30b:	90                   	nop
    d30c:	c9                   	leave
    d30d:	c3                   	ret

000000000000d30e <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d30e:	55                   	push   %rbp
    d30f:	48 89 e5             	mov    %rsp,%rbp
    d312:	48 83 ec 20          	sub    $0x20,%rsp
    d316:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d31a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d31e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d322:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d326:	48 89 c7             	mov    %rax,%rdi
    d329:	e8 98 06 00 00       	call   d9c6 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d32e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d332:	48 89 c7             	mov    %rax,%rdi
    d335:	e8 2a 94 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d33a:	48 89 c1             	mov    %rax,%rcx
    d33d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d341:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d345:	48 89 ce             	mov    %rcx,%rsi
    d348:	48 89 c7             	mov    %rax,%rdi
    d34b:	e8 81 06 00 00       	call   d9d1 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    d350:	c9                   	leave
    d351:	c3                   	ret

000000000000d352 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d352:	55                   	push   %rbp
    d353:	48 89 e5             	mov    %rsp,%rbp
    d356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d35a:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    d361:	ff ff 0f 
      }
    d364:	5d                   	pop    %rbp
    d365:	c3                   	ret

000000000000d366 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d366:	55                   	push   %rbp
    d367:	48 89 e5             	mov    %rsp,%rbp
    d36a:	48 83 ec 20          	sub    $0x20,%rsp
    d36e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d372:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d376:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d37a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d37e:	48 89 c7             	mov    %rax,%rdi
    d381:	e8 cc ff ff ff       	call   d352 <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
    d386:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d38a:	0f 92 c0             	setb   %al
    d38d:	0f b6 c0             	movzbl %al,%eax
    d390:	48 85 c0             	test   %rax,%rax
    d393:	0f 95 c0             	setne  %al
    d396:	84 c0                	test   %al,%al
    d398:	74 1a                	je     d3b4 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d39a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d3a1:	ff ff 1f 
    d3a4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d3a8:	73 05                	jae    d3af <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d3aa:	e8 a1 6f ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d3af:	e8 6c 6d ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d3b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d3b8:	48 c1 e0 03          	shl    $0x3,%rax
    d3bc:	48 89 c7             	mov    %rax,%rdi
    d3bf:	e8 0c 71 ff ff       	call   44d0 <_Znwm@plt>
    d3c4:	90                   	nop
      }
    d3c5:	c9                   	leave
    d3c6:	c3                   	ret

000000000000d3c7 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d3c7:	55                   	push   %rbp
    d3c8:	48 89 e5             	mov    %rsp,%rbp
    d3cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d3cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d3d3:	5d                   	pop    %rbp
    d3d4:	c3                   	ret

000000000000d3d5 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d3d5:	55                   	push   %rbp
    d3d6:	48 89 e5             	mov    %rsp,%rbp
    d3d9:	48 83 ec 10          	sub    $0x10,%rsp
    d3dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d3e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d3e5:	48 89 c6             	mov    %rax,%rsi
    d3e8:	bf 08 00 00 00       	mov    $0x8,%edi
    d3ed:	e8 60 93 ff ff       	call   6752 <_ZnwmPv>
    d3f2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    d3f9:	90                   	nop
    d3fa:	c9                   	leave
    d3fb:	c3                   	ret

000000000000d3fc <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d3fc:	55                   	push   %rbp
    d3fd:	48 89 e5             	mov    %rsp,%rbp
    d400:	48 83 ec 20          	sub    $0x20,%rsp
    d404:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d408:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d40c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d410:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d414:	48 89 c7             	mov    %rax,%rdi
    d417:	e8 12 06 00 00       	call   da2e <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d41c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d420:	48 89 c7             	mov    %rax,%rdi
    d423:	e8 3c 93 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d428:	48 89 c1             	mov    %rax,%rcx
    d42b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d42f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d433:	48 89 ce             	mov    %rcx,%rsi
    d436:	48 89 c7             	mov    %rax,%rdi
    d439:	e8 fb 05 00 00       	call   da39 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    d43e:	c9                   	leave
    d43f:	c3                   	ret

000000000000d440 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d440:	55                   	push   %rbp
    d441:	48 89 e5             	mov    %rsp,%rbp
    d444:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d448:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    d44f:	55 55 05 
      }
    d452:	5d                   	pop    %rbp
    d453:	c3                   	ret

000000000000d454 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d454:	55                   	push   %rbp
    d455:	48 89 e5             	mov    %rsp,%rbp
    d458:	48 83 ec 20          	sub    $0x20,%rsp
    d45c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d460:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d464:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d46c:	48 89 c7             	mov    %rax,%rdi
    d46f:	e8 cc ff ff ff       	call   d440 <_ZNKSt15__new_allocatorI23VkQueueFamilyPropertiesE11_M_max_sizeEv>
    d474:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d478:	0f 92 c0             	setb   %al
    d47b:	0f b6 c0             	movzbl %al,%eax
    d47e:	48 85 c0             	test   %rax,%rax
    d481:	0f 95 c0             	setne  %al
    d484:	84 c0                	test   %al,%al
    d486:	74 1a                	je     d4a2 <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d488:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
    d48f:	aa aa 0a 
    d492:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d496:	73 05                	jae    d49d <_ZNSt15__new_allocatorI23VkQueueFamilyPropertiesE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d498:	e8 b3 6e ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d49d:	e8 7e 6c ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d4a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d4a6:	48 89 d0             	mov    %rdx,%rax
    d4a9:	48 01 c0             	add    %rax,%rax
    d4ac:	48 01 d0             	add    %rdx,%rax
    d4af:	48 c1 e0 03          	shl    $0x3,%rax
    d4b3:	48 89 c7             	mov    %rax,%rdi
    d4b6:	e8 15 70 ff ff       	call   44d0 <_Znwm@plt>
    d4bb:	90                   	nop
      }
    d4bc:	c9                   	leave
    d4bd:	c3                   	ret

000000000000d4be <_ZSt10_ConstructI23VkQueueFamilyPropertiesJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d4be:	55                   	push   %rbp
    d4bf:	48 89 e5             	mov    %rsp,%rbp
    d4c2:	48 83 ec 10          	sub    $0x10,%rsp
    d4c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d4ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d4ce:	48 89 c6             	mov    %rax,%rsi
    d4d1:	bf 18 00 00 00       	mov    $0x18,%edi
    d4d6:	e8 77 92 ff ff       	call   6752 <_ZnwmPv>
    d4db:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    d4e1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    d4e8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    d4ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    d4f6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    d4fd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
    }
    d504:	90                   	nop
    d505:	c9                   	leave
    d506:	c3                   	ret

000000000000d507 <_ZSt6fill_nIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d507:	55                   	push   %rbp
    d508:	48 89 e5             	mov    %rsp,%rbp
    d50b:	48 83 ec 20          	sub    $0x20,%rsp
    d50f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d513:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d517:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d51b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d51f:	48 89 c7             	mov    %rax,%rdi
    d522:	e8 6f 05 00 00       	call   da96 <_ZSt19__iterator_categoryIP23VkQueueFamilyPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d52b:	48 89 c7             	mov    %rax,%rdi
    d52e:	e8 31 92 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d533:	48 89 c1             	mov    %rax,%rcx
    d536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d53a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d53e:	48 89 ce             	mov    %rcx,%rsi
    d541:	48 89 c7             	mov    %rax,%rdi
    d544:	e8 58 05 00 00       	call   daa1 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    d549:	c9                   	leave
    d54a:	c3                   	ret
    d54b:	90                   	nop

000000000000d54c <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d54c:	55                   	push   %rbp
    d54d:	48 89 e5             	mov    %rsp,%rbp
    d550:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d554:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
    d55b:	49 92 04 
      }
    d55e:	5d                   	pop    %rbp
    d55f:	c3                   	ret

000000000000d560 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d560:	55                   	push   %rbp
    d561:	48 89 e5             	mov    %rsp,%rbp
    d564:	48 83 ec 20          	sub    $0x20,%rsp
    d568:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d56c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d570:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d578:	48 89 c7             	mov    %rax,%rdi
    d57b:	e8 cc ff ff ff       	call   d54c <_ZNKSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE11_M_max_sizeEv>
    d580:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d584:	0f 92 c0             	setb   %al
    d587:	0f b6 c0             	movzbl %al,%eax
    d58a:	48 85 c0             	test   %rax,%rax
    d58d:	0f 95 c0             	setne  %al
    d590:	84 c0                	test   %al,%al
    d592:	74 1a                	je     d5ae <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d594:	48 b8 24 49 92 24 49 	movabs $0x924924924924924,%rax
    d59b:	92 24 09 
    d59e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d5a2:	73 05                	jae    d5a9 <_ZNSt15__new_allocatorISt8optionalI23VkQueueFamilyPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d5a4:	e8 a7 6d ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d5a9:	e8 72 6b ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d5ae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d5b2:	48 89 d0             	mov    %rdx,%rax
    d5b5:	48 c1 e0 03          	shl    $0x3,%rax
    d5b9:	48 29 d0             	sub    %rdx,%rax
    d5bc:	48 c1 e0 02          	shl    $0x2,%rax
    d5c0:	48 89 c7             	mov    %rax,%rdi
    d5c3:	e8 08 6f ff ff       	call   44d0 <_Znwm@plt>
    d5c8:	90                   	nop
      }
    d5c9:	c9                   	leave
    d5ca:	c3                   	ret

000000000000d5cb <_ZSt11__addressofISt8optionalI23VkQueueFamilyPropertiesEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d5cb:	55                   	push   %rbp
    d5cc:	48 89 e5             	mov    %rsp,%rbp
    d5cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d5d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d5d7:	5d                   	pop    %rbp
    d5d8:	c3                   	ret

000000000000d5d9 <_ZSt10_ConstructISt8optionalI23VkQueueFamilyPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d5d9:	55                   	push   %rbp
    d5da:	48 89 e5             	mov    %rsp,%rbp
    d5dd:	48 83 ec 10          	sub    $0x10,%rsp
    d5e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d5e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d5e9:	48 89 c6             	mov    %rax,%rsi
    d5ec:	bf 1c 00 00 00       	mov    $0x1c,%edi
    d5f1:	e8 5c 91 ff ff       	call   6752 <_ZnwmPv>
    d5f6:	48 89 c7             	mov    %rax,%rdi
    d5f9:	e8 6c 05 00 00       	call   db6a <_ZNSt8optionalI23VkQueueFamilyPropertiesEC1Ev>
    }
    d5fe:	90                   	nop
    d5ff:	c9                   	leave
    d600:	c3                   	ret
    d601:	90                   	nop

000000000000d602 <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d602:	55                   	push   %rbp
    d603:	48 89 e5             	mov    %rsp,%rbp
    d606:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d60a:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    d611:	ff ff 0f 
      }
    d614:	5d                   	pop    %rbp
    d615:	c3                   	ret

000000000000d616 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d616:	55                   	push   %rbp
    d617:	48 89 e5             	mov    %rsp,%rbp
    d61a:	48 83 ec 20          	sub    $0x20,%rsp
    d61e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d622:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d626:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d62a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d62e:	48 89 c7             	mov    %rax,%rdi
    d631:	e8 cc ff ff ff       	call   d602 <_ZNKSt15__new_allocatorI18VkSurfaceFormatKHRE11_M_max_sizeEv>
    d636:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d63a:	0f 92 c0             	setb   %al
    d63d:	0f b6 c0             	movzbl %al,%eax
    d640:	48 85 c0             	test   %rax,%rax
    d643:	0f 95 c0             	setne  %al
    d646:	84 c0                	test   %al,%al
    d648:	74 1a                	je     d664 <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d64a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d651:	ff ff 1f 
    d654:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d658:	73 05                	jae    d65f <_ZNSt15__new_allocatorI18VkSurfaceFormatKHRE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d65a:	e8 f1 6c ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d65f:	e8 bc 6a ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d664:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d668:	48 c1 e0 03          	shl    $0x3,%rax
    d66c:	48 89 c7             	mov    %rax,%rdi
    d66f:	e8 5c 6e ff ff       	call   44d0 <_Znwm@plt>
    d674:	90                   	nop
      }
    d675:	c9                   	leave
    d676:	c3                   	ret

000000000000d677 <_ZSt11__addressofI18VkSurfaceFormatKHREPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d677:	55                   	push   %rbp
    d678:	48 89 e5             	mov    %rsp,%rbp
    d67b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d67f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d683:	5d                   	pop    %rbp
    d684:	c3                   	ret

000000000000d685 <_ZSt10_ConstructI18VkSurfaceFormatKHRJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d685:	55                   	push   %rbp
    d686:	48 89 e5             	mov    %rsp,%rbp
    d689:	48 83 ec 10          	sub    $0x10,%rsp
    d68d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d695:	48 89 c6             	mov    %rax,%rsi
    d698:	bf 08 00 00 00       	mov    $0x8,%edi
    d69d:	e8 b0 90 ff ff       	call   6752 <_ZnwmPv>
    d6a2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    d6a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    }
    d6af:	90                   	nop
    d6b0:	c9                   	leave
    d6b1:	c3                   	ret

000000000000d6b2 <_ZSt6fill_nIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d6b2:	55                   	push   %rbp
    d6b3:	48 89 e5             	mov    %rsp,%rbp
    d6b6:	48 83 ec 20          	sub    $0x20,%rsp
    d6ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d6be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d6c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d6c6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d6ca:	48 89 c7             	mov    %rax,%rdi
    d6cd:	e8 b3 04 00 00       	call   db85 <_ZSt19__iterator_categoryIP18VkSurfaceFormatKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d6d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d6d6:	48 89 c7             	mov    %rax,%rdi
    d6d9:	e8 86 90 ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d6de:	48 89 c1             	mov    %rax,%rcx
    d6e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d6e5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d6e9:	48 89 ce             	mov    %rcx,%rsi
    d6ec:	48 89 c7             	mov    %rax,%rdi
    d6ef:	e8 9c 04 00 00       	call   db90 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    d6f4:	c9                   	leave
    d6f5:	c3                   	ret

000000000000d6f6 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d6f6:	55                   	push   %rbp
    d6f7:	48 89 e5             	mov    %rsp,%rbp
    d6fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d6fe:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d705:	ff ff 1f 
      }
    d708:	5d                   	pop    %rbp
    d709:	c3                   	ret

000000000000d70a <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d70a:	55                   	push   %rbp
    d70b:	48 89 e5             	mov    %rsp,%rbp
    d70e:	48 83 ec 20          	sub    $0x20,%rsp
    d712:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d716:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d71a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d71e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d722:	48 89 c7             	mov    %rax,%rdi
    d725:	e8 cc ff ff ff       	call   d6f6 <_ZNKSt15__new_allocatorI16VkPresentModeKHRE11_M_max_sizeEv>
    d72a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d72e:	0f 92 c0             	setb   %al
    d731:	0f b6 c0             	movzbl %al,%eax
    d734:	48 85 c0             	test   %rax,%rax
    d737:	0f 95 c0             	setne  %al
    d73a:	84 c0                	test   %al,%al
    d73c:	74 1a                	je     d758 <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d73e:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    d745:	ff ff 3f 
    d748:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d74c:	73 05                	jae    d753 <_ZNSt15__new_allocatorI16VkPresentModeKHRE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d74e:	e8 fd 6b ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d753:	e8 c8 69 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d75c:	48 c1 e0 02          	shl    $0x2,%rax
    d760:	48 89 c7             	mov    %rax,%rdi
    d763:	e8 68 6d ff ff       	call   44d0 <_Znwm@plt>
    d768:	90                   	nop
      }
    d769:	c9                   	leave
    d76a:	c3                   	ret

000000000000d76b <_ZSt11__addressofI16VkPresentModeKHREPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d76b:	55                   	push   %rbp
    d76c:	48 89 e5             	mov    %rsp,%rbp
    d76f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d777:	5d                   	pop    %rbp
    d778:	c3                   	ret

000000000000d779 <_ZSt10_ConstructI16VkPresentModeKHRJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d779:	55                   	push   %rbp
    d77a:	48 89 e5             	mov    %rsp,%rbp
    d77d:	48 83 ec 10          	sub    $0x10,%rsp
    d781:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d785:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d789:	48 89 c6             	mov    %rax,%rsi
    d78c:	bf 04 00 00 00       	mov    $0x4,%edi
    d791:	e8 bc 8f ff ff       	call   6752 <_ZnwmPv>
    d796:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    }
    d79c:	90                   	nop
    d79d:	c9                   	leave
    d79e:	c3                   	ret

000000000000d79f <_ZSt6fill_nIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d79f:	55                   	push   %rbp
    d7a0:	48 89 e5             	mov    %rsp,%rbp
    d7a3:	48 83 ec 20          	sub    $0x20,%rsp
    d7a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d7ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d7af:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d7b3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d7b7:	48 89 c7             	mov    %rax,%rdi
    d7ba:	e8 2e 04 00 00       	call   dbed <_ZSt19__iterator_categoryIP16VkPresentModeKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d7bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d7c3:	48 89 c7             	mov    %rax,%rdi
    d7c6:	e8 99 8f ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d7cb:	48 89 c1             	mov    %rax,%rcx
    d7ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d7d6:	48 89 ce             	mov    %rcx,%rsi
    d7d9:	48 89 c7             	mov    %rax,%rdi
    d7dc:	e8 17 04 00 00       	call   dbf8 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
    }
    d7e1:	c9                   	leave
    d7e2:	c3                   	ret
    d7e3:	90                   	nop

000000000000d7e4 <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    d7e4:	55                   	push   %rbp
    d7e5:	48 89 e5             	mov    %rsp,%rbp
    d7e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    d7ec:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
    d7f3:	ff ff 0f 
      }
    d7f6:	5d                   	pop    %rbp
    d7f7:	c3                   	ret

000000000000d7f8 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    d7f8:	55                   	push   %rbp
    d7f9:	48 89 e5             	mov    %rsp,%rbp
    d7fc:	48 83 ec 20          	sub    $0x20,%rsp
    d800:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d804:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d808:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    d80c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d810:	48 89 c7             	mov    %rax,%rdi
    d813:	e8 cc ff ff ff       	call   d7e4 <_ZNKSt15__new_allocatorIP9VkImage_TE11_M_max_sizeEv>
    d818:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d81c:	0f 92 c0             	setb   %al
    d81f:	0f b6 c0             	movzbl %al,%eax
    d822:	48 85 c0             	test   %rax,%rax
    d825:	0f 95 c0             	setne  %al
    d828:	84 c0                	test   %al,%al
    d82a:	74 1a                	je     d846 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    d82c:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    d833:	ff ff 1f 
    d836:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    d83a:	73 05                	jae    d841 <_ZNSt15__new_allocatorIP9VkImage_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
    d83c:	e8 0f 6b ff ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    d841:	e8 da 68 ff ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    d846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d84a:	48 c1 e0 03          	shl    $0x3,%rax
    d84e:	48 89 c7             	mov    %rax,%rdi
    d851:	e8 7a 6c ff ff       	call   44d0 <_Znwm@plt>
    d856:	90                   	nop
      }
    d857:	c9                   	leave
    d858:	c3                   	ret

000000000000d859 <_ZSt11__addressofIP9VkImage_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    d859:	55                   	push   %rbp
    d85a:	48 89 e5             	mov    %rsp,%rbp
    d85d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    d861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d865:	5d                   	pop    %rbp
    d866:	c3                   	ret

000000000000d867 <_ZSt10_ConstructIP9VkImage_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
    d867:	55                   	push   %rbp
    d868:	48 89 e5             	mov    %rsp,%rbp
    d86b:	48 83 ec 10          	sub    $0x10,%rsp
    d86f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    d873:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d877:	48 89 c6             	mov    %rax,%rsi
    d87a:	bf 08 00 00 00       	mov    $0x8,%edi
    d87f:	e8 ce 8e ff ff       	call   6752 <_ZnwmPv>
    d884:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
    d88b:	90                   	nop
    d88c:	c9                   	leave
    d88d:	c3                   	ret

000000000000d88e <_ZSt6fill_nIPP9VkImage_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    d88e:	55                   	push   %rbp
    d88f:	48 89 e5             	mov    %rsp,%rbp
    d892:	48 83 ec 20          	sub    $0x20,%rsp
    d896:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d89a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d89e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
    d8a2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d8a6:	48 89 c7             	mov    %rax,%rdi
    d8a9:	e8 a7 03 00 00       	call   dc55 <_ZSt19__iterator_categoryIPP9VkImage_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
    d8ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d8b2:	48 89 c7             	mov    %rax,%rdi
    d8b5:	e8 aa 8e ff ff       	call   6764 <_ZSt17__size_to_integerm>
    d8ba:	48 89 c1             	mov    %rax,%rcx
    d8bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d8c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d8c5:	48 89 ce             	mov    %rcx,%rsi
    d8c8:	48 89 c7             	mov    %rax,%rdi
    d8cb:	e8 90 03 00 00       	call   dc60 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
    d8d0:	c9                   	leave
    d8d1:	c3                   	ret

000000000000d8d2 <_ZSt19__iterator_categoryIP17VkLayerPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    d8d2:	55                   	push   %rbp
    d8d3:	48 89 e5             	mov    %rsp,%rbp
    d8d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    d8da:	90                   	nop
    d8db:	5d                   	pop    %rbp
    d8dc:	c3                   	ret

000000000000d8dd <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    d8dd:	55                   	push   %rbp
    d8de:	48 89 e5             	mov    %rsp,%rbp
    d8e1:	48 83 ec 20          	sub    $0x20,%rsp
    d8e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d8e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d8ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    d8f1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    d8f6:	75 06                	jne    d8fe <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    d8f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d8fc:	eb 4c                	jmp    d94a <_ZSt10__fill_n_aIP17VkLayerPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6d>
      std::__fill_a(__first, __first + __n, __value);
    d8fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d902:	48 89 d0             	mov    %rdx,%rax
    d905:	48 c1 e0 06          	shl    $0x6,%rax
    d909:	48 01 d0             	add    %rdx,%rax
    d90c:	48 c1 e0 03          	shl    $0x3,%rax
    d910:	48 89 c2             	mov    %rax,%rdx
    d913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d917:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    d91b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d91f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d923:	48 89 ce             	mov    %rcx,%rsi
    d926:	48 89 c7             	mov    %rax,%rdi
    d929:	e8 8f 03 00 00       	call   dcbd <_ZSt8__fill_aIP17VkLayerPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    d92e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d932:	48 89 d0             	mov    %rdx,%rax
    d935:	48 c1 e0 06          	shl    $0x6,%rax
    d939:	48 01 d0             	add    %rdx,%rax
    d93c:	48 c1 e0 03          	shl    $0x3,%rax
    d940:	48 89 c2             	mov    %rax,%rdx
    d943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d947:	48 01 d0             	add    %rdx,%rax
    }
    d94a:	c9                   	leave
    d94b:	c3                   	ret

000000000000d94c <_ZSt19__iterator_categoryIP21VkExtensionPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    d94c:	55                   	push   %rbp
    d94d:	48 89 e5             	mov    %rsp,%rbp
    d950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    d954:	90                   	nop
    d955:	5d                   	pop    %rbp
    d956:	c3                   	ret

000000000000d957 <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    d957:	55                   	push   %rbp
    d958:	48 89 e5             	mov    %rsp,%rbp
    d95b:	48 83 ec 20          	sub    $0x20,%rsp
    d95f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d963:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d967:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    d96b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    d970:	75 06                	jne    d978 <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    d972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d976:	eb 4c                	jmp    d9c4 <_ZSt10__fill_n_aIP21VkExtensionPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6d>
      std::__fill_a(__first, __first + __n, __value);
    d978:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d97c:	48 89 d0             	mov    %rdx,%rax
    d97f:	48 c1 e0 06          	shl    $0x6,%rax
    d983:	48 01 d0             	add    %rdx,%rax
    d986:	48 c1 e0 02          	shl    $0x2,%rax
    d98a:	48 89 c2             	mov    %rax,%rdx
    d98d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d991:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    d995:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d99d:	48 89 ce             	mov    %rcx,%rsi
    d9a0:	48 89 c7             	mov    %rax,%rdi
    d9a3:	e8 43 03 00 00       	call   dceb <_ZSt8__fill_aIP21VkExtensionPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    d9a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d9ac:	48 89 d0             	mov    %rdx,%rax
    d9af:	48 c1 e0 06          	shl    $0x6,%rax
    d9b3:	48 01 d0             	add    %rdx,%rax
    d9b6:	48 c1 e0 02          	shl    $0x2,%rax
    d9ba:	48 89 c2             	mov    %rax,%rdx
    d9bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d9c1:	48 01 d0             	add    %rdx,%rax
    }
    d9c4:	c9                   	leave
    d9c5:	c3                   	ret

000000000000d9c6 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    d9c6:	55                   	push   %rbp
    d9c7:	48 89 e5             	mov    %rsp,%rbp
    d9ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    d9ce:	90                   	nop
    d9cf:	5d                   	pop    %rbp
    d9d0:	c3                   	ret

000000000000d9d1 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    d9d1:	55                   	push   %rbp
    d9d2:	48 89 e5             	mov    %rsp,%rbp
    d9d5:	48 83 ec 20          	sub    $0x20,%rsp
    d9d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    d9dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    d9e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    d9e5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    d9ea:	75 06                	jne    d9f2 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    d9ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d9f0:	eb 3a                	jmp    da2c <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    d9f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9f6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    d9fd:	00 
    d9fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da02:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    da06:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    da0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da0e:	48 89 ce             	mov    %rcx,%rsi
    da11:	48 89 c7             	mov    %rax,%rdi
    da14:	e8 00 03 00 00       	call   dd19 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>
      return __first + __n;
    da19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    da1d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    da24:	00 
    da25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da29:	48 01 d0             	add    %rdx,%rax
    }
    da2c:	c9                   	leave
    da2d:	c3                   	ret

000000000000da2e <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    da2e:	55                   	push   %rbp
    da2f:	48 89 e5             	mov    %rsp,%rbp
    da32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    da36:	90                   	nop
    da37:	5d                   	pop    %rbp
    da38:	c3                   	ret

000000000000da39 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    da39:	55                   	push   %rbp
    da3a:	48 89 e5             	mov    %rsp,%rbp
    da3d:	48 83 ec 20          	sub    $0x20,%rsp
    da41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    da45:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    da49:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    da4d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    da52:	75 06                	jne    da5a <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    da54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da58:	eb 3a                	jmp    da94 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    da5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    da5e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    da65:	00 
    da66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da6a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    da6e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    da72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da76:	48 89 ce             	mov    %rcx,%rsi
    da79:	48 89 c7             	mov    %rax,%rdi
    da7c:	e8 c6 02 00 00       	call   dd47 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>
      return __first + __n;
    da81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    da85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    da8c:	00 
    da8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da91:	48 01 d0             	add    %rdx,%rax
    }
    da94:	c9                   	leave
    da95:	c3                   	ret

000000000000da96 <_ZSt19__iterator_categoryIP23VkQueueFamilyPropertiesENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    da96:	55                   	push   %rbp
    da97:	48 89 e5             	mov    %rsp,%rbp
    da9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    da9e:	90                   	nop
    da9f:	5d                   	pop    %rbp
    daa0:	c3                   	ret

000000000000daa1 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    daa1:	55                   	push   %rbp
    daa2:	48 89 e5             	mov    %rsp,%rbp
    daa5:	48 83 ec 20          	sub    $0x20,%rsp
    daa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    daad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dab1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    dab5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    daba:	75 06                	jne    dac2 <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    dabc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dac0:	eb 4a                	jmp    db0c <_ZSt10__fill_n_aIP23VkQueueFamilyPropertiesmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x6b>
      std::__fill_a(__first, __first + __n, __value);
    dac2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dac6:	48 89 d0             	mov    %rdx,%rax
    dac9:	48 01 c0             	add    %rax,%rax
    dacc:	48 01 d0             	add    %rdx,%rax
    dacf:	48 c1 e0 03          	shl    $0x3,%rax
    dad3:	48 89 c2             	mov    %rax,%rdx
    dad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dada:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    dade:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dae6:	48 89 ce             	mov    %rcx,%rsi
    dae9:	48 89 c7             	mov    %rax,%rdi
    daec:	e8 84 02 00 00       	call   dd75 <_ZSt8__fill_aIP23VkQueueFamilyPropertiesS0_EvT_S2_RKT0_>
      return __first + __n;
    daf1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    daf5:	48 89 d0             	mov    %rdx,%rax
    daf8:	48 01 c0             	add    %rax,%rax
    dafb:	48 01 d0             	add    %rdx,%rax
    dafe:	48 c1 e0 03          	shl    $0x3,%rax
    db02:	48 89 c2             	mov    %rax,%rdx
    db05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db09:	48 01 d0             	add    %rdx,%rax
    }
    db0c:	c9                   	leave
    db0d:	c3                   	ret

000000000000db0e <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesEC1Ev>:
      _Optional_payload_base() = default;
    db0e:	55                   	push   %rbp
    db0f:	48 89 e5             	mov    %rsp,%rbp
    db12:	48 83 ec 10          	sub    $0x10,%rsp
    db16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db1e:	48 89 c7             	mov    %rax,%rdi
    db21:	e8 7e 02 00 00       	call   dda4 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE8_StorageIS0_Lb1EEC1Ev>
    db26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db2a:	c6 40 18 00          	movb   $0x0,0x18(%rax)
    db2e:	90                   	nop
    db2f:	c9                   	leave
    db30:	c3                   	ret
    db31:	90                   	nop

000000000000db32 <_ZNSt17_Optional_payloadI23VkQueueFamilyPropertiesLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
    db32:	55                   	push   %rbp
    db33:	48 89 e5             	mov    %rsp,%rbp
    db36:	48 83 ec 10          	sub    $0x10,%rsp
    db3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db42:	48 89 c7             	mov    %rax,%rdi
    db45:	e8 c4 ff ff ff       	call   db0e <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesEC1Ev>
    db4a:	90                   	nop
    db4b:	c9                   	leave
    db4c:	c3                   	ret
    db4d:	90                   	nop

000000000000db4e <_ZNSt14_Optional_baseI23VkQueueFamilyPropertiesLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
    db4e:	55                   	push   %rbp
    db4f:	48 89 e5             	mov    %rsp,%rbp
    db52:	48 83 ec 10          	sub    $0x10,%rsp
    db56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db5e:	48 89 c7             	mov    %rax,%rdi
    db61:	e8 cc ff ff ff       	call   db32 <_ZNSt17_Optional_payloadI23VkQueueFamilyPropertiesLb1ELb1ELb1EEC1Ev>
    db66:	90                   	nop
    db67:	c9                   	leave
    db68:	c3                   	ret
    db69:	90                   	nop

000000000000db6a <_ZNSt8optionalI23VkQueueFamilyPropertiesEC1Ev>:
      constexpr optional() noexcept { }
    db6a:	55                   	push   %rbp
    db6b:	48 89 e5             	mov    %rsp,%rbp
    db6e:	48 83 ec 10          	sub    $0x10,%rsp
    db72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db7a:	48 89 c7             	mov    %rax,%rdi
    db7d:	e8 cc ff ff ff       	call   db4e <_ZNSt14_Optional_baseI23VkQueueFamilyPropertiesLb1ELb1EEC1Ev>
    db82:	90                   	nop
    db83:	c9                   	leave
    db84:	c3                   	ret

000000000000db85 <_ZSt19__iterator_categoryIP18VkSurfaceFormatKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    db85:	55                   	push   %rbp
    db86:	48 89 e5             	mov    %rsp,%rbp
    db89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    db8d:	90                   	nop
    db8e:	5d                   	pop    %rbp
    db8f:	c3                   	ret

000000000000db90 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    db90:	55                   	push   %rbp
    db91:	48 89 e5             	mov    %rsp,%rbp
    db94:	48 83 ec 20          	sub    $0x20,%rsp
    db98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    db9c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dba0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    dba4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    dba9:	75 06                	jne    dbb1 <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    dbab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbaf:	eb 3a                	jmp    dbeb <_ZSt10__fill_n_aIP18VkSurfaceFormatKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    dbb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dbb5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    dbbc:	00 
    dbbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbc1:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    dbc5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dbc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbcd:	48 89 ce             	mov    %rcx,%rsi
    dbd0:	48 89 c7             	mov    %rax,%rdi
    dbd3:	e8 d7 01 00 00       	call   ddaf <_ZSt8__fill_aIP18VkSurfaceFormatKHRS0_EvT_S2_RKT0_>
      return __first + __n;
    dbd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dbdc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    dbe3:	00 
    dbe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dbe8:	48 01 d0             	add    %rdx,%rax
    }
    dbeb:	c9                   	leave
    dbec:	c3                   	ret

000000000000dbed <_ZSt19__iterator_categoryIP16VkPresentModeKHRENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
    dbed:	55                   	push   %rbp
    dbee:	48 89 e5             	mov    %rsp,%rbp
    dbf1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    dbf5:	90                   	nop
    dbf6:	5d                   	pop    %rbp
    dbf7:	c3                   	ret

000000000000dbf8 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    dbf8:	55                   	push   %rbp
    dbf9:	48 89 e5             	mov    %rsp,%rbp
    dbfc:	48 83 ec 20          	sub    $0x20,%rsp
    dc00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dc04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dc08:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    dc0c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    dc11:	75 06                	jne    dc19 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    dc13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc17:	eb 3a                	jmp    dc53 <_ZSt10__fill_n_aIP16VkPresentModeKHRmS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    dc19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc1d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    dc24:	00 
    dc25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc29:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    dc2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dc31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc35:	48 89 ce             	mov    %rcx,%rsi
    dc38:	48 89 c7             	mov    %rax,%rdi
    dc3b:	e8 9d 01 00 00       	call   dddd <_ZSt8__fill_aIP16VkPresentModeKHRS0_EvT_S2_RKT0_>
      return __first + __n;
    dc40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc44:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    dc4b:	00 
    dc4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc50:	48 01 d0             	add    %rdx,%rax
    }
    dc53:	c9                   	leave
    dc54:	c3                   	ret

000000000000dc55 <_ZSt19__iterator_categoryIPP9VkImage_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
    dc55:	55                   	push   %rbp
    dc56:	48 89 e5             	mov    %rsp,%rbp
    dc59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    dc5d:	90                   	nop
    dc5e:	5d                   	pop    %rbp
    dc5f:	c3                   	ret

000000000000dc60 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
    dc60:	55                   	push   %rbp
    dc61:	48 89 e5             	mov    %rsp,%rbp
    dc64:	48 83 ec 20          	sub    $0x20,%rsp
    dc68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dc6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dc70:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
    dc74:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    dc79:	75 06                	jne    dc81 <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
    dc7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc7f:	eb 3a                	jmp    dcbb <_ZSt10__fill_n_aIPP9VkImage_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
    dc81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dc85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    dc8c:	00 
    dc8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc91:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    dc95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dc99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dc9d:	48 89 ce             	mov    %rcx,%rsi
    dca0:	48 89 c7             	mov    %rax,%rdi
    dca3:	e8 63 01 00 00       	call   de0b <_ZSt8__fill_aIPP9VkImage_TS1_EvT_S3_RKT0_>
      return __first + __n;
    dca8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dcac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    dcb3:	00 
    dcb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dcb8:	48 01 d0             	add    %rdx,%rax
    }
    dcbb:	c9                   	leave
    dcbc:	c3                   	ret

000000000000dcbd <_ZSt8__fill_aIP17VkLayerPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dcbd:	55                   	push   %rbp
    dcbe:	48 89 e5             	mov    %rsp,%rbp
    dcc1:	48 83 ec 20          	sub    $0x20,%rsp
    dcc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dcc9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dccd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    dcd1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dcd5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dcd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dcdd:	48 89 ce             	mov    %rcx,%rsi
    dce0:	48 89 c7             	mov    %rax,%rdi
    dce3:	e8 51 01 00 00       	call   de39 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    dce8:	90                   	nop
    dce9:	c9                   	leave
    dcea:	c3                   	ret

000000000000dceb <_ZSt8__fill_aIP21VkExtensionPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dceb:	55                   	push   %rbp
    dcec:	48 89 e5             	mov    %rsp,%rbp
    dcef:	48 83 ec 20          	sub    $0x20,%rsp
    dcf3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dcf7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dcfb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    dcff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dd03:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dd07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd0b:	48 89 ce             	mov    %rcx,%rsi
    dd0e:	48 89 c7             	mov    %rax,%rdi
    dd11:	e8 9b 01 00 00       	call   deb1 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    dd16:	90                   	nop
    dd17:	c9                   	leave
    dd18:	c3                   	ret

000000000000dd19 <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dd19:	55                   	push   %rbp
    dd1a:	48 89 e5             	mov    %rsp,%rbp
    dd1d:	48 83 ec 20          	sub    $0x20,%rsp
    dd21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dd25:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dd29:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    dd2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dd31:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dd35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd39:	48 89 ce             	mov    %rcx,%rsi
    dd3c:	48 89 c7             	mov    %rax,%rdi
    dd3f:	e8 e5 01 00 00       	call   df29 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    dd44:	90                   	nop
    dd45:	c9                   	leave
    dd46:	c3                   	ret

000000000000dd47 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dd47:	55                   	push   %rbp
    dd48:	48 89 e5             	mov    %rsp,%rbp
    dd4b:	48 83 ec 20          	sub    $0x20,%rsp
    dd4f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dd53:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dd57:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    dd5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dd5f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dd63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd67:	48 89 ce             	mov    %rcx,%rsi
    dd6a:	48 89 c7             	mov    %rax,%rdi
    dd6d:	e8 f2 01 00 00       	call   df64 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    dd72:	90                   	nop
    dd73:	c9                   	leave
    dd74:	c3                   	ret

000000000000dd75 <_ZSt8__fill_aIP23VkQueueFamilyPropertiesS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dd75:	55                   	push   %rbp
    dd76:	48 89 e5             	mov    %rsp,%rbp
    dd79:	48 83 ec 20          	sub    $0x20,%rsp
    dd7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dd81:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dd85:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    dd89:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dd8d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    dd91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dd95:	48 89 ce             	mov    %rcx,%rsi
    dd98:	48 89 c7             	mov    %rax,%rdi
    dd9b:	e8 ff 01 00 00       	call   df9f <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    dda0:	90                   	nop
    dda1:	c9                   	leave
    dda2:	c3                   	ret
    dda3:	90                   	nop

000000000000dda4 <_ZNSt22_Optional_payload_baseI23VkQueueFamilyPropertiesE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
    dda4:	55                   	push   %rbp
    dda5:	48 89 e5             	mov    %rsp,%rbp
    dda8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ddac:	90                   	nop
    ddad:	5d                   	pop    %rbp
    ddae:	c3                   	ret

000000000000ddaf <_ZSt8__fill_aIP18VkSurfaceFormatKHRS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    ddaf:	55                   	push   %rbp
    ddb0:	48 89 e5             	mov    %rsp,%rbp
    ddb3:	48 83 ec 20          	sub    $0x20,%rsp
    ddb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ddbb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ddbf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    ddc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ddc7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ddcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ddcf:	48 89 ce             	mov    %rcx,%rsi
    ddd2:	48 89 c7             	mov    %rax,%rdi
    ddd5:	e8 08 02 00 00       	call   dfe2 <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    ddda:	90                   	nop
    dddb:	c9                   	leave
    dddc:	c3                   	ret

000000000000dddd <_ZSt8__fill_aIP16VkPresentModeKHRS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    dddd:	55                   	push   %rbp
    ddde:	48 89 e5             	mov    %rsp,%rbp
    dde1:	48 83 ec 20          	sub    $0x20,%rsp
    dde5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dde9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dded:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    ddf1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ddf5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    ddf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ddfd:	48 89 ce             	mov    %rcx,%rsi
    de00:	48 89 c7             	mov    %rax,%rdi
    de03:	e8 0d 02 00 00       	call   e015 <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
    de08:	90                   	nop
    de09:	c9                   	leave
    de0a:	c3                   	ret

000000000000de0b <_ZSt8__fill_aIPP9VkImage_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    de0b:	55                   	push   %rbp
    de0c:	48 89 e5             	mov    %rsp,%rbp
    de0f:	48 83 ec 20          	sub    $0x20,%rsp
    de13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    de17:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    de1b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
    de1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    de23:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    de27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    de2b:	48 89 ce             	mov    %rcx,%rsi
    de2e:	48 89 c7             	mov    %rax,%rdi
    de31:	e8 10 02 00 00       	call   e046 <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
    de36:	90                   	nop
    de37:	c9                   	leave
    de38:	c3                   	ret

000000000000de39 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    de39:	55                   	push   %rbp
    de3a:	48 89 e5             	mov    %rsp,%rbp
    de3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    de41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    de45:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    de49:	eb 58                	jmp    dea3 <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x6a>
	*__first = __value;
    de4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    de4f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    de53:	b9 08 02 00 00       	mov    $0x208,%ecx
    de58:	48 8b 32             	mov    (%rdx),%rsi
    de5b:	48 89 30             	mov    %rsi,(%rax)
    de5e:	89 ce                	mov    %ecx,%esi
    de60:	48 01 c6             	add    %rax,%rsi
    de63:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
    de67:	89 ce                	mov    %ecx,%esi
    de69:	48 01 d6             	add    %rdx,%rsi
    de6c:	48 83 c6 08          	add    $0x8,%rsi
    de70:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
    de74:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
    de78:	48 8d 78 08          	lea    0x8(%rax),%rdi
    de7c:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    de80:	48 29 f8             	sub    %rdi,%rax
    de83:	48 29 c2             	sub    %rax,%rdx
    de86:	01 c1                	add    %eax,%ecx
    de88:	83 e1 f8             	and    $0xfffffff8,%ecx
    de8b:	89 c8                	mov    %ecx,%eax
    de8d:	c1 e8 03             	shr    $0x3,%eax
    de90:	89 c0                	mov    %eax,%eax
    de92:	48 89 d6             	mov    %rdx,%rsi
    de95:	48 89 c1             	mov    %rax,%rcx
    de98:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    de9b:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
    dea2:	00 
    dea3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dea7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    deab:	75 9e                	jne    de4b <_ZSt9__fill_a1IP17VkLayerPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    dead:	90                   	nop
    deae:	90                   	nop
    deaf:	5d                   	pop    %rbp
    deb0:	c3                   	ret

000000000000deb1 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    deb1:	55                   	push   %rbp
    deb2:	48 89 e5             	mov    %rsp,%rbp
    deb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    deb9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    debd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    dec1:	eb 58                	jmp    df1b <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x6a>
	*__first = __value;
    dec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dec7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    decb:	b9 04 01 00 00       	mov    $0x104,%ecx
    ded0:	48 8b 32             	mov    (%rdx),%rsi
    ded3:	48 89 30             	mov    %rsi,(%rax)
    ded6:	89 ce                	mov    %ecx,%esi
    ded8:	48 01 c6             	add    %rax,%rsi
    dedb:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
    dedf:	89 ce                	mov    %ecx,%esi
    dee1:	48 01 d6             	add    %rdx,%rsi
    dee4:	48 83 c6 08          	add    $0x8,%rsi
    dee8:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
    deec:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
    def0:	48 8d 78 08          	lea    0x8(%rax),%rdi
    def4:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    def8:	48 29 f8             	sub    %rdi,%rax
    defb:	48 29 c2             	sub    %rax,%rdx
    defe:	01 c1                	add    %eax,%ecx
    df00:	83 e1 f8             	and    $0xfffffff8,%ecx
    df03:	89 c8                	mov    %ecx,%eax
    df05:	c1 e8 03             	shr    $0x3,%eax
    df08:	89 c0                	mov    %eax,%eax
    df0a:	48 89 d6             	mov    %rdx,%rsi
    df0d:	48 89 c1             	mov    %rax,%rcx
    df10:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
      for (; __first != __last; ++__first)
    df13:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
    df1a:	00 
    df1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    df1f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    df23:	75 9e                	jne    dec3 <_ZSt9__fill_a1IP21VkExtensionPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    df25:	90                   	nop
    df26:	90                   	nop
    df27:	5d                   	pop    %rbp
    df28:	c3                   	ret

000000000000df29 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    df29:	55                   	push   %rbp
    df2a:	48 89 e5             	mov    %rsp,%rbp
    df2d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    df31:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    df35:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    df39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    df3d:	48 8b 00             	mov    (%rax),%rax
    df40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    df44:	eb 10                	jmp    df56 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    df46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    df4e:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    df51:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    df56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df5a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    df5e:	75 e6                	jne    df46 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    df60:	90                   	nop
    df61:	90                   	nop
    df62:	5d                   	pop    %rbp
    df63:	c3                   	ret

000000000000df64 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    df64:	55                   	push   %rbp
    df65:	48 89 e5             	mov    %rsp,%rbp
    df68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    df6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    df70:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    df74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    df78:	48 8b 00             	mov    (%rax),%rax
    df7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    df7f:	eb 10                	jmp    df91 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    df81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df85:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    df89:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    df8c:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    df91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df95:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    df99:	75 e6                	jne    df81 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    df9b:	90                   	nop
    df9c:	90                   	nop
    df9d:	5d                   	pop    %rbp
    df9e:	c3                   	ret

000000000000df9f <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    df9f:	55                   	push   %rbp
    dfa0:	48 89 e5             	mov    %rsp,%rbp
    dfa3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dfa7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dfab:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    dfaf:	eb 23                	jmp    dfd4 <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x35>
	*__first = __value;
    dfb1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    dfb5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    dfb9:	48 8b 06             	mov    (%rsi),%rax
    dfbc:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    dfc0:	48 89 01             	mov    %rax,(%rcx)
    dfc3:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    dfc7:	48 8b 46 10          	mov    0x10(%rsi),%rax
    dfcb:	48 89 41 10          	mov    %rax,0x10(%rcx)
      for (; __first != __last; ++__first)
    dfcf:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
    dfd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dfd8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    dfdc:	75 d3                	jne    dfb1 <_ZSt9__fill_a1IP23VkQueueFamilyPropertiesS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    dfde:	90                   	nop
    dfdf:	90                   	nop
    dfe0:	5d                   	pop    %rbp
    dfe1:	c3                   	ret

000000000000dfe2 <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    dfe2:	55                   	push   %rbp
    dfe3:	48 89 e5             	mov    %rsp,%rbp
    dfe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    dfea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    dfee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    dff2:	eb 13                	jmp    e007 <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x25>
	*__first = __value;
    dff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dff8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    dffc:	48 8b 12             	mov    (%rdx),%rdx
    dfff:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    e002:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
    e007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e00b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    e00f:	75 e3                	jne    dff4 <_ZSt9__fill_a1IP18VkSurfaceFormatKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    e011:	90                   	nop
    e012:	90                   	nop
    e013:	5d                   	pop    %rbp
    e014:	c3                   	ret

000000000000e015 <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    e015:	55                   	push   %rbp
    e016:	48 89 e5             	mov    %rsp,%rbp
    e019:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e01d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e021:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      for (; __first != __last; ++__first)
    e025:	eb 11                	jmp    e038 <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x23>
	*__first = __value;
    e027:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e02b:	8b 10                	mov    (%rax),%edx
    e02d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e031:	89 10                	mov    %edx,(%rax)
      for (; __first != __last; ++__first)
    e033:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
    e038:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e03c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    e040:	75 e5                	jne    e027 <_ZSt9__fill_a1IP16VkPresentModeKHRS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x12>
    }
    e042:	90                   	nop
    e043:	90                   	nop
    e044:	5d                   	pop    %rbp
    e045:	c3                   	ret

000000000000e046 <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
    e046:	55                   	push   %rbp
    e047:	48 89 e5             	mov    %rsp,%rbp
    e04a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e04e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e052:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
    e056:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e05a:	48 8b 00             	mov    (%rax),%rax
    e05d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
    e061:	eb 10                	jmp    e073 <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
    e063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e067:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e06b:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
    e06e:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    e073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e077:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    e07b:	75 e6                	jne    e063 <_ZSt9__fill_a1IPP9VkImage_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
    e07d:	90                   	nop
    e07e:	90                   	nop
    e07f:	5d                   	pop    %rbp
    e080:	c3                   	ret

000000000000e081 <_ZN3vkh27checkValidationLayerSupportEv>:
#include "validation_layers.hpp"

namespace vkh {

bool checkValidationLayerSupport() {
    e081:	55                   	push   %rbp
    e082:	48 89 e5             	mov    %rsp,%rbp
    e085:	53                   	push   %rbx
    e086:	48 83 ec 58          	sub    $0x58,%rsp
  uint32_t layerCount;
  vkEnumerateInstanceLayerProperties(&layerCount, nullptr);
    e08a:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    e08e:	be 00 00 00 00       	mov    $0x0,%esi
    e093:	48 89 c7             	mov    %rax,%rdi
    e096:	e8 35 65 ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    e09b:	8b 45 c8             	mov    -0x38(%rbp),%eax
    e09e:	89 c3                	mov    %eax,%ebx
    e0a0:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    e0a4:	48 89 c7             	mov    %rax,%rdi
    e0a7:	e8 ea b6 ff ff       	call   9796 <_ZNSaI17VkLayerPropertiesEC1Ev>
    e0ac:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
    e0b0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e0b4:	48 89 de             	mov    %rbx,%rsi
    e0b7:	48 89 c7             	mov    %rax,%rdi
    e0ba:	e8 0f b7 ff ff       	call   97ce <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EEC1EmRKS1_>
    e0bf:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    e0c3:	48 89 c7             	mov    %rax,%rdi
    e0c6:	e8 e7 b6 ff ff       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
  vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());
    e0cb:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e0cf:	48 89 c7             	mov    %rax,%rdi
    e0d2:	e8 b1 b7 ff ff       	call   9888 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE4dataEv>
    e0d7:	48 89 c2             	mov    %rax,%rdx
    e0da:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    e0de:	48 89 d6             	mov    %rdx,%rsi
    e0e1:	48 89 c7             	mov    %rax,%rdi
    e0e4:	e8 e7 64 ff ff       	call   45d0 <vkEnumerateInstanceLayerProperties@plt>

  for (const auto &layerProperties : availableLayers) {
    e0e9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e0ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e0f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e0f5:	48 89 c7             	mov    %rax,%rdi
    e0f8:	e8 63 04 00 00       	call   e560 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>
    e0fd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    e101:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e105:	48 89 c7             	mov    %rax,%rdi
    e108:	e8 79 04 00 00       	call   e586 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>
    e10d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    e111:	eb 5b                	jmp    e16e <_ZN3vkh27checkValidationLayerSupportEv+0xed>
    e113:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    e117:	48 89 c7             	mov    %rax,%rdi
    e11a:	e8 ef 04 00 00       	call   e60e <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    e11f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (validationLayerName == layerProperties.layerName) {
    e123:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    e127:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    e12b:	48 89 d6             	mov    %rdx,%rsi
    e12e:	48 89 c7             	mov    %rax,%rdi
    e131:	e8 f8 03 00 00       	call   e52e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
    e136:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e13a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e13e:	48 8b 3d 5b 6b 02 00 	mov    0x26b5b(%rip),%rdi        # 34ca0 <_ZN3vkh19validationLayerNameE>
    e145:	48 8b 35 5c 6b 02 00 	mov    0x26b5c(%rip),%rsi        # 34ca8 <_ZN3vkh19validationLayerNameE+0x8>
    e14c:	48 89 d1             	mov    %rdx,%rcx
    e14f:	48 89 c2             	mov    %rax,%rdx
    e152:	e8 da 04 00 00       	call   e631 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>
    e157:	84 c0                	test   %al,%al
    e159:	74 07                	je     e162 <_ZN3vkh27checkValidationLayerSupportEv+0xe1>
      return true;
    e15b:	bb 01 00 00 00       	mov    $0x1,%ebx
    e160:	eb 28                	jmp    e18a <_ZN3vkh27checkValidationLayerSupportEv+0x109>
  for (const auto &layerProperties : availableLayers) {
    e162:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    e166:	48 89 c7             	mov    %rax,%rdi
    e169:	e8 7c 04 00 00       	call   e5ea <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    e16e:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    e172:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
    e176:	48 89 d6             	mov    %rdx,%rsi
    e179:	48 89 c7             	mov    %rax,%rdi
    e17c:	e8 2e 04 00 00       	call   e5af <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    e181:	84 c0                	test   %al,%al
    e183:	75 8e                	jne    e113 <_ZN3vkh27checkValidationLayerSupportEv+0x92>
    }
  }
  return false;
    e185:	bb 00 00 00 00       	mov    $0x0,%ebx
}
    e18a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e18e:	48 89 c7             	mov    %rax,%rdi
    e191:	e8 ae b6 ff ff       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    e196:	89 d8                	mov    %ebx,%eax
    e198:	eb 34                	jmp    e1ce <_ZN3vkh27checkValidationLayerSupportEv+0x14d>
  std::vector<VkLayerProperties> availableLayers{layerCount};
    e19a:	48 89 c3             	mov    %rax,%rbx
    e19d:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    e1a1:	48 89 c7             	mov    %rax,%rdi
    e1a4:	e8 09 b6 ff ff       	call   97b2 <_ZNSaI17VkLayerPropertiesED1Ev>
    e1a9:	48 89 d8             	mov    %rbx,%rax
    e1ac:	48 89 c7             	mov    %rax,%rdi
    e1af:	e8 bc 67 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    e1b4:	48 89 c3             	mov    %rax,%rbx
    e1b7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e1bb:	48 89 c7             	mov    %rax,%rdi
    e1be:	e8 81 b6 ff ff       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
    e1c3:	48 89 d8             	mov    %rbx,%rax
    e1c6:	48 89 c7             	mov    %rax,%rdi
    e1c9:	e8 a2 67 ff ff       	call   4970 <_Unwind_Resume@plt>
    e1ce:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e1d2:	c9                   	leave
    e1d3:	c3                   	ret

000000000000e1d4 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:

VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData) {
    e1d4:	55                   	push   %rbp
    e1d5:	48 89 e5             	mov    %rsp,%rbp
    e1d8:	48 83 ec 20          	sub    $0x20,%rsp
    e1dc:	89 7d fc             	mov    %edi,-0x4(%rbp)
    e1df:	89 75 f8             	mov    %esi,-0x8(%rbp)
    e1e2:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    e1e6:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
    e1ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
    e1ed:	83 f8 01             	cmp    $0x1,%eax
    e1f0:	7e 3c                	jle    e22e <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x5a>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
    e1f2:	be 0a 00 00 00       	mov    $0xa,%esi
    e1f7:	48 8d 05 22 73 02 00 	lea    0x27322(%rip),%rax        # 35520 <_ZSt4cerr@GLIBCXX_3.4>
    e1fe:	48 89 c7             	mov    %rax,%rdi
    e201:	e8 ea 63 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    e206:	48 89 c2             	mov    %rax,%rdx
    e209:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e20d:	48 8b 40 28          	mov    0x28(%rax),%rax
    e211:	48 89 c6             	mov    %rax,%rsi
    e214:	48 89 d7             	mov    %rdx,%rdi
    e217:	e8 a4 62 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    e21c:	48 8b 15 85 6d 02 00 	mov    0x26d85(%rip),%rdx        # 34fa8 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    e223:	48 89 d6             	mov    %rdx,%rsi
    e226:	48 89 c7             	mov    %rax,%rdi
    e229:	e8 12 63 ff ff       	call   4540 <_ZNSolsEPFRSoS_E@plt>
  }
  return VK_FALSE;
    e22e:	b8 00 00 00 00       	mov    $0x0,%eax
}
    e233:	c9                   	leave
    e234:	c3                   	ret

000000000000e235 <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>:

void populateDebugMessengerCreateInfo(
    VkDebugUtilsMessengerCreateInfoEXT &createInfo) {
    e235:	55                   	push   %rbp
    e236:	48 89 e5             	mov    %rsp,%rbp
    e239:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  createInfo = {};
    e23d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e241:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e245:	0f 11 00             	movups %xmm0,(%rax)
    e248:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    e24c:	0f 11 40 20          	movups %xmm0,0x20(%rax)
  createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    e250:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e254:	c7 00 04 be 9c 3b    	movl   $0x3b9cbe04,(%rax)
  createInfo.messageSeverity =
    e25a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e25e:	c7 40 14 01 11 00 00 	movl   $0x1101,0x14(%rax)
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |
      //  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT |
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
      VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
  createInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
    e265:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e269:	c7 40 18 07 00 00 00 	movl   $0x7,0x18(%rax)
                           VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
                           VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
  createInfo.pfnUserCallback = debugCallback;
    e270:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e274:	48 8d 15 59 ff ff ff 	lea    -0xa7(%rip),%rdx        # e1d4 <_ZN3vkh13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>
    e27b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  createInfo.pUserData = nullptr;
    e27f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e283:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    e28a:	00 
}
    e28b:	90                   	nop
    e28c:	5d                   	pop    %rbp
    e28d:	c3                   	ret

000000000000e28e <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T>:

VkResult createDebugUtilsMessengerEXT(
    VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
    const VkAllocationCallbacks *pAllocator,
    VkDebugUtilsMessengerEXT *pDebugMessenger) {
    e28e:	55                   	push   %rbp
    e28f:	48 89 e5             	mov    %rsp,%rbp
    e292:	48 83 ec 30          	sub    $0x30,%rsp
    e296:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e29a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e29e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    e2a2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    e2a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e2aa:	48 8d 15 5f 47 01 00 	lea    0x1475f(%rip),%rdx        # 22a10 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28>
    e2b1:	48 89 d6             	mov    %rdx,%rsi
    e2b4:	48 89 c7             	mov    %rax,%rdi
    e2b7:	e8 c4 61 ff ff       	call   4480 <vkGetInstanceProcAddr@plt>
    e2bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      instance, "vkCreateDebugUtilsMessengerEXT");
  if (func == nullptr) {
    e2c0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e2c5:	75 07                	jne    e2ce <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T+0x40>
    return VK_ERROR_EXTENSION_NOT_PRESENT;
    e2c7:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
    e2cc:	eb 1b                	jmp    e2e9 <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T+0x5b>
  }
  return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    e2ce:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
    e2d2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    e2d6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e2da:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    e2de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e2e2:	48 89 c7             	mov    %rax,%rdi
    e2e5:	41 ff d0             	call   *%r8
    e2e8:	90                   	nop
}
    e2e9:	c9                   	leave
    e2ea:	c3                   	ret

000000000000e2eb <_ZN3vkh20createDebugMessengerEP12VkInstance_T>:

VkDebugUtilsMessengerEXT createDebugMessenger(VkInstance instance) {
    e2eb:	55                   	push   %rbp
    e2ec:	48 89 e5             	mov    %rsp,%rbp
    e2ef:	41 54                	push   %r12
    e2f1:	53                   	push   %rbx
    e2f2:	48 83 ec 50          	sub    $0x50,%rsp
    e2f6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  VkDebugUtilsMessengerCreateInfoEXT createInfo;
  populateDebugMessengerCreateInfo(createInfo);
    e2fa:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    e2fe:	48 89 c7             	mov    %rax,%rdi
    e301:	e8 2f ff ff ff       	call   e235 <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>
  VkDebugUtilsMessengerEXT debugMessenger{};
    e306:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    e30d:	00 
  if (createDebugUtilsMessengerEXT(instance, &createInfo, nullptr,
    e30e:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    e312:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    e316:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e31a:	48 89 d1             	mov    %rdx,%rcx
    e31d:	ba 00 00 00 00       	mov    $0x0,%edx
    e322:	48 89 c7             	mov    %rax,%rdi
    e325:	e8 64 ff ff ff       	call   e28e <_ZN3vkh28createDebugUtilsMessengerEXTEP12VkInstance_TPK34VkDebugUtilsMessengerCreateInfoEXTPK21VkAllocationCallbacksPP26VkDebugUtilsMessengerEXT_T>
                                   &debugMessenger) != VK_SUCCESS) {
    e32a:	85 c0                	test   %eax,%eax
    e32c:	0f 95 c0             	setne  %al
  if (createDebugUtilsMessengerEXT(instance, &createInfo, nullptr,
    e32f:	84 c0                	test   %al,%al
    e331:	74 3b                	je     e36e <_ZN3vkh20createDebugMessengerEP12VkInstance_T+0x83>
    throw std::runtime_error("Failed to set up debug message.");
    e333:	bf 10 00 00 00       	mov    $0x10,%edi
    e338:	e8 93 5e ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    e33d:	48 89 c3             	mov    %rax,%rbx
    e340:	48 8d 05 e9 46 01 00 	lea    0x146e9(%rip),%rax        # 22a30 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x48>
    e347:	48 89 c6             	mov    %rax,%rsi
    e34a:	48 89 df             	mov    %rbx,%rdi
    e34d:	e8 ee 5d ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    e352:	48 8b 05 5f 6c 02 00 	mov    0x26c5f(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    e359:	48 89 c2             	mov    %rax,%rdx
    e35c:	48 8d 05 dd 69 02 00 	lea    0x269dd(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    e363:	48 89 c6             	mov    %rax,%rsi
    e366:	48 89 df             	mov    %rbx,%rdi
    e369:	e8 92 65 ff ff       	call   4900 <__cxa_throw@plt>
  }
  return debugMessenger;
    e36e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    e372:	eb 16                	jmp    e38a <_ZN3vkh20createDebugMessengerEP12VkInstance_T+0x9f>
    throw std::runtime_error("Failed to set up debug message.");
    e374:	49 89 c4             	mov    %rax,%r12
    e377:	48 89 df             	mov    %rbx,%rdi
    e37a:	e8 81 5f ff ff       	call   4300 <__cxa_free_exception@plt>
    e37f:	4c 89 e0             	mov    %r12,%rax
    e382:	48 89 c7             	mov    %rax,%rdi
    e385:	e8 e6 65 ff ff       	call   4970 <_Unwind_Resume@plt>
}
    e38a:	48 83 c4 50          	add    $0x50,%rsp
    e38e:	5b                   	pop    %rbx
    e38f:	41 5c                	pop    %r12
    e391:	5d                   	pop    %rbp
    e392:	c3                   	ret

000000000000e393 <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks>:

void destroyDebugUtilsMessengerEXT(VkInstance instance,
                                   VkDebugUtilsMessengerEXT debugMessenger,
                                   const VkAllocationCallbacks *pAllocator) {
    e393:	55                   	push   %rbp
    e394:	48 89 e5             	mov    %rsp,%rbp
    e397:	48 83 ec 30          	sub    $0x30,%rsp
    e39b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e39f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e3a3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(
    e3a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e3ab:	48 8d 15 9e 46 01 00 	lea    0x1469e(%rip),%rdx        # 22a50 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x68>
    e3b2:	48 89 d6             	mov    %rdx,%rsi
    e3b5:	48 89 c7             	mov    %rax,%rdi
    e3b8:	e8 c3 60 ff ff       	call   4480 <vkGetInstanceProcAddr@plt>
    e3bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      instance, "vkDestroyDebugUtilsMessengerEXT");
  if (func != nullptr) {
    e3c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e3c6:	74 19                	je     e3e1 <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks+0x4e>
    func(instance, debugMessenger, pAllocator);
    e3c8:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
    e3cc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e3d0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    e3d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e3d8:	48 89 ce             	mov    %rcx,%rsi
    e3db:	48 89 c7             	mov    %rax,%rdi
    e3de:	41 ff d0             	call   *%r8
  }
}
    e3e1:	90                   	nop
    e3e2:	c9                   	leave
    e3e3:	c3                   	ret

000000000000e3e4 <_Z41__static_initialization_and_destruction_0ii>:

    e3e4:	55                   	push   %rbp
    e3e5:	48 89 e5             	mov    %rsp,%rbp
    e3e8:	48 83 ec 10          	sub    $0x10,%rsp
    e3ec:	89 7d fc             	mov    %edi,-0x4(%rbp)
    e3ef:	89 75 f8             	mov    %esi,-0x8(%rbp)
    e3f2:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    e3f6:	75 3b                	jne    e433 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    e3f8:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    e3ff:	75 32                	jne    e433 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    e401:	48 8d 05 80 72 02 00 	lea    0x27280(%rip),%rax        # 35688 <_ZStL8__ioinit>
    e408:	48 89 c7             	mov    %rax,%rdi
    e40b:	e8 f0 63 ff ff       	call   4800 <_ZNSt8ios_base4InitC1Ev@plt>
    e410:	48 8d 05 f1 70 02 00 	lea    0x270f1(%rip),%rax        # 35508 <__dso_handle>
    e417:	48 89 c2             	mov    %rax,%rdx
    e41a:	48 8d 05 67 72 02 00 	lea    0x27267(%rip),%rax        # 35688 <_ZStL8__ioinit>
    e421:	48 89 c6             	mov    %rax,%rsi
    e424:	48 8b 05 ad 6b 02 00 	mov    0x26bad(%rip),%rax        # 34fd8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    e42b:	48 89 c7             	mov    %rax,%rdi
    e42e:	e8 ed 5f ff ff       	call   4420 <__cxa_atexit@plt>
    e433:	90                   	nop
    e434:	c9                   	leave
    e435:	c3                   	ret

000000000000e436 <_GLOBAL__sub_I__ZN3vkh27checkValidationLayerSupportEv>:
    e436:	55                   	push   %rbp
    e437:	48 89 e5             	mov    %rsp,%rbp
    e43a:	be ff ff 00 00       	mov    $0xffff,%esi
    e43f:	bf 01 00 00 00       	mov    $0x1,%edi
    e444:	e8 9b ff ff ff       	call   e3e4 <_Z41__static_initialization_and_destruction_0ii>
    e449:	5d                   	pop    %rbp
    e44a:	c3                   	ret

000000000000e44b <_ZNSt11char_traitsIcE2ltERKcS2_>:
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    e44b:	55                   	push   %rbp
    e44c:	48 89 e5             	mov    %rsp,%rbp
    e44f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e453:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return (static_cast<unsigned char>(__c1)
    e457:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e45b:	0f b6 00             	movzbl (%rax),%eax
    e45e:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
    e460:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e464:	0f b6 00             	movzbl (%rax),%eax
    e467:	38 c2                	cmp    %al,%dl
    e469:	0f 92 c0             	setb   %al
      }
    e46c:	5d                   	pop    %rbp
    e46d:	c3                   	ret

000000000000e46e <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
    e46e:	55                   	push   %rbp
    e46f:	48 89 e5             	mov    %rsp,%rbp
    e472:	48 83 ec 30          	sub    $0x30,%rsp
    e476:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e47a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e47e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__n == 0)
    e482:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e487:	75 0a                	jne    e493 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
    e489:	b8 00 00 00 00       	mov    $0x0,%eax
    e48e:	e9 99 00 00 00       	jmp    e52c <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	if (std::__is_constant_evaluated())
    e493:	e8 4e 6b ff ff       	call   4fe6 <_ZSt23__is_constant_evaluatedv>
    e498:	84 c0                	test   %al,%al
    e49a:	74 78                	je     e514 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	    for (size_t __i = 0; __i < __n; ++__i)
    e49c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    e4a3:	00 
    e4a4:	eb 5d                	jmp    e503 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
    e4a6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    e4aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4ae:	48 01 c2             	add    %rax,%rdx
    e4b1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    e4b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4b9:	48 01 c8             	add    %rcx,%rax
    e4bc:	48 89 d6             	mov    %rdx,%rsi
    e4bf:	48 89 c7             	mov    %rax,%rdi
    e4c2:	e8 84 ff ff ff       	call   e44b <_ZNSt11char_traitsIcE2ltERKcS2_>
    e4c7:	84 c0                	test   %al,%al
    e4c9:	74 07                	je     e4d2 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
    e4cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    e4d0:	eb 5a                	jmp    e52c <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
    e4d2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e4d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4da:	48 01 c2             	add    %rax,%rdx
    e4dd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    e4e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4e5:	48 01 c8             	add    %rcx,%rax
    e4e8:	48 89 d6             	mov    %rdx,%rsi
    e4eb:	48 89 c7             	mov    %rax,%rdi
    e4ee:	e8 58 ff ff ff       	call   e44b <_ZNSt11char_traitsIcE2ltERKcS2_>
    e4f3:	84 c0                	test   %al,%al
    e4f5:	74 07                	je     e4fe <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
    e4f7:	b8 01 00 00 00       	mov    $0x1,%eax
    e4fc:	eb 2e                	jmp    e52c <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
    e4fe:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    e503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e507:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    e50b:	72 99                	jb     e4a6 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
    e50d:	b8 00 00 00 00       	mov    $0x0,%eax
    e512:	eb 18                	jmp    e52c <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	return __builtin_memcmp(__s1, __s2, __n);
    e514:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e518:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    e51c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e520:	48 89 ce             	mov    %rcx,%rsi
    e523:	48 89 c7             	mov    %rax,%rdi
    e526:	e8 85 5c ff ff       	call   41b0 <memcmp@plt>
    e52b:	90                   	nop
      }
    e52c:	c9                   	leave
    e52d:	c3                   	ret

000000000000e52e <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
    e52e:	55                   	push   %rbp
    e52f:	48 89 e5             	mov    %rsp,%rbp
    e532:	48 83 ec 10          	sub    $0x10,%rsp
    e536:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e53a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
    e53e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e542:	48 89 c7             	mov    %rax,%rdi
    e545:	e8 a7 6a ff ff       	call   4ff1 <_ZNSt11char_traitsIcE6lengthEPKc>
    e54a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e54e:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
    e551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e555:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e559:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
    e55d:	90                   	nop
    e55e:	c9                   	leave
    e55f:	c3                   	ret

000000000000e560 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
    e560:	55                   	push   %rbp
    e561:	48 89 e5             	mov    %rsp,%rbp
    e564:	48 83 ec 20          	sub    $0x20,%rsp
    e568:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
    e56c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e570:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e574:	48 89 d6             	mov    %rdx,%rsi
    e577:	48 89 c7             	mov    %rax,%rdi
    e57a:	e8 27 01 00 00       	call   e6a6 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    e57f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e583:	c9                   	leave
    e584:	c3                   	ret
    e585:	90                   	nop

000000000000e586 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
    e586:	55                   	push   %rbp
    e587:	48 89 e5             	mov    %rsp,%rbp
    e58a:	48 83 ec 20          	sub    $0x20,%rsp
    e58e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
    e592:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e596:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e59a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    e59e:	48 89 d6             	mov    %rdx,%rsi
    e5a1:	48 89 c7             	mov    %rax,%rdi
    e5a4:	e8 fd 00 00 00       	call   e6a6 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    e5a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5ad:	c9                   	leave
    e5ae:	c3                   	ret

000000000000e5af <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    e5af:	55                   	push   %rbp
    e5b0:	48 89 e5             	mov    %rsp,%rbp
    e5b3:	53                   	push   %rbx
    e5b4:	48 83 ec 18          	sub    $0x18,%rsp
    e5b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e5bc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
    e5c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e5c4:	48 89 c7             	mov    %rax,%rdi
    e5c7:	e8 f8 00 00 00       	call   e6c4 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    e5cc:	48 8b 18             	mov    (%rax),%rbx
    e5cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e5d3:	48 89 c7             	mov    %rax,%rdi
    e5d6:	e8 e9 00 00 00       	call   e6c4 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
    e5db:	48 8b 00             	mov    (%rax),%rax
    e5de:	48 39 c3             	cmp    %rax,%rbx
    e5e1:	0f 95 c0             	setne  %al
    e5e4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e5e8:	c9                   	leave
    e5e9:	c3                   	ret

000000000000e5ea <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    e5ea:	55                   	push   %rbp
    e5eb:	48 89 e5             	mov    %rsp,%rbp
    e5ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    e5f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5f6:	48 8b 00             	mov    (%rax),%rax
    e5f9:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
    e600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e604:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    e607:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    e60b:	5d                   	pop    %rbp
    e60c:	c3                   	ret
    e60d:	90                   	nop

000000000000e60e <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    e60e:	55                   	push   %rbp
    e60f:	48 89 e5             	mov    %rsp,%rbp
    e612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    e616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e61a:	48 8b 00             	mov    (%rax),%rax
    e61d:	5d                   	pop    %rbp
    e61e:	c3                   	ret
    e61f:	90                   	nop

000000000000e620 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      { return const_reverse_iterator(this->begin()); }

      // [string.view.capacity], capacity

      constexpr size_type
      size() const noexcept
    e620:	55                   	push   %rbp
    e621:	48 89 e5             	mov    %rsp,%rbp
    e624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
    e628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e62c:	48 8b 00             	mov    (%rax),%rax
    e62f:	5d                   	pop    %rbp
    e630:	c3                   	ret

000000000000e631 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>:
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
    e631:	55                   	push   %rbp
    e632:	48 89 e5             	mov    %rsp,%rbp
    e635:	53                   	push   %rbx
    e636:	48 83 ec 28          	sub    $0x28,%rsp
    e63a:	48 89 f0             	mov    %rsi,%rax
    e63d:	49 89 f8             	mov    %rdi,%r8
    e640:	4c 89 c6             	mov    %r8,%rsi
    e643:	4c 89 cf             	mov    %r9,%rdi
    e646:	48 89 c7             	mov    %rax,%rdi
    e649:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e64d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e651:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
    e655:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
    e659:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    e65d:	48 89 c7             	mov    %rax,%rdi
    e660:	e8 bb ff ff ff       	call   e620 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
    e665:	48 89 c3             	mov    %rax,%rbx
    e668:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    e66c:	48 89 c7             	mov    %rax,%rdi
    e66f:	e8 ac ff ff ff       	call   e620 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
    e674:	48 39 c3             	cmp    %rax,%rbx
    e677:	75 22                	jne    e69b <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
    e679:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    e67d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e681:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    e685:	48 89 ce             	mov    %rcx,%rsi
    e688:	48 89 c7             	mov    %rax,%rdi
    e68b:	e8 42 00 00 00       	call   e6d2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
    e690:	85 c0                	test   %eax,%eax
    e692:	75 07                	jne    e69b <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
    e694:	b8 01 00 00 00       	mov    $0x1,%eax
    e699:	eb 05                	jmp    e6a0 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6f>
    e69b:	b8 00 00 00 00       	mov    $0x0,%eax
    e6a0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e6a4:	c9                   	leave
    e6a5:	c3                   	ret

000000000000e6a6 <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    e6a6:	55                   	push   %rbp
    e6a7:	48 89 e5             	mov    %rsp,%rbp
    e6aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e6ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    e6b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e6b6:	48 8b 10             	mov    (%rax),%rdx
    e6b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e6bd:	48 89 10             	mov    %rdx,(%rax)
    e6c0:	90                   	nop
    e6c1:	5d                   	pop    %rbp
    e6c2:	c3                   	ret
    e6c3:	90                   	nop

000000000000e6c4 <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    e6c4:	55                   	push   %rbp
    e6c5:	48 89 e5             	mov    %rsp,%rbp
    e6c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    e6cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e6d0:	5d                   	pop    %rbp
    e6d1:	c3                   	ret

000000000000e6d2 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
    e6d2:	55                   	push   %rbp
    e6d3:	48 89 e5             	mov    %rsp,%rbp
    e6d6:	48 83 ec 30          	sub    $0x30,%rsp
    e6da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e6de:	48 89 d1             	mov    %rdx,%rcx
    e6e1:	48 89 f0             	mov    %rsi,%rax
    e6e4:	48 89 fa             	mov    %rdi,%rdx
    e6e7:	48 89 ca             	mov    %rcx,%rdx
    e6ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    e6ee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
    e6f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6f6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    e6fa:	48 89 d6             	mov    %rdx,%rsi
    e6fd:	48 89 c7             	mov    %rax,%rdi
    e700:	e8 92 76 ff ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
    e705:	48 8b 00             	mov    (%rax),%rax
    e708:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
    e70c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    e710:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e714:	48 8b 40 08          	mov    0x8(%rax),%rax
    e718:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e71c:	48 89 ce             	mov    %rcx,%rsi
    e71f:	48 89 c7             	mov    %rax,%rdi
    e722:	e8 47 fd ff ff       	call   e46e <_ZNSt11char_traitsIcE7compareEPKcS2_m>
    e727:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (__ret == 0)
    e72a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    e72e:	75 19                	jne    e749 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x77>
	  __ret = _S_compare(this->_M_len, __str._M_len);
    e730:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    e734:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e738:	48 8b 00             	mov    (%rax),%rax
    e73b:	48 89 d6             	mov    %rdx,%rsi
    e73e:	48 89 c7             	mov    %rax,%rdi
    e741:	e8 08 00 00 00       	call   e74e <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>
    e746:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return __ret;
    e749:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
    e74c:	c9                   	leave
    e74d:	c3                   	ret

000000000000e74e <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) noexcept
    e74e:	55                   	push   %rbp
    e74f:	48 89 e5             	mov    %rsp,%rbp
    e752:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e756:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __diff = __n1 - __n2;
    e75a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e75e:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    e762:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__diff > __limits::__max)
    e766:	b8 00 00 00 80       	mov    $0x80000000,%eax
    e76b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    e76f:	7c 07                	jl     e778 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x2a>
	  return __limits::__max;
    e771:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    e776:	eb 1b                	jmp    e793 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	if (__diff < __limits::__min)
    e778:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
    e77f:	ff ff ff 
    e782:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    e786:	7f 07                	jg     e78f <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x41>
	  return __limits::__min;
    e788:	b8 00 00 00 80       	mov    $0x80000000,%eax
    e78d:	eb 04                	jmp    e793 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	return static_cast<int>(__diff);
    e78f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    e793:	5d                   	pop    %rbp
    e794:	c3                   	ret
    e795:	90                   	nop

000000000000e796 <_ZN9VulkanApp12createWindowEv>:
#include "vulkan_app.hpp"

void VulkanApp::createWindow() {
    e796:	55                   	push   %rbp
    e797:	48 89 e5             	mov    %rsp,%rbp
    e79a:	48 83 ec 10          	sub    $0x10,%rsp
    e79e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  glfwInit();
    e7a2:	e8 39 5e ff ff       	call   45e0 <glfwInit@plt>
  window = vkh::createWindow(800, 600);
    e7a7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    e7ad:	b9 00 00 00 00       	mov    $0x0,%ecx
    e7b2:	48 8d 05 3b 49 01 00 	lea    0x1493b(%rip),%rax        # 230f4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1c>
    e7b9:	48 89 c2             	mov    %rax,%rdx
    e7bc:	be 58 02 00 00       	mov    $0x258,%esi
    e7c1:	bf 20 03 00 00       	mov    $0x320,%edi
    e7c6:	e8 82 87 ff ff       	call   6f4d <_ZN3vkh12createWindowEiiPKcP11GLFWmonitorP10GLFWwindow>
    e7cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e7cf:	48 89 02             	mov    %rax,(%rdx)
  glfwSetWindowUserPointer(window, this);
    e7d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7d6:	48 8b 00             	mov    (%rax),%rax
    e7d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e7dd:	48 89 d6             	mov    %rdx,%rsi
    e7e0:	48 89 c7             	mov    %rax,%rdi
    e7e3:	e8 08 5a ff ff       	call   41f0 <glfwSetWindowUserPointer@plt>
  glfwSetFramebufferSizeCallback(window, framebufferResizeCallback);
    e7e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7ec:	48 8b 00             	mov    (%rax),%rax
    e7ef:	48 8d 15 26 24 00 00 	lea    0x2426(%rip),%rdx        # 10c1c <_ZN9VulkanApp25framebufferResizeCallbackEP10GLFWwindowii>
    e7f6:	48 89 d6             	mov    %rdx,%rsi
    e7f9:	48 89 c7             	mov    %rax,%rdi
    e7fc:	e8 ef 5f ff ff       	call   47f0 <glfwSetFramebufferSizeCallback@plt>
}
    e801:	90                   	nop
    e802:	c9                   	leave
    e803:	c3                   	ret

000000000000e804 <_ZN9VulkanApp14createInstanceEv>:

void VulkanApp::createInstance() {
    e804:	55                   	push   %rbp
    e805:	48 89 e5             	mov    %rsp,%rbp
    e808:	53                   	push   %rbx
    e809:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    e810:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  VkApplicationInfo appInfo{};
    e817:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e81b:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
    e81f:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
    e823:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    e827:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
  appInfo.pApplicationName = "Vulkan Application";
    e82e:	48 8d 05 bf 48 01 00 	lea    0x148bf(%rip),%rax        # 230f4 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1c>
    e835:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
    e839:	c7 45 c8 00 00 40 00 	movl   $0x400000,-0x38(%rbp)
  appInfo.pEngineName = "No Engine";
    e840:	48 8d 05 c0 48 01 00 	lea    0x148c0(%rip),%rax        # 23107 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2f>
    e847:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
    e84b:	c7 45 d8 00 00 40 00 	movl   $0x400000,-0x28(%rbp)
  appInfo.apiVersion = VK_API_VERSION_1_3;
    e852:	c7 45 dc 00 30 40 00 	movl   $0x403000,-0x24(%rbp)

  auto requiredExtensions = vkh::getRequiredInstanceExtensionNameList();
    e859:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    e85d:	48 89 c7             	mov    %rax,%rdi
    e860:	e8 4f a1 ff ff       	call   89b4 <_ZN3vkh36getRequiredInstanceExtensionNameListEv>
  for (auto &&extension : requiredExtensions) {
    e865:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    e869:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e86d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e871:	48 89 c7             	mov    %rax,%rdi
    e874:	e8 e3 5c 00 00       	call   1455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    e879:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    e880:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e884:	48 89 c7             	mov    %rax,%rdi
    e887:	e8 f6 5c 00 00       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    e88c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    e893:	eb 3c                	jmp    e8d1 <_ZN9VulkanApp14createInstanceEv+0xcd>
    e895:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    e89c:	48 89 c7             	mov    %rax,%rdi
    e89f:	e8 62 5d 00 00       	call   14606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    e8a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    instanceExtensions.emplace_back(extension);
    e8a8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    e8af:	48 8d 50 10          	lea    0x10(%rax),%rdx
    e8b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e8b7:	48 89 c6             	mov    %rax,%rsi
    e8ba:	48 89 d7             	mov    %rdx,%rdi
    e8bd:	e8 56 5d 00 00       	call   14618 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_>
  for (auto &&extension : requiredExtensions) {
    e8c2:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    e8c9:	48 89 c7             	mov    %rax,%rdi
    e8cc:	e8 15 5d 00 00       	call   145e6 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    e8d1:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
    e8d8:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
    e8df:	48 89 d6             	mov    %rdx,%rsi
    e8e2:	48 89 c7             	mov    %rax,%rdi
    e8e5:	e8 c1 5c 00 00       	call   145ab <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    e8ea:	84 c0                	test   %al,%al
    e8ec:	75 a7                	jne    e895 <_ZN9VulkanApp14createInstanceEv+0x91>
  }

  auto debugCreateInfo = VkDebugUtilsMessengerCreateInfoEXT{};
    e8ee:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e8f2:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
    e8f9:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    e900:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  vkh::populateDebugMessengerCreateInfo(debugCreateInfo);
    e904:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    e90b:	48 89 c7             	mov    %rax,%rdi
    e90e:	e8 22 f9 ff ff       	call   e235 <_ZN3vkh32populateDebugMessengerCreateInfoER34VkDebugUtilsMessengerCreateInfoEXT>

  VkInstanceCreateInfo instanceInfo;
  instanceInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    e913:	c7 85 20 ff ff ff 01 	movl   $0x1,-0xe0(%rbp)
    e91a:	00 00 00 
  instanceInfo.pNext = (VkDebugUtilsMessengerCreateInfoEXT *)&debugCreateInfo;
    e91d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    e924:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  instanceInfo.pApplicationInfo = &appInfo;
    e92b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    e92f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  instanceInfo.enabledLayerCount = static_cast<uint32_t>(instanceLayers.size());
    e936:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    e93d:	48 83 c0 28          	add    $0x28,%rax
    e941:	48 89 c7             	mov    %rax,%rdi
    e944:	e8 73 5d 00 00       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    e949:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
  instanceInfo.ppEnabledLayerNames = instanceLayers.data();
    e94f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    e956:	48 83 c0 28          	add    $0x28,%rax
    e95a:	48 89 c7             	mov    %rax,%rdi
    e95d:	e8 7e 5d 00 00       	call   146e0 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    e962:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  instanceInfo.enabledExtensionCount =
      static_cast<uint32_t>(instanceExtensions.size());
    e969:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    e970:	48 83 c0 10          	add    $0x10,%rax
    e974:	48 89 c7             	mov    %rax,%rdi
    e977:	e8 40 5d 00 00       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  instanceInfo.enabledExtensionCount =
    e97c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
  instanceInfo.ppEnabledExtensionNames = instanceExtensions.data();
    e982:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    e989:	48 83 c0 10          	add    $0x10,%rax
    e98d:	48 89 c7             	mov    %rax,%rdi
    e990:	e8 6f 5d 00 00       	call   14704 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
    e995:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)

  instance = vkh::createInstance(&instanceInfo);
    e99c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    e9a3:	be 00 00 00 00       	mov    $0x0,%esi
    e9a8:	48 89 c7             	mov    %rax,%rdi
    e9ab:	e8 e4 85 ff ff       	call   6f94 <_ZN3vkh14createInstanceEPK20VkInstanceCreateInfoPK21VkAllocationCallbacks>
    e9b0:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    e9b7:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
    e9bb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    e9bf:	48 89 c7             	mov    %rax,%rdi
    e9c2:	e8 51 5b 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    e9c7:	eb 1a                	jmp    e9e3 <_ZN9VulkanApp14createInstanceEv+0x1df>
    e9c9:	48 89 c3             	mov    %rax,%rbx
    e9cc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    e9d0:	48 89 c7             	mov    %rax,%rdi
    e9d3:	e8 40 5b 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    e9d8:	48 89 d8             	mov    %rbx,%rax
    e9db:	48 89 c7             	mov    %rax,%rdi
    e9de:	e8 8d 5f ff ff       	call   4970 <_Unwind_Resume@plt>
    e9e3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    e9e7:	c9                   	leave
    e9e8:	c3                   	ret
    e9e9:	90                   	nop

000000000000e9ea <_ZN9VulkanApp20createDebugMessengerEv>:

void VulkanApp::createDebugMessenger() {
    e9ea:	55                   	push   %rbp
    e9eb:	48 89 e5             	mov    %rsp,%rbp
    e9ee:	41 54                	push   %r12
    e9f0:	53                   	push   %rbx
    e9f1:	48 83 ec 10          	sub    $0x10,%rsp
    e9f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  if (vkh::checkValidationLayerSupport() == false) {
    e9f9:	e8 83 f6 ff ff       	call   e081 <_ZN3vkh27checkValidationLayerSupportEv>
    e9fe:	0f b6 c0             	movzbl %al,%eax
    ea01:	85 c0                	test   %eax,%eax
    ea03:	0f 94 c0             	sete   %al
    ea06:	84 c0                	test   %al,%al
    ea08:	74 3b                	je     ea45 <_ZN9VulkanApp20createDebugMessengerEv+0x5b>
    throw std::runtime_error("Validation layers are not supported.");
    ea0a:	bf 10 00 00 00       	mov    $0x10,%edi
    ea0f:	e8 bc 57 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    ea14:	48 89 c3             	mov    %rax,%rbx
    ea17:	48 8d 05 fa 46 01 00 	lea    0x146fa(%rip),%rax        # 23118 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x40>
    ea1e:	48 89 c6             	mov    %rax,%rsi
    ea21:	48 89 df             	mov    %rbx,%rdi
    ea24:	e8 17 57 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    ea29:	48 8b 05 88 65 02 00 	mov    0x26588(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ea30:	48 89 c2             	mov    %rax,%rdx
    ea33:	48 8d 05 06 63 02 00 	lea    0x26306(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ea3a:	48 89 c6             	mov    %rax,%rsi
    ea3d:	48 89 df             	mov    %rbx,%rdi
    ea40:	e8 bb 5e ff ff       	call   4900 <__cxa_throw@plt>
  }
  debugMessenger = vkh::createDebugMessenger(instance);
    ea45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ea49:	48 8b 40 08          	mov    0x8(%rax),%rax
    ea4d:	48 89 c7             	mov    %rax,%rdi
    ea50:	e8 96 f8 ff ff       	call   e2eb <_ZN3vkh20createDebugMessengerEP12VkInstance_T>
    ea55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ea59:	48 89 42 40          	mov    %rax,0x40(%rdx)
}
    ea5d:	eb 16                	jmp    ea75 <_ZN9VulkanApp20createDebugMessengerEv+0x8b>
    throw std::runtime_error("Validation layers are not supported.");
    ea5f:	49 89 c4             	mov    %rax,%r12
    ea62:	48 89 df             	mov    %rbx,%rdi
    ea65:	e8 96 58 ff ff       	call   4300 <__cxa_free_exception@plt>
    ea6a:	4c 89 e0             	mov    %r12,%rax
    ea6d:	48 89 c7             	mov    %rax,%rdi
    ea70:	e8 fb 5e ff ff       	call   4970 <_Unwind_Resume@plt>
}
    ea75:	48 83 c4 10          	add    $0x10,%rsp
    ea79:	5b                   	pop    %rbx
    ea7a:	41 5c                	pop    %r12
    ea7c:	5d                   	pop    %rbp
    ea7d:	c3                   	ret

000000000000ea7e <_ZN9VulkanApp13createSurfaceEv>:

void VulkanApp::createSurface() {
    ea7e:	55                   	push   %rbp
    ea7f:	48 89 e5             	mov    %rsp,%rbp
    ea82:	48 83 ec 10          	sub    $0x10,%rsp
    ea86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  surface = vkh::createSurface(instance, window);
    ea8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea8e:	48 8b 08             	mov    (%rax),%rcx
    ea91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ea95:	48 8b 40 08          	mov    0x8(%rax),%rax
    ea99:	ba 00 00 00 00       	mov    $0x0,%edx
    ea9e:	48 89 ce             	mov    %rcx,%rsi
    eaa1:	48 89 c7             	mov    %rax,%rdi
    eaa4:	e8 16 86 ff ff       	call   70bf <_ZN3vkh13createSurfaceEP12VkInstance_TP10GLFWwindowPK21VkAllocationCallbacks>
    eaa9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    eaad:	48 89 42 48          	mov    %rax,0x48(%rdx)
}
    eab1:	90                   	nop
    eab2:	c9                   	leave
    eab3:	c3                   	ret

000000000000eab4 <_ZN9VulkanApp21checkDevicePropertiesEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceProperties(VkPhysicalDevice physDev) {
    eab4:	55                   	push   %rbp
    eab5:	48 89 e5             	mov    %rsp,%rbp
    eab8:	48 81 ec 50 03 00 00 	sub    $0x350,%rsp
    eabf:	48 89 bd b8 fc ff ff 	mov    %rdi,-0x348(%rbp)
    eac6:	48 89 b5 b0 fc ff ff 	mov    %rsi,-0x350(%rbp)
  auto physDevPropList = vkh::getPhysicalDevicePropertyList(physDev);
    eacd:	48 8d 85 c0 fc ff ff 	lea    -0x340(%rbp),%rax
    ead4:	48 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%rdx
    eadb:	48 89 d6             	mov    %rdx,%rsi
    eade:	48 89 c7             	mov    %rax,%rdi
    eae1:	e8 9b a1 ff ff       	call   8c81 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>
  return physDevPropList.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
    eae6:	8b 85 d0 fc ff ff    	mov    -0x330(%rbp),%eax
    eaec:	83 f8 02             	cmp    $0x2,%eax
    eaef:	0f 94 c0             	sete   %al
}
    eaf2:	c9                   	leave
    eaf3:	c3                   	ret

000000000000eaf4 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T>:

std::optional<std::pair<uint32_t, VkQueueFamilyProperties>>
VulkanApp::selectQueueFamily(VkPhysicalDevice physDev) {
    eaf4:	55                   	push   %rbp
    eaf5:	48 89 e5             	mov    %rsp,%rbp
    eaf8:	53                   	push   %rbx
    eaf9:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    eb00:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    eb07:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    eb0e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  auto graphicsFamilies = vkh::getGraphicsQueueFamilyPropertyList(physDev);
    eb15:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    eb19:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    eb20:	48 89 d6             	mov    %rdx,%rsi
    eb23:	48 89 c7             	mov    %rax,%rdi
    eb26:	e8 7f a2 ff ff       	call   8daa <_ZN3vkh34getGraphicsQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  auto computeFamilies = vkh::getComputeQueueFamilyPropertyList(physDev);
    eb2b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    eb2f:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    eb36:	48 89 d6             	mov    %rdx,%rsi
    eb39:	48 89 c7             	mov    %rax,%rdi
    eb3c:	e8 9d a3 ff ff       	call   8ede <_ZN3vkh33getComputeQueueFamilyPropertyListEP18VkPhysicalDevice_T>
  auto presentFamilies =
      vkh::getPresentQueueFamilyPropertyList(physDev, surface);
    eb41:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    eb48:	48 8b 50 48          	mov    0x48(%rax),%rdx
    eb4c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    eb53:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
    eb5a:	48 89 ce             	mov    %rcx,%rsi
    eb5d:	48 89 c7             	mov    %rax,%rdi
    eb60:	e8 b2 a4 ff ff       	call   9017 <_ZN3vkh33getPresentQueueFamilyPropertyListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>

  /* Find a queue that is capable of handling graphics, computing, and
  supporting presentation to the surface */
  /* any queue family with {VK_QUEUE_GRAPHICS_BIT} or {VK_QUEUE_COMPUTE_BIT}
  capabilities already implicitly support {VK_QUEUE_TRANSFER_BIT} operations */
  for (size_t i = 0; i < graphicsFamilies.size(); ++i) {
    eb65:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    eb6c:	00 
    eb6d:	e9 c5 00 00 00       	jmp    ec37 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x143>
    if ((graphicsFamilies[i].has_value() && computeFamilies[i].has_value()) &&
    eb72:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    eb76:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    eb7a:	48 89 d6             	mov    %rdx,%rsi
    eb7d:	48 89 c7             	mov    %rax,%rdi
    eb80:	e8 b7 b4 ff ff       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    eb85:	48 89 c7             	mov    %rax,%rdi
    eb88:	e8 c9 5b 00 00       	call   14756 <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    eb8d:	84 c0                	test   %al,%al
    eb8f:	74 48                	je     ebd9 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
    eb91:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    eb95:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    eb99:	48 89 d6             	mov    %rdx,%rsi
    eb9c:	48 89 c7             	mov    %rax,%rdi
    eb9f:	e8 98 b4 ff ff       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    eba4:	48 89 c7             	mov    %rax,%rdi
    eba7:	e8 aa 5b 00 00       	call   14756 <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    ebac:	84 c0                	test   %al,%al
    ebae:	74 29                	je     ebd9 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
        presentFamilies[i].has_value()) {
    ebb0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ebb4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    ebbb:	48 89 d6             	mov    %rdx,%rsi
    ebbe:	48 89 c7             	mov    %rax,%rdi
    ebc1:	e8 76 b4 ff ff       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    ebc6:	48 89 c7             	mov    %rax,%rdi
    ebc9:	e8 88 5b 00 00       	call   14756 <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>
    if ((graphicsFamilies[i].has_value() && computeFamilies[i].has_value()) &&
    ebce:	84 c0                	test   %al,%al
    ebd0:	74 07                	je     ebd9 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xe5>
    ebd2:	b8 01 00 00 00       	mov    $0x1,%eax
    ebd7:	eb 05                	jmp    ebde <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0xea>
    ebd9:	b8 00 00 00 00       	mov    $0x0,%eax
    ebde:	84 c0                	test   %al,%al
    ebe0:	74 50                	je     ec32 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x13e>
      return {{static_cast<uint32_t>(i), graphicsFamilies[i].value()}};
    ebe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ebe6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    ebe9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ebed:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    ebf1:	48 89 d6             	mov    %rdx,%rsi
    ebf4:	48 89 c7             	mov    %rax,%rdi
    ebf7:	e8 40 b4 ff ff       	call   a03c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EEixEm>
    ebfc:	48 89 c7             	mov    %rax,%rdi
    ebff:	e8 6c 5b 00 00       	call   14770 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv>
    ec04:	48 89 c2             	mov    %rax,%rdx
    ec07:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
    ec0b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    ec0f:	48 89 ce             	mov    %rcx,%rsi
    ec12:	48 89 c7             	mov    %rax,%rdi
    ec15:	e8 88 5b 00 00       	call   147a2 <_ZNSt4pairIj23VkQueueFamilyPropertiesEC1IjRS0_Lb1EEEOT_OT0_>
    ec1a:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    ec1e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ec25:	48 89 d6             	mov    %rdx,%rsi
    ec28:	48 89 c7             	mov    %rax,%rdi
    ec2b:	e8 c8 5b 00 00       	call   147f8 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1IS2_Lb1EEEOT_>
    ec30:	eb 2f                	jmp    ec61 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x16d>
  for (size_t i = 0; i < graphicsFamilies.size(); ++i) {
    ec32:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    ec37:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    ec3b:	48 89 c7             	mov    %rax,%rdi
    ec3e:	e8 e5 5a 00 00       	call   14728 <_ZNKSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE4sizeEv>
    ec43:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    ec47:	0f 92 c0             	setb   %al
    ec4a:	84 c0                	test   %al,%al
    ec4c:	0f 85 20 ff ff ff    	jne    eb72 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x7e>
    }
  }
  return {};
    ec52:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ec59:	48 89 c7             	mov    %rax,%rdi
    ec5c:	e8 ff 52 00 00       	call   13f60 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>
}
    ec61:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    ec68:	48 89 c7             	mov    %rax,%rdi
    ec6b:	e8 cc b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ec70:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    ec74:	48 89 c7             	mov    %rax,%rdi
    ec77:	e8 c0 b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ec7c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    ec80:	48 89 c7             	mov    %rax,%rdi
    ec83:	e8 b4 b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ec88:	eb 3f                	jmp    ecc9 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1d5>
    ec8a:	48 89 c3             	mov    %rax,%rbx
    ec8d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    ec94:	48 89 c7             	mov    %rax,%rdi
    ec97:	e8 a0 b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ec9c:	eb 03                	jmp    eca1 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1ad>
    ec9e:	48 89 c3             	mov    %rax,%rbx
    eca1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    eca5:	48 89 c7             	mov    %rax,%rdi
    eca8:	e8 8f b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ecad:	eb 03                	jmp    ecb2 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T+0x1be>
    ecaf:	48 89 c3             	mov    %rax,%rbx
    ecb2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    ecb6:	48 89 c7             	mov    %rax,%rdi
    ecb9:	e8 7e b2 ff ff       	call   9f3c <_ZNSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EED1Ev>
    ecbe:	48 89 d8             	mov    %rbx,%rax
    ecc1:	48 89 c7             	mov    %rax,%rdi
    ecc4:	e8 a7 5c ff ff       	call   4970 <_Unwind_Resume@plt>
    ecc9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ecd0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ecd4:	c9                   	leave
    ecd5:	c3                   	ret

000000000000ecd6 <_ZN9VulkanApp12createDeviceEv>:

void VulkanApp::createDevice() {
    ecd6:	55                   	push   %rbp
    ecd7:	48 89 e5             	mov    %rsp,%rbp
    ecda:	41 54                	push   %r12
    ecdc:	53                   	push   %rbx
    ecdd:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
    ece4:	48 89 bd f8 fd ff ff 	mov    %rdi,-0x208(%rbp)
  /* Select a suitable physical device and one of its queue families */
  auto physicalDeviceList = vkh::getPhysicalDeviceList(instance);
    eceb:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    ecf2:	48 8b 50 08          	mov    0x8(%rax),%rdx
    ecf6:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    ecfa:	48 89 d6             	mov    %rdx,%rsi
    ecfd:	48 89 c7             	mov    %rax,%rdi
    ed00:	e8 0d 9e ff ff       	call   8b12 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>
  VkPhysicalDevice selectedPhysDev = VK_NULL_HANDLE;
    ed05:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    ed0c:	00 
  std::optional<std::pair<uint32_t, VkQueueFamilyProperties>>
      selectedQueueFamily;
    ed0d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ed11:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
    ed15:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
  for (const auto &physDev : physicalDeviceList) {
    ed19:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    ed1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ed21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed25:	48 89 c7             	mov    %rax,%rdi
    ed28:	e8 ff 5a 00 00       	call   1482c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
    ed2d:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    ed34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed38:	48 89 c7             	mov    %rax,%rdi
    ed3b:	e8 12 5b 00 00       	call   14852 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
    ed40:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
    ed47:	e9 dd 00 00 00       	jmp    ee29 <_ZN9VulkanApp12createDeviceEv+0x153>
    ed4c:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    ed53:	48 89 c7             	mov    %rax,%rdi
    ed56:	e8 7b 5b 00 00       	call   148d6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
    ed5b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    graphics, computing, and presentation commands */
    /* When the application creates a swapchain, the selected physical device
    must support VK_KHR_swapchain */
    /* Also, the selected physical device must be compatible with the swapchain
     that will be created. */
    if (checkDeviceProperties(physDev) &&
    ed5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ed63:	48 8b 10             	mov    (%rax),%rdx
    ed66:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    ed6d:	48 89 d6             	mov    %rdx,%rsi
    ed70:	48 89 c7             	mov    %rax,%rdi
    ed73:	e8 3c fd ff ff       	call   eab4 <_ZN9VulkanApp21checkDevicePropertiesEP18VkPhysicalDevice_T>
        checkDeviceExtensionSupport(physDev) &&
    ed78:	84 c0                	test   %al,%al
    ed7a:	74 41                	je     edbd <_ZN9VulkanApp12createDeviceEv+0xe7>
    ed7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ed80:	48 8b 10             	mov    (%rax),%rdx
    ed83:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    ed8a:	48 89 d6             	mov    %rdx,%rsi
    ed8d:	48 89 c7             	mov    %rax,%rdi
    ed90:	e8 f9 02 00 00       	call   f08e <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T>
    if (checkDeviceProperties(physDev) &&
    ed95:	84 c0                	test   %al,%al
    ed97:	74 24                	je     edbd <_ZN9VulkanApp12createDeviceEv+0xe7>
        checkDeviceSwapchainSupport(physDev)) {
    ed99:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ed9d:	48 8b 10             	mov    (%rax),%rdx
    eda0:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    eda7:	48 89 d6             	mov    %rdx,%rsi
    edaa:	48 89 c7             	mov    %rax,%rdi
    edad:	e8 16 06 00 00       	call   f3c8 <_ZN9VulkanApp27checkDeviceSwapchainSupportEP18VkPhysicalDevice_T>
        checkDeviceExtensionSupport(physDev) &&
    edb2:	84 c0                	test   %al,%al
    edb4:	74 07                	je     edbd <_ZN9VulkanApp12createDeviceEv+0xe7>
    edb6:	b8 01 00 00 00       	mov    $0x1,%eax
    edbb:	eb 05                	jmp    edc2 <_ZN9VulkanApp12createDeviceEv+0xec>
    edbd:	b8 00 00 00 00       	mov    $0x0,%eax
    if (checkDeviceProperties(physDev) &&
    edc2:	84 c0                	test   %al,%al
    edc4:	74 54                	je     ee1a <_ZN9VulkanApp12createDeviceEv+0x144>
      if (auto returnedQueueFamily = selectQueueFamily(physDev);
    edc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    edca:	48 8b 10             	mov    (%rax),%rdx
    edcd:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    edd4:	48 8b 8d f8 fd ff ff 	mov    -0x208(%rbp),%rcx
    eddb:	48 89 ce             	mov    %rcx,%rsi
    edde:	48 89 c7             	mov    %rax,%rdi
    ede1:	e8 0e fd ff ff       	call   eaf4 <_ZN9VulkanApp17selectQueueFamilyEP18VkPhysicalDevice_T>
          returnedQueueFamily.has_value()) {
    ede6:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    eded:	48 89 c7             	mov    %rax,%rdi
    edf0:	e8 f3 5a 00 00       	call   148e8 <_ZNKSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE9has_valueEv>
      if (auto returnedQueueFamily = selectQueueFamily(physDev);
    edf5:	84 c0                	test   %al,%al
    edf7:	74 21                	je     ee1a <_ZN9VulkanApp12createDeviceEv+0x144>
        selectedQueueFamily = returnedQueueFamily;
    edf9:	48 8d 95 00 fe ff ff 	lea    -0x200(%rbp),%rdx
    ee00:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    ee04:	48 89 d6             	mov    %rdx,%rsi
    ee07:	48 89 c7             	mov    %rax,%rdi
    ee0a:	e8 a3 51 00 00       	call   13fb2 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEaSERKS3_>
        selectedPhysDev = physDev;
    ee0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ee13:	48 8b 00             	mov    (%rax),%rax
    ee16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for (const auto &physDev : physicalDeviceList) {
    ee1a:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    ee21:	48 89 c7             	mov    %rax,%rdi
    ee24:	e8 8d 5a 00 00       	call   148b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
    ee29:	48 8d 95 20 fe ff ff 	lea    -0x1e0(%rbp),%rdx
    ee30:	48 8d 85 28 fe ff ff 	lea    -0x1d8(%rbp),%rax
    ee37:	48 89 d6             	mov    %rdx,%rsi
    ee3a:	48 89 c7             	mov    %rax,%rdi
    ee3d:	e8 39 5a 00 00       	call   1487b <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    ee42:	84 c0                	test   %al,%al
    ee44:	0f 85 02 ff ff ff    	jne    ed4c <_ZN9VulkanApp12createDeviceEv+0x76>
      }
    }
  }
  if (selectedPhysDev == VK_NULL_HANDLE) {
    ee4a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    ee4f:	75 3b                	jne    ee8c <_ZN9VulkanApp12createDeviceEv+0x1b6>
    throw std::runtime_error("Failed to select a physical device.");
    ee51:	bf 10 00 00 00       	mov    $0x10,%edi
    ee56:	e8 75 53 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    ee5b:	48 89 c3             	mov    %rax,%rbx
    ee5e:	48 8d 05 db 42 01 00 	lea    0x142db(%rip),%rax        # 23140 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x68>
    ee65:	48 89 c6             	mov    %rax,%rsi
    ee68:	48 89 df             	mov    %rbx,%rdi
    ee6b:	e8 d0 52 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    ee70:	48 8b 05 41 61 02 00 	mov    0x26141(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ee77:	48 89 c2             	mov    %rax,%rdx
    ee7a:	48 8d 05 bf 5e 02 00 	lea    0x25ebf(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ee81:	48 89 c6             	mov    %rax,%rsi
    ee84:	48 89 df             	mov    %rbx,%rdi
    ee87:	e8 74 5a ff ff       	call   4900 <__cxa_throw@plt>
  }

  /* Set up the selected queue family's creation info */
  uint32_t selectedIndex = selectedQueueFamily.value().first;
    ee8c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    ee90:	48 89 c7             	mov    %rax,%rdi
    ee93:	e8 44 51 00 00       	call   13fdc <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv>
    ee98:	8b 00                	mov    (%rax),%eax
    ee9a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  const float queuePriority = 1.0f;
    ee9d:	f3 0f 10 05 27 4c 01 	movss  0x14c27(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
    eea4:	00 
    eea5:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)

  VkDeviceQueueCreateInfo queueInfo{};
    eeaa:	66 0f ef c0          	pxor   %xmm0,%xmm0
    eeae:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
    eeb5:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    eebc:	66 0f d6 45 80       	movq   %xmm0,-0x80(%rbp)
  queueInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    eec1:	c7 85 60 ff ff ff 02 	movl   $0x2,-0xa0(%rbp)
    eec8:	00 00 00 
  queueInfo.pNext = nullptr;
    eecb:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    eed2:	00 00 00 00 
  queueInfo.queueFamilyIndex = selectedIndex;
    eed6:	8b 45 dc             	mov    -0x24(%rbp),%eax
    eed9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  queueInfo.queueCount = 1;
    eedf:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
    eee6:	00 00 00 
  queueInfo.pQueuePriorities = &queuePriority;
    eee9:	48 8d 45 8c          	lea    -0x74(%rbp),%rax
    eeed:	48 89 45 80          	mov    %rax,-0x80(%rbp)

  /* Create the logical device */
  VkPhysicalDeviceFeatures deviceFeatures{};
    eef1:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
    eef8:	b8 00 00 00 00       	mov    $0x0,%eax
    eefd:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    ef02:	48 89 d7             	mov    %rdx,%rdi
    ef05:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    ef08:	48 89 fa             	mov    %rdi,%rdx
    ef0b:	89 02                	mov    %eax,(%rdx)
    ef0d:	48 83 c2 04          	add    $0x4,%rdx

  VkDeviceCreateInfo deviceCreateInfo{};
    ef11:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ef15:	0f 29 85 30 fe ff ff 	movaps %xmm0,-0x1d0(%rbp)
    ef1c:	0f 29 85 40 fe ff ff 	movaps %xmm0,-0x1c0(%rbp)
    ef23:	0f 29 85 50 fe ff ff 	movaps %xmm0,-0x1b0(%rbp)
    ef2a:	0f 29 85 60 fe ff ff 	movaps %xmm0,-0x1a0(%rbp)
    ef31:	66 0f d6 85 70 fe ff 	movq   %xmm0,-0x190(%rbp)
    ef38:	ff 
  deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    ef39:	c7 85 30 fe ff ff 03 	movl   $0x3,-0x1d0(%rbp)
    ef40:	00 00 00 
  deviceCreateInfo.pNext = nullptr;
    ef43:	48 c7 85 38 fe ff ff 	movq   $0x0,-0x1c8(%rbp)
    ef4a:	00 00 00 00 
  deviceCreateInfo.queueCreateInfoCount = 1;
    ef4e:	c7 85 44 fe ff ff 01 	movl   $0x1,-0x1bc(%rbp)
    ef55:	00 00 00 
  deviceCreateInfo.pQueueCreateInfos = &queueInfo;
    ef58:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    ef5f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  deviceCreateInfo.enabledExtensionCount =
      static_cast<uint32_t>(deviceExtensions.size());
    ef66:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    ef6d:	48 05 90 00 00 00    	add    $0x90,%rax
    ef73:	48 89 c7             	mov    %rax,%rdi
    ef76:	e8 41 57 00 00       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  deviceCreateInfo.enabledExtensionCount =
    ef7b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
  deviceCreateInfo.ppEnabledExtensionNames = deviceExtensions.data();
    ef81:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    ef88:	48 05 90 00 00 00    	add    $0x90,%rax
    ef8e:	48 89 c7             	mov    %rax,%rdi
    ef91:	e8 6e 57 00 00       	call   14704 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
    ef96:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  deviceCreateInfo.pEnabledFeatures = &deviceFeatures;
    ef9d:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    efa4:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  deviceCreateInfo.enabledLayerCount =
      static_cast<uint32_t>(instanceLayers.size());
    efab:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    efb2:	48 83 c0 28          	add    $0x28,%rax
    efb6:	48 89 c7             	mov    %rax,%rdi
    efb9:	e8 fe 56 00 00       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  deviceCreateInfo.enabledLayerCount =
    efbe:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%rbp)
  deviceCreateInfo.ppEnabledLayerNames = instanceLayers.data();
    efc4:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    efcb:	48 83 c0 28          	add    $0x28,%rax
    efcf:	48 89 c7             	mov    %rax,%rdi
    efd2:	e8 09 57 00 00       	call   146e0 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    efd7:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)

  device = vkh::createDevice(selectedPhysDev, &deviceCreateInfo);
    efde:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    efe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    efe9:	ba 00 00 00 00       	mov    $0x0,%edx
    efee:	48 89 ce             	mov    %rcx,%rsi
    eff1:	48 89 c7             	mov    %rax,%rdi
    eff4:	e8 2e 80 ff ff       	call   7027 <_ZN3vkh12createDeviceEP18VkPhysicalDevice_TPK18VkDeviceCreateInfoPK21VkAllocationCallbacks>
    eff9:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
    f000:	48 89 42 50          	mov    %rax,0x50(%rdx)

  /* Get a queue handle */
  vkGetDeviceQueue(device, selectedIndex, 0, &queue);
    f004:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    f00b:	48 8d 50 60          	lea    0x60(%rax),%rdx
    f00f:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    f016:	48 8b 40 50          	mov    0x50(%rax),%rax
    f01a:	8b 75 dc             	mov    -0x24(%rbp),%esi
    f01d:	48 89 d1             	mov    %rdx,%rcx
    f020:	ba 00 00 00 00       	mov    $0x0,%edx
    f025:	48 89 c7             	mov    %rax,%rdi
    f028:	e8 b3 56 ff ff       	call   46e0 <vkGetDeviceQueue@plt>

  /* Store the selected device for later uses */
  physicalDevice = selectedPhysDev;
    f02d:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    f034:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f038:	48 89 50 58          	mov    %rdx,0x58(%rax)

  /* Store the index of the selected queue family */
  queueFamilyIndex = selectedIndex;
    f03c:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
    f043:	8b 55 dc             	mov    -0x24(%rbp),%edx
    f046:	89 50 68             	mov    %edx,0x68(%rax)
}
    f049:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    f04d:	48 89 c7             	mov    %rax,%rdi
    f050:	e8 e7 ab ff ff       	call   9c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    f055:	eb 2a                	jmp    f081 <_ZN9VulkanApp12createDeviceEv+0x3ab>
    throw std::runtime_error("Failed to select a physical device.");
    f057:	49 89 c4             	mov    %rax,%r12
    f05a:	48 89 df             	mov    %rbx,%rdi
    f05d:	e8 9e 52 ff ff       	call   4300 <__cxa_free_exception@plt>
    f062:	4c 89 e3             	mov    %r12,%rbx
    f065:	eb 03                	jmp    f06a <_ZN9VulkanApp12createDeviceEv+0x394>
}
    f067:	48 89 c3             	mov    %rax,%rbx
    f06a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    f06e:	48 89 c7             	mov    %rax,%rdi
    f071:	e8 c6 ab ff ff       	call   9c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
    f076:	48 89 d8             	mov    %rbx,%rax
    f079:	48 89 c7             	mov    %rax,%rdi
    f07c:	e8 ef 58 ff ff       	call   4970 <_Unwind_Resume@plt>
    f081:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
    f088:	5b                   	pop    %rbx
    f089:	41 5c                	pop    %r12
    f08b:	5d                   	pop    %rbp
    f08c:	c3                   	ret
    f08d:	90                   	nop

000000000000f08e <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceExtensionSupport(VkPhysicalDevice physDev) {
    f08e:	55                   	push   %rbp
    f08f:	48 89 e5             	mov    %rsp,%rbp
    f092:	53                   	push   %rbx
    f093:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    f09a:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    f0a1:	48 89 b5 c0 fe ff ff 	mov    %rsi,-0x140(%rbp)
  auto availableExtensionsList = vkh::getAvailableDeviceExtensionList(physDev);
    f0a8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    f0af:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
    f0b6:	ba 00 00 00 00       	mov    $0x0,%edx
    f0bb:	48 89 ce             	mov    %rcx,%rsi
    f0be:	48 89 c7             	mov    %rax,%rdi
    f0c1:	e8 77 97 ff ff       	call   883d <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>
  std::map<std::string, uint32_t> helper;
    f0c6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f0cd:	48 89 c7             	mov    %rax,%rdi
    f0d0:	e8 83 4f 00 00       	call   14058 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
  for (const auto &availableExtension : availableExtensionsList) {
    f0d5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    f0dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f0e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0e4:	48 89 c7             	mov    %rax,%rdi
    f0e7:	e8 12 59 00 00       	call   149fe <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
    f0ec:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    f0f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0f7:	48 89 c7             	mov    %rax,%rdi
    f0fa:	e8 25 59 00 00       	call   14a24 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
    f0ff:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    f106:	e9 8c 00 00 00       	jmp    f197 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x109>
    f10b:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    f112:	48 89 c7             	mov    %rax,%rdi
    f115:	e8 92 59 00 00       	call   14aac <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
    f11a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    helper[availableExtension.extensionName]++;
    f11e:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    f125:	48 89 c7             	mov    %rax,%rdi
    f128:	e8 53 58 ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    f12d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    f131:	48 8d 95 6f ff ff ff 	lea    -0x91(%rbp),%rdx
    f138:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f13f:	48 89 ce             	mov    %rcx,%rsi
    f142:	48 89 c7             	mov    %rax,%rdi
    f145:	e8 de 60 ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    f14a:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    f151:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f158:	48 89 d6             	mov    %rdx,%rsi
    f15b:	48 89 c7             	mov    %rax,%rdi
    f15e:	e8 5b 59 00 00       	call   14abe <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    f163:	8b 10                	mov    (%rax),%edx
    f165:	83 c2 01             	add    $0x1,%edx
    f168:	89 10                	mov    %edx,(%rax)
    f16a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f171:	48 89 c7             	mov    %rax,%rdi
    f174:	e8 07 51 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f179:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    f180:	48 89 c7             	mov    %rax,%rdi
    f183:	e8 f8 53 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
  for (const auto &availableExtension : availableExtensionsList) {
    f188:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    f18f:	48 89 c7             	mov    %rax,%rdi
    f192:	e8 f1 58 00 00       	call   14a88 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
    f197:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    f19e:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    f1a5:	48 89 d6             	mov    %rdx,%rsi
    f1a8:	48 89 c7             	mov    %rax,%rdi
    f1ab:	e8 9d 58 00 00       	call   14a4d <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    f1b0:	84 c0                	test   %al,%al
    f1b2:	0f 85 53 ff ff ff    	jne    f10b <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x7d>
    // std::cout << availableExtension.extensionName << '\n';
  }
  for (const auto &deviceExtension : deviceExtensions) {
    f1b8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    f1bf:	48 05 90 00 00 00    	add    $0x90,%rax
    f1c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f1c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f1cd:	48 89 c7             	mov    %rax,%rdi
    f1d0:	e8 87 53 00 00       	call   1455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
    f1d5:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    f1dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f1e0:	48 89 c7             	mov    %rax,%rdi
    f1e3:	e8 9a 53 00 00       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
    f1e8:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    f1ef:	e9 ed 00 00 00       	jmp    f2e1 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x253>
    f1f4:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    f1fb:	48 89 c7             	mov    %rax,%rdi
    f1fe:	e8 03 54 00 00       	call   14606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
    f203:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    helper[deviceExtension]++;
    f207:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    f20b:	48 89 c7             	mov    %rax,%rdi
    f20e:	e8 6d 57 ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    f213:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f217:	48 8b 08             	mov    (%rax),%rcx
    f21a:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
    f21e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    f225:	48 89 ce             	mov    %rcx,%rsi
    f228:	48 89 c7             	mov    %rax,%rdi
    f22b:	e8 f8 5f ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    f230:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    f237:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f23e:	48 89 d6             	mov    %rdx,%rsi
    f241:	48 89 c7             	mov    %rax,%rdi
    f244:	e8 75 58 00 00       	call   14abe <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    f249:	8b 10                	mov    (%rax),%edx
    f24b:	83 c2 01             	add    $0x1,%edx
    f24e:	89 10                	mov    %edx,(%rax)
    f250:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    f257:	48 89 c7             	mov    %rax,%rdi
    f25a:	e8 21 50 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f25f:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    f263:	48 89 c7             	mov    %rax,%rdi
    f266:	e8 15 53 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    if (helper[deviceExtension] < 2) {
    f26b:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    f26f:	48 89 c7             	mov    %rax,%rdi
    f272:	e8 09 57 ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    f277:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f27b:	48 8b 08             	mov    (%rax),%rcx
    f27e:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
    f282:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f286:	48 89 ce             	mov    %rcx,%rsi
    f289:	48 89 c7             	mov    %rax,%rdi
    f28c:	e8 97 5f ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    f291:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    f295:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f29c:	48 89 d6             	mov    %rdx,%rsi
    f29f:	48 89 c7             	mov    %rax,%rdi
    f2a2:	e8 17 58 00 00       	call   14abe <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    f2a7:	8b 00                	mov    (%rax),%eax
    f2a9:	83 f8 01             	cmp    $0x1,%eax
    f2ac:	0f 96 c3             	setbe  %bl
    f2af:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f2b3:	48 89 c7             	mov    %rax,%rdi
    f2b6:	e8 c5 4f ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f2bb:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    f2bf:	48 89 c7             	mov    %rax,%rdi
    f2c2:	e8 b9 52 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    f2c7:	84 db                	test   %bl,%bl
    f2c9:	74 07                	je     f2d2 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x244>
      return false;
    f2cb:	bb 00 00 00 00       	mov    $0x0,%ebx
    f2d0:	eb 35                	jmp    f307 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x279>
  for (const auto &deviceExtension : deviceExtensions) {
    f2d2:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    f2d9:	48 89 c7             	mov    %rax,%rdi
    f2dc:	e8 05 53 00 00       	call   145e6 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
    f2e1:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    f2e8:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
    f2ef:	48 89 d6             	mov    %rdx,%rsi
    f2f2:	48 89 c7             	mov    %rax,%rdi
    f2f5:	e8 b1 52 00 00       	call   145ab <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    f2fa:	84 c0                	test   %al,%al
    f2fc:	0f 85 f2 fe ff ff    	jne    f1f4 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x166>
    }
  }
  return true;
    f302:	bb 01 00 00 00       	mov    $0x1,%ebx
}
    f307:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f30e:	48 89 c7             	mov    %rax,%rdi
    f311:	e8 5e 4d 00 00       	call   14074 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f316:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    f31d:	48 89 c7             	mov    %rax,%rdi
    f320:	e8 8d a6 ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    f325:	89 d8                	mov    %ebx,%eax
    f327:	e9 96 00 00 00       	jmp    f3c2 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x334>
    helper[availableExtension.extensionName]++;
    f32c:	48 89 c3             	mov    %rax,%rbx
    f32f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f336:	48 89 c7             	mov    %rax,%rdi
    f339:	e8 42 4f ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f33e:	eb 03                	jmp    f343 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2b5>
    f340:	48 89 c3             	mov    %rax,%rbx
    f343:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
    f34a:	48 89 c7             	mov    %rax,%rdi
    f34d:	e8 2e 52 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    f352:	eb 45                	jmp    f399 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x30b>
    helper[deviceExtension]++;
    f354:	48 89 c3             	mov    %rax,%rbx
    f357:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    f35e:	48 89 c7             	mov    %rax,%rdi
    f361:	e8 1a 4f ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f366:	eb 03                	jmp    f36b <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2dd>
    f368:	48 89 c3             	mov    %rax,%rbx
    f36b:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    f36f:	48 89 c7             	mov    %rax,%rdi
    f372:	e8 09 52 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
    f377:	eb 20                	jmp    f399 <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x30b>
    if (helper[deviceExtension] < 2) {
    f379:	48 89 c3             	mov    %rax,%rbx
    f37c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    f380:	48 89 c7             	mov    %rax,%rdi
    f383:	e8 f8 4e ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    f388:	eb 03                	jmp    f38d <_ZN9VulkanApp27checkDeviceExtensionSupportEP18VkPhysicalDevice_T+0x2ff>
    f38a:	48 89 c3             	mov    %rax,%rbx
    f38d:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    f391:	48 89 c7             	mov    %rax,%rdi
    f394:	e8 e7 51 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
}
    f399:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    f3a0:	48 89 c7             	mov    %rax,%rdi
    f3a3:	e8 cc 4c 00 00       	call   14074 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    f3a8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    f3af:	48 89 c7             	mov    %rax,%rdi
    f3b2:	e8 fb a5 ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
    f3b7:	48 89 d8             	mov    %rbx,%rax
    f3ba:	48 89 c7             	mov    %rax,%rdi
    f3bd:	e8 ae 55 ff ff       	call   4970 <_Unwind_Resume@plt>
    f3c2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    f3c6:	c9                   	leave
    f3c7:	c3                   	ret

000000000000f3c8 <_ZN9VulkanApp27checkDeviceSwapchainSupportEP18VkPhysicalDevice_T>:

bool VulkanApp::checkDeviceSwapchainSupport(
    [[maybe_unused]] VkPhysicalDevice physDev) {
    f3c8:	55                   	push   %rbp
    f3c9:	48 89 e5             	mov    %rsp,%rbp
    f3cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f3d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return true;
    f3d4:	b8 01 00 00 00       	mov    $0x1,%eax
}
    f3d9:	5d                   	pop    %rbp
    f3da:	c3                   	ret
    f3db:	90                   	nop

000000000000f3dc <_ZN9VulkanApp27populateSwapchainCreateInfoEv>:

VkSwapchainCreateInfoKHR VulkanApp::populateSwapchainCreateInfo() {
    f3dc:	55                   	push   %rbp
    f3dd:	48 89 e5             	mov    %rsp,%rbp
    f3e0:	41 54                	push   %r12
    f3e2:	53                   	push   %rbx
    f3e3:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    f3ea:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
    f3f1:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  /* Vulkan 1.3.231 - A Specification, pg 2235 */

  auto surfaceCapabilities =
      vkh::getPhysicalDeviceSurfaceCapabilities(physicalDevice, surface);
    f3f8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f3ff:	48 8b 50 48          	mov    0x48(%rax),%rdx
    f403:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f40a:	48 8b 48 58          	mov    0x58(%rax),%rcx
    f40e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    f412:	48 89 ce             	mov    %rcx,%rsi
    f415:	48 89 c7             	mov    %rax,%rdi
    f418:	e8 6a 9d ff ff       	call   9187 <_ZN3vkh36getPhysicalDeviceSurfaceCapabilitiesEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
  auto surfaceFormats =
      vkh::getPhysicalDeviceSurfaceFormatList(physicalDevice, surface);
    f41d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f424:	48 8b 50 48          	mov    0x48(%rax),%rdx
    f428:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f42f:	48 8b 48 58          	mov    0x58(%rax),%rcx
    f433:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f43a:	48 89 ce             	mov    %rcx,%rsi
    f43d:	48 89 c7             	mov    %rax,%rdi
    f440:	e8 f0 9d ff ff       	call   9235 <_ZN3vkh34getPhysicalDeviceSurfaceFormatListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>
  auto surfacePresentModes =
      vkh::getPhysicalDeviceSurfacePresentModeList(physicalDevice, surface);
    f445:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f44c:	48 8b 50 48          	mov    0x48(%rax),%rdx
    f450:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f457:	48 8b 48 58          	mov    0x58(%rax),%rcx
    f45b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f462:	48 89 ce             	mov    %rcx,%rsi
    f465:	48 89 c7             	mov    %rax,%rdi
    f468:	e8 3f 9f ff ff       	call   93ac <_ZN3vkh39getPhysicalDeviceSurfacePresentModeListEP18VkPhysicalDevice_TP14VkSurfaceKHR_T>

  VkSwapchainCreateInfoKHR swapchainCreateInfo{};
    f46d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f474:	48 89 c6             	mov    %rax,%rsi
    f477:	b8 00 00 00 00       	mov    $0x0,%eax
    f47c:	ba 0d 00 00 00       	mov    $0xd,%edx
    f481:	48 89 f7             	mov    %rsi,%rdi
    f484:	48 89 d1             	mov    %rdx,%rcx
    f487:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  swapchainCreateInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    f48a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f491:	c7 00 e8 cd 9a 3b    	movl   $0x3b9acde8,(%rax)
  swapchainCreateInfo.pNext = nullptr;
    f497:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f49e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    f4a5:	00 
  pNext chain must include a VkImageFormatListCreateInfo structure with a
  viewFormatCount greater than zero and pViewFormats must have an element
  equal to imageFormat */
  // swapchainCreateInfo.flags = VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR;

  swapchainCreateInfo.surface = surface;
    f4a6:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f4ad:	48 8b 50 48          	mov    0x48(%rax),%rdx
    f4b1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f4b8:	48 89 50 18          	mov    %rdx,0x18(%rax)

  /* plus 1 to prevent waiting on the driver to complete internal operations
  before another image is accquired */
  uint32_t minImageCount = surfaceCapabilities.minImageCount + 1;
    f4bc:	8b 45 80             	mov    -0x80(%rbp),%eax
    f4bf:	83 c0 01             	add    $0x1,%eax
    f4c2:	89 45 ec             	mov    %eax,-0x14(%rbp)

  /* minImageCount <= surfaceCapabilities.maxImageCount, and
  surfaceCapabilities.maxImageCount might be less than
  surfaceCapabilities.minImageCount */
  if (surfaceCapabilities.maxImageCount > 0 &&
    f4c5:	8b 45 84             	mov    -0x7c(%rbp),%eax
    f4c8:	85 c0                	test   %eax,%eax
    f4ca:	74 0e                	je     f4da <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0xfe>
      minImageCount > surfaceCapabilities.maxImageCount) {
    f4cc:	8b 45 84             	mov    -0x7c(%rbp),%eax
  if (surfaceCapabilities.maxImageCount > 0 &&
    f4cf:	3b 45 ec             	cmp    -0x14(%rbp),%eax
    f4d2:	73 06                	jae    f4da <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0xfe>
    minImageCount = surfaceCapabilities.maxImageCount;
    f4d4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    f4d7:	89 45 ec             	mov    %eax,-0x14(%rbp)
  }
  swapchainCreateInfo.minImageCount = minImageCount;
    f4da:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f4e1:	8b 55 ec             	mov    -0x14(%rbp),%edx
    f4e4:	89 50 20             	mov    %edx,0x20(%rax)

  /* imageFormat and imageColorSpace must match the surfaceFormats.format and
  surfaceFormats.colorSpace members, respectively */
  if (surfaceFormats.empty()) {
    f4e7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f4ee:	48 89 c7             	mov    %rax,%rdi
    f4f1:	e8 cc 56 00 00       	call   14bc2 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5emptyEv>
    f4f6:	84 c0                	test   %al,%al
    f4f8:	74 3b                	je     f535 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x159>
    throw std::runtime_error("No surface format available.");
    f4fa:	bf 10 00 00 00       	mov    $0x10,%edi
    f4ff:	e8 cc 4c ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    f504:	48 89 c3             	mov    %rax,%rbx
    f507:	48 8d 05 56 3c 01 00 	lea    0x13c56(%rip),%rax        # 23164 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8c>
    f50e:	48 89 c6             	mov    %rax,%rsi
    f511:	48 89 df             	mov    %rbx,%rdi
    f514:	e8 27 4c ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
    f519:	48 8b 05 98 5a 02 00 	mov    0x25a98(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    f520:	48 89 c2             	mov    %rax,%rdx
    f523:	48 8d 05 16 58 02 00 	lea    0x25816(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    f52a:	48 89 c6             	mov    %rax,%rsi
    f52d:	48 89 df             	mov    %rbx,%rdi
    f530:	e8 cb 53 ff ff       	call   4900 <__cxa_throw@plt>
  }
  swapchainCreateInfo.imageFormat = surfaceFormats[0].format;
    f535:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f53c:	be 00 00 00 00       	mov    $0x0,%esi
    f541:	48 89 c7             	mov    %rax,%rdi
    f544:	e8 bb 56 00 00       	call   14c04 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>
    f549:	8b 10                	mov    (%rax),%edx
    f54b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f552:	89 50 24             	mov    %edx,0x24(%rax)
  swapchainCreateInfo.imageColorSpace = surfaceFormats[0].colorSpace;
    f555:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f55c:	be 00 00 00 00       	mov    $0x0,%esi
    f561:	48 89 c7             	mov    %rax,%rdi
    f564:	e8 9b 56 00 00       	call   14c04 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>
    f569:	8b 50 04             	mov    0x4(%rax),%edx
    f56c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f573:	89 50 28             	mov    %edx,0x28(%rax)
  for (const auto &format : surfaceFormats) {
    f576:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f57d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    f581:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f585:	48 89 c7             	mov    %rax,%rdi
    f588:	e8 97 56 00 00       	call   14c24 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>
    f58d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    f594:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f598:	48 89 c7             	mov    %rax,%rdi
    f59b:	e8 aa 56 00 00       	call   14c4a <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>
    f5a0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    f5a7:	eb 5b                	jmp    f604 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x228>
    f5a9:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    f5b0:	48 89 c7             	mov    %rax,%rdi
    f5b3:	e8 16 57 00 00       	call   14cce <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEdeEv>
    f5b8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if (format.format == VK_FORMAT_R8G8B8A8_SRGB &&
    f5bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f5c0:	8b 00                	mov    (%rax),%eax
    f5c2:	83 f8 2b             	cmp    $0x2b,%eax
    f5c5:	75 2e                	jne    f5f5 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x219>
        format.colorSpace == VK_COLOR_SPACE_SRGB_NONLINEAR_KHR) {
    f5c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f5cb:	8b 40 04             	mov    0x4(%rax),%eax
    if (format.format == VK_FORMAT_R8G8B8A8_SRGB &&
    f5ce:	85 c0                	test   %eax,%eax
    f5d0:	75 23                	jne    f5f5 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x219>
      swapchainCreateInfo.imageFormat = format.format;
    f5d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f5d6:	8b 10                	mov    (%rax),%edx
    f5d8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f5df:	89 50 24             	mov    %edx,0x24(%rax)
      swapchainCreateInfo.imageColorSpace = format.colorSpace;
    f5e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f5e6:	8b 50 04             	mov    0x4(%rax),%edx
    f5e9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f5f0:	89 50 28             	mov    %edx,0x28(%rax)
      break;
    f5f3:	eb 2c                	jmp    f621 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x245>
  for (const auto &format : surfaceFormats) {
    f5f5:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    f5fc:	48 89 c7             	mov    %rax,%rdi
    f5ff:	e8 aa 56 00 00       	call   14cae <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEppEv>
    f604:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    f60b:	48 8d 85 38 ff ff ff 	lea    -0xc8(%rbp),%rax
    f612:	48 89 d6             	mov    %rdx,%rsi
    f615:	48 89 c7             	mov    %rax,%rdi
    f618:	e8 56 56 00 00       	call   14c73 <_ZN9__gnu_cxxneIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    f61d:	84 c0                	test   %al,%al
    f61f:	75 88                	jne    f5a9 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x1cd>
    }
  }
  swapchain.format = swapchainCreateInfo.imageFormat;
    f621:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f628:	8b 50 24             	mov    0x24(%rax),%edx
    f62b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f632:	89 50 78             	mov    %edx,0x78(%rax)

  /* imageExtent is the size (in pixels) of the swapchain
  image(s). The behavior is platform-dependent if the image
  extent does not match the surface’s currentExtent as returned
  by vkGetPhysicalDeviceSurfaceCapabilitiesKHR. */
  uint32_t imageExtentWidth = surfaceCapabilities.currentExtent.width;
    f635:	8b 45 88             	mov    -0x78(%rbp),%eax
    f638:	89 45 e8             	mov    %eax,-0x18(%rbp)
  uint32_t imageExtentHeight = surfaceCapabilities.currentExtent.height;
    f63b:	8b 45 8c             	mov    -0x74(%rbp),%eax
    f63e:	89 45 e4             	mov    %eax,-0x1c(%rbp)

  /* {0, 0} <= minImageExtent <= imageExtent <= maxImageExtent */
  if (imageExtentWidth > surfaceCapabilities.maxImageExtent.width) {
    f641:	8b 45 98             	mov    -0x68(%rbp),%eax
    f644:	3b 45 e8             	cmp    -0x18(%rbp),%eax
    f647:	73 06                	jae    f64f <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x273>
    imageExtentWidth = surfaceCapabilities.maxImageExtent.width;
    f649:	8b 45 98             	mov    -0x68(%rbp),%eax
    f64c:	89 45 e8             	mov    %eax,-0x18(%rbp)
  }
  if (imageExtentHeight > surfaceCapabilities.maxImageExtent.height) {
    f64f:	8b 45 9c             	mov    -0x64(%rbp),%eax
    f652:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    f655:	73 06                	jae    f65d <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x281>
    imageExtentHeight = surfaceCapabilities.maxImageExtent.height;
    f657:	8b 45 9c             	mov    -0x64(%rbp),%eax
    f65a:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  }
  swapchainCreateInfo.imageExtent = {imageExtentWidth, imageExtentHeight};
    f65d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f664:	8b 55 e8             	mov    -0x18(%rbp),%edx
    f667:	89 50 2c             	mov    %edx,0x2c(%rax)
    f66a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f671:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    f674:	89 50 30             	mov    %edx,0x30(%rax)
  swapchain.extent = swapchainCreateInfo.imageExtent;
    f677:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f67e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    f685:	48 8b 52 2c          	mov    0x2c(%rdx),%rdx
    f689:	48 89 50 7c          	mov    %rdx,0x7c(%rax)

  /* imageArrayLayers is the number of views in a multiview/stereo surface. For
  non-stereoscopic-3D applications, this value is 1. */
  /* 0 < imageArrayLayers <= maxImageArrayLayers */
  swapchainCreateInfo.imageArrayLayers = 1;
    f68d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f694:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%rax)

  /* {presentMode} determines how incoming present requests will be processed
  and queued internally. */
  /* enum {VkPresentModeKHR}, pg 2219 */
  /* {VK_PRESENT_MODE_FIFO_KHR} is guaranteed to be available */
  swapchainCreateInfo.presentMode = VK_PRESENT_MODE_FIFO_KHR;
    f69b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f6a2:	c7 40 58 02 00 00 00 	movl   $0x2,0x58(%rax)
  // auto  = VK_PRESENT_MODE_IMMEDIATE_KHR;
  for (const auto &presentMode : surfacePresentModes) {
    f6a9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f6b0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    f6b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f6b8:	48 89 c7             	mov    %rax,%rdi
    f6bb:	e8 20 56 00 00       	call   14ce0 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE5beginEv>
    f6c0:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    f6c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f6cb:	48 89 c7             	mov    %rax,%rdi
    f6ce:	e8 33 56 00 00       	call   14d06 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE3endEv>
    f6d3:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    f6da:	eb 52                	jmp    f72e <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x352>
    f6dc:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    f6e3:	48 89 c7             	mov    %rax,%rdi
    f6e6:	e8 9f 56 00 00       	call   14d8a <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEdeEv>
    f6eb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if (presentMode == preferredPresentMode) {
    f6ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f6f3:	8b 10                	mov    (%rax),%edx
    f6f5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f6fc:	8b 80 88 00 00 00    	mov    0x88(%rax),%eax
    f702:	39 c2                	cmp    %eax,%edx
    f704:	75 19                	jne    f71f <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x343>
      swapchainCreateInfo.presentMode = preferredPresentMode;
    f706:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    f70d:	8b 90 88 00 00 00    	mov    0x88(%rax),%edx
    f713:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f71a:	89 50 58             	mov    %edx,0x58(%rax)
      break;
    f71d:	eb 2c                	jmp    f74b <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x36f>
  for (const auto &presentMode : surfacePresentModes) {
    f71f:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    f726:	48 89 c7             	mov    %rax,%rdi
    f729:	e8 3c 56 00 00       	call   14d6a <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEppEv>
    f72e:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    f735:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
    f73c:	48 89 d6             	mov    %rdx,%rsi
    f73f:	48 89 c7             	mov    %rax,%rdi
    f742:	e8 e8 55 00 00       	call   14d2f <_ZN9__gnu_cxxneIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    f747:	84 c0                	test   %al,%al
    f749:	75 91                	jne    f6dc <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x300>
  }

  /* {VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT} specifies that the image can be used
  to create a {VkImageView} suitable for use as a color or resolve attachment in
  a {VkFramebuffer}, pg 898 */
  swapchainCreateInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
    f74b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f752:	c7 40 38 10 00 00 00 	movl   $0x10,0x38(%rax)

  /* {VK_SHARING_MODE_EXCLUSIVE} requires some works to be done with ownership
   */
  swapchainCreateInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE;
    f759:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f760:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  swapchainCreateInfo.queueFamilyIndexCount = 0;
    f767:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f76e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  swapchainCreateInfo.pQueueFamilyIndices = nullptr;
    f775:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f77c:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    f783:	00 

  /* image content is presented without being transformed */
  if (surfaceCapabilities.supportedTransforms &
    f784:	8b 45 a4             	mov    -0x5c(%rbp),%eax
    f787:	83 e0 01             	and    $0x1,%eax
    f78a:	85 c0                	test   %eax,%eax
    f78c:	74 1e                	je     f7ac <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x3d0>
      VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR) {
    swapchainCreateInfo.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
    f78e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f795:	c7 40 50 01 00 00 00 	movl   $0x1,0x50(%rax)
  } else {
    throw std::runtime_error(
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
  }

  if (surfaceCapabilities.supportedCompositeAlpha &
    f79c:	8b 45 ac             	mov    -0x54(%rbp),%eax
    f79f:	83 e0 01             	and    $0x1,%eax
    f7a2:	85 c0                	test   %eax,%eax
    f7a4:	0f 84 9b 00 00 00    	je     f845 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x469>
    f7aa:	eb 3b                	jmp    f7e7 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x40b>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    f7ac:	bf 10 00 00 00       	mov    $0x10,%edi
    f7b1:	e8 1a 4a ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    f7b6:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    f7b9:	48 8d 05 c8 39 01 00 	lea    0x139c8(%rip),%rax        # 23188 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xb0>
    f7c0:	48 89 c6             	mov    %rax,%rsi
    f7c3:	48 89 df             	mov    %rbx,%rdi
    f7c6:	e8 75 49 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    f7cb:	48 8b 05 e6 57 02 00 	mov    0x257e6(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    f7d2:	48 89 c2             	mov    %rax,%rdx
    f7d5:	48 8d 05 64 55 02 00 	lea    0x25564(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    f7dc:	48 89 c6             	mov    %rax,%rsi
    f7df:	48 89 df             	mov    %rbx,%rdi
    f7e2:	e8 19 51 ff ff       	call   4900 <__cxa_throw@plt>
      VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR) {
    swapchainCreateInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
    f7e7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f7ee:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%rax)
  } else {
    throw std::runtime_error(
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
  }

  swapchainCreateInfo.clipped = VK_TRUE;
    f7f5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f7fc:	c7 40 5c 01 00 00 00 	movl   $0x1,0x5c(%rax)

  swapchainCreateInfo.pNext = nullptr;
    f803:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f80a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    f811:	00 
  swapchainCreateInfo.oldSwapchain = VK_NULL_HANDLE;
    f812:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f819:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    f820:	00 

  return swapchainCreateInfo;
    f821:	90                   	nop
}
    f822:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f829:	48 89 c7             	mov    %rax,%rdi
    f82c:	e8 1f ab ff ff       	call   a350 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    f831:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f838:	48 89 c7             	mov    %rax,%rdi
    f83b:	e8 ac a9 ff ff       	call   a1ec <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
  return swapchainCreateInfo;
    f840:	e9 9c 00 00 00       	jmp    f8e1 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x505>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    f845:	bf 10 00 00 00       	mov    $0x10,%edi
    f84a:	e8 81 49 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
    f84f:	48 89 c3             	mov    %rax,%rbx
    throw std::runtime_error(
    f852:	48 8d 05 67 39 01 00 	lea    0x13967(%rip),%rax        # 231c0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe8>
    f859:	48 89 c6             	mov    %rax,%rsi
    f85c:	48 89 df             	mov    %rbx,%rdi
    f85f:	e8 dc 48 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    f864:	48 8b 05 4d 57 02 00 	mov    0x2574d(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    f86b:	48 89 c2             	mov    %rax,%rdx
    f86e:	48 8d 05 cb 54 02 00 	lea    0x254cb(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
    f875:	48 89 c6             	mov    %rax,%rsi
    f878:	48 89 df             	mov    %rbx,%rdi
    f87b:	e8 80 50 ff ff       	call   4900 <__cxa_throw@plt>
    throw std::runtime_error("No surface format available.");
    f880:	49 89 c4             	mov    %rax,%r12
    f883:	48 89 df             	mov    %rbx,%rdi
    f886:	e8 75 4a ff ff       	call   4300 <__cxa_free_exception@plt>
    f88b:	4c 89 e3             	mov    %r12,%rbx
    f88e:	eb 23                	jmp    f8b3 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4d7>
        "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR not supported.");
    f890:	49 89 c4             	mov    %rax,%r12
    f893:	48 89 df             	mov    %rbx,%rdi
    f896:	e8 65 4a ff ff       	call   4300 <__cxa_free_exception@plt>
    f89b:	4c 89 e3             	mov    %r12,%rbx
    f89e:	eb 13                	jmp    f8b3 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4d7>
        "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR not supported.");
    f8a0:	49 89 c4             	mov    %rax,%r12
    f8a3:	48 89 df             	mov    %rbx,%rdi
    f8a6:	e8 55 4a ff ff       	call   4300 <__cxa_free_exception@plt>
    f8ab:	4c 89 e3             	mov    %r12,%rbx
    f8ae:	eb 03                	jmp    f8b3 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4d7>
}
    f8b0:	48 89 c3             	mov    %rax,%rbx
    f8b3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    f8ba:	48 89 c7             	mov    %rax,%rdi
    f8bd:	e8 8e aa ff ff       	call   a350 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EED1Ev>
    f8c2:	eb 03                	jmp    f8c7 <_ZN9VulkanApp27populateSwapchainCreateInfoEv+0x4eb>
    f8c4:	48 89 c3             	mov    %rax,%rbx
    f8c7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    f8ce:	48 89 c7             	mov    %rax,%rdi
    f8d1:	e8 16 a9 ff ff       	call   a1ec <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EED1Ev>
    f8d6:	48 89 d8             	mov    %rbx,%rax
    f8d9:	48 89 c7             	mov    %rax,%rdi
    f8dc:	e8 8f 50 ff ff       	call   4970 <_Unwind_Resume@plt>
    f8e1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    f8e8:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
    f8ef:	5b                   	pop    %rbx
    f8f0:	41 5c                	pop    %r12
    f8f2:	5d                   	pop    %rbp
    f8f3:	c3                   	ret

000000000000f8f4 <_ZN9VulkanApp15createSwapchainEv>:

void VulkanApp::createSwapchain() {
    f8f4:	55                   	push   %rbp
    f8f5:	48 89 e5             	mov    %rsp,%rbp
    f8f8:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    f8fc:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  auto swapchainCreateInfo = populateSwapchainCreateInfo();
    f900:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    f904:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    f908:	48 89 d6             	mov    %rdx,%rsi
    f90b:	48 89 c7             	mov    %rax,%rdi
    f90e:	e8 c9 fa ff ff       	call   f3dc <_ZN9VulkanApp27populateSwapchainCreateInfoEv>
  swapchain.self = vkh::createSwapchain(device, &swapchainCreateInfo);
    f913:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    f917:	48 8b 40 50          	mov    0x50(%rax),%rax
    f91b:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
    f91f:	ba 00 00 00 00       	mov    $0x0,%edx
    f924:	48 89 ce             	mov    %rcx,%rsi
    f927:	48 89 c7             	mov    %rax,%rdi
    f92a:	e8 28 78 ff ff       	call   7157 <_ZN3vkh15createSwapchainEP10VkDevice_TPK24VkSwapchainCreateInfoKHRPK21VkAllocationCallbacks>
    f92f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    f933:	48 89 42 70          	mov    %rax,0x70(%rdx)
}
    f937:	90                   	nop
    f938:	c9                   	leave
    f939:	c3                   	ret

000000000000f93a <_ZN9VulkanApp16createImageViewsEv>:

void VulkanApp::createImageViews() {
    f93a:	55                   	push   %rbp
    f93b:	48 89 e5             	mov    %rsp,%rbp
    f93e:	53                   	push   %rbx
    f93f:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    f946:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  images = vkh::getSwapchainImages(device, swapchain.self);
    f94d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f954:	48 8b 50 70          	mov    0x70(%rax),%rdx
    f958:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f95f:	48 8b 48 50          	mov    0x50(%rax),%rcx
    f963:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    f967:	48 89 ce             	mov    %rcx,%rsi
    f96a:	48 89 c7             	mov    %rax,%rdi
    f96d:	e8 b1 9b ff ff       	call   9523 <_ZN3vkh18getSwapchainImagesEP10VkDevice_TP16VkSwapchainKHR_T>
    f972:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f979:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    f980:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    f984:	48 89 c6             	mov    %rax,%rsi
    f987:	48 89 d7             	mov    %rdx,%rdi
    f98a:	e8 0d 54 00 00       	call   14d9c <_ZNSt6vectorIP9VkImage_TSaIS1_EEaSEOS3_>
    f98f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    f993:	48 89 c7             	mov    %rax,%rdi
    f996:	e8 19 ab ff ff       	call   a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
  size_t imageCount = images.size();
    f99b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f9a2:	48 05 c0 00 00 00    	add    $0xc0,%rax
    f9a8:	48 89 c7             	mov    %rax,%rdi
    f9ab:	e8 24 54 00 00       	call   14dd4 <_ZNKSt6vectorIP9VkImage_TSaIS1_EE4sizeEv>
    f9b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  imageViews.resize(imageCount);
    f9b4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f9bb:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
    f9c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f9c6:	48 89 c6             	mov    %rax,%rsi
    f9c9:	48 89 d7             	mov    %rdx,%rdi
    f9cc:	e8 27 54 00 00       	call   14df8 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm>
  for (size_t i = 0; i < imageCount; ++i) {
    f9d1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    f9d8:	00 
    f9d9:	e9 f1 00 00 00       	jmp    facf <_ZN9VulkanApp16createImageViewsEv+0x195>
    VkImageViewCreateInfo imageViewInfo{};
    f9de:	66 0f ef c0          	pxor   %xmm0,%xmm0
    f9e2:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
    f9e9:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
    f9ed:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
    f9f1:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
    f9f5:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
    imageViewInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    f9f9:	c7 85 70 ff ff ff 0f 	movl   $0xf,-0x90(%rbp)
    fa00:	00 00 00 
    imageViewInfo.pNext = nullptr;
    fa03:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    fa0a:	00 00 00 00 
    // imageViewInfo.flags =
    imageViewInfo.image = images[i];
    fa0e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    fa15:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    fa1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fa20:	48 89 c6             	mov    %rax,%rsi
    fa23:	48 89 d7             	mov    %rdx,%rdi
    fa26:	e8 53 54 00 00       	call   14e7e <_ZNSt6vectorIP9VkImage_TSaIS1_EEixEm>
    fa2b:	48 8b 00             	mov    (%rax),%rax
    fa2e:	48 89 45 88          	mov    %rax,-0x78(%rbp)

    /* treat images as 2D textures */
    imageViewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
    fa32:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%rbp)

    imageViewInfo.format = swapchain.format;
    fa39:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    fa40:	8b 40 78             	mov    0x78(%rax),%eax
    fa43:	89 45 94             	mov    %eax,-0x6c(%rbp)

    /* default mapping */
    imageViewInfo.components.r = VK_COMPONENT_SWIZZLE_IDENTITY;
    fa46:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
    imageViewInfo.components.g = VK_COMPONENT_SWIZZLE_IDENTITY;
    fa4d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
    imageViewInfo.components.b = VK_COMPONENT_SWIZZLE_IDENTITY;
    fa54:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%rbp)
    imageViewInfo.components.a = VK_COMPONENT_SWIZZLE_IDENTITY;
    fa5b:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)

    /* color aspect */
    imageViewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
    fa62:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)

    /* In stereographic 3D applications, create a swapchain with multiple
    layers before creating multiple image views for each images representing
    the views for the left and right eyes by accessing different layers */
    imageViewInfo.subresourceRange.baseMipLevel = 0;
    fa69:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
    imageViewInfo.subresourceRange.levelCount = 1;
    fa70:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
    imageViewInfo.subresourceRange.baseArrayLayer = 0;
    fa77:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
    imageViewInfo.subresourceRange.layerCount = 1;
    fa7e:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)

    imageViews[i] = vkh::createImageView(device, &imageViewInfo);
    fa85:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    fa8c:	48 8b 40 50          	mov    0x50(%rax),%rax
    fa90:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    fa97:	ba 00 00 00 00       	mov    $0x0,%edx
    fa9c:	48 89 ce             	mov    %rcx,%rsi
    fa9f:	48 89 c7             	mov    %rax,%rdi
    faa2:	e8 50 77 ff ff       	call   71f7 <_ZN3vkh15createImageViewEP10VkDevice_TPK21VkImageViewCreateInfoPK21VkAllocationCallbacks>
    faa7:	48 89 c3             	mov    %rax,%rbx
    faaa:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    fab1:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
    fab8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fabc:	48 89 c6             	mov    %rax,%rsi
    fabf:	48 89 d7             	mov    %rdx,%rdi
    fac2:	e8 d7 53 00 00       	call   14e9e <_ZNSt6vectorIP13VkImageView_TSaIS1_EEixEm>
    fac7:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < imageCount; ++i) {
    faca:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    facf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fad3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    fad7:	0f 82 01 ff ff ff    	jb     f9de <_ZN9VulkanApp16createImageViewsEv+0xa4>
  }
}
    fadd:	90                   	nop
    fade:	90                   	nop
    fadf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    fae3:	c9                   	leave
    fae4:	c3                   	ret
    fae5:	90                   	nop

000000000000fae6 <_ZN9VulkanApp22createGraphicsPipelineEv>:

void VulkanApp::createGraphicsPipeline() {
    fae6:	55                   	push   %rbp
    fae7:	48 89 e5             	mov    %rsp,%rbp
    faea:	41 55                	push   %r13
    faec:	41 54                	push   %r12
    faee:	53                   	push   %rbx
    faef:	48 81 ec 78 05 00 00 	sub    $0x578,%rsp
    faf6:	48 89 bd 78 fa ff ff 	mov    %rdi,-0x588(%rbp)
  vkh::ShaderModuleWrapper shaderModule{};
    fafd:	48 c7 85 b0 fe ff ff 	movq   $0x0,-0x150(%rbp)
    fb04:	00 00 00 00 
    fb08:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
    fb0f:	00 00 00 00 
  shaderModule.vertex = vkh::createShaderModule(device, "build/shaders/"
    fb13:	48 8d 85 ef fe ff ff 	lea    -0x111(%rbp),%rax
    fb1a:	48 89 c7             	mov    %rax,%rdi
    fb1d:	e8 5e 4e ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    fb22:	48 8d 95 ef fe ff ff 	lea    -0x111(%rbp),%rdx
    fb29:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    fb30:	48 8d 0d c1 36 01 00 	lea    0x136c1(%rip),%rcx        # 231f8 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x120>
    fb37:	48 89 ce             	mov    %rcx,%rsi
    fb3a:	48 89 c7             	mov    %rax,%rdi
    fb3d:	e8 e6 56 ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    fb42:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
    fb49:	48 8b 40 50          	mov    0x50(%rax),%rax
    fb4d:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    fb54:	ba 00 00 00 00       	mov    $0x0,%edx
    fb59:	48 89 ce             	mov    %rcx,%rsi
    fb5c:	48 89 c7             	mov    %rax,%rdi
    fb5f:	e8 03 78 ff ff       	call   7367 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks>
    fb64:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    fb6b:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    fb72:	48 89 c7             	mov    %rax,%rdi
    fb75:	e8 06 47 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    fb7a:	48 8d 85 ef fe ff ff 	lea    -0x111(%rbp),%rax
    fb81:	48 89 c7             	mov    %rax,%rdi
    fb84:	e8 f7 49 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
                                                        "triangle_vert.spv");
  shaderModule.fragment = vkh::createShaderModule(device, "build/shaders/"
    fb89:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
    fb90:	48 89 c7             	mov    %rax,%rdi
    fb93:	e8 e8 4d ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
    fb98:	48 8d 95 1f ff ff ff 	lea    -0xe1(%rbp),%rdx
    fb9f:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    fba6:	48 8d 0d 6b 36 01 00 	lea    0x1366b(%rip),%rcx        # 23218 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x140>
    fbad:	48 89 ce             	mov    %rcx,%rsi
    fbb0:	48 89 c7             	mov    %rax,%rdi
    fbb3:	e8 70 56 ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    fbb8:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
    fbbf:	48 8b 40 50          	mov    0x50(%rax),%rax
    fbc3:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    fbca:	ba 00 00 00 00       	mov    $0x0,%edx
    fbcf:	48 89 ce             	mov    %rcx,%rsi
    fbd2:	48 89 c7             	mov    %rax,%rdi
    fbd5:	e8 8d 77 ff ff       	call   7367 <_ZN3vkh18createShaderModuleEP10VkDevice_TNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK21VkAllocationCallbacks>
    fbda:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    fbe1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    fbe8:	48 89 c7             	mov    %rax,%rdi
    fbeb:	e8 90 46 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    fbf0:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
    fbf7:	48 89 c7             	mov    %rax,%rdi
    fbfa:	e8 81 49 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>

  // std::vector<VkGraphicsPipelineCreateInfo>
  // graphicsPipelineCreateInfos{};

  /*  */
  VkPipelineShaderStageCreateInfo vertShaderStageInfo{};
    fbff:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fc03:	0f 29 85 80 fe ff ff 	movaps %xmm0,-0x180(%rbp)
    fc0a:	0f 29 85 90 fe ff ff 	movaps %xmm0,-0x170(%rbp)
    fc11:	0f 29 85 a0 fe ff ff 	movaps %xmm0,-0x160(%rbp)
  vertShaderStageInfo.sType =
    fc18:	c7 85 80 fe ff ff 12 	movl   $0x12,-0x180(%rbp)
    fc1f:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
  vertShaderStageInfo.stage = VK_SHADER_STAGE_VERTEX_BIT;
    fc22:	c7 85 94 fe ff ff 01 	movl   $0x1,-0x16c(%rbp)
    fc29:	00 00 00 
  vertShaderStageInfo.module = shaderModule.vertex;
    fc2c:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    fc33:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  vertShaderStageInfo.pName = "main";
    fc3a:	48 8d 05 f7 35 01 00 	lea    0x135f7(%rip),%rax        # 23238 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x160>
    fc41:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
  vertShaderStageInfo.pSpecializationInfo = nullptr;
    fc48:	48 c7 85 a8 fe ff ff 	movq   $0x0,-0x158(%rbp)
    fc4f:	00 00 00 00 

  VkPipelineShaderStageCreateInfo fragShaderStageInfo{};
    fc53:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fc57:	0f 29 85 50 fe ff ff 	movaps %xmm0,-0x1b0(%rbp)
    fc5e:	0f 29 85 60 fe ff ff 	movaps %xmm0,-0x1a0(%rbp)
    fc65:	0f 29 85 70 fe ff ff 	movaps %xmm0,-0x190(%rbp)
  fragShaderStageInfo.sType =
    fc6c:	c7 85 50 fe ff ff 12 	movl   $0x12,-0x1b0(%rbp)
    fc73:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
  fragShaderStageInfo.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
    fc76:	c7 85 64 fe ff ff 10 	movl   $0x10,-0x19c(%rbp)
    fc7d:	00 00 00 
  fragShaderStageInfo.module = shaderModule.fragment;
    fc80:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    fc87:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  fragShaderStageInfo.pName = "main";
    fc8e:	48 8d 05 a3 35 01 00 	lea    0x135a3(%rip),%rax        # 23238 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x160>
    fc95:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  fragShaderStageInfo.pSpecializationInfo = nullptr;
    fc9c:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
    fca3:	00 00 00 00 

  VkPipelineShaderStageCreateInfo shaderStages[] = {vertShaderStageInfo,
                                                    fragShaderStageInfo};
    fca7:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    fcae:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
    fcb5:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
    fcbc:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
    fcc3:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    fcca:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
    fcd1:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
    fcd8:	48 89 95 08 fe ff ff 	mov    %rdx,-0x1f8(%rbp)
    fcdf:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    fce6:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    fced:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
    fcf4:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
    fcfb:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    fd02:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
    fd09:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
    fd10:	48 89 95 28 fe ff ff 	mov    %rdx,-0x1d8(%rbp)
    fd17:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
    fd1e:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
    fd25:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
    fd2c:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    fd33:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
    fd3a:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
    fd41:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
    fd48:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)

  /*  */
  auto bindingDescription = vkh::Vertex2D_RGB::getBindingDescription();
    fd4f:	e8 6a 51 00 00       	call   14ebe <_ZN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EE21getBindingDescriptionEv>
    fd54:	48 89 85 e4 fd ff ff 	mov    %rax,-0x21c(%rbp)
    fd5b:	8b 85 ec fd ff ff    	mov    -0x214(%rbp),%eax
    fd61:	83 e0 00             	and    $0x0,%eax
    fd64:	09 d0                	or     %edx,%eax
    fd66:	89 85 ec fd ff ff    	mov    %eax,-0x214(%rbp)
  auto attributeDescriptions = vkh::Vertex2D_RGB::getAttributeDescriptions();
    fd6c:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
    fd73:	48 89 c7             	mov    %rax,%rdi
    fd76:	e8 85 51 00 00       	call   14f00 <_ZN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EE24getAttributeDescriptionsEv>

  VkPipelineVertexInputStateCreateInfo vertInputInfo{};
    fd7b:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fd7f:	0f 29 85 90 fd ff ff 	movaps %xmm0,-0x270(%rbp)
    fd86:	0f 29 85 a0 fd ff ff 	movaps %xmm0,-0x260(%rbp)
    fd8d:	0f 29 85 b0 fd ff ff 	movaps %xmm0,-0x250(%rbp)
  vertInputInfo.sType =
    fd94:	c7 85 90 fd ff ff 13 	movl   $0x13,-0x270(%rbp)
    fd9b:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
  vertInputInfo.vertexBindingDescriptionCount = 1;
    fd9e:	c7 85 a4 fd ff ff 01 	movl   $0x1,-0x25c(%rbp)
    fda5:	00 00 00 
  vertInputInfo.pVertexBindingDescriptions = &bindingDescription;
    fda8:	48 8d 85 e4 fd ff ff 	lea    -0x21c(%rbp),%rax
    fdaf:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
  vertInputInfo.vertexAttributeDescriptionCount =
      static_cast<uint32_t>(attributeDescriptions.size());
    fdb6:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
    fdbd:	48 89 c7             	mov    %rax,%rdi
    fdc0:	e8 1b 52 00 00       	call   14fe0 <_ZNKSt5arrayI33VkVertexInputAttributeDescriptionLm2EE4sizeEv>
  vertInputInfo.vertexAttributeDescriptionCount =
    fdc5:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%rbp)
  vertInputInfo.pVertexAttributeDescriptions = attributeDescriptions.data();
    fdcb:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
    fdd2:	48 89 c7             	mov    %rax,%rdi
    fdd5:	e8 b6 42 00 00       	call   14090 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EE4dataEv>
    fdda:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)

  /*  */
  VkPipelineInputAssemblyStateCreateInfo inputAssemblyInfo{};
    fde1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fde5:	0f 29 85 70 fd ff ff 	movaps %xmm0,-0x290(%rbp)
    fdec:	0f 29 85 80 fd ff ff 	movaps %xmm0,-0x280(%rbp)
  inputAssemblyInfo.sType =
    fdf3:	c7 85 70 fd ff ff 14 	movl   $0x14,-0x290(%rbp)
    fdfa:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
  inputAssemblyInfo.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
    fdfd:	c7 85 84 fd ff ff 03 	movl   $0x3,-0x27c(%rbp)
    fe04:	00 00 00 
  inputAssemblyInfo.primitiveRestartEnable = VK_FALSE;
    fe07:	c7 85 88 fd ff ff 00 	movl   $0x0,-0x278(%rbp)
    fe0e:	00 00 00 

  /*  */
  VkViewport viewport{};
    fe11:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe15:	0f 29 85 50 fd ff ff 	movaps %xmm0,-0x2b0(%rbp)
    fe1c:	66 0f d6 85 60 fd ff 	movq   %xmm0,-0x2a0(%rbp)
    fe23:	ff 
  viewport.x = 0.0f;
    fe24:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe28:	f3 0f 11 85 50 fd ff 	movss  %xmm0,-0x2b0(%rbp)
    fe2f:	ff 
  viewport.y = 0.0f;
    fe30:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe34:	f3 0f 11 85 54 fd ff 	movss  %xmm0,-0x2ac(%rbp)
    fe3b:	ff 
  viewport.width = static_cast<float>(swapchain.extent.width);
    fe3c:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
    fe43:	8b 40 7c             	mov    0x7c(%rax),%eax
    fe46:	89 c0                	mov    %eax,%eax
    fe48:	48 85 c0             	test   %rax,%rax
    fe4b:	78 0b                	js     fe58 <_ZN9VulkanApp22createGraphicsPipelineEv+0x372>
    fe4d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe51:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
    fe56:	eb 19                	jmp    fe71 <_ZN9VulkanApp22createGraphicsPipelineEv+0x38b>
    fe58:	48 89 c2             	mov    %rax,%rdx
    fe5b:	48 d1 ea             	shr    %rdx
    fe5e:	83 e0 01             	and    $0x1,%eax
    fe61:	48 09 c2             	or     %rax,%rdx
    fe64:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe68:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
    fe6d:	f3 0f 58 c0          	addss  %xmm0,%xmm0
    fe71:	f3 0f 11 85 58 fd ff 	movss  %xmm0,-0x2a8(%rbp)
    fe78:	ff 
  viewport.height = static_cast<float>(swapchain.extent.height);
    fe79:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
    fe80:	8b 80 80 00 00 00    	mov    0x80(%rax),%eax
    fe86:	89 c0                	mov    %eax,%eax
    fe88:	48 85 c0             	test   %rax,%rax
    fe8b:	78 0b                	js     fe98 <_ZN9VulkanApp22createGraphicsPipelineEv+0x3b2>
    fe8d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fe91:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
    fe96:	eb 19                	jmp    feb1 <_ZN9VulkanApp22createGraphicsPipelineEv+0x3cb>
    fe98:	48 89 c2             	mov    %rax,%rdx
    fe9b:	48 d1 ea             	shr    %rdx
    fe9e:	83 e0 01             	and    $0x1,%eax
    fea1:	48 09 c2             	or     %rax,%rdx
    fea4:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fea8:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
    fead:	f3 0f 58 c0          	addss  %xmm0,%xmm0
    feb1:	f3 0f 11 85 5c fd ff 	movss  %xmm0,-0x2a4(%rbp)
    feb8:	ff 
  viewport.minDepth = 0.0f;
    feb9:	66 0f ef c0          	pxor   %xmm0,%xmm0
    febd:	f3 0f 11 85 60 fd ff 	movss  %xmm0,-0x2a0(%rbp)
    fec4:	ff 
  viewport.maxDepth = 1.0f;
    fec5:	f3 0f 10 05 ff 3b 01 	movss  0x13bff(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
    fecc:	00 
    fecd:	f3 0f 11 85 64 fd ff 	movss  %xmm0,-0x29c(%rbp)
    fed4:	ff 

  VkRect2D scissor{};
    fed5:	48 c7 85 40 fd ff ff 	movq   $0x0,-0x2c0(%rbp)
    fedc:	00 00 00 00 
    fee0:	48 c7 85 48 fd ff ff 	movq   $0x0,-0x2b8(%rbp)
    fee7:	00 00 00 00 
  scissor.offset = {0, 0};
    feeb:	c7 85 40 fd ff ff 00 	movl   $0x0,-0x2c0(%rbp)
    fef2:	00 00 00 
    fef5:	c7 85 44 fd ff ff 00 	movl   $0x0,-0x2bc(%rbp)
    fefc:	00 00 00 
  scissor.extent = swapchain.extent;
    feff:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
    ff06:	48 8b 40 7c          	mov    0x7c(%rax),%rax
    ff0a:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)

  VkPipelineViewportStateCreateInfo viewportStateInfo{};
    ff11:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ff15:	0f 29 85 10 fd ff ff 	movaps %xmm0,-0x2f0(%rbp)
    ff1c:	0f 29 85 20 fd ff ff 	movaps %xmm0,-0x2e0(%rbp)
    ff23:	0f 29 85 30 fd ff ff 	movaps %xmm0,-0x2d0(%rbp)
  viewportStateInfo.sType =
    ff2a:	c7 85 10 fd ff ff 16 	movl   $0x16,-0x2f0(%rbp)
    ff31:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
  viewportStateInfo.viewportCount = 1;
    ff34:	c7 85 24 fd ff ff 01 	movl   $0x1,-0x2dc(%rbp)
    ff3b:	00 00 00 
  viewportStateInfo.pViewports = &viewport;
    ff3e:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    ff45:	48 89 85 28 fd ff ff 	mov    %rax,-0x2d8(%rbp)
  viewportStateInfo.scissorCount = 1;
    ff4c:	c7 85 30 fd ff ff 01 	movl   $0x1,-0x2d0(%rbp)
    ff53:	00 00 00 
  viewportStateInfo.pScissors = &scissor;
    ff56:	48 8d 85 40 fd ff ff 	lea    -0x2c0(%rbp),%rax
    ff5d:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)

  /*  */
  VkPipelineRasterizationStateCreateInfo rastStateInfo{};
    ff64:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ff68:	0f 29 85 d0 fc ff ff 	movaps %xmm0,-0x330(%rbp)
    ff6f:	0f 29 85 e0 fc ff ff 	movaps %xmm0,-0x320(%rbp)
    ff76:	0f 29 85 f0 fc ff ff 	movaps %xmm0,-0x310(%rbp)
    ff7d:	0f 29 85 00 fd ff ff 	movaps %xmm0,-0x300(%rbp)
  rastStateInfo.sType =
    ff84:	c7 85 d0 fc ff ff 17 	movl   $0x17,-0x330(%rbp)
    ff8b:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
  rastStateInfo.pNext = nullptr;
    ff8e:	48 c7 85 d8 fc ff ff 	movq   $0x0,-0x328(%rbp)
    ff95:	00 00 00 00 
  rastStateInfo.depthClampEnable = VK_FALSE;
    ff99:	c7 85 e4 fc ff ff 00 	movl   $0x0,-0x31c(%rbp)
    ffa0:	00 00 00 
  rastStateInfo.rasterizerDiscardEnable = VK_FALSE;
    ffa3:	c7 85 e8 fc ff ff 00 	movl   $0x0,-0x318(%rbp)
    ffaa:	00 00 00 
  rastStateInfo.polygonMode = VK_POLYGON_MODE_FILL;
    ffad:	c7 85 ec fc ff ff 00 	movl   $0x0,-0x314(%rbp)
    ffb4:	00 00 00 
  rastStateInfo.lineWidth = 1.0f;
    ffb7:	f3 0f 10 05 0d 3b 01 	movss  0x13b0d(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
    ffbe:	00 
    ffbf:	f3 0f 11 85 08 fd ff 	movss  %xmm0,-0x2f8(%rbp)
    ffc6:	ff 
  rastStateInfo.cullMode = VK_CULL_MODE_BACK_BIT;
    ffc7:	c7 85 f0 fc ff ff 02 	movl   $0x2,-0x310(%rbp)
    ffce:	00 00 00 
  rastStateInfo.frontFace = VK_FRONT_FACE_CLOCKWISE;
    ffd1:	c7 85 f4 fc ff ff 01 	movl   $0x1,-0x30c(%rbp)
    ffd8:	00 00 00 
  rastStateInfo.depthBiasEnable = VK_FALSE;
    ffdb:	c7 85 f8 fc ff ff 00 	movl   $0x0,-0x308(%rbp)
    ffe2:	00 00 00 
  rastStateInfo.depthBiasConstantFactor = 0.0f;
    ffe5:	66 0f ef c0          	pxor   %xmm0,%xmm0
    ffe9:	f3 0f 11 85 fc fc ff 	movss  %xmm0,-0x304(%rbp)
    fff0:	ff 
  rastStateInfo.depthBiasClamp = 0.0f;
    fff1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    fff5:	f3 0f 11 85 00 fd ff 	movss  %xmm0,-0x300(%rbp)
    fffc:	ff 
  rastStateInfo.depthBiasSlopeFactor = 0.0f;
    fffd:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10001:	f3 0f 11 85 04 fd ff 	movss  %xmm0,-0x2fc(%rbp)
   10008:	ff 

  /*  */
  VkPipelineMultisampleStateCreateInfo multisampleStateInfo{};
   10009:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1000d:	0f 29 85 a0 fc ff ff 	movaps %xmm0,-0x360(%rbp)
   10014:	0f 29 85 b0 fc ff ff 	movaps %xmm0,-0x350(%rbp)
   1001b:	0f 29 85 c0 fc ff ff 	movaps %xmm0,-0x340(%rbp)
  multisampleStateInfo.sType =
   10022:	c7 85 a0 fc ff ff 18 	movl   $0x18,-0x360(%rbp)
   10029:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
  multisampleStateInfo.sampleShadingEnable = VK_FALSE;
   1002c:	c7 85 b8 fc ff ff 00 	movl   $0x0,-0x348(%rbp)
   10033:	00 00 00 
  multisampleStateInfo.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;
   10036:	c7 85 b4 fc ff ff 01 	movl   $0x1,-0x34c(%rbp)
   1003d:	00 00 00 
  multisampleStateInfo.minSampleShading = 1.0f;
   10040:	f3 0f 10 05 84 3a 01 	movss  0x13a84(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   10047:	00 
   10048:	f3 0f 11 85 bc fc ff 	movss  %xmm0,-0x344(%rbp)
   1004f:	ff 
  multisampleStateInfo.pSampleMask = nullptr;
   10050:	48 c7 85 c0 fc ff ff 	movq   $0x0,-0x340(%rbp)
   10057:	00 00 00 00 
  multisampleStateInfo.alphaToCoverageEnable = VK_FALSE;
   1005b:	c7 85 c8 fc ff ff 00 	movl   $0x0,-0x338(%rbp)
   10062:	00 00 00 
  multisampleStateInfo.alphaToOneEnable = VK_FALSE;
   10065:	c7 85 cc fc ff ff 00 	movl   $0x0,-0x334(%rbp)
   1006c:	00 00 00 

  /* Depth and stencil testing */

  /* Color blending */
  VkPipelineColorBlendAttachmentState colorBlendAttachment{};
   1006f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10073:	0f 29 85 80 fc ff ff 	movaps %xmm0,-0x380(%rbp)
   1007a:	0f 29 85 90 fc ff ff 	movaps %xmm0,-0x370(%rbp)
  colorBlendAttachment.colorWriteMask =
   10081:	c7 85 9c fc ff ff 0f 	movl   $0xf,-0x364(%rbp)
   10088:	00 00 00 
      VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT |
      VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
  colorBlendAttachment.blendEnable = VK_TRUE;
   1008b:	c7 85 80 fc ff ff 01 	movl   $0x1,-0x380(%rbp)
   10092:	00 00 00 
  colorBlendAttachment.srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA;
   10095:	c7 85 84 fc ff ff 06 	movl   $0x6,-0x37c(%rbp)
   1009c:	00 00 00 
  colorBlendAttachment.dstColorBlendFactor =
   1009f:	c7 85 88 fc ff ff 07 	movl   $0x7,-0x378(%rbp)
   100a6:	00 00 00 
      VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
  colorBlendAttachment.colorBlendOp = VK_BLEND_OP_ADD;
   100a9:	c7 85 8c fc ff ff 00 	movl   $0x0,-0x374(%rbp)
   100b0:	00 00 00 
  colorBlendAttachment.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE;
   100b3:	c7 85 90 fc ff ff 01 	movl   $0x1,-0x370(%rbp)
   100ba:	00 00 00 
  colorBlendAttachment.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;
   100bd:	c7 85 94 fc ff ff 00 	movl   $0x0,-0x36c(%rbp)
   100c4:	00 00 00 
  colorBlendAttachment.alphaBlendOp = VK_BLEND_OP_ADD;
   100c7:	c7 85 98 fc ff ff 00 	movl   $0x0,-0x368(%rbp)
   100ce:	00 00 00 

  VkPipelineColorBlendStateCreateInfo colorBlendState{};
   100d1:	66 0f ef c0          	pxor   %xmm0,%xmm0
   100d5:	0f 29 85 40 fc ff ff 	movaps %xmm0,-0x3c0(%rbp)
   100dc:	0f 29 85 50 fc ff ff 	movaps %xmm0,-0x3b0(%rbp)
   100e3:	0f 29 85 60 fc ff ff 	movaps %xmm0,-0x3a0(%rbp)
   100ea:	66 0f d6 85 70 fc ff 	movq   %xmm0,-0x390(%rbp)
   100f1:	ff 
  colorBlendState.sType =
   100f2:	c7 85 40 fc ff ff 1a 	movl   $0x1a,-0x3c0(%rbp)
   100f9:	00 00 00 
      VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
  colorBlendState.logicOpEnable = VK_FALSE;
   100fc:	c7 85 54 fc ff ff 00 	movl   $0x0,-0x3ac(%rbp)
   10103:	00 00 00 
  colorBlendState.logicOp = VK_LOGIC_OP_COPY;
   10106:	c7 85 58 fc ff ff 03 	movl   $0x3,-0x3a8(%rbp)
   1010d:	00 00 00 
  colorBlendState.attachmentCount = 1;
   10110:	c7 85 5c fc ff ff 01 	movl   $0x1,-0x3a4(%rbp)
   10117:	00 00 00 
  colorBlendState.pAttachments = &colorBlendAttachment;
   1011a:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
   10121:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
  colorBlendState.blendConstants[0] = 0.0f;
   10128:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1012c:	f3 0f 11 85 68 fc ff 	movss  %xmm0,-0x398(%rbp)
   10133:	ff 
  colorBlendState.blendConstants[1] = 0.0f;
   10134:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10138:	f3 0f 11 85 6c fc ff 	movss  %xmm0,-0x394(%rbp)
   1013f:	ff 
  colorBlendState.blendConstants[2] = 0.0f;
   10140:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10144:	f3 0f 11 85 70 fc ff 	movss  %xmm0,-0x390(%rbp)
   1014b:	ff 
  colorBlendState.blendConstants[3] = 0.0f;
   1014c:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10150:	f3 0f 11 85 74 fc ff 	movss  %xmm0,-0x38c(%rbp)
   10157:	ff 
  // dynamicStateInfo.dynamicStateCount =
  //     static_cast<uint32_t>(dynamicStates.size());
  // dynamicStateInfo.pDynamicStates = dynamicStates.data();

  /* Pipeline layout */
  VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
   10158:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1015c:	0f 29 85 10 fc ff ff 	movaps %xmm0,-0x3f0(%rbp)
   10163:	0f 29 85 20 fc ff ff 	movaps %xmm0,-0x3e0(%rbp)
   1016a:	0f 29 85 30 fc ff ff 	movaps %xmm0,-0x3d0(%rbp)
  pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
   10171:	c7 85 10 fc ff ff 1e 	movl   $0x1e,-0x3f0(%rbp)
   10178:	00 00 00 
  pipelineLayoutInfo.setLayoutCount = 1;
   1017b:	c7 85 24 fc ff ff 01 	movl   $0x1,-0x3dc(%rbp)
   10182:	00 00 00 
  pipelineLayoutInfo.pSetLayouts = &descriptorSetLayout;
   10185:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   1018c:	48 05 e8 01 00 00    	add    $0x1e8,%rax
   10192:	48 89 85 28 fc ff ff 	mov    %rax,-0x3d8(%rbp)
  pipelineLayoutInfo.pushConstantRangeCount = 0;
   10199:	c7 85 30 fc ff ff 00 	movl   $0x0,-0x3d0(%rbp)
   101a0:	00 00 00 
  pipelineLayoutInfo.pPushConstantRanges = nullptr;
   101a3:	48 c7 85 38 fc ff ff 	movq   $0x0,-0x3c8(%rbp)
   101aa:	00 00 00 00 
  graphicsPipeline.layout =
      vkh::createPipelineLayout(device, &pipelineLayoutInfo);
   101ae:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   101b5:	48 8b 40 50          	mov    0x50(%rax),%rax
   101b9:	48 8d 8d 10 fc ff ff 	lea    -0x3f0(%rbp),%rcx
   101c0:	ba 00 00 00 00       	mov    $0x0,%edx
   101c5:	48 89 ce             	mov    %rcx,%rsi
   101c8:	48 89 c7             	mov    %rax,%rdi
   101cb:	e8 cf 73 ff ff       	call   759f <_ZN3vkh20createPipelineLayoutEP10VkDevice_TPK26VkPipelineLayoutCreateInfoPK21VkAllocationCallbacks>
  graphicsPipeline.layout =
   101d0:	48 8b 95 78 fa ff ff 	mov    -0x588(%rbp),%rdx
   101d7:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)

  /* Render pass */
  VkAttachmentDescription colorAttachment{};
   101de:	66 0f ef c0          	pxor   %xmm0,%xmm0
   101e2:	0f 29 85 e0 fb ff ff 	movaps %xmm0,-0x420(%rbp)
   101e9:	0f 29 85 f0 fb ff ff 	movaps %xmm0,-0x410(%rbp)
   101f0:	66 0f 7e 85 00 fc ff 	movd   %xmm0,-0x400(%rbp)
   101f7:	ff 
  colorAttachment.format = swapchain.format;
   101f8:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   101ff:	8b 40 78             	mov    0x78(%rax),%eax
   10202:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%rbp)
  colorAttachment.samples = VK_SAMPLE_COUNT_1_BIT;
   10208:	c7 85 e8 fb ff ff 01 	movl   $0x1,-0x418(%rbp)
   1020f:	00 00 00 
  colorAttachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
   10212:	c7 85 ec fb ff ff 01 	movl   $0x1,-0x414(%rbp)
   10219:	00 00 00 
  colorAttachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
   1021c:	c7 85 f0 fb ff ff 00 	movl   $0x0,-0x410(%rbp)
   10223:	00 00 00 
  colorAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
   10226:	c7 85 f4 fb ff ff 02 	movl   $0x2,-0x40c(%rbp)
   1022d:	00 00 00 
  colorAttachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
   10230:	c7 85 f8 fb ff ff 01 	movl   $0x1,-0x408(%rbp)
   10237:	00 00 00 
  colorAttachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
   1023a:	c7 85 fc fb ff ff 00 	movl   $0x0,-0x404(%rbp)
   10241:	00 00 00 
  colorAttachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
   10244:	c7 85 00 fc ff ff ea 	movl   $0x3b9acdea,-0x400(%rbp)
   1024b:	cd 9a 3b 

  VkAttachmentReference colorAttachmentRef{};
   1024e:	48 c7 85 d8 fb ff ff 	movq   $0x0,-0x428(%rbp)
   10255:	00 00 00 00 
  colorAttachmentRef.attachment = 0;
   10259:	c7 85 d8 fb ff ff 00 	movl   $0x0,-0x428(%rbp)
   10260:	00 00 00 
  colorAttachmentRef.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
   10263:	c7 85 dc fb ff ff 02 	movl   $0x2,-0x424(%rbp)
   1026a:	00 00 00 

  VkSubpassDescription subpass{};
   1026d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10271:	0f 29 85 90 fb ff ff 	movaps %xmm0,-0x470(%rbp)
   10278:	0f 29 85 a0 fb ff ff 	movaps %xmm0,-0x460(%rbp)
   1027f:	0f 29 85 b0 fb ff ff 	movaps %xmm0,-0x450(%rbp)
   10286:	0f 29 85 c0 fb ff ff 	movaps %xmm0,-0x440(%rbp)
   1028d:	66 0f d6 85 d0 fb ff 	movq   %xmm0,-0x430(%rbp)
   10294:	ff 
  subpass.pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;
   10295:	c7 85 94 fb ff ff 00 	movl   $0x0,-0x46c(%rbp)
   1029c:	00 00 00 
  subpass.colorAttachmentCount = 1;
   1029f:	c7 85 a8 fb ff ff 01 	movl   $0x1,-0x458(%rbp)
   102a6:	00 00 00 
  subpass.pColorAttachments = &colorAttachmentRef;
   102a9:	48 8d 85 d8 fb ff ff 	lea    -0x428(%rbp),%rax
   102b0:	48 89 85 b0 fb ff ff 	mov    %rax,-0x450(%rbp)

  VkSubpassDependency subPassDep{}; /* Needed when rendering */
   102b7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   102bb:	0f 29 85 70 fb ff ff 	movaps %xmm0,-0x490(%rbp)
   102c2:	0f 11 85 7c fb ff ff 	movups %xmm0,-0x484(%rbp)
  subPassDep.srcSubpass = VK_SUBPASS_EXTERNAL;
   102c9:	c7 85 70 fb ff ff ff 	movl   $0xffffffff,-0x490(%rbp)
   102d0:	ff ff ff 
  subPassDep.dstSubpass = 0;
   102d3:	c7 85 74 fb ff ff 00 	movl   $0x0,-0x48c(%rbp)
   102da:	00 00 00 
  subPassDep.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
   102dd:	c7 85 78 fb ff ff 00 	movl   $0x400,-0x488(%rbp)
   102e4:	04 00 00 
  subPassDep.srcAccessMask = 0;
   102e7:	c7 85 80 fb ff ff 00 	movl   $0x0,-0x480(%rbp)
   102ee:	00 00 00 
  subPassDep.dstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
   102f1:	c7 85 7c fb ff ff 00 	movl   $0x400,-0x484(%rbp)
   102f8:	04 00 00 
  subPassDep.dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
   102fb:	c7 85 84 fb ff ff 00 	movl   $0x100,-0x47c(%rbp)
   10302:	01 00 00 

  VkRenderPassCreateInfo renderPassInfo{};
   10305:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10309:	0f 29 85 30 fb ff ff 	movaps %xmm0,-0x4d0(%rbp)
   10310:	0f 29 85 40 fb ff ff 	movaps %xmm0,-0x4c0(%rbp)
   10317:	0f 29 85 50 fb ff ff 	movaps %xmm0,-0x4b0(%rbp)
   1031e:	0f 29 85 60 fb ff ff 	movaps %xmm0,-0x4a0(%rbp)
  renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
   10325:	c7 85 30 fb ff ff 26 	movl   $0x26,-0x4d0(%rbp)
   1032c:	00 00 00 
  renderPassInfo.pNext = nullptr;
   1032f:	48 c7 85 38 fb ff ff 	movq   $0x0,-0x4c8(%rbp)
   10336:	00 00 00 00 
  renderPassInfo.attachmentCount = 1;
   1033a:	c7 85 44 fb ff ff 01 	movl   $0x1,-0x4bc(%rbp)
   10341:	00 00 00 
  renderPassInfo.pAttachments = &colorAttachment;
   10344:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
   1034b:	48 89 85 48 fb ff ff 	mov    %rax,-0x4b8(%rbp)
  renderPassInfo.subpassCount = 1;
   10352:	c7 85 50 fb ff ff 01 	movl   $0x1,-0x4b0(%rbp)
   10359:	00 00 00 
  renderPassInfo.pSubpasses = &subpass;
   1035c:	48 8d 85 90 fb ff ff 	lea    -0x470(%rbp),%rax
   10363:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
  renderPassInfo.dependencyCount = 1;
   1036a:	c7 85 60 fb ff ff 01 	movl   $0x1,-0x4a0(%rbp)
   10371:	00 00 00 
  renderPassInfo.pDependencies = &subPassDep;
   10374:	48 8d 85 70 fb ff ff 	lea    -0x490(%rbp),%rax
   1037b:	48 89 85 68 fb ff ff 	mov    %rax,-0x498(%rbp)
  graphicsPipeline.renderPass = vkh::createRenderPass(device, &renderPassInfo);
   10382:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   10389:	48 8b 40 50          	mov    0x50(%rax),%rax
   1038d:	48 8d 8d 30 fb ff ff 	lea    -0x4d0(%rbp),%rcx
   10394:	ba 00 00 00 00       	mov    $0x0,%edx
   10399:	48 89 ce             	mov    %rcx,%rsi
   1039c:	48 89 c7             	mov    %rax,%rdi
   1039f:	e8 93 72 ff ff       	call   7637 <_ZN3vkh16createRenderPassEP10VkDevice_TPK22VkRenderPassCreateInfoPK21VkAllocationCallbacks>
   103a4:	48 8b 95 78 fa ff ff 	mov    -0x588(%rbp),%rdx
   103ab:	48 89 82 f0 00 00 00 	mov    %rax,0xf0(%rdx)

  /* Create a graphics pipeline */
  VkGraphicsPipelineCreateInfo pipelineInfo{};
   103b2:	48 8d 95 a0 fa ff ff 	lea    -0x560(%rbp),%rdx
   103b9:	b8 00 00 00 00       	mov    $0x0,%eax
   103be:	b9 12 00 00 00       	mov    $0x12,%ecx
   103c3:	48 89 d7             	mov    %rdx,%rdi
   103c6:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  pipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
   103c9:	c7 85 a0 fa ff ff 1c 	movl   $0x1c,-0x560(%rbp)
   103d0:	00 00 00 
  pipelineInfo.pNext = nullptr;
   103d3:	48 c7 85 a8 fa ff ff 	movq   $0x0,-0x558(%rbp)
   103da:	00 00 00 00 
  pipelineInfo.stageCount = vkh::ShaderModuleWrapper::stageCount;
   103de:	c7 85 b4 fa ff ff 02 	movl   $0x2,-0x54c(%rbp)
   103e5:	00 00 00 
  pipelineInfo.pStages = shaderStages;
   103e8:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
   103ef:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
  pipelineInfo.pVertexInputState = &vertInputInfo;
   103f6:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
   103fd:	48 89 85 c0 fa ff ff 	mov    %rax,-0x540(%rbp)
  pipelineInfo.pInputAssemblyState = &inputAssemblyInfo;
   10404:	48 8d 85 70 fd ff ff 	lea    -0x290(%rbp),%rax
   1040b:	48 89 85 c8 fa ff ff 	mov    %rax,-0x538(%rbp)
  pipelineInfo.pViewportState = &viewportStateInfo;
   10412:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   10419:	48 89 85 d8 fa ff ff 	mov    %rax,-0x528(%rbp)
  pipelineInfo.pRasterizationState = &rastStateInfo;
   10420:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
   10427:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
  pipelineInfo.pMultisampleState = &multisampleStateInfo;
   1042e:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
   10435:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
  pipelineInfo.pDepthStencilState = nullptr;
   1043c:	48 c7 85 f0 fa ff ff 	movq   $0x0,-0x510(%rbp)
   10443:	00 00 00 00 
  pipelineInfo.pColorBlendState = &colorBlendState;
   10447:	48 8d 85 40 fc ff ff 	lea    -0x3c0(%rbp),%rax
   1044e:	48 89 85 f8 fa ff ff 	mov    %rax,-0x508(%rbp)
  pipelineInfo.pDynamicState = nullptr;
   10455:	48 c7 85 00 fb ff ff 	movq   $0x0,-0x500(%rbp)
   1045c:	00 00 00 00 
  pipelineInfo.layout = graphicsPipeline.layout;
   10460:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   10467:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
   1046e:	48 89 85 08 fb ff ff 	mov    %rax,-0x4f8(%rbp)
  pipelineInfo.renderPass = graphicsPipeline.renderPass;
   10475:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   1047c:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
   10483:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
  pipelineInfo.subpass = 0;
   1048a:	c7 85 18 fb ff ff 00 	movl   $0x0,-0x4e8(%rbp)
   10491:	00 00 00 
  pipelineInfo.basePipelineHandle = VK_NULL_HANDLE;
   10494:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
   1049b:	00 00 00 00 
  pipelineInfo.basePipelineIndex = -1;
   1049f:	c7 85 28 fb ff ff ff 	movl   $0xffffffff,-0x4d8(%rbp)
   104a6:	ff ff ff 

  std::vector<VkGraphicsPipelineCreateInfo> pipelineInfoWrapper{pipelineInfo};
   104a9:	48 8b 85 a0 fa ff ff 	mov    -0x560(%rbp),%rax
   104b0:	48 8b 95 a8 fa ff ff 	mov    -0x558(%rbp),%rdx
   104b7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   104be:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
   104c5:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
   104cc:	48 8b 95 b8 fa ff ff 	mov    -0x548(%rbp),%rdx
   104d3:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   104da:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   104e1:	48 8b 85 c0 fa ff ff 	mov    -0x540(%rbp),%rax
   104e8:	48 8b 95 c8 fa ff ff 	mov    -0x538(%rbp),%rdx
   104ef:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   104f6:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
   104fd:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
   10504:	48 8b 95 d8 fa ff ff 	mov    -0x528(%rbp),%rdx
   1050b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   10512:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
   10519:	48 8b 85 e0 fa ff ff 	mov    -0x520(%rbp),%rax
   10520:	48 8b 95 e8 fa ff ff 	mov    -0x518(%rbp),%rdx
   10527:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   1052e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
   10535:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
   1053c:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
   10543:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1054a:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
   10551:	48 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%rax
   10558:	48 8b 95 08 fb ff ff 	mov    -0x4f8(%rbp),%rdx
   1055f:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   10563:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   10567:	48 8b 85 10 fb ff ff 	mov    -0x4f0(%rbp),%rax
   1056e:	48 8b 95 18 fb ff ff 	mov    -0x4e8(%rbp),%rdx
   10575:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   10579:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   1057d:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
   10584:	48 8b 95 28 fb ff ff 	mov    -0x4d8(%rbp),%rdx
   1058b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1058f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   10593:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1059a:	49 89 c4             	mov    %rax,%r12
   1059d:	41 bd 01 00 00 00    	mov    $0x1,%r13d
   105a3:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   105a7:	48 89 c7             	mov    %rax,%rdi
   105aa:	e8 41 4a 00 00       	call   14ff0 <_ZNSaI28VkGraphicsPipelineCreateInfoEC1Ev>
   105af:	48 8d 55 bf          	lea    -0x41(%rbp),%rdx
   105b3:	4c 89 e6             	mov    %r12,%rsi
   105b6:	4c 89 ef             	mov    %r13,%rdi
   105b9:	4c 89 e1             	mov    %r12,%rcx
   105bc:	4c 89 eb             	mov    %r13,%rbx
   105bf:	48 89 df             	mov    %rbx,%rdi
   105c2:	48 8d 85 80 fa ff ff 	lea    -0x580(%rbp),%rax
   105c9:	48 89 d1             	mov    %rdx,%rcx
   105cc:	48 89 fa             	mov    %rdi,%rdx
   105cf:	48 89 c7             	mov    %rax,%rdi
   105d2:	e8 51 4a 00 00       	call   15028 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   105d7:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   105db:	48 89 c7             	mov    %rax,%rdi
   105de:	e8 29 4a 00 00       	call   1500c <_ZNSaI28VkGraphicsPipelineCreateInfoED1Ev>

  graphicsPipeline.self = vkh::createPipelines(device, graphicsPipeline.cache,
   105e3:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   105ea:	48 8b 90 e8 00 00 00 	mov    0xe8(%rax),%rdx
   105f1:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   105f8:	48 8b 70 50          	mov    0x50(%rax),%rsi
   105fc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10600:	48 8d 8d 80 fa ff ff 	lea    -0x580(%rbp),%rcx
   10607:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1060d:	48 89 c7             	mov    %rax,%rdi
   10610:	e8 fa 4a 00 00       	call   1510f <_ZN3vkh15createPipelinesILNS_12PipelineTypeE1EEESt6vectorIP12VkPipeline_TSaIS4_EEP10VkDevice_TP17VkPipelineCache_TRKS2_INSt13tuple_elementIXT_ESt5tupleIJ27VkComputePipelineCreateInfo28VkGraphicsPipelineCreateInfo33VkRayTracingPipelineCreateInfoKHR32VkRayTracingPipelineCreateInfoNVEEE4typeESaISJ_EEPK21VkAllocationCallbacks>
                                               pipelineInfoWrapper)[0];
   10615:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10619:	be 00 00 00 00       	mov    $0x0,%esi
   1061e:	48 89 c7             	mov    %rax,%rdi
   10621:	e8 5a 4c 00 00       	call   15280 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEixEm>
  graphicsPipeline.self = vkh::createPipelines(device, graphicsPipeline.cache,
   10626:	48 8b 10             	mov    (%rax),%rdx
   10629:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   10630:	48 89 90 d8 00 00 00 	mov    %rdx,0xd8(%rax)
   10637:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1063b:	48 89 c7             	mov    %rax,%rdi
   1063e:	e8 f9 4b 00 00       	call   1523c <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>

  vkh::destroyShaderModule(device, shaderModule.vertex);
   10643:	48 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%rcx
   1064a:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   10651:	48 8b 40 50          	mov    0x50(%rax),%rax
   10655:	ba 00 00 00 00       	mov    $0x0,%edx
   1065a:	48 89 ce             	mov    %rcx,%rsi
   1065d:	48 89 c7             	mov    %rax,%rdi
   10660:	e8 d3 7c ff ff       	call   8338 <_ZN3vkh19destroyShaderModuleEP10VkDevice_TP16VkShaderModule_TPK21VkAllocationCallbacks>
  vkh::destroyShaderModule(device, shaderModule.fragment);
   10665:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
   1066c:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
   10673:	48 8b 40 50          	mov    0x50(%rax),%rax
   10677:	ba 00 00 00 00       	mov    $0x0,%edx
   1067c:	48 89 ce             	mov    %rcx,%rsi
   1067f:	48 89 c7             	mov    %rax,%rdi
   10682:	e8 b1 7c ff ff       	call   8338 <_ZN3vkh19destroyShaderModuleEP10VkDevice_TP16VkShaderModule_TPK21VkAllocationCallbacks>
}
   10687:	48 8d 85 80 fa ff ff 	lea    -0x580(%rbp),%rax
   1068e:	48 89 c7             	mov    %rax,%rdi
   10691:	e8 1a 4a 00 00       	call   150b0 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>
   10696:	e9 99 00 00 00       	jmp    10734 <_ZN9VulkanApp22createGraphicsPipelineEv+0xc4e>
  shaderModule.vertex = vkh::createShaderModule(device, "build/shaders/"
   1069b:	48 89 c3             	mov    %rax,%rbx
   1069e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
   106a5:	48 89 c7             	mov    %rax,%rdi
   106a8:	e8 d3 3b ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   106ad:	eb 03                	jmp    106b2 <_ZN9VulkanApp22createGraphicsPipelineEv+0xbcc>
   106af:	48 89 c3             	mov    %rax,%rbx
   106b2:	48 8d 85 ef fe ff ff 	lea    -0x111(%rbp),%rax
   106b9:	48 89 c7             	mov    %rax,%rdi
   106bc:	e8 bf 3e ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
   106c1:	48 89 d8             	mov    %rbx,%rax
   106c4:	48 89 c7             	mov    %rax,%rdi
   106c7:	e8 a4 42 ff ff       	call   4970 <_Unwind_Resume@plt>
  shaderModule.fragment = vkh::createShaderModule(device, "build/shaders/"
   106cc:	48 89 c3             	mov    %rax,%rbx
   106cf:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   106d6:	48 89 c7             	mov    %rax,%rdi
   106d9:	e8 a2 3b ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   106de:	eb 03                	jmp    106e3 <_ZN9VulkanApp22createGraphicsPipelineEv+0xbfd>
   106e0:	48 89 c3             	mov    %rax,%rbx
   106e3:	48 8d 85 1f ff ff ff 	lea    -0xe1(%rbp),%rax
   106ea:	48 89 c7             	mov    %rax,%rdi
   106ed:	e8 8e 3e ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
   106f2:	48 89 d8             	mov    %rbx,%rax
   106f5:	48 89 c7             	mov    %rax,%rdi
   106f8:	e8 73 42 ff ff       	call   4970 <_Unwind_Resume@plt>
  std::vector<VkGraphicsPipelineCreateInfo> pipelineInfoWrapper{pipelineInfo};
   106fd:	48 89 c3             	mov    %rax,%rbx
   10700:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   10704:	48 89 c7             	mov    %rax,%rdi
   10707:	e8 00 49 00 00       	call   1500c <_ZNSaI28VkGraphicsPipelineCreateInfoED1Ev>
   1070c:	48 89 d8             	mov    %rbx,%rax
   1070f:	48 89 c7             	mov    %rax,%rdi
   10712:	e8 59 42 ff ff       	call   4970 <_Unwind_Resume@plt>
}
   10717:	48 89 c3             	mov    %rax,%rbx
   1071a:	48 8d 85 80 fa ff ff 	lea    -0x580(%rbp),%rax
   10721:	48 89 c7             	mov    %rax,%rdi
   10724:	e8 87 49 00 00       	call   150b0 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>
   10729:	48 89 d8             	mov    %rbx,%rax
   1072c:	48 89 c7             	mov    %rax,%rdi
   1072f:	e8 3c 42 ff ff       	call   4970 <_Unwind_Resume@plt>
   10734:	48 81 c4 78 05 00 00 	add    $0x578,%rsp
   1073b:	5b                   	pop    %rbx
   1073c:	41 5c                	pop    %r12
   1073e:	41 5d                	pop    %r13
   10740:	5d                   	pop    %rbp
   10741:	c3                   	ret

0000000000010742 <_ZN9VulkanApp18createFramebuffersEv>:

void VulkanApp::createFramebuffers() {
   10742:	55                   	push   %rbp
   10743:	48 89 e5             	mov    %rsp,%rbp
   10746:	41 55                	push   %r13
   10748:	41 54                	push   %r12
   1074a:	53                   	push   %rbx
   1074b:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
   10752:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  framebuffers.resize(imageViews.size());
   10759:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   10760:	48 8d 98 00 01 00 00 	lea    0x100(%rax),%rbx
   10767:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1076e:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10774:	48 89 c7             	mov    %rax,%rdi
   10777:	e8 24 4b 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   1077c:	48 89 c6             	mov    %rax,%rsi
   1077f:	48 89 df             	mov    %rbx,%rdi
   10782:	e8 3d 4b 00 00       	call   152c4 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE6resizeEm>
  for (size_t i = 0; i < imageViews.size(); ++i) {
   10787:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1078e:	00 
   1078f:	e9 3a 01 00 00       	jmp    108ce <_ZN9VulkanApp18createFramebuffersEv+0x18c>
    std::vector<VkImageView> attachments{imageViews[i]};
   10794:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1079b:	48 8d 90 a8 00 00 00 	lea    0xa8(%rax),%rdx
   107a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   107a6:	48 89 c6             	mov    %rax,%rsi
   107a9:	48 89 d7             	mov    %rdx,%rdi
   107ac:	e8 ed 46 00 00       	call   14e9e <_ZNSt6vectorIP13VkImageView_TSaIS1_EEixEm>
   107b1:	48 8b 00             	mov    (%rax),%rax
   107b4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   107b8:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   107bc:	49 89 c4             	mov    %rax,%r12
   107bf:	41 bd 01 00 00 00    	mov    $0x1,%r13d
   107c5:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
   107c9:	48 89 c7             	mov    %rax,%rdi
   107cc:	e8 79 4b 00 00       	call   1534a <_ZNSaIP13VkImageView_TEC1Ev>
   107d1:	48 8d 55 d7          	lea    -0x29(%rbp),%rdx
   107d5:	4c 89 e6             	mov    %r12,%rsi
   107d8:	4c 89 ef             	mov    %r13,%rdi
   107db:	4c 89 e1             	mov    %r12,%rcx
   107de:	4c 89 eb             	mov    %r13,%rbx
   107e1:	48 89 df             	mov    %rbx,%rdi
   107e4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   107e8:	48 89 d1             	mov    %rdx,%rcx
   107eb:	48 89 fa             	mov    %rdi,%rdx
   107ee:	48 89 c7             	mov    %rax,%rdi
   107f1:	e8 8c 4b 00 00       	call   15382 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   107f6:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
   107fa:	48 89 c7             	mov    %rax,%rdi
   107fd:	e8 64 4b 00 00       	call   15366 <_ZNSaIP13VkImageView_TED1Ev>
    VkFramebufferCreateInfo framebufferInfo{};
   10802:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10806:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
   1080d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
   10811:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
   10815:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
    framebufferInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
   10819:	c7 85 70 ff ff ff 25 	movl   $0x25,-0x90(%rbp)
   10820:	00 00 00 
    framebufferInfo.renderPass = graphicsPipeline.renderPass;
   10823:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1082a:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
   10831:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    framebufferInfo.attachmentCount = static_cast<uint32_t>(attachments.size());
   10835:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   10839:	48 89 c7             	mov    %rax,%rdi
   1083c:	e8 5f 4a 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   10841:	89 45 90             	mov    %eax,-0x70(%rbp)
    framebufferInfo.pAttachments = attachments.data();
   10844:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   10848:	48 89 c7             	mov    %rax,%rdi
   1084b:	e8 fe 4b 00 00       	call   1544e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE4dataEv>
   10850:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    framebufferInfo.width = swapchain.extent.width;
   10854:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1085b:	8b 40 7c             	mov    0x7c(%rax),%eax
   1085e:	89 45 a0             	mov    %eax,-0x60(%rbp)
    framebufferInfo.height = swapchain.extent.height;
   10861:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   10868:	8b 80 80 00 00 00    	mov    0x80(%rax),%eax
   1086e:	89 45 a4             	mov    %eax,-0x5c(%rbp)
    framebufferInfo.layers = 1;
   10871:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
    framebuffers[i] = vkh::createFramebuffer(device, &framebufferInfo);
   10878:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1087f:	48 8b 40 50          	mov    0x50(%rax),%rax
   10883:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
   1088a:	ba 00 00 00 00       	mov    $0x0,%edx
   1088f:	48 89 ce             	mov    %rcx,%rsi
   10892:	48 89 c7             	mov    %rax,%rdi
   10895:	e8 35 6e ff ff       	call   76cf <_ZN3vkh17createFramebufferEP10VkDevice_TPK23VkFramebufferCreateInfoPK21VkAllocationCallbacks>
   1089a:	48 89 c3             	mov    %rax,%rbx
   1089d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   108a4:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
   108ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   108af:	48 89 c6             	mov    %rax,%rsi
   108b2:	48 89 d7             	mov    %rdx,%rdi
   108b5:	e8 b8 4b 00 00       	call   15472 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EEixEm>
   108ba:	48 89 18             	mov    %rbx,(%rax)
  }
   108bd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   108c1:	48 89 c7             	mov    %rax,%rdi
   108c4:	e8 41 4b 00 00       	call   1540a <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
  for (size_t i = 0; i < imageViews.size(); ++i) {
   108c9:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   108ce:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   108d5:	48 05 a8 00 00 00    	add    $0xa8,%rax
   108db:	48 89 c7             	mov    %rax,%rdi
   108de:	e8 bd 49 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   108e3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   108e7:	0f 92 c0             	setb   %al
   108ea:	84 c0                	test   %al,%al
   108ec:	0f 85 a2 fe ff ff    	jne    10794 <_ZN9VulkanApp18createFramebuffersEv+0x52>
}
   108f2:	eb 34                	jmp    10928 <_ZN9VulkanApp18createFramebuffersEv+0x1e6>
    std::vector<VkImageView> attachments{imageViews[i]};
   108f4:	48 89 c3             	mov    %rax,%rbx
   108f7:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
   108fb:	48 89 c7             	mov    %rax,%rdi
   108fe:	e8 63 4a 00 00       	call   15366 <_ZNSaIP13VkImageView_TED1Ev>
   10903:	48 89 d8             	mov    %rbx,%rax
   10906:	48 89 c7             	mov    %rax,%rdi
   10909:	e8 62 40 ff ff       	call   4970 <_Unwind_Resume@plt>
  }
   1090e:	48 89 c3             	mov    %rax,%rbx
   10911:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   10915:	48 89 c7             	mov    %rax,%rdi
   10918:	e8 ed 4a 00 00       	call   1540a <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
   1091d:	48 89 d8             	mov    %rbx,%rax
   10920:	48 89 c7             	mov    %rax,%rdi
   10923:	e8 48 40 ff ff       	call   4970 <_Unwind_Resume@plt>
}
   10928:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   1092f:	5b                   	pop    %rbx
   10930:	41 5c                	pop    %r12
   10932:	41 5d                	pop    %r13
   10934:	5d                   	pop    %rbp
   10935:	c3                   	ret

0000000000010936 <_ZN9VulkanApp17recreateSwapchainEv>:

void VulkanApp::recreateSwapchain() {
   10936:	55                   	push   %rbp
   10937:	48 89 e5             	mov    %rsp,%rbp
   1093a:	48 83 ec 20          	sub    $0x20,%rsp
   1093e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  /* Handle minimization */
  int width = 0, heigth = 0;
   10942:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   10949:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  glfwGetFramebufferSize(window, &width, &heigth);
   10950:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10954:	48 8b 00             	mov    (%rax),%rax
   10957:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   1095b:	48 8d 4d fc          	lea    -0x4(%rbp),%rcx
   1095f:	48 89 ce             	mov    %rcx,%rsi
   10962:	48 89 c7             	mov    %rax,%rdi
   10965:	e8 16 3f ff ff       	call   4880 <glfwGetFramebufferSize@plt>
  while (width == 0 || heigth == 0) {
   1096a:	eb 1f                	jmp    1098b <_ZN9VulkanApp17recreateSwapchainEv+0x55>
    glfwGetFramebufferSize(window, &width, &heigth);
   1096c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10970:	48 8b 00             	mov    (%rax),%rax
   10973:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   10977:	48 8d 4d fc          	lea    -0x4(%rbp),%rcx
   1097b:	48 89 ce             	mov    %rcx,%rsi
   1097e:	48 89 c7             	mov    %rax,%rdi
   10981:	e8 fa 3e ff ff       	call   4880 <glfwGetFramebufferSize@plt>
    glfwWaitEvents();
   10986:	e8 c5 38 ff ff       	call   4250 <glfwWaitEvents@plt>
  while (width == 0 || heigth == 0) {
   1098b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1098e:	85 c0                	test   %eax,%eax
   10990:	74 da                	je     1096c <_ZN9VulkanApp17recreateSwapchainEv+0x36>
   10992:	8b 45 f8             	mov    -0x8(%rbp),%eax
   10995:	85 c0                	test   %eax,%eax
   10997:	74 d3                	je     1096c <_ZN9VulkanApp17recreateSwapchainEv+0x36>
  }

  /* Recreate the swapchain */
  vkDeviceWaitIdle(device);
   10999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1099d:	48 8b 40 50          	mov    0x50(%rax),%rax
   109a1:	48 89 c7             	mov    %rax,%rdi
   109a4:	e8 27 37 ff ff       	call   40d0 <vkDeviceWaitIdle@plt>
  cleanupSwapchain();
   109a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109ad:	48 89 c7             	mov    %rax,%rdi
   109b0:	e8 3f 00 00 00       	call   109f4 <_ZN9VulkanApp16cleanupSwapchainEv>
  createSwapchain();
   109b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109b9:	48 89 c7             	mov    %rax,%rdi
   109bc:	e8 33 ef ff ff       	call   f8f4 <_ZN9VulkanApp15createSwapchainEv>
  createImageViews();
   109c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109c5:	48 89 c7             	mov    %rax,%rdi
   109c8:	e8 6d ef ff ff       	call   f93a <_ZN9VulkanApp16createImageViewsEv>
  createGraphicsPipeline();
   109cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109d1:	48 89 c7             	mov    %rax,%rdi
   109d4:	e8 0d f1 ff ff       	call   fae6 <_ZN9VulkanApp22createGraphicsPipelineEv>
  createFramebuffers();
   109d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109dd:	48 89 c7             	mov    %rax,%rdi
   109e0:	e8 5d fd ff ff       	call   10742 <_ZN9VulkanApp18createFramebuffersEv>
  createUniformBuffers();
   109e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   109e9:	48 89 c7             	mov    %rax,%rdi
   109ec:	e8 75 0c 00 00       	call   11666 <_ZN9VulkanApp20createUniformBuffersEv>
}
   109f1:	90                   	nop
   109f2:	c9                   	leave
   109f3:	c3                   	ret

00000000000109f4 <_ZN9VulkanApp16cleanupSwapchainEv>:

void VulkanApp::cleanupSwapchain() {
   109f4:	55                   	push   %rbp
   109f5:	48 89 e5             	mov    %rsp,%rbp
   109f8:	48 83 ec 60          	sub    $0x60,%rsp
   109fc:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  for (auto &framebuffer : framebuffers) {
   10a00:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10a04:	48 05 00 01 00 00    	add    $0x100,%rax
   10a0a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   10a0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10a12:	48 89 c7             	mov    %rax,%rdi
   10a15:	e8 78 4a 00 00       	call   15492 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE5beginEv>
   10a1a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   10a1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10a22:	48 89 c7             	mov    %rax,%rdi
   10a25:	e8 8e 4a 00 00       	call   154b8 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE3endEv>
   10a2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   10a2e:	eb 3b                	jmp    10a6b <_ZN9VulkanApp16cleanupSwapchainEv+0x77>
   10a30:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   10a34:	48 89 c7             	mov    %rax,%rdi
   10a37:	e8 00 4b 00 00       	call   1553c <_ZNK9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEdeEv>
   10a3c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    vkh::destroyFramebuffer(device, framebuffer);
   10a40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10a44:	48 8b 08             	mov    (%rax),%rcx
   10a47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10a4b:	48 8b 40 50          	mov    0x50(%rax),%rax
   10a4f:	ba 00 00 00 00       	mov    $0x0,%edx
   10a54:	48 89 ce             	mov    %rcx,%rsi
   10a57:	48 89 c7             	mov    %rax,%rdi
   10a5a:	e8 20 7a ff ff       	call   847f <_ZN3vkh18destroyFramebufferEP10VkDevice_TP15VkFramebuffer_TPK21VkAllocationCallbacks>
  for (auto &framebuffer : framebuffers) {
   10a5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   10a63:	48 89 c7             	mov    %rax,%rdi
   10a66:	e8 b1 4a 00 00       	call   1551c <_ZN9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEppEv>
   10a6b:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
   10a6f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   10a73:	48 89 d6             	mov    %rdx,%rsi
   10a76:	48 89 c7             	mov    %rax,%rdi
   10a79:	e8 63 4a 00 00       	call   154e1 <_ZN9__gnu_cxxneIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   10a7e:	84 c0                	test   %al,%al
   10a80:	75 ae                	jne    10a30 <_ZN9VulkanApp16cleanupSwapchainEv+0x3c>
  }
  vkh::destroyPipeline(device, graphicsPipeline.self);
   10a82:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10a86:	48 8b 88 d8 00 00 00 	mov    0xd8(%rax),%rcx
   10a8d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10a91:	48 8b 40 50          	mov    0x50(%rax),%rax
   10a95:	ba 00 00 00 00       	mov    $0x0,%edx
   10a9a:	48 89 ce             	mov    %rcx,%rsi
   10a9d:	48 89 c7             	mov    %rax,%rdi
   10aa0:	e8 1d 79 ff ff       	call   83c2 <_ZN3vkh15destroyPipelineEP10VkDevice_TP12VkPipeline_TPK21VkAllocationCallbacks>
  vkh::destroyPipelineLayout(device, graphicsPipeline.layout);
   10aa5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10aa9:	48 8b 88 e0 00 00 00 	mov    0xe0(%rax),%rcx
   10ab0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10ab4:	48 8b 40 50          	mov    0x50(%rax),%rax
   10ab8:	ba 00 00 00 00       	mov    $0x0,%edx
   10abd:	48 89 ce             	mov    %rcx,%rsi
   10ac0:	48 89 c7             	mov    %rax,%rdi
   10ac3:	e8 9e 78 ff ff       	call   8366 <_ZN3vkh21destroyPipelineLayoutEP10VkDevice_TP18VkPipelineLayout_TPK21VkAllocationCallbacks>
  vkh::destroyRenderPass(device, graphicsPipeline.renderPass);
   10ac8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10acc:	48 8b 88 f0 00 00 00 	mov    0xf0(%rax),%rcx
   10ad3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10ad7:	48 8b 40 50          	mov    0x50(%rax),%rax
   10adb:	ba 00 00 00 00       	mov    $0x0,%edx
   10ae0:	48 89 ce             	mov    %rcx,%rsi
   10ae3:	48 89 c7             	mov    %rax,%rdi
   10ae6:	e8 a9 78 ff ff       	call   8394 <_ZN3vkh17destroyRenderPassEP10VkDevice_TP14VkRenderPass_TPK21VkAllocationCallbacks>
  for (auto &imageView : imageViews) {
   10aeb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10aef:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10af5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10af9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10afd:	48 89 c7             	mov    %rax,%rdi
   10b00:	e8 49 4a 00 00       	call   1554e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE5beginEv>
   10b05:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   10b09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10b0d:	48 89 c7             	mov    %rax,%rdi
   10b10:	e8 5f 4a 00 00       	call   15574 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE3endEv>
   10b15:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   10b19:	eb 3b                	jmp    10b56 <_ZN9VulkanApp16cleanupSwapchainEv+0x162>
   10b1b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10b1f:	48 89 c7             	mov    %rax,%rdi
   10b22:	e8 d1 4a 00 00       	call   155f8 <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEdeEv>
   10b27:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    vkh::destroyImageView(device, imageView);
   10b2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10b2f:	48 8b 08             	mov    (%rax),%rcx
   10b32:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10b36:	48 8b 40 50          	mov    0x50(%rax),%rax
   10b3a:	ba 00 00 00 00       	mov    $0x0,%edx
   10b3f:	48 89 ce             	mov    %rcx,%rsi
   10b42:	48 89 c7             	mov    %rax,%rdi
   10b45:	e8 c0 77 ff ff       	call   830a <_ZN3vkh16destroyImageViewEP10VkDevice_TP13VkImageView_TPK21VkAllocationCallbacks>
  for (auto &imageView : imageViews) {
   10b4a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10b4e:	48 89 c7             	mov    %rax,%rdi
   10b51:	e8 82 4a 00 00       	call   155d8 <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEppEv>
   10b56:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   10b5a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   10b5e:	48 89 d6             	mov    %rdx,%rsi
   10b61:	48 89 c7             	mov    %rax,%rdi
   10b64:	e8 34 4a 00 00       	call   1559d <_ZN9__gnu_cxxneIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   10b69:	84 c0                	test   %al,%al
   10b6b:	75 ae                	jne    10b1b <_ZN9VulkanApp16cleanupSwapchainEv+0x127>
  }
  vkh::destroySwapchain(device, swapchain.self);
   10b6d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10b71:	48 8b 48 70          	mov    0x70(%rax),%rcx
   10b75:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10b79:	48 8b 40 50          	mov    0x50(%rax),%rax
   10b7d:	ba 00 00 00 00       	mov    $0x0,%edx
   10b82:	48 89 ce             	mov    %rcx,%rsi
   10b85:	48 89 c7             	mov    %rax,%rdi
   10b88:	e8 4f 77 ff ff       	call   82dc <_ZN3vkh16destroySwapchainEP10VkDevice_TP16VkSwapchainKHR_TPK21VkAllocationCallbacks>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   10b8d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   10b94:	00 
   10b95:	eb 6f                	jmp    10c06 <_ZN9VulkanApp16cleanupSwapchainEv+0x212>
    vkDestroyBuffer(device, uniformBuffers[i], nullptr);
   10b97:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10b9b:	48 8d 90 b8 01 00 00 	lea    0x1b8(%rax),%rdx
   10ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ba6:	48 89 c6             	mov    %rax,%rsi
   10ba9:	48 89 d7             	mov    %rdx,%rdi
   10bac:	e8 59 4a 00 00       	call   1560a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EEixEm>
   10bb1:	48 8b 08             	mov    (%rax),%rcx
   10bb4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10bb8:	48 8b 40 50          	mov    0x50(%rax),%rax
   10bbc:	ba 00 00 00 00       	mov    $0x0,%edx
   10bc1:	48 89 ce             	mov    %rcx,%rsi
   10bc4:	48 89 c7             	mov    %rax,%rdi
   10bc7:	e8 14 36 ff ff       	call   41e0 <vkDestroyBuffer@plt>
    vkFreeMemory(device, uniformBuffersMemory[i], nullptr);
   10bcc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10bd0:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
   10bd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bdb:	48 89 c6             	mov    %rax,%rsi
   10bde:	48 89 d7             	mov    %rdx,%rdi
   10be1:	e8 44 4a 00 00       	call   1562a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEixEm>
   10be6:	48 8b 08             	mov    (%rax),%rcx
   10be9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10bed:	48 8b 40 50          	mov    0x50(%rax),%rax
   10bf1:	ba 00 00 00 00       	mov    $0x0,%edx
   10bf6:	48 89 ce             	mov    %rcx,%rsi
   10bf9:	48 89 c7             	mov    %rax,%rdi
   10bfc:	e8 4f 38 ff ff       	call   4450 <vkFreeMemory@plt>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   10c01:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   10c06:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   10c0a:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   10c11:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   10c15:	72 80                	jb     10b97 <_ZN9VulkanApp16cleanupSwapchainEv+0x1a3>
  }
}
   10c17:	90                   	nop
   10c18:	90                   	nop
   10c19:	c9                   	leave
   10c1a:	c3                   	ret
   10c1b:	90                   	nop

0000000000010c1c <_ZN9VulkanApp25framebufferResizeCallbackEP10GLFWwindowii>:

void VulkanApp::framebufferResizeCallback(GLFWwindow *windowInstance,
                                          [[maybe_unused]] int width,
                                          [[maybe_unused]] int height) {
   10c1c:	55                   	push   %rbp
   10c1d:	48 89 e5             	mov    %rsp,%rbp
   10c20:	48 83 ec 20          	sub    $0x20,%rsp
   10c24:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   10c28:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   10c2b:	89 55 e0             	mov    %edx,-0x20(%rbp)
  auto app =
      reinterpret_cast<VulkanApp *>(glfwGetWindowUserPointer(windowInstance));
   10c2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10c32:	48 89 c7             	mov    %rax,%rdi
   10c35:	e8 d6 3a ff ff       	call   4710 <glfwGetWindowUserPointer@plt>
   10c3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  app->framebufferResized = true;
   10c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c42:	c6 80 18 01 00 00 01 	movb   $0x1,0x118(%rax)
}
   10c49:	90                   	nop
   10c4a:	c9                   	leave
   10c4b:	c3                   	ret

0000000000010c4c <_ZN9VulkanApp17createCommandPoolEv>:

void VulkanApp::createCommandPool() {
   10c4c:	55                   	push   %rbp
   10c4d:	48 89 e5             	mov    %rsp,%rbp
   10c50:	48 83 ec 30          	sub    $0x30,%rsp
   10c54:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  VkCommandPoolCreateInfo cmdPoolInfo{};
   10c58:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10c5c:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
   10c60:	66 0f d6 45 f0       	movq   %xmm0,-0x10(%rbp)
  cmdPoolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
   10c65:	c7 45 e0 27 00 00 00 	movl   $0x27,-0x20(%rbp)
  cmdPoolInfo.pNext = nullptr;
   10c6c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   10c73:	00 
  pool to be individually reset to the initial state; either by calling
  vkResetCommandBuffer, or via the implicit reset when calling
  vkBeginCommandBuffer. If this flag is not set on a pool, then
  vkResetCommandBuffer must not be called for any command buffer allocated
  from that pool. */
  cmdPoolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
   10c74:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%rbp)
  /* All command buffers allocated from this command pool must be
  submitted on queues from the same queue family. */
  cmdPoolInfo.queueFamilyIndex = queueFamilyIndex;
   10c7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c7f:	8b 40 68             	mov    0x68(%rax),%eax
   10c82:	89 45 f4             	mov    %eax,-0xc(%rbp)

  commandPool = vkh::createCommandPool(device, &cmdPoolInfo);
   10c85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c89:	48 8b 40 50          	mov    0x50(%rax),%rax
   10c8d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   10c91:	ba 00 00 00 00       	mov    $0x0,%edx
   10c96:	48 89 ce             	mov    %rcx,%rsi
   10c99:	48 89 c7             	mov    %rax,%rdi
   10c9c:	e8 c6 6a ff ff       	call   7767 <_ZN3vkh17createCommandPoolEP10VkDevice_TPK23VkCommandPoolCreateInfoPK21VkAllocationCallbacks>
   10ca1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10ca5:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)
}
   10cac:	90                   	nop
   10cad:	c9                   	leave
   10cae:	c3                   	ret
   10caf:	90                   	nop

0000000000010cb0 <_ZN9VulkanApp20createCommandBuffersEv>:

void VulkanApp::createCommandBuffers() {
   10cb0:	55                   	push   %rbp
   10cb1:	48 89 e5             	mov    %rsp,%rbp
   10cb4:	48 83 ec 50          	sub    $0x50,%rsp
   10cb8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  VkCommandBufferAllocateInfo cmdBufferAllocInfo{};
   10cbc:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10cc0:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
   10cc4:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
  cmdBufferAllocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   10cc8:	c7 45 c0 28 00 00 00 	movl   $0x28,-0x40(%rbp)
  cmdBufferAllocInfo.commandPool = commandPool;
   10ccf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10cd3:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
   10cda:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  cmdBufferAllocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
   10cde:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  cmdBufferAllocInfo.commandBufferCount =
      static_cast<uint32_t>(maxFramesInFlight);
   10ce5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10ce9:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
  cmdBufferAllocInfo.commandBufferCount =
   10cf0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  commandBuffers = vkh::allocateCommandBuffers(device, &cmdBufferAllocInfo);
   10cf3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10cf7:	48 8b 48 50          	mov    0x50(%rax),%rcx
   10cfb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10cff:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
   10d03:	48 89 ce             	mov    %rcx,%rsi
   10d06:	48 89 c7             	mov    %rax,%rdi
   10d09:	e8 38 58 ff ff       	call   6546 <_ZN3vkh22allocateCommandBuffersEP10VkDevice_TPK27VkCommandBufferAllocateInfo>
   10d0e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10d12:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
   10d19:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10d1d:	48 89 c6             	mov    %rax,%rsi
   10d20:	48 89 d7             	mov    %rdx,%rdi
   10d23:	e8 22 49 00 00       	call   1564a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEaSEOS3_>
   10d28:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   10d2c:	48 89 c7             	mov    %rax,%rdi
   10d2f:	e8 08 5b ff ff       	call   683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
}
   10d34:	90                   	nop
   10d35:	c9                   	leave
   10d36:	c3                   	ret
   10d37:	90                   	nop

0000000000010d38 <_ZN9VulkanApp19recordCommandBufferEP17VkCommandBuffer_Tj>:

void VulkanApp::recordCommandBuffer(VkCommandBuffer cmdBuffer,
                                    uint32_t imageIndex) {
   10d38:	55                   	push   %rbp
   10d39:	48 89 e5             	mov    %rsp,%rbp
   10d3c:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   10d43:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
   10d4a:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
   10d51:	89 95 6c ff ff ff    	mov    %edx,-0x94(%rbp)
  /* 1. Begin recording a command buffer */
  VkCommandBufferBeginInfo cmdBufferBeginInfo{};
   10d57:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10d5b:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
   10d5f:	0f 29 45 f0          	movaps %xmm0,-0x10(%rbp)
  cmdBufferBeginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   10d63:	c7 45 e0 2a 00 00 00 	movl   $0x2a,-0x20(%rbp)
  cmdBufferBeginInfo.flags = 0;
   10d6a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  cmdBufferBeginInfo.pInheritanceInfo = nullptr;
   10d71:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   10d78:	00 
  vkh::beginCommandBuffer(cmdBuffer, &cmdBufferBeginInfo);
   10d79:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   10d7d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10d84:	48 89 d6             	mov    %rdx,%rsi
   10d87:	48 89 c7             	mov    %rax,%rdi
   10d8a:	e8 ba 58 ff ff       	call   6649 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo>

  /* 2. Start a render pass */
  VkClearValue clearColor = {{{0.0f, 0.0f, 0.0f, 1.0f}}};
   10d8f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10d93:	f3 0f 11 45 d0       	movss  %xmm0,-0x30(%rbp)
   10d98:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10d9c:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
   10da1:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10da5:	f3 0f 11 45 d8       	movss  %xmm0,-0x28(%rbp)
   10daa:	f3 0f 10 05 1a 2d 01 	movss  0x12d1a(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   10db1:	00 
   10db2:	f3 0f 11 45 dc       	movss  %xmm0,-0x24(%rbp)

  VkRenderPassBeginInfo renderPassBeginInfo{};
   10db7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   10dbb:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
   10dbf:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
   10dc3:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   10dc7:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
  renderPassBeginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
   10dcb:	c7 45 90 2b 00 00 00 	movl   $0x2b,-0x70(%rbp)
  renderPassBeginInfo.renderPass = graphicsPipeline.renderPass;
   10dd2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10dd9:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
   10de0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  renderPassBeginInfo.framebuffer = framebuffers[imageIndex];
   10de4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10deb:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
   10df2:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
   10df8:	48 89 c6             	mov    %rax,%rsi
   10dfb:	48 89 d7             	mov    %rdx,%rdi
   10dfe:	e8 6f 46 00 00       	call   15472 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EEixEm>
   10e03:	48 8b 00             	mov    (%rax),%rax
   10e06:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  renderPassBeginInfo.renderArea.offset = {0, 0};
   10e0a:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   10e11:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  renderPassBeginInfo.renderArea.extent = swapchain.extent;
   10e18:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10e1f:	48 8b 40 7c          	mov    0x7c(%rax),%rax
   10e23:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  renderPassBeginInfo.clearValueCount = 1;
   10e27:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
  renderPassBeginInfo.pClearValues = &clearColor;
   10e2e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   10e32:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

  vkCmdBeginRenderPass(cmdBuffer, &renderPassBeginInfo,
   10e36:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   10e3a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10e41:	ba 00 00 00 00       	mov    $0x0,%edx
   10e46:	48 89 ce             	mov    %rcx,%rsi
   10e49:	48 89 c7             	mov    %rax,%rdi
   10e4c:	e8 0f 39 ff ff       	call   4760 <vkCmdBeginRenderPass@plt>
                       VK_SUBPASS_CONTENTS_INLINE);

  /* 3. Drawing commands */
  vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS,
   10e51:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10e58:	48 8b 90 d8 00 00 00 	mov    0xd8(%rax),%rdx
   10e5f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10e66:	be 00 00 00 00       	mov    $0x0,%esi
   10e6b:	48 89 c7             	mov    %rax,%rdi
   10e6e:	e8 9d 35 ff ff       	call   4410 <vkCmdBindPipeline@plt>
                    graphicsPipeline.self);

  /* Bind the buffers */
  VkBuffer vertexBuffers[] = {vertexBuffer};
   10e73:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10e7a:	48 8b 80 98 01 00 00 	mov    0x198(%rax),%rax
   10e81:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  VkDeviceSize offsets[] = {0};
   10e85:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   10e8c:	00 
  vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);
   10e8d:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
   10e91:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
   10e95:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10e9c:	49 89 c8             	mov    %rcx,%r8
   10e9f:	48 89 d1             	mov    %rdx,%rcx
   10ea2:	ba 01 00 00 00       	mov    $0x1,%edx
   10ea7:	be 00 00 00 00       	mov    $0x0,%esi
   10eac:	48 89 c7             	mov    %rax,%rdi
   10eaf:	e8 dc 38 ff ff       	call   4790 <vkCmdBindVertexBuffers@plt>

  /* Bind if using index buffers */
  vkCmdBindIndexBuffer(cmdBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT16);
   10eb4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   10ebb:	48 8b b0 a8 01 00 00 	mov    0x1a8(%rax),%rsi
   10ec2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10ec9:	b9 00 00 00 00       	mov    $0x0,%ecx
   10ece:	ba 00 00 00 00       	mov    $0x0,%edx
   10ed3:	48 89 c7             	mov    %rax,%rdi
   10ed6:	e8 a5 38 ff ff       	call   4780 <vkCmdBindIndexBuffer@plt>
  static const uint32_t instanceCount = 1;
  static const uint32_t firstIndex = 0;
  static const uint32_t vertexOffset = 0;
  static const uint32_t firstInstance = 0;
  vkCmdDrawIndexed(cmdBuffer,
                   static_cast<uint32_t>(shader::triangle_indices.size()),
   10edb:	48 8d 05 5e 47 02 00 	lea    0x2475e(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
   10ee2:	48 89 c7             	mov    %rax,%rdi
   10ee5:	e8 98 47 00 00       	call   15682 <_ZNKSt6vectorItSaItEE4sizeEv>
  vkCmdDrawIndexed(cmdBuffer,
   10eea:	89 c6                	mov    %eax,%esi
   10eec:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10ef3:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   10ef9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   10eff:	b9 00 00 00 00       	mov    $0x0,%ecx
   10f04:	ba 01 00 00 00       	mov    $0x1,%edx
   10f09:	48 89 c7             	mov    %rax,%rdi
   10f0c:	e8 4f 32 ff ff       	call   4160 <vkCmdDrawIndexed@plt>
                   instanceCount, firstIndex, vertexOffset, firstInstance);

  /* 4. End recording the command buffer */
  vkCmdEndRenderPass(cmdBuffer);
   10f11:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10f18:	48 89 c7             	mov    %rax,%rdi
   10f1b:	e8 40 31 ff ff       	call   4060 <vkCmdEndRenderPass@plt>
  vkh::endCommandBuffer(cmdBuffer);
   10f20:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   10f27:	48 89 c7             	mov    %rax,%rdi
   10f2a:	e8 a4 57 ff ff       	call   66d3 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T>
}
   10f2f:	90                   	nop
   10f30:	c9                   	leave
   10f31:	c3                   	ret

0000000000010f32 <_ZN9VulkanApp14findMemoryTypeEjj>:

uint32_t VulkanApp::findMemoryType(uint32_t typeFilter,
                                   VkMemoryPropertyFlags propFlags) {
   10f32:	55                   	push   %rbp
   10f33:	48 89 e5             	mov    %rsp,%rbp
   10f36:	41 54                	push   %r12
   10f38:	53                   	push   %rbx
   10f39:	48 81 ec 20 02 00 00 	sub    $0x220,%rsp
   10f40:	48 89 bd d8 fd ff ff 	mov    %rdi,-0x228(%rbp)
   10f47:	89 b5 d4 fd ff ff    	mov    %esi,-0x22c(%rbp)
   10f4d:	89 95 d0 fd ff ff    	mov    %edx,-0x230(%rbp)
  VkPhysicalDeviceMemoryProperties memoryProperties;
  vkGetPhysicalDeviceMemoryProperties(physicalDevice, &memoryProperties);
   10f53:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
   10f5a:	48 8b 40 58          	mov    0x58(%rax),%rax
   10f5e:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
   10f65:	48 89 d6             	mov    %rdx,%rsi
   10f68:	48 89 c7             	mov    %rax,%rdi
   10f6b:	e8 00 39 ff ff       	call   4870 <vkGetPhysicalDeviceMemoryProperties@plt>
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   10f70:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   10f77:	eb 39                	jmp    10fb2 <_ZN9VulkanApp14findMemoryTypeEjj+0x80>
    if (typeFilter & (1 << i) &&
   10f79:	8b 45 ec             	mov    -0x14(%rbp),%eax
   10f7c:	ba 01 00 00 00       	mov    $0x1,%edx
   10f81:	89 c1                	mov    %eax,%ecx
   10f83:	d3 e2                	shl    %cl,%edx
   10f85:	89 d0                	mov    %edx,%eax
   10f87:	23 85 d4 fd ff ff    	and    -0x22c(%rbp),%eax
   10f8d:	85 c0                	test   %eax,%eax
   10f8f:	74 1d                	je     10fae <_ZN9VulkanApp14findMemoryTypeEjj+0x7c>
        (memoryProperties.memoryTypes[i].propertyFlags & propFlags) ==
   10f91:	8b 45 ec             	mov    -0x14(%rbp),%eax
   10f94:	8b 84 c5 e4 fd ff ff 	mov    -0x21c(%rbp,%rax,8),%eax
   10f9b:	23 85 d0 fd ff ff    	and    -0x230(%rbp),%eax
    if (typeFilter & (1 << i) &&
   10fa1:	39 85 d0 fd ff ff    	cmp    %eax,-0x230(%rbp)
   10fa7:	75 05                	jne    10fae <_ZN9VulkanApp14findMemoryTypeEjj+0x7c>
            propFlags) {
      return i;
   10fa9:	8b 45 ec             	mov    -0x14(%rbp),%eax
   10fac:	eb 60                	jmp    1100e <_ZN9VulkanApp14findMemoryTypeEjj+0xdc>
  for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; ++i) {
   10fae:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
   10fb2:	8b 85 e0 fd ff ff    	mov    -0x220(%rbp),%eax
   10fb8:	39 45 ec             	cmp    %eax,-0x14(%rbp)
   10fbb:	72 bc                	jb     10f79 <_ZN9VulkanApp14findMemoryTypeEjj+0x47>
    }
  }
  throw std::runtime_error("Failed to find suitable memory type.");
   10fbd:	bf 10 00 00 00       	mov    $0x10,%edi
   10fc2:	e8 09 32 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   10fc7:	48 89 c3             	mov    %rax,%rbx
   10fca:	48 8d 05 7f 22 01 00 	lea    0x1227f(%rip),%rax        # 23250 <_ZZN9VulkanApp19recordCommandBufferEP17VkCommandBuffer_TjE13firstInstance+0x4>
   10fd1:	48 89 c6             	mov    %rax,%rsi
   10fd4:	48 89 df             	mov    %rbx,%rdi
   10fd7:	e8 64 31 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   10fdc:	48 8b 05 d5 3f 02 00 	mov    0x23fd5(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   10fe3:	48 89 c2             	mov    %rax,%rdx
   10fe6:	48 8d 05 53 3d 02 00 	lea    0x23d53(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   10fed:	48 89 c6             	mov    %rax,%rsi
   10ff0:	48 89 df             	mov    %rbx,%rdi
   10ff3:	e8 08 39 ff ff       	call   4900 <__cxa_throw@plt>
   10ff8:	49 89 c4             	mov    %rax,%r12
   10ffb:	48 89 df             	mov    %rbx,%rdi
   10ffe:	e8 fd 32 ff ff       	call   4300 <__cxa_free_exception@plt>
   11003:	4c 89 e0             	mov    %r12,%rax
   11006:	48 89 c7             	mov    %rax,%rdi
   11009:	e8 62 39 ff ff       	call   4970 <_Unwind_Resume@plt>
}
   1100e:	48 81 c4 20 02 00 00 	add    $0x220,%rsp
   11015:	5b                   	pop    %rbx
   11016:	41 5c                	pop    %r12
   11018:	5d                   	pop    %rbp
   11019:	c3                   	ret

000000000001101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>:

void VulkanApp::createBuffer(VkDeviceSize size, VkBufferUsageFlags usage,
                             VkMemoryPropertyFlags propertyFlags,
                             VkBuffer &buffer, VkDeviceMemory &bufferMemory) {
   1101a:	55                   	push   %rbp
   1101b:	48 89 e5             	mov    %rsp,%rbp
   1101e:	41 54                	push   %r12
   11020:	53                   	push   %rbx
   11021:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   11028:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
   1102f:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
   11036:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%rbp)
   1103c:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%rbp)
   11042:	4c 89 85 50 ff ff ff 	mov    %r8,-0xb0(%rbp)
   11049:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
  [[maybe_unused]] static constexpr uint32_t vertexBufferCount = 1;
  VkBufferCreateInfo bufferInfo{};
   11050:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11054:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   11058:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
   1105c:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
   11060:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
  bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
   11065:	c7 45 b0 0c 00 00 00 	movl   $0xc,-0x50(%rbp)
  bufferInfo.size = size;
   1106c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
   11073:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  bufferInfo.usage = usage;
   11077:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   1107d:	89 45 d0             	mov    %eax,-0x30(%rbp)
  bufferInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
   11080:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)

  if (vkCreateBuffer(device, &bufferInfo, nullptr, &buffer) != VK_SUCCESS) {
   11087:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1108e:	48 8b 40 50          	mov    0x50(%rax),%rax
   11092:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
   11099:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
   1109d:	48 89 d1             	mov    %rdx,%rcx
   110a0:	ba 00 00 00 00       	mov    $0x0,%edx
   110a5:	48 89 c7             	mov    %rax,%rdi
   110a8:	e8 03 34 ff ff       	call   44b0 <vkCreateBuffer@plt>
   110ad:	85 c0                	test   %eax,%eax
   110af:	0f 95 c0             	setne  %al
   110b2:	84 c0                	test   %al,%al
   110b4:	74 3b                	je     110f1 <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T+0xd7>
    throw std::runtime_error("Failed creating vertex buffer.");
   110b6:	bf 10 00 00 00       	mov    $0x10,%edi
   110bb:	e8 10 31 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   110c0:	48 89 c3             	mov    %rax,%rbx
   110c3:	48 8d 05 b6 21 01 00 	lea    0x121b6(%rip),%rax        # 23280 <_ZZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_TE17vertexBufferCount+0x8>
   110ca:	48 89 c6             	mov    %rax,%rsi
   110cd:	48 89 df             	mov    %rbx,%rdi
   110d0:	e8 6b 30 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   110d5:	48 8b 05 dc 3e 02 00 	mov    0x23edc(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   110dc:	48 89 c2             	mov    %rax,%rdx
   110df:	48 8d 05 5a 3c 02 00 	lea    0x23c5a(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   110e6:	48 89 c6             	mov    %rax,%rsi
   110e9:	48 89 df             	mov    %rbx,%rdi
   110ec:	e8 0f 38 ff ff       	call   4900 <__cxa_throw@plt>
  }

  VkMemoryRequirements memoryRequirements;
  vkGetBufferMemoryRequirements(device, buffer, &memoryRequirements);
   110f1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   110f8:	48 8b 08             	mov    (%rax),%rcx
   110fb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   11102:	48 8b 40 50          	mov    0x50(%rax),%rax
   11106:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
   1110a:	48 89 ce             	mov    %rcx,%rsi
   1110d:	48 89 c7             	mov    %rax,%rdi
   11110:	e8 8b 2f ff ff       	call   40a0 <vkGetBufferMemoryRequirements@plt>

  VkMemoryAllocateInfo allocInfo{};
   11115:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11119:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
   11120:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  allocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
   11124:	c7 85 70 ff ff ff 05 	movl   $0x5,-0x90(%rbp)
   1112b:	00 00 00 
  allocInfo.allocationSize = memoryRequirements.size;
   1112e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   11132:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  allocInfo.memoryTypeIndex =
      findMemoryType(memoryRequirements.memoryTypeBits, propertyFlags);
   11136:	8b 4d a0             	mov    -0x60(%rbp),%ecx
   11139:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
   1113f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   11146:	89 ce                	mov    %ecx,%esi
   11148:	48 89 c7             	mov    %rax,%rdi
   1114b:	e8 e2 fd ff ff       	call   10f32 <_ZN9VulkanApp14findMemoryTypeEjj>
  allocInfo.memoryTypeIndex =
   11150:	89 45 88             	mov    %eax,-0x78(%rbp)
  if (vkAllocateMemory(device, &allocInfo, nullptr, &bufferMemory) !=
   11153:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1115a:	48 8b 40 50          	mov    0x50(%rax),%rax
   1115e:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   11165:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
   1116c:	48 89 d1             	mov    %rdx,%rcx
   1116f:	ba 00 00 00 00       	mov    $0x0,%edx
   11174:	48 89 c7             	mov    %rax,%rdi
   11177:	e8 64 37 ff ff       	call   48e0 <vkAllocateMemory@plt>
   1117c:	85 c0                	test   %eax,%eax
   1117e:	0f 95 c0             	setne  %al
   11181:	84 c0                	test   %al,%al
   11183:	74 3b                	je     111c0 <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T+0x1a6>
      VK_SUCCESS) {
    throw std::runtime_error("Failed to allocate vertex buffer memory.");
   11185:	bf 10 00 00 00       	mov    $0x10,%edi
   1118a:	e8 41 30 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   1118f:	48 89 c3             	mov    %rax,%rbx
   11192:	48 8d 05 07 21 01 00 	lea    0x12107(%rip),%rax        # 232a0 <_ZZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_TE17vertexBufferCount+0x28>
   11199:	48 89 c6             	mov    %rax,%rsi
   1119c:	48 89 df             	mov    %rbx,%rdi
   1119f:	e8 9c 2f ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   111a4:	48 8b 05 0d 3e 02 00 	mov    0x23e0d(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   111ab:	48 89 c2             	mov    %rax,%rdx
   111ae:	48 8d 05 8b 3b 02 00 	lea    0x23b8b(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   111b5:	48 89 c6             	mov    %rax,%rsi
   111b8:	48 89 df             	mov    %rbx,%rdi
   111bb:	e8 40 37 ff ff       	call   4900 <__cxa_throw@plt>
  }
  vkBindBufferMemory(device, buffer, bufferMemory, 0);
   111c0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   111c7:	48 8b 10             	mov    (%rax),%rdx
   111ca:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   111d1:	48 8b 30             	mov    (%rax),%rsi
   111d4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   111db:	48 8b 40 50          	mov    0x50(%rax),%rax
   111df:	b9 00 00 00 00       	mov    $0x0,%ecx
   111e4:	48 89 c7             	mov    %rax,%rdi
   111e7:	e8 14 34 ff ff       	call   4600 <vkBindBufferMemory@plt>
}
   111ec:	eb 2c                	jmp    1121a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T+0x200>
    throw std::runtime_error("Failed creating vertex buffer.");
   111ee:	49 89 c4             	mov    %rax,%r12
   111f1:	48 89 df             	mov    %rbx,%rdi
   111f4:	e8 07 31 ff ff       	call   4300 <__cxa_free_exception@plt>
   111f9:	4c 89 e0             	mov    %r12,%rax
   111fc:	48 89 c7             	mov    %rax,%rdi
   111ff:	e8 6c 37 ff ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to allocate vertex buffer memory.");
   11204:	49 89 c4             	mov    %rax,%r12
   11207:	48 89 df             	mov    %rbx,%rdi
   1120a:	e8 f1 30 ff ff       	call   4300 <__cxa_free_exception@plt>
   1120f:	4c 89 e0             	mov    %r12,%rax
   11212:	48 89 c7             	mov    %rax,%rdi
   11215:	e8 56 37 ff ff       	call   4970 <_Unwind_Resume@plt>
}
   1121a:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
   11221:	5b                   	pop    %rbx
   11222:	41 5c                	pop    %r12
   11224:	5d                   	pop    %rbp
   11225:	c3                   	ret

0000000000011226 <_ZN9VulkanApp10copyBufferEP10VkBuffer_TS1_m>:

void VulkanApp::copyBuffer(VkBuffer src, VkBuffer dst, VkDeviceSize size) {
   11226:	55                   	push   %rbp
   11227:	48 89 e5             	mov    %rsp,%rbp
   1122a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   11231:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
   11238:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
   1123f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
   11246:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
  VkCommandBufferAllocateInfo allocInfo{};
   1124d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11251:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
   11255:	0f 29 45 f0          	movaps %xmm0,-0x10(%rbp)
  allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
   11259:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%rbp)
  allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
   11260:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  allocInfo.commandPool = commandPool;
   11267:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   1126e:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
   11275:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  allocInfo.commandBufferCount = 1;
   11279:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

  VkCommandBuffer commandBuffer =
      vkh::allocateCommandBuffer(device, &allocInfo);
   11280:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   11287:	48 8b 40 50          	mov    0x50(%rax),%rax
   1128b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1128f:	48 89 d6             	mov    %rdx,%rsi
   11292:	48 89 c7             	mov    %rax,%rdi
   11295:	e8 bc 51 ff ff       	call   6456 <_ZN3vkh21allocateCommandBufferEP10VkDevice_TPK27VkCommandBufferAllocateInfo>
   1129a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

  VkCommandBufferBeginInfo beginInfo{};
   1129e:	66 0f ef c0          	pxor   %xmm0,%xmm0
   112a2:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   112a6:	0f 29 45 c0          	movaps %xmm0,-0x40(%rbp)
  beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
   112aa:	c7 45 b0 2a 00 00 00 	movl   $0x2a,-0x50(%rbp)
  beginInfo.flags = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
   112b1:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
  vkh::beginCommandBuffer(commandBuffer, &beginInfo);
   112b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   112bc:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   112c0:	48 89 d6             	mov    %rdx,%rsi
   112c3:	48 89 c7             	mov    %rax,%rdi
   112c6:	e8 7e 53 ff ff       	call   6649 <_ZN3vkh18beginCommandBufferEP17VkCommandBuffer_TPK24VkCommandBufferBeginInfo>

  VkBufferCopy copyRegion{};
   112cb:	66 0f ef c0          	pxor   %xmm0,%xmm0
   112cf:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
   112d3:	66 0f d6 45 a0       	movq   %xmm0,-0x60(%rbp)
  copyRegion.srcOffset = 0;
   112d8:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
   112df:	00 
  copyRegion.dstOffset = 0;
   112e0:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   112e7:	00 
  copyRegion.size = size;
   112e8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   112ef:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  vkCmdCopyBuffer(commandBuffer, src, dst, 1, &copyRegion);
   112f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   112f7:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   112fb:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   11302:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
   11309:	49 89 c8             	mov    %rcx,%r8
   1130c:	b9 01 00 00 00       	mov    $0x1,%ecx
   11311:	48 89 c7             	mov    %rax,%rdi
   11314:	e8 97 34 ff ff       	call   47b0 <vkCmdCopyBuffer@plt>

  vkh::endCommandBuffer(commandBuffer);
   11319:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1131d:	48 89 c7             	mov    %rax,%rdi
   11320:	e8 ae 53 ff ff       	call   66d3 <_ZN3vkh16endCommandBufferEP17VkCommandBuffer_T>

  VkSubmitInfo submitInfo{};
   11325:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11329:	0f 29 85 40 ff ff ff 	movaps %xmm0,-0xc0(%rbp)
   11330:	0f 29 85 50 ff ff ff 	movaps %xmm0,-0xb0(%rbp)
   11337:	0f 29 85 60 ff ff ff 	movaps %xmm0,-0xa0(%rbp)
   1133e:	0f 29 85 70 ff ff ff 	movaps %xmm0,-0x90(%rbp)
   11345:	66 0f d6 45 80       	movq   %xmm0,-0x80(%rbp)
  submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   1134a:	c7 85 40 ff ff ff 04 	movl   $0x4,-0xc0(%rbp)
   11351:	00 00 00 
  submitInfo.commandBufferCount = 1;
   11354:	c7 85 68 ff ff ff 01 	movl   $0x1,-0x98(%rbp)
   1135b:	00 00 00 
  submitInfo.pCommandBuffers = &commandBuffer;
   1135e:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   11362:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)

  /* Submit and wait on this transfer to complete before cleaning up
  the command buffer */
  vkQueueSubmit(queue, 1, &submitInfo, VK_NULL_HANDLE);
   11369:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   11370:	48 8b 40 60          	mov    0x60(%rax),%rax
   11374:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
   1137b:	b9 00 00 00 00       	mov    $0x0,%ecx
   11380:	be 01 00 00 00       	mov    $0x1,%esi
   11385:	48 89 c7             	mov    %rax,%rdi
   11388:	e8 43 33 ff ff       	call   46d0 <vkQueueSubmit@plt>
  vkQueueWaitIdle(queue);
   1138d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   11394:	48 8b 40 60          	mov    0x60(%rax),%rax
   11398:	48 89 c7             	mov    %rax,%rdi
   1139b:	e8 b0 35 ff ff       	call   4950 <vkQueueWaitIdle@plt>
  vkFreeCommandBuffers(device, commandPool, 1, &commandBuffer);
   113a0:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   113a7:	48 8b b0 40 01 00 00 	mov    0x140(%rax),%rsi
   113ae:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   113b5:	48 8b 40 50          	mov    0x50(%rax),%rax
   113b9:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   113bd:	48 89 d1             	mov    %rdx,%rcx
   113c0:	ba 01 00 00 00       	mov    $0x1,%edx
   113c5:	48 89 c7             	mov    %rax,%rdi
   113c8:	e8 43 2f ff ff       	call   4310 <vkFreeCommandBuffers@plt>
}
   113cd:	90                   	nop
   113ce:	c9                   	leave
   113cf:	c3                   	ret

00000000000113d0 <_ZN9VulkanApp18createVertexBufferEv>:

void VulkanApp::createVertexBuffer() {
   113d0:	55                   	push   %rbp
   113d1:	48 89 e5             	mov    %rsp,%rbp
   113d4:	48 83 ec 30          	sub    $0x30,%rsp
   113d8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  VkDeviceSize bufferSize = sizeof(shader::triangle_index_data[0]) *
                            shader::triangle_index_data.size();
   113dc:	48 8d 05 7d 42 02 00 	lea    0x2427d(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
   113e3:	48 89 c7             	mov    %rax,%rdi
   113e6:	e8 b9 42 00 00       	call   156a4 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE4sizeEv>
   113eb:	48 89 c2             	mov    %rax,%rdx
   113ee:	48 89 d0             	mov    %rdx,%rax
   113f1:	48 c1 e0 02          	shl    $0x2,%rax
   113f5:	48 01 d0             	add    %rdx,%rax
   113f8:	48 c1 e0 02          	shl    $0x2,%rax
   113fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Create a host visible buffer as temporary buffer */
  VkBuffer stagingBuffer;
  VkDeviceMemory stagingBufferMemory;
  createBuffer(bufferSize, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
   11400:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   11404:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   11408:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   1140c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11410:	49 89 c9             	mov    %rcx,%r9
   11413:	49 89 d0             	mov    %rdx,%r8
   11416:	b9 06 00 00 00       	mov    $0x6,%ecx
   1141b:	ba 01 00 00 00       	mov    $0x1,%edx
   11420:	48 89 c7             	mov    %rax,%rdi
   11423:	e8 f2 fb ff ff       	call   1101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>
                   VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
               stagingBuffer, stagingBufferMemory);

  /* Copy the vertices data to the staging buffer */
  void *data;
  vkMapMemory(device, stagingBufferMemory, 0, bufferSize, 0, &data);
   11428:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1142c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11430:	48 8b 40 50          	mov    0x50(%rax),%rax
   11434:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   11438:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1143c:	49 89 c9             	mov    %rcx,%r9
   1143f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   11445:	48 89 d1             	mov    %rdx,%rcx
   11448:	ba 00 00 00 00       	mov    $0x0,%edx
   1144d:	48 89 c7             	mov    %rax,%rdi
   11450:	e8 eb 2f ff ff       	call   4440 <vkMapMemory@plt>
  std::memcpy(data, shader::triangle_index_data.data(),
   11455:	48 8d 05 04 42 02 00 	lea    0x24204(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
   1145c:	48 89 c7             	mov    %rax,%rdi
   1145f:	e8 6e 42 00 00       	call   156d2 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE4dataEv>
   11464:	48 89 c1             	mov    %rax,%rcx
   11467:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1146b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1146f:	48 89 ce             	mov    %rcx,%rsi
   11472:	48 89 c7             	mov    %rax,%rdi
   11475:	e8 16 2f ff ff       	call   4390 <memcpy@plt>
              static_cast<size_t>(bufferSize));
  vkUnmapMemory(device, stagingBufferMemory);
   1147a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1147e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11482:	48 8b 40 50          	mov    0x50(%rax),%rax
   11486:	48 89 d6             	mov    %rdx,%rsi
   11489:	48 89 c7             	mov    %rax,%rdi
   1148c:	e8 ef 2e ff ff       	call   4380 <vkUnmapMemory@plt>

  /* Create a device local buffer as actual vertex buffer */
  createBuffer(
      bufferSize,
      VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
      VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, vertexBuffer, vertexBufferMemory);
   11491:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11495:	48 8d 88 a0 01 00 00 	lea    0x1a0(%rax),%rcx
   1149c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   114a0:	48 8d 90 98 01 00 00 	lea    0x198(%rax),%rdx
  createBuffer(
   114a7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   114ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   114af:	49 89 c9             	mov    %rcx,%r9
   114b2:	49 89 d0             	mov    %rdx,%r8
   114b5:	b9 01 00 00 00       	mov    $0x1,%ecx
   114ba:	ba 82 00 00 00       	mov    $0x82,%edx
   114bf:	48 89 c7             	mov    %rax,%rdi
   114c2:	e8 53 fb ff ff       	call   1101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>

  /* Copy the data from the staging buffer to the device buffer */
  copyBuffer(stagingBuffer, vertexBuffer, bufferSize);
   114c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   114cb:	48 8b 90 98 01 00 00 	mov    0x198(%rax),%rdx
   114d2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   114d6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   114da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   114de:	48 89 c7             	mov    %rax,%rdi
   114e1:	e8 40 fd ff ff       	call   11226 <_ZN9VulkanApp10copyBufferEP10VkBuffer_TS1_m>

  /* Clean the staging buffer */
  vkDestroyBuffer(device, stagingBuffer, nullptr);
   114e6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   114ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   114ee:	48 8b 40 50          	mov    0x50(%rax),%rax
   114f2:	ba 00 00 00 00       	mov    $0x0,%edx
   114f7:	48 89 ce             	mov    %rcx,%rsi
   114fa:	48 89 c7             	mov    %rax,%rdi
   114fd:	e8 de 2c ff ff       	call   41e0 <vkDestroyBuffer@plt>
  vkFreeMemory(device, stagingBufferMemory, nullptr);
   11502:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11506:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1150a:	48 8b 40 50          	mov    0x50(%rax),%rax
   1150e:	ba 00 00 00 00       	mov    $0x0,%edx
   11513:	48 89 ce             	mov    %rcx,%rsi
   11516:	48 89 c7             	mov    %rax,%rdi
   11519:	e8 32 2f ff ff       	call   4450 <vkFreeMemory@plt>
}
   1151e:	90                   	nop
   1151f:	c9                   	leave
   11520:	c3                   	ret
   11521:	90                   	nop

0000000000011522 <_ZN9VulkanApp17createIndexBufferEv>:

void VulkanApp::createIndexBuffer() {
   11522:	55                   	push   %rbp
   11523:	48 89 e5             	mov    %rsp,%rbp
   11526:	48 83 ec 30          	sub    $0x30,%rsp
   1152a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  VkDeviceSize bufferSize =
      sizeof(shader::triangle_indices[0]) * shader::triangle_indices.size();
   1152e:	48 8d 05 0b 41 02 00 	lea    0x2410b(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
   11535:	48 89 c7             	mov    %rax,%rdi
   11538:	e8 45 41 00 00       	call   15682 <_ZNKSt6vectorItSaItEE4sizeEv>
   1153d:	48 01 c0             	add    %rax,%rax
   11540:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  /* Create a host visible buffer as temporary buffer */
  VkBuffer stagingBuffer;
  VkDeviceMemory stagingBufferMemory;
  createBuffer(bufferSize, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
   11544:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   11548:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1154c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   11550:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11554:	49 89 c9             	mov    %rcx,%r9
   11557:	49 89 d0             	mov    %rdx,%r8
   1155a:	b9 06 00 00 00       	mov    $0x6,%ecx
   1155f:	ba 01 00 00 00       	mov    $0x1,%edx
   11564:	48 89 c7             	mov    %rax,%rdi
   11567:	e8 ae fa ff ff       	call   1101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>
                   VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
               stagingBuffer, stagingBufferMemory);

  /* Copy the vertices data to the staging buffer */
  void *data;
  vkMapMemory(device, stagingBufferMemory, 0, bufferSize, 0, &data);
   1156c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   11570:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11574:	48 8b 40 50          	mov    0x50(%rax),%rax
   11578:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   1157c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11580:	49 89 c9             	mov    %rcx,%r9
   11583:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   11589:	48 89 d1             	mov    %rdx,%rcx
   1158c:	ba 00 00 00 00       	mov    $0x0,%edx
   11591:	48 89 c7             	mov    %rax,%rdi
   11594:	e8 a7 2e ff ff       	call   4440 <vkMapMemory@plt>
  std::memcpy(data, shader::triangle_indices.data(),
   11599:	48 8d 05 a0 40 02 00 	lea    0x240a0(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
   115a0:	48 89 c7             	mov    %rax,%rdi
   115a3:	e8 4e 41 00 00       	call   156f6 <_ZNKSt6vectorItSaItEE4dataEv>
   115a8:	48 89 c1             	mov    %rax,%rcx
   115ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   115af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   115b3:	48 89 ce             	mov    %rcx,%rsi
   115b6:	48 89 c7             	mov    %rax,%rdi
   115b9:	e8 d2 2d ff ff       	call   4390 <memcpy@plt>
              static_cast<size_t>(bufferSize));
  vkUnmapMemory(device, stagingBufferMemory);
   115be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   115c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   115c6:	48 8b 40 50          	mov    0x50(%rax),%rax
   115ca:	48 89 d6             	mov    %rdx,%rsi
   115cd:	48 89 c7             	mov    %rax,%rdi
   115d0:	e8 ab 2d ff ff       	call   4380 <vkUnmapMemory@plt>

  /* Create a device local buffer as actual vertex buffer */
  createBuffer(
      bufferSize,
      VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
      VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, indexBuffer, indexBufferMemory);
   115d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   115d9:	48 8d 88 b0 01 00 00 	lea    0x1b0(%rax),%rcx
   115e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   115e4:	48 8d 90 a8 01 00 00 	lea    0x1a8(%rax),%rdx
  createBuffer(
   115eb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   115ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   115f3:	49 89 c9             	mov    %rcx,%r9
   115f6:	49 89 d0             	mov    %rdx,%r8
   115f9:	b9 01 00 00 00       	mov    $0x1,%ecx
   115fe:	ba 42 00 00 00       	mov    $0x42,%edx
   11603:	48 89 c7             	mov    %rax,%rdi
   11606:	e8 0f fa ff ff       	call   1101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>

  /* Copy the data from the staging buffer to the device buffer */
  copyBuffer(stagingBuffer, indexBuffer, bufferSize);
   1160b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1160f:	48 8b 90 a8 01 00 00 	mov    0x1a8(%rax),%rdx
   11616:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1161a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1161e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11622:	48 89 c7             	mov    %rax,%rdi
   11625:	e8 fc fb ff ff       	call   11226 <_ZN9VulkanApp10copyBufferEP10VkBuffer_TS1_m>

  /* Clean the staging buffer */
  vkDestroyBuffer(device, stagingBuffer, nullptr);
   1162a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1162e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11632:	48 8b 40 50          	mov    0x50(%rax),%rax
   11636:	ba 00 00 00 00       	mov    $0x0,%edx
   1163b:	48 89 ce             	mov    %rcx,%rsi
   1163e:	48 89 c7             	mov    %rax,%rdi
   11641:	e8 9a 2b ff ff       	call   41e0 <vkDestroyBuffer@plt>
  vkFreeMemory(device, stagingBufferMemory, nullptr);
   11646:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1164a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1164e:	48 8b 40 50          	mov    0x50(%rax),%rax
   11652:	ba 00 00 00 00       	mov    $0x0,%edx
   11657:	48 89 ce             	mov    %rcx,%rsi
   1165a:	48 89 c7             	mov    %rax,%rdi
   1165d:	e8 ee 2d ff ff       	call   4450 <vkFreeMemory@plt>
}
   11662:	90                   	nop
   11663:	c9                   	leave
   11664:	c3                   	ret
   11665:	90                   	nop

0000000000011666 <_ZN9VulkanApp20createUniformBuffersEv>:

void VulkanApp::createUniformBuffers() {
   11666:	55                   	push   %rbp
   11667:	48 89 e5             	mov    %rsp,%rbp
   1166a:	53                   	push   %rbx
   1166b:	48 83 ec 28          	sub    $0x28,%rsp
   1166f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  VkDeviceSize bufferSize = sizeof(vkh::UniformBufferObject);
   11673:	48 c7 45 e0 c0 00 00 	movq   $0xc0,-0x20(%rbp)
   1167a:	00 
  uniformBuffers.resize(maxFramesInFlight);
   1167b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1167f:	48 8d 90 b8 01 00 00 	lea    0x1b8(%rax),%rdx
   11686:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1168a:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11691:	48 89 c6             	mov    %rax,%rsi
   11694:	48 89 d7             	mov    %rdx,%rdi
   11697:	e8 7e 40 00 00       	call   1571a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE6resizeEm>
  uniformBuffersMemory.resize(maxFramesInFlight);
   1169c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   116a0:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
   116a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   116ab:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   116b2:	48 89 c6             	mov    %rax,%rsi
   116b5:	48 89 d7             	mov    %rdx,%rdi
   116b8:	e8 e3 40 00 00       	call   157a0 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE6resizeEm>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   116bd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   116c4:	00 
   116c5:	eb 5f                	jmp    11726 <_ZN9VulkanApp20createUniformBuffersEv+0xc0>
    createBuffer(bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
                 VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |
                     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
                 uniformBuffers[i], uniformBuffersMemory[i]);
   116c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   116cb:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
   116d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116d6:	48 89 c6             	mov    %rax,%rsi
   116d9:	48 89 d7             	mov    %rdx,%rdi
   116dc:	e8 49 3f 00 00       	call   1562a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEixEm>
   116e1:	48 89 c3             	mov    %rax,%rbx
   116e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   116e8:	48 8d 90 b8 01 00 00 	lea    0x1b8(%rax),%rdx
   116ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   116f3:	48 89 c6             	mov    %rax,%rsi
   116f6:	48 89 d7             	mov    %rdx,%rdi
   116f9:	e8 0c 3f 00 00       	call   1560a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EEixEm>
   116fe:	48 89 c2             	mov    %rax,%rdx
    createBuffer(bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
   11701:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   11705:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11709:	49 89 d9             	mov    %rbx,%r9
   1170c:	49 89 d0             	mov    %rdx,%r8
   1170f:	b9 06 00 00 00       	mov    $0x6,%ecx
   11714:	ba 10 00 00 00       	mov    $0x10,%edx
   11719:	48 89 c7             	mov    %rax,%rdi
   1171c:	e8 f9 f8 ff ff       	call   1101a <_ZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_T>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   11721:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   11726:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1172a:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11731:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   11735:	72 90                	jb     116c7 <_ZN9VulkanApp20createUniformBuffersEv+0x61>
  }
}
   11737:	90                   	nop
   11738:	90                   	nop
   11739:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1173d:	c9                   	leave
   1173e:	c3                   	ret
   1173f:	90                   	nop

0000000000011740 <_ZN9VulkanApp19updateUniformBufferEj>:

void VulkanApp::updateUniformBuffer(uint32_t currentImage) {
   11740:	55                   	push   %rbp
   11741:	48 89 e5             	mov    %rsp,%rbp
   11744:	53                   	push   %rbx
   11745:	48 81 ec d8 01 00 00 	sub    $0x1d8,%rsp
   1174c:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
   11753:	89 b5 74 fe ff ff    	mov    %esi,-0x18c(%rbp)
  static auto startTime = std::chrono::high_resolution_clock::now();
   11759:	0f b6 05 40 3f 02 00 	movzbl 0x23f40(%rip),%eax        # 356a0 <_ZGVZN9VulkanApp19updateUniformBufferEjE9startTime>
   11760:	84 c0                	test   %al,%al
   11762:	0f 94 c0             	sete   %al
   11765:	84 c0                	test   %al,%al
   11767:	74 33                	je     1179c <_ZN9VulkanApp19updateUniformBufferEj+0x5c>
   11769:	48 8d 05 30 3f 02 00 	lea    0x23f30(%rip),%rax        # 356a0 <_ZGVZN9VulkanApp19updateUniformBufferEjE9startTime>
   11770:	48 89 c7             	mov    %rax,%rdi
   11773:	e8 48 32 ff ff       	call   49c0 <__cxa_guard_acquire@plt>
   11778:	85 c0                	test   %eax,%eax
   1177a:	0f 95 c0             	setne  %al
   1177d:	84 c0                	test   %al,%al
   1177f:	74 1b                	je     1179c <_ZN9VulkanApp19updateUniformBufferEj+0x5c>
   11781:	e8 ba 28 ff ff       	call   4040 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
   11786:	48 89 05 0b 3f 02 00 	mov    %rax,0x23f0b(%rip)        # 35698 <_ZZN9VulkanApp19updateUniformBufferEjE9startTime>
   1178d:	48 8d 05 0c 3f 02 00 	lea    0x23f0c(%rip),%rax        # 356a0 <_ZGVZN9VulkanApp19updateUniformBufferEjE9startTime>
   11794:	48 89 c7             	mov    %rax,%rdi
   11797:	e8 04 2b ff ff       	call   42a0 <__cxa_guard_release@plt>

  auto currentTime = std::chrono::high_resolution_clock::now();
   1179c:	e8 9f 28 ff ff       	call   4040 <_ZNSt6chrono3_V212system_clock3nowEv@plt>
   117a1:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  float time = std::chrono::duration<float, std::chrono::seconds::period>(
                   currentTime - startTime)
   117a8:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
   117af:	48 8d 15 e2 3e 02 00 	lea    0x23ee2(%rip),%rdx        # 35698 <_ZZN9VulkanApp19updateUniformBufferEjE9startTime>
   117b6:	48 89 d6             	mov    %rdx,%rsi
   117b9:	48 89 c7             	mov    %rax,%rdi
   117bc:	e8 f7 28 00 00       	call   140b8 <_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>
   117c1:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  float time = std::chrono::duration<float, std::chrono::seconds::period>(
   117c8:	48 8d 95 68 ff ff ff 	lea    -0x98(%rbp),%rdx
   117cf:	48 8d 85 64 ff ff ff 	lea    -0x9c(%rbp),%rax
   117d6:	48 89 d6             	mov    %rdx,%rsi
   117d9:	48 89 c7             	mov    %rax,%rdi
   117dc:	e8 45 40 00 00       	call   15826 <_ZNSt6chrono8durationIfSt5ratioILl1ELl1EEEC1IlS1_ILl1ELl1000000000EEvEERKNS0_IT_T0_EE>
                   .count();
   117e1:	48 8d 85 64 ff ff ff 	lea    -0x9c(%rbp),%rax
   117e8:	48 89 c7             	mov    %rax,%rdi
   117eb:	e8 70 40 00 00       	call   15860 <_ZNKSt6chrono8durationIfSt5ratioILl1ELl1EEE5countEv>
   117f0:	66 0f 7e c0          	movd   %xmm0,%eax
   117f4:	89 45 ec             	mov    %eax,-0x14(%rbp)

  vkh::UniformBufferObject ubo{};
   117f7:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
   117fe:	b8 00 00 00 00       	mov    $0x0,%eax
   11803:	b9 18 00 00 00       	mov    $0x18,%ecx
   11808:	48 89 d7             	mov    %rdx,%rdi
   1180b:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(90.0f),
   1180e:	48 8d 85 74 ff ff ff 	lea    -0x8c(%rbp),%rax
   11815:	f3 0f 10 15 af 22 01 	movss  0x122af(%rip),%xmm2        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   1181c:	00 
   1181d:	66 0f ef c9          	pxor   %xmm1,%xmm1
   11821:	8b 15 a9 22 01 00    	mov    0x122a9(%rip),%edx        # 23ad0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7d8>
   11827:	66 0f 6e c2          	movd   %edx,%xmm0
   1182b:	48 89 c7             	mov    %rax,%rdi
   1182e:	e8 fb 25 00 00       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
   11833:	8b 05 9b 22 01 00    	mov    0x1229b(%rip),%eax        # 23ad4 <_ZZN9VulkanApp6renderEvE11submitCount+0x7dc>
   11839:	66 0f 6e c0          	movd   %eax,%xmm0
   1183d:	e8 44 41 00 00       	call   15986 <_ZN3glm7radiansIfEET_S1_>
   11842:	66 0f 7e c0          	movd   %xmm0,%eax
   11846:	66 0f 6e e0          	movd   %eax,%xmm4
   1184a:	f3 0f 59 65 ec       	mulss  -0x14(%rbp),%xmm4
   1184f:	66 0f 7e e3          	movd   %xmm4,%ebx
   11853:	f3 0f 10 05 71 22 01 	movss  0x12271(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   1185a:	00 
   1185b:	f3 0f 11 45 c4       	movss  %xmm0,-0x3c(%rbp)
   11860:	48 8d 55 c4          	lea    -0x3c(%rbp),%rdx
   11864:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   11868:	48 89 d6             	mov    %rdx,%rsi
   1186b:	48 89 c7             	mov    %rax,%rdi
   1186e:	e8 69 40 00 00       	call   158dc <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC1ERKf>
   11873:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   1187a:	48 8d 95 74 ff ff ff 	lea    -0x8c(%rbp),%rdx
   11881:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
   11885:	66 0f 6e c3          	movd   %ebx,%xmm0
   11889:	48 89 ce             	mov    %rcx,%rsi
   1188c:	48 89 c7             	mov    %rax,%rdi
   1188f:	e8 86 41 00 00       	call   15a1a <_ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE>
   11894:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
   1189b:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
   118a2:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
   118a9:	48 89 95 98 fe ff ff 	mov    %rdx,-0x168(%rbp)
   118b0:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
   118b7:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
   118be:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
   118c5:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
   118cc:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
   118d3:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
   118da:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
   118e1:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
   118e8:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
   118ef:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
   118f6:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
   118fd:	48 89 95 c8 fe ff ff 	mov    %rdx,-0x138(%rbp)
                          glm::vec3(0.0f, 0.0f, 1.0f));
  ubo.view =
      glm::lookAt(glm::vec3(2.0f, 2.0f, 2.0f), glm::vec3(0.0f, 0.0f, 0.0f),
   11904:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   11908:	f3 0f 10 15 bc 21 01 	movss  0x121bc(%rip),%xmm2        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   1190f:	00 
   11910:	66 0f ef c9          	pxor   %xmm1,%xmm1
   11914:	8b 15 b6 21 01 00    	mov    0x121b6(%rip),%edx        # 23ad0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7d8>
   1191a:	66 0f 6e c2          	movd   %edx,%xmm0
   1191e:	48 89 c7             	mov    %rax,%rdi
   11921:	e8 08 25 00 00       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
   11926:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
   1192a:	66 0f ef d2          	pxor   %xmm2,%xmm2
   1192e:	66 0f ef c9          	pxor   %xmm1,%xmm1
   11932:	8b 15 98 21 01 00    	mov    0x12198(%rip),%edx        # 23ad0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7d8>
   11938:	66 0f 6e c2          	movd   %edx,%xmm0
   1193c:	48 89 c7             	mov    %rax,%rdi
   1193f:	e8 ea 24 00 00       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
   11944:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   11948:	f3 0f 10 15 88 21 01 	movss  0x12188(%rip),%xmm2        # 23ad8 <_ZZN9VulkanApp6renderEvE11submitCount+0x7e0>
   1194f:	00 
   11950:	f3 0f 10 0d 80 21 01 	movss  0x12180(%rip),%xmm1        # 23ad8 <_ZZN9VulkanApp6renderEvE11submitCount+0x7e0>
   11957:	00 
   11958:	8b 15 7a 21 01 00    	mov    0x1217a(%rip),%edx        # 23ad8 <_ZZN9VulkanApp6renderEvE11submitCount+0x7e0>
   1195e:	66 0f 6e c2          	movd   %edx,%xmm0
   11962:	48 89 c7             	mov    %rax,%rdi
   11965:	e8 c4 24 00 00       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
   1196a:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   11971:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
   11975:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
   11979:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
   1197d:	48 89 c7             	mov    %rax,%rdi
   11980:	e8 68 4b 00 00       	call   164ed <_ZN3glm6lookAtIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_>
   11985:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
   1198c:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
   11993:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   1199a:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
   119a1:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
   119a8:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
   119af:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
   119b6:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
   119bd:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
   119c4:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
   119cb:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   119d2:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
   119d9:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
   119e0:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
   119e7:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   119ee:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
                  glm::vec3(0.0f, 0.0f, 1.0f));
  ubo.proj = glm::perspective(glm::radians(45.0f),
                              static_cast<float>(swapchain.extent.width) /
   119f5:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   119fc:	8b 40 7c             	mov    0x7c(%rax),%eax
   119ff:	89 c0                	mov    %eax,%eax
   11a01:	48 85 c0             	test   %rax,%rax
   11a04:	78 0b                	js     11a11 <_ZN9VulkanApp19updateUniformBufferEj+0x2d1>
   11a06:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11a0a:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
   11a0f:	eb 19                	jmp    11a2a <_ZN9VulkanApp19updateUniformBufferEj+0x2ea>
   11a11:	48 89 c2             	mov    %rax,%rdx
   11a14:	48 d1 ea             	shr    %rdx
   11a17:	83 e0 01             	and    $0x1,%eax
   11a1a:	48 09 c2             	or     %rax,%rdx
   11a1d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11a21:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
   11a26:	f3 0f 58 c0          	addss  %xmm0,%xmm0
                                  static_cast<float>(swapchain.extent.height),
   11a2a:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   11a31:	8b 80 80 00 00 00    	mov    0x80(%rax),%eax
   11a37:	89 c0                	mov    %eax,%eax
   11a39:	48 85 c0             	test   %rax,%rax
   11a3c:	78 0b                	js     11a49 <_ZN9VulkanApp19updateUniformBufferEj+0x309>
   11a3e:	66 0f ef c9          	pxor   %xmm1,%xmm1
   11a42:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
   11a47:	eb 19                	jmp    11a62 <_ZN9VulkanApp19updateUniformBufferEj+0x322>
   11a49:	48 89 c2             	mov    %rax,%rdx
   11a4c:	48 d1 ea             	shr    %rdx
   11a4f:	83 e0 01             	and    $0x1,%eax
   11a52:	48 09 c2             	or     %rax,%rdx
   11a55:	66 0f ef c9          	pxor   %xmm1,%xmm1
   11a59:	f3 48 0f 2a ca       	cvtsi2ss %rdx,%xmm1
   11a5e:	f3 0f 58 c9          	addss  %xmm1,%xmm1
  ubo.proj = glm::perspective(glm::radians(45.0f),
   11a62:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   11a66:	f3 0f 11 85 2c fe ff 	movss  %xmm0,-0x1d4(%rbp)
   11a6d:	ff 
   11a6e:	8b 05 68 20 01 00    	mov    0x12068(%rip),%eax        # 23adc <_ZZN9VulkanApp6renderEvE11submitCount+0x7e4>
   11a74:	66 0f 6e c0          	movd   %eax,%xmm0
   11a78:	e8 09 3f 00 00       	call   15986 <_ZN3glm7radiansIfEET_S1_>
   11a7d:	66 0f 7e c0          	movd   %xmm0,%eax
   11a81:	48 8d 95 30 fe ff ff 	lea    -0x1d0(%rbp),%rdx
   11a88:	f3 0f 10 1d 50 20 01 	movss  0x12050(%rip),%xmm3        # 23ae0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7e8>
   11a8f:	00 
   11a90:	f3 0f 10 15 4c 20 01 	movss  0x1204c(%rip),%xmm2        # 23ae4 <_ZZN9VulkanApp6renderEvE11submitCount+0x7ec>
   11a97:	00 
   11a98:	f3 0f 10 8d 2c fe ff 	movss  -0x1d4(%rbp),%xmm1
   11a9f:	ff 
   11aa0:	66 0f 6e c0          	movd   %eax,%xmm0
   11aa4:	48 89 d7             	mov    %rdx,%rdi
   11aa7:	e8 78 4a 00 00       	call   16524 <_ZN3glm11perspectiveIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_>
   11aac:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
   11ab3:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
   11aba:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   11ac1:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
   11ac8:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
   11acf:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
   11ad6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   11add:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
   11ae4:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
   11aeb:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
   11af2:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   11af9:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
   11b00:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
   11b07:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
   11b0e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   11b15:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
                              0.1f, 10.0f);
  ubo.proj[1][1] *= -1;
   11b1c:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
   11b23:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
   11b27:	be 01 00 00 00       	mov    $0x1,%esi
   11b2c:	48 89 c7             	mov    %rax,%rdi
   11b2f:	e8 42 4a 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   11b34:	be 01 00 00 00       	mov    $0x1,%esi
   11b39:	48 89 c7             	mov    %rax,%rdi
   11b3c:	e8 8b 4a 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   11b41:	f3 0f 10 00          	movss  (%rax),%xmm0
   11b45:	f3 0f 10 0d a3 1f 01 	movss  0x11fa3(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   11b4c:	00 
   11b4d:	0f 57 c1             	xorps  %xmm1,%xmm0
   11b50:	f3 0f 11 00          	movss  %xmm0,(%rax)

  void *data;
  vkMapMemory(device, uniformBuffersMemory[currentImage], 0, sizeof(ubo), 0,
   11b54:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   11b5b:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
   11b62:	8b 85 74 fe ff ff    	mov    -0x18c(%rbp),%eax
   11b68:	48 89 c6             	mov    %rax,%rsi
   11b6b:	48 89 d7             	mov    %rdx,%rdi
   11b6e:	e8 b7 3a 00 00       	call   1562a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEixEm>
   11b73:	48 8b 30             	mov    (%rax),%rsi
   11b76:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   11b7d:	48 8b 40 50          	mov    0x50(%rax),%rax
   11b81:	48 8d 95 88 fe ff ff 	lea    -0x178(%rbp),%rdx
   11b88:	49 89 d1             	mov    %rdx,%r9
   11b8b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   11b91:	b9 c0 00 00 00       	mov    $0xc0,%ecx
   11b96:	ba 00 00 00 00       	mov    $0x0,%edx
   11b9b:	48 89 c7             	mov    %rax,%rdi
   11b9e:	e8 9d 28 ff ff       	call   4440 <vkMapMemory@plt>
              &data);
  memcpy(data, &ubo, sizeof(ubo));
   11ba3:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
   11baa:	48 8d 8d 90 fe ff ff 	lea    -0x170(%rbp),%rcx
   11bb1:	ba c0 00 00 00       	mov    $0xc0,%edx
   11bb6:	48 89 ce             	mov    %rcx,%rsi
   11bb9:	48 89 c7             	mov    %rax,%rdi
   11bbc:	e8 cf 27 ff ff       	call   4390 <memcpy@plt>
  vkUnmapMemory(device, uniformBuffersMemory[currentImage]);
   11bc1:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   11bc8:	48 8d 90 d0 01 00 00 	lea    0x1d0(%rax),%rdx
   11bcf:	8b 85 74 fe ff ff    	mov    -0x18c(%rbp),%eax
   11bd5:	48 89 c6             	mov    %rax,%rsi
   11bd8:	48 89 d7             	mov    %rdx,%rdi
   11bdb:	e8 4a 3a 00 00       	call   1562a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEixEm>
   11be0:	48 8b 10             	mov    (%rax),%rdx
   11be3:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
   11bea:	48 8b 40 50          	mov    0x50(%rax),%rax
   11bee:	48 89 d6             	mov    %rdx,%rsi
   11bf1:	48 89 c7             	mov    %rax,%rdi
   11bf4:	e8 87 27 ff ff       	call   4380 <vkUnmapMemory@plt>
}
   11bf9:	90                   	nop
   11bfa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   11bfe:	c9                   	leave
   11bff:	c3                   	ret

0000000000011c00 <_ZN9VulkanApp28createSynchronizationObjectsEv>:

void VulkanApp::createSynchronizationObjects() {
   11c00:	55                   	push   %rbp
   11c01:	48 89 e5             	mov    %rsp,%rbp
   11c04:	53                   	push   %rbx
   11c05:	48 83 ec 58          	sub    $0x58,%rsp
   11c09:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  VkSemaphoreCreateInfo semaphoreInfo{};
   11c0d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11c11:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
   11c15:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
  semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
   11c1a:	c7 45 d0 09 00 00 00 	movl   $0x9,-0x30(%rbp)

  VkFenceCreateInfo fenceInfo{};
   11c21:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11c25:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   11c29:	66 0f d6 45 c0       	movq   %xmm0,-0x40(%rbp)
  fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
   11c2e:	c7 45 b0 08 00 00 00 	movl   $0x8,-0x50(%rbp)
  fenceInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT;
   11c35:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)

  sync.imageAvailableSemaphore.resize(maxFramesInFlight);
   11c3c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c40:	48 8d 90 48 01 00 00 	lea    0x148(%rax),%rdx
   11c47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c4b:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11c52:	48 89 c6             	mov    %rax,%rsi
   11c55:	48 89 d7             	mov    %rdx,%rdi
   11c58:	e8 f3 49 00 00       	call   16650 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm>
  sync.renderFinisedSemaphore.resize(maxFramesInFlight);
   11c5d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c61:	48 8d 90 60 01 00 00 	lea    0x160(%rax),%rdx
   11c68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c6c:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11c73:	48 89 c6             	mov    %rax,%rsi
   11c76:	48 89 d7             	mov    %rdx,%rdi
   11c79:	e8 d2 49 00 00       	call   16650 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm>
  sync.inFlightFence.resize(maxFramesInFlight);
   11c7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c82:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   11c89:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11c8d:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11c94:	48 89 c6             	mov    %rax,%rsi
   11c97:	48 89 d7             	mov    %rdx,%rdi
   11c9a:	e8 37 4a 00 00       	call   166d6 <_ZNSt6vectorIP9VkFence_TSaIS1_EE6resizeEm>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   11c9f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   11ca6:	00 
   11ca7:	e9 b9 00 00 00       	jmp    11d65 <_ZN9VulkanApp28createSynchronizationObjectsEv+0x165>
    sync.imageAvailableSemaphore[i] =
        vkh::createSemaphore(device, &semaphoreInfo);
   11cac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11cb0:	48 8b 40 50          	mov    0x50(%rax),%rax
   11cb4:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   11cb8:	ba 00 00 00 00       	mov    $0x0,%edx
   11cbd:	48 89 ce             	mov    %rcx,%rsi
   11cc0:	48 89 c7             	mov    %rax,%rdi
   11cc3:	e8 3f 5b ff ff       	call   7807 <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks>
   11cc8:	48 89 c3             	mov    %rax,%rbx
    sync.imageAvailableSemaphore[i] =
   11ccb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11ccf:	48 8d 90 48 01 00 00 	lea    0x148(%rax),%rdx
   11cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11cda:	48 89 c6             	mov    %rax,%rsi
   11cdd:	48 89 d7             	mov    %rdx,%rdi
   11ce0:	e8 77 4a 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   11ce5:	48 89 18             	mov    %rbx,(%rax)
    sync.renderFinisedSemaphore[i] =
        vkh::createSemaphore(device, &semaphoreInfo);
   11ce8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11cec:	48 8b 40 50          	mov    0x50(%rax),%rax
   11cf0:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   11cf4:	ba 00 00 00 00       	mov    $0x0,%edx
   11cf9:	48 89 ce             	mov    %rcx,%rsi
   11cfc:	48 89 c7             	mov    %rax,%rdi
   11cff:	e8 03 5b ff ff       	call   7807 <_ZN3vkh15createSemaphoreEP10VkDevice_TPK21VkSemaphoreCreateInfoPK21VkAllocationCallbacks>
   11d04:	48 89 c3             	mov    %rax,%rbx
    sync.renderFinisedSemaphore[i] =
   11d07:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11d0b:	48 8d 90 60 01 00 00 	lea    0x160(%rax),%rdx
   11d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d16:	48 89 c6             	mov    %rax,%rsi
   11d19:	48 89 d7             	mov    %rdx,%rdi
   11d1c:	e8 3b 4a 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   11d21:	48 89 18             	mov    %rbx,(%rax)
    sync.inFlightFence[i] = vkh::createFence(device, &fenceInfo);
   11d24:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11d28:	48 8b 40 50          	mov    0x50(%rax),%rax
   11d2c:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
   11d30:	ba 00 00 00 00       	mov    $0x0,%edx
   11d35:	48 89 ce             	mov    %rcx,%rsi
   11d38:	48 89 c7             	mov    %rax,%rdi
   11d3b:	e8 5f 5b ff ff       	call   789f <_ZN3vkh11createFenceEP10VkDevice_TPK17VkFenceCreateInfoPK21VkAllocationCallbacks>
   11d40:	48 89 c3             	mov    %rax,%rbx
   11d43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11d47:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   11d4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d52:	48 89 c6             	mov    %rax,%rsi
   11d55:	48 89 d7             	mov    %rdx,%rdi
   11d58:	e8 1f 4a 00 00       	call   1677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>
   11d5d:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   11d60:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   11d65:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11d69:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   11d70:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   11d74:	0f 82 32 ff ff ff    	jb     11cac <_ZN9VulkanApp28createSynchronizationObjectsEv+0xac>
  }
}
   11d7a:	90                   	nop
   11d7b:	90                   	nop
   11d7c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   11d80:	c9                   	leave
   11d81:	c3                   	ret

0000000000011d82 <_ZN9VulkanApp25createDescriptorSetLayoutEv>:

void VulkanApp::createDescriptorSetLayout() {
   11d82:	55                   	push   %rbp
   11d83:	48 89 e5             	mov    %rsp,%rbp
   11d86:	41 54                	push   %r12
   11d88:	53                   	push   %rbx
   11d89:	48 83 ec 50          	sub    $0x50,%rsp
   11d8d:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  VkDescriptorSetLayoutBinding uboLayoutBinding{};
   11d91:	66 0f ef c0          	pxor   %xmm0,%xmm0
   11d95:	0f 29 45 d0          	movaps %xmm0,-0x30(%rbp)
   11d99:	66 0f d6 45 e0       	movq   %xmm0,-0x20(%rbp)
  uboLayoutBinding.binding = 0;
   11d9e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
  uboLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
   11da5:	c7 45 d4 06 00 00 00 	movl   $0x6,-0x2c(%rbp)
  uboLayoutBinding.descriptorCount = 1;
   11dac:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%rbp)
  uboLayoutBinding.stageFlags = VK_SHADER_STAGE_VERTEX_BIT;
   11db3:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
  uboLayoutBinding.pImmutableSamplers = nullptr;
   11dba:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   11dc1:	00 

  VkDescriptorSetLayoutCreateInfo layoutInfo;
  layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
   11dc2:	c7 45 b0 20 00 00 00 	movl   $0x20,-0x50(%rbp)
  layoutInfo.bindingCount = 1;
   11dc9:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
  layoutInfo.pBindings = &uboLayoutBinding;
   11dd0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   11dd4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr,
   11dd8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11ddc:	48 8d 90 e8 01 00 00 	lea    0x1e8(%rax),%rdx
   11de3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11de7:	48 8b 40 50          	mov    0x50(%rax),%rax
   11deb:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
   11def:	48 89 d1             	mov    %rdx,%rcx
   11df2:	ba 00 00 00 00       	mov    $0x0,%edx
   11df7:	48 89 c7             	mov    %rax,%rdi
   11dfa:	e8 b1 2b ff ff       	call   49b0 <vkCreateDescriptorSetLayout@plt>
                                  &descriptorSetLayout) != VK_SUCCESS) {
   11dff:	85 c0                	test   %eax,%eax
   11e01:	0f 95 c0             	setne  %al
  if (vkCreateDescriptorSetLayout(device, &layoutInfo, nullptr,
   11e04:	84 c0                	test   %al,%al
   11e06:	74 51                	je     11e59 <_ZN9VulkanApp25createDescriptorSetLayoutEv+0xd7>
    throw std::runtime_error("Failed to create descriptor set layout.");
   11e08:	bf 10 00 00 00       	mov    $0x10,%edi
   11e0d:	e8 be 23 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   11e12:	48 89 c3             	mov    %rax,%rbx
   11e15:	48 8d 05 b4 14 01 00 	lea    0x114b4(%rip),%rax        # 232d0 <_ZZN9VulkanApp12createBufferEmjjRP10VkBuffer_TRP16VkDeviceMemory_TE17vertexBufferCount+0x58>
   11e1c:	48 89 c6             	mov    %rax,%rsi
   11e1f:	48 89 df             	mov    %rbx,%rdi
   11e22:	e8 19 23 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   11e27:	48 8b 05 8a 31 02 00 	mov    0x2318a(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   11e2e:	48 89 c2             	mov    %rax,%rdx
   11e31:	48 8d 05 08 2f 02 00 	lea    0x22f08(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   11e38:	48 89 c6             	mov    %rax,%rsi
   11e3b:	48 89 df             	mov    %rbx,%rdi
   11e3e:	e8 bd 2a ff ff       	call   4900 <__cxa_throw@plt>
   11e43:	49 89 c4             	mov    %rax,%r12
   11e46:	48 89 df             	mov    %rbx,%rdi
   11e49:	e8 b2 24 ff ff       	call   4300 <__cxa_free_exception@plt>
   11e4e:	4c 89 e0             	mov    %r12,%rax
   11e51:	48 89 c7             	mov    %rax,%rdi
   11e54:	e8 17 2b ff ff       	call   4970 <_Unwind_Resume@plt>
  }
}
   11e59:	90                   	nop
   11e5a:	48 83 c4 50          	add    $0x50,%rsp
   11e5e:	5b                   	pop    %rbx
   11e5f:	41 5c                	pop    %r12
   11e61:	5d                   	pop    %rbp
   11e62:	c3                   	ret
   11e63:	90                   	nop

0000000000011e64 <_ZN9VulkanApp6renderEv>:

void VulkanApp::render() {
   11e64:	55                   	push   %rbp
   11e65:	48 89 e5             	mov    %rsp,%rbp
   11e68:	41 57                	push   %r15
   11e6a:	41 56                	push   %r14
   11e6c:	41 55                	push   %r13
   11e6e:	41 54                	push   %r12
   11e70:	53                   	push   %rbx
   11e71:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
   11e78:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  /* 1. Wait for the previous frame to finish */
  vkWaitForFences(device, 1, &sync.inFlightFence[sync.currentFrame], VK_TRUE,
   11e7f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11e86:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   11e8d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11e94:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   11e9b:	48 89 c6             	mov    %rax,%rsi
   11e9e:	48 89 d7             	mov    %rdx,%rdi
   11ea1:	e8 d6 48 00 00       	call   1677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>
   11ea6:	48 89 c2             	mov    %rax,%rdx
   11ea9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11eb0:	48 8b 40 50          	mov    0x50(%rax),%rax
   11eb4:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   11ebb:	b9 01 00 00 00       	mov    $0x1,%ecx
   11ec0:	be 01 00 00 00       	mov    $0x1,%esi
   11ec5:	48 89 c7             	mov    %rax,%rdi
   11ec8:	e8 73 23 ff ff       	call   4240 <vkWaitForFences@plt>

  /* 2. Acquire an image frome the swapchain */
  uint32_t imageIndex;
  VkResult result =
      vkAcquireNextImageKHR(device, swapchain.self, UINT64_MAX,
                            sync.imageAvailableSemaphore[sync.currentFrame],
   11ecd:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11ed4:	48 8d 90 48 01 00 00 	lea    0x148(%rax),%rdx
   11edb:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11ee2:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   11ee9:	48 89 c6             	mov    %rax,%rsi
   11eec:	48 89 d7             	mov    %rdx,%rdi
   11eef:	e8 68 48 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
      vkAcquireNextImageKHR(device, swapchain.self, UINT64_MAX,
   11ef4:	48 8b 10             	mov    (%rax),%rdx
   11ef7:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11efe:	48 8b 70 70          	mov    0x70(%rax),%rsi
   11f02:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11f09:	48 8b 40 50          	mov    0x50(%rax),%rax
   11f0d:	48 8d 4d a4          	lea    -0x5c(%rbp),%rcx
   11f11:	49 89 c9             	mov    %rcx,%r9
   11f14:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   11f1a:	48 89 d1             	mov    %rdx,%rcx
   11f1d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   11f24:	48 89 c7             	mov    %rax,%rdi
   11f27:	e8 54 22 ff ff       	call   4180 <vkAcquireNextImageKHR@plt>
   11f2c:	89 45 cc             	mov    %eax,-0x34(%rbp)
                            VK_NULL_HANDLE, &imageIndex);
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR) {
   11f2f:	81 7d cc eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x34(%rbp)
   11f36:	74 09                	je     11f41 <_ZN9VulkanApp6renderEv+0xdd>
   11f38:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   11f3f:	75 14                	jne    11f55 <_ZN9VulkanApp6renderEv+0xf1>
    recreateSwapchain();
   11f41:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11f48:	48 89 c7             	mov    %rax,%rdi
   11f4b:	e8 e6 e9 ff ff       	call   10936 <_ZN9VulkanApp17recreateSwapchainEv>
    throw std::runtime_error("Failed to present swapchain image.");
  }

  /* 6. Set up the next frame */
  sync.currentFrame = (sync.currentFrame + 1) % maxFramesInFlight;
}
   11f50:	e9 0a 06 00 00       	jmp    1255f <_ZN9VulkanApp6renderEv+0x6fb>
  } else if (result != VK_SUCCESS) {
   11f55:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   11f59:	74 3b                	je     11f96 <_ZN9VulkanApp6renderEv+0x132>
    throw std::runtime_error("Failed to acquire swapchain image.");
   11f5b:	bf 10 00 00 00       	mov    $0x10,%edi
   11f60:	e8 6b 22 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   11f65:	48 89 c3             	mov    %rax,%rbx
   11f68:	48 8d 05 91 13 01 00 	lea    0x11391(%rip),%rax        # 23300 <_ZZN9VulkanApp6renderEvE11submitCount+0x8>
   11f6f:	48 89 c6             	mov    %rax,%rsi
   11f72:	48 89 df             	mov    %rbx,%rdi
   11f75:	e8 c6 21 ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   11f7a:	48 8b 05 37 30 02 00 	mov    0x23037(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   11f81:	48 89 c2             	mov    %rax,%rdx
   11f84:	48 8d 05 b5 2d 02 00 	lea    0x22db5(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   11f8b:	48 89 c6             	mov    %rax,%rsi
   11f8e:	48 89 df             	mov    %rbx,%rdi
   11f91:	e8 6a 29 ff ff       	call   4900 <__cxa_throw@plt>
  vkResetFences(device, 1, &sync.inFlightFence[sync.currentFrame]);
   11f96:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11f9d:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   11fa4:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11fab:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   11fb2:	48 89 c6             	mov    %rax,%rsi
   11fb5:	48 89 d7             	mov    %rdx,%rdi
   11fb8:	e8 bf 47 00 00       	call   1677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>
   11fbd:	48 89 c2             	mov    %rax,%rdx
   11fc0:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11fc7:	48 8b 40 50          	mov    0x50(%rax),%rax
   11fcb:	be 01 00 00 00       	mov    $0x1,%esi
   11fd0:	48 89 c7             	mov    %rax,%rdi
   11fd3:	e8 48 28 ff ff       	call   4820 <vkResetFences@plt>
  vkResetCommandBuffer(commandBuffers[sync.currentFrame], 0);
   11fd8:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11fdf:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
   11fe6:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   11fed:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   11ff4:	48 89 c6             	mov    %rax,%rsi
   11ff7:	48 89 d7             	mov    %rdx,%rdi
   11ffa:	e8 9d 47 00 00       	call   1679c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEixEm>
   11fff:	48 8b 00             	mov    (%rax),%rax
   12002:	be 00 00 00 00       	mov    $0x0,%esi
   12007:	48 89 c7             	mov    %rax,%rdi
   1200a:	e8 61 26 ff ff       	call   4670 <vkResetCommandBuffer@plt>
  recordCommandBuffer(commandBuffers[sync.currentFrame], imageIndex);
   1200f:	8b 5d a4             	mov    -0x5c(%rbp),%ebx
   12012:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12019:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
   12020:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12027:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   1202e:	48 89 c6             	mov    %rax,%rsi
   12031:	48 89 d7             	mov    %rdx,%rdi
   12034:	e8 63 47 00 00       	call   1679c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEixEm>
   12039:	48 8b 08             	mov    (%rax),%rcx
   1203c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12043:	89 da                	mov    %ebx,%edx
   12045:	48 89 ce             	mov    %rcx,%rsi
   12048:	48 89 c7             	mov    %rax,%rdi
   1204b:	e8 e8 ec ff ff       	call   10d38 <_ZN9VulkanApp19recordCommandBufferEP17VkCommandBuffer_Tj>
      sync.imageAvailableSemaphore[sync.currentFrame]};
   12050:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12057:	48 8d 90 48 01 00 00 	lea    0x148(%rax),%rdx
   1205e:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12065:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   1206c:	48 89 c6             	mov    %rax,%rsi
   1206f:	48 89 d7             	mov    %rdx,%rdi
   12072:	e8 e5 46 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   12077:	48 8b 00             	mov    (%rax),%rax
   1207a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1207e:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   12082:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
   12089:	48 c7 85 98 fe ff ff 	movq   $0x1,-0x168(%rbp)
   12090:	01 00 00 00 
   12094:	48 8d 45 b7          	lea    -0x49(%rbp),%rax
   12098:	48 89 c7             	mov    %rax,%rdi
   1209b:	e8 1c 47 00 00       	call   167bc <_ZNSaIP13VkSemaphore_TEC1Ev>
   120a0:	48 8d 55 b7          	lea    -0x49(%rbp),%rdx
   120a4:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
   120ab:	48 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%rbx
   120b2:	48 89 ce             	mov    %rcx,%rsi
   120b5:	48 89 df             	mov    %rbx,%rdi
   120b8:	48 89 df             	mov    %rbx,%rdi
   120bb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   120bf:	48 89 d1             	mov    %rdx,%rcx
   120c2:	48 89 fa             	mov    %rdi,%rdx
   120c5:	48 89 c7             	mov    %rax,%rdi
   120c8:	e8 27 47 00 00       	call   167f4 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   120cd:	48 8d 45 b7          	lea    -0x49(%rbp),%rax
   120d1:	48 89 c7             	mov    %rax,%rdi
   120d4:	e8 ff 46 00 00       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
      VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT};
   120d9:	c7 45 b8 00 04 00 00 	movl   $0x400,-0x48(%rbp)
   120e0:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
   120e4:	49 89 c6             	mov    %rax,%r14
   120e7:	41 bf 01 00 00 00    	mov    $0x1,%r15d
   120ed:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   120f1:	48 89 c7             	mov    %rax,%rdi
   120f4:	e8 c7 47 00 00       	call   168c0 <_ZNSaIjEC1Ev>
   120f9:	48 8d 55 bf          	lea    -0x41(%rbp),%rdx
   120fd:	4c 89 f6             	mov    %r14,%rsi
   12100:	4c 89 ff             	mov    %r15,%rdi
   12103:	4c 89 f1             	mov    %r14,%rcx
   12106:	4c 89 fb             	mov    %r15,%rbx
   12109:	48 89 df             	mov    %rbx,%rdi
   1210c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   12113:	48 89 d1             	mov    %rdx,%rcx
   12116:	48 89 fa             	mov    %rdi,%rdx
   12119:	48 89 c7             	mov    %rax,%rdi
   1211c:	e8 d7 47 00 00       	call   168f8 <_ZNSt6vectorIjSaIjEEC1ESt16initializer_listIjERKS0_>
   12121:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   12125:	48 89 c7             	mov    %rax,%rdi
   12128:	e8 af 47 00 00       	call   168dc <_ZNSaIjED1Ev>
      sync.renderFinisedSemaphore[sync.currentFrame]};
   1212d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12134:	48 8d 90 60 01 00 00 	lea    0x160(%rax),%rdx
   1213b:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12142:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   12149:	48 89 c6             	mov    %rax,%rsi
   1214c:	48 89 d7             	mov    %rdx,%rdi
   1214f:	e8 08 46 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   12154:	48 8b 00             	mov    (%rax),%rax
   12157:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1215b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1215f:	49 89 c4             	mov    %rax,%r12
   12162:	41 bd 01 00 00 00    	mov    $0x1,%r13d
   12168:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
   1216c:	48 89 c7             	mov    %rax,%rdi
   1216f:	e8 48 46 00 00       	call   167bc <_ZNSaIP13VkSemaphore_TEC1Ev>
   12174:	48 8d 55 cb          	lea    -0x35(%rbp),%rdx
   12178:	4c 89 e6             	mov    %r12,%rsi
   1217b:	4c 89 ef             	mov    %r13,%rdi
   1217e:	4c 89 e1             	mov    %r12,%rcx
   12181:	4c 89 eb             	mov    %r13,%rbx
   12184:	48 89 df             	mov    %rbx,%rdi
   12187:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1218e:	48 89 d1             	mov    %rdx,%rcx
   12191:	48 89 fa             	mov    %rdi,%rdx
   12194:	48 89 c7             	mov    %rax,%rdi
   12197:	e8 58 46 00 00       	call   167f4 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   1219c:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
   121a0:	48 89 c7             	mov    %rax,%rdi
   121a3:	e8 30 46 00 00       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
  updateUniformBuffer(imageIndex);
   121a8:	8b 55 a4             	mov    -0x5c(%rbp),%edx
   121ab:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   121b2:	89 d6                	mov    %edx,%esi
   121b4:	48 89 c7             	mov    %rax,%rdi
   121b7:	e8 84 f5 ff ff       	call   11740 <_ZN9VulkanApp19updateUniformBufferEj>
  VkSubmitInfo submitInfo{};
   121bc:	66 0f ef c0          	pxor   %xmm0,%xmm0
   121c0:	0f 29 85 f0 fe ff ff 	movaps %xmm0,-0x110(%rbp)
   121c7:	0f 29 85 00 ff ff ff 	movaps %xmm0,-0x100(%rbp)
   121ce:	0f 29 85 10 ff ff ff 	movaps %xmm0,-0xf0(%rbp)
   121d5:	0f 29 85 20 ff ff ff 	movaps %xmm0,-0xe0(%rbp)
   121dc:	66 0f d6 85 30 ff ff 	movq   %xmm0,-0xd0(%rbp)
   121e3:	ff 
  submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
   121e4:	c7 85 f0 fe ff ff 04 	movl   $0x4,-0x110(%rbp)
   121eb:	00 00 00 
  submitInfo.waitSemaphoreCount = static_cast<uint32_t>(waitSemaphores.size());
   121ee:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   121f2:	48 89 c7             	mov    %rax,%rdi
   121f5:	e8 ca 47 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   121fa:	89 85 00 ff ff ff    	mov    %eax,-0x100(%rbp)
  submitInfo.pWaitSemaphores = waitSemaphores.data();
   12200:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   12204:	48 89 c7             	mov    %rax,%rdi
   12207:	e8 dc 47 00 00       	call   169e8 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE4dataEv>
   1220c:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  submitInfo.pWaitDstStageMask = waitStages.data();
   12213:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   1221a:	48 89 c7             	mov    %rax,%rdi
   1221d:	e8 ea 47 00 00       	call   16a0c <_ZNSt6vectorIjSaIjEE4dataEv>
   12222:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  submitInfo.commandBufferCount = 1;
   12229:	c7 85 18 ff ff ff 01 	movl   $0x1,-0xe8(%rbp)
   12230:	00 00 00 
  submitInfo.pCommandBuffers = &commandBuffers[sync.currentFrame];
   12233:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   1223a:	48 8d 90 28 01 00 00 	lea    0x128(%rax),%rdx
   12241:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12248:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   1224f:	48 89 c6             	mov    %rax,%rsi
   12252:	48 89 d7             	mov    %rdx,%rdi
   12255:	e8 42 45 00 00       	call   1679c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEixEm>
   1225a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
      static_cast<uint32_t>(signalSemaphores.size());
   12261:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   12268:	48 89 c7             	mov    %rax,%rdi
   1226b:	e8 54 47 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
  submitInfo.signalSemaphoreCount =
   12270:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
  submitInfo.pSignalSemaphores = signalSemaphores.data();
   12276:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1227d:	48 89 c7             	mov    %rax,%rdi
   12280:	e8 63 47 00 00       	call   169e8 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE4dataEv>
   12285:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
                    sync.inFlightFence[sync.currentFrame]) != VK_SUCCESS) {
   1228c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12293:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   1229a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   122a1:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   122a8:	48 89 c6             	mov    %rax,%rsi
   122ab:	48 89 d7             	mov    %rdx,%rdi
   122ae:	e8 c9 44 00 00       	call   1677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>
  if (vkQueueSubmit(queue, submitCount, &submitInfo,
   122b3:	48 8b 08             	mov    (%rax),%rcx
   122b6:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   122bd:	48 8b 40 60          	mov    0x60(%rax),%rax
   122c1:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
   122c8:	be 01 00 00 00       	mov    $0x1,%esi
   122cd:	48 89 c7             	mov    %rax,%rdi
   122d0:	e8 fb 23 ff ff       	call   46d0 <vkQueueSubmit@plt>
                    sync.inFlightFence[sync.currentFrame]) != VK_SUCCESS) {
   122d5:	85 c0                	test   %eax,%eax
   122d7:	0f 95 c0             	setne  %al
  if (vkQueueSubmit(queue, submitCount, &submitInfo,
   122da:	84 c0                	test   %al,%al
   122dc:	74 3b                	je     12319 <_ZN9VulkanApp6renderEv+0x4b5>
    throw std::runtime_error("Failed to submit draw command buffer.");
   122de:	bf 10 00 00 00       	mov    $0x10,%edi
   122e3:	e8 e8 1e ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   122e8:	48 89 c3             	mov    %rax,%rbx
   122eb:	48 8d 05 36 10 01 00 	lea    0x11036(%rip),%rax        # 23328 <_ZZN9VulkanApp6renderEvE11submitCount+0x30>
   122f2:	48 89 c6             	mov    %rax,%rsi
   122f5:	48 89 df             	mov    %rbx,%rdi
   122f8:	e8 43 1e ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   122fd:	48 8b 05 b4 2c 02 00 	mov    0x22cb4(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   12304:	48 89 c2             	mov    %rax,%rdx
   12307:	48 8d 05 32 2a 02 00 	lea    0x22a32(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   1230e:	48 89 c6             	mov    %rax,%rsi
   12311:	48 89 df             	mov    %rbx,%rdi
   12314:	e8 e7 25 ff ff       	call   4900 <__cxa_throw@plt>
  VkPresentInfoKHR presentInfo{};
   12319:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1231d:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
   12324:	0f 29 85 c0 fe ff ff 	movaps %xmm0,-0x140(%rbp)
   1232b:	0f 29 85 d0 fe ff ff 	movaps %xmm0,-0x130(%rbp)
   12332:	0f 29 85 e0 fe ff ff 	movaps %xmm0,-0x120(%rbp)
  presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
   12339:	c7 85 b0 fe ff ff e9 	movl   $0x3b9acde9,-0x150(%rbp)
   12340:	cd 9a 3b 
      static_cast<uint32_t>(signalSemaphores.size());
   12343:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1234a:	48 89 c7             	mov    %rax,%rdi
   1234d:	e8 72 46 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
  presentInfo.waitSemaphoreCount =
   12352:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
  presentInfo.pWaitSemaphores = signalSemaphores.data();
   12358:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1235f:	48 89 c7             	mov    %rax,%rdi
   12362:	e8 81 46 00 00       	call   169e8 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE4dataEv>
   12367:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  presentInfo.swapchainCount = swapchainCount;
   1236e:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12375:	8b 80 8c 00 00 00    	mov    0x8c(%rax),%eax
   1237b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
  presentInfo.pSwapchains = &swapchain.self;
   12381:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12388:	48 83 c0 70          	add    $0x70,%rax
   1238c:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  presentInfo.pImageIndices = &imageIndex;
   12393:	48 8d 45 a4          	lea    -0x5c(%rbp),%rax
   12397:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  presentInfo.pResults = nullptr;
   1239e:	48 c7 85 e8 fe ff ff 	movq   $0x0,-0x118(%rbp)
   123a5:	00 00 00 00 
  result = vkQueuePresentKHR(queue, &presentInfo);
   123a9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   123b0:	48 8b 40 60          	mov    0x60(%rax),%rax
   123b4:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
   123bb:	48 89 d6             	mov    %rdx,%rsi
   123be:	48 89 c7             	mov    %rax,%rdi
   123c1:	e8 9a 24 ff ff       	call   4860 <vkQueuePresentKHR@plt>
   123c6:	89 45 cc             	mov    %eax,-0x34(%rbp)
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR ||
   123c9:	81 7d cc eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x34(%rbp)
   123d0:	74 1b                	je     123ed <_ZN9VulkanApp6renderEv+0x589>
   123d2:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
   123d9:	74 12                	je     123ed <_ZN9VulkanApp6renderEv+0x589>
      framebufferResized) {
   123db:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   123e2:	0f b6 80 18 01 00 00 	movzbl 0x118(%rax),%eax
  if (result == VK_SUBOPTIMAL_KHR || result == VK_ERROR_OUT_OF_DATE_KHR ||
   123e9:	84 c0                	test   %al,%al
   123eb:	74 1f                	je     1240c <_ZN9VulkanApp6renderEv+0x5a8>
    framebufferResized = false;
   123ed:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   123f4:	c6 80 18 01 00 00 00 	movb   $0x0,0x118(%rax)
    recreateSwapchain();
   123fb:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12402:	48 89 c7             	mov    %rax,%rdi
   12405:	e8 2c e5 ff ff       	call   10936 <_ZN9VulkanApp17recreateSwapchainEv>
   1240a:	eb 41                	jmp    1244d <_ZN9VulkanApp6renderEv+0x5e9>
  } else if (result != VK_SUCCESS) {
   1240c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   12410:	74 3b                	je     1244d <_ZN9VulkanApp6renderEv+0x5e9>
    throw std::runtime_error("Failed to present swapchain image.");
   12412:	bf 10 00 00 00       	mov    $0x10,%edi
   12417:	e8 b4 1d ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   1241c:	48 89 c3             	mov    %rax,%rbx
   1241f:	48 8d 05 2a 0f 01 00 	lea    0x10f2a(%rip),%rax        # 23350 <_ZZN9VulkanApp6renderEvE11submitCount+0x58>
   12426:	48 89 c6             	mov    %rax,%rsi
   12429:	48 89 df             	mov    %rbx,%rdi
   1242c:	e8 0f 1d ff ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   12431:	48 8b 05 80 2b 02 00 	mov    0x22b80(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   12438:	48 89 c2             	mov    %rax,%rdx
   1243b:	48 8d 05 fe 28 02 00 	lea    0x228fe(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   12442:	48 89 c6             	mov    %rax,%rsi
   12445:	48 89 df             	mov    %rbx,%rdi
   12448:	e8 b3 24 ff ff       	call   4900 <__cxa_throw@plt>
  sync.currentFrame = (sync.currentFrame + 1) % maxFramesInFlight;
   1244d:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12454:	48 8b 80 90 01 00 00 	mov    0x190(%rax),%rax
   1245b:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1245f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   12466:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
   1246d:	48 89 d0             	mov    %rdx,%rax
   12470:	ba 00 00 00 00       	mov    $0x0,%edx
   12475:	48 f7 f1             	div    %rcx
   12478:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   1247f:	48 89 90 90 01 00 00 	mov    %rdx,0x190(%rax)
}
   12486:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1248d:	48 89 c7             	mov    %rax,%rdi
   12490:	e8 e7 43 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   12495:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   1249c:	48 89 c7             	mov    %rax,%rdi
   1249f:	e8 dc 44 00 00       	call   16980 <_ZNSt6vectorIjSaIjEED1Ev>
   124a4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   124a8:	48 89 c7             	mov    %rax,%rdi
   124ab:	e8 cc 43 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   124b0:	e9 aa 00 00 00       	jmp    1255f <_ZN9VulkanApp6renderEv+0x6fb>
    throw std::runtime_error("Failed to acquire swapchain image.");
   124b5:	49 89 c4             	mov    %rax,%r12
   124b8:	48 89 df             	mov    %rbx,%rdi
   124bb:	e8 40 1e ff ff       	call   4300 <__cxa_free_exception@plt>
   124c0:	4c 89 e0             	mov    %r12,%rax
   124c3:	48 89 c7             	mov    %rax,%rdi
   124c6:	e8 a5 24 ff ff       	call   4970 <_Unwind_Resume@plt>
      sync.imageAvailableSemaphore[sync.currentFrame]};
   124cb:	48 89 c3             	mov    %rax,%rbx
   124ce:	48 8d 45 b7          	lea    -0x49(%rbp),%rax
   124d2:	48 89 c7             	mov    %rax,%rdi
   124d5:	e8 fe 42 00 00       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
   124da:	48 89 d8             	mov    %rbx,%rax
   124dd:	48 89 c7             	mov    %rax,%rdi
   124e0:	e8 8b 24 ff ff       	call   4970 <_Unwind_Resume@plt>
      VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT};
   124e5:	48 89 c3             	mov    %rax,%rbx
   124e8:	48 8d 45 bf          	lea    -0x41(%rbp),%rax
   124ec:	48 89 c7             	mov    %rax,%rdi
   124ef:	e8 e8 43 00 00       	call   168dc <_ZNSaIjED1Ev>
   124f4:	eb 52                	jmp    12548 <_ZN9VulkanApp6renderEv+0x6e4>
      sync.renderFinisedSemaphore[sync.currentFrame]};
   124f6:	48 89 c3             	mov    %rax,%rbx
   124f9:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
   124fd:	48 89 c7             	mov    %rax,%rdi
   12500:	e8 d3 42 00 00       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
   12505:	eb 32                	jmp    12539 <_ZN9VulkanApp6renderEv+0x6d5>
    throw std::runtime_error("Failed to submit draw command buffer.");
   12507:	49 89 c4             	mov    %rax,%r12
   1250a:	48 89 df             	mov    %rbx,%rdi
   1250d:	e8 ee 1d ff ff       	call   4300 <__cxa_free_exception@plt>
   12512:	4c 89 e3             	mov    %r12,%rbx
   12515:	eb 13                	jmp    1252a <_ZN9VulkanApp6renderEv+0x6c6>
    throw std::runtime_error("Failed to present swapchain image.");
   12517:	49 89 c4             	mov    %rax,%r12
   1251a:	48 89 df             	mov    %rbx,%rdi
   1251d:	e8 de 1d ff ff       	call   4300 <__cxa_free_exception@plt>
   12522:	4c 89 e3             	mov    %r12,%rbx
   12525:	eb 03                	jmp    1252a <_ZN9VulkanApp6renderEv+0x6c6>
}
   12527:	48 89 c3             	mov    %rax,%rbx
   1252a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   12531:	48 89 c7             	mov    %rax,%rdi
   12534:	e8 43 43 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   12539:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   12540:	48 89 c7             	mov    %rax,%rdi
   12543:	e8 38 44 00 00       	call   16980 <_ZNSt6vectorIjSaIjEED1Ev>
   12548:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1254c:	48 89 c7             	mov    %rax,%rdi
   1254f:	e8 28 43 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   12554:	48 89 d8             	mov    %rbx,%rax
   12557:	48 89 c7             	mov    %rax,%rdi
   1255a:	e8 11 24 ff ff       	call   4970 <_Unwind_Resume@plt>
   1255f:	48 81 c4 48 01 00 00 	add    $0x148,%rsp
   12566:	5b                   	pop    %rbx
   12567:	41 5c                	pop    %r12
   12569:	41 5d                	pop    %r13
   1256b:	41 5e                	pop    %r14
   1256d:	41 5f                	pop    %r15
   1256f:	5d                   	pop    %rbp
   12570:	c3                   	ret
   12571:	90                   	nop

0000000000012572 <_ZN9VulkanAppC1Ev>:

VulkanApp::VulkanApp() {
   12572:	55                   	push   %rbp
   12573:	48 89 e5             	mov    %rsp,%rbp
   12576:	41 57                	push   %r15
   12578:	41 56                	push   %r14
   1257a:	41 55                	push   %r13
   1257c:	41 54                	push   %r12
   1257e:	53                   	push   %rbx
   1257f:	48 83 ec 38          	sub    $0x38,%rsp
   12583:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   12587:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1258b:	48 8d 58 10          	lea    0x10(%rax),%rbx
   1258f:	48 8d 05 dd 0d 01 00 	lea    0x10ddd(%rip),%rax        # 23373 <_ZZN9VulkanApp6renderEvE11submitCount+0x7b>
   12596:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1259a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1259e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   125a2:	48 c7 45 a8 01 00 00 	movq   $0x1,-0x58(%rbp)
   125a9:	00 
   125aa:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
   125ae:	48 89 c7             	mov    %rax,%rdi
   125b1:	e8 bc 74 ff ff       	call   9a72 <_ZNSaIPKcEC1Ev>
   125b6:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
   125ba:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
   125be:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   125c2:	49 89 f0             	mov    %rsi,%r8
   125c5:	49 89 f9             	mov    %rdi,%r9
   125c8:	48 89 fa             	mov    %rdi,%rdx
   125cb:	48 89 c1             	mov    %rax,%rcx
   125ce:	4c 89 c6             	mov    %r8,%rsi
   125d1:	48 89 df             	mov    %rbx,%rdi
   125d4:	e8 b7 1e 00 00       	call   14490 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   125d9:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
   125dd:	48 89 c7             	mov    %rax,%rdi
   125e0:	e8 a9 74 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   125e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   125e9:	48 8d 58 28          	lea    0x28(%rax),%rbx
   125ed:	4c 8d 35 ec 26 02 00 	lea    0x226ec(%rip),%r14        # 34ce0 <C.191.0>
   125f4:	41 bf 02 00 00 00    	mov    $0x2,%r15d
   125fa:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
   125fe:	48 89 c7             	mov    %rax,%rdi
   12601:	e8 6c 74 ff ff       	call   9a72 <_ZNSaIPKcEC1Ev>
   12606:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
   1260a:	4d 89 f0             	mov    %r14,%r8
   1260d:	4d 89 f9             	mov    %r15,%r9
   12610:	4c 89 f6             	mov    %r14,%rsi
   12613:	4c 89 ff             	mov    %r15,%rdi
   12616:	48 89 fa             	mov    %rdi,%rdx
   12619:	48 89 c1             	mov    %rax,%rcx
   1261c:	4c 89 c6             	mov    %r8,%rsi
   1261f:	48 89 df             	mov    %rbx,%rdi
   12622:	e8 69 1e 00 00       	call   14490 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   12627:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
   1262b:	48 89 c7             	mov    %rax,%rdi
   1262e:	e8 5b 74 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   12633:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12637:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%rax)
   1263e:	00 00 00 
   12641:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12645:	c7 80 8c 00 00 00 01 	movl   $0x1,0x8c(%rax)
   1264c:	00 00 00 
   1264f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12653:	48 8d 98 90 00 00 00 	lea    0x90(%rax),%rbx
   1265a:	4c 8d 25 8f 26 02 00 	lea    0x2268f(%rip),%r12        # 34cf0 <C.192.1>
   12661:	41 bd 02 00 00 00    	mov    $0x2,%r13d
   12667:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   1266b:	48 89 c7             	mov    %rax,%rdi
   1266e:	e8 ff 73 ff ff       	call   9a72 <_ZNSaIPKcEC1Ev>
   12673:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   12677:	4d 89 e0             	mov    %r12,%r8
   1267a:	4d 89 e9             	mov    %r13,%r9
   1267d:	4c 89 e6             	mov    %r12,%rsi
   12680:	4c 89 ef             	mov    %r13,%rdi
   12683:	48 89 fa             	mov    %rdi,%rdx
   12686:	48 89 c1             	mov    %rax,%rcx
   12689:	4c 89 c6             	mov    %r8,%rsi
   1268c:	48 89 df             	mov    %rbx,%rdi
   1268f:	e8 fc 1d 00 00       	call   14490 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
   12694:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   12698:	48 89 c7             	mov    %rax,%rdi
   1269b:	e8 ee 73 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   126a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126a4:	48 05 a8 00 00 00    	add    $0xa8,%rax
   126aa:	48 89 c7             	mov    %rax,%rdi
   126ad:	e8 96 1a 00 00       	call   14148 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1Ev>
   126b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126b6:	48 05 c0 00 00 00    	add    $0xc0,%rax
   126bc:	48 89 c7             	mov    %rax,%rdi
   126bf:	e8 bc 1a 00 00       	call   14180 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1Ev>
   126c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126c8:	48 05 d8 00 00 00    	add    $0xd8,%rax
   126ce:	48 89 c7             	mov    %rax,%rdi
   126d1:	e8 c6 1a 00 00       	call   1419c <_ZN3vkh23GraphicsPipelineWrapperC1Ev>
   126d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126da:	c7 80 f8 00 00 00 01 	movl   $0x1,0xf8(%rax)
   126e1:	00 00 00 
   126e4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126e8:	48 05 00 01 00 00    	add    $0x100,%rax
   126ee:	48 89 c7             	mov    %rax,%rdi
   126f1:	e8 18 1b 00 00       	call   1420e <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EEC1Ev>
   126f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   126fa:	c6 80 18 01 00 00 00 	movb   $0x0,0x118(%rax)
   12701:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12705:	48 c7 80 20 01 00 00 	movq   $0x2,0x120(%rax)
   1270c:	02 00 00 00 
   12710:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12714:	48 05 28 01 00 00    	add    $0x128,%rax
   1271a:	48 89 c7             	mov    %rax,%rdi
   1271d:	e8 24 1b 00 00       	call   14246 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1Ev>
   12722:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12726:	48 05 48 01 00 00    	add    $0x148,%rax
   1272c:	48 89 c7             	mov    %rax,%rdi
   1272f:	e8 d6 1b 00 00       	call   1430a <_ZN9VulkanApp11SyncWrapperC1Ev>
   12734:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12738:	48 05 b8 01 00 00    	add    $0x1b8,%rax
   1273e:	48 89 c7             	mov    %rax,%rdi
   12741:	e8 80 1c 00 00       	call   143c6 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EEC1Ev>
   12746:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1274a:	48 05 d0 01 00 00    	add    $0x1d0,%rax
   12750:	48 89 c7             	mov    %rax,%rdi
   12753:	e8 c2 1c 00 00       	call   1441a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEC1Ev>
  createWindow();
   12758:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1275c:	48 89 c7             	mov    %rax,%rdi
   1275f:	e8 32 c0 ff ff       	call   e796 <_ZN9VulkanApp12createWindowEv>
  createInstance();
   12764:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12768:	48 89 c7             	mov    %rax,%rdi
   1276b:	e8 94 c0 ff ff       	call   e804 <_ZN9VulkanApp14createInstanceEv>
  createDebugMessenger();
   12770:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12774:	48 89 c7             	mov    %rax,%rdi
   12777:	e8 6e c2 ff ff       	call   e9ea <_ZN9VulkanApp20createDebugMessengerEv>
  createSurface();
   1277c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12780:	48 89 c7             	mov    %rax,%rdi
   12783:	e8 f6 c2 ff ff       	call   ea7e <_ZN9VulkanApp13createSurfaceEv>
  createDevice();
   12788:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1278c:	48 89 c7             	mov    %rax,%rdi
   1278f:	e8 42 c5 ff ff       	call   ecd6 <_ZN9VulkanApp12createDeviceEv>
  createSwapchain();
   12794:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12798:	48 89 c7             	mov    %rax,%rdi
   1279b:	e8 54 d1 ff ff       	call   f8f4 <_ZN9VulkanApp15createSwapchainEv>
  createImageViews();
   127a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127a4:	48 89 c7             	mov    %rax,%rdi
   127a7:	e8 8e d1 ff ff       	call   f93a <_ZN9VulkanApp16createImageViewsEv>
  createDescriptorSetLayout();
   127ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127b0:	48 89 c7             	mov    %rax,%rdi
   127b3:	e8 ca f5 ff ff       	call   11d82 <_ZN9VulkanApp25createDescriptorSetLayoutEv>
  createGraphicsPipeline();
   127b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127bc:	48 89 c7             	mov    %rax,%rdi
   127bf:	e8 22 d3 ff ff       	call   fae6 <_ZN9VulkanApp22createGraphicsPipelineEv>
  createFramebuffers();
   127c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127c8:	48 89 c7             	mov    %rax,%rdi
   127cb:	e8 72 df ff ff       	call   10742 <_ZN9VulkanApp18createFramebuffersEv>
  createCommandPool();
   127d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127d4:	48 89 c7             	mov    %rax,%rdi
   127d7:	e8 70 e4 ff ff       	call   10c4c <_ZN9VulkanApp17createCommandPoolEv>
  createVertexBuffer();
   127dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127e0:	48 89 c7             	mov    %rax,%rdi
   127e3:	e8 e8 eb ff ff       	call   113d0 <_ZN9VulkanApp18createVertexBufferEv>
  createIndexBuffer();
   127e8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127ec:	48 89 c7             	mov    %rax,%rdi
   127ef:	e8 2e ed ff ff       	call   11522 <_ZN9VulkanApp17createIndexBufferEv>
  createUniformBuffers();
   127f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   127f8:	48 89 c7             	mov    %rax,%rdi
   127fb:	e8 66 ee ff ff       	call   11666 <_ZN9VulkanApp20createUniformBuffersEv>
  createCommandBuffers();
   12800:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12804:	48 89 c7             	mov    %rax,%rdi
   12807:	e8 a4 e4 ff ff       	call   10cb0 <_ZN9VulkanApp20createCommandBuffersEv>
  createSynchronizationObjects();
   1280c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12810:	48 89 c7             	mov    %rax,%rdi
   12813:	e8 e8 f3 ff ff       	call   11c00 <_ZN9VulkanApp28createSynchronizationObjectsEv>
}
   12818:	e9 00 01 00 00       	jmp    1291d <_ZN9VulkanAppC1Ev+0x3ab>
VulkanApp::VulkanApp() {
   1281d:	48 89 c3             	mov    %rax,%rbx
   12820:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
   12824:	48 89 c7             	mov    %rax,%rdi
   12827:	e8 62 72 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   1282c:	48 89 d8             	mov    %rbx,%rax
   1282f:	48 89 c7             	mov    %rax,%rdi
   12832:	e8 39 21 ff ff       	call   4970 <_Unwind_Resume@plt>
   12837:	48 89 c3             	mov    %rax,%rbx
   1283a:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
   1283e:	48 89 c7             	mov    %rax,%rdi
   12841:	e8 48 72 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   12846:	e9 b7 00 00 00       	jmp    12902 <_ZN9VulkanAppC1Ev+0x390>
   1284b:	48 89 c3             	mov    %rax,%rbx
   1284e:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   12852:	48 89 c7             	mov    %rax,%rdi
   12855:	e8 34 72 ff ff       	call   9a8e <_ZNSaIPKcED1Ev>
   1285a:	e9 93 00 00 00       	jmp    128f2 <_ZN9VulkanAppC1Ev+0x380>
}
   1285f:	48 89 c3             	mov    %rax,%rbx
   12862:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12866:	48 05 d0 01 00 00    	add    $0x1d0,%rax
   1286c:	48 89 c7             	mov    %rax,%rdi
   1286f:	e8 0c 46 00 00       	call   16e80 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EED1Ev>
   12874:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12878:	48 05 b8 01 00 00    	add    $0x1b8,%rax
   1287e:	48 89 c7             	mov    %rax,%rdi
   12881:	e8 24 45 00 00       	call   16daa <_ZNSt6vectorIP10VkBuffer_TSaIS1_EED1Ev>
   12886:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1288a:	48 05 48 01 00 00    	add    $0x148,%rax
   12890:	48 89 c7             	mov    %rax,%rdi
   12893:	e8 ba 1a 00 00       	call   14352 <_ZN9VulkanApp11SyncWrapperD1Ev>
   12898:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1289c:	48 05 28 01 00 00    	add    $0x128,%rax
   128a2:	48 89 c7             	mov    %rax,%rdi
   128a5:	e8 92 3f ff ff       	call   683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
   128aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   128ae:	48 05 00 01 00 00    	add    $0x100,%rax
   128b4:	48 89 c7             	mov    %rax,%rdi
   128b7:	e8 a4 42 00 00       	call   16b60 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EED1Ev>
   128bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   128c0:	48 05 c0 00 00 00    	add    $0xc0,%rax
   128c6:	48 89 c7             	mov    %rax,%rdi
   128c9:	e8 e6 7b ff ff       	call   a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
   128ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   128d2:	48 05 a8 00 00 00    	add    $0xa8,%rax
   128d8:	48 89 c7             	mov    %rax,%rdi
   128db:	e8 2a 2b 00 00       	call   1540a <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
   128e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   128e4:	48 05 90 00 00 00    	add    $0x90,%rax
   128ea:	48 89 c7             	mov    %rax,%rdi
   128ed:	e8 26 1c 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
VulkanApp::VulkanApp() {
   128f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   128f6:	48 83 c0 28          	add    $0x28,%rax
}
   128fa:	48 89 c7             	mov    %rax,%rdi
   128fd:	e8 16 1c 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   12902:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12906:	48 83 c0 10          	add    $0x10,%rax
   1290a:	48 89 c7             	mov    %rax,%rdi
   1290d:	e8 06 1c 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   12912:	48 89 d8             	mov    %rbx,%rax
   12915:	48 89 c7             	mov    %rax,%rdi
   12918:	e8 53 20 ff ff       	call   4970 <_Unwind_Resume@plt>
   1291d:	48 83 c4 38          	add    $0x38,%rsp
   12921:	5b                   	pop    %rbx
   12922:	41 5c                	pop    %r12
   12924:	41 5d                	pop    %r13
   12926:	41 5e                	pop    %r14
   12928:	41 5f                	pop    %r15
   1292a:	5d                   	pop    %rbp
   1292b:	c3                   	ret

000000000001292c <_ZN9VulkanAppD1Ev>:

VulkanApp::~VulkanApp() {
   1292c:	55                   	push   %rbp
   1292d:	48 89 e5             	mov    %rsp,%rbp
   12930:	48 83 ec 20          	sub    $0x20,%rsp
   12934:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  cleanupSwapchain();
   12938:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1293c:	48 89 c7             	mov    %rax,%rdi
   1293f:	e8 b0 e0 ff ff       	call   109f4 <_ZN9VulkanApp16cleanupSwapchainEv>
  vkDestroyDescriptorSetLayout(device, descriptorSetLayout, nullptr);
   12944:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12948:	48 8b 88 e8 01 00 00 	mov    0x1e8(%rax),%rcx
   1294f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12953:	48 8b 40 50          	mov    0x50(%rax),%rax
   12957:	ba 00 00 00 00       	mov    $0x0,%edx
   1295c:	48 89 ce             	mov    %rcx,%rsi
   1295f:	48 89 c7             	mov    %rax,%rdi
   12962:	e8 e9 1e ff ff       	call   4850 <vkDestroyDescriptorSetLayout@plt>
  vkDestroyBuffer(device, indexBuffer, nullptr);
   12967:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1296b:	48 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%rcx
   12972:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12976:	48 8b 40 50          	mov    0x50(%rax),%rax
   1297a:	ba 00 00 00 00       	mov    $0x0,%edx
   1297f:	48 89 ce             	mov    %rcx,%rsi
   12982:	48 89 c7             	mov    %rax,%rdi
   12985:	e8 56 18 ff ff       	call   41e0 <vkDestroyBuffer@plt>
  vkFreeMemory(device, indexBufferMemory, nullptr);
   1298a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1298e:	48 8b 88 b0 01 00 00 	mov    0x1b0(%rax),%rcx
   12995:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12999:	48 8b 40 50          	mov    0x50(%rax),%rax
   1299d:	ba 00 00 00 00       	mov    $0x0,%edx
   129a2:	48 89 ce             	mov    %rcx,%rsi
   129a5:	48 89 c7             	mov    %rax,%rdi
   129a8:	e8 a3 1a ff ff       	call   4450 <vkFreeMemory@plt>
  vkDestroyBuffer(device, vertexBuffer, nullptr);
   129ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129b1:	48 8b 88 98 01 00 00 	mov    0x198(%rax),%rcx
   129b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129bc:	48 8b 40 50          	mov    0x50(%rax),%rax
   129c0:	ba 00 00 00 00       	mov    $0x0,%edx
   129c5:	48 89 ce             	mov    %rcx,%rsi
   129c8:	48 89 c7             	mov    %rax,%rdi
   129cb:	e8 10 18 ff ff       	call   41e0 <vkDestroyBuffer@plt>
  vkFreeMemory(device, vertexBufferMemory, nullptr);
   129d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129d4:	48 8b 88 a0 01 00 00 	mov    0x1a0(%rax),%rcx
   129db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129df:	48 8b 40 50          	mov    0x50(%rax),%rax
   129e3:	ba 00 00 00 00       	mov    $0x0,%edx
   129e8:	48 89 ce             	mov    %rcx,%rsi
   129eb:	48 89 c7             	mov    %rax,%rdi
   129ee:	e8 5d 1a ff ff       	call   4450 <vkFreeMemory@plt>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   129f3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   129fa:	00 
   129fb:	e9 a4 00 00 00       	jmp    12aa4 <_ZN9VulkanAppD1Ev+0x178>
    vkh::destroySemaphore(device, sync.imageAvailableSemaphore[i]);
   12a00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a04:	48 8d 90 48 01 00 00 	lea    0x148(%rax),%rdx
   12a0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a0f:	48 89 c6             	mov    %rax,%rsi
   12a12:	48 89 d7             	mov    %rdx,%rdi
   12a15:	e8 42 3d 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   12a1a:	48 8b 08             	mov    (%rax),%rcx
   12a1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a21:	48 8b 40 50          	mov    0x50(%rax),%rax
   12a25:	ba 00 00 00 00       	mov    $0x0,%edx
   12a2a:	48 89 ce             	mov    %rcx,%rsi
   12a2d:	48 89 c7             	mov    %rax,%rdi
   12a30:	e8 a6 5a ff ff       	call   84db <_ZN3vkh16destroySemaphoreEP10VkDevice_TP13VkSemaphore_TPK21VkAllocationCallbacks>
    vkh::destroySemaphore(device, sync.renderFinisedSemaphore[i]);
   12a35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a39:	48 8d 90 60 01 00 00 	lea    0x160(%rax),%rdx
   12a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a44:	48 89 c6             	mov    %rax,%rsi
   12a47:	48 89 d7             	mov    %rdx,%rdi
   12a4a:	e8 0d 3d 00 00       	call   1675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>
   12a4f:	48 8b 08             	mov    (%rax),%rcx
   12a52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a56:	48 8b 40 50          	mov    0x50(%rax),%rax
   12a5a:	ba 00 00 00 00       	mov    $0x0,%edx
   12a5f:	48 89 ce             	mov    %rcx,%rsi
   12a62:	48 89 c7             	mov    %rax,%rdi
   12a65:	e8 71 5a ff ff       	call   84db <_ZN3vkh16destroySemaphoreEP10VkDevice_TP13VkSemaphore_TPK21VkAllocationCallbacks>
    vkh::destroyFence(device, sync.inFlightFence[i]);
   12a6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a6e:	48 8d 90 78 01 00 00 	lea    0x178(%rax),%rdx
   12a75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a79:	48 89 c6             	mov    %rax,%rsi
   12a7c:	48 89 d7             	mov    %rdx,%rdi
   12a7f:	e8 f8 3c 00 00       	call   1677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>
   12a84:	48 8b 08             	mov    (%rax),%rcx
   12a87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a8b:	48 8b 40 50          	mov    0x50(%rax),%rax
   12a8f:	ba 00 00 00 00       	mov    $0x0,%edx
   12a94:	48 89 ce             	mov    %rcx,%rsi
   12a97:	48 89 c7             	mov    %rax,%rdi
   12a9a:	e8 6a 5a ff ff       	call   8509 <_ZN3vkh12destroyFenceEP10VkDevice_TP9VkFence_TPK21VkAllocationCallbacks>
  for (size_t i = 0; i < maxFramesInFlight; ++i) {
   12a9f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   12aa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12aa8:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
   12aaf:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   12ab3:	0f 82 47 ff ff ff    	jb     12a00 <_ZN9VulkanAppD1Ev+0xd4>
  }
  vkh::destroyCommandPool(device, commandPool);
   12ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12abd:	48 8b 88 40 01 00 00 	mov    0x140(%rax),%rcx
   12ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ac8:	48 8b 40 50          	mov    0x50(%rax),%rax
   12acc:	ba 00 00 00 00       	mov    $0x0,%edx
   12ad1:	48 89 ce             	mov    %rcx,%rsi
   12ad4:	48 89 c7             	mov    %rax,%rdi
   12ad7:	e8 d1 59 ff ff       	call   84ad <_ZN3vkh18destroyCommandPoolEP10VkDevice_TP15VkCommandPool_TPK21VkAllocationCallbacks>
  vkh::destroyDevice(device);
   12adc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ae0:	48 8b 40 50          	mov    0x50(%rax),%rax
   12ae4:	be 00 00 00 00       	mov    $0x0,%esi
   12ae9:	48 89 c7             	mov    %rax,%rdi
   12aec:	e8 97 57 ff ff       	call   8288 <_ZN3vkh13destroyDeviceEP10VkDevice_TPK21VkAllocationCallbacks>
  vkh::destroyDebugUtilsMessengerEXT(instance, debugMessenger, nullptr);
   12af1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12af5:	48 8b 48 40          	mov    0x40(%rax),%rcx
   12af9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12afd:	48 8b 40 08          	mov    0x8(%rax),%rax
   12b01:	ba 00 00 00 00       	mov    $0x0,%edx
   12b06:	48 89 ce             	mov    %rcx,%rsi
   12b09:	48 89 c7             	mov    %rax,%rdi
   12b0c:	e8 82 b8 ff ff       	call   e393 <_ZN3vkh29destroyDebugUtilsMessengerEXTEP12VkInstance_TP26VkDebugUtilsMessengerEXT_TPK21VkAllocationCallbacks>
  vkh::destroySurface(instance, surface);
   12b11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b15:	48 8b 48 48          	mov    0x48(%rax),%rcx
   12b19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b1d:	48 8b 40 08          	mov    0x8(%rax),%rax
   12b21:	ba 00 00 00 00       	mov    $0x0,%edx
   12b26:	48 89 ce             	mov    %rcx,%rsi
   12b29:	48 89 c7             	mov    %rax,%rdi
   12b2c:	e8 7d 57 ff ff       	call   82ae <_ZN3vkh14destroySurfaceEP12VkInstance_TP14VkSurfaceKHR_TPK21VkAllocationCallbacks>
  vkh::destroyInstance(instance, nullptr);
   12b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b35:	48 8b 40 08          	mov    0x8(%rax),%rax
   12b39:	be 00 00 00 00       	mov    $0x0,%esi
   12b3e:	48 89 c7             	mov    %rax,%rdi
   12b41:	e8 1c 57 ff ff       	call   8262 <_ZN3vkh15destroyInstanceEP12VkInstance_TPK21VkAllocationCallbacks>
  vkh::destroyWindow(window);
   12b46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b4a:	48 8b 00             	mov    (%rax),%rax
   12b4d:	48 89 c7             	mov    %rax,%rdi
   12b50:	e8 f2 56 ff ff       	call   8247 <_ZN3vkh13destroyWindowEP10GLFWwindow>
  glfwTerminate();
   12b55:	e8 b6 19 ff ff       	call   4510 <glfwTerminate@plt>
}
   12b5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b5e:	48 05 d0 01 00 00    	add    $0x1d0,%rax
   12b64:	48 89 c7             	mov    %rax,%rdi
   12b67:	e8 14 43 00 00       	call   16e80 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EED1Ev>
   12b6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b70:	48 05 b8 01 00 00    	add    $0x1b8,%rax
   12b76:	48 89 c7             	mov    %rax,%rdi
   12b79:	e8 2c 42 00 00       	call   16daa <_ZNSt6vectorIP10VkBuffer_TSaIS1_EED1Ev>
   12b7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b82:	48 05 48 01 00 00    	add    $0x148,%rax
   12b88:	48 89 c7             	mov    %rax,%rdi
   12b8b:	e8 c2 17 00 00       	call   14352 <_ZN9VulkanApp11SyncWrapperD1Ev>
   12b90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b94:	48 05 28 01 00 00    	add    $0x128,%rax
   12b9a:	48 89 c7             	mov    %rax,%rdi
   12b9d:	e8 9a 3c ff ff       	call   683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
   12ba2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ba6:	48 05 00 01 00 00    	add    $0x100,%rax
   12bac:	48 89 c7             	mov    %rax,%rdi
   12baf:	e8 ac 3f 00 00       	call   16b60 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EED1Ev>
   12bb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bb8:	48 05 c0 00 00 00    	add    $0xc0,%rax
   12bbe:	48 89 c7             	mov    %rax,%rdi
   12bc1:	e8 ee 78 ff ff       	call   a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
   12bc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bca:	48 05 a8 00 00 00    	add    $0xa8,%rax
   12bd0:	48 89 c7             	mov    %rax,%rdi
   12bd3:	e8 32 28 00 00       	call   1540a <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>
   12bd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bdc:	48 05 90 00 00 00    	add    $0x90,%rax
   12be2:	48 89 c7             	mov    %rax,%rdi
   12be5:	e8 2e 19 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
VulkanApp::~VulkanApp() {
   12bea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bee:	48 83 c0 28          	add    $0x28,%rax
}
   12bf2:	48 89 c7             	mov    %rax,%rdi
   12bf5:	e8 1e 19 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   12bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bfe:	48 83 c0 10          	add    $0x10,%rax
   12c02:	48 89 c7             	mov    %rax,%rdi
   12c05:	e8 0e 19 00 00       	call   14518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
   12c0a:	90                   	nop
   12c0b:	c9                   	leave
   12c0c:	c3                   	ret
   12c0d:	90                   	nop

0000000000012c0e <_ZN9VulkanApp3runEv>:

void VulkanApp::run() {
   12c0e:	55                   	push   %rbp
   12c0f:	48 89 e5             	mov    %rsp,%rbp
   12c12:	48 83 ec 10          	sub    $0x10,%rsp
   12c16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  while (!glfwWindowShouldClose(window)) {
   12c1a:	eb 11                	jmp    12c2d <_ZN9VulkanApp3runEv+0x1f>
    glfwPollEvents();
   12c1c:	e8 6f 18 ff ff       	call   4490 <glfwPollEvents@plt>
    render();
   12c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c25:	48 89 c7             	mov    %rax,%rdi
   12c28:	e8 37 f2 ff ff       	call   11e64 <_ZN9VulkanApp6renderEv>
  while (!glfwWindowShouldClose(window)) {
   12c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c31:	48 8b 00             	mov    (%rax),%rax
   12c34:	48 89 c7             	mov    %rax,%rdi
   12c37:	e8 b4 1d ff ff       	call   49f0 <glfwWindowShouldClose@plt>
   12c3c:	85 c0                	test   %eax,%eax
   12c3e:	0f 94 c0             	sete   %al
   12c41:	84 c0                	test   %al,%al
   12c43:	75 d7                	jne    12c1c <_ZN9VulkanApp3runEv+0xe>
  }
  vkDeviceWaitIdle(device);
   12c45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c49:	48 8b 40 50          	mov    0x50(%rax),%rax
   12c4d:	48 89 c7             	mov    %rax,%rdi
   12c50:	e8 7b 14 ff ff       	call   40d0 <vkDeviceWaitIdle@plt>
}
   12c55:	90                   	nop
   12c56:	c9                   	leave
   12c57:	c3                   	ret

0000000000012c58 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void VulkanApp::writeInfo(std::string filePath) {
   12c58:	55                   	push   %rbp
   12c59:	48 89 e5             	mov    %rsp,%rbp
   12c5c:	41 54                	push   %r12
   12c5e:	53                   	push   %rbx
   12c5f:	48 81 ec c0 0e 00 00 	sub    $0xec0,%rsp
   12c66:	48 89 bd 38 f1 ff ff 	mov    %rdi,-0xec8(%rbp)
   12c6d:	48 89 b5 30 f1 ff ff 	mov    %rsi,-0xed0(%rbp)
  std::fstream fs;
   12c74:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12c7b:	48 89 c7             	mov    %rax,%rdi
   12c7e:	e8 9d 19 ff ff       	call   4620 <_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@plt>
  fs.open(filePath);
   12c83:	be 10 00 00 00       	mov    $0x10,%esi
   12c88:	bf 08 00 00 00       	mov    $0x8,%edi
   12c8d:	e8 a5 4c ff ff       	call   7937 <_ZStorSt13_Ios_OpenmodeS_>
   12c92:	89 c2                	mov    %eax,%edx
   12c94:	48 8b 8d 30 f1 ff ff 	mov    -0xed0(%rbp),%rcx
   12c9b:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12ca2:	48 89 ce             	mov    %rcx,%rsi
   12ca5:	48 89 c7             	mov    %rax,%rdi
   12ca8:	e8 83 1a ff ff       	call   4730 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE4openERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>
  if (!fs.is_open()) {
   12cad:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12cb4:	48 89 c7             	mov    %rax,%rdi
   12cb7:	e8 64 1c ff ff       	call   4920 <_ZNSt13basic_fstreamIcSt11char_traitsIcEE7is_openEv@plt>
   12cbc:	83 f0 01             	xor    $0x1,%eax
   12cbf:	84 c0                	test   %al,%al
   12cc1:	0f 84 97 00 00 00    	je     12d5e <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x106>
    throw std::runtime_error("Failed to open " + filePath + '\n');
   12cc7:	bf 10 00 00 00       	mov    $0x10,%edi
   12ccc:	e8 ff 14 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   12cd1:	48 89 c3             	mov    %rax,%rbx
   12cd4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   12cdb:	48 8b 95 30 f1 ff ff 	mov    -0xed0(%rbp),%rdx
   12ce2:	48 8d 0d 9d 06 01 00 	lea    0x1069d(%rip),%rcx        # 23386 <_ZZN9VulkanApp6renderEvE11submitCount+0x8e>
   12ce9:	48 89 ce             	mov    %rcx,%rsi
   12cec:	48 89 c7             	mov    %rax,%rdi
   12cef:	e8 9a 4c ff ff       	call   798e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
   12cf4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   12cfb:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
   12d02:	ba 0a 00 00 00       	mov    $0xa,%edx
   12d07:	48 89 ce             	mov    %rcx,%rsi
   12d0a:	48 89 c7             	mov    %rax,%rdi
   12d0d:	e8 b2 41 00 00       	call   16ec4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>
   12d12:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   12d19:	48 89 c6             	mov    %rax,%rsi
   12d1c:	48 89 df             	mov    %rbx,%rdi
   12d1f:	e8 8c 1b ff ff       	call   48b0 <_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
   12d24:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   12d2b:	48 89 c7             	mov    %rax,%rdi
   12d2e:	e8 4d 15 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   12d33:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   12d3a:	48 89 c7             	mov    %rax,%rdi
   12d3d:	e8 3e 15 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   12d42:	48 8b 05 6f 22 02 00 	mov    0x2226f(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   12d49:	48 89 c2             	mov    %rax,%rdx
   12d4c:	48 8d 05 ed 1f 02 00 	lea    0x21fed(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   12d53:	48 89 c6             	mov    %rax,%rsi
   12d56:	48 89 df             	mov    %rbx,%rdi
   12d59:	e8 a2 1b ff ff       	call   4900 <__cxa_throw@plt>
  }

  fs << "1. Instance extensions:\n";
   12d5e:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12d65:	48 83 c0 10          	add    $0x10,%rax
   12d69:	48 8d 15 26 06 01 00 	lea    0x10626(%rip),%rdx        # 23396 <_ZZN9VulkanApp6renderEvE11submitCount+0x9e>
   12d70:	48 89 d6             	mov    %rdx,%rsi
   12d73:	48 89 c7             	mov    %rax,%rdi
   12d76:	e8 45 17 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  fs << "\t1.1 Available:\n";
   12d7b:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12d82:	48 83 c0 10          	add    $0x10,%rax
   12d86:	48 8d 15 22 06 01 00 	lea    0x10622(%rip),%rdx        # 233af <_ZZN9VulkanApp6renderEvE11submitCount+0xb7>
   12d8d:	48 89 d6             	mov    %rdx,%rsi
   12d90:	48 89 c7             	mov    %rax,%rdi
   12d93:	e8 28 17 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto availableInstanceExtensions = vkh::getAvailableInstanceExtensionList();
   12d98:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
   12d9f:	be 00 00 00 00       	mov    $0x0,%esi
   12da4:	48 89 c7             	mov    %rax,%rdi
   12da7:	e8 20 59 ff ff       	call   86cc <_ZN3vkh33getAvailableInstanceExtensionListEPKc>
  for (const auto &extension : availableInstanceExtensions) {
   12dac:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
   12db3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12db7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12dbb:	48 89 c7             	mov    %rax,%rdi
   12dbe:	e8 3b 1c 00 00       	call   149fe <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
   12dc3:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
   12dca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   12dce:	48 89 c7             	mov    %rax,%rdi
   12dd1:	e8 4e 1c 00 00       	call   14a24 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
   12dd6:	48 89 85 60 f9 ff ff 	mov    %rax,-0x6a0(%rbp)
   12ddd:	eb 64                	jmp    12e43 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1eb>
   12ddf:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
   12de6:	48 89 c7             	mov    %rax,%rdi
   12de9:	e8 be 1c 00 00       	call   14aac <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
   12dee:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    fs << "\t\t" << extension.extensionName << '\n';
   12df5:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12dfc:	48 83 c0 10          	add    $0x10,%rax
   12e00:	48 8d 15 b9 05 01 00 	lea    0x105b9(%rip),%rdx        # 233c0 <_ZZN9VulkanApp6renderEvE11submitCount+0xc8>
   12e07:	48 89 d6             	mov    %rdx,%rsi
   12e0a:	48 89 c7             	mov    %rax,%rdi
   12e0d:	e8 ae 16 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   12e12:	48 89 c2             	mov    %rax,%rdx
   12e15:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   12e1c:	48 89 c6             	mov    %rax,%rsi
   12e1f:	48 89 d7             	mov    %rdx,%rdi
   12e22:	e8 99 16 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   12e27:	be 0a 00 00 00       	mov    $0xa,%esi
   12e2c:	48 89 c7             	mov    %rax,%rdi
   12e2f:	e8 bc 17 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &extension : availableInstanceExtensions) {
   12e34:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
   12e3b:	48 89 c7             	mov    %rax,%rdi
   12e3e:	e8 45 1c 00 00       	call   14a88 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
   12e43:	48 8d 95 60 f9 ff ff 	lea    -0x6a0(%rbp),%rdx
   12e4a:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
   12e51:	48 89 d6             	mov    %rdx,%rsi
   12e54:	48 89 c7             	mov    %rax,%rdi
   12e57:	e8 f1 1b 00 00       	call   14a4d <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
   12e5c:	84 c0                	test   %al,%al
   12e5e:	0f 85 7b ff ff ff    	jne    12ddf <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x187>
  }
  fs << "\t1.2 Required:\n";
   12e64:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12e6b:	48 83 c0 10          	add    $0x10,%rax
   12e6f:	48 8d 15 4d 05 01 00 	lea    0x1054d(%rip),%rdx        # 233c3 <_ZZN9VulkanApp6renderEvE11submitCount+0xcb>
   12e76:	48 89 d6             	mov    %rdx,%rsi
   12e79:	48 89 c7             	mov    %rax,%rdi
   12e7c:	e8 3f 16 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  for (const auto &extensionName : instanceExtensions) {
   12e81:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
   12e88:	48 83 c0 10          	add    $0x10,%rax
   12e8c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   12e90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12e94:	48 89 c7             	mov    %rax,%rdi
   12e97:	e8 c0 16 00 00       	call   1455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   12e9c:	48 89 85 58 f9 ff ff 	mov    %rax,-0x6a8(%rbp)
   12ea3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   12ea7:	48 89 c7             	mov    %rax,%rdi
   12eaa:	e8 d3 16 00 00       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   12eaf:	48 89 85 50 f9 ff ff 	mov    %rax,-0x6b0(%rbp)
   12eb6:	eb 67                	jmp    12f1f <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c7>
   12eb8:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
   12ebf:	48 89 c7             	mov    %rax,%rdi
   12ec2:	e8 3f 17 00 00       	call   14606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
   12ec7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    fs << "\t\t" << extensionName << '\n';
   12ece:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12ed5:	48 83 c0 10          	add    $0x10,%rax
   12ed9:	48 8d 15 e0 04 01 00 	lea    0x104e0(%rip),%rdx        # 233c0 <_ZZN9VulkanApp6renderEvE11submitCount+0xc8>
   12ee0:	48 89 d6             	mov    %rdx,%rsi
   12ee3:	48 89 c7             	mov    %rax,%rdi
   12ee6:	e8 d5 15 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   12eeb:	48 89 c2             	mov    %rax,%rdx
   12eee:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   12ef5:	48 8b 00             	mov    (%rax),%rax
   12ef8:	48 89 c6             	mov    %rax,%rsi
   12efb:	48 89 d7             	mov    %rdx,%rdi
   12efe:	e8 bd 15 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   12f03:	be 0a 00 00 00       	mov    $0xa,%esi
   12f08:	48 89 c7             	mov    %rax,%rdi
   12f0b:	e8 e0 16 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &extensionName : instanceExtensions) {
   12f10:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
   12f17:	48 89 c7             	mov    %rax,%rdi
   12f1a:	e8 c7 16 00 00       	call   145e6 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
   12f1f:	48 8d 95 50 f9 ff ff 	lea    -0x6b0(%rbp),%rdx
   12f26:	48 8d 85 58 f9 ff ff 	lea    -0x6a8(%rbp),%rax
   12f2d:	48 89 d6             	mov    %rdx,%rsi
   12f30:	48 89 c7             	mov    %rax,%rdi
   12f33:	e8 73 16 00 00       	call   145ab <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   12f38:	84 c0                	test   %al,%al
   12f3a:	0f 85 78 ff ff ff    	jne    12eb8 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
  }
  fs << '\n';
   12f40:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12f47:	48 83 c0 10          	add    $0x10,%rax
   12f4b:	be 0a 00 00 00       	mov    $0xa,%esi
   12f50:	48 89 c7             	mov    %rax,%rdi
   12f53:	e8 98 16 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>

  fs << "2. Instance layers:\n";
   12f58:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12f5f:	48 83 c0 10          	add    $0x10,%rax
   12f63:	48 8d 15 69 04 01 00 	lea    0x10469(%rip),%rdx        # 233d3 <_ZZN9VulkanApp6renderEvE11submitCount+0xdb>
   12f6a:	48 89 d6             	mov    %rdx,%rsi
   12f6d:	48 89 c7             	mov    %rax,%rdi
   12f70:	e8 4b 15 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  fs << "\t2.1 Available:\n";
   12f75:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12f7c:	48 83 c0 10          	add    $0x10,%rax
   12f80:	48 8d 15 61 04 01 00 	lea    0x10461(%rip),%rdx        # 233e8 <_ZZN9VulkanApp6renderEvE11submitCount+0xf0>
   12f87:	48 89 d6             	mov    %rdx,%rsi
   12f8a:	48 89 c7             	mov    %rax,%rdi
   12f8d:	e8 2e 15 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto availableInstanceLayers = vkh::getAvailableInstanceLayerList();
   12f92:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
   12f99:	48 89 c7             	mov    %rax,%rdi
   12f9c:	e8 c5 5a ff ff       	call   8a66 <_ZN3vkh29getAvailableInstanceLayerListEv>
  for (const auto &layer : availableInstanceLayers) {
   12fa1:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
   12fa8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12fac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   12fb0:	48 89 c7             	mov    %rax,%rdi
   12fb3:	e8 a8 b5 ff ff       	call   e560 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE5beginEv>
   12fb8:	48 89 85 48 f9 ff ff 	mov    %rax,-0x6b8(%rbp)
   12fbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   12fc3:	48 89 c7             	mov    %rax,%rdi
   12fc6:	e8 bb b5 ff ff       	call   e586 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EE3endEv>
   12fcb:	48 89 85 40 f9 ff ff 	mov    %rax,-0x6c0(%rbp)
   12fd2:	eb 5e                	jmp    13032 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3da>
   12fd4:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
   12fdb:	48 89 c7             	mov    %rax,%rdi
   12fde:	e8 2b b6 ff ff       	call   e60e <_ZNK9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
   12fe3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    fs << "\t\t" << layer.layerName << '\n';
   12fe7:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   12fee:	48 83 c0 10          	add    $0x10,%rax
   12ff2:	48 8d 15 c7 03 01 00 	lea    0x103c7(%rip),%rdx        # 233c0 <_ZZN9VulkanApp6renderEvE11submitCount+0xc8>
   12ff9:	48 89 d6             	mov    %rdx,%rsi
   12ffc:	48 89 c7             	mov    %rax,%rdi
   12fff:	e8 bc 14 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13004:	48 89 c2             	mov    %rax,%rdx
   13007:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1300b:	48 89 c6             	mov    %rax,%rsi
   1300e:	48 89 d7             	mov    %rdx,%rdi
   13011:	e8 aa 14 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13016:	be 0a 00 00 00       	mov    $0xa,%esi
   1301b:	48 89 c7             	mov    %rax,%rdi
   1301e:	e8 cd 15 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &layer : availableInstanceLayers) {
   13023:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
   1302a:	48 89 c7             	mov    %rax,%rdi
   1302d:	e8 b8 b5 ff ff       	call   e5ea <_ZN9__gnu_cxx17__normal_iteratorIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEppEv>
   13032:	48 8d 95 40 f9 ff ff 	lea    -0x6c0(%rbp),%rdx
   13039:	48 8d 85 48 f9 ff ff 	lea    -0x6b8(%rbp),%rax
   13040:	48 89 d6             	mov    %rdx,%rsi
   13043:	48 89 c7             	mov    %rax,%rdi
   13046:	e8 64 b5 ff ff       	call   e5af <_ZN9__gnu_cxxneIP17VkLayerPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
   1304b:	84 c0                	test   %al,%al
   1304d:	75 85                	jne    12fd4 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x37c>
  }
  fs << "\t2.2 Required:\n";
   1304f:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13056:	48 83 c0 10          	add    $0x10,%rax
   1305a:	48 8d 15 98 03 01 00 	lea    0x10398(%rip),%rdx        # 233f9 <_ZZN9VulkanApp6renderEvE11submitCount+0x101>
   13061:	48 89 d6             	mov    %rdx,%rsi
   13064:	48 89 c7             	mov    %rax,%rdi
   13067:	e8 54 14 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  for (const auto &layer : instanceLayers) {
   1306c:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
   13073:	48 83 c0 28          	add    $0x28,%rax
   13077:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1307b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1307f:	48 89 c7             	mov    %rax,%rdi
   13082:	e8 87 3e 00 00       	call   16f0e <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
   13087:	48 89 85 38 f9 ff ff 	mov    %rax,-0x6c8(%rbp)
   1308e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   13092:	48 89 c7             	mov    %rax,%rdi
   13095:	e8 9a 3e 00 00       	call   16f34 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
   1309a:	48 89 85 30 f9 ff ff 	mov    %rax,-0x6d0(%rbp)
   130a1:	eb 61                	jmp    13104 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ac>
   130a3:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
   130aa:	48 89 c7             	mov    %rax,%rdi
   130ad:	e8 06 3f 00 00       	call   16fb8 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
   130b2:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    fs << "\t\t" << layer << '\n';
   130b6:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   130bd:	48 83 c0 10          	add    $0x10,%rax
   130c1:	48 8d 15 f8 02 01 00 	lea    0x102f8(%rip),%rdx        # 233c0 <_ZZN9VulkanApp6renderEvE11submitCount+0xc8>
   130c8:	48 89 d6             	mov    %rdx,%rsi
   130cb:	48 89 c7             	mov    %rax,%rdi
   130ce:	e8 ed 13 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   130d3:	48 89 c2             	mov    %rax,%rdx
   130d6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   130da:	48 8b 00             	mov    (%rax),%rax
   130dd:	48 89 c6             	mov    %rax,%rsi
   130e0:	48 89 d7             	mov    %rdx,%rdi
   130e3:	e8 d8 13 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   130e8:	be 0a 00 00 00       	mov    $0xa,%esi
   130ed:	48 89 c7             	mov    %rax,%rdi
   130f0:	e8 fb 14 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &layer : instanceLayers) {
   130f5:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
   130fc:	48 89 c7             	mov    %rax,%rdi
   130ff:	e8 94 3e 00 00       	call   16f98 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
   13104:	48 8d 95 30 f9 ff ff 	lea    -0x6d0(%rbp),%rdx
   1310b:	48 8d 85 38 f9 ff ff 	lea    -0x6c8(%rbp),%rax
   13112:	48 89 d6             	mov    %rdx,%rsi
   13115:	48 89 c7             	mov    %rax,%rdi
   13118:	e8 40 3e 00 00       	call   16f5d <_ZN9__gnu_cxxneIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
   1311d:	84 c0                	test   %al,%al
   1311f:	75 82                	jne    130a3 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44b>
  }
  fs << '\n';
   13121:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13128:	48 83 c0 10          	add    $0x10,%rax
   1312c:	be 0a 00 00 00       	mov    $0xa,%esi
   13131:	48 89 c7             	mov    %rax,%rdi
   13134:	e8 b7 14 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>

  fs << "3. Physical devices:\n";
   13139:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13140:	48 83 c0 10          	add    $0x10,%rax
   13144:	48 8d 15 be 02 01 00 	lea    0x102be(%rip),%rdx        # 23409 <_ZZN9VulkanApp6renderEvE11submitCount+0x111>
   1314b:	48 89 d6             	mov    %rdx,%rsi
   1314e:	48 89 c7             	mov    %rax,%rdi
   13151:	e8 6a 13 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  auto physicalDeviceList = vkh::getPhysicalDeviceList(instance);
   13156:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
   1315d:	48 8b 50 08          	mov    0x8(%rax),%rdx
   13161:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
   13168:	48 89 d6             	mov    %rdx,%rsi
   1316b:	48 89 c7             	mov    %rax,%rdi
   1316e:	e8 9f 59 ff ff       	call   8b12 <_ZN3vkh21getPhysicalDeviceListEP12VkInstance_T>
  auto selectedDeviceProperties =
      vkh::getPhysicalDevicePropertyList(physicalDevice);
   13173:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
   1317a:	48 8b 50 58          	mov    0x58(%rax),%rdx
   1317e:	48 8d 85 70 f9 ff ff 	lea    -0x690(%rbp),%rax
   13185:	48 89 d6             	mov    %rdx,%rsi
   13188:	48 89 c7             	mov    %rax,%rdi
   1318b:	e8 f1 5a ff ff       	call   8c81 <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_T>
  size_t index = 1;
   13190:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   13197:	00 
  size_t selectedDeviceIndex = 0;
   13198:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1319f:	00 
  for (const auto &physDev : physicalDeviceList) {
   131a0:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
   131a7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   131ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   131af:	48 89 c7             	mov    %rax,%rdi
   131b2:	e8 75 16 00 00       	call   1482c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
   131b7:	48 89 85 28 f9 ff ff 	mov    %rax,-0x6d8(%rbp)
   131be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   131c2:	48 89 c7             	mov    %rax,%rdi
   131c5:	e8 88 16 00 00       	call   14852 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
   131ca:	48 89 85 20 f9 ff ff 	mov    %rax,-0x6e0(%rbp)
   131d1:	e9 c7 06 00 00       	jmp    1389d <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc45>
   131d6:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
   131dd:	48 89 c7             	mov    %rax,%rdi
   131e0:	e8 f1 16 00 00       	call   148d6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
   131e5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    std::string selectStr = "";
   131e9:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   131f0:	48 89 c7             	mov    %rax,%rdi
   131f3:	e8 88 17 ff ff       	call   4980 <_ZNSaIcEC1Ev@plt>
   131f8:	48 8d 95 6f ff ff ff 	lea    -0x91(%rbp),%rdx
   131ff:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
   13206:	48 8d 0d 12 02 01 00 	lea    0x10212(%rip),%rcx        # 2341f <_ZZN9VulkanApp6renderEvE11submitCount+0x127>
   1320d:	48 89 ce             	mov    %rcx,%rsi
   13210:	48 89 c7             	mov    %rax,%rdi
   13213:	e8 10 20 ff ff       	call   5228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   13218:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   1321f:	48 89 c7             	mov    %rax,%rdi
   13222:	e8 59 13 ff ff       	call   4580 <_ZNSaIcED1Ev@plt>

    VkPhysicalDeviceVulkan11Properties vk11Props{};
   13227:	48 8d 95 60 f1 ff ff 	lea    -0xea0(%rbp),%rdx
   1322e:	b8 00 00 00 00       	mov    $0x0,%eax
   13233:	b9 0e 00 00 00       	mov    $0xe,%ecx
   13238:	48 89 d7             	mov    %rdx,%rdi
   1323b:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk11Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
   1323e:	c7 85 60 f1 ff ff 32 	movl   $0x32,-0xea0(%rbp)
   13245:	00 00 00 
    vk11Props.pNext = nullptr;
   13248:	48 c7 85 68 f1 ff ff 	movq   $0x0,-0xe98(%rbp)
   1324f:	00 00 00 00 

    VkPhysicalDeviceVulkan12Properties vk12Props{};
   13253:	48 8d 95 b0 f2 ff ff 	lea    -0xd50(%rbp),%rdx
   1325a:	b8 00 00 00 00       	mov    $0x0,%eax
   1325f:	b9 5c 00 00 00       	mov    $0x5c,%ecx
   13264:	48 89 d7             	mov    %rdx,%rdi
   13267:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk12Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
   1326a:	c7 85 b0 f2 ff ff 34 	movl   $0x34,-0xd50(%rbp)
   13271:	00 00 00 
    vk12Props.pNext = &vk11Props;
   13274:	48 8d 85 60 f1 ff ff 	lea    -0xea0(%rbp),%rax
   1327b:	48 89 85 b8 f2 ff ff 	mov    %rax,-0xd48(%rbp)

    VkPhysicalDeviceVulkan13Properties vk13Props{};
   13282:	48 8d 95 d0 f1 ff ff 	lea    -0xe30(%rbp),%rdx
   13289:	b8 00 00 00 00       	mov    $0x0,%eax
   1328e:	b9 1b 00 00 00       	mov    $0x1b,%ecx
   13293:	48 89 d7             	mov    %rdx,%rdi
   13296:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    vk13Props.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
   13299:	c7 85 d0 f1 ff ff 36 	movl   $0x36,-0xe30(%rbp)
   132a0:	00 00 00 
    vk13Props.pNext = &vk12Props;
   132a3:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
   132aa:	48 89 85 d8 f1 ff ff 	mov    %rax,-0xe28(%rbp)

    auto deviceProperties =
        vkh::getPhysicalDevicePropertyList(physDev, &vk13Props);
   132b1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   132b5:	48 8b 08             	mov    (%rax),%rcx
   132b8:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
   132bf:	48 8d 95 d0 f1 ff ff 	lea    -0xe30(%rbp),%rdx
   132c6:	48 89 ce             	mov    %rcx,%rsi
   132c9:	48 89 c7             	mov    %rax,%rdi
   132cc:	e8 da 59 ff ff       	call   8cab <_ZN3vkh29getPhysicalDevicePropertyListEP18VkPhysicalDevice_TPv>

    if (deviceProperties.properties.deviceID ==
   132d1:	8b 95 ac f5 ff ff    	mov    -0xa54(%rbp),%edx
        selectedDeviceProperties.deviceID) {
   132d7:	8b 85 7c f9 ff ff    	mov    -0x684(%rbp),%eax
    if (deviceProperties.properties.deviceID ==
   132dd:	39 c2                	cmp    %eax,%edx
   132df:	75 08                	jne    132e9 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x691>
      selectedDeviceIndex = index;
   132e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132e5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    }
    if (selectedDeviceIndex == index) {
   132e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   132ed:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   132f1:	75 19                	jne    1330c <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b4>
      selectStr = " (selected)";
   132f3:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
   132fa:	48 8d 15 1f 01 01 00 	lea    0x1011f(%rip),%rdx        # 23420 <_ZZN9VulkanApp6renderEvE11submitCount+0x128>
   13301:	48 89 d6             	mov    %rdx,%rsi
   13304:	48 89 c7             	mov    %rax,%rdi
   13307:	e8 14 14 ff ff       	call   4720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    }
    fs << "\t3." << index << " Device " << index << selectStr << ":\n";
   1330c:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13313:	48 83 c0 10          	add    $0x10,%rax
   13317:	48 8d 15 0e 01 01 00 	lea    0x1010e(%rip),%rdx        # 2342c <_ZZN9VulkanApp6renderEvE11submitCount+0x134>
   1331e:	48 89 d6             	mov    %rdx,%rsi
   13321:	48 89 c7             	mov    %rax,%rdi
   13324:	e8 97 11 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13329:	48 89 c2             	mov    %rax,%rdx
   1332c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13330:	48 89 c6             	mov    %rax,%rsi
   13333:	48 89 d7             	mov    %rdx,%rdi
   13336:	e8 85 0d ff ff       	call   40c0 <_ZNSolsEm@plt>
   1333b:	48 89 c2             	mov    %rax,%rdx
   1333e:	48 8d 05 eb 00 01 00 	lea    0x100eb(%rip),%rax        # 23430 <_ZZN9VulkanApp6renderEvE11submitCount+0x138>
   13345:	48 89 c6             	mov    %rax,%rsi
   13348:	48 89 d7             	mov    %rdx,%rdi
   1334b:	e8 70 11 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13350:	48 89 c2             	mov    %rax,%rdx
   13353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13357:	48 89 c6             	mov    %rax,%rsi
   1335a:	48 89 d7             	mov    %rdx,%rdi
   1335d:	e8 5e 0d ff ff       	call   40c0 <_ZNSolsEm@plt>
   13362:	48 89 c2             	mov    %rax,%rdx
   13365:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
   1336c:	48 89 c6             	mov    %rax,%rsi
   1336f:	48 89 d7             	mov    %rdx,%rdi
   13372:	e8 b9 10 ff ff       	call   4430 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>
   13377:	48 89 c2             	mov    %rax,%rdx
   1337a:	48 8d 05 b8 00 01 00 	lea    0x100b8(%rip),%rax        # 23439 <_ZZN9VulkanApp6renderEvE11submitCount+0x141>
   13381:	48 89 c6             	mov    %rax,%rsi
   13384:	48 89 d7             	mov    %rdx,%rdi
   13387:	e8 34 11 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    fs << "\t\t3." << index << ".1 Device properties:\n";
   1338c:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13393:	48 83 c0 10          	add    $0x10,%rax
   13397:	48 8d 15 9e 00 01 00 	lea    0x1009e(%rip),%rdx        # 2343c <_ZZN9VulkanApp6renderEvE11submitCount+0x144>
   1339e:	48 89 d6             	mov    %rdx,%rsi
   133a1:	48 89 c7             	mov    %rax,%rdi
   133a4:	e8 17 11 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   133a9:	48 89 c2             	mov    %rax,%rdx
   133ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133b0:	48 89 c6             	mov    %rax,%rsi
   133b3:	48 89 d7             	mov    %rdx,%rdi
   133b6:	e8 05 0d ff ff       	call   40c0 <_ZNSolsEm@plt>
   133bb:	48 89 c2             	mov    %rax,%rdx
   133be:	48 8d 05 7c 00 01 00 	lea    0x1007c(%rip),%rax        # 23441 <_ZZN9VulkanApp6renderEvE11submitCount+0x149>
   133c5:	48 89 c6             	mov    %rax,%rsi
   133c8:	48 89 d7             	mov    %rdx,%rdi
   133cb:	e8 f0 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    fs << "\t\t\tDevice ID: " << deviceProperties.properties.deviceID << '\n';
   133d0:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   133d7:	48 83 c0 10          	add    $0x10,%rax
   133db:	48 8d 15 76 00 01 00 	lea    0x10076(%rip),%rdx        # 23458 <_ZZN9VulkanApp6renderEvE11submitCount+0x160>
   133e2:	48 89 d6             	mov    %rdx,%rsi
   133e5:	48 89 c7             	mov    %rax,%rdi
   133e8:	e8 d3 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   133ed:	48 89 c2             	mov    %rax,%rdx
   133f0:	8b 85 ac f5 ff ff    	mov    -0xa54(%rbp),%eax
   133f6:	89 c6                	mov    %eax,%esi
   133f8:	48 89 d7             	mov    %rdx,%rdi
   133fb:	e8 f0 12 ff ff       	call   46f0 <_ZNSolsEj@plt>
   13400:	be 0a 00 00 00       	mov    $0xa,%esi
   13405:	48 89 c7             	mov    %rax,%rdi
   13408:	e8 e3 11 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDevice name: " << deviceProperties.properties.deviceName
       << '\n';
   1340d:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13414:	48 83 c0 10          	add    $0x10,%rax
   13418:	48 8d 15 48 00 01 00 	lea    0x10048(%rip),%rdx        # 23467 <_ZZN9VulkanApp6renderEvE11submitCount+0x16f>
   1341f:	48 89 d6             	mov    %rdx,%rsi
   13422:	48 89 c7             	mov    %rax,%rdi
   13425:	e8 96 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   1342a:	48 89 c2             	mov    %rax,%rdx
   1342d:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
   13434:	48 83 c0 24          	add    $0x24,%rax
   13438:	48 89 c6             	mov    %rax,%rsi
   1343b:	48 89 d7             	mov    %rdx,%rdi
   1343e:	e8 7d 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13443:	be 0a 00 00 00       	mov    $0xa,%esi
   13448:	48 89 c7             	mov    %rax,%rdi
   1344b:	e8 a0 11 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDevice type: ";
   13450:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13457:	48 83 c0 10          	add    $0x10,%rax
   1345b:	48 8d 15 16 00 01 00 	lea    0x10016(%rip),%rdx        # 23478 <_ZZN9VulkanApp6renderEvE11submitCount+0x180>
   13462:	48 89 d6             	mov    %rdx,%rsi
   13465:	48 89 c7             	mov    %rax,%rdi
   13468:	e8 53 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    switch (deviceProperties.properties.deviceType) {
   1346d:	8b 85 b0 f5 ff ff    	mov    -0xa50(%rbp),%eax
   13473:	83 f8 04             	cmp    $0x4,%eax
   13476:	0f 84 80 00 00 00    	je     134fc <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a4>
   1347c:	83 f8 04             	cmp    $0x4,%eax
   1347f:	0f 8f 96 00 00 00    	jg     1351b <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
   13485:	83 f8 03             	cmp    $0x3,%eax
   13488:	74 53                	je     134dd <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x885>
   1348a:	83 f8 03             	cmp    $0x3,%eax
   1348d:	0f 8f 88 00 00 00    	jg     1351b <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
   13493:	83 f8 01             	cmp    $0x1,%eax
   13496:	74 07                	je     1349f <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x847>
   13498:	83 f8 02             	cmp    $0x2,%eax
   1349b:	74 21                	je     134be <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x866>
   1349d:	eb 7c                	jmp    1351b <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c3>
    case 1:
      fs << "Integrated GPU\n";
   1349f:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   134a6:	48 83 c0 10          	add    $0x10,%rax
   134aa:	48 8d 15 d8 ff 00 00 	lea    0xffd8(%rip),%rdx        # 23489 <_ZZN9VulkanApp6renderEvE11submitCount+0x191>
   134b1:	48 89 d6             	mov    %rdx,%rsi
   134b4:	48 89 c7             	mov    %rax,%rdi
   134b7:	e8 04 10 ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
   134bc:	eb 7b                	jmp    13539 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 2:
      fs << "Discrete GPU\n";
   134be:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   134c5:	48 83 c0 10          	add    $0x10,%rax
   134c9:	48 8d 15 c9 ff 00 00 	lea    0xffc9(%rip),%rdx        # 23499 <_ZZN9VulkanApp6renderEvE11submitCount+0x1a1>
   134d0:	48 89 d6             	mov    %rdx,%rsi
   134d3:	48 89 c7             	mov    %rax,%rdi
   134d6:	e8 e5 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
   134db:	eb 5c                	jmp    13539 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 3:
      fs << "Virtual GPU\n";
   134dd:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   134e4:	48 83 c0 10          	add    $0x10,%rax
   134e8:	48 8d 15 b8 ff 00 00 	lea    0xffb8(%rip),%rdx        # 234a7 <_ZZN9VulkanApp6renderEvE11submitCount+0x1af>
   134ef:	48 89 d6             	mov    %rdx,%rsi
   134f2:	48 89 c7             	mov    %rax,%rdi
   134f5:	e8 c6 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
   134fa:	eb 3d                	jmp    13539 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    case 4:
      fs << "CPU\n";
   134fc:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13503:	48 83 c0 10          	add    $0x10,%rax
   13507:	48 8d 15 a6 ff 00 00 	lea    0xffa6(%rip),%rdx        # 234b4 <_ZZN9VulkanApp6renderEvE11submitCount+0x1bc>
   1350e:	48 89 d6             	mov    %rdx,%rsi
   13511:	48 89 c7             	mov    %rax,%rdi
   13514:	e8 a7 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
   13519:	eb 1e                	jmp    13539 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e1>
    default:
      fs << "Other\n";
   1351b:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13522:	48 83 c0 10          	add    $0x10,%rax
   13526:	48 8d 15 8c ff 00 00 	lea    0xff8c(%rip),%rdx        # 234b9 <_ZZN9VulkanApp6renderEvE11submitCount+0x1c1>
   1352d:	48 89 d6             	mov    %rdx,%rsi
   13530:	48 89 c7             	mov    %rax,%rdi
   13533:	e8 88 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      break;
   13538:	90                   	nop
    }
    fs << "\t\t\tDriver ID: " << vk12Props.driverID << '\n';
   13539:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13540:	48 83 c0 10          	add    $0x10,%rax
   13544:	48 8d 15 75 ff 00 00 	lea    0xff75(%rip),%rdx        # 234c0 <_ZZN9VulkanApp6renderEvE11submitCount+0x1c8>
   1354b:	48 89 d6             	mov    %rdx,%rsi
   1354e:	48 89 c7             	mov    %rax,%rdi
   13551:	e8 6a 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13556:	8b 95 c0 f2 ff ff    	mov    -0xd40(%rbp),%edx
   1355c:	89 d6                	mov    %edx,%esi
   1355e:	48 89 c7             	mov    %rax,%rdi
   13561:	e8 ca 13 ff ff       	call   4930 <_ZNSolsEi@plt>
   13566:	be 0a 00 00 00       	mov    $0xa,%esi
   1356b:	48 89 c7             	mov    %rax,%rdi
   1356e:	e8 7d 10 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDriver name: " << vk12Props.driverName << '\n';
   13573:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   1357a:	48 83 c0 10          	add    $0x10,%rax
   1357e:	48 8d 15 4a ff 00 00 	lea    0xff4a(%rip),%rdx        # 234cf <_ZZN9VulkanApp6renderEvE11submitCount+0x1d7>
   13585:	48 89 d6             	mov    %rdx,%rsi
   13588:	48 89 c7             	mov    %rax,%rdi
   1358b:	e8 30 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13590:	48 89 c2             	mov    %rax,%rdx
   13593:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
   1359a:	48 83 c0 14          	add    $0x14,%rax
   1359e:	48 89 c6             	mov    %rax,%rsi
   135a1:	48 89 d7             	mov    %rdx,%rdi
   135a4:	e8 17 0f ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   135a9:	be 0a 00 00 00       	mov    $0xa,%esi
   135ae:	48 89 c7             	mov    %rax,%rdi
   135b1:	e8 3a 10 ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t\tDriver version: " << vk12Props.driverInfo << '\n';
   135b6:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   135bd:	48 83 c0 10          	add    $0x10,%rax
   135c1:	48 8d 15 18 ff 00 00 	lea    0xff18(%rip),%rdx        # 234e0 <_ZZN9VulkanApp6renderEvE11submitCount+0x1e8>
   135c8:	48 89 d6             	mov    %rdx,%rsi
   135cb:	48 89 c7             	mov    %rax,%rdi
   135ce:	e8 ed 0e ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   135d3:	48 89 c2             	mov    %rax,%rdx
   135d6:	48 8d 85 b0 f2 ff ff 	lea    -0xd50(%rbp),%rax
   135dd:	48 05 14 01 00 00    	add    $0x114,%rax
   135e3:	48 89 c6             	mov    %rax,%rsi
   135e6:	48 89 d7             	mov    %rdx,%rdi
   135e9:	e8 d2 0e ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   135ee:	be 0a 00 00 00       	mov    $0xa,%esi
   135f3:	48 89 c7             	mov    %rax,%rdi
   135f6:	e8 f5 0f ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    // fs << "\t\t\tDriver version: " << vk13Props. << '\n';
    fs << "\t\t\tMaximum memory allocation size: "
   135fb:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13602:	48 83 c0 10          	add    $0x10,%rax
   13606:	48 8d 15 eb fe 00 00 	lea    0xfeeb(%rip),%rdx        # 234f8 <_ZZN9VulkanApp6renderEvE11submitCount+0x200>
   1360d:	48 89 d6             	mov    %rdx,%rsi
   13610:	48 89 c7             	mov    %rax,%rdi
   13613:	e8 a8 0e ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13618:	48 89 c2             	mov    %rax,%rdx
       << vk11Props.maxMemoryAllocationSize << '\n';
   1361b:	48 8b 85 c8 f1 ff ff 	mov    -0xe38(%rbp),%rax
   13622:	48 89 c6             	mov    %rax,%rsi
   13625:	48 89 d7             	mov    %rdx,%rdi
   13628:	e8 93 0a ff ff       	call   40c0 <_ZNSolsEm@plt>
   1362d:	be 0a 00 00 00       	mov    $0xa,%esi
   13632:	48 89 c7             	mov    %rax,%rdi
   13635:	e8 b6 0f ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    fs << "\t\t3." << index << ".2 Available device extensions:\n";
   1363a:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   13641:	48 83 c0 10          	add    $0x10,%rax
   13645:	48 8d 15 f0 fd 00 00 	lea    0xfdf0(%rip),%rdx        # 2343c <_ZZN9VulkanApp6renderEvE11submitCount+0x144>
   1364c:	48 89 d6             	mov    %rdx,%rsi
   1364f:	48 89 c7             	mov    %rax,%rdi
   13652:	e8 69 0e ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13657:	48 89 c2             	mov    %rax,%rdx
   1365a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1365e:	48 89 c6             	mov    %rax,%rsi
   13661:	48 89 d7             	mov    %rdx,%rdi
   13664:	e8 57 0a ff ff       	call   40c0 <_ZNSolsEm@plt>
   13669:	48 89 c2             	mov    %rax,%rdx
   1366c:	48 8d 05 ad fe 00 00 	lea    0xfead(%rip),%rax        # 23520 <_ZZN9VulkanApp6renderEvE11submitCount+0x228>
   13673:	48 89 c6             	mov    %rax,%rsi
   13676:	48 89 d7             	mov    %rdx,%rdi
   13679:	e8 42 0e ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    auto availableDeviceExtensions =
        vkh::getAvailableDeviceExtensionList(physDev);
   1367e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   13682:	48 8b 08             	mov    (%rax),%rcx
   13685:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
   1368c:	ba 00 00 00 00       	mov    $0x0,%edx
   13691:	48 89 ce             	mov    %rcx,%rsi
   13694:	48 89 c7             	mov    %rax,%rdi
   13697:	e8 a1 51 ff ff       	call   883d <_ZN3vkh31getAvailableDeviceExtensionListEP18VkPhysicalDevice_TPKc>
    for (const auto &extension : availableDeviceExtensions) {
   1369c:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
   136a3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   136a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   136ab:	48 89 c7             	mov    %rax,%rdi
   136ae:	e8 4b 13 00 00       	call   149fe <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>
   136b3:	48 89 85 f8 f8 ff ff 	mov    %rax,-0x708(%rbp)
   136ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   136be:	48 89 c7             	mov    %rax,%rdi
   136c1:	e8 5e 13 00 00       	call   14a24 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>
   136c6:	48 89 85 f0 f8 ff ff 	mov    %rax,-0x710(%rbp)
   136cd:	eb 5e                	jmp    1372d <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad5>
   136cf:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
   136d6:	48 89 c7             	mov    %rax,%rdi
   136d9:	e8 ce 13 00 00       	call   14aac <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>
   136de:	48 89 45 90          	mov    %rax,-0x70(%rbp)
      fs << "\t\t\t" << extension.extensionName << '\n';
   136e2:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   136e9:	48 83 c0 10          	add    $0x10,%rax
   136ed:	48 8d 15 4d fe 00 00 	lea    0xfe4d(%rip),%rdx        # 23541 <_ZZN9VulkanApp6renderEvE11submitCount+0x249>
   136f4:	48 89 d6             	mov    %rdx,%rsi
   136f7:	48 89 c7             	mov    %rax,%rdi
   136fa:	e8 c1 0d ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   136ff:	48 89 c2             	mov    %rax,%rdx
   13702:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   13706:	48 89 c6             	mov    %rax,%rsi
   13709:	48 89 d7             	mov    %rdx,%rdi
   1370c:	e8 af 0d ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13711:	be 0a 00 00 00       	mov    $0xa,%esi
   13716:	48 89 c7             	mov    %rax,%rdi
   13719:	e8 d2 0e ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    for (const auto &extension : availableDeviceExtensions) {
   1371e:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
   13725:	48 89 c7             	mov    %rax,%rdi
   13728:	e8 5b 13 00 00       	call   14a88 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>
   1372d:	48 8d 95 f0 f8 ff ff 	lea    -0x710(%rbp),%rdx
   13734:	48 8d 85 f8 f8 ff ff 	lea    -0x708(%rbp),%rax
   1373b:	48 89 d6             	mov    %rdx,%rsi
   1373e:	48 89 c7             	mov    %rax,%rdi
   13741:	e8 07 13 00 00       	call   14a4d <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
   13746:	84 c0                	test   %al,%al
   13748:	75 85                	jne    136cf <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa77>
    }
    if (selectedDeviceIndex == index) {
   1374a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1374e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   13752:	0f 85 fb 00 00 00    	jne    13853 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbfb>
      fs << "\t\t3." << index << ".3 Required device extensions:\n";
   13758:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   1375f:	48 83 c0 10          	add    $0x10,%rax
   13763:	48 8d 15 d2 fc 00 00 	lea    0xfcd2(%rip),%rdx        # 2343c <_ZZN9VulkanApp6renderEvE11submitCount+0x144>
   1376a:	48 89 d6             	mov    %rdx,%rsi
   1376d:	48 89 c7             	mov    %rax,%rdi
   13770:	e8 4b 0d ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13775:	48 89 c2             	mov    %rax,%rdx
   13778:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1377c:	48 89 c6             	mov    %rax,%rsi
   1377f:	48 89 d7             	mov    %rdx,%rdi
   13782:	e8 39 09 ff ff       	call   40c0 <_ZNSolsEm@plt>
   13787:	48 89 c2             	mov    %rax,%rdx
   1378a:	48 8d 05 b7 fd 00 00 	lea    0xfdb7(%rip),%rax        # 23548 <_ZZN9VulkanApp6renderEvE11submitCount+0x250>
   13791:	48 89 c6             	mov    %rax,%rsi
   13794:	48 89 d7             	mov    %rdx,%rdi
   13797:	e8 24 0d ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
      for (const auto &extension : deviceExtensions) {
   1379c:	48 8b 85 38 f1 ff ff 	mov    -0xec8(%rbp),%rax
   137a3:	48 05 90 00 00 00    	add    $0x90,%rax
   137a9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   137ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   137b1:	48 89 c7             	mov    %rax,%rdi
   137b4:	e8 a3 0d 00 00       	call   1455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   137b9:	48 89 85 e8 f8 ff ff 	mov    %rax,-0x718(%rbp)
   137c0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   137c4:	48 89 c7             	mov    %rax,%rdi
   137c7:	e8 b6 0d 00 00       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   137cc:	48 89 85 e0 f8 ff ff 	mov    %rax,-0x720(%rbp)
   137d3:	eb 61                	jmp    13836 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbde>
   137d5:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
   137dc:	48 89 c7             	mov    %rax,%rdi
   137df:	e8 22 0e 00 00       	call   14606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
   137e4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
        fs << "\t\t\t" << extension << '\n';
   137e8:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   137ef:	48 83 c0 10          	add    $0x10,%rax
   137f3:	48 8d 15 47 fd 00 00 	lea    0xfd47(%rip),%rdx        # 23541 <_ZZN9VulkanApp6renderEvE11submitCount+0x249>
   137fa:	48 89 d6             	mov    %rdx,%rsi
   137fd:	48 89 c7             	mov    %rax,%rdi
   13800:	e8 bb 0c ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   13805:	48 89 c2             	mov    %rax,%rdx
   13808:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1380c:	48 8b 00             	mov    (%rax),%rax
   1380f:	48 89 c6             	mov    %rax,%rsi
   13812:	48 89 d7             	mov    %rdx,%rdi
   13815:	e8 a6 0c ff ff       	call   44c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   1381a:	be 0a 00 00 00       	mov    $0xa,%esi
   1381f:	48 89 c7             	mov    %rax,%rdi
   13822:	e8 c9 0d ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
      for (const auto &extension : deviceExtensions) {
   13827:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
   1382e:	48 89 c7             	mov    %rax,%rdi
   13831:	e8 b0 0d 00 00       	call   145e6 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>
   13836:	48 8d 95 e0 f8 ff ff 	lea    -0x720(%rbp),%rdx
   1383d:	48 8d 85 e8 f8 ff ff 	lea    -0x718(%rbp),%rax
   13844:	48 89 d6             	mov    %rdx,%rsi
   13847:	48 89 c7             	mov    %rax,%rdi
   1384a:	e8 5c 0d 00 00       	call   145ab <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   1384f:	84 c0                	test   %al,%al
   13851:	75 82                	jne    137d5 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb7d>
      }
    }
    fs << '\n';
   13853:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   1385a:	48 83 c0 10          	add    $0x10,%rax
   1385e:	be 0a 00 00 00       	mov    $0xa,%esi
   13863:	48 89 c7             	mov    %rax,%rdi
   13866:	e8 85 0d ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    ++index;
   1386b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  }
   13870:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
   13877:	48 89 c7             	mov    %rax,%rdi
   1387a:	e8 33 61 ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
   1387f:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
   13886:	48 89 c7             	mov    %rax,%rdi
   13889:	e8 f2 09 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  for (const auto &physDev : physicalDeviceList) {
   1388e:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
   13895:	48 89 c7             	mov    %rax,%rdi
   13898:	e8 19 10 00 00       	call   148b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
   1389d:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
   138a4:	48 8d 85 28 f9 ff ff 	lea    -0x6d8(%rbp),%rax
   138ab:	48 89 d6             	mov    %rdx,%rsi
   138ae:	48 89 c7             	mov    %rax,%rdi
   138b1:	e8 c5 0f 00 00       	call   1487b <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   138b6:	84 c0                	test   %al,%al
   138b8:	0f 85 18 f9 ff ff    	jne    131d6 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x57e>
  fs << '\n';
   138be:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   138c5:	48 83 c0 10          	add    $0x10,%rax
   138c9:	be 0a 00 00 00       	mov    $0xa,%esi
   138ce:	48 89 c7             	mov    %rax,%rdi
   138d1:	e8 1a 0d ff ff       	call   45f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
   138d6:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
   138dd:	48 89 c7             	mov    %rax,%rdi
   138e0:	e8 57 63 ff ff       	call   9c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   138e5:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
   138ec:	48 89 c7             	mov    %rax,%rdi
   138ef:	e8 50 5f ff ff       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
   138f4:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
   138fb:	48 89 c7             	mov    %rax,%rdi
   138fe:	e8 af 60 ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
   13903:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   1390a:	48 89 c7             	mov    %rax,%rdi
   1390d:	e8 9e 07 ff ff       	call   40b0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>
   13912:	e9 cd 00 00 00       	jmp    139e4 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8c>
    throw std::runtime_error("Failed to open " + filePath + '\n');
   13917:	49 89 c4             	mov    %rax,%r12
   1391a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   13921:	48 89 c7             	mov    %rax,%rdi
   13924:	e8 57 09 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   13929:	eb 03                	jmp    1392e <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd6>
   1392b:	49 89 c4             	mov    %rax,%r12
   1392e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   13935:	48 89 c7             	mov    %rax,%rdi
   13938:	e8 43 09 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   1393d:	eb 03                	jmp    13942 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcea>
   1393f:	49 89 c4             	mov    %rax,%r12
   13942:	48 89 df             	mov    %rbx,%rdi
   13945:	e8 b6 09 ff ff       	call   4300 <__cxa_free_exception@plt>
   1394a:	4c 89 e3             	mov    %r12,%rbx
   1394d:	eb 7b                	jmp    139ca <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd72>
    std::string selectStr = "";
   1394f:	48 89 c3             	mov    %rax,%rbx
   13952:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   13959:	48 89 c7             	mov    %rax,%rdi
   1395c:	e8 1f 0c ff ff       	call   4580 <_ZNSaIcED1Ev@plt>
   13961:	eb 2b                	jmp    1398e <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd36>
  }
   13963:	48 89 c3             	mov    %rax,%rbx
   13966:	48 8d 85 00 f9 ff ff 	lea    -0x700(%rbp),%rax
   1396d:	48 89 c7             	mov    %rax,%rdi
   13970:	e8 3d 60 ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
   13975:	eb 03                	jmp    1397a <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd22>
   13977:	48 89 c3             	mov    %rax,%rbx
   1397a:	48 8d 85 40 f1 ff ff 	lea    -0xec0(%rbp),%rax
   13981:	48 89 c7             	mov    %rax,%rdi
   13984:	e8 f7 08 ff ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   13989:	eb 03                	jmp    1398e <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd36>
   1398b:	48 89 c3             	mov    %rax,%rbx
   1398e:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
   13995:	48 89 c7             	mov    %rax,%rdi
   13998:	e8 9f 62 ff ff       	call   9c3c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   1399d:	eb 03                	jmp    139a2 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4a>
   1399f:	48 89 c3             	mov    %rax,%rbx
   139a2:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
   139a9:	48 89 c7             	mov    %rax,%rdi
   139ac:	e8 93 5e ff ff       	call   9844 <_ZNSt6vectorI17VkLayerPropertiesSaIS0_EED1Ev>
   139b1:	eb 03                	jmp    139b6 <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd5e>
   139b3:	48 89 c3             	mov    %rax,%rbx
   139b6:	48 8d 85 f0 fc ff ff 	lea    -0x310(%rbp),%rax
   139bd:	48 89 c7             	mov    %rax,%rdi
   139c0:	e8 ed 5f ff ff       	call   99b2 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EED1Ev>
   139c5:	eb 03                	jmp    139ca <_ZN9VulkanApp9writeInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd72>
   139c7:	48 89 c3             	mov    %rax,%rbx
   139ca:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
   139d1:	48 89 c7             	mov    %rax,%rdi
   139d4:	e8 d7 06 ff ff       	call   40b0 <_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@plt>
   139d9:	48 89 d8             	mov    %rbx,%rax
   139dc:	48 89 c7             	mov    %rax,%rdi
   139df:	e8 8c 0f ff ff       	call   4970 <_Unwind_Resume@plt>
   139e4:	48 81 c4 c0 0e 00 00 	add    $0xec0,%rsp
   139eb:	5b                   	pop    %rbx
   139ec:	41 5c                	pop    %r12
   139ee:	5d                   	pop    %rbp
   139ef:	c3                   	ret

00000000000139f0 <_Z41__static_initialization_and_destruction_0ii>:
   139f0:	55                   	push   %rbp
   139f1:	48 89 e5             	mov    %rsp,%rbp
   139f4:	41 57                	push   %r15
   139f6:	41 56                	push   %r14
   139f8:	41 55                	push   %r13
   139fa:	41 54                	push   %r12
   139fc:	53                   	push   %rbx
   139fd:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
   13a04:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%rbp)
   13a0a:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%rbp)
   13a10:	83 bd 5c ff ff ff 01 	cmpl   $0x1,-0xa4(%rbp)
   13a17:	0f 85 ca 02 00 00    	jne    13ce7 <_Z41__static_initialization_and_destruction_0ii+0x2f7>
   13a1d:	81 bd 58 ff ff ff ff 	cmpl   $0xffff,-0xa8(%rbp)
   13a24:	ff 00 00 
   13a27:	0f 85 ba 02 00 00    	jne    13ce7 <_Z41__static_initialization_and_destruction_0ii+0x2f7>
   13a2d:	48 8d 05 5c 1c 02 00 	lea    0x21c5c(%rip),%rax        # 35690 <_ZStL8__ioinit>
   13a34:	48 89 c7             	mov    %rax,%rdi
   13a37:	e8 c4 0d ff ff       	call   4800 <_ZNSt8ios_base4InitC1Ev@plt>
   13a3c:	48 8d 05 c5 1a 02 00 	lea    0x21ac5(%rip),%rax        # 35508 <__dso_handle>
   13a43:	48 89 c2             	mov    %rax,%rdx
   13a46:	48 8d 05 43 1c 02 00 	lea    0x21c43(%rip),%rax        # 35690 <_ZStL8__ioinit>
   13a4d:	48 89 c6             	mov    %rax,%rsi
   13a50:	48 8b 05 81 15 02 00 	mov    0x21581(%rip),%rax        # 34fd8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
   13a57:	48 89 c7             	mov    %rax,%rdi
   13a5a:	e8 c1 09 ff ff       	call   4420 <__cxa_atexit@plt>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2, 2, 3, 0};
   13a5f:	48 8d 05 12 1c 02 00 	lea    0x21c12(%rip),%rax        # 35678 <_ZGVN6shader16triangle_indicesE>
   13a66:	0f b6 00             	movzbl (%rax),%eax
   13a69:	84 c0                	test   %al,%al
   13a6b:	0f 85 b9 00 00 00    	jne    13b2a <_Z41__static_initialization_and_destruction_0ii+0x13a>
   13a71:	48 8d 05 00 1c 02 00 	lea    0x21c00(%rip),%rax        # 35678 <_ZGVN6shader16triangle_indicesE>
   13a78:	c6 00 01             	movb   $0x1,(%rax)
   13a7b:	66 c7 85 62 ff ff ff 	movw   $0x0,-0x9e(%rbp)
   13a82:	00 00 
   13a84:	66 c7 85 64 ff ff ff 	movw   $0x1,-0x9c(%rbp)
   13a8b:	01 00 
   13a8d:	66 c7 85 66 ff ff ff 	movw   $0x2,-0x9a(%rbp)
   13a94:	02 00 
   13a96:	66 c7 85 68 ff ff ff 	movw   $0x2,-0x98(%rbp)
   13a9d:	02 00 
   13a9f:	66 c7 85 6a ff ff ff 	movw   $0x3,-0x96(%rbp)
   13aa6:	03 00 
   13aa8:	66 c7 85 6c ff ff ff 	movw   $0x0,-0x94(%rbp)
   13aaf:	00 00 
   13ab1:	48 8d 85 62 ff ff ff 	lea    -0x9e(%rbp),%rax
   13ab8:	49 89 c6             	mov    %rax,%r14
   13abb:	41 bf 06 00 00 00    	mov    $0x6,%r15d
   13ac1:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   13ac8:	48 89 c7             	mov    %rax,%rdi
   13acb:	e8 d8 15 ff ff       	call   50a8 <_ZNSaItEC1Ev>
   13ad0:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   13ad7:	4c 89 f6             	mov    %r14,%rsi
   13ada:	4c 89 ff             	mov    %r15,%rdi
   13add:	4c 89 f1             	mov    %r14,%rcx
   13ae0:	4c 89 fb             	mov    %r15,%rbx
   13ae3:	48 89 da             	mov    %rbx,%rdx
   13ae6:	48 89 c1             	mov    %rax,%rcx
   13ae9:	48 8d 05 50 1b 02 00 	lea    0x21b50(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
   13af0:	48 89 c7             	mov    %rax,%rdi
   13af3:	e8 e8 15 ff ff       	call   50e0 <_ZNSt6vectorItSaItEEC1ESt16initializer_listItERKS0_>
   13af8:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   13aff:	48 89 c7             	mov    %rax,%rdi
   13b02:	e8 bd 15 ff ff       	call   50c4 <_ZNSaItED1Ev>
   13b07:	48 8d 05 fa 19 02 00 	lea    0x219fa(%rip),%rax        # 35508 <__dso_handle>
   13b0e:	48 89 c2             	mov    %rax,%rdx
   13b11:	48 8d 05 28 1b 02 00 	lea    0x21b28(%rip),%rax        # 35640 <_ZN6shader16triangle_indicesE>
   13b18:	48 89 c6             	mov    %rax,%rsi
   13b1b:	48 8d 05 ee 27 ff ff 	lea    -0xd812(%rip),%rax        # 6310 <_ZNSt6vectorItSaItEED1Ev>
   13b22:	48 89 c7             	mov    %rax,%rdi
   13b25:	e8 f6 08 ff ff       	call   4420 <__cxa_atexit@plt>
inline const std::vector<vkh::Vertex2D_RGB> triangle_index_data{
   13b2a:	48 8d 05 4f 1b 02 00 	lea    0x21b4f(%rip),%rax        # 35680 <_ZGVN6shader19triangle_index_dataE>
   13b31:	0f b6 00             	movzbl (%rax),%eax
   13b34:	84 c0                	test   %al,%al
   13b36:	0f 85 ab 01 00 00    	jne    13ce7 <_Z41__static_initialization_and_destruction_0ii+0x2f7>
   13b3c:	48 8d 05 3d 1b 02 00 	lea    0x21b3d(%rip),%rax        # 35680 <_ZGVN6shader19triangle_index_dataE>
   13b43:	c6 00 01             	movb   $0x1,(%rax)
    {{-0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}}};
   13b46:	f3 0f 10 05 be ff 00 	movss  0xffbe(%rip),%xmm0        # 23b0c <_ZZN9VulkanApp6renderEvE11submitCount+0x814>
   13b4d:	00 
   13b4e:	f3 0f 11 85 70 ff ff 	movss  %xmm0,-0x90(%rbp)
   13b55:	ff 
   13b56:	f3 0f 10 05 ae ff 00 	movss  0xffae(%rip),%xmm0        # 23b0c <_ZZN9VulkanApp6renderEvE11submitCount+0x814>
   13b5d:	00 
   13b5e:	f3 0f 11 85 74 ff ff 	movss  %xmm0,-0x8c(%rbp)
   13b65:	ff 
   13b66:	f3 0f 10 05 5e ff 00 	movss  0xff5e(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13b6d:	00 
   13b6e:	f3 0f 11 85 78 ff ff 	movss  %xmm0,-0x88(%rbp)
   13b75:	ff 
   13b76:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13b7a:	f3 0f 11 85 7c ff ff 	movss  %xmm0,-0x84(%rbp)
   13b81:	ff 
   13b82:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13b86:	f3 0f 11 45 80       	movss  %xmm0,-0x80(%rbp)
   13b8b:	f3 0f 10 05 7d ff 00 	movss  0xff7d(%rip),%xmm0        # 23b10 <_ZZN9VulkanApp6renderEvE11submitCount+0x818>
   13b92:	00 
   13b93:	f3 0f 11 45 84       	movss  %xmm0,-0x7c(%rbp)
   13b98:	f3 0f 10 05 6c ff 00 	movss  0xff6c(%rip),%xmm0        # 23b0c <_ZZN9VulkanApp6renderEvE11submitCount+0x814>
   13b9f:	00 
   13ba0:	f3 0f 11 45 88       	movss  %xmm0,-0x78(%rbp)
   13ba5:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13ba9:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)
   13bae:	f3 0f 10 05 16 ff 00 	movss  0xff16(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13bb5:	00 
   13bb6:	f3 0f 11 45 90       	movss  %xmm0,-0x70(%rbp)
   13bbb:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13bbf:	f3 0f 11 45 94       	movss  %xmm0,-0x6c(%rbp)
   13bc4:	f3 0f 10 05 44 ff 00 	movss  0xff44(%rip),%xmm0        # 23b10 <_ZZN9VulkanApp6renderEvE11submitCount+0x818>
   13bcb:	00 
   13bcc:	f3 0f 11 45 98       	movss  %xmm0,-0x68(%rbp)
   13bd1:	f3 0f 10 05 37 ff 00 	movss  0xff37(%rip),%xmm0        # 23b10 <_ZZN9VulkanApp6renderEvE11submitCount+0x818>
   13bd8:	00 
   13bd9:	f3 0f 11 45 9c       	movss  %xmm0,-0x64(%rbp)
   13bde:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13be2:	f3 0f 11 45 a0       	movss  %xmm0,-0x60(%rbp)
   13be7:	66 0f ef c0          	pxor   %xmm0,%xmm0
   13beb:	f3 0f 11 45 a4       	movss  %xmm0,-0x5c(%rbp)
   13bf0:	f3 0f 10 05 d4 fe 00 	movss  0xfed4(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13bf7:	00 
   13bf8:	f3 0f 11 45 a8       	movss  %xmm0,-0x58(%rbp)
   13bfd:	f3 0f 10 05 07 ff 00 	movss  0xff07(%rip),%xmm0        # 23b0c <_ZZN9VulkanApp6renderEvE11submitCount+0x814>
   13c04:	00 
   13c05:	f3 0f 11 45 ac       	movss  %xmm0,-0x54(%rbp)
   13c0a:	f3 0f 10 05 fe fe 00 	movss  0xfefe(%rip),%xmm0        # 23b10 <_ZZN9VulkanApp6renderEvE11submitCount+0x818>
   13c11:	00 
   13c12:	f3 0f 11 45 b0       	movss  %xmm0,-0x50(%rbp)
   13c17:	f3 0f 10 05 ad fe 00 	movss  0xfead(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13c1e:	00 
   13c1f:	f3 0f 11 45 b4       	movss  %xmm0,-0x4c(%rbp)
   13c24:	f3 0f 10 05 a0 fe 00 	movss  0xfea0(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13c2b:	00 
   13c2c:	f3 0f 11 45 b8       	movss  %xmm0,-0x48(%rbp)
   13c31:	f3 0f 10 05 93 fe 00 	movss  0xfe93(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   13c38:	00 
   13c39:	f3 0f 11 45 bc       	movss  %xmm0,-0x44(%rbp)
   13c3e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   13c45:	49 89 c4             	mov    %rax,%r12
   13c48:	41 bd 04 00 00 00    	mov    $0x4,%r13d
   13c4e:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   13c52:	48 89 c7             	mov    %rax,%rdi
   13c55:	e8 0e 15 ff ff       	call   5168 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEEC1Ev>
   13c5a:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   13c5e:	4c 89 e6             	mov    %r12,%rsi
   13c61:	4c 89 ef             	mov    %r13,%rdi
   13c64:	4c 89 e1             	mov    %r12,%rcx
   13c67:	4c 89 eb             	mov    %r13,%rbx
   13c6a:	48 89 da             	mov    %rbx,%rdx
   13c6d:	48 89 c1             	mov    %rax,%rcx
   13c70:	48 8d 05 e9 19 02 00 	lea    0x219e9(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
   13c77:	48 89 c7             	mov    %rax,%rdi
   13c7a:	e8 21 15 ff ff       	call   51a0 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EEC1ESt16initializer_listIS4_ERKS5_>
   13c7f:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   13c83:	48 89 c7             	mov    %rax,%rdi
   13c86:	e8 f9 14 ff ff       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
inline const std::vector<vkh::Vertex2D_RGB> triangle_index_data{
   13c8b:	48 8d 05 76 18 02 00 	lea    0x21876(%rip),%rax        # 35508 <__dso_handle>
   13c92:	48 89 c2             	mov    %rax,%rdx
   13c95:	48 8d 05 c4 19 02 00 	lea    0x219c4(%rip),%rax        # 35660 <_ZN6shader19triangle_index_dataE>
   13c9c:	48 89 c6             	mov    %rax,%rsi
   13c9f:	48 8d 05 ae 26 ff ff 	lea    -0xd952(%rip),%rax        # 6354 <_ZNSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EED1Ev>
   13ca6:	48 89 c7             	mov    %rax,%rdi
   13ca9:	e8 72 07 ff ff       	call   4420 <__cxa_atexit@plt>
   13cae:	eb 37                	jmp    13ce7 <_Z41__static_initialization_and_destruction_0ii+0x2f7>
inline const std::vector<uint16_t> triangle_indices{0, 1, 2, 2, 3, 0};
   13cb0:	48 89 c3             	mov    %rax,%rbx
   13cb3:	48 8d 85 6f ff ff ff 	lea    -0x91(%rbp),%rax
   13cba:	48 89 c7             	mov    %rax,%rdi
   13cbd:	e8 02 14 ff ff       	call   50c4 <_ZNSaItED1Ev>
   13cc2:	48 89 d8             	mov    %rbx,%rax
   13cc5:	48 89 c7             	mov    %rax,%rdi
   13cc8:	e8 a3 0c ff ff       	call   4970 <_Unwind_Resume@plt>
    {{-0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}}};
   13ccd:	48 89 c3             	mov    %rax,%rbx
   13cd0:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
   13cd4:	48 89 c7             	mov    %rax,%rdi
   13cd7:	e8 a8 14 ff ff       	call   5184 <_ZNSaIN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EEEED1Ev>
   13cdc:	48 89 d8             	mov    %rbx,%rax
   13cdf:	48 89 c7             	mov    %rax,%rdi
   13ce2:	e8 89 0c ff ff       	call   4970 <_Unwind_Resume@plt>
   13ce7:	90                   	nop
   13ce8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
   13cef:	5b                   	pop    %rbx
   13cf0:	41 5c                	pop    %r12
   13cf2:	41 5d                	pop    %r13
   13cf4:	41 5e                	pop    %r14
   13cf6:	41 5f                	pop    %r15
   13cf8:	5d                   	pop    %rbp
   13cf9:	c3                   	ret

0000000000013cfa <_GLOBAL__sub_I__ZN9VulkanApp12createWindowEv>:
   13cfa:	55                   	push   %rbp
   13cfb:	48 89 e5             	mov    %rsp,%rbp
   13cfe:	be ff ff 00 00       	mov    $0xffff,%esi
   13d03:	bf 01 00 00 00       	mov    $0x1,%edi
   13d08:	e8 e3 fc ff ff       	call   139f0 <_Z41__static_initialization_and_destruction_0ii>
   13d0d:	5d                   	pop    %rbp
   13d0e:	c3                   	ret
   13d0f:	90                   	nop

0000000000013d10 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
   13d10:	55                   	push   %rbp
   13d11:	48 89 e5             	mov    %rsp,%rbp
   13d14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13d18:	48 8d 15 f1 0f 02 00 	lea    0x20ff1(%rip),%rdx        # 34d10 <_ZTVSt9exception@GLIBCXX_3.4+0x10>
   13d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d23:	48 89 10             	mov    %rdx,(%rax)
   13d26:	90                   	nop
   13d27:	5d                   	pop    %rbp
   13d28:	c3                   	ret

0000000000013d29 <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
   13d29:	55                   	push   %rbp
   13d2a:	48 89 e5             	mov    %rsp,%rbp
   13d2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13d31:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13d35:	90                   	nop
   13d36:	5d                   	pop    %rbp
   13d37:	c3                   	ret

0000000000013d38 <_ZNKSt19bad_optional_access4whatEv>:
    const char* what() const noexcept override
   13d38:	55                   	push   %rbp
   13d39:	48 89 e5             	mov    %rsp,%rbp
   13d3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return "bad optional access"; }
   13d40:	48 8d 05 99 f3 00 00 	lea    0xf399(%rip),%rax        # 230e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
   13d47:	5d                   	pop    %rbp
   13d48:	c3                   	ret
   13d49:	90                   	nop

0000000000013d4a <_ZNSt19bad_optional_accessC1Ev>:
    bad_optional_access() = default;
   13d4a:	55                   	push   %rbp
   13d4b:	48 89 e5             	mov    %rsp,%rbp
   13d4e:	48 83 ec 10          	sub    $0x10,%rsp
   13d52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13d56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d5a:	48 89 c7             	mov    %rax,%rdi
   13d5d:	e8 ae ff ff ff       	call   13d10 <_ZNSt9exceptionC1Ev>
   13d62:	48 8d 15 57 0f 02 00 	lea    0x20f57(%rip),%rdx        # 34cc0 <_ZTVSt19bad_optional_access+0x10>
   13d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d6d:	48 89 10             	mov    %rdx,(%rax)
   13d70:	90                   	nop
   13d71:	c9                   	leave
   13d72:	c3                   	ret

0000000000013d73 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
   13d73:	55                   	push   %rbp
   13d74:	48 89 e5             	mov    %rsp,%rbp
   13d77:	53                   	push   %rbx
   13d78:	48 83 ec 08          	sub    $0x8,%rsp
   13d7c:	bf 08 00 00 00       	mov    $0x8,%edi
   13d81:	e8 4a 04 ff ff       	call   41d0 <__cxa_allocate_exception@plt>
   13d86:	48 89 c3             	mov    %rax,%rbx
   13d89:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
   13d90:	48 89 df             	mov    %rbx,%rdi
   13d93:	e8 b2 ff ff ff       	call   13d4a <_ZNSt19bad_optional_accessC1Ev>
   13d98:	48 8d 05 d1 c1 00 00 	lea    0xc1d1(%rip),%rax        # 1ff70 <_ZNSt19bad_optional_accessD1Ev>
   13d9f:	48 89 c2             	mov    %rax,%rdx
   13da2:	48 8d 05 af 0f 02 00 	lea    0x20faf(%rip),%rax        # 34d58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   13da9:	48 89 c6             	mov    %rax,%rsi
   13dac:	48 89 df             	mov    %rbx,%rdi
   13daf:	e8 4c 0b ff ff       	call   4900 <__cxa_throw@plt>

0000000000013db4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   13db4:	55                   	push   %rbp
   13db5:	48 89 e5             	mov    %rsp,%rbp
   13db8:	48 83 ec 10          	sub    $0x10,%rsp
   13dbc:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   13dc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13dc4:	66 0f 6e c0          	movd   %eax,%xmm0
   13dc8:	e8 53 05 ff ff       	call   4320 <cosf@plt>
   13dcd:	c9                   	leave
   13dce:	c3                   	ret

0000000000013dcf <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   13dcf:	55                   	push   %rbp
   13dd0:	48 89 e5             	mov    %rsp,%rbp
   13dd3:	48 83 ec 10          	sub    $0x10,%rsp
   13dd7:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   13ddc:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13ddf:	66 0f 6e c0          	movd   %eax,%xmm0
   13de3:	e8 d8 05 ff ff       	call   43c0 <sinf@plt>
   13de8:	c9                   	leave
   13de9:	c3                   	ret

0000000000013dea <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   13dea:	55                   	push   %rbp
   13deb:	48 89 e5             	mov    %rsp,%rbp
   13dee:	48 83 ec 10          	sub    $0x10,%rsp
   13df2:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   13df7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13dfa:	66 0f 6e c0          	movd   %eax,%xmm0
   13dfe:	e8 cd 0b ff ff       	call   49d0 <sqrtf@plt>
   13e03:	c9                   	leave
   13e04:	c3                   	ret

0000000000013e05 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
   13e05:	55                   	push   %rbp
   13e06:	48 89 e5             	mov    %rsp,%rbp
   13e09:	48 83 ec 10          	sub    $0x10,%rsp
   13e0d:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   13e12:	8b 45 fc             	mov    -0x4(%rbp),%eax
   13e15:	66 0f 6e c0          	movd   %eax,%xmm0
   13e19:	e8 a2 09 ff ff       	call   47c0 <tanf@plt>
   13e1e:	c9                   	leave
   13e1f:	c3                   	ret

0000000000013e20 <_ZNSt14numeric_limitsIfE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
   13e20:	55                   	push   %rbp
   13e21:	48 89 e5             	mov    %rsp,%rbp
   13e24:	f3 0f 10 05 9c fc 00 	movss  0xfc9c(%rip),%xmm0        # 23ac8 <_ZZN9VulkanApp6renderEvE11submitCount+0x7d0>
   13e2b:	00 
   13e2c:	5d                   	pop    %rbp
   13e2d:	c3                   	ret

0000000000013e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T scalar)
		: x(scalar), y(scalar), z(scalar)
	{}

	template <typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T _x, T _y, T _z)
   13e2e:	55                   	push   %rbp
   13e2f:	48 89 e5             	mov    %rsp,%rbp
   13e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13e36:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
   13e3b:	f3 0f 11 4d f0       	movss  %xmm1,-0x10(%rbp)
   13e40:	f3 0f 11 55 ec       	movss  %xmm2,-0x14(%rbp)
		: x(_x), y(_y), z(_z)
   13e45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e49:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   13e4e:	f3 0f 11 00          	movss  %xmm0,(%rax)
   13e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e56:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   13e5b:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   13e60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e64:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
   13e69:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
	{}
   13e6e:	90                   	nop
   13e6f:	5d                   	pop    %rbp
   13e70:	c3                   	ret
   13e71:	90                   	nop

0000000000013e72 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>:
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3050. Conversion specification problem in chrono::duration
	template<typename _Rep2, typename = _Require<
		 is_convertible<const _Rep2&, rep>,
		 __or_<__is_float<rep>, __not_<__is_float<_Rep2>>>>>
	  constexpr explicit duration(const _Rep2& __rep)
   13e72:	55                   	push   %rbp
   13e73:	48 89 e5             	mov    %rsp,%rbp
   13e76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13e7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
   13e7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13e82:	48 8b 10             	mov    (%rax),%rdx
   13e85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e89:	48 89 10             	mov    %rdx,(%rax)
   13e8c:	90                   	nop
   13e8d:	5d                   	pop    %rbp
   13e8e:	c3                   	ret
   13e8f:	90                   	nop

0000000000013e90 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
   13e90:	55                   	push   %rbp
   13e91:	48 89 e5             	mov    %rsp,%rbp
   13e94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
   13e98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e9c:	48 8b 00             	mov    (%rax),%rax
   13e9f:	5d                   	pop    %rbp
   13ea0:	c3                   	ret
   13ea1:	90                   	nop

0000000000013ea2 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
   13ea2:	55                   	push   %rbp
   13ea3:	48 89 e5             	mov    %rsp,%rbp
   13ea6:	48 83 ec 10          	sub    $0x10,%rsp
   13eaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_color = _S_red;
   13eae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13eb2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      _M_reset();
   13eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ebc:	48 89 c7             	mov    %rax,%rdi
   13ebf:	e8 04 00 00 00       	call   13ec8 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
   13ec4:	90                   	nop
   13ec5:	c9                   	leave
   13ec6:	c3                   	ret
   13ec7:	90                   	nop

0000000000013ec8 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
   13ec8:	55                   	push   %rbp
   13ec9:	48 89 e5             	mov    %rsp,%rbp
   13ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_parent = 0;
   13ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ed4:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   13edb:	00 
      _M_header._M_left = &_M_header;
   13edc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ee4:	48 89 50 10          	mov    %rdx,0x10(%rax)
      _M_header._M_right = &_M_header;
   13ee8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13eec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ef0:	48 89 50 18          	mov    %rdx,0x18(%rax)
      _M_node_count = 0;
   13ef4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ef8:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   13eff:	00 
    }
   13f00:	90                   	nop
   13f01:	5d                   	pop    %rbp
   13f02:	c3                   	ret
   13f03:	90                   	nop

0000000000013f04 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>:
      _Optional_payload_base() = default;
   13f04:	55                   	push   %rbp
   13f05:	48 89 e5             	mov    %rsp,%rbp
   13f08:	48 83 ec 10          	sub    $0x10,%rsp
   13f0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f14:	48 89 c7             	mov    %rax,%rdi
   13f17:	e8 60 00 00 00       	call   13f7c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1Ev>
   13f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f20:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
   13f24:	90                   	nop
   13f25:	c9                   	leave
   13f26:	c3                   	ret
   13f27:	90                   	nop

0000000000013f28 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEC1Ev>:
      _Optional_payload() = default;
   13f28:	55                   	push   %rbp
   13f29:	48 89 e5             	mov    %rsp,%rbp
   13f2c:	48 83 ec 10          	sub    $0x10,%rsp
   13f30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f38:	48 89 c7             	mov    %rax,%rdi
   13f3b:	e8 c4 ff ff ff       	call   13f04 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>
   13f40:	90                   	nop
   13f41:	c9                   	leave
   13f42:	c3                   	ret
   13f43:	90                   	nop

0000000000013f44 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
   13f44:	55                   	push   %rbp
   13f45:	48 89 e5             	mov    %rsp,%rbp
   13f48:	48 83 ec 10          	sub    $0x10,%rsp
   13f4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f54:	48 89 c7             	mov    %rax,%rdi
   13f57:	e8 cc ff ff ff       	call   13f28 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEC1Ev>
   13f5c:	90                   	nop
   13f5d:	c9                   	leave
   13f5e:	c3                   	ret
   13f5f:	90                   	nop

0000000000013f60 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1Ev>:
      constexpr optional() noexcept { }
   13f60:	55                   	push   %rbp
   13f61:	48 89 e5             	mov    %rsp,%rbp
   13f64:	48 83 ec 10          	sub    $0x10,%rsp
   13f68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f70:	48 89 c7             	mov    %rax,%rdi
   13f73:	e8 cc ff ff ff       	call   13f44 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1Ev>
   13f78:	90                   	nop
   13f79:	c9                   	leave
   13f7a:	c3                   	ret
   13f7b:	90                   	nop

0000000000013f7c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
   13f7c:	55                   	push   %rbp
   13f7d:	48 89 e5             	mov    %rsp,%rbp
   13f80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f84:	90                   	nop
   13f85:	5d                   	pop    %rbp
   13f86:	c3                   	ret
   13f87:	90                   	nop

0000000000013f88 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEaSERKS3_>:
      _Optional_base& operator=(const _Optional_base&) = default;
   13f88:	55                   	push   %rbp
   13f89:	48 89 e5             	mov    %rsp,%rbp
   13f8c:	48 83 ec 10          	sub    $0x10,%rsp
   13f90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13f94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13f98:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   13f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fa0:	48 89 d6             	mov    %rdx,%rsi
   13fa3:	48 89 c7             	mov    %rax,%rdi
   13fa6:	e8 57 09 00 00       	call   14902 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEaSERKS3_>
   13fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13faf:	c9                   	leave
   13fb0:	c3                   	ret
   13fb1:	90                   	nop

0000000000013fb2 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEaSERKS3_>:
    class optional
   13fb2:	55                   	push   %rbp
   13fb3:	48 89 e5             	mov    %rsp,%rbp
   13fb6:	48 83 ec 10          	sub    $0x10,%rsp
   13fba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   13fbe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   13fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fc6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   13fca:	48 89 d6             	mov    %rdx,%rsi
   13fcd:	48 89 c7             	mov    %rax,%rdi
   13fd0:	e8 b3 ff ff ff       	call   13f88 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEaSERKS3_>
   13fd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fd9:	c9                   	leave
   13fda:	c3                   	ret
   13fdb:	90                   	nop

0000000000013fdc <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
   13fdc:	55                   	push   %rbp
   13fdd:	48 89 e5             	mov    %rsp,%rbp
   13fe0:	48 83 ec 10          	sub    $0x10,%rsp
   13fe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_is_engaged())
   13fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fec:	48 89 c7             	mov    %rax,%rdi
   13fef:	e8 1a 00 00 00       	call   1400e <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
   13ff4:	84 c0                	test   %al,%al
   13ff6:	74 0e                	je     14006 <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv+0x2a>
	  return this->_M_get();
   13ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ffc:	48 89 c7             	mov    %rax,%rdi
   13fff:	e8 28 09 00 00       	call   1492c <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv>
   14004:	eb 05                	jmp    1400b <_ZNRSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE5valueEv+0x2f>
	__throw_bad_optional_access();
   14006:	e8 68 fd ff ff       	call   13d73 <_ZSt27__throw_bad_optional_accessv>
      }
   1400b:	c9                   	leave
   1400c:	c3                   	ret
   1400d:	90                   	nop

000000000001400e <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
   1400e:	55                   	push   %rbp
   1400f:	48 89 e5             	mov    %rsp,%rbp
   14012:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
   14016:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1401a:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   1401e:	5d                   	pop    %rbp
   1401f:	c3                   	ret

0000000000014020 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
   14020:	55                   	push   %rbp
   14021:	48 89 e5             	mov    %rsp,%rbp
   14024:	48 83 ec 10          	sub    $0x10,%rsp
   14028:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1402c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14030:	48 89 c7             	mov    %rax,%rdi
   14033:	e8 70 09 00 00       	call   149a8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
   14038:	90                   	nop
   14039:	c9                   	leave
   1403a:	c3                   	ret
   1403b:	90                   	nop

000000000001403c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
   1403c:	55                   	push   %rbp
   1403d:	48 89 e5             	mov    %rsp,%rbp
   14040:	48 83 ec 10          	sub    $0x10,%rsp
   14044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1404c:	48 89 c7             	mov    %rax,%rdi
   1404f:	e8 1c 09 00 00       	call   14970 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
   14054:	90                   	nop
   14055:	c9                   	leave
   14056:	c3                   	ret
   14057:	90                   	nop

0000000000014058 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
   14058:	55                   	push   %rbp
   14059:	48 89 e5             	mov    %rsp,%rbp
   1405c:	48 83 ec 10          	sub    $0x10,%rsp
   14060:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14068:	48 89 c7             	mov    %rax,%rdi
   1406b:	e8 cc ff ff ff       	call   1403c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>
   14070:	90                   	nop
   14071:	c9                   	leave
   14072:	c3                   	ret
   14073:	90                   	nop

0000000000014074 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
   14074:	55                   	push   %rbp
   14075:	48 89 e5             	mov    %rsp,%rbp
   14078:	48 83 ec 10          	sub    $0x10,%rsp
   1407c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14080:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14084:	48 89 c7             	mov    %rax,%rdi
   14087:	e8 38 09 00 00       	call   149c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>
   1408c:	90                   	nop
   1408d:	c9                   	leave
   1408e:	c3                   	ret
   1408f:	90                   	nop

0000000000014090 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EE4dataEv>:
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      [[__gnu__::__const__, __nodiscard__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
   14090:	55                   	push   %rbp
   14091:	48 89 e5             	mov    %rsp,%rbp
   14094:	48 83 ec 10          	sub    $0x10,%rsp
   14098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _AT_Type::_S_ptr(_M_elems); }
   1409c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140a0:	48 89 c7             	mov    %rax,%rdi
   140a3:	e8 02 00 00 00       	call   140aa <_ZNSt14__array_traitsI33VkVertexInputAttributeDescriptionLm2EE6_S_ptrERA2_KS0_>
   140a8:	c9                   	leave
   140a9:	c3                   	ret

00000000000140aa <_ZNSt14__array_traitsI33VkVertexInputAttributeDescriptionLm2EE6_S_ptrERA2_KS0_>:
      _S_ptr(const _Type& __t) noexcept
   140aa:	55                   	push   %rbp
   140ab:	48 89 e5             	mov    %rsp,%rbp
   140ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_cast<_Tp*>(__t); }
   140b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140b6:	5d                   	pop    %rbp
   140b7:	c3                   	ret

00000000000140b8 <_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE>:
      }

    /// The difference between two time points (as a duration)
    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
   140b8:	55                   	push   %rbp
   140b9:	48 89 e5             	mov    %rsp,%rbp
   140bc:	48 83 ec 20          	sub    $0x20,%rsp
   140c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   140c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }
   140c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   140cc:	48 89 c7             	mov    %rax,%rdi
   140cf:	e8 2a 00 00 00       	call   140fe <_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
   140d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   140d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140dc:	48 89 c7             	mov    %rax,%rdi
   140df:	e8 1a 00 00 00       	call   140fe <_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>
   140e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   140e8:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   140ec:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   140f0:	48 89 d6             	mov    %rdx,%rsi
   140f3:	48 89 c7             	mov    %rax,%rdi
   140f6:	e8 77 17 00 00       	call   15872 <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>
   140fb:	c9                   	leave
   140fc:	c3                   	ret
   140fd:	90                   	nop

00000000000140fe <_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv>:
	time_since_epoch() const
   140fe:	55                   	push   %rbp
   140ff:	48 89 e5             	mov    %rsp,%rbp
   14102:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __d; }
   14106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1410a:	48 8b 00             	mov    (%rax),%rax
   1410d:	5d                   	pop    %rbp
   1410e:	c3                   	ret
   1410f:	90                   	nop

0000000000014110 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   14110:	55                   	push   %rbp
   14111:	48 89 e5             	mov    %rsp,%rbp
   14114:	48 83 ec 10          	sub    $0x10,%rsp
   14118:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1411c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14120:	48 89 c7             	mov    %rax,%rdi
   14123:	e8 3e 12 00 00       	call   15366 <_ZNSaIP13VkImageView_TED1Ev>
   14128:	90                   	nop
   14129:	c9                   	leave
   1412a:	c3                   	ret
   1412b:	90                   	nop

000000000001412c <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   1412c:	55                   	push   %rbp
   1412d:	48 89 e5             	mov    %rsp,%rbp
   14130:	48 83 ec 10          	sub    $0x10,%rsp
   14134:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1413c:	48 89 c7             	mov    %rax,%rdi
   1413f:	e8 ec 28 00 00       	call   16a30 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1Ev>
   14144:	90                   	nop
   14145:	c9                   	leave
   14146:	c3                   	ret
   14147:	90                   	nop

0000000000014148 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1Ev>:
      vector() = default;
   14148:	55                   	push   %rbp
   14149:	48 89 e5             	mov    %rsp,%rbp
   1414c:	48 83 ec 10          	sub    $0x10,%rsp
   14150:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14158:	48 89 c7             	mov    %rax,%rdi
   1415b:	e8 cc ff ff ff       	call   1412c <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1Ev>
   14160:	90                   	nop
   14161:	c9                   	leave
   14162:	c3                   	ret
   14163:	90                   	nop

0000000000014164 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   14164:	55                   	push   %rbp
   14165:	48 89 e5             	mov    %rsp,%rbp
   14168:	48 83 ec 10          	sub    $0x10,%rsp
   1416c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14174:	48 89 c7             	mov    %rax,%rdi
   14177:	e8 2a 29 00 00       	call   16aa6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1Ev>
   1417c:	90                   	nop
   1417d:	c9                   	leave
   1417e:	c3                   	ret
   1417f:	90                   	nop

0000000000014180 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1Ev>:
      vector() = default;
   14180:	55                   	push   %rbp
   14181:	48 89 e5             	mov    %rsp,%rbp
   14184:	48 83 ec 10          	sub    $0x10,%rsp
   14188:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1418c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14190:	48 89 c7             	mov    %rax,%rdi
   14193:	e8 cc ff ff ff       	call   14164 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1Ev>
   14198:	90                   	nop
   14199:	c9                   	leave
   1419a:	c3                   	ret
   1419b:	90                   	nop

000000000001419c <_ZN3vkh23GraphicsPipelineWrapperC1Ev>:

  VkShaderModule vertex;
  VkShaderModule fragment;
};

struct GraphicsPipelineWrapper {
   1419c:	55                   	push   %rbp
   1419d:	48 89 e5             	mov    %rsp,%rbp
   141a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   141a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141a8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   141af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141b3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   141ba:	00 
   141bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141bf:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   141c6:	00 
   141c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141cb:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   141d2:	00 
   141d3:	90                   	nop
   141d4:	5d                   	pop    %rbp
   141d5:	c3                   	ret

00000000000141d6 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   141d6:	55                   	push   %rbp
   141d7:	48 89 e5             	mov    %rsp,%rbp
   141da:	48 83 ec 10          	sub    $0x10,%rsp
   141de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   141e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141e6:	48 89 c7             	mov    %rax,%rdi
   141e9:	e8 08 29 00 00       	call   16af6 <_ZNSaIP15VkFramebuffer_TED1Ev>
   141ee:	90                   	nop
   141ef:	c9                   	leave
   141f0:	c3                   	ret
   141f1:	90                   	nop

00000000000141f2 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   141f2:	55                   	push   %rbp
   141f3:	48 89 e5             	mov    %rsp,%rbp
   141f6:	48 83 ec 10          	sub    $0x10,%rsp
   141fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   141fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14202:	48 89 c7             	mov    %rax,%rdi
   14205:	e8 c4 28 00 00       	call   16ace <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE12_Vector_implC1Ev>
   1420a:	90                   	nop
   1420b:	c9                   	leave
   1420c:	c3                   	ret
   1420d:	90                   	nop

000000000001420e <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EEC1Ev>:
      vector() = default;
   1420e:	55                   	push   %rbp
   1420f:	48 89 e5             	mov    %rsp,%rbp
   14212:	48 83 ec 10          	sub    $0x10,%rsp
   14216:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1421a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1421e:	48 89 c7             	mov    %rax,%rdi
   14221:	e8 cc ff ff ff       	call   141f2 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EEC1Ev>
   14226:	90                   	nop
   14227:	c9                   	leave
   14228:	c3                   	ret
   14229:	90                   	nop

000000000001422a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   1422a:	55                   	push   %rbp
   1422b:	48 89 e5             	mov    %rsp,%rbp
   1422e:	48 83 ec 10          	sub    $0x10,%rsp
   14232:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14236:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1423a:	48 89 c7             	mov    %rax,%rdi
   1423d:	e8 62 29 00 00       	call   16ba4 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1Ev>
   14242:	90                   	nop
   14243:	c9                   	leave
   14244:	c3                   	ret
   14245:	90                   	nop

0000000000014246 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1Ev>:
      vector() = default;
   14246:	55                   	push   %rbp
   14247:	48 89 e5             	mov    %rsp,%rbp
   1424a:	48 83 ec 10          	sub    $0x10,%rsp
   1424e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14256:	48 89 c7             	mov    %rax,%rdi
   14259:	e8 cc ff ff ff       	call   1422a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1Ev>
   1425e:	90                   	nop
   1425f:	c9                   	leave
   14260:	c3                   	ret
   14261:	90                   	nop

0000000000014262 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   14262:	55                   	push   %rbp
   14263:	48 89 e5             	mov    %rsp,%rbp
   14266:	48 83 ec 10          	sub    $0x10,%rsp
   1426a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1426e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14272:	48 89 c7             	mov    %rax,%rdi
   14275:	e8 5e 25 00 00       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
   1427a:	90                   	nop
   1427b:	c9                   	leave
   1427c:	c3                   	ret
   1427d:	90                   	nop

000000000001427e <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   1427e:	55                   	push   %rbp
   1427f:	48 89 e5             	mov    %rsp,%rbp
   14282:	48 83 ec 10          	sub    $0x10,%rsp
   14286:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1428a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1428e:	48 89 c7             	mov    %rax,%rdi
   14291:	e8 36 29 00 00       	call   16bcc <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implC1Ev>
   14296:	90                   	nop
   14297:	c9                   	leave
   14298:	c3                   	ret
   14299:	90                   	nop

000000000001429a <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1Ev>:
      vector() = default;
   1429a:	55                   	push   %rbp
   1429b:	48 89 e5             	mov    %rsp,%rbp
   1429e:	48 83 ec 10          	sub    $0x10,%rsp
   142a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   142a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142aa:	48 89 c7             	mov    %rax,%rdi
   142ad:	e8 cc ff ff ff       	call   1427e <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EEC1Ev>
   142b2:	90                   	nop
   142b3:	c9                   	leave
   142b4:	c3                   	ret
   142b5:	90                   	nop

00000000000142b6 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   142b6:	55                   	push   %rbp
   142b7:	48 89 e5             	mov    %rsp,%rbp
   142ba:	48 83 ec 10          	sub    $0x10,%rsp
   142be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   142c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142c6:	48 89 c7             	mov    %rax,%rdi
   142c9:	e8 9c 29 00 00       	call   16c6a <_ZNSaIP9VkFence_TED1Ev>
   142ce:	90                   	nop
   142cf:	c9                   	leave
   142d0:	c3                   	ret
   142d1:	90                   	nop

00000000000142d2 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   142d2:	55                   	push   %rbp
   142d3:	48 89 e5             	mov    %rsp,%rbp
   142d6:	48 83 ec 10          	sub    $0x10,%rsp
   142da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   142de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142e2:	48 89 c7             	mov    %rax,%rdi
   142e5:	e8 58 29 00 00       	call   16c42 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE12_Vector_implC1Ev>
   142ea:	90                   	nop
   142eb:	c9                   	leave
   142ec:	c3                   	ret
   142ed:	90                   	nop

00000000000142ee <_ZNSt6vectorIP9VkFence_TSaIS1_EEC1Ev>:
      vector() = default;
   142ee:	55                   	push   %rbp
   142ef:	48 89 e5             	mov    %rsp,%rbp
   142f2:	48 83 ec 10          	sub    $0x10,%rsp
   142f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   142fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142fe:	48 89 c7             	mov    %rax,%rdi
   14301:	e8 cc ff ff ff       	call   142d2 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EEC1Ev>
   14306:	90                   	nop
   14307:	c9                   	leave
   14308:	c3                   	ret
   14309:	90                   	nop

000000000001430a <_ZN9VulkanApp11SyncWrapperC1Ev>:
  void createCommandBuffers();

  void recordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex);

  /* Step 11: Synchronization and cache control */
  struct SyncWrapper {
   1430a:	55                   	push   %rbp
   1430b:	48 89 e5             	mov    %rsp,%rbp
   1430e:	48 83 ec 10          	sub    $0x10,%rsp
   14312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1431a:	48 89 c7             	mov    %rax,%rdi
   1431d:	e8 78 ff ff ff       	call   1429a <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1Ev>
   14322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14326:	48 83 c0 18          	add    $0x18,%rax
   1432a:	48 89 c7             	mov    %rax,%rdi
   1432d:	e8 68 ff ff ff       	call   1429a <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1Ev>
   14332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14336:	48 83 c0 30          	add    $0x30,%rax
   1433a:	48 89 c7             	mov    %rax,%rdi
   1433d:	e8 ac ff ff ff       	call   142ee <_ZNSt6vectorIP9VkFence_TSaIS1_EEC1Ev>
   14342:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14346:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
   1434d:	00 
   1434e:	90                   	nop
   1434f:	c9                   	leave
   14350:	c3                   	ret
   14351:	90                   	nop

0000000000014352 <_ZN9VulkanApp11SyncWrapperD1Ev>:
   14352:	55                   	push   %rbp
   14353:	48 89 e5             	mov    %rsp,%rbp
   14356:	48 83 ec 10          	sub    $0x10,%rsp
   1435a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1435e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14362:	48 83 c0 30          	add    $0x30,%rax
   14366:	48 89 c7             	mov    %rax,%rdi
   14369:	e8 66 29 00 00       	call   16cd4 <_ZNSt6vectorIP9VkFence_TSaIS1_EED1Ev>
   1436e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14372:	48 83 c0 18          	add    $0x18,%rax
   14376:	48 89 c7             	mov    %rax,%rdi
   14379:	e8 fe 24 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   1437e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14382:	48 89 c7             	mov    %rax,%rdi
   14385:	e8 f2 24 00 00       	call   1687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>
   1438a:	90                   	nop
   1438b:	c9                   	leave
   1438c:	c3                   	ret
   1438d:	90                   	nop

000000000001438e <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   1438e:	55                   	push   %rbp
   1438f:	48 89 e5             	mov    %rsp,%rbp
   14392:	48 83 ec 10          	sub    $0x10,%rsp
   14396:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1439a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1439e:	48 89 c7             	mov    %rax,%rdi
   143a1:	e8 9a 29 00 00       	call   16d40 <_ZNSaIP10VkBuffer_TED1Ev>
   143a6:	90                   	nop
   143a7:	c9                   	leave
   143a8:	c3                   	ret
   143a9:	90                   	nop

00000000000143aa <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   143aa:	55                   	push   %rbp
   143ab:	48 89 e5             	mov    %rsp,%rbp
   143ae:	48 83 ec 10          	sub    $0x10,%rsp
   143b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   143b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143ba:	48 89 c7             	mov    %rax,%rdi
   143bd:	e8 56 29 00 00       	call   16d18 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE12_Vector_implC1Ev>
   143c2:	90                   	nop
   143c3:	c9                   	leave
   143c4:	c3                   	ret
   143c5:	90                   	nop

00000000000143c6 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EEC1Ev>:
      vector() = default;
   143c6:	55                   	push   %rbp
   143c7:	48 89 e5             	mov    %rsp,%rbp
   143ca:	48 83 ec 10          	sub    $0x10,%rsp
   143ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   143d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143d6:	48 89 c7             	mov    %rax,%rdi
   143d9:	e8 cc ff ff ff       	call   143aa <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EEC1Ev>
   143de:	90                   	nop
   143df:	c9                   	leave
   143e0:	c3                   	ret
   143e1:	90                   	nop

00000000000143e2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   143e2:	55                   	push   %rbp
   143e3:	48 89 e5             	mov    %rsp,%rbp
   143e6:	48 83 ec 10          	sub    $0x10,%rsp
   143ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   143ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143f2:	48 89 c7             	mov    %rax,%rdi
   143f5:	e8 1c 2a 00 00       	call   16e16 <_ZNSaIP16VkDeviceMemory_TED1Ev>
   143fa:	90                   	nop
   143fb:	c9                   	leave
   143fc:	c3                   	ret
   143fd:	90                   	nop

00000000000143fe <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EEC1Ev>:
      _Vector_base() = default;
   143fe:	55                   	push   %rbp
   143ff:	48 89 e5             	mov    %rsp,%rbp
   14402:	48 83 ec 10          	sub    $0x10,%rsp
   14406:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1440a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1440e:	48 89 c7             	mov    %rax,%rdi
   14411:	e8 d8 29 00 00       	call   16dee <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE12_Vector_implC1Ev>
   14416:	90                   	nop
   14417:	c9                   	leave
   14418:	c3                   	ret
   14419:	90                   	nop

000000000001441a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEC1Ev>:
      vector() = default;
   1441a:	55                   	push   %rbp
   1441b:	48 89 e5             	mov    %rsp,%rbp
   1441e:	48 83 ec 10          	sub    $0x10,%rsp
   14422:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1442a:	48 89 c7             	mov    %rax,%rdi
   1442d:	e8 cc ff ff ff       	call   143fe <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EEC1Ev>
   14432:	90                   	nop
   14433:	c9                   	leave
   14434:	c3                   	ret

0000000000014435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>:
	{
		return vec<4, T, Q>(v1) -= v2;
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar)
   14435:	55                   	push   %rbp
   14436:	48 89 e5             	mov    %rsp,%rbp
   14439:	53                   	push   %rbx
   1443a:	48 83 ec 28          	sub    $0x28,%rsp
   1443e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   14442:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	{
		return vec<4, T, Q>(v) *= scalar;
   14446:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1444a:	8b 08                	mov    (%rax),%ecx
   1444c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   14450:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14454:	48 8b 00             	mov    (%rax),%rax
   14457:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1445b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1445f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   14463:	66 0f 6e c1          	movd   %ecx,%xmm0
   14467:	48 89 c7             	mov    %rax,%rdi
   1446a:	e8 b1 2b 00 00       	call   17020 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_>
   1446f:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14473:	48 8b 00             	mov    (%rax),%rax
   14476:	48 89 c1             	mov    %rax,%rcx
   14479:	48 89 d3             	mov    %rdx,%rbx
   1447c:	48 89 d0             	mov    %rdx,%rax
	}
   1447f:	66 48 0f 6e c1       	movq   %rcx,%xmm0
   14484:	66 48 0f 6e c8       	movq   %rax,%xmm1
   14489:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1448d:	c9                   	leave
   1448e:	c3                   	ret
   1448f:	90                   	nop

0000000000014490 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
   14490:	55                   	push   %rbp
   14491:	48 89 e5             	mov    %rsp,%rbp
   14494:	53                   	push   %rbx
   14495:	48 83 ec 38          	sub    $0x38,%rsp
   14499:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1449d:	48 89 f0             	mov    %rsi,%rax
   144a0:	48 89 d6             	mov    %rdx,%rsi
   144a3:	48 89 f2             	mov    %rsi,%rdx
   144a6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   144aa:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   144ae:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   144b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   144b6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   144ba:	48 89 d6             	mov    %rdx,%rsi
   144bd:	48 89 c7             	mov    %rax,%rdi
   144c0:	e8 ad 2b 00 00       	call   17072 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
   144c5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   144c9:	48 89 c7             	mov    %rax,%rdi
   144cc:	e8 d9 2b 00 00       	call   170aa <_ZNKSt16initializer_listIPKcE3endEv>
   144d1:	48 89 c3             	mov    %rax,%rbx
   144d4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   144d8:	48 89 c7             	mov    %rax,%rdi
   144db:	e8 b8 2b 00 00       	call   17098 <_ZNKSt16initializer_listIPKcE5beginEv>
   144e0:	48 89 c1             	mov    %rax,%rcx
   144e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   144e7:	48 89 da             	mov    %rbx,%rdx
   144ea:	48 89 ce             	mov    %rcx,%rsi
   144ed:	48 89 c7             	mov    %rax,%rdi
   144f0:	e8 1b 2c 00 00       	call   17110 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
   144f5:	eb 1a                	jmp    14511 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   144f7:	48 89 c3             	mov    %rax,%rbx
   144fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   144fe:	48 89 c7             	mov    %rax,%rdi
   14501:	e8 3a 56 ff ff       	call   9b40 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   14506:	48 89 d8             	mov    %rbx,%rax
   14509:	48 89 c7             	mov    %rax,%rdi
   1450c:	e8 5f 04 ff ff       	call   4970 <_Unwind_Resume@plt>
   14511:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14515:	c9                   	leave
   14516:	c3                   	ret
   14517:	90                   	nop

0000000000014518 <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   14518:	55                   	push   %rbp
   14519:	48 89 e5             	mov    %rsp,%rbp
   1451c:	48 83 ec 10          	sub    $0x10,%rsp
   14520:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   14524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14528:	48 89 c7             	mov    %rax,%rdi
   1452b:	e8 c8 64 ff ff       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   14530:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   14533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14537:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1453b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1453f:	48 8b 00             	mov    (%rax),%rax
   14542:	48 89 ce             	mov    %rcx,%rsi
   14545:	48 89 c7             	mov    %rax,%rdi
   14548:	e8 72 2c 00 00       	call   171bf <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>
      }
   1454d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14551:	48 89 c7             	mov    %rax,%rdi
   14554:	e8 e7 55 ff ff       	call   9b40 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   14559:	90                   	nop
   1455a:	c9                   	leave
   1455b:	c3                   	ret

000000000001455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1455c:	55                   	push   %rbp
   1455d:	48 89 e5             	mov    %rsp,%rbp
   14560:	48 83 ec 20          	sub    $0x20,%rsp
   14564:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   14568:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1456c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14570:	48 89 d6             	mov    %rdx,%rsi
   14573:	48 89 c7             	mov    %rax,%rdi
   14576:	e8 6f 2c 00 00       	call   171ea <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1457b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1457f:	c9                   	leave
   14580:	c3                   	ret
   14581:	90                   	nop

0000000000014582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   14582:	55                   	push   %rbp
   14583:	48 89 e5             	mov    %rsp,%rbp
   14586:	48 83 ec 20          	sub    $0x20,%rsp
   1458a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   1458e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14592:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14596:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1459a:	48 89 d6             	mov    %rdx,%rsi
   1459d:	48 89 c7             	mov    %rax,%rdi
   145a0:	e8 45 2c 00 00       	call   171ea <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   145a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145a9:	c9                   	leave
   145aa:	c3                   	ret

00000000000145ab <_ZN9__gnu_cxxneIPPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   145ab:	55                   	push   %rbp
   145ac:	48 89 e5             	mov    %rsp,%rbp
   145af:	53                   	push   %rbx
   145b0:	48 83 ec 18          	sub    $0x18,%rsp
   145b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   145b8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   145bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145c0:	48 89 c7             	mov    %rax,%rdi
   145c3:	e8 40 2c 00 00       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   145c8:	48 8b 18             	mov    (%rax),%rbx
   145cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   145cf:	48 89 c7             	mov    %rax,%rdi
   145d2:	e8 31 2c 00 00       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   145d7:	48 8b 00             	mov    (%rax),%rax
   145da:	48 39 c3             	cmp    %rax,%rbx
   145dd:	0f 95 c0             	setne  %al
   145e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   145e4:	c9                   	leave
   145e5:	c3                   	ret

00000000000145e6 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   145e6:	55                   	push   %rbp
   145e7:	48 89 e5             	mov    %rsp,%rbp
   145ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   145ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145f2:	48 8b 00             	mov    (%rax),%rax
   145f5:	48 8d 50 08          	lea    0x8(%rax),%rdx
   145f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145fd:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   14600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   14604:	5d                   	pop    %rbp
   14605:	c3                   	ret

0000000000014606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   14606:	55                   	push   %rbp
   14607:	48 89 e5             	mov    %rsp,%rbp
   1460a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1460e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14612:	48 8b 00             	mov    (%rax),%rax
   14615:	5d                   	pop    %rbp
   14616:	c3                   	ret
   14617:	90                   	nop

0000000000014618 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
   14618:	55                   	push   %rbp
   14619:	48 89 e5             	mov    %rsp,%rbp
   1461c:	53                   	push   %rbx
   1461d:	48 83 ec 18          	sub    $0x18,%rsp
   14621:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14625:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   14629:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1462d:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14631:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14635:	48 8b 40 10          	mov    0x10(%rax),%rax
   14639:	48 39 c2             	cmp    %rax,%rdx
   1463c:	74 3c                	je     1467a <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_+0x62>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   1463e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14642:	48 89 c7             	mov    %rax,%rdi
   14645:	e8 cc 2b 00 00       	call   17216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   1464a:	48 89 c2             	mov    %rax,%rdx
   1464d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14651:	48 8b 48 08          	mov    0x8(%rax),%rcx
   14655:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14659:	48 89 ce             	mov    %rcx,%rsi
   1465c:	48 89 c7             	mov    %rax,%rdi
   1465f:	e8 c0 2b 00 00       	call   17224 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   14664:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14668:	48 8b 40 08          	mov    0x8(%rax),%rax
   1466c:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14670:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14674:	48 89 50 08          	mov    %rdx,0x8(%rax)
   14678:	eb 30                	jmp    146aa <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJRS1_EEES5_DpOT_+0x92>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1467a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1467e:	48 89 c7             	mov    %rax,%rdi
   14681:	e8 90 2b 00 00       	call   17216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   14686:	48 89 c3             	mov    %rax,%rbx
   14689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1468d:	48 89 c7             	mov    %rax,%rdi
   14690:	e8 ed fe ff ff       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   14695:	48 89 c1             	mov    %rax,%rcx
   14698:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1469c:	48 89 da             	mov    %rbx,%rdx
   1469f:	48 89 ce             	mov    %rcx,%rsi
   146a2:	48 89 c7             	mov    %rax,%rdi
   146a5:	e8 b4 2b 00 00       	call   1725e <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJRS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
   146aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146ae:	48 89 c7             	mov    %rax,%rdi
   146b1:	e8 3a 2d 00 00       	call   173f0 <_ZNSt6vectorIPKcSaIS1_EE4backEv>
#endif
      }
   146b6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   146ba:	c9                   	leave
   146bb:	c3                   	ret

00000000000146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   146bc:	55                   	push   %rbp
   146bd:	48 89 e5             	mov    %rsp,%rbp
   146c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   146c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146c8:	48 8b 50 08          	mov    0x8(%rax),%rdx
   146cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146d0:	48 8b 00             	mov    (%rax),%rax
   146d3:	48 29 c2             	sub    %rax,%rdx
   146d6:	48 89 d0             	mov    %rdx,%rax
   146d9:	48 c1 f8 03          	sar    $0x3,%rax
   146dd:	5d                   	pop    %rbp
   146de:	c3                   	ret
   146df:	90                   	nop

00000000000146e0 <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   146e0:	55                   	push   %rbp
   146e1:	48 89 e5             	mov    %rsp,%rbp
   146e4:	48 83 ec 10          	sub    $0x10,%rsp
   146e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   146ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146f0:	48 8b 10             	mov    (%rax),%rdx
   146f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146f7:	48 89 d6             	mov    %rdx,%rsi
   146fa:	48 89 c7             	mov    %rax,%rdi
   146fd:	e8 2e 2d 00 00       	call   17430 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   14702:	c9                   	leave
   14703:	c3                   	ret

0000000000014704 <_ZNSt6vectorIPKcSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   14704:	55                   	push   %rbp
   14705:	48 89 e5             	mov    %rsp,%rbp
   14708:	48 83 ec 10          	sub    $0x10,%rsp
   1470c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   14710:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14714:	48 8b 10             	mov    (%rax),%rdx
   14717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1471b:	48 89 d6             	mov    %rdx,%rsi
   1471e:	48 89 c7             	mov    %rax,%rdi
   14721:	e8 0a 2d 00 00       	call   17430 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   14726:	c9                   	leave
   14727:	c3                   	ret

0000000000014728 <_ZNKSt6vectorISt8optionalI23VkQueueFamilyPropertiesESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   14728:	55                   	push   %rbp
   14729:	48 89 e5             	mov    %rsp,%rbp
   1472c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   14730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14734:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1473c:	48 8b 00             	mov    (%rax),%rax
   1473f:	48 29 c2             	sub    %rax,%rdx
   14742:	48 c1 fa 02          	sar    $0x2,%rdx
   14746:	48 b8 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rax
   1474d:	db b6 6d 
   14750:	48 0f af c2          	imul   %rdx,%rax
   14754:	5d                   	pop    %rbp
   14755:	c3                   	ret

0000000000014756 <_ZNKSt8optionalI23VkQueueFamilyPropertiesE9has_valueEv>:
      constexpr bool has_value() const noexcept
   14756:	55                   	push   %rbp
   14757:	48 89 e5             	mov    %rsp,%rbp
   1475a:	48 83 ec 10          	sub    $0x10,%rsp
   1475e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
   14762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14766:	48 89 c7             	mov    %rax,%rdi
   14769:	e8 e6 67 ff ff       	call   af54 <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
   1476e:	c9                   	leave
   1476f:	c3                   	ret

0000000000014770 <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv>:
      value()&
   14770:	55                   	push   %rbp
   14771:	48 89 e5             	mov    %rsp,%rbp
   14774:	48 83 ec 10          	sub    $0x10,%rsp
   14778:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_is_engaged())
   1477c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14780:	48 89 c7             	mov    %rax,%rdi
   14783:	e8 cc 67 ff ff       	call   af54 <_ZNKSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
   14788:	84 c0                	test   %al,%al
   1478a:	74 0e                	je     1479a <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv+0x2a>
	  return this->_M_get();
   1478c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14790:	48 89 c7             	mov    %rax,%rdi
   14793:	e8 ce 67 ff ff       	call   af66 <_ZNSt19_Optional_base_implI23VkQueueFamilyPropertiesSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
   14798:	eb 05                	jmp    1479f <_ZNRSt8optionalI23VkQueueFamilyPropertiesE5valueEv+0x2f>
	__throw_bad_optional_access();
   1479a:	e8 d4 f5 ff ff       	call   13d73 <_ZSt27__throw_bad_optional_accessv>
      }
   1479f:	c9                   	leave
   147a0:	c3                   	ret
   147a1:	90                   	nop

00000000000147a2 <_ZNSt4pairIj23VkQueueFamilyPropertiesEC1IjRS0_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
   147a2:	55                   	push   %rbp
   147a3:	48 89 e5             	mov    %rsp,%rbp
   147a6:	48 83 ec 20          	sub    $0x20,%rsp
   147aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   147ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   147b2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   147b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   147ba:	48 89 c7             	mov    %rax,%rdi
   147bd:	e8 80 2c 00 00       	call   17442 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   147c2:	8b 10                	mov    (%rax),%edx
   147c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147c8:	89 10                	mov    %edx,(%rax)
   147ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147ce:	48 89 c7             	mov    %rax,%rdi
   147d1:	e8 7a 2c 00 00       	call   17450 <_ZSt7forwardIR23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS2_E4typeE>
   147d6:	48 89 c1             	mov    %rax,%rcx
   147d9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   147dd:	48 8b 01             	mov    (%rcx),%rax
   147e0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   147e4:	48 89 46 04          	mov    %rax,0x4(%rsi)
   147e8:	48 89 56 0c          	mov    %rdx,0xc(%rsi)
   147ec:	48 8b 41 10          	mov    0x10(%rcx),%rax
   147f0:	48 89 46 14          	mov    %rax,0x14(%rsi)
   147f4:	90                   	nop
   147f5:	c9                   	leave
   147f6:	c3                   	ret
   147f7:	90                   	nop

00000000000147f8 <_ZNSt8optionalISt4pairIj23VkQueueFamilyPropertiesEEC1IS2_Lb1EEEOT_>:
	optional(_Up&& __t)
   147f8:	55                   	push   %rbp
   147f9:	48 89 e5             	mov    %rsp,%rbp
   147fc:	53                   	push   %rbx
   147fd:	48 83 ec 18          	sub    $0x18,%rsp
   14801:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14805:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
   14809:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1480d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14811:	48 89 c7             	mov    %rax,%rdi
   14814:	e8 45 2c 00 00       	call   1745e <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   14819:	48 89 c6             	mov    %rax,%rsi
   1481c:	48 89 df             	mov    %rbx,%rdi
   1481f:	e8 6e 2c 00 00       	call   17492 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1IJS2_ELb0EEESt10in_place_tDpOT_>
   14824:	90                   	nop
   14825:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14829:	c9                   	leave
   1482a:	c3                   	ret
   1482b:	90                   	nop

000000000001482c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1482c:	55                   	push   %rbp
   1482d:	48 89 e5             	mov    %rsp,%rbp
   14830:	48 83 ec 20          	sub    $0x20,%rsp
   14834:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   14838:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1483c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14840:	48 89 d6             	mov    %rdx,%rsi
   14843:	48 89 c7             	mov    %rax,%rdi
   14846:	e8 7b 2c 00 00       	call   174c6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1484b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1484f:	c9                   	leave
   14850:	c3                   	ret
   14851:	90                   	nop

0000000000014852 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   14852:	55                   	push   %rbp
   14853:	48 89 e5             	mov    %rsp,%rbp
   14856:	48 83 ec 20          	sub    $0x20,%rsp
   1485a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   1485e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14862:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14866:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1486a:	48 89 d6             	mov    %rdx,%rsi
   1486d:	48 89 c7             	mov    %rax,%rdi
   14870:	e8 51 2c 00 00       	call   174c6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   14875:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14879:	c9                   	leave
   1487a:	c3                   	ret

000000000001487b <_ZN9__gnu_cxxneIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   1487b:	55                   	push   %rbp
   1487c:	48 89 e5             	mov    %rsp,%rbp
   1487f:	53                   	push   %rbx
   14880:	48 83 ec 18          	sub    $0x18,%rsp
   14884:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14888:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   1488c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14890:	48 89 c7             	mov    %rax,%rdi
   14893:	e8 4c 2c 00 00       	call   174e4 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   14898:	48 8b 18             	mov    (%rax),%rbx
   1489b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1489f:	48 89 c7             	mov    %rax,%rdi
   148a2:	e8 3d 2c 00 00       	call   174e4 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   148a7:	48 8b 00             	mov    (%rax),%rax
   148aa:	48 39 c3             	cmp    %rax,%rbx
   148ad:	0f 95 c0             	setne  %al
   148b0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   148b4:	c9                   	leave
   148b5:	c3                   	ret

00000000000148b6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   148b6:	55                   	push   %rbp
   148b7:	48 89 e5             	mov    %rsp,%rbp
   148ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   148be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148c2:	48 8b 00             	mov    (%rax),%rax
   148c5:	48 8d 50 08          	lea    0x8(%rax),%rdx
   148c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148cd:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   148d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   148d4:	5d                   	pop    %rbp
   148d5:	c3                   	ret

00000000000148d6 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   148d6:	55                   	push   %rbp
   148d7:	48 89 e5             	mov    %rsp,%rbp
   148da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   148de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148e2:	48 8b 00             	mov    (%rax),%rax
   148e5:	5d                   	pop    %rbp
   148e6:	c3                   	ret
   148e7:	90                   	nop

00000000000148e8 <_ZNKSt8optionalISt4pairIj23VkQueueFamilyPropertiesEE9has_valueEv>:
      constexpr bool has_value() const noexcept
   148e8:	55                   	push   %rbp
   148e9:	48 89 e5             	mov    %rsp,%rbp
   148ec:	48 83 ec 10          	sub    $0x10,%rsp
   148f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
   148f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148f8:	48 89 c7             	mov    %rax,%rdi
   148fb:	e8 0e f7 ff ff       	call   1400e <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
   14900:	c9                   	leave
   14901:	c3                   	ret

0000000000014902 <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EEaSERKS3_>:
      operator=(const _Optional_payload& __other)
   14902:	55                   	push   %rbp
   14903:	48 89 e5             	mov    %rsp,%rbp
   14906:	48 83 ec 10          	sub    $0x10,%rsp
   1490a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1490e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_copy_assign(__other);
   14912:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14916:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1491a:	48 89 d6             	mov    %rdx,%rsi
   1491d:	48 89 c7             	mov    %rax,%rdi
   14920:	e8 cd 2b 00 00       	call   174f2 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_>
	return *this;
   14925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   14929:	c9                   	leave
   1492a:	c3                   	ret
   1492b:	90                   	nop

000000000001492c <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
   1492c:	55                   	push   %rbp
   1492d:	48 89 e5             	mov    %rsp,%rbp
   14930:	48 83 ec 10          	sub    $0x10,%rsp
   14934:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
   14938:	e8 a9 06 ff ff       	call   4fe6 <_ZSt23__is_constant_evaluatedv>
   1493d:	84 c0                	test   %al,%al
   1493f:	74 1a                	je     1495b <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x2f>
   14941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14945:	48 89 c7             	mov    %rax,%rdi
   14948:	e8 c1 f6 ff ff       	call   1400e <_ZNKSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE13_M_is_engagedEv>
   1494d:	83 f0 01             	xor    $0x1,%eax
   14950:	84 c0                	test   %al,%al
   14952:	74 07                	je     1495b <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x2f>
   14954:	b8 01 00 00 00       	mov    $0x1,%eax
   14959:	eb 05                	jmp    14960 <_ZNSt19_Optional_base_implISt4pairIj23VkQueueFamilyPropertiesESt14_Optional_baseIS2_Lb1ELb1EEE6_M_getEv+0x34>
   1495b:	b8 00 00 00 00       	mov    $0x0,%eax
   14960:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
   14962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14966:	48 89 c7             	mov    %rax,%rdi
   14969:	e8 16 2c 00 00       	call   17584 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
      }
   1496e:	c9                   	leave
   1496f:	c3                   	ret

0000000000014970 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
   14970:	55                   	push   %rbp
   14971:	48 89 e5             	mov    %rsp,%rbp
   14974:	48 83 ec 10          	sub    $0x10,%rsp
   14978:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator()
   1497c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14980:	48 89 c7             	mov    %rax,%rdi
   14983:	e8 0a 2c 00 00       	call   17592 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   14988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1498c:	48 89 c7             	mov    %rax,%rdi
   1498f:	e8 1a 2c 00 00       	call   175ae <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
   14994:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14998:	48 83 c0 08          	add    $0x8,%rax
   1499c:	48 89 c7             	mov    %rax,%rdi
   1499f:	e8 fe f4 ff ff       	call   13ea2 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
   149a4:	90                   	nop
   149a5:	c9                   	leave
   149a6:	c3                   	ret
   149a7:	90                   	nop

00000000000149a8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   149a8:	55                   	push   %rbp
   149a9:	48 89 e5             	mov    %rsp,%rbp
   149ac:	48 83 ec 10          	sub    $0x10,%rsp
   149b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   149b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149b8:	48 89 c7             	mov    %rax,%rdi
   149bb:	e8 fa 2b 00 00       	call   175ba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
   149c0:	90                   	nop
   149c1:	c9                   	leave
   149c2:	c3                   	ret
   149c3:	90                   	nop

00000000000149c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
   149c4:	55                   	push   %rbp
   149c5:	48 89 e5             	mov    %rsp,%rbp
   149c8:	48 83 ec 10          	sub    $0x10,%rsp
   149cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
   149d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149d4:	48 89 c7             	mov    %rax,%rdi
   149d7:	e8 50 2c 00 00       	call   1762c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   149dc:	48 89 c2             	mov    %rax,%rdx
   149df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149e3:	48 89 d6             	mov    %rdx,%rsi
   149e6:	48 89 c7             	mov    %rax,%rdi
   149e9:	e8 d8 2b 00 00       	call   175c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
   149ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149f2:	48 89 c7             	mov    %rax,%rdi
   149f5:	e8 26 f6 ff ff       	call   14020 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
   149fa:	90                   	nop
   149fb:	c9                   	leave
   149fc:	c3                   	ret
   149fd:	90                   	nop

00000000000149fe <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   149fe:	55                   	push   %rbp
   149ff:	48 89 e5             	mov    %rsp,%rbp
   14a02:	48 83 ec 20          	sub    $0x20,%rsp
   14a06:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   14a0a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   14a0e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14a12:	48 89 d6             	mov    %rdx,%rsi
   14a15:	48 89 c7             	mov    %rax,%rdi
   14a18:	e8 29 2c 00 00       	call   17646 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14a1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a21:	c9                   	leave
   14a22:	c3                   	ret
   14a23:	90                   	nop

0000000000014a24 <_ZNSt6vectorI21VkExtensionPropertiesSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   14a24:	55                   	push   %rbp
   14a25:	48 89 e5             	mov    %rsp,%rbp
   14a28:	48 83 ec 20          	sub    $0x20,%rsp
   14a2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   14a30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a34:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14a38:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14a3c:	48 89 d6             	mov    %rdx,%rsi
   14a3f:	48 89 c7             	mov    %rax,%rdi
   14a42:	e8 ff 2b 00 00       	call   17646 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14a47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a4b:	c9                   	leave
   14a4c:	c3                   	ret

0000000000014a4d <_ZN9__gnu_cxxneIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   14a4d:	55                   	push   %rbp
   14a4e:	48 89 e5             	mov    %rsp,%rbp
   14a51:	53                   	push   %rbx
   14a52:	48 83 ec 18          	sub    $0x18,%rsp
   14a56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14a5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   14a5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a62:	48 89 c7             	mov    %rax,%rdi
   14a65:	e8 fa 2b 00 00       	call   17664 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
   14a6a:	48 8b 18             	mov    (%rax),%rbx
   14a6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14a71:	48 89 c7             	mov    %rax,%rdi
   14a74:	e8 eb 2b 00 00       	call   17664 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>
   14a79:	48 8b 00             	mov    (%rax),%rax
   14a7c:	48 39 c3             	cmp    %rax,%rbx
   14a7f:	0f 95 c0             	setne  %al
   14a82:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14a86:	c9                   	leave
   14a87:	c3                   	ret

0000000000014a88 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   14a88:	55                   	push   %rbp
   14a89:	48 89 e5             	mov    %rsp,%rbp
   14a8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   14a90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a94:	48 8b 00             	mov    (%rax),%rax
   14a97:	48 8d 90 04 01 00 00 	lea    0x104(%rax),%rdx
   14a9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14aa2:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   14aa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   14aa9:	5d                   	pop    %rbp
   14aaa:	c3                   	ret
   14aab:	90                   	nop

0000000000014aac <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   14aac:	55                   	push   %rbp
   14aad:	48 89 e5             	mov    %rsp,%rbp
   14ab0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   14ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ab8:	48 8b 00             	mov    (%rax),%rax
   14abb:	5d                   	pop    %rbp
   14abc:	c3                   	ret
   14abd:	90                   	nop

0000000000014abe <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   14abe:	55                   	push   %rbp
   14abf:	48 89 e5             	mov    %rsp,%rbp
   14ac2:	53                   	push   %rbx
   14ac3:	48 83 ec 48          	sub    $0x48,%rsp
   14ac7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   14acb:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
   14acf:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   14ad3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14ad7:	48 89 d6             	mov    %rdx,%rsi
   14ada:	48 89 c7             	mov    %rax,%rdi
   14add:	e8 90 2b 00 00       	call   17672 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>
   14ae2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   14ae6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14aea:	48 89 c7             	mov    %rax,%rdi
   14aed:	e8 a6 2b 00 00       	call   17698 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>
   14af2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14af6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   14afa:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   14afe:	48 89 d6             	mov    %rdx,%rsi
   14b01:	48 89 c7             	mov    %rax,%rdi
   14b04:	e8 a9 2b 00 00       	call   176b2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   14b09:	84 c0                	test   %al,%al
   14b0b:	75 32                	jne    14b3f <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x81>
   14b0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14b11:	48 89 c7             	mov    %rax,%rdi
   14b14:	e8 bb 2b 00 00       	call   176d4 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>
   14b19:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   14b1d:	48 89 c7             	mov    %rax,%rdi
   14b20:	e8 cb 2b 00 00       	call   176f0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   14b25:	48 89 c2             	mov    %rax,%rdx
   14b28:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   14b2c:	48 8d 45 de          	lea    -0x22(%rbp),%rax
   14b30:	48 89 ce             	mov    %rcx,%rsi
   14b33:	48 89 c7             	mov    %rax,%rdi
   14b36:	e8 d3 2b 00 00       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   14b3b:	84 c0                	test   %al,%al
   14b3d:	74 07                	je     14b46 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x88>
   14b3f:	b8 01 00 00 00       	mov    $0x1,%eax
   14b44:	eb 05                	jmp    14b4b <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x8d>
   14b46:	b8 00 00 00 00       	mov    $0x0,%eax
   14b4b:	84 c0                	test   %al,%al
   14b4d:	74 5d                	je     14bac <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0xee>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   14b4f:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
					std::forward_as_tuple(std::move(__k)),
   14b53:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   14b57:	48 89 c7             	mov    %rax,%rdi
   14b5a:	e8 6a 24 00 00       	call   16fc9 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
   14b5f:	48 89 c2             	mov    %rax,%rdx
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   14b62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   14b66:	48 89 d6             	mov    %rdx,%rsi
   14b69:	48 89 c7             	mov    %rax,%rdi
   14b6c:	e8 c6 2b 00 00       	call   17737 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
   14b71:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
   14b75:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   14b79:	48 89 d6             	mov    %rdx,%rsi
   14b7c:	48 89 c7             	mov    %rax,%rdi
   14b7f:	e8 e8 2b 00 00       	call   1776c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>
   14b84:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
   14b88:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   14b8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b90:	49 89 c8             	mov    %rcx,%r8
   14b93:	48 89 d1             	mov    %rdx,%rcx
   14b96:	48 8d 15 04 df 00 00 	lea    0xdf04(%rip),%rdx        # 22aa1 <_ZSt19piecewise_construct>
   14b9d:	48 89 c6             	mov    %rax,%rsi
   14ba0:	48 89 df             	mov    %rbx,%rdi
   14ba3:	e8 e2 2b 00 00       	call   1778a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   14ba8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					std::tuple<>());
	return (*__i).second;
   14bac:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   14bb0:	48 89 c7             	mov    %rax,%rdi
   14bb3:	e8 38 2b 00 00       	call   176f0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   14bb8:	48 83 c0 20          	add    $0x20,%rax
      }
   14bbc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14bc0:	c9                   	leave
   14bc1:	c3                   	ret

0000000000014bc2 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
   14bc2:	55                   	push   %rbp
   14bc3:	48 89 e5             	mov    %rsp,%rbp
   14bc6:	48 83 ec 20          	sub    $0x20,%rsp
   14bca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return begin() == end(); }
   14bce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14bd2:	48 89 c7             	mov    %rax,%rdi
   14bd5:	e8 d2 2c 00 00       	call   178ac <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>
   14bda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14bde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14be2:	48 89 c7             	mov    %rax,%rdi
   14be5:	e8 9c 2c 00 00       	call   17886 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>
   14bea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14bee:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   14bf2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14bf6:	48 89 d6             	mov    %rdx,%rsi
   14bf9:	48 89 c7             	mov    %rax,%rdi
   14bfc:	e8 d4 2c 00 00       	call   178d5 <_ZN9__gnu_cxxeqIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   14c01:	c9                   	leave
   14c02:	c3                   	ret
   14c03:	90                   	nop

0000000000014c04 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   14c04:	55                   	push   %rbp
   14c05:	48 89 e5             	mov    %rsp,%rbp
   14c08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14c0c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   14c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c14:	48 8b 00             	mov    (%rax),%rax
   14c17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   14c1b:	48 c1 e2 03          	shl    $0x3,%rdx
   14c1f:	48 01 d0             	add    %rdx,%rax
      }
   14c22:	5d                   	pop    %rbp
   14c23:	c3                   	ret

0000000000014c24 <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   14c24:	55                   	push   %rbp
   14c25:	48 89 e5             	mov    %rsp,%rbp
   14c28:	48 83 ec 20          	sub    $0x20,%rsp
   14c2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   14c30:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   14c34:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14c38:	48 89 d6             	mov    %rdx,%rsi
   14c3b:	48 89 c7             	mov    %rax,%rdi
   14c3e:	e8 cd 2c 00 00       	call   17910 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c47:	c9                   	leave
   14c48:	c3                   	ret
   14c49:	90                   	nop

0000000000014c4a <_ZNSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   14c4a:	55                   	push   %rbp
   14c4b:	48 89 e5             	mov    %rsp,%rbp
   14c4e:	48 83 ec 20          	sub    $0x20,%rsp
   14c52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   14c56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c5a:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14c5e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14c62:	48 89 d6             	mov    %rdx,%rsi
   14c65:	48 89 c7             	mov    %rax,%rdi
   14c68:	e8 a3 2c 00 00       	call   17910 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14c6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c71:	c9                   	leave
   14c72:	c3                   	ret

0000000000014c73 <_ZN9__gnu_cxxneIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   14c73:	55                   	push   %rbp
   14c74:	48 89 e5             	mov    %rsp,%rbp
   14c77:	53                   	push   %rbx
   14c78:	48 83 ec 18          	sub    $0x18,%rsp
   14c7c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14c80:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   14c84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c88:	48 89 c7             	mov    %rax,%rdi
   14c8b:	e8 9e 2c 00 00       	call   1792e <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   14c90:	48 8b 18             	mov    (%rax),%rbx
   14c93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14c97:	48 89 c7             	mov    %rax,%rdi
   14c9a:	e8 8f 2c 00 00       	call   1792e <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   14c9f:	48 8b 00             	mov    (%rax),%rax
   14ca2:	48 39 c3             	cmp    %rax,%rbx
   14ca5:	0f 95 c0             	setne  %al
   14ca8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14cac:	c9                   	leave
   14cad:	c3                   	ret

0000000000014cae <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   14cae:	55                   	push   %rbp
   14caf:	48 89 e5             	mov    %rsp,%rbp
   14cb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   14cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cba:	48 8b 00             	mov    (%rax),%rax
   14cbd:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14cc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cc5:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   14cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   14ccc:	5d                   	pop    %rbp
   14ccd:	c3                   	ret

0000000000014cce <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   14cce:	55                   	push   %rbp
   14ccf:	48 89 e5             	mov    %rsp,%rbp
   14cd2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   14cd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cda:	48 8b 00             	mov    (%rax),%rax
   14cdd:	5d                   	pop    %rbp
   14cde:	c3                   	ret
   14cdf:	90                   	nop

0000000000014ce0 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   14ce0:	55                   	push   %rbp
   14ce1:	48 89 e5             	mov    %rsp,%rbp
   14ce4:	48 83 ec 20          	sub    $0x20,%rsp
   14ce8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   14cec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   14cf0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14cf4:	48 89 d6             	mov    %rdx,%rsi
   14cf7:	48 89 c7             	mov    %rax,%rdi
   14cfa:	e8 3d 2c 00 00       	call   1793c <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d03:	c9                   	leave
   14d04:	c3                   	ret
   14d05:	90                   	nop

0000000000014d06 <_ZNSt6vectorI16VkPresentModeKHRSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   14d06:	55                   	push   %rbp
   14d07:	48 89 e5             	mov    %rsp,%rbp
   14d0a:	48 83 ec 20          	sub    $0x20,%rsp
   14d0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   14d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d16:	48 8d 50 08          	lea    0x8(%rax),%rdx
   14d1a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   14d1e:	48 89 d6             	mov    %rdx,%rsi
   14d21:	48 89 c7             	mov    %rax,%rdi
   14d24:	e8 13 2c 00 00       	call   1793c <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>
   14d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d2d:	c9                   	leave
   14d2e:	c3                   	ret

0000000000014d2f <_ZN9__gnu_cxxneIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   14d2f:	55                   	push   %rbp
   14d30:	48 89 e5             	mov    %rsp,%rbp
   14d33:	53                   	push   %rbx
   14d34:	48 83 ec 18          	sub    $0x18,%rsp
   14d38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14d3c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   14d40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d44:	48 89 c7             	mov    %rax,%rdi
   14d47:	e8 0e 2c 00 00       	call   1795a <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   14d4c:	48 8b 18             	mov    (%rax),%rbx
   14d4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14d53:	48 89 c7             	mov    %rax,%rdi
   14d56:	e8 ff 2b 00 00       	call   1795a <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   14d5b:	48 8b 00             	mov    (%rax),%rax
   14d5e:	48 39 c3             	cmp    %rax,%rbx
   14d61:	0f 95 c0             	setne  %al
   14d64:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   14d68:	c9                   	leave
   14d69:	c3                   	ret

0000000000014d6a <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   14d6a:	55                   	push   %rbp
   14d6b:	48 89 e5             	mov    %rsp,%rbp
   14d6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   14d72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d76:	48 8b 00             	mov    (%rax),%rax
   14d79:	48 8d 50 04          	lea    0x4(%rax),%rdx
   14d7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d81:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   14d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   14d88:	5d                   	pop    %rbp
   14d89:	c3                   	ret

0000000000014d8a <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   14d8a:	55                   	push   %rbp
   14d8b:	48 89 e5             	mov    %rsp,%rbp
   14d8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   14d92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d96:	48 8b 00             	mov    (%rax),%rax
   14d99:	5d                   	pop    %rbp
   14d9a:	c3                   	ret
   14d9b:	90                   	nop

0000000000014d9c <_ZNSt6vectorIP9VkImage_TSaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   14d9c:	55                   	push   %rbp
   14d9d:	48 89 e5             	mov    %rsp,%rbp
   14da0:	48 83 ec 20          	sub    $0x20,%rsp
   14da4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14da8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	constexpr bool __move_storage =
   14dac:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
   14db0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14db4:	48 89 c7             	mov    %rax,%rdi
   14db7:	e8 ac 2b 00 00       	call   17968 <_ZSt4moveIRSt6vectorIP9VkImage_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
   14dbc:	48 89 c2             	mov    %rax,%rdx
   14dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14dc3:	48 89 d6             	mov    %rdx,%rsi
   14dc6:	48 89 c7             	mov    %rax,%rdi
   14dc9:	e8 a8 2b 00 00       	call   17976 <_ZNSt6vectorIP9VkImage_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
   14dce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   14dd2:	c9                   	leave
   14dd3:	c3                   	ret

0000000000014dd4 <_ZNKSt6vectorIP9VkImage_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   14dd4:	55                   	push   %rbp
   14dd5:	48 89 e5             	mov    %rsp,%rbp
   14dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   14ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14de0:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14de4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14de8:	48 8b 00             	mov    (%rax),%rax
   14deb:	48 29 c2             	sub    %rax,%rdx
   14dee:	48 89 d0             	mov    %rdx,%rax
   14df1:	48 c1 f8 03          	sar    $0x3,%rax
   14df5:	5d                   	pop    %rbp
   14df6:	c3                   	ret
   14df7:	90                   	nop

0000000000014df8 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   14df8:	55                   	push   %rbp
   14df9:	48 89 e5             	mov    %rsp,%rbp
   14dfc:	48 83 ec 10          	sub    $0x10,%rsp
   14e00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14e04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   14e08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e0c:	48 89 c7             	mov    %rax,%rdi
   14e0f:	e8 8c 04 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   14e14:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   14e18:	0f 92 c0             	setb   %al
   14e1b:	84 c0                	test   %al,%al
   14e1d:	74 24                	je     14e43 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   14e1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e23:	48 89 c7             	mov    %rax,%rdi
   14e26:	e8 75 04 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   14e2b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   14e2f:	48 29 c2             	sub    %rax,%rdx
   14e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e36:	48 89 d6             	mov    %rdx,%rsi
   14e39:	48 89 c7             	mov    %rax,%rdi
   14e3c:	e8 d7 2b 00 00       	call   17a18 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>
      }
   14e41:	eb 38                	jmp    14e7b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   14e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e47:	48 89 c7             	mov    %rax,%rdi
   14e4a:	e8 51 04 00 00       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   14e4f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   14e53:	0f 92 c0             	setb   %al
   14e56:	84 c0                	test   %al,%al
   14e58:	74 21                	je     14e7b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   14e5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e5e:	48 8b 00             	mov    (%rax),%rax
   14e61:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   14e65:	48 c1 e2 03          	shl    $0x3,%rdx
   14e69:	48 01 c2             	add    %rax,%rdx
   14e6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e70:	48 89 d6             	mov    %rdx,%rsi
   14e73:	48 89 c7             	mov    %rax,%rdi
   14e76:	e8 a7 2d 00 00       	call   17c22 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   14e7b:	90                   	nop
   14e7c:	c9                   	leave
   14e7d:	c3                   	ret

0000000000014e7e <_ZNSt6vectorIP9VkImage_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   14e7e:	55                   	push   %rbp
   14e7f:	48 89 e5             	mov    %rsp,%rbp
   14e82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14e86:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   14e8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e8e:	48 8b 00             	mov    (%rax),%rax
   14e91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   14e95:	48 c1 e2 03          	shl    $0x3,%rdx
   14e99:	48 01 d0             	add    %rdx,%rax
      }
   14e9c:	5d                   	pop    %rbp
   14e9d:	c3                   	ret

0000000000014e9e <_ZNSt6vectorIP13VkImageView_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   14e9e:	55                   	push   %rbp
   14e9f:	48 89 e5             	mov    %rsp,%rbp
   14ea2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14ea6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   14eaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14eae:	48 8b 00             	mov    (%rax),%rax
   14eb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   14eb5:	48 c1 e2 03          	shl    $0x3,%rdx
   14eb9:	48 01 d0             	add    %rdx,%rax
      }
   14ebc:	5d                   	pop    %rbp
   14ebd:	c3                   	ret

0000000000014ebe <_ZN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EE21getBindingDescriptionEv>:
  PosVecType position;
  ColorVecType color;

  static constexpr size_t attributeCount = 2;

  static VkVertexInputBindingDescription getBindingDescription() {
   14ebe:	55                   	push   %rbp
   14ebf:	48 89 e5             	mov    %rsp,%rbp
    VkVertexInputBindingDescription bindingDescription{};
   14ec2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   14ec9:	00 
   14eca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
    bindingDescription.binding = 0;
   14ed1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    bindingDescription.stride = sizeof(Vertex);
   14ed8:	c7 45 ec 14 00 00 00 	movl   $0x14,-0x14(%rbp)
    bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX;
   14edf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
    return bindingDescription;
   14ee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14eea:	48 89 45 f4          	mov    %rax,-0xc(%rbp)
   14eee:	8b 45 f0             	mov    -0x10(%rbp),%eax
   14ef1:	89 45 fc             	mov    %eax,-0x4(%rbp)
   14ef4:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   14ef8:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   14efb:	48 89 ca             	mov    %rcx,%rdx
  }
   14efe:	5d                   	pop    %rbp
   14eff:	c3                   	ret

0000000000014f00 <_ZN3vkh6VertexILNS_11PositionDimE0ELNS_8ColorDimE0EE24getAttributeDescriptionsEv>:

  static std::array<VkVertexInputAttributeDescription, attributeCount>
  getAttributeDescriptions() {
   14f00:	55                   	push   %rbp
   14f01:	48 89 e5             	mov    %rsp,%rbp
   14f04:	48 83 ec 10          	sub    $0x10,%rsp
   14f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    std::array<VkVertexInputAttributeDescription, attributeCount>
        attributeDescriptions{};
   14f0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f10:	66 0f ef c0          	pxor   %xmm0,%xmm0
   14f14:	0f 11 00             	movups %xmm0,(%rax)
   14f17:	0f 11 40 10          	movups %xmm0,0x10(%rax)

    attributeDescriptions[0].binding = 0;
   14f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f1f:	be 00 00 00 00       	mov    $0x0,%esi
   14f24:	48 89 c7             	mov    %rax,%rdi
   14f27:	e8 56 2d 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14f2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    attributeDescriptions[0].location = 0;
   14f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f37:	be 00 00 00 00       	mov    $0x0,%esi
   14f3c:	48 89 c7             	mov    %rax,%rdi
   14f3f:	e8 3e 2d 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14f44:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    attributeDescriptions[0].format = VK_FORMAT_R32G32_SFLOAT;
   14f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f4e:	be 00 00 00 00       	mov    $0x0,%esi
   14f53:	48 89 c7             	mov    %rax,%rdi
   14f56:	e8 27 2d 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14f5b:	c7 40 08 67 00 00 00 	movl   $0x67,0x8(%rax)
    attributeDescriptions[0].offset = offsetof(Vertex, position);
   14f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f66:	be 00 00 00 00       	mov    $0x0,%esi
   14f6b:	48 89 c7             	mov    %rax,%rdi
   14f6e:	e8 0f 2d 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14f73:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    attributeDescriptions[1].binding = 0;
   14f7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f7e:	be 01 00 00 00       	mov    $0x1,%esi
   14f83:	48 89 c7             	mov    %rax,%rdi
   14f86:	e8 f7 2c 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14f8b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    attributeDescriptions[1].location = 1;
   14f92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f96:	be 01 00 00 00       	mov    $0x1,%esi
   14f9b:	48 89 c7             	mov    %rax,%rdi
   14f9e:	e8 df 2c 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14fa3:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
    attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
   14fa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fad:	be 01 00 00 00       	mov    $0x1,%esi
   14fb2:	48 89 c7             	mov    %rax,%rdi
   14fb5:	e8 c8 2c 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14fba:	c7 40 08 6a 00 00 00 	movl   $0x6a,0x8(%rax)
    attributeDescriptions[1].offset = offsetof(Vertex, color);
   14fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fc5:	be 01 00 00 00       	mov    $0x1,%esi
   14fca:	48 89 c7             	mov    %rax,%rdi
   14fcd:	e8 b0 2c 00 00       	call   17c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>
   14fd2:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%rax)

    return attributeDescriptions;
   14fd9:	90                   	nop
  }
   14fda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fde:	c9                   	leave
   14fdf:	c3                   	ret

0000000000014fe0 <_ZNKSt5arrayI33VkVertexInputAttributeDescriptionLm2EE4sizeEv>:
      size() const noexcept { return _Nm; }
   14fe0:	55                   	push   %rbp
   14fe1:	48 89 e5             	mov    %rsp,%rbp
   14fe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14fe8:	b8 02 00 00 00       	mov    $0x2,%eax
   14fed:	5d                   	pop    %rbp
   14fee:	c3                   	ret
   14fef:	90                   	nop

0000000000014ff0 <_ZNSaI28VkGraphicsPipelineCreateInfoEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   14ff0:	55                   	push   %rbp
   14ff1:	48 89 e5             	mov    %rsp,%rbp
   14ff4:	48 83 ec 10          	sub    $0x10,%rsp
   14ff8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   14ffc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15000:	48 89 c7             	mov    %rax,%rdi
   15003:	e8 a0 2c 00 00       	call   17ca8 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoEC1Ev>
   15008:	90                   	nop
   15009:	c9                   	leave
   1500a:	c3                   	ret
   1500b:	90                   	nop

000000000001500c <_ZNSaI28VkGraphicsPipelineCreateInfoED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   1500c:	55                   	push   %rbp
   1500d:	48 89 e5             	mov    %rsp,%rbp
   15010:	48 83 ec 10          	sub    $0x10,%rsp
   15014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1501c:	48 89 c7             	mov    %rax,%rdi
   1501f:	e8 90 2c 00 00       	call   17cb4 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoED1Ev>
   15024:	90                   	nop
   15025:	c9                   	leave
   15026:	c3                   	ret
   15027:	90                   	nop

0000000000015028 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   15028:	55                   	push   %rbp
   15029:	48 89 e5             	mov    %rsp,%rbp
   1502c:	53                   	push   %rbx
   1502d:	48 83 ec 38          	sub    $0x38,%rsp
   15031:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   15035:	48 89 f0             	mov    %rsi,%rax
   15038:	48 89 d6             	mov    %rdx,%rsi
   1503b:	48 89 f2             	mov    %rsi,%rdx
   1503e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   15042:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   15046:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   1504a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1504e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   15052:	48 89 d6             	mov    %rdx,%rsi
   15055:	48 89 c7             	mov    %rax,%rdi
   15058:	e8 7f 2c 00 00       	call   17cdc <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
   1505d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   15061:	48 89 c7             	mov    %rax,%rdi
   15064:	e8 03 2d 00 00       	call   17d6c <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE3endEv>
   15069:	48 89 c3             	mov    %rax,%rbx
   1506c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   15070:	48 89 c7             	mov    %rax,%rdi
   15073:	e8 e2 2c 00 00       	call   17d5a <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE5beginEv>
   15078:	48 89 c1             	mov    %rax,%rcx
   1507b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1507f:	48 89 da             	mov    %rbx,%rdx
   15082:	48 89 ce             	mov    %rcx,%rsi
   15085:	48 89 c7             	mov    %rax,%rdi
   15088:	e8 53 2d 00 00       	call   17de0 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
   1508d:	eb 1a                	jmp    150a9 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x81>
   1508f:	48 89 c3             	mov    %rax,%rbx
   15092:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   15096:	48 89 c7             	mov    %rax,%rdi
   15099:	e8 64 2c 00 00       	call   17d02 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>
   1509e:	48 89 d8             	mov    %rbx,%rax
   150a1:	48 89 c7             	mov    %rax,%rdi
   150a4:	e8 c7 f8 fe ff       	call   4970 <_Unwind_Resume@plt>
   150a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   150ad:	c9                   	leave
   150ae:	c3                   	ret
   150af:	90                   	nop

00000000000150b0 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   150b0:	55                   	push   %rbp
   150b1:	48 89 e5             	mov    %rsp,%rbp
   150b4:	48 83 ec 10          	sub    $0x10,%rsp
   150b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   150bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150c0:	48 89 c7             	mov    %rax,%rdi
   150c3:	e8 d2 2d 00 00       	call   17e9a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_get_Tp_allocatorEv>
   150c8:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   150cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150cf:	48 8b 48 08          	mov    0x8(%rax),%rcx
   150d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150d7:	48 8b 00             	mov    (%rax),%rax
   150da:	48 89 ce             	mov    %rcx,%rsi
   150dd:	48 89 c7             	mov    %rax,%rdi
   150e0:	e8 c3 2d 00 00       	call   17ea8 <_ZSt8_DestroyIP28VkGraphicsPipelineCreateInfoS0_EvT_S2_RSaIT0_E>
      }
   150e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150e9:	48 89 c7             	mov    %rax,%rdi
   150ec:	e8 11 2c 00 00       	call   17d02 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>
   150f1:	90                   	nop
   150f2:	c9                   	leave
   150f3:	c3                   	ret

00000000000150f4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   150f4:	55                   	push   %rbp
   150f5:	48 89 e5             	mov    %rsp,%rbp
   150f8:	48 83 ec 10          	sub    $0x10,%rsp
   150fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15104:	48 89 c7             	mov    %rax,%rdi
   15107:	e8 10 2e 00 00       	call   17f1c <_ZNSaIP12VkPipeline_TED1Ev>
   1510c:	90                   	nop
   1510d:	c9                   	leave
   1510e:	c3                   	ret

000000000001510f <_ZN3vkh15createPipelinesILNS_12PipelineTypeE1EEESt6vectorIP12VkPipeline_TSaIS4_EEP10VkDevice_TP17VkPipelineCache_TRKS2_INSt13tuple_elementIXT_ESt5tupleIJ27VkComputePipelineCreateInfo28VkGraphicsPipelineCreateInfo33VkRayTracingPipelineCreateInfoKHR32VkRayTracingPipelineCreateInfoNVEEE4typeESaISJ_EEPK21VkAllocationCallbacks>:
    pipelineType, VkComputePipelineCreateInfo, VkGraphicsPipelineCreateInfo,
    VkRayTracingPipelineCreateInfoKHR, VkRayTracingPipelineCreateInfoNV>;

template <PipelineType pipelineType = Graphics>
std::vector<VkPipeline>
createPipelines(VkDevice device, VkPipelineCache pipelineCache,
   1510f:	55                   	push   %rbp
   15110:	48 89 e5             	mov    %rsp,%rbp
   15113:	41 54                	push   %r12
   15115:	53                   	push   %rbx
   15116:	48 83 ec 40          	sub    $0x40,%rsp
   1511a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1511e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   15122:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   15126:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   1512a:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
                const std::vector<pipelineInfoType<pipelineType>> &createInfos,
                const VkAllocationCallbacks *pAllocator = nullptr) {
  uint32_t pipelineCount = static_cast<uint32_t>(createInfos.size());
   1512e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   15132:	48 89 c7             	mov    %rax,%rdi
   15135:	e8 98 2d 00 00       	call   17ed2 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4sizeEv>
   1513a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  std::vector<VkPipeline> pipelines{pipelineCount};
   1513d:	8b 5d ec             	mov    -0x14(%rbp),%ebx
   15140:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
   15144:	48 89 c7             	mov    %rax,%rdi
   15147:	e8 b4 2d 00 00       	call   17f00 <_ZNSaIP12VkPipeline_TEC1Ev>
   1514c:	48 8d 55 e7          	lea    -0x19(%rbp),%rdx
   15150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   15154:	48 89 de             	mov    %rbx,%rsi
   15157:	48 89 c7             	mov    %rax,%rdi
   1515a:	e8 d9 2d 00 00       	call   17f38 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_>
   1515f:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
   15163:	48 89 c7             	mov    %rax,%rdi
   15166:	e8 b1 2d 00 00       	call   17f1c <_ZNSaIP12VkPipeline_TED1Ev>
  if constexpr (pipelineType == Compute) {
    result = vkCreateComputePipelines(device, pipelineCache, pipelineCount,
                                      createInfos.data(), pAllocator,
                                      pipelines.data());
  } else if (pipelineType == Graphics) {
    result = vkCreateGraphicsPipelines(device, pipelineCache, pipelineCount,
   1516b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1516f:	48 89 c7             	mov    %rax,%rdi
   15172:	e8 5b 2e 00 00       	call   17fd2 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE4dataEv>
   15177:	48 89 c3             	mov    %rax,%rbx
   1517a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1517e:	48 89 c7             	mov    %rax,%rdi
   15181:	e8 28 2e 00 00       	call   17fae <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4dataEv>
   15186:	48 89 c1             	mov    %rax,%rcx
   15189:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
   1518d:	8b 55 ec             	mov    -0x14(%rbp),%edx
   15190:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   15194:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   15198:	49 89 d9             	mov    %rbx,%r9
   1519b:	49 89 f8             	mov    %rdi,%r8
   1519e:	48 89 c7             	mov    %rax,%rdi
   151a1:	e8 1a f0 fe ff       	call   41c0 <vkCreateGraphicsPipelines@plt>
   151a6:	89 45 e8             	mov    %eax,-0x18(%rbp)
                                       createInfos.data(), pAllocator,
                                       pipelines.data());
  } else {
    throw std::runtime_error("Unknown pipeline type.");
  }
  if (result != VK_SUCCESS) {
   151a9:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
   151ad:	74 7f                	je     1522e <_ZN3vkh15createPipelinesILNS_12PipelineTypeE1EEESt6vectorIP12VkPipeline_TSaIS4_EEP10VkDevice_TP17VkPipelineCache_TRKS2_INSt13tuple_elementIXT_ESt5tupleIJ27VkComputePipelineCreateInfo28VkGraphicsPipelineCreateInfo33VkRayTracingPipelineCreateInfoKHR32VkRayTracingPipelineCreateInfoNVEEE4typeESaISJ_EEPK21VkAllocationCallbacks+0x11f>
    throw std::runtime_error("Failed to create pipelines.");
   151af:	bf 10 00 00 00       	mov    $0x10,%edi
   151b4:	e8 17 f0 fe ff       	call   41d0 <__cxa_allocate_exception@plt>
   151b9:	48 89 c3             	mov    %rax,%rbx
   151bc:	48 8d 05 d7 e3 00 00 	lea    0xe3d7(%rip),%rax        # 2359a <_ZZN9VulkanApp6renderEvE11submitCount+0x2a2>
   151c3:	48 89 c6             	mov    %rax,%rsi
   151c6:	48 89 df             	mov    %rbx,%rdi
   151c9:	e8 72 ef fe ff       	call   4140 <_ZNSt13runtime_errorC1EPKc@plt>
   151ce:	48 8b 05 e3 fd 01 00 	mov    0x1fde3(%rip),%rax        # 34fb8 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
   151d5:	48 89 c2             	mov    %rax,%rdx
   151d8:	48 8d 05 61 fb 01 00 	lea    0x1fb61(%rip),%rax        # 34d40 <_ZTISt13runtime_error@GLIBCXX_3.4>
   151df:	48 89 c6             	mov    %rax,%rsi
   151e2:	48 89 df             	mov    %rbx,%rdi
   151e5:	e8 16 f7 fe ff       	call   4900 <__cxa_throw@plt>
  std::vector<VkPipeline> pipelines{pipelineCount};
   151ea:	48 89 c3             	mov    %rax,%rbx
   151ed:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
   151f1:	48 89 c7             	mov    %rax,%rdi
   151f4:	e8 23 2d 00 00       	call   17f1c <_ZNSaIP12VkPipeline_TED1Ev>
   151f9:	48 89 d8             	mov    %rbx,%rax
   151fc:	48 89 c7             	mov    %rax,%rdi
   151ff:	e8 6c f7 fe ff       	call   4970 <_Unwind_Resume@plt>
    throw std::runtime_error("Failed to create pipelines.");
   15204:	49 89 c4             	mov    %rax,%r12
   15207:	48 89 df             	mov    %rbx,%rdi
   1520a:	e8 f1 f0 fe ff       	call   4300 <__cxa_free_exception@plt>
   1520f:	4c 89 e3             	mov    %r12,%rbx
   15212:	eb 03                	jmp    15217 <_ZN3vkh15createPipelinesILNS_12PipelineTypeE1EEESt6vectorIP12VkPipeline_TSaIS4_EEP10VkDevice_TP17VkPipelineCache_TRKS2_INSt13tuple_elementIXT_ESt5tupleIJ27VkComputePipelineCreateInfo28VkGraphicsPipelineCreateInfo33VkRayTracingPipelineCreateInfoKHR32VkRayTracingPipelineCreateInfoNVEEE4typeESaISJ_EEPK21VkAllocationCallbacks+0x108>
  }
  return pipelines;
}
   15214:	48 89 c3             	mov    %rax,%rbx
   15217:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1521b:	48 89 c7             	mov    %rax,%rdi
   1521e:	e8 19 00 00 00       	call   1523c <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>
   15223:	48 89 d8             	mov    %rbx,%rax
   15226:	48 89 c7             	mov    %rax,%rdi
   15229:	e8 42 f7 fe ff       	call   4970 <_Unwind_Resume@plt>
  return pipelines;
   1522e:	90                   	nop
}
   1522f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   15233:	48 83 c4 40          	add    $0x40,%rsp
   15237:	5b                   	pop    %rbx
   15238:	41 5c                	pop    %r12
   1523a:	5d                   	pop    %rbp
   1523b:	c3                   	ret

000000000001523c <_ZNSt6vectorIP12VkPipeline_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1523c:	55                   	push   %rbp
   1523d:	48 89 e5             	mov    %rsp,%rbp
   15240:	48 83 ec 10          	sub    $0x10,%rsp
   15244:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   15248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1524c:	48 89 c7             	mov    %rax,%rdi
   1524f:	e8 f0 2d 00 00       	call   18044 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>
   15254:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   15257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1525b:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1525f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15263:	48 8b 00             	mov    (%rax),%rax
   15266:	48 89 ce             	mov    %rcx,%rsi
   15269:	48 89 c7             	mov    %rax,%rdi
   1526c:	e8 e1 2d 00 00       	call   18052 <_ZSt8_DestroyIPP12VkPipeline_TS1_EvT_S3_RSaIT0_E>
      }
   15271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15275:	48 89 c7             	mov    %rax,%rdi
   15278:	e8 79 2d 00 00       	call   17ff6 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>
   1527d:	90                   	nop
   1527e:	c9                   	leave
   1527f:	c3                   	ret

0000000000015280 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   15280:	55                   	push   %rbp
   15281:	48 89 e5             	mov    %rsp,%rbp
   15284:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15288:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   1528c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15290:	48 8b 00             	mov    (%rax),%rax
   15293:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15297:	48 c1 e2 03          	shl    $0x3,%rdx
   1529b:	48 01 d0             	add    %rdx,%rax
      }
   1529e:	5d                   	pop    %rbp
   1529f:	c3                   	ret

00000000000152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   152a0:	55                   	push   %rbp
   152a1:	48 89 e5             	mov    %rsp,%rbp
   152a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   152a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152ac:	48 8b 50 08          	mov    0x8(%rax),%rdx
   152b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152b4:	48 8b 00             	mov    (%rax),%rax
   152b7:	48 29 c2             	sub    %rax,%rdx
   152ba:	48 89 d0             	mov    %rdx,%rax
   152bd:	48 c1 f8 03          	sar    $0x3,%rax
   152c1:	5d                   	pop    %rbp
   152c2:	c3                   	ret
   152c3:	90                   	nop

00000000000152c4 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   152c4:	55                   	push   %rbp
   152c5:	48 89 e5             	mov    %rsp,%rbp
   152c8:	48 83 ec 10          	sub    $0x10,%rsp
   152cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   152d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   152d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152d8:	48 89 c7             	mov    %rax,%rdi
   152db:	e8 9c 2d 00 00       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   152e0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   152e4:	0f 92 c0             	setb   %al
   152e7:	84 c0                	test   %al,%al
   152e9:	74 24                	je     1530f <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   152eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152ef:	48 89 c7             	mov    %rax,%rdi
   152f2:	e8 85 2d 00 00       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   152f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   152fb:	48 29 c2             	sub    %rax,%rdx
   152fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15302:	48 89 d6             	mov    %rdx,%rsi
   15305:	48 89 c7             	mov    %rax,%rdi
   15308:	e8 93 2d 00 00       	call   180a0 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm>
      }
   1530d:	eb 38                	jmp    15347 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   1530f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15313:	48 89 c7             	mov    %rax,%rdi
   15316:	e8 61 2d 00 00       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   1531b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1531f:	0f 92 c0             	setb   %al
   15322:	84 c0                	test   %al,%al
   15324:	74 21                	je     15347 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   15326:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1532a:	48 8b 00             	mov    (%rax),%rax
   1532d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15331:	48 c1 e2 03          	shl    $0x3,%rdx
   15335:	48 01 c2             	add    %rax,%rdx
   15338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1533c:	48 89 d6             	mov    %rdx,%rsi
   1533f:	48 89 c7             	mov    %rax,%rdi
   15342:	e8 63 2f 00 00       	call   182aa <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   15347:	90                   	nop
   15348:	c9                   	leave
   15349:	c3                   	ret

000000000001534a <_ZNSaIP13VkImageView_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   1534a:	55                   	push   %rbp
   1534b:	48 89 e5             	mov    %rsp,%rbp
   1534e:	48 83 ec 10          	sub    $0x10,%rsp
   15352:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15356:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1535a:	48 89 c7             	mov    %rax,%rdi
   1535d:	e8 a8 2f 00 00       	call   1830a <_ZNSt15__new_allocatorIP13VkImageView_TEC1Ev>
   15362:	90                   	nop
   15363:	c9                   	leave
   15364:	c3                   	ret
   15365:	90                   	nop

0000000000015366 <_ZNSaIP13VkImageView_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   15366:	55                   	push   %rbp
   15367:	48 89 e5             	mov    %rsp,%rbp
   1536a:	48 83 ec 10          	sub    $0x10,%rsp
   1536e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15376:	48 89 c7             	mov    %rax,%rdi
   15379:	e8 98 2f 00 00       	call   18316 <_ZNSt15__new_allocatorIP13VkImageView_TED1Ev>
   1537e:	90                   	nop
   1537f:	c9                   	leave
   15380:	c3                   	ret
   15381:	90                   	nop

0000000000015382 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
   15382:	55                   	push   %rbp
   15383:	48 89 e5             	mov    %rsp,%rbp
   15386:	53                   	push   %rbx
   15387:	48 83 ec 38          	sub    $0x38,%rsp
   1538b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1538f:	48 89 f0             	mov    %rsi,%rax
   15392:	48 89 d6             	mov    %rdx,%rsi
   15395:	48 89 f2             	mov    %rsi,%rdx
   15398:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1539c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   153a0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   153a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   153a8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   153ac:	48 89 d6             	mov    %rdx,%rsi
   153af:	48 89 c7             	mov    %rax,%rdi
   153b2:	e8 6b 2f 00 00       	call   18322 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
   153b7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   153bb:	48 89 c7             	mov    %rax,%rdi
   153be:	e8 97 2f 00 00       	call   1835a <_ZNKSt16initializer_listIP13VkImageView_TE3endEv>
   153c3:	48 89 c3             	mov    %rax,%rbx
   153c6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   153ca:	48 89 c7             	mov    %rax,%rdi
   153cd:	e8 76 2f 00 00       	call   18348 <_ZNKSt16initializer_listIP13VkImageView_TE5beginEv>
   153d2:	48 89 c1             	mov    %rax,%rcx
   153d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   153d9:	48 89 da             	mov    %rbx,%rdx
   153dc:	48 89 ce             	mov    %rcx,%rsi
   153df:	48 89 c7             	mov    %rax,%rdi
   153e2:	e8 d9 2f 00 00       	call   183c0 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
   153e7:	eb 1a                	jmp    15403 <_ZNSt6vectorIP13VkImageView_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   153e9:	48 89 c3             	mov    %rax,%rbx
   153ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   153f0:	48 89 c7             	mov    %rax,%rdi
   153f3:	e8 60 16 00 00       	call   16a58 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EED1Ev>
   153f8:	48 89 d8             	mov    %rbx,%rax
   153fb:	48 89 c7             	mov    %rax,%rdi
   153fe:	e8 6d f5 fe ff       	call   4970 <_Unwind_Resume@plt>
   15403:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   15407:	c9                   	leave
   15408:	c3                   	ret
   15409:	90                   	nop

000000000001540a <_ZNSt6vectorIP13VkImageView_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1540a:	55                   	push   %rbp
   1540b:	48 89 e5             	mov    %rsp,%rbp
   1540e:	48 83 ec 10          	sub    $0x10,%rsp
   15412:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   15416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1541a:	48 89 c7             	mov    %rax,%rdi
   1541d:	e8 4e 30 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   15422:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   15425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15429:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1542d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15431:	48 8b 00             	mov    (%rax),%rax
   15434:	48 89 ce             	mov    %rcx,%rsi
   15437:	48 89 c7             	mov    %rax,%rdi
   1543a:	e8 3f 30 00 00       	call   1847e <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>
      }
   1543f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15443:	48 89 c7             	mov    %rax,%rdi
   15446:	e8 0d 16 00 00       	call   16a58 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EED1Ev>
   1544b:	90                   	nop
   1544c:	c9                   	leave
   1544d:	c3                   	ret

000000000001544e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   1544e:	55                   	push   %rbp
   1544f:	48 89 e5             	mov    %rsp,%rbp
   15452:	48 83 ec 10          	sub    $0x10,%rsp
   15456:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1545a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1545e:	48 8b 10             	mov    (%rax),%rdx
   15461:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15465:	48 89 d6             	mov    %rdx,%rsi
   15468:	48 89 c7             	mov    %rax,%rdi
   1546b:	e8 38 30 00 00       	call   184a8 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   15470:	c9                   	leave
   15471:	c3                   	ret

0000000000015472 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   15472:	55                   	push   %rbp
   15473:	48 89 e5             	mov    %rsp,%rbp
   15476:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1547a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   1547e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15482:	48 8b 00             	mov    (%rax),%rax
   15485:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15489:	48 c1 e2 03          	shl    $0x3,%rdx
   1548d:	48 01 d0             	add    %rdx,%rax
      }
   15490:	5d                   	pop    %rbp
   15491:	c3                   	ret

0000000000015492 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   15492:	55                   	push   %rbp
   15493:	48 89 e5             	mov    %rsp,%rbp
   15496:	48 83 ec 20          	sub    $0x20,%rsp
   1549a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   1549e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   154a2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   154a6:	48 89 d6             	mov    %rdx,%rsi
   154a9:	48 89 c7             	mov    %rax,%rdi
   154ac:	e8 09 30 00 00       	call   184ba <_ZN9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   154b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154b5:	c9                   	leave
   154b6:	c3                   	ret
   154b7:	90                   	nop

00000000000154b8 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   154b8:	55                   	push   %rbp
   154b9:	48 89 e5             	mov    %rsp,%rbp
   154bc:	48 83 ec 20          	sub    $0x20,%rsp
   154c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   154c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154c8:	48 8d 50 08          	lea    0x8(%rax),%rdx
   154cc:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   154d0:	48 89 d6             	mov    %rdx,%rsi
   154d3:	48 89 c7             	mov    %rax,%rdi
   154d6:	e8 df 2f 00 00       	call   184ba <_ZN9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   154db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154df:	c9                   	leave
   154e0:	c3                   	ret

00000000000154e1 <_ZN9__gnu_cxxneIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   154e1:	55                   	push   %rbp
   154e2:	48 89 e5             	mov    %rsp,%rbp
   154e5:	53                   	push   %rbx
   154e6:	48 83 ec 18          	sub    $0x18,%rsp
   154ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   154ee:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   154f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154f6:	48 89 c7             	mov    %rax,%rdi
   154f9:	e8 da 2f 00 00       	call   184d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>
   154fe:	48 8b 18             	mov    (%rax),%rbx
   15501:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15505:	48 89 c7             	mov    %rax,%rdi
   15508:	e8 cb 2f 00 00       	call   184d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>
   1550d:	48 8b 00             	mov    (%rax),%rax
   15510:	48 39 c3             	cmp    %rax,%rbx
   15513:	0f 95 c0             	setne  %al
   15516:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1551a:	c9                   	leave
   1551b:	c3                   	ret

000000000001551c <_ZN9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1551c:	55                   	push   %rbp
   1551d:	48 89 e5             	mov    %rsp,%rbp
   15520:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   15524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15528:	48 8b 00             	mov    (%rax),%rax
   1552b:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1552f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15533:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   15536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1553a:	5d                   	pop    %rbp
   1553b:	c3                   	ret

000000000001553c <_ZNK9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1553c:	55                   	push   %rbp
   1553d:	48 89 e5             	mov    %rsp,%rbp
   15540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   15544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15548:	48 8b 00             	mov    (%rax),%rax
   1554b:	5d                   	pop    %rbp
   1554c:	c3                   	ret
   1554d:	90                   	nop

000000000001554e <_ZNSt6vectorIP13VkImageView_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1554e:	55                   	push   %rbp
   1554f:	48 89 e5             	mov    %rsp,%rbp
   15552:	48 83 ec 20          	sub    $0x20,%rsp
   15556:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   1555a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1555e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   15562:	48 89 d6             	mov    %rdx,%rsi
   15565:	48 89 c7             	mov    %rax,%rdi
   15568:	e8 79 2f 00 00       	call   184e6 <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1556d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15571:	c9                   	leave
   15572:	c3                   	ret
   15573:	90                   	nop

0000000000015574 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   15574:	55                   	push   %rbp
   15575:	48 89 e5             	mov    %rsp,%rbp
   15578:	48 83 ec 20          	sub    $0x20,%rsp
   1557c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   15580:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15584:	48 8d 50 08          	lea    0x8(%rax),%rdx
   15588:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1558c:	48 89 d6             	mov    %rdx,%rsi
   1558f:	48 89 c7             	mov    %rax,%rdi
   15592:	e8 4f 2f 00 00       	call   184e6 <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   15597:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1559b:	c9                   	leave
   1559c:	c3                   	ret

000000000001559d <_ZN9__gnu_cxxneIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   1559d:	55                   	push   %rbp
   1559e:	48 89 e5             	mov    %rsp,%rbp
   155a1:	53                   	push   %rbx
   155a2:	48 83 ec 18          	sub    $0x18,%rsp
   155a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   155aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   155ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155b2:	48 89 c7             	mov    %rax,%rdi
   155b5:	e8 4a 2f 00 00       	call   18504 <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>
   155ba:	48 8b 18             	mov    (%rax),%rbx
   155bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   155c1:	48 89 c7             	mov    %rax,%rdi
   155c4:	e8 3b 2f 00 00       	call   18504 <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>
   155c9:	48 8b 00             	mov    (%rax),%rax
   155cc:	48 39 c3             	cmp    %rax,%rbx
   155cf:	0f 95 c0             	setne  %al
   155d2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   155d6:	c9                   	leave
   155d7:	c3                   	ret

00000000000155d8 <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   155d8:	55                   	push   %rbp
   155d9:	48 89 e5             	mov    %rsp,%rbp
   155dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   155e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155e4:	48 8b 00             	mov    (%rax),%rax
   155e7:	48 8d 50 08          	lea    0x8(%rax),%rdx
   155eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155ef:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   155f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   155f6:	5d                   	pop    %rbp
   155f7:	c3                   	ret

00000000000155f8 <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   155f8:	55                   	push   %rbp
   155f9:	48 89 e5             	mov    %rsp,%rbp
   155fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   15600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15604:	48 8b 00             	mov    (%rax),%rax
   15607:	5d                   	pop    %rbp
   15608:	c3                   	ret
   15609:	90                   	nop

000000000001560a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1560a:	55                   	push   %rbp
   1560b:	48 89 e5             	mov    %rsp,%rbp
   1560e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15612:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   15616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1561a:	48 8b 00             	mov    (%rax),%rax
   1561d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15621:	48 c1 e2 03          	shl    $0x3,%rdx
   15625:	48 01 d0             	add    %rdx,%rax
      }
   15628:	5d                   	pop    %rbp
   15629:	c3                   	ret

000000000001562a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1562a:	55                   	push   %rbp
   1562b:	48 89 e5             	mov    %rsp,%rbp
   1562e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15632:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   15636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1563a:	48 8b 00             	mov    (%rax),%rax
   1563d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15641:	48 c1 e2 03          	shl    $0x3,%rdx
   15645:	48 01 d0             	add    %rdx,%rax
      }
   15648:	5d                   	pop    %rbp
   15649:	c3                   	ret

000000000001564a <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   1564a:	55                   	push   %rbp
   1564b:	48 89 e5             	mov    %rsp,%rbp
   1564e:	48 83 ec 20          	sub    $0x20,%rsp
   15652:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15656:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	constexpr bool __move_storage =
   1565a:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
   1565e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15662:	48 89 c7             	mov    %rax,%rdi
   15665:	e8 a8 2e 00 00       	call   18512 <_ZSt4moveIRSt6vectorIP17VkCommandBuffer_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
   1566a:	48 89 c2             	mov    %rax,%rdx
   1566d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15671:	48 89 d6             	mov    %rdx,%rsi
   15674:	48 89 c7             	mov    %rax,%rdi
   15677:	e8 a4 2e 00 00       	call   18520 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
   1567c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   15680:	c9                   	leave
   15681:	c3                   	ret

0000000000015682 <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   15682:	55                   	push   %rbp
   15683:	48 89 e5             	mov    %rsp,%rbp
   15686:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1568a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1568e:	48 8b 50 08          	mov    0x8(%rax),%rdx
   15692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15696:	48 8b 00             	mov    (%rax),%rax
   15699:	48 29 c2             	sub    %rax,%rdx
   1569c:	48 89 d0             	mov    %rdx,%rax
   1569f:	48 d1 f8             	sar    %rax
   156a2:	5d                   	pop    %rbp
   156a3:	c3                   	ret

00000000000156a4 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   156a4:	55                   	push   %rbp
   156a5:	48 89 e5             	mov    %rsp,%rbp
   156a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   156ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156b0:	48 8b 50 08          	mov    0x8(%rax),%rdx
   156b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156b8:	48 8b 00             	mov    (%rax),%rax
   156bb:	48 29 c2             	sub    %rax,%rdx
   156be:	48 c1 fa 02          	sar    $0x2,%rdx
   156c2:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
   156c9:	cc cc cc 
   156cc:	48 0f af c2          	imul   %rdx,%rax
   156d0:	5d                   	pop    %rbp
   156d1:	c3                   	ret

00000000000156d2 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   156d2:	55                   	push   %rbp
   156d3:	48 89 e5             	mov    %rsp,%rbp
   156d6:	48 83 ec 10          	sub    $0x10,%rsp
   156da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   156de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156e2:	48 8b 10             	mov    (%rax),%rdx
   156e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156e9:	48 89 d6             	mov    %rdx,%rsi
   156ec:	48 89 c7             	mov    %rax,%rdi
   156ef:	e8 ce 2e 00 00       	call   185c2 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_data_ptrIS4_EEPT_S9_>
   156f4:	c9                   	leave
   156f5:	c3                   	ret

00000000000156f6 <_ZNKSt6vectorItSaItEE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   156f6:	55                   	push   %rbp
   156f7:	48 89 e5             	mov    %rsp,%rbp
   156fa:	48 83 ec 10          	sub    $0x10,%rsp
   156fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   15702:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15706:	48 8b 10             	mov    (%rax),%rdx
   15709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1570d:	48 89 d6             	mov    %rdx,%rsi
   15710:	48 89 c7             	mov    %rax,%rdi
   15713:	e8 bc 2e 00 00       	call   185d4 <_ZNKSt6vectorItSaItEE11_M_data_ptrItEEPT_S4_>
   15718:	c9                   	leave
   15719:	c3                   	ret

000000000001571a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   1571a:	55                   	push   %rbp
   1571b:	48 89 e5             	mov    %rsp,%rbp
   1571e:	48 83 ec 10          	sub    $0x10,%rsp
   15722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15726:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   1572a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1572e:	48 89 c7             	mov    %rax,%rdi
   15731:	e8 b0 2e 00 00       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   15736:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1573a:	0f 92 c0             	setb   %al
   1573d:	84 c0                	test   %al,%al
   1573f:	74 24                	je     15765 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   15741:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15745:	48 89 c7             	mov    %rax,%rdi
   15748:	e8 99 2e 00 00       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   1574d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15751:	48 29 c2             	sub    %rax,%rdx
   15754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15758:	48 89 d6             	mov    %rdx,%rsi
   1575b:	48 89 c7             	mov    %rax,%rdi
   1575e:	e8 a7 2e 00 00       	call   1860a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm>
      }
   15763:	eb 38                	jmp    1579d <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   15765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15769:	48 89 c7             	mov    %rax,%rdi
   1576c:	e8 75 2e 00 00       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   15771:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   15775:	0f 92 c0             	setb   %al
   15778:	84 c0                	test   %al,%al
   1577a:	74 21                	je     1579d <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1577c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15780:	48 8b 00             	mov    (%rax),%rax
   15783:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   15787:	48 c1 e2 03          	shl    $0x3,%rdx
   1578b:	48 01 c2             	add    %rax,%rdx
   1578e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15792:	48 89 d6             	mov    %rdx,%rsi
   15795:	48 89 c7             	mov    %rax,%rdi
   15798:	e8 77 30 00 00       	call   18814 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   1579d:	90                   	nop
   1579e:	c9                   	leave
   1579f:	c3                   	ret

00000000000157a0 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   157a0:	55                   	push   %rbp
   157a1:	48 89 e5             	mov    %rsp,%rbp
   157a4:	48 83 ec 10          	sub    $0x10,%rsp
   157a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   157ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   157b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157b4:	48 89 c7             	mov    %rax,%rdi
   157b7:	e8 b8 30 00 00       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   157bc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   157c0:	0f 92 c0             	setb   %al
   157c3:	84 c0                	test   %al,%al
   157c5:	74 24                	je     157eb <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   157c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157cb:	48 89 c7             	mov    %rax,%rdi
   157ce:	e8 a1 30 00 00       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   157d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   157d7:	48 29 c2             	sub    %rax,%rdx
   157da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157de:	48 89 d6             	mov    %rdx,%rsi
   157e1:	48 89 c7             	mov    %rax,%rdi
   157e4:	e8 af 30 00 00       	call   18898 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm>
      }
   157e9:	eb 38                	jmp    15823 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   157eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157ef:	48 89 c7             	mov    %rax,%rdi
   157f2:	e8 7d 30 00 00       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   157f7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   157fb:	0f 92 c0             	setb   %al
   157fe:	84 c0                	test   %al,%al
   15800:	74 21                	je     15823 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   15802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15806:	48 8b 00             	mov    (%rax),%rax
   15809:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1580d:	48 c1 e2 03          	shl    $0x3,%rdx
   15811:	48 01 c2             	add    %rax,%rdx
   15814:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15818:	48 89 d6             	mov    %rdx,%rsi
   1581b:	48 89 c7             	mov    %rax,%rdi
   1581e:	e8 7f 32 00 00       	call   18aa2 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   15823:	90                   	nop
   15824:	c9                   	leave
   15825:	c3                   	ret

0000000000015826 <_ZNSt6chrono8durationIfSt5ratioILl1ELl1EEEC1IlS1_ILl1ELl1000000000EEvEERKNS0_IT_T0_EE>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
   15826:	55                   	push   %rbp
   15827:	48 89 e5             	mov    %rsp,%rbp
   1582a:	48 83 ec 20          	sub    $0x20,%rsp
   1582e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15832:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  : __r(duration_cast<duration>(__d).count()) { }
   15836:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1583a:	48 89 c7             	mov    %rax,%rdi
   1583d:	e8 c0 32 00 00       	call   18b02 <_ZNSt6chrono13duration_castINS_8durationIfSt5ratioILl1ELl1EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>
   15842:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   15847:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   1584b:	48 89 c7             	mov    %rax,%rdi
   1584e:	e8 0d 00 00 00       	call   15860 <_ZNKSt6chrono8durationIfSt5ratioILl1ELl1EEE5countEv>
   15853:	66 0f 7e c0          	movd   %xmm0,%eax
   15857:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1585b:	89 02                	mov    %eax,(%rdx)
   1585d:	90                   	nop
   1585e:	c9                   	leave
   1585f:	c3                   	ret

0000000000015860 <_ZNKSt6chrono8durationIfSt5ratioILl1ELl1EEE5countEv>:
	count() const
   15860:	55                   	push   %rbp
   15861:	48 89 e5             	mov    %rsp,%rbp
   15864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __r; }
   15868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1586c:	f3 0f 10 00          	movss  (%rax),%xmm0
   15870:	5d                   	pop    %rbp
   15871:	c3                   	ret

0000000000015872 <_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_>:
      operator-(const duration<_Rep1, _Period1>& __lhs,
   15872:	55                   	push   %rbp
   15873:	48 89 e5             	mov    %rsp,%rbp
   15876:	53                   	push   %rbx
   15877:	48 83 ec 38          	sub    $0x38,%rsp
   1587b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1587f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
   15883:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   15887:	48 8b 00             	mov    (%rax),%rax
   1588a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1588e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   15892:	48 89 c7             	mov    %rax,%rdi
   15895:	e8 f6 e5 ff ff       	call   13e90 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   1589a:	48 89 c3             	mov    %rax,%rbx
   1589d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   158a1:	48 8b 00             	mov    (%rax),%rax
   158a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   158a8:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   158ac:	48 89 c7             	mov    %rax,%rdi
   158af:	e8 dc e5 ff ff       	call   13e90 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   158b4:	48 29 c3             	sub    %rax,%rbx
   158b7:	48 89 da             	mov    %rbx,%rdx
   158ba:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   158be:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   158c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   158c6:	48 89 d6             	mov    %rdx,%rsi
   158c9:	48 89 c7             	mov    %rax,%rdi
   158cc:	e8 a1 e5 ff ff       	call   13e72 <_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_>
   158d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
      }
   158d5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   158d9:	c9                   	leave
   158da:	c3                   	ret
   158db:	90                   	nop

00000000000158dc <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC1ERKf>:
			this->value[3] = m[3];
#		endif
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(T const& s)
   158dc:	55                   	push   %rbp
   158dd:	48 89 e5             	mov    %rsp,%rbp
   158e0:	48 83 ec 10          	sub    $0x10,%rsp
   158e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   158e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#		if GLM_HAS_INITIALIZER_LISTS
			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0), col_type(0, 0, s, 0), col_type(0, 0, 0, s)}
   158ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   158f4:	8b 3a                	mov    (%rdx),%edi
   158f6:	b9 00 00 00 00       	mov    $0x0,%ecx
   158fb:	ba 00 00 00 00       	mov    $0x0,%edx
   15900:	be 00 00 00 00       	mov    $0x0,%esi
   15905:	66 0f 6e c7          	movd   %edi,%xmm0
   15909:	48 89 c7             	mov    %rax,%rdi
   1590c:	e8 0b 32 00 00       	call   18b1c <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IfiiiEET_T0_T1_T2_>
   15911:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15915:	48 8d 78 10          	lea    0x10(%rax),%rdi
   15919:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1591d:	8b 00                	mov    (%rax),%eax
   1591f:	b9 00 00 00 00       	mov    $0x0,%ecx
   15924:	ba 00 00 00 00       	mov    $0x0,%edx
   15929:	66 0f 6e c0          	movd   %eax,%xmm0
   1592d:	be 00 00 00 00       	mov    $0x0,%esi
   15932:	e8 41 32 00 00       	call   18b78 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IifiiEET_T0_T1_T2_>
   15937:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1593b:	48 8d 78 20          	lea    0x20(%rax),%rdi
   1593f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15943:	8b 00                	mov    (%rax),%eax
   15945:	b9 00 00 00 00       	mov    $0x0,%ecx
   1594a:	66 0f 6e c0          	movd   %eax,%xmm0
   1594e:	ba 00 00 00 00       	mov    $0x0,%edx
   15953:	be 00 00 00 00       	mov    $0x0,%esi
   15958:	e8 77 32 00 00       	call   18bd4 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IiifiEET_T0_T1_T2_>
   1595d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15961:	48 8d 78 30          	lea    0x30(%rax),%rdi
   15965:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15969:	8b 00                	mov    (%rax),%eax
   1596b:	66 0f 6e c0          	movd   %eax,%xmm0
   1596f:	b9 00 00 00 00       	mov    $0x0,%ecx
   15974:	ba 00 00 00 00       	mov    $0x0,%edx
   15979:	be 00 00 00 00       	mov    $0x0,%esi
   1597e:	e8 ad 32 00 00       	call   18c30 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IiiifEET_T0_T1_T2_>
			this->value[0] = col_type(s, 0, 0, 0);
			this->value[1] = col_type(0, s, 0, 0);
			this->value[2] = col_type(0, 0, s, 0);
			this->value[3] = col_type(0, 0, 0, s);
#		endif
	}
   15983:	90                   	nop
   15984:	c9                   	leave
   15985:	c3                   	ret

0000000000015986 <_ZN3glm7radiansIfEET_S1_>:

namespace glm
{
	// radians
	template<typename genType>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType radians(genType degrees)
   15986:	55                   	push   %rbp
   15987:	48 89 e5             	mov    %rsp,%rbp
   1598a:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
	{
		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");

		return degrees * static_cast<genType>(0.01745329251994329576923690768489);
   1598f:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
   15994:	f3 0f 10 05 64 e1 00 	movss  0xe164(%rip),%xmm0        # 23b00 <_ZZN9VulkanApp6renderEvE11submitCount+0x808>
   1599b:	00 
   1599c:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
	}
   159a0:	5d                   	pop    %rbp
   159a1:	c3                   	ret

00000000000159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>:
	{}

	// -- Component accesses --

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_type i)
   159a2:	55                   	push   %rbp
   159a3:	48 89 e5             	mov    %rsp,%rbp
   159a6:	48 83 ec 10          	sub    $0x10,%rsp
   159aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   159ae:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		assert(i >= 0 && i < this->length());
   159b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   159b5:	78 0a                	js     159c1 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x1f>
   159b7:	e8 53 00 00 00       	call   15a0f <_ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv>
   159bc:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   159bf:	7c 28                	jl     159e9 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x47>
   159c1:	48 8d 05 f0 db 00 00 	lea    0xdbf0(%rip),%rax        # 235b8 <_ZZN9VulkanApp6renderEvE11submitCount+0x2c0>
   159c8:	48 89 c1             	mov    %rax,%rcx
   159cb:	ba aa 00 00 00       	mov    $0xaa,%edx
   159d0:	48 8d 05 69 dc 00 00 	lea    0xdc69(%rip),%rax        # 23640 <_ZZN9VulkanApp6renderEvE11submitCount+0x348>
   159d7:	48 89 c6             	mov    %rax,%rsi
   159da:	48 8d 05 85 dc 00 00 	lea    0xdc85(%rip),%rax        # 23666 <_ZZN9VulkanApp6renderEvE11submitCount+0x36e>
   159e1:	48 89 c7             	mov    %rax,%rdi
   159e4:	e8 c7 e8 fe ff       	call   42b0 <__assert_fail@plt>
		switch(i)
   159e9:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   159ed:	74 0c                	je     159fb <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x59>
   159ef:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
   159f3:	74 10                	je     15a05 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x63>
		{
		default:
			case 0:
		return x;
   159f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159f9:	eb 12                	jmp    15a0d <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x6b>
			case 1:
		return y;
   159fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159ff:	48 83 c0 04          	add    $0x4,%rax
   15a03:	eb 08                	jmp    15a0d <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi+0x6b>
			case 2:
		return z;
   15a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a09:	48 83 c0 08          	add    $0x8,%rax
		}
	}
   15a0d:	c9                   	leave
   15a0e:	c3                   	ret

0000000000015a0f <_ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv>:

		// -- Component accesses --

		/// Return the count of components of the vector
		typedef length_t length_type;
		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 3;}
   15a0f:	55                   	push   %rbp
   15a10:	48 89 e5             	mov    %rsp,%rbp
   15a13:	b8 03 00 00 00       	mov    $0x3,%eax
   15a18:	5d                   	pop    %rbp
   15a19:	c3                   	ret

0000000000015a1a <_ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE>:
		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
		return Result;
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& v)
   15a1a:	55                   	push   %rbp
   15a1b:	48 89 e5             	mov    %rsp,%rbp
   15a1e:	41 55                	push   %r13
   15a20:	41 54                	push   %r12
   15a22:	53                   	push   %rbx
   15a23:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
   15a2a:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
   15a31:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
   15a38:	f3 0f 11 85 9c fe ff 	movss  %xmm0,-0x164(%rbp)
   15a3f:	ff 
   15a40:	48 89 95 90 fe ff ff 	mov    %rdx,-0x170(%rbp)
	{
		T const a = angle;
   15a47:	f3 0f 10 85 9c fe ff 	movss  -0x164(%rbp),%xmm0
   15a4e:	ff 
   15a4f:	f3 0f 11 45 dc       	movss  %xmm0,-0x24(%rbp)
		T const c = cos(a);
   15a54:	8b 45 dc             	mov    -0x24(%rbp),%eax
   15a57:	66 0f 6e c0          	movd   %eax,%xmm0
   15a5b:	e8 54 e3 ff ff       	call   13db4 <_ZSt3cosf>
   15a60:	66 0f 7e c0          	movd   %xmm0,%eax
   15a64:	89 45 d8             	mov    %eax,-0x28(%rbp)
		T const s = sin(a);
   15a67:	8b 45 dc             	mov    -0x24(%rbp),%eax
   15a6a:	66 0f 6e c0          	movd   %eax,%xmm0
   15a6e:	e8 5c e3 ff ff       	call   13dcf <_ZSt3sinf>
   15a73:	66 0f 7e c0          	movd   %xmm0,%eax
   15a77:	89 45 d4             	mov    %eax,-0x2c(%rbp)

		vec<3, T, Q> axis(normalize(v));
   15a7a:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
   15a81:	48 89 c7             	mov    %rax,%rdi
   15a84:	e8 03 32 00 00       	call   18c8c <_ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_>
   15a89:	66 48 0f 7e c0       	movq   %xmm0,%rax
   15a8e:	0f 28 c1             	movaps %xmm1,%xmm0
   15a91:	48 89 85 04 ff ff ff 	mov    %rax,-0xfc(%rbp)
   15a98:	f3 0f 11 85 0c ff ff 	movss  %xmm0,-0xf4(%rbp)
   15a9f:	ff 
		vec<3, T, Q> temp((T(1) - c) * axis);
   15aa0:	f3 0f 10 05 24 e0 00 	movss  0xe024(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   15aa7:	00 
   15aa8:	f3 0f 5c 45 d8       	subss  -0x28(%rbp),%xmm0
   15aad:	66 0f 7e c0          	movd   %xmm0,%eax
   15ab1:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
   15ab8:	48 89 d7             	mov    %rdx,%rdi
   15abb:	66 0f 6e c0          	movd   %eax,%xmm0
   15abf:	e8 04 32 00 00       	call   18cc8 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEES3_RKS4_>
   15ac4:	66 48 0f 7e c0       	movq   %xmm0,%rax
   15ac9:	0f 28 c1             	movaps %xmm1,%xmm0
   15acc:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
   15ad3:	f3 0f 11 85 00 ff ff 	movss  %xmm0,-0x100(%rbp)
   15ada:	ff 

		mat<4, 4, T, Q> Rotate;
		Rotate[0][0] = c + temp[0] * axis[0];
   15adb:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15ae2:	be 00 00 00 00       	mov    $0x0,%esi
   15ae7:	48 89 c7             	mov    %rax,%rdi
   15aea:	e8 b3 fe ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15aef:	f3 0f 10 38          	movss  (%rax),%xmm7
   15af3:	f3 0f 11 bd 98 fe ff 	movss  %xmm7,-0x168(%rbp)
   15afa:	ff 
   15afb:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15b02:	be 00 00 00 00       	mov    $0x0,%esi
   15b07:	48 89 c7             	mov    %rax,%rdi
   15b0a:	e8 93 fe ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15b0f:	f3 0f 10 00          	movss  (%rax),%xmm0
   15b13:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15b1a:	ff 
   15b1b:	f3 0f 58 45 d8       	addss  -0x28(%rbp),%xmm0
   15b20:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15b27:	ff 
   15b28:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15b2f:	be 00 00 00 00       	mov    $0x0,%esi
   15b34:	48 89 c7             	mov    %rax,%rdi
   15b37:	e8 3a 0a 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15b3c:	be 00 00 00 00       	mov    $0x0,%esi
   15b41:	48 89 c7             	mov    %rax,%rdi
   15b44:	e8 83 0a 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15b49:	f3 0f 10 85 98 fe ff 	movss  -0x168(%rbp),%xmm0
   15b50:	ff 
   15b51:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
   15b55:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15b5c:	be 00 00 00 00       	mov    $0x0,%esi
   15b61:	48 89 c7             	mov    %rax,%rdi
   15b64:	e8 39 fe ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15b69:	f3 0f 10 18          	movss  (%rax),%xmm3
   15b6d:	f3 0f 11 9d 98 fe ff 	movss  %xmm3,-0x168(%rbp)
   15b74:	ff 
   15b75:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15b7c:	be 01 00 00 00       	mov    $0x1,%esi
   15b81:	48 89 c7             	mov    %rax,%rdi
   15b84:	e8 19 fe ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15b89:	f3 0f 10 00          	movss  (%rax),%xmm0
   15b8d:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15b94:	ff 
   15b95:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15b9c:	ff 
   15b9d:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15ba4:	be 02 00 00 00       	mov    $0x2,%esi
   15ba9:	48 89 c7             	mov    %rax,%rdi
   15bac:	e8 f1 fd ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15bb1:	f3 0f 10 00          	movss  (%rax),%xmm0
   15bb5:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15bba:	0f 28 f0             	movaps %xmm0,%xmm6
   15bbd:	f3 0f 58 b5 98 fe ff 	addss  -0x168(%rbp),%xmm6
   15bc4:	ff 
   15bc5:	f3 0f 11 b5 98 fe ff 	movss  %xmm6,-0x168(%rbp)
   15bcc:	ff 
   15bcd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15bd4:	be 00 00 00 00       	mov    $0x0,%esi
   15bd9:	48 89 c7             	mov    %rax,%rdi
   15bdc:	e8 95 09 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15be1:	be 01 00 00 00       	mov    $0x1,%esi
   15be6:	48 89 c7             	mov    %rax,%rdi
   15be9:	e8 de 09 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15bee:	f3 0f 10 b5 98 fe ff 	movss  -0x168(%rbp),%xmm6
   15bf5:	ff 
   15bf6:	f3 0f 11 30          	movss  %xmm6,(%rax)
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
   15bfa:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15c01:	be 00 00 00 00       	mov    $0x0,%esi
   15c06:	48 89 c7             	mov    %rax,%rdi
   15c09:	e8 94 fd ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15c0e:	f3 0f 10 20          	movss  (%rax),%xmm4
   15c12:	f3 0f 11 a5 98 fe ff 	movss  %xmm4,-0x168(%rbp)
   15c19:	ff 
   15c1a:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15c21:	be 02 00 00 00       	mov    $0x2,%esi
   15c26:	48 89 c7             	mov    %rax,%rdi
   15c29:	e8 74 fd ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15c2e:	f3 0f 10 00          	movss  (%rax),%xmm0
   15c32:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15c39:	ff 
   15c3a:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15c41:	ff 
   15c42:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15c49:	be 01 00 00 00       	mov    $0x1,%esi
   15c4e:	48 89 c7             	mov    %rax,%rdi
   15c51:	e8 4c fd ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15c56:	f3 0f 10 00          	movss  (%rax),%xmm0
   15c5a:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15c5f:	f3 0f 10 95 98 fe ff 	movss  -0x168(%rbp),%xmm2
   15c66:	ff 
   15c67:	f3 0f 5c d0          	subss  %xmm0,%xmm2
   15c6b:	f3 0f 11 95 98 fe ff 	movss  %xmm2,-0x168(%rbp)
   15c72:	ff 
   15c73:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15c7a:	be 00 00 00 00       	mov    $0x0,%esi
   15c7f:	48 89 c7             	mov    %rax,%rdi
   15c82:	e8 ef 08 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15c87:	be 02 00 00 00       	mov    $0x2,%esi
   15c8c:	48 89 c7             	mov    %rax,%rdi
   15c8f:	e8 38 09 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15c94:	f3 0f 10 95 98 fe ff 	movss  -0x168(%rbp),%xmm2
   15c9b:	ff 
   15c9c:	f3 0f 11 10          	movss  %xmm2,(%rax)

		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
   15ca0:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15ca7:	be 01 00 00 00       	mov    $0x1,%esi
   15cac:	48 89 c7             	mov    %rax,%rdi
   15caf:	e8 ee fc ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15cb4:	f3 0f 10 30          	movss  (%rax),%xmm6
   15cb8:	f3 0f 11 b5 98 fe ff 	movss  %xmm6,-0x168(%rbp)
   15cbf:	ff 
   15cc0:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15cc7:	be 00 00 00 00       	mov    $0x0,%esi
   15ccc:	48 89 c7             	mov    %rax,%rdi
   15ccf:	e8 ce fc ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15cd4:	f3 0f 10 00          	movss  (%rax),%xmm0
   15cd8:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15cdf:	ff 
   15ce0:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15ce7:	ff 
   15ce8:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15cef:	be 02 00 00 00       	mov    $0x2,%esi
   15cf4:	48 89 c7             	mov    %rax,%rdi
   15cf7:	e8 a6 fc ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15cfc:	f3 0f 10 00          	movss  (%rax),%xmm0
   15d00:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15d05:	f3 0f 10 9d 98 fe ff 	movss  -0x168(%rbp),%xmm3
   15d0c:	ff 
   15d0d:	f3 0f 5c d8          	subss  %xmm0,%xmm3
   15d11:	f3 0f 11 9d 98 fe ff 	movss  %xmm3,-0x168(%rbp)
   15d18:	ff 
   15d19:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15d20:	be 01 00 00 00       	mov    $0x1,%esi
   15d25:	48 89 c7             	mov    %rax,%rdi
   15d28:	e8 49 08 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15d2d:	be 00 00 00 00       	mov    $0x0,%esi
   15d32:	48 89 c7             	mov    %rax,%rdi
   15d35:	e8 92 08 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15d3a:	f3 0f 10 9d 98 fe ff 	movss  -0x168(%rbp),%xmm3
   15d41:	ff 
   15d42:	f3 0f 11 18          	movss  %xmm3,(%rax)
		Rotate[1][1] = c + temp[1] * axis[1];
   15d46:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15d4d:	be 01 00 00 00       	mov    $0x1,%esi
   15d52:	48 89 c7             	mov    %rax,%rdi
   15d55:	e8 48 fc ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15d5a:	f3 0f 10 28          	movss  (%rax),%xmm5
   15d5e:	f3 0f 11 ad 98 fe ff 	movss  %xmm5,-0x168(%rbp)
   15d65:	ff 
   15d66:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15d6d:	be 01 00 00 00       	mov    $0x1,%esi
   15d72:	48 89 c7             	mov    %rax,%rdi
   15d75:	e8 28 fc ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15d7a:	f3 0f 10 00          	movss  (%rax),%xmm0
   15d7e:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15d85:	ff 
   15d86:	f3 0f 58 45 d8       	addss  -0x28(%rbp),%xmm0
   15d8b:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15d92:	ff 
   15d93:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15d9a:	be 01 00 00 00       	mov    $0x1,%esi
   15d9f:	48 89 c7             	mov    %rax,%rdi
   15da2:	e8 cf 07 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15da7:	be 01 00 00 00       	mov    $0x1,%esi
   15dac:	48 89 c7             	mov    %rax,%rdi
   15daf:	e8 18 08 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15db4:	f3 0f 10 85 98 fe ff 	movss  -0x168(%rbp),%xmm0
   15dbb:	ff 
   15dbc:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];
   15dc0:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15dc7:	be 01 00 00 00       	mov    $0x1,%esi
   15dcc:	48 89 c7             	mov    %rax,%rdi
   15dcf:	e8 ce fb ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15dd4:	f3 0f 10 38          	movss  (%rax),%xmm7
   15dd8:	f3 0f 11 bd 98 fe ff 	movss  %xmm7,-0x168(%rbp)
   15ddf:	ff 
   15de0:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15de7:	be 02 00 00 00       	mov    $0x2,%esi
   15dec:	48 89 c7             	mov    %rax,%rdi
   15def:	e8 ae fb ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15df4:	f3 0f 10 00          	movss  (%rax),%xmm0
   15df8:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15dff:	ff 
   15e00:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15e07:	ff 
   15e08:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15e0f:	be 00 00 00 00       	mov    $0x0,%esi
   15e14:	48 89 c7             	mov    %rax,%rdi
   15e17:	e8 86 fb ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15e1c:	f3 0f 10 00          	movss  (%rax),%xmm0
   15e20:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15e25:	0f 28 e8             	movaps %xmm0,%xmm5
   15e28:	f3 0f 58 ad 98 fe ff 	addss  -0x168(%rbp),%xmm5
   15e2f:	ff 
   15e30:	f3 0f 11 ad 98 fe ff 	movss  %xmm5,-0x168(%rbp)
   15e37:	ff 
   15e38:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15e3f:	be 01 00 00 00       	mov    $0x1,%esi
   15e44:	48 89 c7             	mov    %rax,%rdi
   15e47:	e8 2a 07 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15e4c:	be 02 00 00 00       	mov    $0x2,%esi
   15e51:	48 89 c7             	mov    %rax,%rdi
   15e54:	e8 73 07 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15e59:	f3 0f 10 ad 98 fe ff 	movss  -0x168(%rbp),%xmm5
   15e60:	ff 
   15e61:	f3 0f 11 28          	movss  %xmm5,(%rax)

		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
   15e65:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15e6c:	be 02 00 00 00       	mov    $0x2,%esi
   15e71:	48 89 c7             	mov    %rax,%rdi
   15e74:	e8 29 fb ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15e79:	f3 0f 10 18          	movss  (%rax),%xmm3
   15e7d:	f3 0f 11 9d 98 fe ff 	movss  %xmm3,-0x168(%rbp)
   15e84:	ff 
   15e85:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15e8c:	be 00 00 00 00       	mov    $0x0,%esi
   15e91:	48 89 c7             	mov    %rax,%rdi
   15e94:	e8 09 fb ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15e99:	f3 0f 10 00          	movss  (%rax),%xmm0
   15e9d:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15ea4:	ff 
   15ea5:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15eac:	ff 
   15ead:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15eb4:	be 01 00 00 00       	mov    $0x1,%esi
   15eb9:	48 89 c7             	mov    %rax,%rdi
   15ebc:	e8 e1 fa ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15ec1:	f3 0f 10 00          	movss  (%rax),%xmm0
   15ec5:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15eca:	0f 28 d0             	movaps %xmm0,%xmm2
   15ecd:	f3 0f 58 95 98 fe ff 	addss  -0x168(%rbp),%xmm2
   15ed4:	ff 
   15ed5:	f3 0f 11 95 98 fe ff 	movss  %xmm2,-0x168(%rbp)
   15edc:	ff 
   15edd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15ee4:	be 02 00 00 00       	mov    $0x2,%esi
   15ee9:	48 89 c7             	mov    %rax,%rdi
   15eec:	e8 85 06 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15ef1:	be 00 00 00 00       	mov    $0x0,%esi
   15ef6:	48 89 c7             	mov    %rax,%rdi
   15ef9:	e8 ce 06 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15efe:	f3 0f 10 95 98 fe ff 	movss  -0x168(%rbp),%xmm2
   15f05:	ff 
   15f06:	f3 0f 11 10          	movss  %xmm2,(%rax)
		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
   15f0a:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15f11:	be 02 00 00 00       	mov    $0x2,%esi
   15f16:	48 89 c7             	mov    %rax,%rdi
   15f19:	e8 84 fa ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15f1e:	f3 0f 10 20          	movss  (%rax),%xmm4
   15f22:	f3 0f 11 a5 98 fe ff 	movss  %xmm4,-0x168(%rbp)
   15f29:	ff 
   15f2a:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15f31:	be 01 00 00 00       	mov    $0x1,%esi
   15f36:	48 89 c7             	mov    %rax,%rdi
   15f39:	e8 64 fa ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15f3e:	f3 0f 10 00          	movss  (%rax),%xmm0
   15f42:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15f49:	ff 
   15f4a:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15f51:	ff 
   15f52:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15f59:	be 00 00 00 00       	mov    $0x0,%esi
   15f5e:	48 89 c7             	mov    %rax,%rdi
   15f61:	e8 3c fa ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15f66:	f3 0f 10 00          	movss  (%rax),%xmm0
   15f6a:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   15f6f:	f3 0f 10 a5 98 fe ff 	movss  -0x168(%rbp),%xmm4
   15f76:	ff 
   15f77:	f3 0f 5c e0          	subss  %xmm0,%xmm4
   15f7b:	f3 0f 11 a5 98 fe ff 	movss  %xmm4,-0x168(%rbp)
   15f82:	ff 
   15f83:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   15f8a:	be 02 00 00 00       	mov    $0x2,%esi
   15f8f:	48 89 c7             	mov    %rax,%rdi
   15f92:	e8 df 05 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   15f97:	be 01 00 00 00       	mov    $0x1,%esi
   15f9c:	48 89 c7             	mov    %rax,%rdi
   15f9f:	e8 28 06 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   15fa4:	f3 0f 10 a5 98 fe ff 	movss  -0x168(%rbp),%xmm4
   15fab:	ff 
   15fac:	f3 0f 11 20          	movss  %xmm4,(%rax)
		Rotate[2][2] = c + temp[2] * axis[2];
   15fb0:	48 8d 85 f8 fe ff ff 	lea    -0x108(%rbp),%rax
   15fb7:	be 02 00 00 00       	mov    $0x2,%esi
   15fbc:	48 89 c7             	mov    %rax,%rdi
   15fbf:	e8 de f9 ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15fc4:	f3 0f 10 30          	movss  (%rax),%xmm6
   15fc8:	f3 0f 11 b5 98 fe ff 	movss  %xmm6,-0x168(%rbp)
   15fcf:	ff 
   15fd0:	48 8d 85 04 ff ff ff 	lea    -0xfc(%rbp),%rax
   15fd7:	be 02 00 00 00       	mov    $0x2,%esi
   15fdc:	48 89 c7             	mov    %rax,%rdi
   15fdf:	e8 be f9 ff ff       	call   159a2 <_ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi>
   15fe4:	f3 0f 10 00          	movss  (%rax),%xmm0
   15fe8:	f3 0f 59 85 98 fe ff 	mulss  -0x168(%rbp),%xmm0
   15fef:	ff 
   15ff0:	f3 0f 58 45 d8       	addss  -0x28(%rbp),%xmm0
   15ff5:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
   15ffc:	ff 
   15ffd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   16004:	be 02 00 00 00       	mov    $0x2,%esi
   16009:	48 89 c7             	mov    %rax,%rdi
   1600c:	e8 65 05 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16011:	be 02 00 00 00       	mov    $0x2,%esi
   16016:	48 89 c7             	mov    %rax,%rdi
   16019:	e8 ae 05 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1601e:	f3 0f 10 85 98 fe ff 	movss  -0x168(%rbp),%xmm0
   16025:	ff 
   16026:	f3 0f 11 00          	movss  %xmm0,(%rax)

		mat<4, 4, T, Q> Result;
		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];
   1602a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   16031:	be 00 00 00 00       	mov    $0x0,%esi
   16036:	48 89 c7             	mov    %rax,%rdi
   16039:	e8 38 05 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1603e:	be 02 00 00 00       	mov    $0x2,%esi
   16043:	48 89 c7             	mov    %rax,%rdi
   16046:	e8 81 05 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1604b:	48 89 c3             	mov    %rax,%rbx
   1604e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   16055:	be 02 00 00 00       	mov    $0x2,%esi
   1605a:	48 89 c7             	mov    %rax,%rdi
   1605d:	e8 dc 2c 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16062:	48 89 de             	mov    %rbx,%rsi
   16065:	48 89 c7             	mov    %rax,%rdi
   16068:	e8 c8 e3 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   1606d:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16072:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16076:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
   1607d:	66 0f d6 85 18 ff ff 	movq   %xmm0,-0xe8(%rbp)
   16084:	ff 
   16085:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   1608c:	be 00 00 00 00       	mov    $0x0,%esi
   16091:	48 89 c7             	mov    %rax,%rdi
   16094:	e8 dd 04 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16099:	be 01 00 00 00       	mov    $0x1,%esi
   1609e:	48 89 c7             	mov    %rax,%rdi
   160a1:	e8 26 05 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   160a6:	48 89 c3             	mov    %rax,%rbx
   160a9:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   160b0:	be 01 00 00 00       	mov    $0x1,%esi
   160b5:	48 89 c7             	mov    %rax,%rdi
   160b8:	e8 81 2c 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   160bd:	48 89 de             	mov    %rbx,%rsi
   160c0:	48 89 c7             	mov    %rax,%rdi
   160c3:	e8 6d e3 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   160c8:	66 48 0f 7e c0       	movq   %xmm0,%rax
   160cd:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   160d1:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   160d8:	66 0f d6 85 38 ff ff 	movq   %xmm0,-0xc8(%rbp)
   160df:	ff 
   160e0:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   160e7:	be 00 00 00 00       	mov    $0x0,%esi
   160ec:	48 89 c7             	mov    %rax,%rdi
   160ef:	e8 82 04 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   160f4:	be 00 00 00 00       	mov    $0x0,%esi
   160f9:	48 89 c7             	mov    %rax,%rdi
   160fc:	e8 cb 04 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   16101:	48 89 c3             	mov    %rax,%rbx
   16104:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   1610b:	be 00 00 00 00       	mov    $0x0,%esi
   16110:	48 89 c7             	mov    %rax,%rdi
   16113:	e8 26 2c 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16118:	48 89 de             	mov    %rbx,%rsi
   1611b:	48 89 c7             	mov    %rax,%rdi
   1611e:	e8 12 e3 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   16123:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16128:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1612c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   16133:	66 0f d6 85 48 ff ff 	movq   %xmm0,-0xb8(%rbp)
   1613a:	ff 
   1613b:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
   16142:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   16149:	48 89 d6             	mov    %rdx,%rsi
   1614c:	48 89 c7             	mov    %rax,%rdi
   1614f:	e8 40 2c 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   16154:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16159:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1615d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
   16164:	66 0f d6 85 28 ff ff 	movq   %xmm0,-0xd8(%rbp)
   1616b:	ff 
   1616c:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   16173:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1617a:	48 89 d6             	mov    %rdx,%rsi
   1617d:	48 89 c7             	mov    %rax,%rdi
   16180:	e8 0f 2c 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   16185:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1618a:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1618e:	49 89 c4             	mov    %rax,%r12
   16191:	49 89 d5             	mov    %rdx,%r13
   16194:	66 49 0f 7e c5       	movq   %xmm0,%r13
   16199:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   161a0:	be 00 00 00 00       	mov    $0x0,%esi
   161a5:	48 89 c7             	mov    %rax,%rdi
   161a8:	e8 c9 03 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   161ad:	4c 89 20             	mov    %r12,(%rax)
   161b0:	4c 89 68 08          	mov    %r13,0x8(%rax)
		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];
   161b4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   161bb:	be 01 00 00 00       	mov    $0x1,%esi
   161c0:	48 89 c7             	mov    %rax,%rdi
   161c3:	e8 ae 03 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   161c8:	be 02 00 00 00       	mov    $0x2,%esi
   161cd:	48 89 c7             	mov    %rax,%rdi
   161d0:	e8 f7 03 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   161d5:	48 89 c3             	mov    %rax,%rbx
   161d8:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   161df:	be 02 00 00 00       	mov    $0x2,%esi
   161e4:	48 89 c7             	mov    %rax,%rdi
   161e7:	e8 52 2b 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   161ec:	48 89 de             	mov    %rbx,%rsi
   161ef:	48 89 c7             	mov    %rax,%rdi
   161f2:	e8 3e e2 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   161f7:	66 48 0f 7e c0       	movq   %xmm0,%rax
   161fc:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16200:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
   16207:	66 0f d6 85 58 ff ff 	movq   %xmm0,-0xa8(%rbp)
   1620e:	ff 
   1620f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   16216:	be 01 00 00 00       	mov    $0x1,%esi
   1621b:	48 89 c7             	mov    %rax,%rdi
   1621e:	e8 53 03 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16223:	be 01 00 00 00       	mov    $0x1,%esi
   16228:	48 89 c7             	mov    %rax,%rdi
   1622b:	e8 9c 03 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   16230:	48 89 c3             	mov    %rax,%rbx
   16233:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   1623a:	be 01 00 00 00       	mov    $0x1,%esi
   1623f:	48 89 c7             	mov    %rax,%rdi
   16242:	e8 f7 2a 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16247:	48 89 de             	mov    %rbx,%rsi
   1624a:	48 89 c7             	mov    %rax,%rdi
   1624d:	e8 e3 e1 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   16252:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16257:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1625b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   16262:	66 0f d6 85 78 ff ff 	movq   %xmm0,-0x88(%rbp)
   16269:	ff 
   1626a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   16271:	be 01 00 00 00       	mov    $0x1,%esi
   16276:	48 89 c7             	mov    %rax,%rdi
   16279:	e8 f8 02 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1627e:	be 00 00 00 00       	mov    $0x0,%esi
   16283:	48 89 c7             	mov    %rax,%rdi
   16286:	e8 41 03 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1628b:	48 89 c3             	mov    %rax,%rbx
   1628e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   16295:	be 00 00 00 00       	mov    $0x0,%esi
   1629a:	48 89 c7             	mov    %rax,%rdi
   1629d:	e8 9c 2a 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   162a2:	48 89 de             	mov    %rbx,%rsi
   162a5:	48 89 c7             	mov    %rax,%rdi
   162a8:	e8 88 e1 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   162ad:	66 48 0f 7e c0       	movq   %xmm0,%rax
   162b2:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   162b6:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   162ba:	66 0f d6 45 88       	movq   %xmm0,-0x78(%rbp)
   162bf:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
   162c6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   162ca:	48 89 d6             	mov    %rdx,%rsi
   162cd:	48 89 c7             	mov    %rax,%rdi
   162d0:	e8 bf 2a 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   162d5:	66 48 0f 7e c0       	movq   %xmm0,%rax
   162da:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   162de:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   162e5:	66 0f d6 85 68 ff ff 	movq   %xmm0,-0x98(%rbp)
   162ec:	ff 
   162ed:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
   162f4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   162fb:	48 89 d6             	mov    %rdx,%rsi
   162fe:	48 89 c7             	mov    %rax,%rdi
   16301:	e8 8e 2a 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   16306:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1630b:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1630f:	49 89 c4             	mov    %rax,%r12
   16312:	49 89 d5             	mov    %rdx,%r13
   16315:	66 49 0f 7e c5       	movq   %xmm0,%r13
   1631a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   16321:	be 01 00 00 00       	mov    $0x1,%esi
   16326:	48 89 c7             	mov    %rax,%rdi
   16329:	e8 48 02 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1632e:	4c 89 20             	mov    %r12,(%rax)
   16331:	4c 89 68 08          	mov    %r13,0x8(%rax)
		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];
   16335:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   1633c:	be 02 00 00 00       	mov    $0x2,%esi
   16341:	48 89 c7             	mov    %rax,%rdi
   16344:	e8 2d 02 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16349:	be 02 00 00 00       	mov    $0x2,%esi
   1634e:	48 89 c7             	mov    %rax,%rdi
   16351:	e8 76 02 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   16356:	48 89 c3             	mov    %rax,%rbx
   16359:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   16360:	be 02 00 00 00       	mov    $0x2,%esi
   16365:	48 89 c7             	mov    %rax,%rdi
   16368:	e8 d1 29 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1636d:	48 89 de             	mov    %rbx,%rsi
   16370:	48 89 c7             	mov    %rax,%rdi
   16373:	e8 bd e0 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   16378:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1637d:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16381:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   16385:	66 0f d6 45 98       	movq   %xmm0,-0x68(%rbp)
   1638a:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   16391:	be 02 00 00 00       	mov    $0x2,%esi
   16396:	48 89 c7             	mov    %rax,%rdi
   16399:	e8 d8 01 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1639e:	be 01 00 00 00       	mov    $0x1,%esi
   163a3:	48 89 c7             	mov    %rax,%rdi
   163a6:	e8 21 02 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   163ab:	48 89 c3             	mov    %rax,%rbx
   163ae:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   163b5:	be 01 00 00 00       	mov    $0x1,%esi
   163ba:	48 89 c7             	mov    %rax,%rdi
   163bd:	e8 7c 29 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   163c2:	48 89 de             	mov    %rbx,%rsi
   163c5:	48 89 c7             	mov    %rax,%rdi
   163c8:	e8 68 e0 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   163cd:	66 48 0f 7e c0       	movq   %xmm0,%rax
   163d2:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   163d6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   163da:	66 0f d6 45 b8       	movq   %xmm0,-0x48(%rbp)
   163df:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   163e6:	be 02 00 00 00       	mov    $0x2,%esi
   163eb:	48 89 c7             	mov    %rax,%rdi
   163ee:	e8 83 01 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   163f3:	be 00 00 00 00       	mov    $0x0,%esi
   163f8:	48 89 c7             	mov    %rax,%rdi
   163fb:	e8 cc 01 00 00       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   16400:	48 89 c3             	mov    %rax,%rbx
   16403:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   1640a:	be 00 00 00 00       	mov    $0x0,%esi
   1640f:	48 89 c7             	mov    %rax,%rdi
   16412:	e8 27 29 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16417:	48 89 de             	mov    %rbx,%rsi
   1641a:	48 89 c7             	mov    %rax,%rdi
   1641d:	e8 13 e0 ff ff       	call   14435 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_>
   16422:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16427:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1642b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1642f:	66 0f d6 45 c8       	movq   %xmm0,-0x38(%rbp)
   16434:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   16438:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1643c:	48 89 d6             	mov    %rdx,%rsi
   1643f:	48 89 c7             	mov    %rax,%rdi
   16442:	e8 4d 29 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   16447:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1644c:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16450:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   16454:	66 0f d6 45 a8       	movq   %xmm0,-0x58(%rbp)
   16459:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
   1645d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   16461:	48 89 d6             	mov    %rdx,%rsi
   16464:	48 89 c7             	mov    %rax,%rdi
   16467:	e8 28 29 00 00       	call   18d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>
   1646c:	66 48 0f 7e c0       	movq   %xmm0,%rax
   16471:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   16475:	49 89 c4             	mov    %rax,%r12
   16478:	49 89 d5             	mov    %rdx,%r13
   1647b:	66 49 0f 7e c5       	movq   %xmm0,%r13
   16480:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   16487:	be 02 00 00 00       	mov    $0x2,%esi
   1648c:	48 89 c7             	mov    %rax,%rdi
   1648f:	e8 e2 00 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   16494:	4c 89 20             	mov    %r12,(%rax)
   16497:	4c 89 68 08          	mov    %r13,0x8(%rax)
		Result[3] = m[3];
   1649b:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
   164a2:	be 03 00 00 00       	mov    $0x3,%esi
   164a7:	48 89 c7             	mov    %rax,%rdi
   164aa:	e8 8f 28 00 00       	call   18d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   164af:	48 89 c3             	mov    %rax,%rbx
   164b2:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   164b9:	be 03 00 00 00       	mov    $0x3,%esi
   164be:	48 89 c7             	mov    %rax,%rdi
   164c1:	e8 b0 00 00 00       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   164c6:	48 89 c1             	mov    %rax,%rcx
   164c9:	48 8b 03             	mov    (%rbx),%rax
   164cc:	48 8b 53 08          	mov    0x8(%rbx),%rdx
   164d0:	48 89 01             	mov    %rax,(%rcx)
   164d3:	48 89 51 08          	mov    %rdx,0x8(%rcx)
		return Result;
   164d7:	90                   	nop
	}
   164d8:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
   164df:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
   164e6:	5b                   	pop    %rbx
   164e7:	41 5c                	pop    %r12
   164e9:	41 5d                	pop    %r13
   164eb:	5d                   	pop    %rbp
   164ec:	c3                   	ret

00000000000164ed <_ZN3glm6lookAtIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_>:
		Result[3][2] = -dot(f, eye);
		return Result;
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
   164ed:	55                   	push   %rbp
   164ee:	48 89 e5             	mov    %rsp,%rbp
   164f1:	48 83 ec 20          	sub    $0x20,%rsp
   164f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   164f9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   164fd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   16501:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	{
		GLM_IF_CONSTEXPR(GLM_CONFIG_CLIP_CONTROL & GLM_CLIP_CONTROL_LH_BIT)
			return lookAtLH(eye, center, up);
		else
			return lookAtRH(eye, center, up);
   16505:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16509:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1650d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16511:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   16515:	48 89 c7             	mov    %rax,%rdi
   16518:	e8 ce 28 00 00       	call   18deb <_ZN3glm8lookAtRHIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_>
   1651d:	90                   	nop
	}
   1651e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16522:	c9                   	leave
   16523:	c3                   	ret

0000000000016524 <_ZN3glm11perspectiveIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_>:
			return perspectiveRH_NO(fovy, aspect, zNear, zFar);
#		endif
	}

	template<typename T>
	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)
   16524:	55                   	push   %rbp
   16525:	48 89 e5             	mov    %rsp,%rbp
   16528:	48 83 ec 20          	sub    $0x20,%rsp
   1652c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16530:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
   16535:	f3 0f 11 4d f0       	movss  %xmm1,-0x10(%rbp)
   1653a:	f3 0f 11 55 ec       	movss  %xmm2,-0x14(%rbp)
   1653f:	f3 0f 11 5d e8       	movss  %xmm3,-0x18(%rbp)
#		elif GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_LH_NO
			return perspectiveLH_NO(fovy, aspect, zNear, zFar);
#		elif GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_RH_ZO
			return perspectiveRH_ZO(fovy, aspect, zNear, zFar);
#		elif GLM_CONFIG_CLIP_CONTROL == GLM_CLIP_CONTROL_RH_NO
			return perspectiveRH_NO(fovy, aspect, zNear, zFar);
   16544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16548:	f3 0f 10 55 e8       	movss  -0x18(%rbp),%xmm2
   1654d:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
   16552:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   16557:	8b 55 f4             	mov    -0xc(%rbp),%edx
   1655a:	0f 28 da             	movaps %xmm2,%xmm3
   1655d:	0f 28 d1             	movaps %xmm1,%xmm2
   16560:	0f 28 c8             	movaps %xmm0,%xmm1
   16563:	66 0f 6e c2          	movd   %edx,%xmm0
   16567:	48 89 c7             	mov    %rax,%rdi
   1656a:	e8 da 2c 00 00       	call   19249 <_ZN3glm16perspectiveRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_>
   1656f:	90                   	nop
#		endif
	}
   16570:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16574:	c9                   	leave
   16575:	c3                   	ret

0000000000016576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>:
	}

	// -- Accesses --

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i)
   16576:	55                   	push   %rbp
   16577:	48 89 e5             	mov    %rsp,%rbp
   1657a:	48 83 ec 10          	sub    $0x10,%rsp
   1657e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16582:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		assert(i < this->length());
   16585:	e8 c0 2e 00 00       	call   1944a <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv>
   1658a:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   1658d:	7c 28                	jl     165b7 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi+0x41>
   1658f:	48 8d 05 f2 d0 00 00 	lea    0xd0f2(%rip),%rax        # 23688 <_ZZN9VulkanApp6renderEvE11submitCount+0x390>
   16596:	48 89 c1             	mov    %rax,%rcx
   16599:	ba 23 01 00 00       	mov    $0x123,%edx
   1659e:	48 8d 05 b3 d1 00 00 	lea    0xd1b3(%rip),%rax        # 23758 <_ZZN9VulkanApp6renderEvE11submitCount+0x460>
   165a5:	48 89 c6             	mov    %rax,%rsi
   165a8:	48 8d 05 d1 d1 00 00 	lea    0xd1d1(%rip),%rax        # 23780 <_ZZN9VulkanApp6renderEvE11submitCount+0x488>
   165af:	48 89 c7             	mov    %rax,%rdi
   165b2:	e8 f9 dc fe ff       	call   42b0 <__assert_fail@plt>
		return this->value[i];
   165b7:	8b 45 f4             	mov    -0xc(%rbp),%eax
   165ba:	48 98                	cltq
   165bc:	48 c1 e0 04          	shl    $0x4,%rax
   165c0:	48 89 c2             	mov    %rax,%rdx
   165c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165c7:	48 01 d0             	add    %rdx,%rax
	}
   165ca:	c9                   	leave
   165cb:	c3                   	ret

00000000000165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type i)
   165cc:	55                   	push   %rbp
   165cd:	48 89 e5             	mov    %rsp,%rbp
   165d0:	48 83 ec 10          	sub    $0x10,%rsp
   165d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   165d8:	89 75 f4             	mov    %esi,-0xc(%rbp)
		assert(i >= 0 && i < this->length());
   165db:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   165df:	78 0a                	js     165eb <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x1f>
   165e1:	e8 6f 2e 00 00       	call   19455 <_ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv>
   165e6:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   165e9:	7c 28                	jl     16613 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x47>
   165eb:	48 8d 05 a6 d1 00 00 	lea    0xd1a6(%rip),%rax        # 23798 <_ZZN9VulkanApp6renderEvE11submitCount+0x4a0>
   165f2:	48 89 c1             	mov    %rax,%rcx
   165f5:	ba df 01 00 00       	mov    $0x1df,%edx
   165fa:	48 8d 05 1f d2 00 00 	lea    0xd21f(%rip),%rax        # 23820 <_ZZN9VulkanApp6renderEvE11submitCount+0x528>
   16601:	48 89 c6             	mov    %rax,%rsi
   16604:	48 8d 05 5b d0 00 00 	lea    0xd05b(%rip),%rax        # 23666 <_ZZN9VulkanApp6renderEvE11submitCount+0x36e>
   1660b:	48 89 c7             	mov    %rax,%rdi
   1660e:	e8 9d dc fe ff       	call   42b0 <__assert_fail@plt>
		switch(i)
   16613:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
   16617:	74 2c                	je     16645 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x79>
   16619:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
   1661d:	7f 0c                	jg     1662b <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x5f>
   1661f:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   16623:	74 0c                	je     16631 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x65>
   16625:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
   16629:	74 10                	je     1663b <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x6f>
			return x;
   1662b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1662f:	eb 1c                	jmp    1664d <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x81>
			return y;
   16631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16635:	48 83 c0 04          	add    $0x4,%rax
   16639:	eb 12                	jmp    1664d <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x81>
			return z;
   1663b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1663f:	48 83 c0 08          	add    $0x8,%rax
   16643:	eb 08                	jmp    1664d <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi+0x81>
			return w;
   16645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16649:	48 83 c0 0c          	add    $0xc,%rax
	}
   1664d:	c9                   	leave
   1664e:	c3                   	ret
   1664f:	90                   	nop

0000000000016650 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   16650:	55                   	push   %rbp
   16651:	48 89 e5             	mov    %rsp,%rbp
   16654:	48 83 ec 10          	sub    $0x10,%rsp
   16658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1665c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   16660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16664:	48 89 c7             	mov    %rax,%rdi
   16667:	e8 58 03 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   1666c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   16670:	0f 92 c0             	setb   %al
   16673:	84 c0                	test   %al,%al
   16675:	74 24                	je     1669b <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   16677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1667b:	48 89 c7             	mov    %rax,%rdi
   1667e:	e8 41 03 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   16683:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16687:	48 29 c2             	sub    %rax,%rdx
   1668a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1668e:	48 89 d6             	mov    %rdx,%rsi
   16691:	48 89 c7             	mov    %rax,%rdi
   16694:	e8 c7 2d 00 00       	call   19460 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm>
      }
   16699:	eb 38                	jmp    166d3 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   1669b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1669f:	48 89 c7             	mov    %rax,%rdi
   166a2:	e8 1d 03 00 00       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   166a7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   166ab:	0f 92 c0             	setb   %al
   166ae:	84 c0                	test   %al,%al
   166b0:	74 21                	je     166d3 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   166b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166b6:	48 8b 00             	mov    (%rax),%rax
   166b9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   166bd:	48 c1 e2 03          	shl    $0x3,%rdx
   166c1:	48 01 c2             	add    %rax,%rdx
   166c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166c8:	48 89 d6             	mov    %rdx,%rsi
   166cb:	48 89 c7             	mov    %rax,%rdi
   166ce:	e8 97 2f 00 00       	call   1966a <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   166d3:	90                   	nop
   166d4:	c9                   	leave
   166d5:	c3                   	ret

00000000000166d6 <_ZNSt6vectorIP9VkFence_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   166d6:	55                   	push   %rbp
   166d7:	48 89 e5             	mov    %rsp,%rbp
   166da:	48 83 ec 10          	sub    $0x10,%rsp
   166de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   166e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   166e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166ea:	48 89 c7             	mov    %rax,%rdi
   166ed:	e8 d8 2f 00 00       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   166f2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   166f6:	0f 92 c0             	setb   %al
   166f9:	84 c0                	test   %al,%al
   166fb:	74 24                	je     16721 <_ZNSt6vectorIP9VkFence_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   166fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16701:	48 89 c7             	mov    %rax,%rdi
   16704:	e8 c1 2f 00 00       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   16709:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1670d:	48 29 c2             	sub    %rax,%rdx
   16710:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16714:	48 89 d6             	mov    %rdx,%rsi
   16717:	48 89 c7             	mov    %rax,%rdi
   1671a:	e8 cf 2f 00 00       	call   196ee <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm>
      }
   1671f:	eb 38                	jmp    16759 <_ZNSt6vectorIP9VkFence_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   16721:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16725:	48 89 c7             	mov    %rax,%rdi
   16728:	e8 9d 2f 00 00       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   1672d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   16731:	0f 92 c0             	setb   %al
   16734:	84 c0                	test   %al,%al
   16736:	74 21                	je     16759 <_ZNSt6vectorIP9VkFence_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   16738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1673c:	48 8b 00             	mov    (%rax),%rax
   1673f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16743:	48 c1 e2 03          	shl    $0x3,%rdx
   16747:	48 01 c2             	add    %rax,%rdx
   1674a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1674e:	48 89 d6             	mov    %rdx,%rsi
   16751:	48 89 c7             	mov    %rax,%rdi
   16754:	e8 9f 31 00 00       	call   198f8 <_ZNSt6vectorIP9VkFence_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   16759:	90                   	nop
   1675a:	c9                   	leave
   1675b:	c3                   	ret

000000000001675c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1675c:	55                   	push   %rbp
   1675d:	48 89 e5             	mov    %rsp,%rbp
   16760:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16764:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   16768:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1676c:	48 8b 00             	mov    (%rax),%rax
   1676f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16773:	48 c1 e2 03          	shl    $0x3,%rdx
   16777:	48 01 d0             	add    %rdx,%rax
      }
   1677a:	5d                   	pop    %rbp
   1677b:	c3                   	ret

000000000001677c <_ZNSt6vectorIP9VkFence_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1677c:	55                   	push   %rbp
   1677d:	48 89 e5             	mov    %rsp,%rbp
   16780:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16784:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   16788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1678c:	48 8b 00             	mov    (%rax),%rax
   1678f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   16793:	48 c1 e2 03          	shl    $0x3,%rdx
   16797:	48 01 d0             	add    %rdx,%rax
      }
   1679a:	5d                   	pop    %rbp
   1679b:	c3                   	ret

000000000001679c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1679c:	55                   	push   %rbp
   1679d:	48 89 e5             	mov    %rsp,%rbp
   167a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   167a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167ac:	48 8b 00             	mov    (%rax),%rax
   167af:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   167b3:	48 c1 e2 03          	shl    $0x3,%rdx
   167b7:	48 01 d0             	add    %rdx,%rax
      }
   167ba:	5d                   	pop    %rbp
   167bb:	c3                   	ret

00000000000167bc <_ZNSaIP13VkSemaphore_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   167bc:	55                   	push   %rbp
   167bd:	48 89 e5             	mov    %rsp,%rbp
   167c0:	48 83 ec 10          	sub    $0x10,%rsp
   167c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167cc:	48 89 c7             	mov    %rax,%rdi
   167cf:	e8 84 31 00 00       	call   19958 <_ZNSt15__new_allocatorIP13VkSemaphore_TEC1Ev>
   167d4:	90                   	nop
   167d5:	c9                   	leave
   167d6:	c3                   	ret
   167d7:	90                   	nop

00000000000167d8 <_ZNSaIP13VkSemaphore_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   167d8:	55                   	push   %rbp
   167d9:	48 89 e5             	mov    %rsp,%rbp
   167dc:	48 83 ec 10          	sub    $0x10,%rsp
   167e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   167e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167e8:	48 89 c7             	mov    %rax,%rdi
   167eb:	e8 74 31 00 00       	call   19964 <_ZNSt15__new_allocatorIP13VkSemaphore_TED1Ev>
   167f0:	90                   	nop
   167f1:	c9                   	leave
   167f2:	c3                   	ret
   167f3:	90                   	nop

00000000000167f4 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
   167f4:	55                   	push   %rbp
   167f5:	48 89 e5             	mov    %rsp,%rbp
   167f8:	53                   	push   %rbx
   167f9:	48 83 ec 38          	sub    $0x38,%rsp
   167fd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16801:	48 89 f0             	mov    %rsi,%rax
   16804:	48 89 d6             	mov    %rdx,%rsi
   16807:	48 89 f2             	mov    %rsi,%rdx
   1680a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1680e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   16812:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   16816:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1681a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1681e:	48 89 d6             	mov    %rdx,%rsi
   16821:	48 89 c7             	mov    %rax,%rdi
   16824:	e8 47 31 00 00       	call   19970 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
   16829:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1682d:	48 89 c7             	mov    %rax,%rdi
   16830:	e8 73 31 00 00       	call   199a8 <_ZNKSt16initializer_listIP13VkSemaphore_TE3endEv>
   16835:	48 89 c3             	mov    %rax,%rbx
   16838:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1683c:	48 89 c7             	mov    %rax,%rdi
   1683f:	e8 52 31 00 00       	call   19996 <_ZNKSt16initializer_listIP13VkSemaphore_TE5beginEv>
   16844:	48 89 c1             	mov    %rax,%rcx
   16847:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1684b:	48 89 da             	mov    %rbx,%rdx
   1684e:	48 89 ce             	mov    %rcx,%rsi
   16851:	48 89 c7             	mov    %rax,%rdi
   16854:	e8 b5 31 00 00       	call   19a0e <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
   16859:	eb 1a                	jmp    16875 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   1685b:	48 89 c3             	mov    %rax,%rbx
   1685e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16862:	48 89 c7             	mov    %rax,%rdi
   16865:	e8 8a 03 00 00       	call   16bf4 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EED1Ev>
   1686a:	48 89 d8             	mov    %rbx,%rax
   1686d:	48 89 c7             	mov    %rax,%rdi
   16870:	e8 fb e0 fe ff       	call   4970 <_Unwind_Resume@plt>
   16875:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16879:	c9                   	leave
   1687a:	c3                   	ret
   1687b:	90                   	nop

000000000001687c <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1687c:	55                   	push   %rbp
   1687d:	48 89 e5             	mov    %rsp,%rbp
   16880:	48 83 ec 10          	sub    $0x10,%rsp
   16884:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   16888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1688c:	48 89 c7             	mov    %rax,%rdi
   1688f:	e8 2a 32 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   16894:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1689b:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1689f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168a3:	48 8b 00             	mov    (%rax),%rax
   168a6:	48 89 ce             	mov    %rcx,%rsi
   168a9:	48 89 c7             	mov    %rax,%rdi
   168ac:	e8 1b 32 00 00       	call   19acc <_ZSt8_DestroyIPP13VkSemaphore_TS1_EvT_S3_RSaIT0_E>
      }
   168b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168b5:	48 89 c7             	mov    %rax,%rdi
   168b8:	e8 37 03 00 00       	call   16bf4 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EED1Ev>
   168bd:	90                   	nop
   168be:	c9                   	leave
   168bf:	c3                   	ret

00000000000168c0 <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   168c0:	55                   	push   %rbp
   168c1:	48 89 e5             	mov    %rsp,%rbp
   168c4:	48 83 ec 10          	sub    $0x10,%rsp
   168c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   168cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168d0:	48 89 c7             	mov    %rax,%rdi
   168d3:	e8 1e 32 00 00       	call   19af6 <_ZNSt15__new_allocatorIjEC1Ev>
   168d8:	90                   	nop
   168d9:	c9                   	leave
   168da:	c3                   	ret
   168db:	90                   	nop

00000000000168dc <_ZNSaIjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   168dc:	55                   	push   %rbp
   168dd:	48 89 e5             	mov    %rsp,%rbp
   168e0:	48 83 ec 10          	sub    $0x10,%rsp
   168e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   168e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168ec:	48 89 c7             	mov    %rax,%rdi
   168ef:	e8 0e 32 00 00       	call   19b02 <_ZNSt15__new_allocatorIjED1Ev>
   168f4:	90                   	nop
   168f5:	c9                   	leave
   168f6:	c3                   	ret
   168f7:	90                   	nop

00000000000168f8 <_ZNSt6vectorIjSaIjEEC1ESt16initializer_listIjERKS0_>:
      vector(initializer_list<value_type> __l,
   168f8:	55                   	push   %rbp
   168f9:	48 89 e5             	mov    %rsp,%rbp
   168fc:	53                   	push   %rbx
   168fd:	48 83 ec 38          	sub    $0x38,%rsp
   16901:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   16905:	48 89 f0             	mov    %rsi,%rax
   16908:	48 89 d6             	mov    %rdx,%rsi
   1690b:	48 89 f2             	mov    %rsi,%rdx
   1690e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   16912:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   16916:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      : _Base(__a)
   1691a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1691e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   16922:	48 89 d6             	mov    %rdx,%rsi
   16925:	48 89 c7             	mov    %rax,%rdi
   16928:	e8 fd 31 00 00       	call   19b2a <_ZNSt12_Vector_baseIjSaIjEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
   1692d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   16931:	48 89 c7             	mov    %rax,%rdi
   16934:	e8 77 32 00 00       	call   19bb0 <_ZNKSt16initializer_listIjE3endEv>
   16939:	48 89 c3             	mov    %rax,%rbx
   1693c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   16940:	48 89 c7             	mov    %rax,%rdi
   16943:	e8 56 32 00 00       	call   19b9e <_ZNKSt16initializer_listIjE5beginEv>
   16948:	48 89 c1             	mov    %rax,%rcx
   1694b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1694f:	48 89 da             	mov    %rbx,%rdx
   16952:	48 89 ce             	mov    %rcx,%rsi
   16955:	48 89 c7             	mov    %rax,%rdi
   16958:	e8 b9 32 00 00       	call   19c16 <_ZNSt6vectorIjSaIjEE19_M_range_initializeIPKjEEvT_S5_St20forward_iterator_tag>
      }
   1695d:	eb 1a                	jmp    16979 <_ZNSt6vectorIjSaIjEEC1ESt16initializer_listIjERKS0_+0x81>
   1695f:	48 89 c3             	mov    %rax,%rbx
   16962:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   16966:	48 89 c7             	mov    %rax,%rdi
   16969:	e8 e2 31 00 00       	call   19b50 <_ZNSt12_Vector_baseIjSaIjEED1Ev>
   1696e:	48 89 d8             	mov    %rbx,%rax
   16971:	48 89 c7             	mov    %rax,%rdi
   16974:	e8 f7 df fe ff       	call   4970 <_Unwind_Resume@plt>
   16979:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1697d:	c9                   	leave
   1697e:	c3                   	ret
   1697f:	90                   	nop

0000000000016980 <_ZNSt6vectorIjSaIjEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   16980:	55                   	push   %rbp
   16981:	48 89 e5             	mov    %rsp,%rbp
   16984:	48 83 ec 10          	sub    $0x10,%rsp
   16988:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1698c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16990:	48 89 c7             	mov    %rax,%rdi
   16993:	e8 2e 33 00 00       	call   19cc6 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
   16998:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1699b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1699f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   169a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169a7:	48 8b 00             	mov    (%rax),%rax
   169aa:	48 89 ce             	mov    %rcx,%rsi
   169ad:	48 89 c7             	mov    %rax,%rdi
   169b0:	e8 1f 33 00 00       	call   19cd4 <_ZSt8_DestroyIPjjEvT_S1_RSaIT0_E>
      }
   169b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169b9:	48 89 c7             	mov    %rax,%rdi
   169bc:	e8 8f 31 00 00       	call   19b50 <_ZNSt12_Vector_baseIjSaIjEED1Ev>
   169c1:	90                   	nop
   169c2:	c9                   	leave
   169c3:	c3                   	ret

00000000000169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   169c4:	55                   	push   %rbp
   169c5:	48 89 e5             	mov    %rsp,%rbp
   169c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   169cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169d0:	48 8b 50 08          	mov    0x8(%rax),%rdx
   169d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169d8:	48 8b 00             	mov    (%rax),%rax
   169db:	48 29 c2             	sub    %rax,%rdx
   169de:	48 89 d0             	mov    %rdx,%rax
   169e1:	48 c1 f8 03          	sar    $0x3,%rax
   169e5:	5d                   	pop    %rbp
   169e6:	c3                   	ret
   169e7:	90                   	nop

00000000000169e8 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   169e8:	55                   	push   %rbp
   169e9:	48 89 e5             	mov    %rsp,%rbp
   169ec:	48 83 ec 10          	sub    $0x10,%rsp
   169f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   169f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169f8:	48 8b 10             	mov    (%rax),%rdx
   169fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169ff:	48 89 d6             	mov    %rdx,%rsi
   16a02:	48 89 c7             	mov    %rax,%rdi
   16a05:	e8 f4 32 00 00       	call   19cfe <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   16a0a:	c9                   	leave
   16a0b:	c3                   	ret

0000000000016a0c <_ZNSt6vectorIjSaIjEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   16a0c:	55                   	push   %rbp
   16a0d:	48 89 e5             	mov    %rsp,%rbp
   16a10:	48 83 ec 10          	sub    $0x10,%rsp
   16a14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   16a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a1c:	48 8b 10             	mov    (%rax),%rdx
   16a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a23:	48 89 d6             	mov    %rdx,%rsi
   16a26:	48 89 c7             	mov    %rax,%rdi
   16a29:	e8 e2 32 00 00       	call   19d10 <_ZNKSt6vectorIjSaIjEE11_M_data_ptrIjEEPT_S4_>
   16a2e:	c9                   	leave
   16a2f:	c3                   	ret

0000000000016a30 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16a30:	55                   	push   %rbp
   16a31:	48 89 e5             	mov    %rsp,%rbp
   16a34:	48 83 ec 10          	sub    $0x10,%rsp
   16a38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16a3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a40:	48 89 c7             	mov    %rax,%rdi
   16a43:	e8 02 e9 ff ff       	call   1534a <_ZNSaIP13VkImageView_TEC1Ev>
   16a48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a4c:	48 89 c7             	mov    %rax,%rdi
   16a4f:	e8 ce 32 00 00       	call   19d22 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16a54:	90                   	nop
   16a55:	c9                   	leave
   16a56:	c3                   	ret
   16a57:	90                   	nop

0000000000016a58 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16a58:	55                   	push   %rbp
   16a59:	48 89 e5             	mov    %rsp,%rbp
   16a5c:	48 83 ec 10          	sub    $0x10,%rsp
   16a60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16a64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a68:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a70:	48 8b 00             	mov    (%rax),%rax
   16a73:	48 29 c2             	sub    %rax,%rdx
   16a76:	48 89 d0             	mov    %rdx,%rax
   16a79:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16a7d:	48 89 c2             	mov    %rax,%rdx
   16a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a84:	48 8b 08             	mov    (%rax),%rcx
   16a87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a8b:	48 89 ce             	mov    %rcx,%rsi
   16a8e:	48 89 c7             	mov    %rax,%rdi
   16a91:	e8 ba 32 00 00       	call   19d50 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16a96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a9a:	48 89 c7             	mov    %rax,%rdi
   16a9d:	e8 6e d6 ff ff       	call   14110 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implD1Ev>
   16aa2:	90                   	nop
   16aa3:	c9                   	leave
   16aa4:	c3                   	ret
   16aa5:	90                   	nop

0000000000016aa6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16aa6:	55                   	push   %rbp
   16aa7:	48 89 e5             	mov    %rsp,%rbp
   16aaa:	48 83 ec 10          	sub    $0x10,%rsp
   16aae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ab6:	48 89 c7             	mov    %rax,%rdi
   16ab9:	e8 48 39 ff ff       	call   a406 <_ZNSaIP9VkImage_TEC1Ev>
   16abe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ac2:	48 89 c7             	mov    %rax,%rdi
   16ac5:	e8 d8 5e ff ff       	call   c9a2 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16aca:	90                   	nop
   16acb:	c9                   	leave
   16acc:	c3                   	ret
   16acd:	90                   	nop

0000000000016ace <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16ace:	55                   	push   %rbp
   16acf:	48 89 e5             	mov    %rsp,%rbp
   16ad2:	48 83 ec 10          	sub    $0x10,%rsp
   16ad6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16ada:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ade:	48 89 c7             	mov    %rax,%rdi
   16ae1:	e8 a0 32 00 00       	call   19d86 <_ZNSaIP15VkFramebuffer_TEC1Ev>
   16ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16aea:	48 89 c7             	mov    %rax,%rdi
   16aed:	e8 b0 32 00 00       	call   19da2 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16af2:	90                   	nop
   16af3:	c9                   	leave
   16af4:	c3                   	ret
   16af5:	90                   	nop

0000000000016af6 <_ZNSaIP15VkFramebuffer_TED1Ev>:
   16af6:	55                   	push   %rbp
   16af7:	48 89 e5             	mov    %rsp,%rbp
   16afa:	48 83 ec 10          	sub    $0x10,%rsp
   16afe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16b02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b06:	48 89 c7             	mov    %rax,%rdi
   16b09:	e8 c2 32 00 00       	call   19dd0 <_ZNSt15__new_allocatorIP15VkFramebuffer_TED1Ev>
   16b0e:	90                   	nop
   16b0f:	c9                   	leave
   16b10:	c3                   	ret
   16b11:	90                   	nop

0000000000016b12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16b12:	55                   	push   %rbp
   16b13:	48 89 e5             	mov    %rsp,%rbp
   16b16:	48 83 ec 10          	sub    $0x10,%rsp
   16b1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b22:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b2a:	48 8b 00             	mov    (%rax),%rax
   16b2d:	48 29 c2             	sub    %rax,%rdx
   16b30:	48 89 d0             	mov    %rdx,%rax
   16b33:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16b37:	48 89 c2             	mov    %rax,%rdx
   16b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b3e:	48 8b 08             	mov    (%rax),%rcx
   16b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b45:	48 89 ce             	mov    %rcx,%rsi
   16b48:	48 89 c7             	mov    %rax,%rdi
   16b4b:	e8 8c 32 00 00       	call   19ddc <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b54:	48 89 c7             	mov    %rax,%rdi
   16b57:	e8 7a d6 ff ff       	call   141d6 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE12_Vector_implD1Ev>
   16b5c:	90                   	nop
   16b5d:	c9                   	leave
   16b5e:	c3                   	ret
   16b5f:	90                   	nop

0000000000016b60 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   16b60:	55                   	push   %rbp
   16b61:	48 89 e5             	mov    %rsp,%rbp
   16b64:	48 83 ec 10          	sub    $0x10,%rsp
   16b68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   16b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b70:	48 89 c7             	mov    %rax,%rdi
   16b73:	e8 9a 32 00 00       	call   19e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   16b78:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b7f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16b83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b87:	48 8b 00             	mov    (%rax),%rax
   16b8a:	48 89 ce             	mov    %rcx,%rsi
   16b8d:	48 89 c7             	mov    %rax,%rdi
   16b90:	e8 8b 32 00 00       	call   19e20 <_ZSt8_DestroyIPP15VkFramebuffer_TS1_EvT_S3_RSaIT0_E>
      }
   16b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b99:	48 89 c7             	mov    %rax,%rdi
   16b9c:	e8 71 ff ff ff       	call   16b12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EED1Ev>
   16ba1:	90                   	nop
   16ba2:	c9                   	leave
   16ba3:	c3                   	ret

0000000000016ba4 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16ba4:	55                   	push   %rbp
   16ba5:	48 89 e5             	mov    %rsp,%rbp
   16ba8:	48 83 ec 10          	sub    $0x10,%rsp
   16bac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bb4:	48 89 c7             	mov    %rax,%rdi
   16bb7:	e8 d2 fb fe ff       	call   678e <_ZNSaIP17VkCommandBuffer_TEC1Ev>
   16bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bc0:	48 89 c7             	mov    %rax,%rdi
   16bc3:	e8 58 00 ff ff       	call   6c20 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16bc8:	90                   	nop
   16bc9:	c9                   	leave
   16bca:	c3                   	ret
   16bcb:	90                   	nop

0000000000016bcc <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16bcc:	55                   	push   %rbp
   16bcd:	48 89 e5             	mov    %rsp,%rbp
   16bd0:	48 83 ec 10          	sub    $0x10,%rsp
   16bd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16bd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bdc:	48 89 c7             	mov    %rax,%rdi
   16bdf:	e8 d8 fb ff ff       	call   167bc <_ZNSaIP13VkSemaphore_TEC1Ev>
   16be4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16be8:	48 89 c7             	mov    %rax,%rdi
   16beb:	e8 5a 32 00 00       	call   19e4a <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16bf0:	90                   	nop
   16bf1:	c9                   	leave
   16bf2:	c3                   	ret
   16bf3:	90                   	nop

0000000000016bf4 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16bf4:	55                   	push   %rbp
   16bf5:	48 89 e5             	mov    %rsp,%rbp
   16bf8:	48 83 ec 10          	sub    $0x10,%rsp
   16bfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c04:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c0c:	48 8b 00             	mov    (%rax),%rax
   16c0f:	48 29 c2             	sub    %rax,%rdx
   16c12:	48 89 d0             	mov    %rdx,%rax
   16c15:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16c19:	48 89 c2             	mov    %rax,%rdx
   16c1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c20:	48 8b 08             	mov    (%rax),%rcx
   16c23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c27:	48 89 ce             	mov    %rcx,%rsi
   16c2a:	48 89 c7             	mov    %rax,%rdi
   16c2d:	e8 46 32 00 00       	call   19e78 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c36:	48 89 c7             	mov    %rax,%rdi
   16c39:	e8 24 d6 ff ff       	call   14262 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implD1Ev>
   16c3e:	90                   	nop
   16c3f:	c9                   	leave
   16c40:	c3                   	ret
   16c41:	90                   	nop

0000000000016c42 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16c42:	55                   	push   %rbp
   16c43:	48 89 e5             	mov    %rsp,%rbp
   16c46:	48 83 ec 10          	sub    $0x10,%rsp
   16c4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c52:	48 89 c7             	mov    %rax,%rdi
   16c55:	e8 54 32 00 00       	call   19eae <_ZNSaIP9VkFence_TEC1Ev>
   16c5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c5e:	48 89 c7             	mov    %rax,%rdi
   16c61:	e8 64 32 00 00       	call   19eca <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16c66:	90                   	nop
   16c67:	c9                   	leave
   16c68:	c3                   	ret
   16c69:	90                   	nop

0000000000016c6a <_ZNSaIP9VkFence_TED1Ev>:
   16c6a:	55                   	push   %rbp
   16c6b:	48 89 e5             	mov    %rsp,%rbp
   16c6e:	48 83 ec 10          	sub    $0x10,%rsp
   16c72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16c76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c7a:	48 89 c7             	mov    %rax,%rdi
   16c7d:	e8 76 32 00 00       	call   19ef8 <_ZNSt15__new_allocatorIP9VkFence_TED1Ev>
   16c82:	90                   	nop
   16c83:	c9                   	leave
   16c84:	c3                   	ret
   16c85:	90                   	nop

0000000000016c86 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16c86:	55                   	push   %rbp
   16c87:	48 89 e5             	mov    %rsp,%rbp
   16c8a:	48 83 ec 10          	sub    $0x10,%rsp
   16c8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16c92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c96:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c9e:	48 8b 00             	mov    (%rax),%rax
   16ca1:	48 29 c2             	sub    %rax,%rdx
   16ca4:	48 89 d0             	mov    %rdx,%rax
   16ca7:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16cab:	48 89 c2             	mov    %rax,%rdx
   16cae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cb2:	48 8b 08             	mov    (%rax),%rcx
   16cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cb9:	48 89 ce             	mov    %rcx,%rsi
   16cbc:	48 89 c7             	mov    %rax,%rdi
   16cbf:	e8 40 32 00 00       	call   19f04 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16cc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cc8:	48 89 c7             	mov    %rax,%rdi
   16ccb:	e8 e6 d5 ff ff       	call   142b6 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE12_Vector_implD1Ev>
   16cd0:	90                   	nop
   16cd1:	c9                   	leave
   16cd2:	c3                   	ret
   16cd3:	90                   	nop

0000000000016cd4 <_ZNSt6vectorIP9VkFence_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   16cd4:	55                   	push   %rbp
   16cd5:	48 89 e5             	mov    %rsp,%rbp
   16cd8:	48 83 ec 10          	sub    $0x10,%rsp
   16cdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   16ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ce4:	48 89 c7             	mov    %rax,%rdi
   16ce7:	e8 4e 32 00 00       	call   19f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   16cec:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16cef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cf3:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16cf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cfb:	48 8b 00             	mov    (%rax),%rax
   16cfe:	48 89 ce             	mov    %rcx,%rsi
   16d01:	48 89 c7             	mov    %rax,%rdi
   16d04:	e8 3f 32 00 00       	call   19f48 <_ZSt8_DestroyIPP9VkFence_TS1_EvT_S3_RSaIT0_E>
      }
   16d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d0d:	48 89 c7             	mov    %rax,%rdi
   16d10:	e8 71 ff ff ff       	call   16c86 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EED1Ev>
   16d15:	90                   	nop
   16d16:	c9                   	leave
   16d17:	c3                   	ret

0000000000016d18 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16d18:	55                   	push   %rbp
   16d19:	48 89 e5             	mov    %rsp,%rbp
   16d1c:	48 83 ec 10          	sub    $0x10,%rsp
   16d20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d28:	48 89 c7             	mov    %rax,%rdi
   16d2b:	e8 42 32 00 00       	call   19f72 <_ZNSaIP10VkBuffer_TEC1Ev>
   16d30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d34:	48 89 c7             	mov    %rax,%rdi
   16d37:	e8 52 32 00 00       	call   19f8e <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16d3c:	90                   	nop
   16d3d:	c9                   	leave
   16d3e:	c3                   	ret
   16d3f:	90                   	nop

0000000000016d40 <_ZNSaIP10VkBuffer_TED1Ev>:
   16d40:	55                   	push   %rbp
   16d41:	48 89 e5             	mov    %rsp,%rbp
   16d44:	48 83 ec 10          	sub    $0x10,%rsp
   16d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d50:	48 89 c7             	mov    %rax,%rdi
   16d53:	e8 64 32 00 00       	call   19fbc <_ZNSt15__new_allocatorIP10VkBuffer_TED1Ev>
   16d58:	90                   	nop
   16d59:	c9                   	leave
   16d5a:	c3                   	ret
   16d5b:	90                   	nop

0000000000016d5c <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16d5c:	55                   	push   %rbp
   16d5d:	48 89 e5             	mov    %rsp,%rbp
   16d60:	48 83 ec 10          	sub    $0x10,%rsp
   16d64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d6c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d74:	48 8b 00             	mov    (%rax),%rax
   16d77:	48 29 c2             	sub    %rax,%rdx
   16d7a:	48 89 d0             	mov    %rdx,%rax
   16d7d:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16d81:	48 89 c2             	mov    %rax,%rdx
   16d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d88:	48 8b 08             	mov    (%rax),%rcx
   16d8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d8f:	48 89 ce             	mov    %rcx,%rsi
   16d92:	48 89 c7             	mov    %rax,%rdi
   16d95:	e8 2e 32 00 00       	call   19fc8 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16d9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d9e:	48 89 c7             	mov    %rax,%rdi
   16da1:	e8 e8 d5 ff ff       	call   1438e <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE12_Vector_implD1Ev>
   16da6:	90                   	nop
   16da7:	c9                   	leave
   16da8:	c3                   	ret
   16da9:	90                   	nop

0000000000016daa <_ZNSt6vectorIP10VkBuffer_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   16daa:	55                   	push   %rbp
   16dab:	48 89 e5             	mov    %rsp,%rbp
   16dae:	48 83 ec 10          	sub    $0x10,%rsp
   16db2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   16db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dba:	48 89 c7             	mov    %rax,%rdi
   16dbd:	e8 3c 32 00 00       	call   19ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   16dc2:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dc9:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dd1:	48 8b 00             	mov    (%rax),%rax
   16dd4:	48 89 ce             	mov    %rcx,%rsi
   16dd7:	48 89 c7             	mov    %rax,%rdi
   16dda:	e8 2d 32 00 00       	call   1a00c <_ZSt8_DestroyIPP10VkBuffer_TS1_EvT_S3_RSaIT0_E>
      }
   16ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16de3:	48 89 c7             	mov    %rax,%rdi
   16de6:	e8 71 ff ff ff       	call   16d5c <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EED1Ev>
   16deb:	90                   	nop
   16dec:	c9                   	leave
   16ded:	c3                   	ret

0000000000016dee <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   16dee:	55                   	push   %rbp
   16def:	48 89 e5             	mov    %rsp,%rbp
   16df2:	48 83 ec 10          	sub    $0x10,%rsp
   16df6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   16dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dfe:	48 89 c7             	mov    %rax,%rdi
   16e01:	e8 30 32 00 00       	call   1a036 <_ZNSaIP16VkDeviceMemory_TEC1Ev>
   16e06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e0a:	48 89 c7             	mov    %rax,%rdi
   16e0d:	e8 40 32 00 00       	call   1a052 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   16e12:	90                   	nop
   16e13:	c9                   	leave
   16e14:	c3                   	ret
   16e15:	90                   	nop

0000000000016e16 <_ZNSaIP16VkDeviceMemory_TED1Ev>:
   16e16:	55                   	push   %rbp
   16e17:	48 89 e5             	mov    %rsp,%rbp
   16e1a:	48 83 ec 10          	sub    $0x10,%rsp
   16e1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e26:	48 89 c7             	mov    %rax,%rdi
   16e29:	e8 52 32 00 00       	call   1a080 <_ZNSt15__new_allocatorIP16VkDeviceMemory_TED1Ev>
   16e2e:	90                   	nop
   16e2f:	c9                   	leave
   16e30:	c3                   	ret
   16e31:	90                   	nop

0000000000016e32 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   16e32:	55                   	push   %rbp
   16e33:	48 89 e5             	mov    %rsp,%rbp
   16e36:	48 83 ec 10          	sub    $0x10,%rsp
   16e3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   16e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e42:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e4a:	48 8b 00             	mov    (%rax),%rax
   16e4d:	48 29 c2             	sub    %rax,%rdx
   16e50:	48 89 d0             	mov    %rdx,%rax
   16e53:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   16e57:	48 89 c2             	mov    %rax,%rdx
   16e5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e5e:	48 8b 08             	mov    (%rax),%rcx
   16e61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e65:	48 89 ce             	mov    %rcx,%rsi
   16e68:	48 89 c7             	mov    %rax,%rdi
   16e6b:	e8 1c 32 00 00       	call   1a08c <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   16e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e74:	48 89 c7             	mov    %rax,%rdi
   16e77:	e8 66 d5 ff ff       	call   143e2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE12_Vector_implD1Ev>
   16e7c:	90                   	nop
   16e7d:	c9                   	leave
   16e7e:	c3                   	ret
   16e7f:	90                   	nop

0000000000016e80 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   16e80:	55                   	push   %rbp
   16e81:	48 89 e5             	mov    %rsp,%rbp
   16e84:	48 83 ec 10          	sub    $0x10,%rsp
   16e88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   16e8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e90:	48 89 c7             	mov    %rax,%rdi
   16e93:	e8 2a 32 00 00       	call   1a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   16e98:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   16e9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e9f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   16ea3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ea7:	48 8b 00             	mov    (%rax),%rax
   16eaa:	48 89 ce             	mov    %rcx,%rsi
   16ead:	48 89 c7             	mov    %rax,%rdi
   16eb0:	e8 1b 32 00 00       	call   1a0d0 <_ZSt8_DestroyIPP16VkDeviceMemory_TS1_EvT_S3_RSaIT0_E>
      }
   16eb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16eb9:	48 89 c7             	mov    %rax,%rdi
   16ebc:	e8 71 ff ff ff       	call   16e32 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EED1Ev>
   16ec1:	90                   	nop
   16ec2:	c9                   	leave
   16ec3:	c3                   	ret

0000000000016ec4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>:
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   16ec4:	55                   	push   %rbp
   16ec5:	48 89 e5             	mov    %rsp,%rbp
   16ec8:	48 83 ec 20          	sub    $0x20,%rsp
   16ecc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16ed0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   16ed4:	89 d0                	mov    %edx,%eax
   16ed6:	88 45 ec             	mov    %al,-0x14(%rbp)
	      _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
   16ed9:	0f be 55 ec          	movsbl -0x14(%rbp),%edx
   16edd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16ee1:	be 01 00 00 00       	mov    $0x1,%esi
   16ee6:	48 89 c7             	mov    %rax,%rdi
   16ee9:	e8 82 d6 fe ff       	call   4570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc@plt>
   16eee:	48 89 c7             	mov    %rax,%rdi
   16ef1:	e8 d3 00 00 00       	call   16fc9 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
   16ef6:	48 89 c2             	mov    %rax,%rdx
   16ef9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16efd:	48 89 d6             	mov    %rdx,%rsi
   16f00:	48 89 c7             	mov    %rax,%rdi
   16f03:	e8 68 d3 fe ff       	call   4270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>
   16f08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f0c:	c9                   	leave
   16f0d:	c3                   	ret

0000000000016f0e <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   16f0e:	55                   	push   %rbp
   16f0f:	48 89 e5             	mov    %rsp,%rbp
   16f12:	48 83 ec 20          	sub    $0x20,%rsp
   16f16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   16f1a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16f1e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16f22:	48 89 d6             	mov    %rdx,%rsi
   16f25:	48 89 c7             	mov    %rax,%rdi
   16f28:	e8 cd 31 00 00       	call   1a0fa <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   16f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f31:	c9                   	leave
   16f32:	c3                   	ret
   16f33:	90                   	nop

0000000000016f34 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   16f34:	55                   	push   %rbp
   16f35:	48 89 e5             	mov    %rsp,%rbp
   16f38:	48 83 ec 20          	sub    $0x20,%rsp
   16f3c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   16f40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f44:	48 8d 50 08          	lea    0x8(%rax),%rdx
   16f48:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   16f4c:	48 89 d6             	mov    %rdx,%rsi
   16f4f:	48 89 c7             	mov    %rax,%rdi
   16f52:	e8 a3 31 00 00       	call   1a0fa <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   16f57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f5b:	c9                   	leave
   16f5c:	c3                   	ret

0000000000016f5d <_ZN9__gnu_cxxneIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   16f5d:	55                   	push   %rbp
   16f5e:	48 89 e5             	mov    %rsp,%rbp
   16f61:	53                   	push   %rbx
   16f62:	48 83 ec 18          	sub    $0x18,%rsp
   16f66:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16f6a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() != __rhs.base(); }
   16f6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f72:	48 89 c7             	mov    %rax,%rdi
   16f75:	e8 9e 31 00 00       	call   1a118 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   16f7a:	48 8b 18             	mov    (%rax),%rbx
   16f7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16f81:	48 89 c7             	mov    %rax,%rdi
   16f84:	e8 8f 31 00 00       	call   1a118 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   16f89:	48 8b 00             	mov    (%rax),%rax
   16f8c:	48 39 c3             	cmp    %rax,%rbx
   16f8f:	0f 95 c0             	setne  %al
   16f92:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   16f96:	c9                   	leave
   16f97:	c3                   	ret

0000000000016f98 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   16f98:	55                   	push   %rbp
   16f99:	48 89 e5             	mov    %rsp,%rbp
   16f9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   16fa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fa4:	48 8b 00             	mov    (%rax),%rax
   16fa7:	48 8d 50 08          	lea    0x8(%rax),%rdx
   16fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16faf:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   16fb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   16fb6:	5d                   	pop    %rbp
   16fb7:	c3                   	ret

0000000000016fb8 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   16fb8:	55                   	push   %rbp
   16fb9:	48 89 e5             	mov    %rsp,%rbp
   16fbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   16fc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fc4:	48 8b 00             	mov    (%rax),%rax
   16fc7:	5d                   	pop    %rbp
   16fc8:	c3                   	ret

0000000000016fc9 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   16fc9:	55                   	push   %rbp
   16fca:	48 89 e5             	mov    %rsp,%rbp
   16fcd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   16fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fd5:	5d                   	pop    %rbp
   16fd6:	c3                   	ret
   16fd7:	90                   	nop

0000000000016fd8 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Ef>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T scalar)
   16fd8:	55                   	push   %rbp
   16fd9:	48 89 e5             	mov    %rsp,%rbp
   16fdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   16fe0:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
		: x(scalar), y(scalar), z(scalar), w(scalar)
   16fe5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fe9:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   16fee:	f3 0f 11 00          	movss  %xmm0,(%rax)
   16ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ff6:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   16ffb:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   17000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17004:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   17009:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
   1700e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17012:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   17017:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   1701c:	90                   	nop
   1701d:	5d                   	pop    %rbp
   1701e:	c3                   	ret
   1701f:	90                   	nop

0000000000017020 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar)
   17020:	55                   	push   %rbp
   17021:	48 89 e5             	mov    %rsp,%rbp
   17024:	48 83 ec 20          	sub    $0x20,%rsp
   17028:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1702c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
   17031:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   17034:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   17038:	66 0f 6e c2          	movd   %edx,%xmm0
   1703c:	48 89 c7             	mov    %rax,%rdi
   1703f:	e8 94 ff ff ff       	call   16fd8 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Ef>
   17044:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   17048:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1704c:	48 89 d6             	mov    %rdx,%rsi
   1704f:	48 89 c7             	mov    %rax,%rdi
   17052:	e8 cf 30 00 00       	call   1a126 <_ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_>
   17057:	66 48 0f 7e c2       	movq   %xmm0,%rdx
   1705c:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   17060:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17064:	48 89 10             	mov    %rdx,(%rax)
   17067:	66 0f d6 40 08       	movq   %xmm0,0x8(%rax)
   1706c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   17070:	c9                   	leave
   17071:	c3                   	ret

0000000000017072 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   17072:	55                   	push   %rbp
   17073:	48 89 e5             	mov    %rsp,%rbp
   17076:	48 83 ec 10          	sub    $0x10,%rsp
   1707a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1707e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   17082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17086:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1708a:	48 89 d6             	mov    %rdx,%rsi
   1708d:	48 89 c7             	mov    %rax,%rdi
   17090:	e8 ed 47 ff ff       	call   b882 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
   17095:	90                   	nop
   17096:	c9                   	leave
   17097:	c3                   	ret

0000000000017098 <_ZNKSt16initializer_listIPKcE5beginEv>:
      begin() const noexcept { return _M_array; }
   17098:	55                   	push   %rbp
   17099:	48 89 e5             	mov    %rsp,%rbp
   1709c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   170a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170a4:	48 8b 00             	mov    (%rax),%rax
   170a7:	5d                   	pop    %rbp
   170a8:	c3                   	ret
   170a9:	90                   	nop

00000000000170aa <_ZNKSt16initializer_listIPKcE3endEv>:
      end() const noexcept { return begin() + size(); }
   170aa:	55                   	push   %rbp
   170ab:	48 89 e5             	mov    %rsp,%rbp
   170ae:	53                   	push   %rbx
   170af:	48 83 ec 18          	sub    $0x18,%rsp
   170b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   170b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   170bb:	48 89 c7             	mov    %rax,%rdi
   170be:	e8 d5 ff ff ff       	call   17098 <_ZNKSt16initializer_listIPKcE5beginEv>
   170c3:	48 89 c3             	mov    %rax,%rbx
   170c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   170ca:	48 89 c7             	mov    %rax,%rdi
   170cd:	e8 fc 30 00 00       	call   1a1ce <_ZNKSt16initializer_listIPKcE4sizeEv>
   170d2:	48 c1 e0 03          	shl    $0x3,%rax
   170d6:	48 01 d8             	add    %rbx,%rax
   170d9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   170dd:	c9                   	leave
   170de:	c3                   	ret

00000000000170df <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   170df:	55                   	push   %rbp
   170e0:	48 89 e5             	mov    %rsp,%rbp
   170e3:	48 83 ec 10          	sub    $0x10,%rsp
   170e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   170eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   170ef:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   170f3:	48 89 c7             	mov    %rax,%rdi
   170f6:	e8 e5 30 00 00       	call   1a1e0 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   170fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17103:	48 89 d6             	mov    %rdx,%rsi
   17106:	48 89 c7             	mov    %rax,%rdi
   17109:	e8 dd 30 00 00       	call   1a1eb <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   1710e:	c9                   	leave
   1710f:	c3                   	ret

0000000000017110 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   17110:	55                   	push   %rbp
   17111:	48 89 e5             	mov    %rsp,%rbp
   17114:	53                   	push   %rbx
   17115:	48 83 ec 38          	sub    $0x38,%rsp
   17119:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1711d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   17121:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
   17125:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17129:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1712d:	48 89 d6             	mov    %rdx,%rsi
   17130:	48 89 c7             	mov    %rax,%rdi
   17133:	e8 a7 ff ff ff       	call   170df <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   17138:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   1713c:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   17140:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17144:	48 89 c7             	mov    %rax,%rdi
   17147:	e8 ac 38 ff ff       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1714c:	48 89 c2             	mov    %rax,%rdx
   1714f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17153:	48 89 d6             	mov    %rdx,%rsi
   17156:	48 89 c7             	mov    %rax,%rdi
   17159:	e8 9b 37 ff ff       	call   a8f9 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   1715e:	48 89 c6             	mov    %rax,%rsi
   17161:	48 89 df             	mov    %rbx,%rdi
   17164:	e8 a5 52 ff ff       	call   c40e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   17169:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1716d:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   17170:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17174:	48 8b 00             	mov    (%rax),%rax
   17177:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1717b:	48 c1 e2 03          	shl    $0x3,%rdx
   1717f:	48 01 c2             	add    %rax,%rdx
   17182:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17186:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
   1718a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1718e:	48 89 c7             	mov    %rax,%rdi
   17191:	e8 62 38 ff ff       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   17196:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   17199:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1719d:	48 8b 10             	mov    (%rax),%rdx
   171a0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   171a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   171a8:	48 89 c7             	mov    %rax,%rdi
   171ab:	e8 55 30 00 00       	call   1a205 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   171b0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   171b4:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   171b8:	90                   	nop
   171b9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   171bd:	c9                   	leave
   171be:	c3                   	ret

00000000000171bf <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   171bf:	55                   	push   %rbp
   171c0:	48 89 e5             	mov    %rsp,%rbp
   171c3:	48 83 ec 20          	sub    $0x20,%rsp
   171c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   171cb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   171cf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   171d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   171d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   171db:	48 89 d6             	mov    %rdx,%rsi
   171de:	48 89 c7             	mov    %rax,%rdi
   171e1:	e8 50 30 00 00       	call   1a236 <_ZSt8_DestroyIPPKcEvT_S3_>
    }
   171e6:	90                   	nop
   171e7:	c9                   	leave
   171e8:	c3                   	ret
   171e9:	90                   	nop

00000000000171ea <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   171ea:	55                   	push   %rbp
   171eb:	48 89 e5             	mov    %rsp,%rbp
   171ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   171f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   171f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   171fa:	48 8b 10             	mov    (%rax),%rdx
   171fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17201:	48 89 10             	mov    %rdx,(%rax)
   17204:	90                   	nop
   17205:	5d                   	pop    %rbp
   17206:	c3                   	ret
   17207:	90                   	nop

0000000000017208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   17208:	55                   	push   %rbp
   17209:	48 89 e5             	mov    %rsp,%rbp
   1720c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   17210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17214:	5d                   	pop    %rbp
   17215:	c3                   	ret

0000000000017216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   17216:	55                   	push   %rbp
   17217:	48 89 e5             	mov    %rsp,%rbp
   1721a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1721e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17222:	5d                   	pop    %rbp
   17223:	c3                   	ret

0000000000017224 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   17224:	55                   	push   %rbp
   17225:	48 89 e5             	mov    %rsp,%rbp
   17228:	48 83 ec 20          	sub    $0x20,%rsp
   1722c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17230:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17234:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  __a.construct(__p, std::forward<_Args>(__args)...);
   17238:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1723c:	48 89 c7             	mov    %rax,%rdi
   1723f:	e8 d2 ff ff ff       	call   17216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   17244:	48 89 c2             	mov    %rax,%rdx
   17247:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1724b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1724f:	48 89 ce             	mov    %rcx,%rsi
   17252:	48 89 c7             	mov    %rax,%rdi
   17255:	e8 02 30 00 00       	call   1a25c <_ZNSt15__new_allocatorIPKcE9constructIS1_JRS1_EEEvPT_DpOT0_>
	}
   1725a:	90                   	nop
   1725b:	c9                   	leave
   1725c:	c3                   	ret
   1725d:	90                   	nop

000000000001725e <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJRS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
   1725e:	55                   	push   %rbp
   1725f:	48 89 e5             	mov    %rsp,%rbp
   17262:	53                   	push   %rbx
   17263:	48 83 ec 68          	sub    $0x68,%rsp
   17267:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1726b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   1726f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   17273:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   17277:	48 8d 15 c8 c5 00 00 	lea    0xc5c8(%rip),%rdx        # 23846 <_ZZN9VulkanApp6renderEvE11submitCount+0x54e>
   1727e:	be 01 00 00 00       	mov    $0x1,%esi
   17283:	48 89 c7             	mov    %rax,%rdi
   17286:	e8 13 30 00 00       	call   1a29e <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>
   1728b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   1728f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   17293:	48 8b 00             	mov    (%rax),%rax
   17296:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   1729a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1729e:	48 8b 40 08          	mov    0x8(%rax),%rax
   172a2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   172a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   172aa:	48 89 c7             	mov    %rax,%rdi
   172ad:	e8 aa d2 ff ff       	call   1455c <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   172b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   172b6:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   172ba:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   172be:	48 89 d6             	mov    %rdx,%rsi
   172c1:	48 89 c7             	mov    %rax,%rdi
   172c4:	e8 9d 30 00 00       	call   1a366 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
   172c9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   172cd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   172d1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   172d5:	48 89 d6             	mov    %rdx,%rsi
   172d8:	48 89 c7             	mov    %rax,%rdi
   172db:	e8 2e 51 ff ff       	call   c40e <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   172e0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   172e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   172e8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
   172ec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   172f0:	48 89 c7             	mov    %rax,%rdi
   172f3:	e8 1e ff ff ff       	call   17216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   172f8:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   172fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   172ff:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   17306:	00 
	  _Alloc_traits::construct(this->_M_impl,
   17307:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1730b:	48 01 c1             	add    %rax,%rcx
   1730e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   17312:	48 89 ce             	mov    %rcx,%rsi
   17315:	48 89 c7             	mov    %rax,%rdi
   17318:	e8 07 ff ff ff       	call   17224 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
   1731d:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   17324:	00 

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());
   17325:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   17329:	48 89 c7             	mov    %rax,%rdi
   1732c:	e8 c7 36 ff ff       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   17331:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   17334:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   17338:	48 89 c7             	mov    %rax,%rdi
   1733b:	e8 c8 fe ff ff       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   17340:	48 8b 30             	mov    (%rax),%rsi
   17343:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17347:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1734b:	48 89 d9             	mov    %rbx,%rcx
   1734e:	48 89 c7             	mov    %rax,%rdi
   17351:	e8 52 30 00 00       	call   1a3a8 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   17356:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

	      ++__new_finish;
   1735a:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)

	      __new_finish = _S_relocate(__position.base(), __old_finish,
					 __new_finish, _M_get_Tp_allocator());
   1735f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   17363:	48 89 c7             	mov    %rax,%rdi
   17366:	e8 8d 36 ff ff       	call   a9f8 <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1736b:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   1736e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   17372:	48 89 c7             	mov    %rax,%rdi
   17375:	e8 8e fe ff ff       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1737a:	48 8b 00             	mov    (%rax),%rax
   1737d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   17381:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   17385:	48 89 d9             	mov    %rbx,%rcx
   17388:	48 89 c7             	mov    %rax,%rdi
   1738b:	e8 18 30 00 00       	call   1a3a8 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   17390:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
   17394:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   17398:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1739c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   173a0:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   173a4:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(__old_start,
   173a8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   173ac:	48 89 ce             	mov    %rcx,%rsi
   173af:	48 89 c7             	mov    %rax,%rdi
   173b2:	e8 75 36 ff ff       	call   aa2c <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      this->_M_impl._M_start = __new_start;
   173b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   173bb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   173bf:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   173c2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   173c6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   173ca:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   173ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   173d2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   173d9:	00 
   173da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   173de:	48 01 c2             	add    %rax,%rdx
   173e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   173e5:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   173e9:	90                   	nop
   173ea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   173ee:	c9                   	leave
   173ef:	c3                   	ret

00000000000173f0 <_ZNSt6vectorIPKcSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   173f0:	55                   	push   %rbp
   173f1:	48 89 e5             	mov    %rsp,%rbp
   173f4:	48 83 ec 20          	sub    $0x20,%rsp
   173f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   173fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17400:	48 89 c7             	mov    %rax,%rdi
   17403:	e8 7a d1 ff ff       	call   14582 <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   17408:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1740c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17410:	be 01 00 00 00       	mov    $0x1,%esi
   17415:	48 89 c7             	mov    %rax,%rdi
   17418:	e8 bd 2f 00 00       	call   1a3da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>
   1741d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17421:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   17425:	48 89 c7             	mov    %rax,%rdi
   17428:	e8 d9 d1 ff ff       	call   14606 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
      }
   1742d:	c9                   	leave
   1742e:	c3                   	ret
   1742f:	90                   	nop

0000000000017430 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   17430:	55                   	push   %rbp
   17431:	48 89 e5             	mov    %rsp,%rbp
   17434:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17438:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1743c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17440:	5d                   	pop    %rbp
   17441:	c3                   	ret

0000000000017442 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   17442:	55                   	push   %rbp
   17443:	48 89 e5             	mov    %rsp,%rbp
   17446:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1744a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1744e:	5d                   	pop    %rbp
   1744f:	c3                   	ret

0000000000017450 <_ZSt7forwardIR23VkQueueFamilyPropertiesEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   17450:	55                   	push   %rbp
   17451:	48 89 e5             	mov    %rsp,%rbp
   17454:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   17458:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1745c:	5d                   	pop    %rbp
   1745d:	c3                   	ret

000000000001745e <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1745e:	55                   	push   %rbp
   1745f:	48 89 e5             	mov    %rsp,%rbp
   17462:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   17466:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1746a:	5d                   	pop    %rbp
   1746b:	c3                   	ret

000000000001746c <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
   1746c:	55                   	push   %rbp
   1746d:	48 89 e5             	mov    %rsp,%rbp
   17470:	48 83 ec 20          	sub    $0x20,%rsp
   17474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17478:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1747c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17480:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17484:	48 89 d6             	mov    %rdx,%rsi
   17487:	48 89 c7             	mov    %rax,%rdi
   1748a:	e8 8d 2f 00 00       	call   1a41c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1IJS2_EEESt10in_place_tDpOT_>
   1748f:	90                   	nop
   17490:	c9                   	leave
   17491:	c3                   	ret

0000000000017492 <_ZNSt14_Optional_baseISt4pairIj23VkQueueFamilyPropertiesELb1ELb1EEC1IJS2_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
   17492:	55                   	push   %rbp
   17493:	48 89 e5             	mov    %rsp,%rbp
   17496:	53                   	push   %rbx
   17497:	48 83 ec 18          	sub    $0x18,%rsp
   1749b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1749f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_payload(in_place, std::forward<_Args>(__args)...)
   174a3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   174a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   174ab:	48 89 c7             	mov    %rax,%rdi
   174ae:	e8 ab ff ff ff       	call   1745e <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   174b3:	48 89 c6             	mov    %rax,%rsi
   174b6:	48 89 df             	mov    %rbx,%rdi
   174b9:	e8 ae ff ff ff       	call   1746c <_ZNSt17_Optional_payloadISt4pairIj23VkQueueFamilyPropertiesELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
	{ }
   174be:	90                   	nop
   174bf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   174c3:	c9                   	leave
   174c4:	c3                   	ret
   174c5:	90                   	nop

00000000000174c6 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   174c6:	55                   	push   %rbp
   174c7:	48 89 e5             	mov    %rsp,%rbp
   174ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   174ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   174d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174d6:	48 8b 10             	mov    (%rax),%rdx
   174d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174dd:	48 89 10             	mov    %rdx,(%rax)
   174e0:	90                   	nop
   174e1:	5d                   	pop    %rbp
   174e2:	c3                   	ret
   174e3:	90                   	nop

00000000000174e4 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   174e4:	55                   	push   %rbp
   174e5:	48 89 e5             	mov    %rsp,%rbp
   174e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   174ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   174f0:	5d                   	pop    %rbp
   174f1:	c3                   	ret

00000000000174f2 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_>:
      _M_copy_assign(const _Optional_payload_base& __other)
   174f2:	55                   	push   %rbp
   174f3:	48 89 e5             	mov    %rsp,%rbp
   174f6:	53                   	push   %rbx
   174f7:	48 83 ec 18          	sub    $0x18,%rsp
   174fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   174ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_engaged && __other._M_engaged)
   17503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17507:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   1750b:	84 c0                	test   %al,%al
   1750d:	74 35                	je     17544 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x52>
   1750f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17513:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   17517:	84 c0                	test   %al,%al
   17519:	74 29                	je     17544 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x52>
	  this->_M_get() = __other._M_get();
   1751b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1751f:	48 89 c7             	mov    %rax,%rdi
   17522:	e8 31 2f 00 00       	call   1a458 <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
   17527:	48 89 c3             	mov    %rax,%rbx
   1752a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1752e:	48 89 c7             	mov    %rax,%rdi
   17531:	e8 4e 00 00 00       	call   17584 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
   17536:	48 89 de             	mov    %rbx,%rsi
   17539:	48 89 c7             	mov    %rax,%rdi
   1753c:	e8 25 2f 00 00       	call   1a466 <_ZNSt4pairIj23VkQueueFamilyPropertiesEaSERKS1_>
   17541:	90                   	nop
      }
   17542:	eb 38                	jmp    1757c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x8a>
	    if (__other._M_engaged)
   17544:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17548:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   1754c:	84 c0                	test   %al,%al
   1754e:	74 20                	je     17570 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x7e>
	      this->_M_construct(__other._M_get());
   17550:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17554:	48 89 c7             	mov    %rax,%rdi
   17557:	e8 fc 2e 00 00       	call   1a458 <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>
   1755c:	48 89 c2             	mov    %rax,%rdx
   1755f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17563:	48 89 d6             	mov    %rdx,%rsi
   17566:	48 89 c7             	mov    %rax,%rdi
   17569:	e8 36 2f 00 00       	call   1a4a4 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE12_M_constructIJRKS2_EEEvDpOT_>
      }
   1756e:	eb 0c                	jmp    1757c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE14_M_copy_assignERKS3_+0x8a>
	      this->_M_reset();
   17570:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17574:	48 89 c7             	mov    %rax,%rdi
   17577:	e8 6e 2f 00 00       	call   1a4ea <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv>
      }
   1757c:	90                   	nop
   1757d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17581:	c9                   	leave
   17582:	c3                   	ret
   17583:	90                   	nop

0000000000017584 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>:
      _M_get() noexcept
   17584:	55                   	push   %rbp
   17585:	48 89 e5             	mov    %rsp,%rbp
   17588:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   1758c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17590:	5d                   	pop    %rbp
   17591:	c3                   	ret

0000000000017592 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   17592:	55                   	push   %rbp
   17593:	48 89 e5             	mov    %rsp,%rbp
   17596:	48 83 ec 10          	sub    $0x10,%rsp
   1759a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1759e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   175a2:	48 89 c7             	mov    %rax,%rdi
   175a5:	e8 68 2f 00 00       	call   1a512 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   175aa:	90                   	nop
   175ab:	c9                   	leave
   175ac:	c3                   	ret
   175ad:	90                   	nop

00000000000175ae <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
   175ae:	55                   	push   %rbp
   175af:	48 89 e5             	mov    %rsp,%rbp
   175b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
   175b6:	90                   	nop
   175b7:	5d                   	pop    %rbp
   175b8:	c3                   	ret
   175b9:	90                   	nop

00000000000175ba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   175ba:	55                   	push   %rbp
   175bb:	48 89 e5             	mov    %rsp,%rbp
   175be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   175c2:	90                   	nop
   175c3:	5d                   	pop    %rbp
   175c4:	c3                   	ret
   175c5:	90                   	nop

00000000000175c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   175c6:	55                   	push   %rbp
   175c7:	48 89 e5             	mov    %rsp,%rbp
   175ca:	48 83 ec 20          	sub    $0x20,%rsp
   175ce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   175d2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   175d6:	eb 49                	jmp    17621 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x5b>
	{
	  _M_erase(_S_right(__x));
   175d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   175dc:	48 89 c7             	mov    %rax,%rdi
   175df:	e8 39 2f 00 00       	call   1a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   175e4:	48 89 c2             	mov    %rax,%rdx
   175e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175eb:	48 89 d6             	mov    %rdx,%rsi
   175ee:	48 89 c7             	mov    %rax,%rdi
   175f1:	e8 d0 ff ff ff       	call   175c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
   175f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   175fa:	48 89 c7             	mov    %rax,%rdi
   175fd:	e8 2d 2f 00 00       	call   1a52f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   17602:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_drop_node(__x);
   17606:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1760a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1760e:	48 89 d6             	mov    %rdx,%rsi
   17611:	48 89 c7             	mov    %rax,%rdi
   17614:	e8 29 2f 00 00       	call   1a542 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
   17619:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1761d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (__x != 0)
   17621:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   17626:	75 b0                	jne    175d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	}
    }
   17628:	90                   	nop
   17629:	90                   	nop
   1762a:	c9                   	leave
   1762b:	c3                   	ret

000000000001762c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
   1762c:	55                   	push   %rbp
   1762d:	48 89 e5             	mov    %rsp,%rbp
   17630:	48 83 ec 10          	sub    $0x10,%rsp
   17634:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_mbegin(); }
   17638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1763c:	48 89 c7             	mov    %rax,%rdi
   1763f:	e8 38 2f 00 00       	call   1a57c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>
   17644:	c9                   	leave
   17645:	c3                   	ret

0000000000017646 <_ZN9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   17646:	55                   	push   %rbp
   17647:	48 89 e5             	mov    %rsp,%rbp
   1764a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1764e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   17652:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17656:	48 8b 10             	mov    (%rax),%rdx
   17659:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1765d:	48 89 10             	mov    %rdx,(%rax)
   17660:	90                   	nop
   17661:	5d                   	pop    %rbp
   17662:	c3                   	ret
   17663:	90                   	nop

0000000000017664 <_ZNK9__gnu_cxx17__normal_iteratorIP21VkExtensionPropertiesSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   17664:	55                   	push   %rbp
   17665:	48 89 e5             	mov    %rsp,%rbp
   17668:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1766c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17670:	5d                   	pop    %rbp
   17671:	c3                   	ret

0000000000017672 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
   17672:	55                   	push   %rbp
   17673:	48 89 e5             	mov    %rsp,%rbp
   17676:	48 83 ec 10          	sub    $0x10,%rsp
   1767a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1767e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.lower_bound(__x); }
   17682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17686:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1768a:	48 89 d6             	mov    %rdx,%rsi
   1768d:	48 89 c7             	mov    %rax,%rdi
   17690:	e8 f9 2e 00 00       	call   1a58e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>
   17695:	c9                   	leave
   17696:	c3                   	ret
   17697:	90                   	nop

0000000000017698 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   17698:	55                   	push   %rbp
   17699:	48 89 e5             	mov    %rsp,%rbp
   1769c:	48 83 ec 10          	sub    $0x10,%rsp
   176a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
   176a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176a8:	48 89 c7             	mov    %rax,%rdi
   176ab:	e8 2a 2f 00 00       	call   1a5da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>
   176b0:	c9                   	leave
   176b1:	c3                   	ret

00000000000176b2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
   176b2:	55                   	push   %rbp
   176b3:	48 89 e5             	mov    %rsp,%rbp
   176b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   176ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x._M_node == __y._M_node; }
   176be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176c2:	48 8b 10             	mov    (%rax),%rdx
   176c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   176c9:	48 8b 00             	mov    (%rax),%rax
   176cc:	48 39 c2             	cmp    %rax,%rdx
   176cf:	0f 94 c0             	sete   %al
   176d2:	5d                   	pop    %rbp
   176d3:	c3                   	ret

00000000000176d4 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>:
      key_comp() const
   176d4:	55                   	push   %rbp
   176d5:	48 89 e5             	mov    %rsp,%rbp
   176d8:	48 83 ec 10          	sub    $0x10,%rsp
   176dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.key_comp(); }
   176e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   176e4:	48 89 c7             	mov    %rax,%rdi
   176e7:	e8 18 2f 00 00       	call   1a604 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>
   176ec:	90                   	nop
   176ed:	c9                   	leave
   176ee:	c3                   	ret
   176ef:	90                   	nop

00000000000176f0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   176f0:	55                   	push   %rbp
   176f1:	48 89 e5             	mov    %rsp,%rbp
   176f4:	48 83 ec 10          	sub    $0x10,%rsp
   176f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
   176fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17700:	48 8b 00             	mov    (%rax),%rax
   17703:	48 89 c7             	mov    %rax,%rdi
   17706:	e8 05 2f 00 00       	call   1a610 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1770b:	c9                   	leave
   1770c:	c3                   	ret
   1770d:	90                   	nop

000000000001770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
   1770e:	55                   	push   %rbp
   1770f:	48 89 e5             	mov    %rsp,%rbp
   17712:	48 83 ec 20          	sub    $0x20,%rsp
   17716:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1771a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1771e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __x < __y; }
   17722:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17726:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1772a:	48 89 d6             	mov    %rdx,%rsi
   1772d:	48 89 c7             	mov    %rax,%rdi
   17730:	e8 f9 2e 00 00       	call   1a62e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
   17735:	c9                   	leave
   17736:	c3                   	ret

0000000000017737 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
   17737:	55                   	push   %rbp
   17738:	48 89 e5             	mov    %rsp,%rbp
   1773b:	48 83 ec 10          	sub    $0x10,%rsp
   1773f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17743:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
   17747:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1774b:	48 89 c7             	mov    %rax,%rdi
   1774e:	e8 03 2f 00 00       	call   1a656 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   17753:	48 89 c2             	mov    %rax,%rdx
   17756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1775a:	48 89 d6             	mov    %rdx,%rsi
   1775d:	48 89 c7             	mov    %rax,%rdi
   17760:	e8 ff 2e 00 00       	call   1a664 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
   17765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17769:	c9                   	leave
   1776a:	c3                   	ret
   1776b:	90                   	nop

000000000001776c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
   1776c:	55                   	push   %rbp
   1776d:	48 89 e5             	mov    %rsp,%rbp
   17770:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17774:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__it._M_node) { }
   17778:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1777c:	48 8b 10             	mov    (%rax),%rdx
   1777f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17783:	48 89 10             	mov    %rdx,(%rax)
   17786:	90                   	nop
   17787:	5d                   	pop    %rbp
   17788:	c3                   	ret
   17789:	90                   	nop

000000000001778a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1778a:	55                   	push   %rbp
   1778b:	48 89 e5             	mov    %rsp,%rbp
   1778e:	41 54                	push   %r12
   17790:	53                   	push   %rbx
   17791:	48 83 ec 60          	sub    $0x60,%rsp
   17795:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   17799:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   1779d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   177a1:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   177a5:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
   177a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   177ad:	48 89 c7             	mov    %rax,%rdi
   177b0:	e8 fe 2e 00 00       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   177b5:	49 89 c4             	mov    %rax,%r12
   177b8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   177bc:	48 89 c7             	mov    %rax,%rdi
   177bf:	e8 e1 2e 00 00       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   177c4:	48 89 c3             	mov    %rax,%rbx
   177c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   177cb:	48 89 c7             	mov    %rax,%rdi
   177ce:	e8 c4 2e 00 00       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   177d3:	48 89 c2             	mov    %rax,%rdx
   177d6:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   177da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   177de:	4d 89 e0             	mov    %r12,%r8
   177e1:	48 89 d9             	mov    %rbx,%rcx
   177e4:	48 89 c7             	mov    %rax,%rdi
   177e7:	e8 d6 2e 00 00       	call   1a6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   177ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   177f0:	48 89 c7             	mov    %rax,%rdi
   177f3:	e8 ca 33 00 00       	call   1abc2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>
   177f8:	48 89 c2             	mov    %rax,%rdx
   177fb:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   177ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17803:	48 89 ce             	mov    %rcx,%rsi
   17806:	48 89 c7             	mov    %rax,%rdi
   17809:	e8 66 2f 00 00       	call   1a774 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
   1780e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   17812:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__res.second)
   17816:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1781a:	48 85 c0             	test   %rax,%rax
   1781d:	74 1c                	je     1783b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb1>
	  return __z._M_insert(__res);
   1781f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   17823:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17827:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1782b:	48 89 ce             	mov    %rcx,%rsi
   1782e:	48 89 c7             	mov    %rax,%rdi
   17831:	e8 aa 33 00 00       	call   1abe0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>
   17836:	48 89 c3             	mov    %rax,%rbx
   17839:	eb 17                	jmp    17852 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
	return iterator(__res.first);
   1783b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1783f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   17843:	48 89 d6             	mov    %rdx,%rsi
   17846:	48 89 c7             	mov    %rax,%rdi
   17849:	e8 e8 33 00 00       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1784e:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
      }
   17852:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   17856:	48 89 c7             	mov    %rax,%rdi
   17859:	e8 e0 2e 00 00       	call   1a73e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   1785e:	48 89 d8             	mov    %rbx,%rax
   17861:	eb 1a                	jmp    1787d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf3>
   17863:	48 89 c3             	mov    %rax,%rbx
   17866:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1786a:	48 89 c7             	mov    %rax,%rdi
   1786d:	e8 cc 2e 00 00       	call   1a73e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   17872:	48 89 d8             	mov    %rbx,%rax
   17875:	48 89 c7             	mov    %rax,%rdi
   17878:	e8 f3 d0 fe ff       	call   4970 <_Unwind_Resume@plt>
   1787d:	48 83 c4 60          	add    $0x60,%rsp
   17881:	5b                   	pop    %rbx
   17882:	41 5c                	pop    %r12
   17884:	5d                   	pop    %rbp
   17885:	c3                   	ret

0000000000017886 <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   17886:	55                   	push   %rbp
   17887:	48 89 e5             	mov    %rsp,%rbp
   1788a:	48 83 ec 20          	sub    $0x20,%rsp
   1788e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   17892:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17896:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1789a:	48 89 d6             	mov    %rdx,%rsi
   1789d:	48 89 c7             	mov    %rax,%rdi
   178a0:	e8 ab 33 00 00       	call   1ac50 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>
   178a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178a9:	c9                   	leave
   178aa:	c3                   	ret
   178ab:	90                   	nop

00000000000178ac <_ZNKSt6vectorI18VkSurfaceFormatKHRSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   178ac:	55                   	push   %rbp
   178ad:	48 89 e5             	mov    %rsp,%rbp
   178b0:	48 83 ec 20          	sub    $0x20,%rsp
   178b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   178b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   178bc:	48 8d 50 08          	lea    0x8(%rax),%rdx
   178c0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   178c4:	48 89 d6             	mov    %rdx,%rsi
   178c7:	48 89 c7             	mov    %rax,%rdi
   178ca:	e8 81 33 00 00       	call   1ac50 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>
   178cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178d3:	c9                   	leave
   178d4:	c3                   	ret

00000000000178d5 <_ZN9__gnu_cxxeqIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   178d5:	55                   	push   %rbp
   178d6:	48 89 e5             	mov    %rsp,%rbp
   178d9:	53                   	push   %rbx
   178da:	48 83 ec 18          	sub    $0x18,%rsp
   178de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   178e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   178e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   178ea:	48 89 c7             	mov    %rax,%rdi
   178ed:	e8 7c 33 00 00       	call   1ac6e <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   178f2:	48 8b 18             	mov    (%rax),%rbx
   178f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   178f9:	48 89 c7             	mov    %rax,%rdi
   178fc:	e8 6d 33 00 00       	call   1ac6e <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>
   17901:	48 8b 00             	mov    (%rax),%rax
   17904:	48 39 c3             	cmp    %rax,%rbx
   17907:	0f 94 c0             	sete   %al
   1790a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1790e:	c9                   	leave
   1790f:	c3                   	ret

0000000000017910 <_ZN9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   17910:	55                   	push   %rbp
   17911:	48 89 e5             	mov    %rsp,%rbp
   17914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17918:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1791c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17920:	48 8b 10             	mov    (%rax),%rdx
   17923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17927:	48 89 10             	mov    %rdx,(%rax)
   1792a:	90                   	nop
   1792b:	5d                   	pop    %rbp
   1792c:	c3                   	ret
   1792d:	90                   	nop

000000000001792e <_ZNK9__gnu_cxx17__normal_iteratorIP18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1792e:	55                   	push   %rbp
   1792f:	48 89 e5             	mov    %rsp,%rbp
   17932:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   17936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1793a:	5d                   	pop    %rbp
   1793b:	c3                   	ret

000000000001793c <_ZN9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1793c:	55                   	push   %rbp
   1793d:	48 89 e5             	mov    %rsp,%rbp
   17940:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17944:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   17948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1794c:	48 8b 10             	mov    (%rax),%rdx
   1794f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17953:	48 89 10             	mov    %rdx,(%rax)
   17956:	90                   	nop
   17957:	5d                   	pop    %rbp
   17958:	c3                   	ret
   17959:	90                   	nop

000000000001795a <_ZNK9__gnu_cxx17__normal_iteratorIP16VkPresentModeKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1795a:	55                   	push   %rbp
   1795b:	48 89 e5             	mov    %rsp,%rbp
   1795e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   17962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17966:	5d                   	pop    %rbp
   17967:	c3                   	ret

0000000000017968 <_ZSt4moveIRSt6vectorIP9VkImage_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   17968:	55                   	push   %rbp
   17969:	48 89 e5             	mov    %rsp,%rbp
   1796c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   17970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17974:	5d                   	pop    %rbp
   17975:	c3                   	ret

0000000000017976 <_ZNSt6vectorIP9VkImage_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
   17976:	55                   	push   %rbp
   17977:	48 89 e5             	mov    %rsp,%rbp
   1797a:	53                   	push   %rbx
   1797b:	48 83 ec 38          	sub    $0x38,%rsp
   1797f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   17983:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	vector __tmp(get_allocator());
   17987:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1798b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1798f:	48 89 d6             	mov    %rdx,%rsi
   17992:	48 89 c7             	mov    %rax,%rdi
   17995:	e8 e2 32 00 00       	call   1ac7c <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE13get_allocatorEv>
   1799a:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1799e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   179a2:	48 89 d6             	mov    %rdx,%rsi
   179a5:	48 89 c7             	mov    %rax,%rdi
   179a8:	e8 03 33 00 00       	call   1acb0 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1ERKS2_>
   179ad:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   179b1:	48 89 c7             	mov    %rax,%rdi
   179b4:	e8 69 2a ff ff       	call   a422 <_ZNSaIP9VkImage_TED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
   179b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   179bd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   179c1:	48 89 d6             	mov    %rdx,%rsi
   179c4:	48 89 c7             	mov    %rax,%rdi
   179c7:	e8 0a 33 00 00       	call   1acd6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
   179cc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   179d0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   179d4:	48 89 d6             	mov    %rdx,%rsi
   179d7:	48 89 c7             	mov    %rax,%rdi
   179da:	e8 f7 32 00 00       	call   1acd6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
   179df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   179e3:	48 89 c7             	mov    %rax,%rdi
   179e6:	e8 eb 3a ff ff       	call   b4d6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
   179eb:	48 89 c3             	mov    %rax,%rbx
   179ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   179f2:	48 89 c7             	mov    %rax,%rdi
   179f5:	e8 dc 3a ff ff       	call   b4d6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
   179fa:	48 89 de             	mov    %rbx,%rsi
   179fd:	48 89 c7             	mov    %rax,%rdi
   17a00:	e8 29 33 00 00       	call   1ad2e <_ZSt15__alloc_on_moveISaIP9VkImage_TEEvRT_S4_>
      }
   17a05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   17a09:	48 89 c7             	mov    %rax,%rdi
   17a0c:	e8 a3 2a ff ff       	call   a4b4 <_ZNSt6vectorIP9VkImage_TSaIS1_EED1Ev>
   17a11:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17a15:	c9                   	leave
   17a16:	c3                   	ret
   17a17:	90                   	nop

0000000000017a18 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   17a18:	55                   	push   %rbp
   17a19:	48 89 e5             	mov    %rsp,%rbp
   17a1c:	53                   	push   %rbx
   17a1d:	48 83 ec 38          	sub    $0x38,%rsp
   17a21:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   17a25:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   17a29:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   17a2e:	0f 84 e7 01 00 00    	je     17c1b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
	{
	  const size_type __size = size();
   17a34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17a38:	48 89 c7             	mov    %rax,%rdi
   17a3b:	e8 60 d8 ff ff       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   17a40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   17a44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17a48:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   17a4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17a50:	48 8b 40 08          	mov    0x8(%rax),%rax
   17a54:	48 29 c2             	sub    %rax,%rdx
   17a57:	48 89 d0             	mov    %rdx,%rax
   17a5a:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   17a5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  if (__size > max_size() || __navail > max_size() - __size)
   17a62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17a66:	48 89 c7             	mov    %rax,%rdi
   17a69:	e8 e0 32 00 00       	call   1ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   17a6e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   17a72:	72 16                	jb     17a8a <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x72>
   17a74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17a78:	48 89 c7             	mov    %rax,%rdi
   17a7b:	e8 ce 32 00 00       	call   1ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   17a80:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   17a84:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   17a88:	73 07                	jae    17a91 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x79>
   17a8a:	b8 01 00 00 00       	mov    $0x1,%eax
   17a8f:	eb 05                	jmp    17a96 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x7e>
   17a91:	b8 00 00 00 00       	mov    $0x0,%eax
   17a96:	84 c0                	test   %al,%al
	    __builtin_unreachable();

	  if (__navail >= __n)
   17a98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17a9c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   17aa0:	72 33                	jb     17ad5 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0xbd>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
						 __n, _M_get_Tp_allocator());
   17aa2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17aa6:	48 89 c7             	mov    %rax,%rdi
   17aa9:	e8 c2 09 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   17aae:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   17ab1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17ab5:	48 8b 40 08          	mov    0x8(%rax),%rax
   17ab9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   17abd:	48 89 ce             	mov    %rcx,%rsi
   17ac0:	48 89 c7             	mov    %rax,%rdi
   17ac3:	e8 a8 32 00 00       	call   1ad70 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   17ac8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17acc:	48 89 42 08          	mov    %rax,0x8(%rdx)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   17ad0:	e9 46 01 00 00       	jmp    17c1b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   17ad5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   17ad9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17add:	48 8d 15 7c bd 00 00 	lea    0xbd7c(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   17ae4:	48 89 ce             	mov    %rcx,%rsi
   17ae7:	48 89 c7             	mov    %rax,%rdi
   17aea:	e8 ab 32 00 00       	call   1ad9a <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc>
   17aef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   17af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17af7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17afb:	48 89 d6             	mov    %rdx,%rsi
   17afe:	48 89 c7             	mov    %rax,%rdi
   17b01:	e8 5c 33 00 00       	call   1ae62 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm>
   17b06:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   17b0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17b0e:	48 89 c7             	mov    %rax,%rdi
   17b11:	e8 5a 09 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   17b16:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   17b19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b1d:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   17b24:	00 
   17b25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17b29:	48 01 c1             	add    %rax,%rcx
   17b2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17b30:	48 89 c6             	mov    %rax,%rsi
   17b33:	48 89 cf             	mov    %rcx,%rdi
   17b36:	e8 35 32 00 00       	call   1ad70 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   17b3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17b3f:	48 89 c7             	mov    %rax,%rdi
   17b42:	e8 29 09 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   17b47:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   17b4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17b4e:	48 8b 70 08          	mov    0x8(%rax),%rsi
   17b52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17b56:	48 8b 00             	mov    (%rax),%rax
   17b59:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   17b5d:	48 89 c7             	mov    %rax,%rdi
   17b60:	e8 30 33 00 00       	call   1ae95 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   17b65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   17b69:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17b6d:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   17b71:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17b75:	48 8b 12             	mov    (%rdx),%rdx
   17b78:	48 29 d1             	sub    %rdx,%rcx
   17b7b:	48 c1 f9 03          	sar    $0x3,%rcx
   17b7f:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   17b82:	48 89 d6             	mov    %rdx,%rsi
   17b85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17b89:	48 8b 0a             	mov    (%rdx),%rcx
   17b8c:	48 89 f2             	mov    %rsi,%rdx
   17b8f:	48 89 ce             	mov    %rcx,%rsi
   17b92:	48 89 c7             	mov    %rax,%rdi
   17b95:	e8 b6 21 00 00       	call   19d50 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   17b9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17b9e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   17ba2:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   17ba5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17ba9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17bad:	48 01 d0             	add    %rdx,%rax
   17bb0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   17bb7:	00 
   17bb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17bbc:	48 01 c2             	add    %rax,%rdx
   17bbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17bc3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   17bc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17bcb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   17bd2:	00 
   17bd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17bd7:	48 01 c2             	add    %rax,%rdx
   17bda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17bde:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   17be2:	eb 37                	jmp    17c1b <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   17be4:	48 89 c7             	mov    %rax,%rdi
   17be7:	e8 84 c5 fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   17bec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17bf0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17bf4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   17bf8:	48 89 ce             	mov    %rcx,%rsi
   17bfb:	48 89 c7             	mov    %rax,%rdi
   17bfe:	e8 4d 21 00 00       	call   19d50 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   17c03:	e8 c8 cb fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   17c08:	48 89 c3             	mov    %rax,%rbx
   17c0b:	e8 c0 cc fe ff       	call   48d0 <__cxa_end_catch@plt>
   17c10:	48 89 d8             	mov    %rbx,%rax
   17c13:	48 89 c7             	mov    %rax,%rdi
   17c16:	e8 55 cd fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   17c1b:	90                   	nop
   17c1c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17c20:	c9                   	leave
   17c21:	c3                   	ret

0000000000017c22 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   17c22:	55                   	push   %rbp
   17c23:	48 89 e5             	mov    %rsp,%rbp
   17c26:	48 83 ec 20          	sub    $0x20,%rsp
   17c2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17c2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   17c32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c36:	48 8b 40 08          	mov    0x8(%rax),%rax
   17c3a:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   17c3e:	48 c1 f8 03          	sar    $0x3,%rax
   17c42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17c46:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   17c4b:	74 32                	je     17c7f <_ZNSt6vectorIP13VkImageView_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   17c4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c51:	48 89 c7             	mov    %rax,%rdi
   17c54:	e8 17 08 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   17c59:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   17c5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c60:	48 8b 48 08          	mov    0x8(%rax),%rcx
   17c64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17c68:	48 89 ce             	mov    %rcx,%rsi
   17c6b:	48 89 c7             	mov    %rax,%rdi
   17c6e:	e8 0b 08 00 00       	call   1847e <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   17c73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c77:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   17c7b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   17c7f:	90                   	nop
   17c80:	c9                   	leave
   17c81:	c3                   	ret

0000000000017c82 <_ZNSt5arrayI33VkVertexInputAttributeDescriptionLm2EEixEm>:
      operator[](size_type __n) noexcept
   17c82:	55                   	push   %rbp
   17c83:	48 89 e5             	mov    %rsp,%rbp
   17c86:	48 83 ec 10          	sub    $0x10,%rsp
   17c8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return _AT_Type::_S_ref(_M_elems, __n);
   17c92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c96:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17c9a:	48 89 d6             	mov    %rdx,%rsi
   17c9d:	48 89 c7             	mov    %rax,%rdi
   17ca0:	e8 22 32 00 00       	call   1aec7 <_ZNSt14__array_traitsI33VkVertexInputAttributeDescriptionLm2EE6_S_refERA2_KS0_m>
      }
   17ca5:	c9                   	leave
   17ca6:	c3                   	ret
   17ca7:	90                   	nop

0000000000017ca8 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17ca8:	55                   	push   %rbp
   17ca9:	48 89 e5             	mov    %rsp,%rbp
   17cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17cb0:	90                   	nop
   17cb1:	5d                   	pop    %rbp
   17cb2:	c3                   	ret
   17cb3:	90                   	nop

0000000000017cb4 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17cb4:	55                   	push   %rbp
   17cb5:	48 89 e5             	mov    %rsp,%rbp
   17cb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17cbc:	90                   	nop
   17cbd:	5d                   	pop    %rbp
   17cbe:	c3                   	ret
   17cbf:	90                   	nop

0000000000017cc0 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   17cc0:	55                   	push   %rbp
   17cc1:	48 89 e5             	mov    %rsp,%rbp
   17cc4:	48 83 ec 10          	sub    $0x10,%rsp
   17cc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cd0:	48 89 c7             	mov    %rax,%rdi
   17cd3:	e8 34 d3 ff ff       	call   1500c <_ZNSaI28VkGraphicsPipelineCreateInfoED1Ev>
   17cd8:	90                   	nop
   17cd9:	c9                   	leave
   17cda:	c3                   	ret
   17cdb:	90                   	nop

0000000000017cdc <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   17cdc:	55                   	push   %rbp
   17cdd:	48 89 e5             	mov    %rsp,%rbp
   17ce0:	48 83 ec 10          	sub    $0x10,%rsp
   17ce4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ce8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   17cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cf0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17cf4:	48 89 d6             	mov    %rdx,%rsi
   17cf7:	48 89 c7             	mov    %rax,%rdi
   17cfa:	e8 e9 31 00 00       	call   1aee8 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE12_Vector_implC1ERKS1_>
   17cff:	90                   	nop
   17d00:	c9                   	leave
   17d01:	c3                   	ret

0000000000017d02 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17d02:	55                   	push   %rbp
   17d03:	48 89 e5             	mov    %rsp,%rbp
   17d06:	48 83 ec 10          	sub    $0x10,%rsp
   17d0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   17d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d12:	48 8b 50 10          	mov    0x10(%rax),%rdx
   17d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d1a:	48 8b 00             	mov    (%rax),%rax
   17d1d:	48 29 c2             	sub    %rax,%rdx
   17d20:	48 c1 fa 04          	sar    $0x4,%rdx
   17d24:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
   17d2b:	e3 38 8e 
   17d2e:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   17d32:	48 89 c2             	mov    %rax,%rdx
   17d35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d39:	48 8b 08             	mov    (%rax),%rcx
   17d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d40:	48 89 ce             	mov    %rcx,%rsi
   17d43:	48 89 c7             	mov    %rax,%rdi
   17d46:	e8 cf 31 00 00       	call   1af1a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE13_M_deallocateEPS0_m>
      }
   17d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d4f:	48 89 c7             	mov    %rax,%rdi
   17d52:	e8 69 ff ff ff       	call   17cc0 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE12_Vector_implD1Ev>
   17d57:	90                   	nop
   17d58:	c9                   	leave
   17d59:	c3                   	ret

0000000000017d5a <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE5beginEv>:
      begin() const noexcept { return _M_array; }
   17d5a:	55                   	push   %rbp
   17d5b:	48 89 e5             	mov    %rsp,%rbp
   17d5e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17d62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d66:	48 8b 00             	mov    (%rax),%rax
   17d69:	5d                   	pop    %rbp
   17d6a:	c3                   	ret
   17d6b:	90                   	nop

0000000000017d6c <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE3endEv>:
      end() const noexcept { return begin() + size(); }
   17d6c:	55                   	push   %rbp
   17d6d:	48 89 e5             	mov    %rsp,%rbp
   17d70:	53                   	push   %rbx
   17d71:	48 83 ec 18          	sub    $0x18,%rsp
   17d75:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17d79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17d7d:	48 89 c7             	mov    %rax,%rdi
   17d80:	e8 d5 ff ff ff       	call   17d5a <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE5beginEv>
   17d85:	48 89 c3             	mov    %rax,%rbx
   17d88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17d8c:	48 89 c7             	mov    %rax,%rdi
   17d8f:	e8 bc 31 00 00       	call   1af50 <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE4sizeEv>
   17d94:	48 89 c2             	mov    %rax,%rdx
   17d97:	48 89 d0             	mov    %rdx,%rax
   17d9a:	48 c1 e0 03          	shl    $0x3,%rax
   17d9e:	48 01 d0             	add    %rdx,%rax
   17da1:	48 c1 e0 04          	shl    $0x4,%rax
   17da5:	48 01 d8             	add    %rbx,%rax
   17da8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17dac:	c9                   	leave
   17dad:	c3                   	ret

0000000000017dae <_ZSt8distanceIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
   17dae:	55                   	push   %rbp
   17daf:	48 89 e5             	mov    %rsp,%rbp
   17db2:	48 83 ec 10          	sub    $0x10,%rsp
   17db6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17dba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   17dbe:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17dc2:	48 89 c7             	mov    %rax,%rdi
   17dc5:	e8 98 31 00 00       	call   1af62 <_ZSt19__iterator_categoryIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
   17dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17dd2:	48 89 d6             	mov    %rdx,%rsi
   17dd5:	48 89 c7             	mov    %rax,%rdi
   17dd8:	e8 90 31 00 00       	call   1af6d <_ZSt10__distanceIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
    }
   17ddd:	c9                   	leave
   17dde:	c3                   	ret
   17ddf:	90                   	nop

0000000000017de0 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   17de0:	55                   	push   %rbp
   17de1:	48 89 e5             	mov    %rsp,%rbp
   17de4:	53                   	push   %rbx
   17de5:	48 83 ec 38          	sub    $0x38,%rsp
   17de9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   17ded:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   17df1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
   17df5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17df9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17dfd:	48 89 d6             	mov    %rdx,%rsi
   17e00:	48 89 c7             	mov    %rax,%rdi
   17e03:	e8 a6 ff ff ff       	call   17dae <_ZSt8distanceIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E15difference_typeES4_S4_>
   17e08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   17e0c:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   17e10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e14:	48 89 c7             	mov    %rax,%rdi
   17e17:	e8 7e 00 00 00       	call   17e9a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_get_Tp_allocatorEv>
   17e1c:	48 89 c2             	mov    %rax,%rdx
   17e1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17e23:	48 89 d6             	mov    %rdx,%rsi
   17e26:	48 89 c7             	mov    %rax,%rdi
   17e29:	e8 6a 31 00 00       	call   1af98 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE17_S_check_init_lenEmRKS1_>
   17e2e:	48 89 c6             	mov    %rax,%rsi
   17e31:	48 89 df             	mov    %rbx,%rdi
   17e34:	e8 bf 31 00 00       	call   1aff8 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_allocateEm>
   17e39:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17e3d:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   17e40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e44:	48 8b 08             	mov    (%rax),%rcx
   17e47:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17e4b:	48 89 d0             	mov    %rdx,%rax
   17e4e:	48 c1 e0 03          	shl    $0x3,%rax
   17e52:	48 01 d0             	add    %rdx,%rax
   17e55:	48 c1 e0 04          	shl    $0x4,%rax
   17e59:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   17e5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e61:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
   17e65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e69:	48 89 c7             	mov    %rax,%rdi
   17e6c:	e8 29 00 00 00       	call   17e9a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_get_Tp_allocatorEv>
   17e71:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   17e74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e78:	48 8b 10             	mov    (%rax),%rdx
   17e7b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   17e7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   17e83:	48 89 c7             	mov    %rax,%rdi
   17e86:	e8 a0 31 00 00       	call   1b02b <_ZSt22__uninitialized_copy_aIPK28VkGraphicsPipelineCreateInfoPS0_S0_ET0_T_S5_S4_RSaIT1_E>
	  this->_M_impl._M_finish =
   17e8b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17e8f:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   17e93:	90                   	nop
   17e94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17e98:	c9                   	leave
   17e99:	c3                   	ret

0000000000017e9a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   17e9a:	55                   	push   %rbp
   17e9b:	48 89 e5             	mov    %rsp,%rbp
   17e9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   17ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ea6:	5d                   	pop    %rbp
   17ea7:	c3                   	ret

0000000000017ea8 <_ZSt8_DestroyIP28VkGraphicsPipelineCreateInfoS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   17ea8:	55                   	push   %rbp
   17ea9:	48 89 e5             	mov    %rsp,%rbp
   17eac:	48 83 ec 20          	sub    $0x20,%rsp
   17eb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17eb4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17eb8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   17ebc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ec4:	48 89 d6             	mov    %rdx,%rsi
   17ec7:	48 89 c7             	mov    %rax,%rdi
   17eca:	e8 8d 31 00 00       	call   1b05c <_ZSt8_DestroyIP28VkGraphicsPipelineCreateInfoEvT_S2_>
    }
   17ecf:	90                   	nop
   17ed0:	c9                   	leave
   17ed1:	c3                   	ret

0000000000017ed2 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   17ed2:	55                   	push   %rbp
   17ed3:	48 89 e5             	mov    %rsp,%rbp
   17ed6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   17eda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ede:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ee6:	48 8b 00             	mov    (%rax),%rax
   17ee9:	48 29 c2             	sub    %rax,%rdx
   17eec:	48 c1 fa 04          	sar    $0x4,%rdx
   17ef0:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
   17ef7:	e3 38 8e 
   17efa:	48 0f af c2          	imul   %rdx,%rax
   17efe:	5d                   	pop    %rbp
   17eff:	c3                   	ret

0000000000017f00 <_ZNSaIP12VkPipeline_TEC1Ev>:
   17f00:	55                   	push   %rbp
   17f01:	48 89 e5             	mov    %rsp,%rbp
   17f04:	48 83 ec 10          	sub    $0x10,%rsp
   17f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f10:	48 89 c7             	mov    %rax,%rdi
   17f13:	e8 6a 31 00 00       	call   1b082 <_ZNSt15__new_allocatorIP12VkPipeline_TEC1Ev>
   17f18:	90                   	nop
   17f19:	c9                   	leave
   17f1a:	c3                   	ret
   17f1b:	90                   	nop

0000000000017f1c <_ZNSaIP12VkPipeline_TED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   17f1c:	55                   	push   %rbp
   17f1d:	48 89 e5             	mov    %rsp,%rbp
   17f20:	48 83 ec 10          	sub    $0x10,%rsp
   17f24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f2c:	48 89 c7             	mov    %rax,%rdi
   17f2f:	e8 5a 31 00 00       	call   1b08e <_ZNSt15__new_allocatorIP12VkPipeline_TED1Ev>
   17f34:	90                   	nop
   17f35:	c9                   	leave
   17f36:	c3                   	ret
   17f37:	90                   	nop

0000000000017f38 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   17f38:	55                   	push   %rbp
   17f39:	48 89 e5             	mov    %rsp,%rbp
   17f3c:	53                   	push   %rbx
   17f3d:	48 83 ec 28          	sub    $0x28,%rsp
   17f41:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17f45:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   17f49:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
   17f4d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   17f51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17f55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17f59:	48 89 d6             	mov    %rdx,%rsi
   17f5c:	48 89 c7             	mov    %rax,%rdi
   17f5f:	e8 35 31 00 00       	call   1b099 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_>
   17f64:	48 89 c1             	mov    %rax,%rcx
   17f67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17f6b:	48 89 c2             	mov    %rax,%rdx
   17f6e:	48 89 ce             	mov    %rcx,%rsi
   17f71:	48 89 df             	mov    %rbx,%rdi
   17f74:	e8 81 31 00 00       	call   1b0fa <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
   17f79:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   17f7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17f81:	48 89 d6             	mov    %rdx,%rsi
   17f84:	48 89 c7             	mov    %rax,%rdi
   17f87:	e8 cc 31 00 00       	call   1b158 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE21_M_default_initializeEm>
   17f8c:	eb 1a                	jmp    17fa8 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EEC1EmRKS2_+0x70>
   17f8e:	48 89 c3             	mov    %rax,%rbx
   17f91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17f95:	48 89 c7             	mov    %rax,%rdi
   17f98:	e8 59 00 00 00       	call   17ff6 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>
   17f9d:	48 89 d8             	mov    %rbx,%rax
   17fa0:	48 89 c7             	mov    %rax,%rdi
   17fa3:	e8 c8 c9 fe ff       	call   4970 <_Unwind_Resume@plt>
   17fa8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17fac:	c9                   	leave
   17fad:	c3                   	ret

0000000000017fae <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   17fae:	55                   	push   %rbp
   17faf:	48 89 e5             	mov    %rsp,%rbp
   17fb2:	48 83 ec 10          	sub    $0x10,%rsp
   17fb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17fba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fbe:	48 8b 10             	mov    (%rax),%rdx
   17fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fc5:	48 89 d6             	mov    %rdx,%rsi
   17fc8:	48 89 c7             	mov    %rax,%rdi
   17fcb:	e8 c8 31 00 00       	call   1b198 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>
   17fd0:	c9                   	leave
   17fd1:	c3                   	ret

0000000000017fd2 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   17fd2:	55                   	push   %rbp
   17fd3:	48 89 e5             	mov    %rsp,%rbp
   17fd6:	48 83 ec 10          	sub    $0x10,%rsp
   17fda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   17fde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fe2:	48 8b 10             	mov    (%rax),%rdx
   17fe5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fe9:	48 89 d6             	mov    %rdx,%rsi
   17fec:	48 89 c7             	mov    %rax,%rdi
   17fef:	e8 b6 31 00 00       	call   1b1aa <_ZNKSt6vectorIP12VkPipeline_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   17ff4:	c9                   	leave
   17ff5:	c3                   	ret

0000000000017ff6 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   17ff6:	55                   	push   %rbp
   17ff7:	48 89 e5             	mov    %rsp,%rbp
   17ffa:	48 83 ec 10          	sub    $0x10,%rsp
   17ffe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   18002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18006:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1800a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1800e:	48 8b 00             	mov    (%rax),%rax
   18011:	48 29 c2             	sub    %rax,%rdx
   18014:	48 89 d0             	mov    %rdx,%rax
   18017:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   1801b:	48 89 c2             	mov    %rax,%rdx
   1801e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18022:	48 8b 08             	mov    (%rax),%rcx
   18025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18029:	48 89 ce             	mov    %rcx,%rsi
   1802c:	48 89 c7             	mov    %rax,%rdi
   1802f:	e8 ae 31 00 00       	call   1b1e2 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   18034:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18038:	48 89 c7             	mov    %rax,%rdi
   1803b:	e8 b4 d0 ff ff       	call   150f4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>
   18040:	90                   	nop
   18041:	c9                   	leave
   18042:	c3                   	ret
   18043:	90                   	nop

0000000000018044 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18044:	55                   	push   %rbp
   18045:	48 89 e5             	mov    %rsp,%rbp
   18048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1804c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18050:	5d                   	pop    %rbp
   18051:	c3                   	ret

0000000000018052 <_ZSt8_DestroyIPP12VkPipeline_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   18052:	55                   	push   %rbp
   18053:	48 89 e5             	mov    %rsp,%rbp
   18056:	48 83 ec 20          	sub    $0x20,%rsp
   1805a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1805e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   18062:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18066:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1806a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1806e:	48 89 d6             	mov    %rdx,%rsi
   18071:	48 89 c7             	mov    %rax,%rdi
   18074:	e8 9e 31 00 00       	call   1b217 <_ZSt8_DestroyIPP12VkPipeline_TEvT_S3_>
    }
   18079:	90                   	nop
   1807a:	c9                   	leave
   1807b:	c3                   	ret

000000000001807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1807c:	55                   	push   %rbp
   1807d:	48 89 e5             	mov    %rsp,%rbp
   18080:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18088:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1808c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18090:	48 8b 00             	mov    (%rax),%rax
   18093:	48 29 c2             	sub    %rax,%rdx
   18096:	48 89 d0             	mov    %rdx,%rax
   18099:	48 c1 f8 03          	sar    $0x3,%rax
   1809d:	5d                   	pop    %rbp
   1809e:	c3                   	ret
   1809f:	90                   	nop

00000000000180a0 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   180a0:	55                   	push   %rbp
   180a1:	48 89 e5             	mov    %rsp,%rbp
   180a4:	53                   	push   %rbx
   180a5:	48 83 ec 38          	sub    $0x38,%rsp
   180a9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   180ad:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   180b1:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   180b6:	0f 84 e7 01 00 00    	je     182a3 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   180bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   180c0:	48 89 c7             	mov    %rax,%rdi
   180c3:	e8 b4 ff ff ff       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   180c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   180cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   180d0:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   180d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   180d8:	48 8b 40 08          	mov    0x8(%rax),%rax
   180dc:	48 29 c2             	sub    %rax,%rdx
   180df:	48 89 d0             	mov    %rdx,%rax
   180e2:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   180e6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   180ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   180ee:	48 89 c7             	mov    %rax,%rdi
   180f1:	e8 48 31 00 00       	call   1b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>
   180f6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   180fa:	72 16                	jb     18112 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x72>
   180fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18100:	48 89 c7             	mov    %rax,%rdi
   18103:	e8 36 31 00 00       	call   1b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>
   18108:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1810c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18110:	73 07                	jae    18119 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x79>
   18112:	b8 01 00 00 00       	mov    $0x1,%eax
   18117:	eb 05                	jmp    1811e <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x7e>
   18119:	b8 00 00 00 00       	mov    $0x0,%eax
   1811e:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   18120:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18124:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18128:	72 33                	jb     1815d <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   1812a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1812e:	48 89 c7             	mov    %rax,%rdi
   18131:	e8 dc 1c 00 00       	call   19e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18136:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   18139:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1813d:	48 8b 40 08          	mov    0x8(%rax),%rax
   18141:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18145:	48 89 ce             	mov    %rcx,%rsi
   18148:	48 89 c7             	mov    %rax,%rdi
   1814b:	e8 10 31 00 00       	call   1b260 <_ZSt27__uninitialized_default_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   18150:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18154:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   18158:	e9 46 01 00 00       	jmp    182a3 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   1815d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18161:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18165:	48 8d 15 f4 b6 00 00 	lea    0xb6f4(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   1816c:	48 89 ce             	mov    %rcx,%rsi
   1816f:	48 89 c7             	mov    %rax,%rdi
   18172:	e8 13 31 00 00       	call   1b28a <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc>
   18177:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1817b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1817f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18183:	48 89 d6             	mov    %rdx,%rsi
   18186:	48 89 c7             	mov    %rax,%rdi
   18189:	e8 c4 31 00 00       	call   1b352 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE11_M_allocateEm>
   1818e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   18192:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18196:	48 89 c7             	mov    %rax,%rdi
   18199:	e8 74 1c 00 00       	call   19e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1819e:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   181a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   181a5:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   181ac:	00 
   181ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   181b1:	48 01 c1             	add    %rax,%rcx
   181b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   181b8:	48 89 c6             	mov    %rax,%rsi
   181bb:	48 89 cf             	mov    %rcx,%rdi
   181be:	e8 9d 30 00 00       	call   1b260 <_ZSt27__uninitialized_default_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   181c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   181c7:	48 89 c7             	mov    %rax,%rdi
   181ca:	e8 43 1c 00 00       	call   19e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   181cf:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   181d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   181d6:	48 8b 70 08          	mov    0x8(%rax),%rsi
   181da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   181de:	48 8b 00             	mov    (%rax),%rax
   181e1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   181e5:	48 89 c7             	mov    %rax,%rdi
   181e8:	e8 98 31 00 00       	call   1b385 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   181ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   181f1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   181f5:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   181f9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   181fd:	48 8b 12             	mov    (%rdx),%rdx
   18200:	48 29 d1             	sub    %rdx,%rcx
   18203:	48 c1 f9 03          	sar    $0x3,%rcx
   18207:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1820a:	48 89 d6             	mov    %rdx,%rsi
   1820d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18211:	48 8b 0a             	mov    (%rdx),%rcx
   18214:	48 89 f2             	mov    %rsi,%rdx
   18217:	48 89 ce             	mov    %rcx,%rsi
   1821a:	48 89 c7             	mov    %rax,%rdi
   1821d:	e8 ba 1b 00 00       	call   19ddc <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   18222:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18226:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1822a:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1822d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18231:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18235:	48 01 d0             	add    %rdx,%rax
   18238:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1823f:	00 
   18240:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18244:	48 01 c2             	add    %rax,%rdx
   18247:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1824b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1824f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18253:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1825a:	00 
   1825b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1825f:	48 01 c2             	add    %rax,%rdx
   18262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18266:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1826a:	eb 37                	jmp    182a3 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   1826c:	48 89 c7             	mov    %rax,%rdi
   1826f:	e8 fc be fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   18274:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18278:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1827c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   18280:	48 89 ce             	mov    %rcx,%rsi
   18283:	48 89 c7             	mov    %rax,%rdi
   18286:	e8 51 1b 00 00       	call   19ddc <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1828b:	e8 40 c5 fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   18290:	48 89 c3             	mov    %rax,%rbx
   18293:	e8 38 c6 fe ff       	call   48d0 <__cxa_end_catch@plt>
   18298:	48 89 d8             	mov    %rbx,%rax
   1829b:	48 89 c7             	mov    %rax,%rdi
   1829e:	e8 cd c6 fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   182a3:	90                   	nop
   182a4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   182a8:	c9                   	leave
   182a9:	c3                   	ret

00000000000182aa <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   182aa:	55                   	push   %rbp
   182ab:	48 89 e5             	mov    %rsp,%rbp
   182ae:	48 83 ec 20          	sub    $0x20,%rsp
   182b2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   182b6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   182ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182be:	48 8b 40 08          	mov    0x8(%rax),%rax
   182c2:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   182c6:	48 c1 f8 03          	sar    $0x3,%rax
   182ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   182ce:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   182d3:	74 32                	je     18307 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   182d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182d9:	48 89 c7             	mov    %rax,%rdi
   182dc:	e8 31 1b 00 00       	call   19e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   182e1:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   182e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182e8:	48 8b 48 08          	mov    0x8(%rax),%rcx
   182ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   182f0:	48 89 ce             	mov    %rcx,%rsi
   182f3:	48 89 c7             	mov    %rax,%rdi
   182f6:	e8 25 1b 00 00       	call   19e20 <_ZSt8_DestroyIPP15VkFramebuffer_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   182fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   182ff:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18303:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   18307:	90                   	nop
   18308:	c9                   	leave
   18309:	c3                   	ret

000000000001830a <_ZNSt15__new_allocatorIP13VkImageView_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1830a:	55                   	push   %rbp
   1830b:	48 89 e5             	mov    %rsp,%rbp
   1830e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18312:	90                   	nop
   18313:	5d                   	pop    %rbp
   18314:	c3                   	ret
   18315:	90                   	nop

0000000000018316 <_ZNSt15__new_allocatorIP13VkImageView_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   18316:	55                   	push   %rbp
   18317:	48 89 e5             	mov    %rsp,%rbp
   1831a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1831e:	90                   	nop
   1831f:	5d                   	pop    %rbp
   18320:	c3                   	ret
   18321:	90                   	nop

0000000000018322 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   18322:	55                   	push   %rbp
   18323:	48 89 e5             	mov    %rsp,%rbp
   18326:	48 83 ec 10          	sub    $0x10,%rsp
   1832a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1832e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   18332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18336:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1833a:	48 89 d6             	mov    %rdx,%rsi
   1833d:	48 89 c7             	mov    %rax,%rdi
   18340:	e8 73 30 00 00       	call   1b3b8 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1ERKS2_>
   18345:	90                   	nop
   18346:	c9                   	leave
   18347:	c3                   	ret

0000000000018348 <_ZNKSt16initializer_listIP13VkImageView_TE5beginEv>:
      begin() const noexcept { return _M_array; }
   18348:	55                   	push   %rbp
   18349:	48 89 e5             	mov    %rsp,%rbp
   1834c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18354:	48 8b 00             	mov    (%rax),%rax
   18357:	5d                   	pop    %rbp
   18358:	c3                   	ret
   18359:	90                   	nop

000000000001835a <_ZNKSt16initializer_listIP13VkImageView_TE3endEv>:
      end() const noexcept { return begin() + size(); }
   1835a:	55                   	push   %rbp
   1835b:	48 89 e5             	mov    %rsp,%rbp
   1835e:	53                   	push   %rbx
   1835f:	48 83 ec 18          	sub    $0x18,%rsp
   18363:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18367:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1836b:	48 89 c7             	mov    %rax,%rdi
   1836e:	e8 d5 ff ff ff       	call   18348 <_ZNKSt16initializer_listIP13VkImageView_TE5beginEv>
   18373:	48 89 c3             	mov    %rax,%rbx
   18376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1837a:	48 89 c7             	mov    %rax,%rdi
   1837d:	e8 68 30 00 00       	call   1b3ea <_ZNKSt16initializer_listIP13VkImageView_TE4sizeEv>
   18382:	48 c1 e0 03          	shl    $0x3,%rax
   18386:	48 01 d8             	add    %rbx,%rax
   18389:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1838d:	c9                   	leave
   1838e:	c3                   	ret

000000000001838f <_ZSt8distanceIPKP13VkImageView_TENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   1838f:	55                   	push   %rbp
   18390:	48 89 e5             	mov    %rsp,%rbp
   18393:	48 83 ec 10          	sub    $0x10,%rsp
   18397:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1839b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   1839f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   183a3:	48 89 c7             	mov    %rax,%rdi
   183a6:	e8 51 30 00 00       	call   1b3fc <_ZSt19__iterator_categoryIPKP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   183ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   183af:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   183b3:	48 89 d6             	mov    %rdx,%rsi
   183b6:	48 89 c7             	mov    %rax,%rdi
   183b9:	e8 49 30 00 00       	call   1b407 <_ZSt10__distanceIPKP13VkImageView_TENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   183be:	c9                   	leave
   183bf:	c3                   	ret

00000000000183c0 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   183c0:	55                   	push   %rbp
   183c1:	48 89 e5             	mov    %rsp,%rbp
   183c4:	53                   	push   %rbx
   183c5:	48 83 ec 38          	sub    $0x38,%rsp
   183c9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   183cd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   183d1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
   183d5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   183d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   183dd:	48 89 d6             	mov    %rdx,%rsi
   183e0:	48 89 c7             	mov    %rax,%rdi
   183e3:	e8 a7 ff ff ff       	call   1838f <_ZSt8distanceIPKP13VkImageView_TENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   183e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   183ec:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   183f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   183f4:	48 89 c7             	mov    %rax,%rdi
   183f7:	e8 74 00 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   183fc:	48 89 c2             	mov    %rax,%rdx
   183ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18403:	48 89 d6             	mov    %rdx,%rsi
   18406:	48 89 c7             	mov    %rax,%rdi
   18409:	e8 13 30 00 00       	call   1b421 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_S_check_init_lenEmRKS2_>
   1840e:	48 89 c6             	mov    %rax,%rsi
   18411:	48 89 df             	mov    %rbx,%rdi
   18414:	e8 49 2a 00 00       	call   1ae62 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm>
   18419:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1841d:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   18420:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18424:	48 8b 00             	mov    (%rax),%rax
   18427:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1842b:	48 c1 e2 03          	shl    $0x3,%rdx
   1842f:	48 01 c2             	add    %rax,%rdx
   18432:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18436:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
   1843a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1843e:	48 89 c7             	mov    %rax,%rdi
   18441:	e8 2a 00 00 00       	call   18470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18446:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   18449:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1844d:	48 8b 10             	mov    (%rax),%rdx
   18450:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   18454:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18458:	48 89 c7             	mov    %rax,%rdi
   1845b:	e8 21 30 00 00       	call   1b481 <_ZSt22__uninitialized_copy_aIPKP13VkImageView_TPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   18460:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18464:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   18468:	90                   	nop
   18469:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1846d:	c9                   	leave
   1846e:	c3                   	ret
   1846f:	90                   	nop

0000000000018470 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   18470:	55                   	push   %rbp
   18471:	48 89 e5             	mov    %rsp,%rbp
   18474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   18478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1847c:	5d                   	pop    %rbp
   1847d:	c3                   	ret

000000000001847e <_ZSt8_DestroyIPP13VkImageView_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1847e:	55                   	push   %rbp
   1847f:	48 89 e5             	mov    %rsp,%rbp
   18482:	48 83 ec 20          	sub    $0x20,%rsp
   18486:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1848a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1848e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   18492:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18496:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1849a:	48 89 d6             	mov    %rdx,%rsi
   1849d:	48 89 c7             	mov    %rax,%rdi
   184a0:	e8 0d 30 00 00       	call   1b4b2 <_ZSt8_DestroyIPP13VkImageView_TEvT_S3_>
    }
   184a5:	90                   	nop
   184a6:	c9                   	leave
   184a7:	c3                   	ret

00000000000184a8 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   184a8:	55                   	push   %rbp
   184a9:	48 89 e5             	mov    %rsp,%rbp
   184ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   184b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   184b8:	5d                   	pop    %rbp
   184b9:	c3                   	ret

00000000000184ba <_ZN9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   184ba:	55                   	push   %rbp
   184bb:	48 89 e5             	mov    %rsp,%rbp
   184be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   184c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   184ca:	48 8b 10             	mov    (%rax),%rdx
   184cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184d1:	48 89 10             	mov    %rdx,(%rax)
   184d4:	90                   	nop
   184d5:	5d                   	pop    %rbp
   184d6:	c3                   	ret
   184d7:	90                   	nop

00000000000184d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP15VkFramebuffer_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   184d8:	55                   	push   %rbp
   184d9:	48 89 e5             	mov    %rsp,%rbp
   184dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   184e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184e4:	5d                   	pop    %rbp
   184e5:	c3                   	ret

00000000000184e6 <_ZN9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   184e6:	55                   	push   %rbp
   184e7:	48 89 e5             	mov    %rsp,%rbp
   184ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   184f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   184f6:	48 8b 10             	mov    (%rax),%rdx
   184f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184fd:	48 89 10             	mov    %rdx,(%rax)
   18500:	90                   	nop
   18501:	5d                   	pop    %rbp
   18502:	c3                   	ret
   18503:	90                   	nop

0000000000018504 <_ZNK9__gnu_cxx17__normal_iteratorIPP13VkImageView_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   18504:	55                   	push   %rbp
   18505:	48 89 e5             	mov    %rsp,%rbp
   18508:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1850c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18510:	5d                   	pop    %rbp
   18511:	c3                   	ret

0000000000018512 <_ZSt4moveIRSt6vectorIP17VkCommandBuffer_TSaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   18512:	55                   	push   %rbp
   18513:	48 89 e5             	mov    %rsp,%rbp
   18516:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1851a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1851e:	5d                   	pop    %rbp
   1851f:	c3                   	ret

0000000000018520 <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
   18520:	55                   	push   %rbp
   18521:	48 89 e5             	mov    %rsp,%rbp
   18524:	53                   	push   %rbx
   18525:	48 83 ec 38          	sub    $0x38,%rsp
   18529:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1852d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	vector __tmp(get_allocator());
   18531:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18535:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18539:	48 89 d6             	mov    %rdx,%rsi
   1853c:	48 89 c7             	mov    %rax,%rdi
   1853f:	e8 94 2f 00 00       	call   1b4d8 <_ZNKSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13get_allocatorEv>
   18544:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   18548:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1854c:	48 89 d6             	mov    %rdx,%rsi
   1854f:	48 89 c7             	mov    %rax,%rdi
   18552:	e8 b5 2f 00 00       	call   1b50c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1ERKS2_>
   18557:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1855b:	48 89 c7             	mov    %rax,%rdi
   1855e:	e8 47 e2 fe ff       	call   67aa <_ZNSaIP17VkCommandBuffer_TED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
   18563:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18567:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1856b:	48 89 d6             	mov    %rdx,%rsi
   1856e:	48 89 c7             	mov    %rax,%rdi
   18571:	e8 bc 2f 00 00       	call   1b532 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
   18576:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1857a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1857e:	48 89 d6             	mov    %rdx,%rsi
   18581:	48 89 c7             	mov    %rax,%rdi
   18584:	e8 a9 2f 00 00       	call   1b532 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
   18589:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1858d:	48 89 c7             	mov    %rax,%rdi
   18590:	e8 73 e4 fe ff       	call   6a08 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18595:	48 89 c3             	mov    %rax,%rbx
   18598:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1859c:	48 89 c7             	mov    %rax,%rdi
   1859f:	e8 64 e4 fe ff       	call   6a08 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   185a4:	48 89 de             	mov    %rbx,%rsi
   185a7:	48 89 c7             	mov    %rax,%rdi
   185aa:	e8 db 2f 00 00       	call   1b58a <_ZSt15__alloc_on_moveISaIP17VkCommandBuffer_TEEvRT_S4_>
      }
   185af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   185b3:	48 89 c7             	mov    %rax,%rdi
   185b6:	e8 81 e2 fe ff       	call   683c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EED1Ev>
   185bb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   185bf:	c9                   	leave
   185c0:	c3                   	ret
   185c1:	90                   	nop

00000000000185c2 <_ZNKSt6vectorIN3vkh6VertexILNS0_11PositionDimE0ELNS0_8ColorDimE0EEESaIS4_EE11_M_data_ptrIS4_EEPT_S9_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   185c2:	55                   	push   %rbp
   185c3:	48 89 e5             	mov    %rsp,%rbp
   185c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   185ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   185ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   185d2:	5d                   	pop    %rbp
   185d3:	c3                   	ret

00000000000185d4 <_ZNKSt6vectorItSaItEE11_M_data_ptrItEEPT_S4_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   185d4:	55                   	push   %rbp
   185d5:	48 89 e5             	mov    %rsp,%rbp
   185d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   185dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   185e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   185e4:	5d                   	pop    %rbp
   185e5:	c3                   	ret

00000000000185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   185e6:	55                   	push   %rbp
   185e7:	48 89 e5             	mov    %rsp,%rbp
   185ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   185ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185f2:	48 8b 50 08          	mov    0x8(%rax),%rdx
   185f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185fa:	48 8b 00             	mov    (%rax),%rax
   185fd:	48 29 c2             	sub    %rax,%rdx
   18600:	48 89 d0             	mov    %rdx,%rax
   18603:	48 c1 f8 03          	sar    $0x3,%rax
   18607:	5d                   	pop    %rbp
   18608:	c3                   	ret
   18609:	90                   	nop

000000000001860a <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1860a:	55                   	push   %rbp
   1860b:	48 89 e5             	mov    %rsp,%rbp
   1860e:	53                   	push   %rbx
   1860f:	48 83 ec 38          	sub    $0x38,%rsp
   18613:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   18617:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1861b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   18620:	0f 84 e7 01 00 00    	je     1880d <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   18626:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1862a:	48 89 c7             	mov    %rax,%rdi
   1862d:	e8 b4 ff ff ff       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   18632:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18636:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1863a:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1863e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18642:	48 8b 40 08          	mov    0x8(%rax),%rax
   18646:	48 29 c2             	sub    %rax,%rdx
   18649:	48 89 d0             	mov    %rdx,%rax
   1864c:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   18650:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   18654:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18658:	48 89 c7             	mov    %rax,%rdi
   1865b:	e8 4a 2f 00 00       	call   1b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>
   18660:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   18664:	72 16                	jb     1867c <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x72>
   18666:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1866a:	48 89 c7             	mov    %rax,%rdi
   1866d:	e8 38 2f 00 00       	call   1b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>
   18672:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   18676:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1867a:	73 07                	jae    18683 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x79>
   1867c:	b8 01 00 00 00       	mov    $0x1,%eax
   18681:	eb 05                	jmp    18688 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x7e>
   18683:	b8 00 00 00 00       	mov    $0x0,%eax
   18688:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1868a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1868e:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18692:	72 33                	jb     186c7 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   18694:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18698:	48 89 c7             	mov    %rax,%rdi
   1869b:	e8 5e 19 00 00       	call   19ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   186a0:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   186a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   186a7:	48 8b 40 08          	mov    0x8(%rax),%rax
   186ab:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   186af:	48 89 ce             	mov    %rcx,%rsi
   186b2:	48 89 c7             	mov    %rax,%rdi
   186b5:	e8 12 2f 00 00       	call   1b5cc <_ZSt27__uninitialized_default_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   186ba:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   186be:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   186c2:	e9 46 01 00 00       	jmp    1880d <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   186c7:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   186cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   186cf:	48 8d 15 8a b1 00 00 	lea    0xb18a(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   186d6:	48 89 ce             	mov    %rcx,%rsi
   186d9:	48 89 c7             	mov    %rax,%rdi
   186dc:	e8 15 2f 00 00       	call   1b5f6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc>
   186e1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   186e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   186e9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   186ed:	48 89 d6             	mov    %rdx,%rsi
   186f0:	48 89 c7             	mov    %rax,%rdi
   186f3:	e8 c6 2f 00 00       	call   1b6be <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE11_M_allocateEm>
   186f8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   186fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18700:	48 89 c7             	mov    %rax,%rdi
   18703:	e8 f6 18 00 00       	call   19ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18708:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   1870b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1870f:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   18716:	00 
   18717:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1871b:	48 01 c1             	add    %rax,%rcx
   1871e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18722:	48 89 c6             	mov    %rax,%rsi
   18725:	48 89 cf             	mov    %rcx,%rdi
   18728:	e8 9f 2e 00 00       	call   1b5cc <_ZSt27__uninitialized_default_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1872d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18731:	48 89 c7             	mov    %rax,%rdi
   18734:	e8 c5 18 00 00       	call   19ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18739:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1873c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18740:	48 8b 70 08          	mov    0x8(%rax),%rsi
   18744:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18748:	48 8b 00             	mov    (%rax),%rax
   1874b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1874f:	48 89 c7             	mov    %rax,%rdi
   18752:	e8 9a 2f 00 00       	call   1b6f1 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   18757:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1875b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1875f:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   18763:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18767:	48 8b 12             	mov    (%rdx),%rdx
   1876a:	48 29 d1             	sub    %rdx,%rcx
   1876d:	48 c1 f9 03          	sar    $0x3,%rcx
   18771:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   18774:	48 89 d6             	mov    %rdx,%rsi
   18777:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1877b:	48 8b 0a             	mov    (%rdx),%rcx
   1877e:	48 89 f2             	mov    %rsi,%rdx
   18781:	48 89 ce             	mov    %rcx,%rsi
   18784:	48 89 c7             	mov    %rax,%rdi
   18787:	e8 3c 18 00 00       	call   19fc8 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1878c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18790:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18794:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   18797:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1879b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1879f:	48 01 d0             	add    %rdx,%rax
   187a2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   187a9:	00 
   187aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   187ae:	48 01 c2             	add    %rax,%rdx
   187b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   187b5:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   187b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   187bd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   187c4:	00 
   187c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   187c9:	48 01 c2             	add    %rax,%rdx
   187cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   187d0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   187d4:	eb 37                	jmp    1880d <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   187d6:	48 89 c7             	mov    %rax,%rdi
   187d9:	e8 92 b9 fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   187de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   187e2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   187e6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   187ea:	48 89 ce             	mov    %rcx,%rsi
   187ed:	48 89 c7             	mov    %rax,%rdi
   187f0:	e8 d3 17 00 00       	call   19fc8 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   187f5:	e8 d6 bf fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   187fa:	48 89 c3             	mov    %rax,%rbx
   187fd:	e8 ce c0 fe ff       	call   48d0 <__cxa_end_catch@plt>
   18802:	48 89 d8             	mov    %rbx,%rax
   18805:	48 89 c7             	mov    %rax,%rdi
   18808:	e8 63 c1 fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   1880d:	90                   	nop
   1880e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18812:	c9                   	leave
   18813:	c3                   	ret

0000000000018814 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   18814:	55                   	push   %rbp
   18815:	48 89 e5             	mov    %rsp,%rbp
   18818:	48 83 ec 20          	sub    $0x20,%rsp
   1881c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18820:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18824:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18828:	48 8b 40 08          	mov    0x8(%rax),%rax
   1882c:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   18830:	48 c1 f8 03          	sar    $0x3,%rax
   18834:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18838:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1883d:	74 32                	je     18871 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   1883f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18843:	48 89 c7             	mov    %rax,%rdi
   18846:	e8 b3 17 00 00       	call   19ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1884b:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1884e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18852:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18856:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1885a:	48 89 ce             	mov    %rcx,%rsi
   1885d:	48 89 c7             	mov    %rax,%rdi
   18860:	e8 a7 17 00 00       	call   1a00c <_ZSt8_DestroyIPP10VkBuffer_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   18865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18869:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1886d:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   18871:	90                   	nop
   18872:	c9                   	leave
   18873:	c3                   	ret

0000000000018874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18874:	55                   	push   %rbp
   18875:	48 89 e5             	mov    %rsp,%rbp
   18878:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1887c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18880:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18884:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18888:	48 8b 00             	mov    (%rax),%rax
   1888b:	48 29 c2             	sub    %rax,%rdx
   1888e:	48 89 d0             	mov    %rdx,%rax
   18891:	48 c1 f8 03          	sar    $0x3,%rax
   18895:	5d                   	pop    %rbp
   18896:	c3                   	ret
   18897:	90                   	nop

0000000000018898 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   18898:	55                   	push   %rbp
   18899:	48 89 e5             	mov    %rsp,%rbp
   1889c:	53                   	push   %rbx
   1889d:	48 83 ec 38          	sub    $0x38,%rsp
   188a1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   188a5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   188a9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   188ae:	0f 84 e7 01 00 00    	je     18a9b <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   188b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188b8:	48 89 c7             	mov    %rax,%rdi
   188bb:	e8 b4 ff ff ff       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   188c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   188c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188c8:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   188cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188d0:	48 8b 40 08          	mov    0x8(%rax),%rax
   188d4:	48 29 c2             	sub    %rax,%rdx
   188d7:	48 89 d0             	mov    %rdx,%rax
   188da:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   188de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   188e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188e6:	48 89 c7             	mov    %rax,%rdi
   188e9:	e8 36 2e 00 00       	call   1b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>
   188ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   188f2:	72 16                	jb     1890a <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x72>
   188f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   188f8:	48 89 c7             	mov    %rax,%rdi
   188fb:	e8 24 2e 00 00       	call   1b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>
   18900:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   18904:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18908:	73 07                	jae    18911 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x79>
   1890a:	b8 01 00 00 00       	mov    $0x1,%eax
   1890f:	eb 05                	jmp    18916 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x7e>
   18911:	b8 00 00 00 00       	mov    $0x0,%eax
   18916:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   18918:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1891c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   18920:	72 33                	jb     18955 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   18922:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18926:	48 89 c7             	mov    %rax,%rdi
   18929:	e8 94 17 00 00       	call   1a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1892e:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   18931:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18935:	48 8b 40 08          	mov    0x8(%rax),%rax
   18939:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1893d:	48 89 ce             	mov    %rcx,%rsi
   18940:	48 89 c7             	mov    %rax,%rdi
   18943:	e8 fe 2d 00 00       	call   1b746 <_ZSt27__uninitialized_default_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   18948:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1894c:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   18950:	e9 46 01 00 00       	jmp    18a9b <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   18955:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   18959:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1895d:	48 8d 15 fc ae 00 00 	lea    0xaefc(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   18964:	48 89 ce             	mov    %rcx,%rsi
   18967:	48 89 c7             	mov    %rax,%rdi
   1896a:	e8 01 2e 00 00       	call   1b770 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc>
   1896f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   18973:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18977:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1897b:	48 89 d6             	mov    %rdx,%rsi
   1897e:	48 89 c7             	mov    %rax,%rdi
   18981:	e8 b2 2e 00 00       	call   1b838 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE11_M_allocateEm>
   18986:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1898a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1898e:	48 89 c7             	mov    %rax,%rdi
   18991:	e8 2c 17 00 00       	call   1a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18996:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   18999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1899d:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   189a4:	00 
   189a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   189a9:	48 01 c1             	add    %rax,%rcx
   189ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   189b0:	48 89 c6             	mov    %rax,%rsi
   189b3:	48 89 cf             	mov    %rcx,%rdi
   189b6:	e8 8b 2d 00 00       	call   1b746 <_ZSt27__uninitialized_default_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   189bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   189bf:	48 89 c7             	mov    %rax,%rdi
   189c2:	e8 fb 16 00 00       	call   1a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   189c7:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   189ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   189ce:	48 8b 70 08          	mov    0x8(%rax),%rsi
   189d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   189d6:	48 8b 00             	mov    (%rax),%rax
   189d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   189dd:	48 89 c7             	mov    %rax,%rdi
   189e0:	e8 86 2e 00 00       	call   1b86b <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   189e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   189e9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   189ed:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   189f1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   189f5:	48 8b 12             	mov    (%rdx),%rdx
   189f8:	48 29 d1             	sub    %rdx,%rcx
   189fb:	48 c1 f9 03          	sar    $0x3,%rcx
   189ff:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   18a02:	48 89 d6             	mov    %rdx,%rsi
   18a05:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18a09:	48 8b 0a             	mov    (%rdx),%rcx
   18a0c:	48 89 f2             	mov    %rsi,%rdx
   18a0f:	48 89 ce             	mov    %rcx,%rsi
   18a12:	48 89 c7             	mov    %rax,%rdi
   18a15:	e8 72 16 00 00       	call   1a08c <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   18a1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a1e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18a22:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   18a25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18a29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18a2d:	48 01 d0             	add    %rdx,%rax
   18a30:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18a37:	00 
   18a38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18a3c:	48 01 c2             	add    %rax,%rdx
   18a3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a43:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   18a47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18a4b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18a52:	00 
   18a53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18a57:	48 01 c2             	add    %rax,%rdx
   18a5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a5e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   18a62:	eb 37                	jmp    18a9b <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   18a64:	48 89 c7             	mov    %rax,%rdi
   18a67:	e8 04 b7 fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   18a6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a70:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18a74:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   18a78:	48 89 ce             	mov    %rcx,%rsi
   18a7b:	48 89 c7             	mov    %rax,%rdi
   18a7e:	e8 09 16 00 00       	call   1a08c <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   18a83:	e8 48 bd fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   18a88:	48 89 c3             	mov    %rax,%rbx
   18a8b:	e8 40 be fe ff       	call   48d0 <__cxa_end_catch@plt>
   18a90:	48 89 d8             	mov    %rbx,%rax
   18a93:	48 89 c7             	mov    %rax,%rdi
   18a96:	e8 d5 be fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   18a9b:	90                   	nop
   18a9c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18aa0:	c9                   	leave
   18aa1:	c3                   	ret

0000000000018aa2 <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   18aa2:	55                   	push   %rbp
   18aa3:	48 89 e5             	mov    %rsp,%rbp
   18aa6:	48 83 ec 20          	sub    $0x20,%rsp
   18aaa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18aae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18ab2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ab6:	48 8b 40 08          	mov    0x8(%rax),%rax
   18aba:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   18abe:	48 c1 f8 03          	sar    $0x3,%rax
   18ac2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18ac6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   18acb:	74 32                	je     18aff <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   18acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ad1:	48 89 c7             	mov    %rax,%rdi
   18ad4:	e8 e9 15 00 00       	call   1a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   18ad9:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   18adc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ae0:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18ae4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18ae8:	48 89 ce             	mov    %rcx,%rsi
   18aeb:	48 89 c7             	mov    %rax,%rdi
   18aee:	e8 dd 15 00 00       	call   1a0d0 <_ZSt8_DestroyIPP16VkDeviceMemory_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   18af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18af7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18afb:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   18aff:	90                   	nop
   18b00:	c9                   	leave
   18b01:	c3                   	ret

0000000000018b02 <_ZNSt6chrono13duration_castINS_8durationIfSt5ratioILl1ELl1EEEElS2_ILl1ELl1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>:
      duration_cast(const duration<_Rep, _Period>& __d)
   18b02:	55                   	push   %rbp
   18b03:	48 89 e5             	mov    %rsp,%rbp
   18b06:	48 83 ec 10          	sub    $0x10,%rsp
   18b0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __dc::__cast(__d);
   18b0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b12:	48 89 c7             	mov    %rax,%rdi
   18b15:	e8 83 2d 00 00       	call   1b89d <_ZNSt6chrono20__duration_cast_implINS_8durationIfSt5ratioILl1ELl1EEEES2_ILl1ELl1000000000EEfLb1ELb0EE6__castIlS5_EES4_RKNS1_IT_T0_EE>
      }
   18b1a:	c9                   	leave
   18b1b:	c3                   	ret

0000000000018b1c <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IfiiiEET_T0_T1_T2_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)
   18b1c:	55                   	push   %rbp
   18b1d:	48 89 e5             	mov    %rsp,%rbp
   18b20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18b24:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
   18b29:	89 75 f0             	mov    %esi,-0x10(%rbp)
   18b2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   18b2f:	89 4d e8             	mov    %ecx,-0x18(%rbp)
		: x(static_cast<T>(_x))
   18b32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b36:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   18b3b:	f3 0f 11 00          	movss  %xmm0,(%rax)
		, y(static_cast<T>(_y))
   18b3f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18b43:	f3 0f 2a 45 f0       	cvtsi2ssl -0x10(%rbp),%xmm0
   18b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b4c:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
		, z(static_cast<T>(_z))
   18b51:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18b55:	f3 0f 2a 45 ec       	cvtsi2ssl -0x14(%rbp),%xmm0
   18b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b5e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
		, w(static_cast<T>(_w))
   18b63:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18b67:	f3 0f 2a 45 e8       	cvtsi2ssl -0x18(%rbp),%xmm0
   18b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b70:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   18b75:	90                   	nop
   18b76:	5d                   	pop    %rbp
   18b77:	c3                   	ret

0000000000018b78 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IifiiEET_T0_T1_T2_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)
   18b78:	55                   	push   %rbp
   18b79:	48 89 e5             	mov    %rsp,%rbp
   18b7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18b80:	89 75 f4             	mov    %esi,-0xc(%rbp)
   18b83:	f3 0f 11 45 f0       	movss  %xmm0,-0x10(%rbp)
   18b88:	89 55 ec             	mov    %edx,-0x14(%rbp)
   18b8b:	89 4d e8             	mov    %ecx,-0x18(%rbp)
		: x(static_cast<T>(_x))
   18b8e:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18b92:	f3 0f 2a 45 f4       	cvtsi2ssl -0xc(%rbp),%xmm0
   18b97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b9b:	f3 0f 11 00          	movss  %xmm0,(%rax)
		, y(static_cast<T>(_y))
   18b9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ba3:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   18ba8:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
		, z(static_cast<T>(_z))
   18bad:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18bb1:	f3 0f 2a 45 ec       	cvtsi2ssl -0x14(%rbp),%xmm0
   18bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bba:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
		, w(static_cast<T>(_w))
   18bbf:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18bc3:	f3 0f 2a 45 e8       	cvtsi2ssl -0x18(%rbp),%xmm0
   18bc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bcc:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   18bd1:	90                   	nop
   18bd2:	5d                   	pop    %rbp
   18bd3:	c3                   	ret

0000000000018bd4 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IiifiEET_T0_T1_T2_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)
   18bd4:	55                   	push   %rbp
   18bd5:	48 89 e5             	mov    %rsp,%rbp
   18bd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18bdc:	89 75 f4             	mov    %esi,-0xc(%rbp)
   18bdf:	89 55 f0             	mov    %edx,-0x10(%rbp)
   18be2:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
   18be7:	89 4d e8             	mov    %ecx,-0x18(%rbp)
		: x(static_cast<T>(_x))
   18bea:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18bee:	f3 0f 2a 45 f4       	cvtsi2ssl -0xc(%rbp),%xmm0
   18bf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bf7:	f3 0f 11 00          	movss  %xmm0,(%rax)
		, y(static_cast<T>(_y))
   18bfb:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18bff:	f3 0f 2a 45 f0       	cvtsi2ssl -0x10(%rbp),%xmm0
   18c04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c08:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
		, z(static_cast<T>(_z))
   18c0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c11:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
   18c16:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
		, w(static_cast<T>(_w))
   18c1b:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18c1f:	f3 0f 2a 45 e8       	cvtsi2ssl -0x18(%rbp),%xmm0
   18c24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c28:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   18c2d:	90                   	nop
   18c2e:	5d                   	pop    %rbp
   18c2f:	c3                   	ret

0000000000018c30 <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1IiiifEET_T0_T1_T2_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)
   18c30:	55                   	push   %rbp
   18c31:	48 89 e5             	mov    %rsp,%rbp
   18c34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18c38:	89 75 f4             	mov    %esi,-0xc(%rbp)
   18c3b:	89 55 f0             	mov    %edx,-0x10(%rbp)
   18c3e:	89 4d ec             	mov    %ecx,-0x14(%rbp)
   18c41:	f3 0f 11 45 e8       	movss  %xmm0,-0x18(%rbp)
		: x(static_cast<T>(_x))
   18c46:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18c4a:	f3 0f 2a 45 f4       	cvtsi2ssl -0xc(%rbp),%xmm0
   18c4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c53:	f3 0f 11 00          	movss  %xmm0,(%rax)
		, y(static_cast<T>(_y))
   18c57:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18c5b:	f3 0f 2a 45 f0       	cvtsi2ssl -0x10(%rbp),%xmm0
   18c60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c64:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
		, z(static_cast<T>(_z))
   18c69:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18c6d:	f3 0f 2a 45 ec       	cvtsi2ssl -0x14(%rbp),%xmm0
   18c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c76:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
		, w(static_cast<T>(_w))
   18c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c7f:	f3 0f 10 45 e8       	movss  -0x18(%rbp),%xmm0
   18c84:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   18c89:	90                   	nop
   18c8a:	5d                   	pop    %rbp
   18c8b:	c3                   	ret

0000000000018c8c <_ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_>:

		return x < genType(0) ? genType(-1) : genType(1);
	}
*/
	template<length_t L, typename T, qualifier Q>
	GLM_FUNC_QUALIFIER vec<L, T, Q> normalize(vec<L, T, Q> const& x)
   18c8c:	55                   	push   %rbp
   18c8d:	48 89 e5             	mov    %rsp,%rbp
   18c90:	48 83 ec 30          	sub    $0x30,%rsp
   18c94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

		return detail::compute_normalize<L, T, Q, detail::is_aligned<Q>::value>::call(x);
   18c98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c9c:	48 89 c7             	mov    %rax,%rdi
   18c9f:	e8 45 2c 00 00       	call   1b8e9 <_ZN3glm6detail17compute_normalizeILi3EfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEE>
   18ca4:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18ca9:	0f 28 c1             	movaps %xmm1,%xmm0
   18cac:	48 89 45 f4          	mov    %rax,-0xc(%rbp)
   18cb0:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   18cb5:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   18cb9:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   18cbe:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   18cc1:	66 48 0f 6e c0       	movq   %rax,%xmm0
   18cc6:	c9                   	leave
   18cc7:	c3                   	ret

0000000000018cc8 <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEES3_RKS4_>:
			v.y * scalar.x,
			v.z * scalar.x);
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)
   18cc8:	55                   	push   %rbp
   18cc9:	48 89 e5             	mov    %rsp,%rbp
   18ccc:	48 83 ec 40          	sub    $0x40,%rsp
   18cd0:	f3 0f 11 45 dc       	movss  %xmm0,-0x24(%rbp)
   18cd5:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
	{
		return vec<3, T, Q>(
			scalar * v.x,
			scalar * v.y,
			scalar * v.z);
   18cd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18cdd:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
		return vec<3, T, Q>(
   18ce2:	0f 28 d0             	movaps %xmm0,%xmm2
   18ce5:	f3 0f 59 55 dc       	mulss  -0x24(%rbp),%xmm2
			scalar * v.y,
   18cea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18cee:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
		return vec<3, T, Q>(
   18cf3:	0f 28 c8             	movaps %xmm0,%xmm1
   18cf6:	f3 0f 59 4d dc       	mulss  -0x24(%rbp),%xmm1
			scalar * v.x,
   18cfb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18cff:	f3 0f 10 00          	movss  (%rax),%xmm0
		return vec<3, T, Q>(
   18d03:	f3 0f 59 45 dc       	mulss  -0x24(%rbp),%xmm0
   18d08:	66 0f 7e c2          	movd   %xmm0,%edx
   18d0c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
   18d10:	66 0f 6e c2          	movd   %edx,%xmm0
   18d14:	48 89 c7             	mov    %rax,%rdi
   18d17:	e8 12 b1 ff ff       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
			scalar * v.z);
   18d1c:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   18d20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   18d24:	8b 45 fc             	mov    -0x4(%rbp),%eax
   18d27:	89 45 f0             	mov    %eax,-0x10(%rbp)
   18d2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18d2e:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   18d33:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   18d36:	66 48 0f 6e c0       	movq   %rax,%xmm0
   18d3b:	c9                   	leave
   18d3c:	c3                   	ret
   18d3d:	90                   	nop

0000000000018d3e <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>:

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i) const
   18d3e:	55                   	push   %rbp
   18d3f:	48 89 e5             	mov    %rsp,%rbp
   18d42:	48 83 ec 10          	sub    $0x10,%rsp
   18d46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d4a:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		assert(i < this->length());
   18d4d:	e8 f8 06 00 00       	call   1944a <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv>
   18d52:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   18d55:	7c 28                	jl     18d7f <_ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi+0x41>
   18d57:	48 8d 05 22 ab 00 00 	lea    0xab22(%rip),%rax        # 23880 <_ZZN9VulkanApp6renderEvE11submitCount+0x588>
   18d5e:	48 89 c1             	mov    %rax,%rcx
   18d61:	ba 2a 01 00 00       	mov    $0x12a,%edx
   18d66:	48 8d 05 eb a9 00 00 	lea    0xa9eb(%rip),%rax        # 23758 <_ZZN9VulkanApp6renderEvE11submitCount+0x460>
   18d6d:	48 89 c6             	mov    %rax,%rsi
   18d70:	48 8d 05 09 aa 00 00 	lea    0xaa09(%rip),%rax        # 23780 <_ZZN9VulkanApp6renderEvE11submitCount+0x488>
   18d77:	48 89 c7             	mov    %rax,%rdi
   18d7a:	e8 31 b5 fe ff       	call   42b0 <__assert_fail@plt>
		return this->value[i];
   18d7f:	8b 45 f4             	mov    -0xc(%rbp),%eax
   18d82:	48 98                	cltq
   18d84:	48 c1 e0 04          	shl    $0x4,%rax
   18d88:	48 89 c2             	mov    %rax,%rdx
   18d8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d8f:	48 01 d0             	add    %rdx,%rax
	}
   18d92:	c9                   	leave
   18d93:	c3                   	ret

0000000000018d94 <_ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
   18d94:	55                   	push   %rbp
   18d95:	48 89 e5             	mov    %rsp,%rbp
   18d98:	53                   	push   %rbx
   18d99:	48 83 ec 28          	sub    $0x28,%rsp
   18d9d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18da1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
		return vec<4, T, Q>(v1) += v2;
   18da5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18da9:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18dad:	48 8b 00             	mov    (%rax),%rax
   18db0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18db4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   18db8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   18dbc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   18dc0:	48 89 d6             	mov    %rdx,%rsi
   18dc3:	48 89 c7             	mov    %rax,%rdi
   18dc6:	e8 83 2b 00 00       	call   1b94e <_ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE>
   18dcb:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18dcf:	48 8b 00             	mov    (%rax),%rax
   18dd2:	48 89 c1             	mov    %rax,%rcx
   18dd5:	48 89 d3             	mov    %rdx,%rbx
   18dd8:	48 89 d0             	mov    %rdx,%rax
	}
   18ddb:	66 48 0f 6e c1       	movq   %rcx,%xmm0
   18de0:	66 48 0f 6e c8       	movq   %rax,%xmm1
   18de5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18de9:	c9                   	leave
   18dea:	c3                   	ret

0000000000018deb <_ZN3glm8lookAtRHIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_>:
	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
   18deb:	55                   	push   %rbp
   18dec:	48 89 e5             	mov    %rsp,%rbp
   18def:	53                   	push   %rbx
   18df0:	48 83 ec 78          	sub    $0x78,%rsp
   18df4:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   18df8:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   18dfc:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   18e00:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
		vec<3, T, Q> const f(normalize(center - eye));
   18e04:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   18e08:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   18e0c:	48 89 d6             	mov    %rdx,%rsi
   18e0f:	48 89 c7             	mov    %rax,%rdi
   18e12:	e8 88 2b 00 00       	call   1b99f <_ZN3glmmiIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>
   18e17:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18e1c:	0f 28 c1             	movaps %xmm1,%xmm0
   18e1f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   18e23:	f3 0f 11 45 e0       	movss  %xmm0,-0x20(%rbp)
   18e28:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   18e2c:	48 89 c7             	mov    %rax,%rdi
   18e2f:	e8 58 fe ff ff       	call   18c8c <_ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_>
   18e34:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18e39:	0f 28 c1             	movaps %xmm1,%xmm0
   18e3c:	48 89 45 cc          	mov    %rax,-0x34(%rbp)
   18e40:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
		vec<3, T, Q> const s(normalize(cross(f, up)));
   18e45:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   18e49:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
   18e4d:	48 89 d6             	mov    %rdx,%rsi
   18e50:	48 89 c7             	mov    %rax,%rdi
   18e53:	e8 d5 2b 00 00       	call   1ba2d <_ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>
   18e58:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18e5d:	0f 28 c1             	movaps %xmm1,%xmm0
   18e60:	48 89 45 e4          	mov    %rax,-0x1c(%rbp)
   18e64:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
   18e69:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
   18e6d:	48 89 c7             	mov    %rax,%rdi
   18e70:	e8 17 fe ff ff       	call   18c8c <_ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_>
   18e75:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18e7a:	0f 28 c1             	movaps %xmm1,%xmm0
   18e7d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   18e81:	f3 0f 11 45 c8       	movss  %xmm0,-0x38(%rbp)
		vec<3, T, Q> const u(cross(s, f));
   18e86:	48 8d 55 cc          	lea    -0x34(%rbp),%rdx
   18e8a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   18e8e:	48 89 d6             	mov    %rdx,%rsi
   18e91:	48 89 c7             	mov    %rax,%rdi
   18e94:	e8 94 2b 00 00       	call   1ba2d <_ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>
   18e99:	66 48 0f 7e c0       	movq   %xmm0,%rax
   18e9e:	0f 28 c1             	movaps %xmm1,%xmm0
   18ea1:	48 89 45 b4          	mov    %rax,-0x4c(%rbp)
   18ea5:	f3 0f 11 45 bc       	movss  %xmm0,-0x44(%rbp)
		mat<4, 4, T, Q> Result(1);
   18eaa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18eae:	f3 0f 10 05 16 ac 00 	movss  0xac16(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   18eb5:	00 
   18eb6:	f3 0f 11 00          	movss  %xmm0,(%rax)
   18eba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ebe:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18ec2:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   18ec7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ecb:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18ecf:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
   18ed4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ed8:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18edc:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
   18ee1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ee5:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18ee9:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
   18eee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ef2:	f3 0f 10 05 d2 ab 00 	movss  0xabd2(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   18ef9:	00 
   18efa:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
   18eff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f03:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f07:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
   18f0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f10:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f14:	f3 0f 11 40 1c       	movss  %xmm0,0x1c(%rax)
   18f19:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f1d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f21:	f3 0f 11 40 20       	movss  %xmm0,0x20(%rax)
   18f26:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f2a:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f2e:	f3 0f 11 40 24       	movss  %xmm0,0x24(%rax)
   18f33:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f37:	f3 0f 10 05 8d ab 00 	movss  0xab8d(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   18f3e:	00 
   18f3f:	f3 0f 11 40 28       	movss  %xmm0,0x28(%rax)
   18f44:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f48:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f4c:	f3 0f 11 40 2c       	movss  %xmm0,0x2c(%rax)
   18f51:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f55:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f59:	f3 0f 11 40 30       	movss  %xmm0,0x30(%rax)
   18f5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f62:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f66:	f3 0f 11 40 34       	movss  %xmm0,0x34(%rax)
   18f6b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f6f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   18f73:	f3 0f 11 40 38       	movss  %xmm0,0x38(%rax)
   18f78:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f7c:	f3 0f 10 05 48 ab 00 	movss  0xab48(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   18f83:	00 
   18f84:	f3 0f 11 40 3c       	movss  %xmm0,0x3c(%rax)
		Result[0][0] = s.x;
   18f89:	f3 0f 10 65 c0       	movss  -0x40(%rbp),%xmm4
   18f8e:	f3 0f 11 65 8c       	movss  %xmm4,-0x74(%rbp)
   18f93:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18f97:	be 00 00 00 00       	mov    $0x0,%esi
   18f9c:	48 89 c7             	mov    %rax,%rdi
   18f9f:	e8 d2 d5 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   18fa4:	be 00 00 00 00       	mov    $0x0,%esi
   18fa9:	48 89 c7             	mov    %rax,%rdi
   18fac:	e8 1b d6 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   18fb1:	f3 0f 10 65 8c       	movss  -0x74(%rbp),%xmm4
   18fb6:	f3 0f 11 20          	movss  %xmm4,(%rax)
		Result[1][0] = s.y;
   18fba:	f3 0f 10 6d c4       	movss  -0x3c(%rbp),%xmm5
   18fbf:	f3 0f 11 6d 8c       	movss  %xmm5,-0x74(%rbp)
   18fc4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18fc8:	be 01 00 00 00       	mov    $0x1,%esi
   18fcd:	48 89 c7             	mov    %rax,%rdi
   18fd0:	e8 a1 d5 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   18fd5:	be 00 00 00 00       	mov    $0x0,%esi
   18fda:	48 89 c7             	mov    %rax,%rdi
   18fdd:	e8 ea d5 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   18fe2:	f3 0f 10 6d 8c       	movss  -0x74(%rbp),%xmm5
   18fe7:	f3 0f 11 28          	movss  %xmm5,(%rax)
		Result[2][0] = s.z;
   18feb:	f3 0f 10 75 c8       	movss  -0x38(%rbp),%xmm6
   18ff0:	f3 0f 11 75 8c       	movss  %xmm6,-0x74(%rbp)
   18ff5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18ff9:	be 02 00 00 00       	mov    $0x2,%esi
   18ffe:	48 89 c7             	mov    %rax,%rdi
   19001:	e8 70 d5 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19006:	be 00 00 00 00       	mov    $0x0,%esi
   1900b:	48 89 c7             	mov    %rax,%rdi
   1900e:	e8 b9 d5 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   19013:	f3 0f 10 75 8c       	movss  -0x74(%rbp),%xmm6
   19018:	f3 0f 11 30          	movss  %xmm6,(%rax)
		Result[0][1] = u.x;
   1901c:	f3 0f 10 7d b4       	movss  -0x4c(%rbp),%xmm7
   19021:	f3 0f 11 7d 8c       	movss  %xmm7,-0x74(%rbp)
   19026:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1902a:	be 00 00 00 00       	mov    $0x0,%esi
   1902f:	48 89 c7             	mov    %rax,%rdi
   19032:	e8 3f d5 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19037:	be 01 00 00 00       	mov    $0x1,%esi
   1903c:	48 89 c7             	mov    %rax,%rdi
   1903f:	e8 88 d5 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   19044:	f3 0f 10 7d 8c       	movss  -0x74(%rbp),%xmm7
   19049:	f3 0f 11 38          	movss  %xmm7,(%rax)
		Result[1][1] = u.y;
   1904d:	f3 0f 10 65 b8       	movss  -0x48(%rbp),%xmm4
   19052:	f3 0f 11 65 8c       	movss  %xmm4,-0x74(%rbp)
   19057:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1905b:	be 01 00 00 00       	mov    $0x1,%esi
   19060:	48 89 c7             	mov    %rax,%rdi
   19063:	e8 0e d5 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19068:	be 01 00 00 00       	mov    $0x1,%esi
   1906d:	48 89 c7             	mov    %rax,%rdi
   19070:	e8 57 d5 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   19075:	f3 0f 10 65 8c       	movss  -0x74(%rbp),%xmm4
   1907a:	f3 0f 11 20          	movss  %xmm4,(%rax)
		Result[2][1] = u.z;
   1907e:	f3 0f 10 6d bc       	movss  -0x44(%rbp),%xmm5
   19083:	f3 0f 11 6d 8c       	movss  %xmm5,-0x74(%rbp)
   19088:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1908c:	be 02 00 00 00       	mov    $0x2,%esi
   19091:	48 89 c7             	mov    %rax,%rdi
   19094:	e8 dd d4 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19099:	be 01 00 00 00       	mov    $0x1,%esi
   1909e:	48 89 c7             	mov    %rax,%rdi
   190a1:	e8 26 d5 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   190a6:	f3 0f 10 6d 8c       	movss  -0x74(%rbp),%xmm5
   190ab:	f3 0f 11 28          	movss  %xmm5,(%rax)
		Result[0][2] =-f.x;
   190af:	f3 0f 10 45 cc       	movss  -0x34(%rbp),%xmm0
   190b4:	f3 0f 10 0d 34 aa 00 	movss  0xaa34(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   190bb:	00 
   190bc:	0f 57 c1             	xorps  %xmm1,%xmm0
   190bf:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)
   190c4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   190c8:	be 00 00 00 00       	mov    $0x0,%esi
   190cd:	48 89 c7             	mov    %rax,%rdi
   190d0:	e8 a1 d4 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   190d5:	be 02 00 00 00       	mov    $0x2,%esi
   190da:	48 89 c7             	mov    %rax,%rdi
   190dd:	e8 ea d4 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   190e2:	f3 0f 10 45 8c       	movss  -0x74(%rbp),%xmm0
   190e7:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[1][2] =-f.y;
   190eb:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
   190f0:	f3 0f 10 0d f8 a9 00 	movss  0xa9f8(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   190f7:	00 
   190f8:	0f 57 c1             	xorps  %xmm1,%xmm0
   190fb:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)
   19100:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19104:	be 01 00 00 00       	mov    $0x1,%esi
   19109:	48 89 c7             	mov    %rax,%rdi
   1910c:	e8 65 d4 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19111:	be 02 00 00 00       	mov    $0x2,%esi
   19116:	48 89 c7             	mov    %rax,%rdi
   19119:	e8 ae d4 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1911e:	f3 0f 10 45 8c       	movss  -0x74(%rbp),%xmm0
   19123:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[2][2] =-f.z;
   19127:	f3 0f 10 45 d4       	movss  -0x2c(%rbp),%xmm0
   1912c:	f3 0f 10 0d bc a9 00 	movss  0xa9bc(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   19133:	00 
   19134:	0f 57 c1             	xorps  %xmm1,%xmm0
   19137:	f3 0f 11 45 8c       	movss  %xmm0,-0x74(%rbp)
   1913c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19140:	be 02 00 00 00       	mov    $0x2,%esi
   19145:	48 89 c7             	mov    %rax,%rdi
   19148:	e8 29 d4 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1914d:	be 02 00 00 00       	mov    $0x2,%esi
   19152:	48 89 c7             	mov    %rax,%rdi
   19155:	e8 72 d4 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1915a:	f3 0f 10 45 8c       	movss  -0x74(%rbp),%xmm0
   1915f:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[3][0] =-dot(s, eye);
   19163:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   19167:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1916b:	48 89 d6             	mov    %rdx,%rsi
   1916e:	48 89 c7             	mov    %rax,%rdi
   19171:	e8 fe 28 00 00       	call   1ba74 <_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_>
   19176:	66 0f 7e c0          	movd   %xmm0,%eax
   1917a:	f3 0f 10 05 6e a9 00 	movss  0xa96e(%rip),%xmm0        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   19181:	00 
   19182:	66 0f 6e d0          	movd   %eax,%xmm2
   19186:	0f 57 d0             	xorps  %xmm0,%xmm2
   19189:	f3 0f 11 55 8c       	movss  %xmm2,-0x74(%rbp)
   1918e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19192:	be 03 00 00 00       	mov    $0x3,%esi
   19197:	48 89 c7             	mov    %rax,%rdi
   1919a:	e8 d7 d3 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1919f:	be 00 00 00 00       	mov    $0x0,%esi
   191a4:	48 89 c7             	mov    %rax,%rdi
   191a7:	e8 20 d4 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   191ac:	f3 0f 10 55 8c       	movss  -0x74(%rbp),%xmm2
   191b1:	f3 0f 11 10          	movss  %xmm2,(%rax)
		Result[3][1] =-dot(u, eye);
   191b5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   191b9:	48 8d 45 b4          	lea    -0x4c(%rbp),%rax
   191bd:	48 89 d6             	mov    %rdx,%rsi
   191c0:	48 89 c7             	mov    %rax,%rdi
   191c3:	e8 ac 28 00 00       	call   1ba74 <_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_>
   191c8:	66 0f 7e c0          	movd   %xmm0,%eax
   191cc:	f3 0f 10 05 1c a9 00 	movss  0xa91c(%rip),%xmm0        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   191d3:	00 
   191d4:	66 0f 6e d8          	movd   %eax,%xmm3
   191d8:	0f 57 d8             	xorps  %xmm0,%xmm3
   191db:	f3 0f 11 5d 8c       	movss  %xmm3,-0x74(%rbp)
   191e0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   191e4:	be 03 00 00 00       	mov    $0x3,%esi
   191e9:	48 89 c7             	mov    %rax,%rdi
   191ec:	e8 85 d3 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   191f1:	be 01 00 00 00       	mov    $0x1,%esi
   191f6:	48 89 c7             	mov    %rax,%rdi
   191f9:	e8 ce d3 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   191fe:	f3 0f 10 5d 8c       	movss  -0x74(%rbp),%xmm3
   19203:	f3 0f 11 18          	movss  %xmm3,(%rax)
		Result[3][2] = dot(f, eye);
   19207:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1920b:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
   1920f:	48 89 d6             	mov    %rdx,%rsi
   19212:	48 89 c7             	mov    %rax,%rdi
   19215:	e8 5a 28 00 00       	call   1ba74 <_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_>
   1921a:	66 0f 7e c3          	movd   %xmm0,%ebx
   1921e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19222:	be 03 00 00 00       	mov    $0x3,%esi
   19227:	48 89 c7             	mov    %rax,%rdi
   1922a:	e8 47 d3 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1922f:	be 02 00 00 00       	mov    $0x2,%esi
   19234:	48 89 c7             	mov    %rax,%rdi
   19237:	e8 90 d3 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1923c:	89 18                	mov    %ebx,(%rax)
		return Result;
   1923e:	90                   	nop
	}
   1923f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19243:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19247:	c9                   	leave
   19248:	c3                   	ret

0000000000019249 <_ZN3glm16perspectiveRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_>:
	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_NO(T fovy, T aspect, T zNear, T zFar)
   19249:	55                   	push   %rbp
   1924a:	48 89 e5             	mov    %rsp,%rbp
   1924d:	48 83 ec 30          	sub    $0x30,%rsp
   19251:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19255:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
   1925a:	f3 0f 11 4d e0       	movss  %xmm1,-0x20(%rbp)
   1925f:	f3 0f 11 55 dc       	movss  %xmm2,-0x24(%rbp)
   19264:	f3 0f 11 5d d8       	movss  %xmm3,-0x28(%rbp)
		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));
   19269:	e8 b2 ab ff ff       	call   13e20 <_ZNSt14numeric_limitsIfE7epsilonEv>
   1926e:	f3 0f 10 4d e0       	movss  -0x20(%rbp),%xmm1
   19273:	f3 0f 5c c8          	subss  %xmm0,%xmm1
   19277:	66 0f 7e c8          	movd   %xmm1,%eax
   1927b:	66 0f 6e c0          	movd   %eax,%xmm0
   1927f:	e8 15 28 00 00       	call   1ba99 <_ZN3glm3absIfEET_S1_>
   19284:	66 0f 7e c0          	movd   %xmm0,%eax
   19288:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1928c:	66 0f 6e e0          	movd   %eax,%xmm4
   19290:	0f 2f e0             	comiss %xmm0,%xmm4
   19293:	77 28                	ja     192bd <_ZN3glm16perspectiveRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_+0x74>
   19295:	48 8d 05 c4 a6 00 00 	lea    0xa6c4(%rip),%rax        # 23960 <_ZZN9VulkanApp6renderEvE11submitCount+0x668>
   1929c:	48 89 c1             	mov    %rax,%rcx
   1929f:	ba fb 00 00 00       	mov    $0xfb,%edx
   192a4:	48 8d 05 0d a7 00 00 	lea    0xa70d(%rip),%rax        # 239b8 <_ZZN9VulkanApp6renderEvE11submitCount+0x6c0>
   192ab:	48 89 c6             	mov    %rax,%rsi
   192ae:	48 8d 05 33 a7 00 00 	lea    0xa733(%rip),%rax        # 239e8 <_ZZN9VulkanApp6renderEvE11submitCount+0x6f0>
   192b5:	48 89 c7             	mov    %rax,%rdi
   192b8:	e8 f3 af fe ff       	call   42b0 <__assert_fail@plt>
		T const tanHalfFovy = tan(fovy / static_cast<T>(2));
   192bd:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
   192c2:	f3 0f 10 0d 0e a8 00 	movss  0xa80e(%rip),%xmm1        # 23ad8 <_ZZN9VulkanApp6renderEvE11submitCount+0x7e0>
   192c9:	00 
   192ca:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   192ce:	66 0f 7e c0          	movd   %xmm0,%eax
   192d2:	66 0f 6e c0          	movd   %eax,%xmm0
   192d6:	e8 2a ab ff ff       	call   13e05 <_ZSt3tanf>
   192db:	66 0f 7e c0          	movd   %xmm0,%eax
   192df:	89 45 fc             	mov    %eax,-0x4(%rbp)
		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
   192e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   192e6:	66 0f ef c0          	pxor   %xmm0,%xmm0
   192ea:	0f 11 00             	movups %xmm0,(%rax)
   192ed:	0f 11 40 10          	movups %xmm0,0x10(%rax)
   192f1:	0f 11 40 20          	movups %xmm0,0x20(%rax)
   192f5:	0f 11 40 30          	movups %xmm0,0x30(%rax)
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
   192f9:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
   192fe:	0f 28 c8             	movaps %xmm0,%xmm1
   19301:	f3 0f 59 4d fc       	mulss  -0x4(%rbp),%xmm1
   19306:	f3 0f 10 05 be a7 00 	movss  0xa7be(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   1930d:	00 
   1930e:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   19312:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
   19317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1931b:	be 00 00 00 00       	mov    $0x0,%esi
   19320:	48 89 c7             	mov    %rax,%rdi
   19323:	e8 4e d2 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19328:	be 00 00 00 00       	mov    $0x0,%esi
   1932d:	48 89 c7             	mov    %rax,%rdi
   19330:	e8 97 d2 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   19335:	f3 0f 10 45 d4       	movss  -0x2c(%rbp),%xmm0
   1933a:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
   1933e:	f3 0f 10 05 86 a7 00 	movss  0xa786(%rip),%xmm0        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   19345:	00 
   19346:	f3 0f 5e 45 fc       	divss  -0x4(%rbp),%xmm0
   1934b:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
   19350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19354:	be 01 00 00 00       	mov    $0x1,%esi
   19359:	48 89 c7             	mov    %rax,%rdi
   1935c:	e8 15 d2 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   19361:	be 01 00 00 00       	mov    $0x1,%esi
   19366:	48 89 c7             	mov    %rax,%rdi
   19369:	e8 5e d2 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1936e:	f3 0f 10 45 d4       	movss  -0x2c(%rbp),%xmm0
   19373:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[2][2] = - (zFar + zNear) / (zFar - zNear);
   19377:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
   1937c:	f3 0f 58 45 dc       	addss  -0x24(%rbp),%xmm0
   19381:	f3 0f 10 0d 67 a7 00 	movss  0xa767(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   19388:	00 
   19389:	0f 57 c1             	xorps  %xmm1,%xmm0
   1938c:	f3 0f 10 4d d8       	movss  -0x28(%rbp),%xmm1
   19391:	f3 0f 5c 4d dc       	subss  -0x24(%rbp),%xmm1
   19396:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   1939a:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
   1939f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   193a3:	be 02 00 00 00       	mov    $0x2,%esi
   193a8:	48 89 c7             	mov    %rax,%rdi
   193ab:	e8 c6 d1 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   193b0:	be 02 00 00 00       	mov    $0x2,%esi
   193b5:	48 89 c7             	mov    %rax,%rdi
   193b8:	e8 0f d2 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   193bd:	f3 0f 10 45 d4       	movss  -0x2c(%rbp),%xmm0
   193c2:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[2][3] = - static_cast<T>(1);
   193c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   193ca:	be 02 00 00 00       	mov    $0x2,%esi
   193cf:	48 89 c7             	mov    %rax,%rdi
   193d2:	e8 9f d1 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   193d7:	be 03 00 00 00       	mov    $0x3,%esi
   193dc:	48 89 c7             	mov    %rax,%rdi
   193df:	e8 e8 d1 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   193e4:	f3 0f 10 05 18 a7 00 	movss  0xa718(%rip),%xmm0        # 23b04 <_ZZN9VulkanApp6renderEvE11submitCount+0x80c>
   193eb:	00 
   193ec:	f3 0f 11 00          	movss  %xmm0,(%rax)
		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);
   193f0:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
   193f5:	f3 0f 58 c0          	addss  %xmm0,%xmm0
   193f9:	f3 0f 59 45 dc       	mulss  -0x24(%rbp),%xmm0
   193fe:	f3 0f 10 0d ea a6 00 	movss  0xa6ea(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   19405:	00 
   19406:	0f 57 c1             	xorps  %xmm1,%xmm0
   19409:	f3 0f 10 4d d8       	movss  -0x28(%rbp),%xmm1
   1940e:	f3 0f 5c 4d dc       	subss  -0x24(%rbp),%xmm1
   19413:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   19417:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
   1941c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19420:	be 03 00 00 00       	mov    $0x3,%esi
   19425:	48 89 c7             	mov    %rax,%rdi
   19428:	e8 49 d1 ff ff       	call   16576 <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi>
   1942d:	be 02 00 00 00       	mov    $0x2,%esi
   19432:	48 89 c7             	mov    %rax,%rdi
   19435:	e8 92 d1 ff ff       	call   165cc <_ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi>
   1943a:	f3 0f 10 45 d4       	movss  -0x2c(%rbp),%xmm0
   1943f:	f3 0f 11 00          	movss  %xmm0,(%rax)
		return Result;
   19443:	90                   	nop
	}
   19444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19448:	c9                   	leave
   19449:	c3                   	ret

000000000001944a <_ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv>:

	public:
		// -- Accesses --

		typedef length_t length_type;
		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}
   1944a:	55                   	push   %rbp
   1944b:	48 89 e5             	mov    %rsp,%rbp
   1944e:	b8 04 00 00 00       	mov    $0x4,%eax
   19453:	5d                   	pop    %rbp
   19454:	c3                   	ret

0000000000019455 <_ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv>:
		// -- Component accesses --

		typedef length_t length_type;

		/// Return the count of components of the vector
		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}
   19455:	55                   	push   %rbp
   19456:	48 89 e5             	mov    %rsp,%rbp
   19459:	b8 04 00 00 00       	mov    $0x4,%eax
   1945e:	5d                   	pop    %rbp
   1945f:	c3                   	ret

0000000000019460 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   19460:	55                   	push   %rbp
   19461:	48 89 e5             	mov    %rsp,%rbp
   19464:	53                   	push   %rbx
   19465:	48 83 ec 38          	sub    $0x38,%rsp
   19469:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1946d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   19471:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19476:	0f 84 e7 01 00 00    	je     19663 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   1947c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19480:	48 89 c7             	mov    %rax,%rdi
   19483:	e8 3c d5 ff ff       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   19488:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1948c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19490:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   19494:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19498:	48 8b 40 08          	mov    0x8(%rax),%rax
   1949c:	48 29 c2             	sub    %rax,%rdx
   1949f:	48 89 d0             	mov    %rdx,%rax
   194a2:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   194a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   194aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194ae:	48 89 c7             	mov    %rax,%rdi
   194b1:	e8 fe 25 00 00       	call   1bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>
   194b6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   194ba:	72 16                	jb     194d2 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x72>
   194bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194c0:	48 89 c7             	mov    %rax,%rdi
   194c3:	e8 ec 25 00 00       	call   1bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>
   194c8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   194cc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   194d0:	73 07                	jae    194d9 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x79>
   194d2:	b8 01 00 00 00       	mov    $0x1,%eax
   194d7:	eb 05                	jmp    194de <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x7e>
   194d9:	b8 00 00 00 00       	mov    $0x0,%eax
   194de:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   194e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   194e4:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   194e8:	72 33                	jb     1951d <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   194ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194ee:	48 89 c7             	mov    %rax,%rdi
   194f1:	e8 c8 05 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   194f6:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   194f9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194fd:	48 8b 40 08          	mov    0x8(%rax),%rax
   19501:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19505:	48 89 ce             	mov    %rcx,%rsi
   19508:	48 89 c7             	mov    %rax,%rdi
   1950b:	e8 c6 25 00 00       	call   1bad6 <_ZSt27__uninitialized_default_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   19510:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19514:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   19518:	e9 46 01 00 00       	jmp    19663 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   1951d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19521:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19525:	48 8d 15 34 a3 00 00 	lea    0xa334(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   1952c:	48 89 ce             	mov    %rcx,%rsi
   1952f:	48 89 c7             	mov    %rax,%rdi
   19532:	e8 c9 25 00 00       	call   1bb00 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc>
   19537:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1953b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1953f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19543:	48 89 d6             	mov    %rdx,%rsi
   19546:	48 89 c7             	mov    %rax,%rdi
   19549:	e8 7a 26 00 00       	call   1bbc8 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE11_M_allocateEm>
   1954e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   19552:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19556:	48 89 c7             	mov    %rax,%rdi
   19559:	e8 60 05 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1955e:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   19561:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19565:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1956c:	00 
   1956d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19571:	48 01 c1             	add    %rax,%rcx
   19574:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19578:	48 89 c6             	mov    %rax,%rsi
   1957b:	48 89 cf             	mov    %rcx,%rdi
   1957e:	e8 53 25 00 00       	call   1bad6 <_ZSt27__uninitialized_default_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   19583:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19587:	48 89 c7             	mov    %rax,%rdi
   1958a:	e8 2f 05 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1958f:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   19592:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19596:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1959a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1959e:	48 8b 00             	mov    (%rax),%rax
   195a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   195a5:	48 89 c7             	mov    %rax,%rdi
   195a8:	e8 4e 26 00 00       	call   1bbfb <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   195ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   195b1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   195b5:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   195b9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   195bd:	48 8b 12             	mov    (%rdx),%rdx
   195c0:	48 29 d1             	sub    %rdx,%rcx
   195c3:	48 c1 f9 03          	sar    $0x3,%rcx
   195c7:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   195ca:	48 89 d6             	mov    %rdx,%rsi
   195cd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   195d1:	48 8b 0a             	mov    (%rdx),%rcx
   195d4:	48 89 f2             	mov    %rsi,%rdx
   195d7:	48 89 ce             	mov    %rcx,%rsi
   195da:	48 89 c7             	mov    %rax,%rdi
   195dd:	e8 96 08 00 00       	call   19e78 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   195e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   195e6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   195ea:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   195ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   195f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   195f5:	48 01 d0             	add    %rdx,%rax
   195f8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   195ff:	00 
   19600:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19604:	48 01 c2             	add    %rax,%rdx
   19607:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1960b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1960f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19613:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1961a:	00 
   1961b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1961f:	48 01 c2             	add    %rax,%rdx
   19622:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19626:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1962a:	eb 37                	jmp    19663 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   1962c:	48 89 c7             	mov    %rax,%rdi
   1962f:	e8 3c ab fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   19634:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19638:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1963c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19640:	48 89 ce             	mov    %rcx,%rsi
   19643:	48 89 c7             	mov    %rax,%rdi
   19646:	e8 2d 08 00 00       	call   19e78 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1964b:	e8 80 b1 fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   19650:	48 89 c3             	mov    %rax,%rbx
   19653:	e8 78 b2 fe ff       	call   48d0 <__cxa_end_catch@plt>
   19658:	48 89 d8             	mov    %rbx,%rax
   1965b:	48 89 c7             	mov    %rax,%rdi
   1965e:	e8 0d b3 fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   19663:	90                   	nop
   19664:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19668:	c9                   	leave
   19669:	c3                   	ret

000000000001966a <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1966a:	55                   	push   %rbp
   1966b:	48 89 e5             	mov    %rsp,%rbp
   1966e:	48 83 ec 20          	sub    $0x20,%rsp
   19672:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19676:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1967a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1967e:	48 8b 40 08          	mov    0x8(%rax),%rax
   19682:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   19686:	48 c1 f8 03          	sar    $0x3,%rax
   1968a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1968e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19693:	74 32                	je     196c7 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   19695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19699:	48 89 c7             	mov    %rax,%rdi
   1969c:	e8 1d 04 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   196a1:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   196a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   196a8:	48 8b 48 08          	mov    0x8(%rax),%rcx
   196ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   196b0:	48 89 ce             	mov    %rcx,%rsi
   196b3:	48 89 c7             	mov    %rax,%rdi
   196b6:	e8 11 04 00 00       	call   19acc <_ZSt8_DestroyIPP13VkSemaphore_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   196bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   196bf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   196c3:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   196c7:	90                   	nop
   196c8:	c9                   	leave
   196c9:	c3                   	ret

00000000000196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   196ca:	55                   	push   %rbp
   196cb:	48 89 e5             	mov    %rsp,%rbp
   196ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   196d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196d6:	48 8b 50 08          	mov    0x8(%rax),%rdx
   196da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196de:	48 8b 00             	mov    (%rax),%rax
   196e1:	48 29 c2             	sub    %rax,%rdx
   196e4:	48 89 d0             	mov    %rdx,%rax
   196e7:	48 c1 f8 03          	sar    $0x3,%rax
   196eb:	5d                   	pop    %rbp
   196ec:	c3                   	ret
   196ed:	90                   	nop

00000000000196ee <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   196ee:	55                   	push   %rbp
   196ef:	48 89 e5             	mov    %rsp,%rbp
   196f2:	53                   	push   %rbx
   196f3:	48 83 ec 38          	sub    $0x38,%rsp
   196f7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   196fb:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   196ff:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19704:	0f 84 e7 01 00 00    	je     198f1 <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x203>
	  const size_type __size = size();
   1970a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1970e:	48 89 c7             	mov    %rax,%rdi
   19711:	e8 b4 ff ff ff       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   19716:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1971a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1971e:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   19722:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19726:	48 8b 40 08          	mov    0x8(%rax),%rax
   1972a:	48 29 c2             	sub    %rax,%rdx
   1972d:	48 89 d0             	mov    %rdx,%rax
   19730:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19734:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   19738:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1973c:	48 89 c7             	mov    %rax,%rdi
   1973f:	e8 ea 24 00 00       	call   1bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>
   19744:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19748:	72 16                	jb     19760 <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x72>
   1974a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1974e:	48 89 c7             	mov    %rax,%rdi
   19751:	e8 d8 24 00 00       	call   1bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>
   19756:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1975a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1975e:	73 07                	jae    19767 <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x79>
   19760:	b8 01 00 00 00       	mov    $0x1,%eax
   19765:	eb 05                	jmp    1976c <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x7e>
   19767:	b8 00 00 00 00       	mov    $0x0,%eax
   1976c:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1976e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19772:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19776:	72 33                	jb     197ab <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0xbd>
						 __n, _M_get_Tp_allocator());
   19778:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1977c:	48 89 c7             	mov    %rax,%rdi
   1977f:	e8 b6 07 00 00       	call   19f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19784:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   19787:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1978b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1978f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19793:	48 89 ce             	mov    %rcx,%rsi
   19796:	48 89 c7             	mov    %rax,%rdi
   19799:	e8 b2 24 00 00       	call   1bc50 <_ZSt27__uninitialized_default_n_aIPP9VkFence_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1979e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   197a2:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   197a6:	e9 46 01 00 00       	jmp    198f1 <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   197ab:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   197af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197b3:	48 8d 15 a6 a0 00 00 	lea    0xa0a6(%rip),%rdx        # 23860 <_ZZN9VulkanApp6renderEvE11submitCount+0x568>
   197ba:	48 89 ce             	mov    %rcx,%rsi
   197bd:	48 89 c7             	mov    %rax,%rdi
   197c0:	e8 b5 24 00 00       	call   1bc7a <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc>
   197c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   197c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197cd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   197d1:	48 89 d6             	mov    %rdx,%rsi
   197d4:	48 89 c7             	mov    %rax,%rdi
   197d7:	e8 66 25 00 00       	call   1bd42 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE11_M_allocateEm>
   197dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   197e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   197e4:	48 89 c7             	mov    %rax,%rdi
   197e7:	e8 4e 07 00 00       	call   19f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   197ec:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   197ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   197f3:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   197fa:	00 
   197fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   197ff:	48 01 c1             	add    %rax,%rcx
   19802:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19806:	48 89 c6             	mov    %rax,%rsi
   19809:	48 89 cf             	mov    %rcx,%rdi
   1980c:	e8 3f 24 00 00       	call   1bc50 <_ZSt27__uninitialized_default_n_aIPP9VkFence_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   19811:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19815:	48 89 c7             	mov    %rax,%rdi
   19818:	e8 1d 07 00 00       	call   19f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1981d:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   19820:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19824:	48 8b 70 08          	mov    0x8(%rax),%rsi
   19828:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1982c:	48 8b 00             	mov    (%rax),%rax
   1982f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19833:	48 89 c7             	mov    %rax,%rdi
   19836:	e8 3a 25 00 00       	call   1bd75 <_ZNSt6vectorIP9VkFence_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1983b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1983f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19843:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   19847:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1984b:	48 8b 12             	mov    (%rdx),%rdx
   1984e:	48 29 d1             	sub    %rdx,%rcx
   19851:	48 c1 f9 03          	sar    $0x3,%rcx
   19855:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   19858:	48 89 d6             	mov    %rdx,%rsi
   1985b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1985f:	48 8b 0a             	mov    (%rdx),%rcx
   19862:	48 89 f2             	mov    %rsi,%rdx
   19865:	48 89 ce             	mov    %rcx,%rsi
   19868:	48 89 c7             	mov    %rax,%rdi
   1986b:	e8 94 06 00 00       	call   19f04 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   19870:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19874:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19878:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1987b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1987f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19883:	48 01 d0             	add    %rdx,%rax
   19886:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1988d:	00 
   1988e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19892:	48 01 c2             	add    %rax,%rdx
   19895:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19899:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1989d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   198a1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   198a8:	00 
   198a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   198ad:	48 01 c2             	add    %rax,%rdx
   198b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   198b4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   198b8:	eb 37                	jmp    198f1 <_ZNSt6vectorIP9VkFence_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   198ba:	48 89 c7             	mov    %rax,%rdi
   198bd:	e8 ae a8 fe ff       	call   4170 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   198c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   198c6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   198ca:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   198ce:	48 89 ce             	mov    %rcx,%rsi
   198d1:	48 89 c7             	mov    %rax,%rdi
   198d4:	e8 2b 06 00 00       	call   19f04 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   198d9:	e8 f2 ae fe ff       	call   47d0 <__cxa_rethrow@plt>
		  __catch(...)
   198de:	48 89 c3             	mov    %rax,%rbx
   198e1:	e8 ea af fe ff       	call   48d0 <__cxa_end_catch@plt>
   198e6:	48 89 d8             	mov    %rbx,%rax
   198e9:	48 89 c7             	mov    %rax,%rdi
   198ec:	e8 7f b0 fe ff       	call   4970 <_Unwind_Resume@plt>
    }
   198f1:	90                   	nop
   198f2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   198f6:	c9                   	leave
   198f7:	c3                   	ret

00000000000198f8 <_ZNSt6vectorIP9VkFence_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   198f8:	55                   	push   %rbp
   198f9:	48 89 e5             	mov    %rsp,%rbp
   198fc:	48 83 ec 20          	sub    $0x20,%rsp
   19900:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19904:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1990c:	48 8b 40 08          	mov    0x8(%rax),%rax
   19910:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   19914:	48 c1 f8 03          	sar    $0x3,%rax
   19918:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1991c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19921:	74 32                	je     19955 <_ZNSt6vectorIP9VkFence_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   19923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19927:	48 89 c7             	mov    %rax,%rdi
   1992a:	e8 0b 06 00 00       	call   19f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1992f:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19932:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19936:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1993a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1993e:	48 89 ce             	mov    %rcx,%rsi
   19941:	48 89 c7             	mov    %rax,%rdi
   19944:	e8 ff 05 00 00       	call   19f48 <_ZSt8_DestroyIPP9VkFence_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19949:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1994d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19951:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   19955:	90                   	nop
   19956:	c9                   	leave
   19957:	c3                   	ret

0000000000019958 <_ZNSt15__new_allocatorIP13VkSemaphore_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19958:	55                   	push   %rbp
   19959:	48 89 e5             	mov    %rsp,%rbp
   1995c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19960:	90                   	nop
   19961:	5d                   	pop    %rbp
   19962:	c3                   	ret
   19963:	90                   	nop

0000000000019964 <_ZNSt15__new_allocatorIP13VkSemaphore_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19964:	55                   	push   %rbp
   19965:	48 89 e5             	mov    %rsp,%rbp
   19968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1996c:	90                   	nop
   1996d:	5d                   	pop    %rbp
   1996e:	c3                   	ret
   1996f:	90                   	nop

0000000000019970 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   19970:	55                   	push   %rbp
   19971:	48 89 e5             	mov    %rsp,%rbp
   19974:	48 83 ec 10          	sub    $0x10,%rsp
   19978:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1997c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   19980:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19984:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19988:	48 89 d6             	mov    %rdx,%rsi
   1998b:	48 89 c7             	mov    %rax,%rdi
   1998e:	e8 15 24 00 00       	call   1bda8 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implC1ERKS2_>
   19993:	90                   	nop
   19994:	c9                   	leave
   19995:	c3                   	ret

0000000000019996 <_ZNKSt16initializer_listIP13VkSemaphore_TE5beginEv>:
      begin() const noexcept { return _M_array; }
   19996:	55                   	push   %rbp
   19997:	48 89 e5             	mov    %rsp,%rbp
   1999a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1999e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199a2:	48 8b 00             	mov    (%rax),%rax
   199a5:	5d                   	pop    %rbp
   199a6:	c3                   	ret
   199a7:	90                   	nop

00000000000199a8 <_ZNKSt16initializer_listIP13VkSemaphore_TE3endEv>:
      end() const noexcept { return begin() + size(); }
   199a8:	55                   	push   %rbp
   199a9:	48 89 e5             	mov    %rsp,%rbp
   199ac:	53                   	push   %rbx
   199ad:	48 83 ec 18          	sub    $0x18,%rsp
   199b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   199b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   199b9:	48 89 c7             	mov    %rax,%rdi
   199bc:	e8 d5 ff ff ff       	call   19996 <_ZNKSt16initializer_listIP13VkSemaphore_TE5beginEv>
   199c1:	48 89 c3             	mov    %rax,%rbx
   199c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   199c8:	48 89 c7             	mov    %rax,%rdi
   199cb:	e8 0a 24 00 00       	call   1bdda <_ZNKSt16initializer_listIP13VkSemaphore_TE4sizeEv>
   199d0:	48 c1 e0 03          	shl    $0x3,%rax
   199d4:	48 01 d8             	add    %rbx,%rax
   199d7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   199db:	c9                   	leave
   199dc:	c3                   	ret

00000000000199dd <_ZSt8distanceIPKP13VkSemaphore_TENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   199dd:	55                   	push   %rbp
   199de:	48 89 e5             	mov    %rsp,%rbp
   199e1:	48 83 ec 10          	sub    $0x10,%rsp
   199e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   199e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   199ed:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   199f1:	48 89 c7             	mov    %rax,%rdi
   199f4:	e8 f3 23 00 00       	call   1bdec <_ZSt19__iterator_categoryIPKP13VkSemaphore_TENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   199f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199fd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19a01:	48 89 d6             	mov    %rdx,%rsi
   19a04:	48 89 c7             	mov    %rax,%rdi
   19a07:	e8 eb 23 00 00       	call   1bdf7 <_ZSt10__distanceIPKP13VkSemaphore_TENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   19a0c:	c9                   	leave
   19a0d:	c3                   	ret

0000000000019a0e <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   19a0e:	55                   	push   %rbp
   19a0f:	48 89 e5             	mov    %rsp,%rbp
   19a12:	53                   	push   %rbx
   19a13:	48 83 ec 38          	sub    $0x38,%rsp
   19a17:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19a1b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19a1f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
   19a23:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19a27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19a2b:	48 89 d6             	mov    %rdx,%rsi
   19a2e:	48 89 c7             	mov    %rax,%rdi
   19a31:	e8 a7 ff ff ff       	call   199dd <_ZSt8distanceIPKP13VkSemaphore_TENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   19a36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   19a3a:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   19a3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19a42:	48 89 c7             	mov    %rax,%rdi
   19a45:	e8 74 00 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19a4a:	48 89 c2             	mov    %rax,%rdx
   19a4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19a51:	48 89 d6             	mov    %rdx,%rsi
   19a54:	48 89 c7             	mov    %rax,%rdi
   19a57:	e8 b5 23 00 00       	call   1be11 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_S_check_init_lenEmRKS2_>
   19a5c:	48 89 c6             	mov    %rax,%rsi
   19a5f:	48 89 df             	mov    %rbx,%rdi
   19a62:	e8 61 21 00 00       	call   1bbc8 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE11_M_allocateEm>
   19a67:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19a6b:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   19a6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19a72:	48 8b 00             	mov    (%rax),%rax
   19a75:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19a79:	48 c1 e2 03          	shl    $0x3,%rdx
   19a7d:	48 01 c2             	add    %rax,%rdx
   19a80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19a84:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
   19a88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19a8c:	48 89 c7             	mov    %rax,%rdi
   19a8f:	e8 2a 00 00 00       	call   19abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19a94:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   19a97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19a9b:	48 8b 10             	mov    (%rax),%rdx
   19a9e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   19aa2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19aa6:	48 89 c7             	mov    %rax,%rdi
   19aa9:	e8 c3 23 00 00       	call   1be71 <_ZSt22__uninitialized_copy_aIPKP13VkSemaphore_TPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   19aae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19ab2:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   19ab6:	90                   	nop
   19ab7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19abb:	c9                   	leave
   19abc:	c3                   	ret
   19abd:	90                   	nop

0000000000019abe <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19abe:	55                   	push   %rbp
   19abf:	48 89 e5             	mov    %rsp,%rbp
   19ac2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19aca:	5d                   	pop    %rbp
   19acb:	c3                   	ret

0000000000019acc <_ZSt8_DestroyIPP13VkSemaphore_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19acc:	55                   	push   %rbp
   19acd:	48 89 e5             	mov    %rsp,%rbp
   19ad0:	48 83 ec 20          	sub    $0x20,%rsp
   19ad4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19ad8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19adc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19ae0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19ae4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ae8:	48 89 d6             	mov    %rdx,%rsi
   19aeb:	48 89 c7             	mov    %rax,%rdi
   19aee:	e8 af 23 00 00       	call   1bea2 <_ZSt8_DestroyIPP13VkSemaphore_TEvT_S3_>
    }
   19af3:	90                   	nop
   19af4:	c9                   	leave
   19af5:	c3                   	ret

0000000000019af6 <_ZNSt15__new_allocatorIjEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19af6:	55                   	push   %rbp
   19af7:	48 89 e5             	mov    %rsp,%rbp
   19afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19afe:	90                   	nop
   19aff:	5d                   	pop    %rbp
   19b00:	c3                   	ret
   19b01:	90                   	nop

0000000000019b02 <_ZNSt15__new_allocatorIjED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19b02:	55                   	push   %rbp
   19b03:	48 89 e5             	mov    %rsp,%rbp
   19b06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b0a:	90                   	nop
   19b0b:	5d                   	pop    %rbp
   19b0c:	c3                   	ret
   19b0d:	90                   	nop

0000000000019b0e <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>:
      struct _Vector_impl
   19b0e:	55                   	push   %rbp
   19b0f:	48 89 e5             	mov    %rsp,%rbp
   19b12:	48 83 ec 10          	sub    $0x10,%rsp
   19b16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b1e:	48 89 c7             	mov    %rax,%rdi
   19b21:	e8 b6 cd ff ff       	call   168dc <_ZNSaIjED1Ev>
   19b26:	90                   	nop
   19b27:	c9                   	leave
   19b28:	c3                   	ret
   19b29:	90                   	nop

0000000000019b2a <_ZNSt12_Vector_baseIjSaIjEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   19b2a:	55                   	push   %rbp
   19b2b:	48 89 e5             	mov    %rsp,%rbp
   19b2e:	48 83 ec 10          	sub    $0x10,%rsp
   19b32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b36:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   19b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19b42:	48 89 d6             	mov    %rdx,%rsi
   19b45:	48 89 c7             	mov    %rax,%rdi
   19b48:	e8 7b 23 00 00       	call   1bec8 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1ERKS0_>
   19b4d:	90                   	nop
   19b4e:	c9                   	leave
   19b4f:	c3                   	ret

0000000000019b50 <_ZNSt12_Vector_baseIjSaIjEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   19b50:	55                   	push   %rbp
   19b51:	48 89 e5             	mov    %rsp,%rbp
   19b54:	48 83 ec 10          	sub    $0x10,%rsp
   19b58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   19b5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b60:	48 8b 50 10          	mov    0x10(%rax),%rdx
   19b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b68:	48 8b 00             	mov    (%rax),%rax
   19b6b:	48 29 c2             	sub    %rax,%rdx
   19b6e:	48 89 d0             	mov    %rdx,%rax
   19b71:	48 c1 f8 02          	sar    $0x2,%rax
	_M_deallocate(_M_impl._M_start,
   19b75:	48 89 c2             	mov    %rax,%rdx
   19b78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b7c:	48 8b 08             	mov    (%rax),%rcx
   19b7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b83:	48 89 ce             	mov    %rcx,%rsi
   19b86:	48 89 c7             	mov    %rax,%rdi
   19b89:	e8 6c 23 00 00       	call   1befa <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm>
      }
   19b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b92:	48 89 c7             	mov    %rax,%rdi
   19b95:	e8 74 ff ff ff       	call   19b0e <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev>
   19b9a:	90                   	nop
   19b9b:	c9                   	leave
   19b9c:	c3                   	ret
   19b9d:	90                   	nop

0000000000019b9e <_ZNKSt16initializer_listIjE5beginEv>:
      begin() const noexcept { return _M_array; }
   19b9e:	55                   	push   %rbp
   19b9f:	48 89 e5             	mov    %rsp,%rbp
   19ba2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19baa:	48 8b 00             	mov    (%rax),%rax
   19bad:	5d                   	pop    %rbp
   19bae:	c3                   	ret
   19baf:	90                   	nop

0000000000019bb0 <_ZNKSt16initializer_listIjE3endEv>:
      end() const noexcept { return begin() + size(); }
   19bb0:	55                   	push   %rbp
   19bb1:	48 89 e5             	mov    %rsp,%rbp
   19bb4:	53                   	push   %rbx
   19bb5:	48 83 ec 18          	sub    $0x18,%rsp
   19bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19bc1:	48 89 c7             	mov    %rax,%rdi
   19bc4:	e8 d5 ff ff ff       	call   19b9e <_ZNKSt16initializer_listIjE5beginEv>
   19bc9:	48 89 c3             	mov    %rax,%rbx
   19bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19bd0:	48 89 c7             	mov    %rax,%rdi
   19bd3:	e8 58 23 00 00       	call   1bf30 <_ZNKSt16initializer_listIjE4sizeEv>
   19bd8:	48 c1 e0 02          	shl    $0x2,%rax
   19bdc:	48 01 d8             	add    %rbx,%rax
   19bdf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19be3:	c9                   	leave
   19be4:	c3                   	ret

0000000000019be5 <_ZSt8distanceIPKjENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
   19be5:	55                   	push   %rbp
   19be6:	48 89 e5             	mov    %rsp,%rbp
   19be9:	48 83 ec 10          	sub    $0x10,%rsp
   19bed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19bf1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   19bf5:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19bf9:	48 89 c7             	mov    %rax,%rdi
   19bfc:	e8 41 23 00 00       	call   1bf42 <_ZSt19__iterator_categoryIPKjENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
   19c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19c05:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19c09:	48 89 d6             	mov    %rdx,%rsi
   19c0c:	48 89 c7             	mov    %rax,%rdi
   19c0f:	e8 39 23 00 00       	call   1bf4d <_ZSt10__distanceIPKjENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
   19c14:	c9                   	leave
   19c15:	c3                   	ret

0000000000019c16 <_ZNSt6vectorIjSaIjEE19_M_range_initializeIPKjEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   19c16:	55                   	push   %rbp
   19c17:	48 89 e5             	mov    %rsp,%rbp
   19c1a:	53                   	push   %rbx
   19c1b:	48 83 ec 38          	sub    $0x38,%rsp
   19c1f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19c23:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19c27:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	  const size_type __n = std::distance(__first, __last);
   19c2b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19c2f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19c33:	48 89 d6             	mov    %rdx,%rsi
   19c36:	48 89 c7             	mov    %rax,%rdi
   19c39:	e8 a7 ff ff ff       	call   19be5 <_ZSt8distanceIPKjENSt15iterator_traitsIT_E15difference_typeES3_S3_>
   19c3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   19c42:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   19c46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c4a:	48 89 c7             	mov    %rax,%rdi
   19c4d:	e8 74 00 00 00       	call   19cc6 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
   19c52:	48 89 c2             	mov    %rax,%rdx
   19c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19c59:	48 89 d6             	mov    %rdx,%rsi
   19c5c:	48 89 c7             	mov    %rax,%rdi
   19c5f:	e8 03 23 00 00       	call   1bf67 <_ZNSt6vectorIjSaIjEE17_S_check_init_lenEmRKS0_>
   19c64:	48 89 c6             	mov    %rax,%rsi
   19c67:	48 89 df             	mov    %rbx,%rdi
   19c6a:	e8 59 23 00 00       	call   1bfc8 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm>
   19c6f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19c73:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   19c76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c7a:	48 8b 00             	mov    (%rax),%rax
   19c7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19c81:	48 c1 e2 02          	shl    $0x2,%rdx
   19c85:	48 01 c2             	add    %rax,%rdx
   19c88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c8c:	48 89 50 10          	mov    %rdx,0x10(%rax)
					_M_get_Tp_allocator());
   19c90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c94:	48 89 c7             	mov    %rax,%rdi
   19c97:	e8 2a 00 00 00       	call   19cc6 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
   19c9c:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   19c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19ca3:	48 8b 10             	mov    (%rax),%rdx
   19ca6:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   19caa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19cae:	48 89 c7             	mov    %rax,%rdi
   19cb1:	e8 45 23 00 00       	call   1bffb <_ZSt22__uninitialized_copy_aIPKjPjjET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish =
   19cb6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19cba:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   19cbe:	90                   	nop
   19cbf:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19cc3:	c9                   	leave
   19cc4:	c3                   	ret
   19cc5:	90                   	nop

0000000000019cc6 <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19cc6:	55                   	push   %rbp
   19cc7:	48 89 e5             	mov    %rsp,%rbp
   19cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19cce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cd2:	5d                   	pop    %rbp
   19cd3:	c3                   	ret

0000000000019cd4 <_ZSt8_DestroyIPjjEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19cd4:	55                   	push   %rbp
   19cd5:	48 89 e5             	mov    %rsp,%rbp
   19cd8:	48 83 ec 20          	sub    $0x20,%rsp
   19cdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19ce0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19ce4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19ce8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19cf0:	48 89 d6             	mov    %rdx,%rsi
   19cf3:	48 89 c7             	mov    %rax,%rdi
   19cf6:	e8 31 23 00 00       	call   1c02c <_ZSt8_DestroyIPjEvT_S1_>
    }
   19cfb:	90                   	nop
   19cfc:	c9                   	leave
   19cfd:	c3                   	ret

0000000000019cfe <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19cfe:	55                   	push   %rbp
   19cff:	48 89 e5             	mov    %rsp,%rbp
   19d02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19d0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19d0e:	5d                   	pop    %rbp
   19d0f:	c3                   	ret

0000000000019d10 <_ZNKSt6vectorIjSaIjEE11_M_data_ptrIjEEPT_S4_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19d10:	55                   	push   %rbp
   19d11:	48 89 e5             	mov    %rsp,%rbp
   19d14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d18:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19d20:	5d                   	pop    %rbp
   19d21:	c3                   	ret

0000000000019d22 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19d22:	55                   	push   %rbp
   19d23:	48 89 e5             	mov    %rsp,%rbp
   19d26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19d2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d2e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19d35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d39:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19d40:	00 
   19d41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d45:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19d4c:	00 
	{ }
   19d4d:	90                   	nop
   19d4e:	5d                   	pop    %rbp
   19d4f:	c3                   	ret

0000000000019d50 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19d50:	55                   	push   %rbp
   19d51:	48 89 e5             	mov    %rsp,%rbp
   19d54:	48 83 ec 20          	sub    $0x20,%rsp
   19d58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19d60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19d64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19d69:	74 17                	je     19d82 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19d73:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19d77:	48 89 ce             	mov    %rcx,%rsi
   19d7a:	48 89 c7             	mov    %rax,%rdi
   19d7d:	e8 d0 22 00 00       	call   1c052 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE10deallocateERS2_PS1_m>
      }
   19d82:	90                   	nop
   19d83:	c9                   	leave
   19d84:	c3                   	ret
   19d85:	90                   	nop

0000000000019d86 <_ZNSaIP15VkFramebuffer_TEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   19d86:	55                   	push   %rbp
   19d87:	48 89 e5             	mov    %rsp,%rbp
   19d8a:	48 83 ec 10          	sub    $0x10,%rsp
   19d8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19d92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19d96:	48 89 c7             	mov    %rax,%rdi
   19d99:	e8 e2 22 00 00       	call   1c080 <_ZNSt15__new_allocatorIP15VkFramebuffer_TEC1Ev>
   19d9e:	90                   	nop
   19d9f:	c9                   	leave
   19da0:	c3                   	ret
   19da1:	90                   	nop

0000000000019da2 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19da2:	55                   	push   %rbp
   19da3:	48 89 e5             	mov    %rsp,%rbp
   19da6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19dae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19db5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19db9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19dc0:	00 
   19dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19dc5:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19dcc:	00 
	{ }
   19dcd:	90                   	nop
   19dce:	5d                   	pop    %rbp
   19dcf:	c3                   	ret

0000000000019dd0 <_ZNSt15__new_allocatorIP15VkFramebuffer_TED1Ev>:
   19dd0:	55                   	push   %rbp
   19dd1:	48 89 e5             	mov    %rsp,%rbp
   19dd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19dd8:	90                   	nop
   19dd9:	5d                   	pop    %rbp
   19dda:	c3                   	ret
   19ddb:	90                   	nop

0000000000019ddc <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19ddc:	55                   	push   %rbp
   19ddd:	48 89 e5             	mov    %rsp,%rbp
   19de0:	48 83 ec 20          	sub    $0x20,%rsp
   19de4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19de8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19dec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19df0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19df5:	74 17                	je     19e0e <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19dfb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19dff:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19e03:	48 89 ce             	mov    %rcx,%rsi
   19e06:	48 89 c7             	mov    %rax,%rdi
   19e09:	e8 7d 22 00 00       	call   1c08b <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE10deallocateERS2_PS1_m>
      }
   19e0e:	90                   	nop
   19e0f:	c9                   	leave
   19e10:	c3                   	ret
   19e11:	90                   	nop

0000000000019e12 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19e12:	55                   	push   %rbp
   19e13:	48 89 e5             	mov    %rsp,%rbp
   19e16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19e1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e1e:	5d                   	pop    %rbp
   19e1f:	c3                   	ret

0000000000019e20 <_ZSt8_DestroyIPP15VkFramebuffer_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19e20:	55                   	push   %rbp
   19e21:	48 89 e5             	mov    %rsp,%rbp
   19e24:	48 83 ec 20          	sub    $0x20,%rsp
   19e28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19e2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19e30:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19e34:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e3c:	48 89 d6             	mov    %rdx,%rsi
   19e3f:	48 89 c7             	mov    %rax,%rdi
   19e42:	e8 72 22 00 00       	call   1c0b9 <_ZSt8_DestroyIPP15VkFramebuffer_TEvT_S3_>
    }
   19e47:	90                   	nop
   19e48:	c9                   	leave
   19e49:	c3                   	ret

0000000000019e4a <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19e4a:	55                   	push   %rbp
   19e4b:	48 89 e5             	mov    %rsp,%rbp
   19e4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e56:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e61:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19e68:	00 
   19e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e6d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19e74:	00 
	{ }
   19e75:	90                   	nop
   19e76:	5d                   	pop    %rbp
   19e77:	c3                   	ret

0000000000019e78 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19e78:	55                   	push   %rbp
   19e79:	48 89 e5             	mov    %rsp,%rbp
   19e7c:	48 83 ec 20          	sub    $0x20,%rsp
   19e80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19e84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19e88:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19e8c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19e91:	74 17                	je     19eaa <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19e97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19e9b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19e9f:	48 89 ce             	mov    %rcx,%rsi
   19ea2:	48 89 c7             	mov    %rax,%rdi
   19ea5:	e8 35 22 00 00       	call   1c0df <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE10deallocateERS2_PS1_m>
      }
   19eaa:	90                   	nop
   19eab:	c9                   	leave
   19eac:	c3                   	ret
   19ead:	90                   	nop

0000000000019eae <_ZNSaIP9VkFence_TEC1Ev>:
   19eae:	55                   	push   %rbp
   19eaf:	48 89 e5             	mov    %rsp,%rbp
   19eb2:	48 83 ec 10          	sub    $0x10,%rsp
   19eb6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19eba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ebe:	48 89 c7             	mov    %rax,%rdi
   19ec1:	e8 48 22 00 00       	call   1c10e <_ZNSt15__new_allocatorIP9VkFence_TEC1Ev>
   19ec6:	90                   	nop
   19ec7:	c9                   	leave
   19ec8:	c3                   	ret
   19ec9:	90                   	nop

0000000000019eca <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19eca:	55                   	push   %rbp
   19ecb:	48 89 e5             	mov    %rsp,%rbp
   19ece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19ed2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ed6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19edd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ee1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19ee8:	00 
   19ee9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19eed:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19ef4:	00 
	{ }
   19ef5:	90                   	nop
   19ef6:	5d                   	pop    %rbp
   19ef7:	c3                   	ret

0000000000019ef8 <_ZNSt15__new_allocatorIP9VkFence_TED1Ev>:
   19ef8:	55                   	push   %rbp
   19ef9:	48 89 e5             	mov    %rsp,%rbp
   19efc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f00:	90                   	nop
   19f01:	5d                   	pop    %rbp
   19f02:	c3                   	ret
   19f03:	90                   	nop

0000000000019f04 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19f04:	55                   	push   %rbp
   19f05:	48 89 e5             	mov    %rsp,%rbp
   19f08:	48 83 ec 20          	sub    $0x20,%rsp
   19f0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19f14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19f18:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19f1d:	74 17                	je     19f36 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19f1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f23:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19f27:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19f2b:	48 89 ce             	mov    %rcx,%rsi
   19f2e:	48 89 c7             	mov    %rax,%rdi
   19f31:	e8 e3 21 00 00       	call   1c119 <_ZNSt16allocator_traitsISaIP9VkFence_TEE10deallocateERS2_PS1_m>
      }
   19f36:	90                   	nop
   19f37:	c9                   	leave
   19f38:	c3                   	ret
   19f39:	90                   	nop

0000000000019f3a <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19f3a:	55                   	push   %rbp
   19f3b:	48 89 e5             	mov    %rsp,%rbp
   19f3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19f42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f46:	5d                   	pop    %rbp
   19f47:	c3                   	ret

0000000000019f48 <_ZSt8_DestroyIPP9VkFence_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19f48:	55                   	push   %rbp
   19f49:	48 89 e5             	mov    %rsp,%rbp
   19f4c:	48 83 ec 20          	sub    $0x20,%rsp
   19f50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19f58:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19f5c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19f60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f64:	48 89 d6             	mov    %rdx,%rsi
   19f67:	48 89 c7             	mov    %rax,%rdi
   19f6a:	e8 d8 21 00 00       	call   1c147 <_ZSt8_DestroyIPP9VkFence_TEvT_S3_>
    }
   19f6f:	90                   	nop
   19f70:	c9                   	leave
   19f71:	c3                   	ret

0000000000019f72 <_ZNSaIP10VkBuffer_TEC1Ev>:
   19f72:	55                   	push   %rbp
   19f73:	48 89 e5             	mov    %rsp,%rbp
   19f76:	48 83 ec 10          	sub    $0x10,%rsp
   19f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f82:	48 89 c7             	mov    %rax,%rdi
   19f85:	e8 e4 21 00 00       	call   1c16e <_ZNSt15__new_allocatorIP10VkBuffer_TEC1Ev>
   19f8a:	90                   	nop
   19f8b:	c9                   	leave
   19f8c:	c3                   	ret
   19f8d:	90                   	nop

0000000000019f8e <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19f8e:	55                   	push   %rbp
   19f8f:	48 89 e5             	mov    %rsp,%rbp
   19f92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19f96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f9a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fa5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19fac:	00 
   19fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fb1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19fb8:	00 
	{ }
   19fb9:	90                   	nop
   19fba:	5d                   	pop    %rbp
   19fbb:	c3                   	ret

0000000000019fbc <_ZNSt15__new_allocatorIP10VkBuffer_TED1Ev>:
   19fbc:	55                   	push   %rbp
   19fbd:	48 89 e5             	mov    %rsp,%rbp
   19fc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19fc4:	90                   	nop
   19fc5:	5d                   	pop    %rbp
   19fc6:	c3                   	ret
   19fc7:	90                   	nop

0000000000019fc8 <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19fc8:	55                   	push   %rbp
   19fc9:	48 89 e5             	mov    %rsp,%rbp
   19fcc:	48 83 ec 20          	sub    $0x20,%rsp
   19fd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19fd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19fd8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19fdc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19fe1:	74 17                	je     19ffa <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fe7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19feb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19fef:	48 89 ce             	mov    %rcx,%rsi
   19ff2:	48 89 c7             	mov    %rax,%rdi
   19ff5:	e8 7f 21 00 00       	call   1c179 <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE10deallocateERS2_PS1_m>
      }
   19ffa:	90                   	nop
   19ffb:	c9                   	leave
   19ffc:	c3                   	ret
   19ffd:	90                   	nop

0000000000019ffe <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19ffe:	55                   	push   %rbp
   19fff:	48 89 e5             	mov    %rsp,%rbp
   1a002:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1a006:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a00a:	5d                   	pop    %rbp
   1a00b:	c3                   	ret

000000000001a00c <_ZSt8_DestroyIPP10VkBuffer_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1a00c:	55                   	push   %rbp
   1a00d:	48 89 e5             	mov    %rsp,%rbp
   1a010:	48 83 ec 20          	sub    $0x20,%rsp
   1a014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a01c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1a020:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a028:	48 89 d6             	mov    %rdx,%rsi
   1a02b:	48 89 c7             	mov    %rax,%rdi
   1a02e:	e8 74 21 00 00       	call   1c1a7 <_ZSt8_DestroyIPP10VkBuffer_TEvT_S3_>
    }
   1a033:	90                   	nop
   1a034:	c9                   	leave
   1a035:	c3                   	ret

000000000001a036 <_ZNSaIP16VkDeviceMemory_TEC1Ev>:
   1a036:	55                   	push   %rbp
   1a037:	48 89 e5             	mov    %rsp,%rbp
   1a03a:	48 83 ec 10          	sub    $0x10,%rsp
   1a03e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a042:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a046:	48 89 c7             	mov    %rax,%rdi
   1a049:	e8 80 21 00 00       	call   1c1ce <_ZNSt15__new_allocatorIP16VkDeviceMemory_TEC1Ev>
   1a04e:	90                   	nop
   1a04f:	c9                   	leave
   1a050:	c3                   	ret
   1a051:	90                   	nop

000000000001a052 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   1a052:	55                   	push   %rbp
   1a053:	48 89 e5             	mov    %rsp,%rbp
   1a056:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a05a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a05e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1a065:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a069:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1a070:	00 
   1a071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a075:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1a07c:	00 
	{ }
   1a07d:	90                   	nop
   1a07e:	5d                   	pop    %rbp
   1a07f:	c3                   	ret

000000000001a080 <_ZNSt15__new_allocatorIP16VkDeviceMemory_TED1Ev>:
   1a080:	55                   	push   %rbp
   1a081:	48 89 e5             	mov    %rsp,%rbp
   1a084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a088:	90                   	nop
   1a089:	5d                   	pop    %rbp
   1a08a:	c3                   	ret
   1a08b:	90                   	nop

000000000001a08c <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1a08c:	55                   	push   %rbp
   1a08d:	48 89 e5             	mov    %rsp,%rbp
   1a090:	48 83 ec 20          	sub    $0x20,%rsp
   1a094:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a098:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a09c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1a0a0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a0a5:	74 17                	je     1a0be <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1a0a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a0af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a0b3:	48 89 ce             	mov    %rcx,%rsi
   1a0b6:	48 89 c7             	mov    %rax,%rdi
   1a0b9:	e8 1b 21 00 00       	call   1c1d9 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE10deallocateERS2_PS1_m>
      }
   1a0be:	90                   	nop
   1a0bf:	c9                   	leave
   1a0c0:	c3                   	ret
   1a0c1:	90                   	nop

000000000001a0c2 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1a0c2:	55                   	push   %rbp
   1a0c3:	48 89 e5             	mov    %rsp,%rbp
   1a0c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1a0ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0ce:	5d                   	pop    %rbp
   1a0cf:	c3                   	ret

000000000001a0d0 <_ZSt8_DestroyIPP16VkDeviceMemory_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1a0d0:	55                   	push   %rbp
   1a0d1:	48 89 e5             	mov    %rsp,%rbp
   1a0d4:	48 83 ec 20          	sub    $0x20,%rsp
   1a0d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a0dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a0e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1a0e4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a0e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0ec:	48 89 d6             	mov    %rdx,%rsi
   1a0ef:	48 89 c7             	mov    %rax,%rdi
   1a0f2:	e8 10 21 00 00       	call   1c207 <_ZSt8_DestroyIPP16VkDeviceMemory_TEvT_S3_>
    }
   1a0f7:	90                   	nop
   1a0f8:	c9                   	leave
   1a0f9:	c3                   	ret

000000000001a0fa <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1a0fa:	55                   	push   %rbp
   1a0fb:	48 89 e5             	mov    %rsp,%rbp
   1a0fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a102:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1a106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a10a:	48 8b 10             	mov    (%rax),%rdx
   1a10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a111:	48 89 10             	mov    %rdx,(%rax)
   1a114:	90                   	nop
   1a115:	5d                   	pop    %rbp
   1a116:	c3                   	ret
   1a117:	90                   	nop

000000000001a118 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1a118:	55                   	push   %rbp
   1a119:	48 89 e5             	mov    %rsp,%rbp
   1a11c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1a120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a124:	5d                   	pop    %rbp
   1a125:	c3                   	ret

000000000001a126 <_ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_>:
		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
   1a126:	55                   	push   %rbp
   1a127:	48 89 e5             	mov    %rsp,%rbp
   1a12a:	53                   	push   %rbx
   1a12b:	48 83 ec 28          	sub    $0x28,%rsp
   1a12f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a133:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
   1a137:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a13b:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
   1a140:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a144:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
   1a149:	0f 28 d9             	movaps %xmm1,%xmm3
   1a14c:	f3 0f 59 d8          	mulss  %xmm0,%xmm3
   1a150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a154:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
   1a159:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a15d:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
   1a162:	0f 28 d1             	movaps %xmm1,%xmm2
   1a165:	f3 0f 59 d0          	mulss  %xmm0,%xmm2
   1a169:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a16d:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
   1a172:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a176:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
   1a17b:	0f 28 e1             	movaps %xmm1,%xmm4
   1a17e:	f3 0f 59 e0          	mulss  %xmm0,%xmm4
   1a182:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a186:	f3 0f 10 08          	movss  (%rax),%xmm1
   1a18a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a18e:	f3 0f 10 00          	movss  (%rax),%xmm0
   1a192:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   1a196:	66 0f 7e ca          	movd   %xmm1,%edx
   1a19a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1a19e:	0f 28 cc             	movaps %xmm4,%xmm1
   1a1a1:	66 0f 6e c2          	movd   %edx,%xmm0
   1a1a5:	48 89 c7             	mov    %rax,%rdi
   1a1a8:	e8 81 20 00 00       	call   1c22e <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Effff>
   1a1ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a1b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a1b5:	48 89 c1             	mov    %rax,%rcx
   1a1b8:	48 89 d3             	mov    %rdx,%rbx
   1a1bb:	48 89 d0             	mov    %rdx,%rax
		}
   1a1be:	66 48 0f 6e c1       	movq   %rcx,%xmm0
   1a1c3:	66 48 0f 6e c8       	movq   %rax,%xmm1
   1a1c8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a1cc:	c9                   	leave
   1a1cd:	c3                   	ret

000000000001a1ce <_ZNKSt16initializer_listIPKcE4sizeEv>:
      size() const noexcept { return _M_len; }
   1a1ce:	55                   	push   %rbp
   1a1cf:	48 89 e5             	mov    %rsp,%rbp
   1a1d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a1d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1da:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a1de:	5d                   	pop    %rbp
   1a1df:	c3                   	ret

000000000001a1e0 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   1a1e0:	55                   	push   %rbp
   1a1e1:	48 89 e5             	mov    %rsp,%rbp
   1a1e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1a1e8:	90                   	nop
   1a1e9:	5d                   	pop    %rbp
   1a1ea:	c3                   	ret

000000000001a1eb <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   1a1eb:	55                   	push   %rbp
   1a1ec:	48 89 e5             	mov    %rsp,%rbp
   1a1ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a1f3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   1a1f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a1fb:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   1a1ff:	48 c1 f8 03          	sar    $0x3,%rax
    }
   1a203:	5d                   	pop    %rbp
   1a204:	c3                   	ret

000000000001a205 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1a205:	55                   	push   %rbp
   1a206:	48 89 e5             	mov    %rsp,%rbp
   1a209:	48 83 ec 20          	sub    $0x20,%rsp
   1a20d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a211:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a215:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a219:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   1a21d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a221:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a225:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a229:	48 89 ce             	mov    %rcx,%rsi
   1a22c:	48 89 c7             	mov    %rax,%rdi
   1a22f:	e8 50 20 00 00       	call   1c284 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>
    }
   1a234:	c9                   	leave
   1a235:	c3                   	ret

000000000001a236 <_ZSt8_DestroyIPPKcEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1a236:	55                   	push   %rbp
   1a237:	48 89 e5             	mov    %rsp,%rbp
   1a23a:	48 83 ec 10          	sub    $0x10,%rsp
   1a23e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a242:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1a246:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a24a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a24e:	48 89 d6             	mov    %rdx,%rsi
   1a251:	48 89 c7             	mov    %rax,%rdi
   1a254:	e8 60 20 00 00       	call   1c2b9 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>
    }
   1a259:	90                   	nop
   1a25a:	c9                   	leave
   1a25b:	c3                   	ret

000000000001a25c <_ZNSt15__new_allocatorIPKcE9constructIS1_JRS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
   1a25c:	55                   	push   %rbp
   1a25d:	48 89 e5             	mov    %rsp,%rbp
   1a260:	53                   	push   %rbx
   1a261:	48 83 ec 28          	sub    $0x28,%rsp
   1a265:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a269:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a26d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1a271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a275:	48 89 c6             	mov    %rax,%rsi
   1a278:	bf 08 00 00 00       	mov    $0x8,%edi
   1a27d:	e8 d0 c4 fe ff       	call   6752 <_ZnwmPv>
   1a282:	48 89 c3             	mov    %rax,%rbx
   1a285:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a289:	48 89 c7             	mov    %rax,%rdi
   1a28c:	e8 85 cf ff ff       	call   17216 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
   1a291:	48 8b 00             	mov    (%rax),%rax
   1a294:	48 89 03             	mov    %rax,(%rbx)
   1a297:	90                   	nop
   1a298:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a29c:	c9                   	leave
   1a29d:	c3                   	ret

000000000001a29e <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>:
      _M_check_len(size_type __n, const char* __s) const
   1a29e:	55                   	push   %rbp
   1a29f:	48 89 e5             	mov    %rsp,%rbp
   1a2a2:	53                   	push   %rbx
   1a2a3:	48 83 ec 38          	sub    $0x38,%rsp
   1a2a7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a2ab:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a2af:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1a2b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a2b7:	48 89 c7             	mov    %rax,%rdi
   1a2ba:	e8 09 20 00 00       	call   1c2c8 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1a2bf:	48 89 c3             	mov    %rax,%rbx
   1a2c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a2c6:	48 89 c7             	mov    %rax,%rdi
   1a2c9:	e8 ee a3 ff ff       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1a2ce:	48 29 c3             	sub    %rax,%rbx
   1a2d1:	48 89 da             	mov    %rbx,%rdx
   1a2d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a2d8:	48 39 c2             	cmp    %rax,%rdx
   1a2db:	0f 92 c0             	setb   %al
   1a2de:	84 c0                	test   %al,%al
   1a2e0:	74 0c                	je     1a2ee <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0x50>
	  __throw_length_error(__N(__s));
   1a2e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a2e6:	48 89 c7             	mov    %rax,%rdi
   1a2e9:	e8 12 9f fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1a2ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a2f2:	48 89 c7             	mov    %rax,%rdi
   1a2f5:	e8 c2 a3 ff ff       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1a2fa:	48 89 c3             	mov    %rax,%rbx
   1a2fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a301:	48 89 c7             	mov    %rax,%rdi
   1a304:	e8 b3 a3 ff ff       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1a309:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1a30d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1a311:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1a315:	48 89 d6             	mov    %rdx,%rsi
   1a318:	48 89 c7             	mov    %rax,%rdi
   1a31b:	e8 ca 1f 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1a320:	48 8b 00             	mov    (%rax),%rax
   1a323:	48 01 d8             	add    %rbx,%rax
   1a326:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a32a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a32e:	48 89 c7             	mov    %rax,%rdi
   1a331:	e8 86 a3 ff ff       	call   146bc <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1a336:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1a33a:	72 12                	jb     1a34e <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xb0>
   1a33c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a340:	48 89 c7             	mov    %rax,%rdi
   1a343:	e8 80 1f 00 00       	call   1c2c8 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1a348:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a34c:	73 0e                	jae    1a35c <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xbe>
   1a34e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a352:	48 89 c7             	mov    %rax,%rdi
   1a355:	e8 6e 1f 00 00       	call   1c2c8 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1a35a:	eb 04                	jmp    1a360 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xc2>
   1a35c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1a360:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a364:	c9                   	leave
   1a365:	c3                   	ret

000000000001a366 <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   1a366:	55                   	push   %rbp
   1a367:	48 89 e5             	mov    %rsp,%rbp
   1a36a:	53                   	push   %rbx
   1a36b:	48 83 ec 18          	sub    $0x18,%rsp
   1a36f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a373:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1a377:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a37b:	48 89 c7             	mov    %rax,%rdi
   1a37e:	e8 85 ce ff ff       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1a383:	48 8b 18             	mov    (%rax),%rbx
   1a386:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a38a:	48 89 c7             	mov    %rax,%rdi
   1a38d:	e8 76 ce ff ff       	call   17208 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1a392:	48 8b 00             	mov    (%rax),%rax
   1a395:	48 89 da             	mov    %rbx,%rdx
   1a398:	48 29 c2             	sub    %rax,%rdx
   1a39b:	48 89 d0             	mov    %rdx,%rax
   1a39e:	48 c1 f8 03          	sar    $0x3,%rax
   1a3a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a3a6:	c9                   	leave
   1a3a7:	c3                   	ret

000000000001a3a8 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1a3a8:	55                   	push   %rbp
   1a3a9:	48 89 e5             	mov    %rsp,%rbp
   1a3ac:	48 83 ec 20          	sub    $0x20,%rsp
   1a3b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a3b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a3b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1a3bc:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1a3c0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a3c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a3c8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a3cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3d0:	48 89 c7             	mov    %rax,%rdi
   1a3d3:	e8 3d 1f 00 00       	call   1c315 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1a3d8:	c9                   	leave
   1a3d9:	c3                   	ret

000000000001a3da <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   1a3da:	55                   	push   %rbp
   1a3db:	48 89 e5             	mov    %rsp,%rbp
   1a3de:	48 83 ec 20          	sub    $0x20,%rsp
   1a3e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a3e6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   1a3ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a3ee:	48 8b 00             	mov    (%rax),%rax
   1a3f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a3f5:	48 c1 e2 03          	shl    $0x3,%rdx
   1a3f9:	48 f7 da             	neg    %rdx
   1a3fc:	48 01 d0             	add    %rdx,%rax
   1a3ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a403:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   1a407:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1a40b:	48 89 d6             	mov    %rdx,%rsi
   1a40e:	48 89 c7             	mov    %rax,%rdi
   1a411:	e8 d4 cd ff ff       	call   171ea <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1a416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a41a:	c9                   	leave
   1a41b:	c3                   	ret

000000000001a41c <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEEC1IJS2_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
   1a41c:	55                   	push   %rbp
   1a41d:	48 89 e5             	mov    %rsp,%rbp
   1a420:	53                   	push   %rbx
   1a421:	48 83 ec 28          	sub    $0x28,%rsp
   1a425:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a429:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
   1a42d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1a431:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a435:	48 89 c7             	mov    %rax,%rdi
   1a438:	e8 21 d0 ff ff       	call   1745e <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   1a43d:	48 89 c6             	mov    %rax,%rsi
   1a440:	48 89 df             	mov    %rbx,%rdi
   1a443:	e8 30 1f 00 00       	call   1c378 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1IJS2_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
   1a448:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a44c:	c6 40 1c 01          	movb   $0x1,0x1c(%rax)
	{ }
   1a450:	90                   	nop
   1a451:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a455:	c9                   	leave
   1a456:	c3                   	ret
   1a457:	90                   	nop

000000000001a458 <_ZNKSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE6_M_getEv>:
      _M_get() const noexcept
   1a458:	55                   	push   %rbp
   1a459:	48 89 e5             	mov    %rsp,%rbp
   1a45c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   1a460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a464:	5d                   	pop    %rbp
   1a465:	c3                   	ret

000000000001a466 <_ZNSt4pairIj23VkQueueFamilyPropertiesEaSERKS1_>:
	explicit constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }

      pair&
      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,
   1a466:	55                   	push   %rbp
   1a467:	48 89 e5             	mov    %rsp,%rbp
   1a46a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a46e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
				       is_copy_assignable<_T2>>::value,
				const pair&, const __nonesuch&> __p)
      {
	first = __p.first;
   1a472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a476:	8b 10                	mov    (%rax),%edx
   1a478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a47c:	89 10                	mov    %edx,(%rax)
	second = __p.second;
   1a47e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1a482:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1a486:	48 8b 46 04          	mov    0x4(%rsi),%rax
   1a48a:	48 8b 56 0c          	mov    0xc(%rsi),%rdx
   1a48e:	48 89 41 04          	mov    %rax,0x4(%rcx)
   1a492:	48 89 51 0c          	mov    %rdx,0xc(%rcx)
   1a496:	48 8b 46 14          	mov    0x14(%rsi),%rax
   1a49a:	48 89 41 14          	mov    %rax,0x14(%rcx)
	return *this;
   1a49e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1a4a2:	5d                   	pop    %rbp
   1a4a3:	c3                   	ret

000000000001a4a4 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE12_M_constructIJRKS2_EEEvDpOT_>:
	_M_construct(_Args&&... __args)
   1a4a4:	55                   	push   %rbp
   1a4a5:	48 89 e5             	mov    %rsp,%rbp
   1a4a8:	53                   	push   %rbx
   1a4a9:	48 83 ec 18          	sub    $0x18,%rsp
   1a4ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a4b1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  std::_Construct(std::__addressof(this->_M_payload._M_value),
   1a4b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a4b9:	48 89 c7             	mov    %rax,%rdi
   1a4bc:	e8 09 1f 00 00       	call   1c3ca <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>
   1a4c1:	48 89 c3             	mov    %rax,%rbx
   1a4c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a4c8:	48 89 c7             	mov    %rax,%rdi
   1a4cb:	e8 ec 1e 00 00       	call   1c3bc <_ZSt11__addressofISt4pairIj23VkQueueFamilyPropertiesEEPT_RS3_>
   1a4d0:	48 89 de             	mov    %rbx,%rsi
   1a4d3:	48 89 c7             	mov    %rax,%rdi
   1a4d6:	e8 fd 1e 00 00       	call   1c3d8 <_ZSt10_ConstructISt4pairIj23VkQueueFamilyPropertiesEJRKS2_EEvPT_DpOT0_>
	  this->_M_engaged = true;
   1a4db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a4df:	c6 40 1c 01          	movb   $0x1,0x1c(%rax)
	}
   1a4e3:	90                   	nop
   1a4e4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a4e8:	c9                   	leave
   1a4e9:	c3                   	ret

000000000001a4ea <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv>:
      _M_reset() noexcept
   1a4ea:	55                   	push   %rbp
   1a4eb:	48 89 e5             	mov    %rsp,%rbp
   1a4ee:	48 83 ec 10          	sub    $0x10,%rsp
   1a4f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_M_engaged)
   1a4f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a4fa:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
   1a4fe:	84 c0                	test   %al,%al
   1a500:	74 0c                	je     1a50e <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_M_resetEv+0x24>
	  _M_destroy();
   1a502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a506:	48 89 c7             	mov    %rax,%rdi
   1a509:	e8 24 1f 00 00       	call   1c432 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE10_M_destroyEv>
      }
   1a50e:	90                   	nop
   1a50f:	c9                   	leave
   1a510:	c3                   	ret
   1a511:	90                   	nop

000000000001a512 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1a512:	55                   	push   %rbp
   1a513:	48 89 e5             	mov    %rsp,%rbp
   1a516:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a51a:	90                   	nop
   1a51b:	5d                   	pop    %rbp
   1a51c:	c3                   	ret

000000000001a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a51d:	55                   	push   %rbp
   1a51e:	48 89 e5             	mov    %rsp,%rbp
   1a521:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
   1a525:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a529:	48 8b 40 18          	mov    0x18(%rax),%rax
   1a52d:	5d                   	pop    %rbp
   1a52e:	c3                   	ret

000000000001a52f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a52f:	55                   	push   %rbp
   1a530:	48 89 e5             	mov    %rsp,%rbp
   1a533:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
   1a537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a53b:	48 8b 40 10          	mov    0x10(%rax),%rax
   1a53f:	5d                   	pop    %rbp
   1a540:	c3                   	ret
   1a541:	90                   	nop

000000000001a542 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1a542:	55                   	push   %rbp
   1a543:	48 89 e5             	mov    %rsp,%rbp
   1a546:	48 83 ec 10          	sub    $0x10,%rsp
   1a54a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a54e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_M_destroy_node(__p);
   1a552:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a556:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a55a:	48 89 d6             	mov    %rdx,%rsi
   1a55d:	48 89 c7             	mov    %rax,%rdi
   1a560:	e8 e1 1e 00 00       	call   1c446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
   1a565:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a569:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a56d:	48 89 d6             	mov    %rdx,%rsi
   1a570:	48 89 c7             	mov    %rax,%rdi
   1a573:	e8 0c 1f 00 00       	call   1c484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
   1a578:	90                   	nop
   1a579:	c9                   	leave
   1a57a:	c3                   	ret
   1a57b:	90                   	nop

000000000001a57c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
   1a57c:	55                   	push   %rbp
   1a57d:	48 89 e5             	mov    %rsp,%rbp
   1a580:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1a584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a588:	48 8b 40 10          	mov    0x10(%rax),%rax
   1a58c:	5d                   	pop    %rbp
   1a58d:	c3                   	ret

000000000001a58e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
   1a58e:	55                   	push   %rbp
   1a58f:	48 89 e5             	mov    %rsp,%rbp
   1a592:	53                   	push   %rbx
   1a593:	48 83 ec 18          	sub    $0x18,%rsp
   1a597:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a59b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   1a59f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a5a3:	48 89 c7             	mov    %rax,%rdi
   1a5a6:	e8 0f 1f 00 00       	call   1c4ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1a5ab:	48 89 c3             	mov    %rax,%rbx
   1a5ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a5b2:	48 89 c7             	mov    %rax,%rdi
   1a5b5:	e8 72 d0 ff ff       	call   1762c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1a5ba:	48 89 c6             	mov    %rax,%rsi
   1a5bd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a5c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a5c5:	48 89 d1             	mov    %rdx,%rcx
   1a5c8:	48 89 da             	mov    %rbx,%rdx
   1a5cb:	48 89 c7             	mov    %rax,%rdi
   1a5ce:	e8 f9 1e 00 00       	call   1c4cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>
   1a5d3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a5d7:	c9                   	leave
   1a5d8:	c3                   	ret
   1a5d9:	90                   	nop

000000000001a5da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1a5da:	55                   	push   %rbp
   1a5db:	48 89 e5             	mov    %rsp,%rbp
   1a5de:	48 83 ec 20          	sub    $0x20,%rsp
   1a5e2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(&this->_M_impl._M_header); }
   1a5e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a5ea:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1a5ee:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1a5f2:	48 89 d6             	mov    %rdx,%rsi
   1a5f5:	48 89 c7             	mov    %rax,%rdi
   1a5f8:	e8 39 06 00 00       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1a5fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a601:	c9                   	leave
   1a602:	c3                   	ret
   1a603:	90                   	nop

000000000001a604 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>:
      key_comp() const
   1a604:	55                   	push   %rbp
   1a605:	48 89 e5             	mov    %rsp,%rbp
   1a608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_key_compare; }
   1a60c:	90                   	nop
   1a60d:	5d                   	pop    %rbp
   1a60e:	c3                   	ret
   1a60f:	90                   	nop

000000000001a610 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr()
   1a610:	55                   	push   %rbp
   1a611:	48 89 e5             	mov    %rsp,%rbp
   1a614:	48 83 ec 10          	sub    $0x10,%rsp
   1a618:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1a61c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a620:	48 83 c0 20          	add    $0x20,%rax
   1a624:	48 89 c7             	mov    %rax,%rdi
   1a627:	e8 36 1f 00 00       	call   1c562 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1a62c:	c9                   	leave
   1a62d:	c3                   	ret

000000000001a62e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   1a62e:	55                   	push   %rbp
   1a62f:	48 89 e5             	mov    %rsp,%rbp
   1a632:	48 83 ec 10          	sub    $0x10,%rsp
   1a636:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a63a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
   1a63e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a642:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a646:	48 89 d6             	mov    %rdx,%rsi
   1a649:	48 89 c7             	mov    %rax,%rdi
   1a64c:	e8 df 99 fe ff       	call   4030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>
   1a651:	c1 e8 1f             	shr    $0x1f,%eax
   1a654:	c9                   	leave
   1a655:	c3                   	ret

000000000001a656 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a656:	55                   	push   %rbp
   1a657:	48 89 e5             	mov    %rsp,%rbp
   1a65a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a65e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a662:	5d                   	pop    %rbp
   1a663:	c3                   	ret

000000000001a664 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
   1a664:	55                   	push   %rbp
   1a665:	48 89 e5             	mov    %rsp,%rbp
   1a668:	53                   	push   %rbx
   1a669:	48 83 ec 18          	sub    $0x18,%rsp
   1a66d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a671:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) { }
   1a675:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1a679:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a67d:	48 89 c7             	mov    %rax,%rdi
   1a680:	e8 d1 ff ff ff       	call   1a656 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1a685:	48 89 c6             	mov    %rax,%rsi
   1a688:	48 89 df             	mov    %rbx,%rdi
   1a68b:	e8 ec 1e 00 00       	call   1c57c <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
   1a690:	90                   	nop
   1a691:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a695:	c9                   	leave
   1a696:	c3                   	ret

000000000001a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a697:	55                   	push   %rbp
   1a698:	48 89 e5             	mov    %rsp,%rbp
   1a69b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a69f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6a3:	5d                   	pop    %rbp
   1a6a4:	c3                   	ret

000000000001a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a6a5:	55                   	push   %rbp
   1a6a6:	48 89 e5             	mov    %rsp,%rbp
   1a6a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a6ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6b1:	5d                   	pop    %rbp
   1a6b2:	c3                   	ret

000000000001a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1a6b3:	55                   	push   %rbp
   1a6b4:	48 89 e5             	mov    %rsp,%rbp
   1a6b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1a6bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a6bf:	5d                   	pop    %rbp
   1a6c0:	c3                   	ret
   1a6c1:	90                   	nop

000000000001a6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
   1a6c2:	55                   	push   %rbp
   1a6c3:	48 89 e5             	mov    %rsp,%rbp
   1a6c6:	41 54                	push   %r12
   1a6c8:	53                   	push   %rbx
   1a6c9:	48 83 ec 30          	sub    $0x30,%rsp
   1a6cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a6d1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a6d5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1a6d9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1a6dd:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  : _M_t(__t),
   1a6e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a6e5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a6e9:	48 89 10             	mov    %rdx,(%rax)
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   1a6ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a6f0:	48 89 c7             	mov    %rax,%rdi
   1a6f3:	e8 bb ff ff ff       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1a6f8:	49 89 c4             	mov    %rax,%r12
   1a6fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a6ff:	48 89 c7             	mov    %rax,%rdi
   1a702:	e8 9e ff ff ff       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1a707:	48 89 c3             	mov    %rax,%rbx
   1a70a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a70e:	48 89 c7             	mov    %rax,%rdi
   1a711:	e8 81 ff ff ff       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1a716:	48 89 c6             	mov    %rax,%rsi
   1a719:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a71d:	4c 89 e1             	mov    %r12,%rcx
   1a720:	48 89 da             	mov    %rbx,%rdx
   1a723:	48 89 c7             	mov    %rax,%rdi
   1a726:	e8 85 1e 00 00       	call   1c5b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
   1a72b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a72f:	48 89 42 08          	mov    %rax,0x8(%rdx)
	  { }
   1a733:	90                   	nop
   1a734:	48 83 c4 30          	add    $0x30,%rsp
   1a738:	5b                   	pop    %rbx
   1a739:	41 5c                	pop    %r12
   1a73b:	5d                   	pop    %rbp
   1a73c:	c3                   	ret
   1a73d:	90                   	nop

000000000001a73e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
   1a73e:	55                   	push   %rbp
   1a73f:	48 89 e5             	mov    %rsp,%rbp
   1a742:	48 83 ec 10          	sub    $0x10,%rsp
   1a746:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_node)
   1a74a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a74e:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a752:	48 85 c0             	test   %rax,%rax
   1a755:	74 1a                	je     1a771 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev+0x33>
	    _M_t._M_drop_node(_M_node);
   1a757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a75b:	48 8b 00             	mov    (%rax),%rax
   1a75e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1a762:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   1a766:	48 89 d6             	mov    %rdx,%rsi
   1a769:	48 89 c7             	mov    %rax,%rdi
   1a76c:	e8 d1 fd ff ff       	call   1a542 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
   1a771:	90                   	nop
   1a772:	c9                   	leave
   1a773:	c3                   	ret

000000000001a774 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a774:	55                   	push   %rbp
   1a775:	48 89 e5             	mov    %rsp,%rbp
   1a778:	53                   	push   %rbx
   1a779:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   1a780:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
   1a787:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
   1a78e:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
      iterator __pos = __position._M_const_cast();
   1a795:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1a79c:	48 89 c7             	mov    %rax,%rdi
   1a79f:	e8 88 1e 00 00       	call   1c62c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>
   1a7a4:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      if (__pos._M_node == _M_end())
   1a7ab:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1a7b2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a7b9:	48 89 c7             	mov    %rax,%rdi
   1a7bc:	e8 f9 1c 00 00       	call   1c4ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1a7c1:	48 39 c3             	cmp    %rax,%rbx
   1a7c4:	0f 94 c0             	sete   %al
   1a7c7:	84 c0                	test   %al,%al
   1a7c9:	0f 84 c8 00 00 00    	je     1a897 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x123>
	  if (size() > 0
   1a7cf:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a7d6:	48 89 c7             	mov    %rax,%rdi
   1a7d9:	e8 76 1e 00 00       	call   1c654 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1a7de:	48 85 c0             	test   %rax,%rax
   1a7e1:	74 44                	je     1a827 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1a7e3:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a7ea:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a7f1:	48 89 c7             	mov    %rax,%rdi
   1a7f4:	e8 6d 1e 00 00       	call   1c666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1a7f9:	48 8b 00             	mov    (%rax),%rax
   1a7fc:	48 89 c7             	mov    %rax,%rdi
   1a7ff:	e8 74 1e 00 00       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a804:	48 89 c1             	mov    %rax,%rcx
   1a807:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a80e:	48 89 c2             	mov    %rax,%rdx
   1a811:	48 89 ce             	mov    %rcx,%rsi
   1a814:	48 89 df             	mov    %rbx,%rdi
   1a817:	e8 f2 ce ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a81c:	84 c0                	test   %al,%al
   1a81e:	74 07                	je     1a827 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1a820:	b8 01 00 00 00       	mov    $0x1,%eax
   1a825:	eb 05                	jmp    1a82c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb8>
   1a827:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (size() > 0
   1a82c:	84 c0                	test   %al,%al
   1a82e:	74 49                	je     1a879 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x105>
	    return _Res(0, _M_rightmost());
   1a830:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a837:	48 89 c7             	mov    %rax,%rdi
   1a83a:	e8 27 1e 00 00       	call   1c666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1a83f:	48 89 c2             	mov    %rax,%rdx
   1a842:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
   1a849:	00 00 00 00 
   1a84d:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
   1a854:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1a85b:	48 89 ce             	mov    %rcx,%rsi
   1a85e:	48 89 c7             	mov    %rax,%rdi
   1a861:	e8 2c 1e 00 00       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1a866:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   1a86d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   1a874:	e9 43 03 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1a879:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1a880:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a887:	48 89 d6             	mov    %rdx,%rsi
   1a88a:	48 89 c7             	mov    %rax,%rdi
   1a88d:	e8 30 1e 00 00       	call   1c6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1a892:	e9 25 03 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1a897:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a89e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a8a5:	48 89 c7             	mov    %rax,%rdi
   1a8a8:	e8 cb 1d 00 00       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a8ad:	48 89 c2             	mov    %rax,%rdx
   1a8b0:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a8b7:	48 89 c6             	mov    %rax,%rsi
   1a8ba:	48 89 df             	mov    %rbx,%rdi
   1a8bd:	e8 4c ce ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a8c2:	84 c0                	test   %al,%al
   1a8c4:	0f 84 66 01 00 00    	je     1aa30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x2bc>
	  iterator __before = __pos;
   1a8ca:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1a8d1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
	  if (__pos._M_node == _M_leftmost()) // begin()
   1a8d8:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1a8df:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a8e6:	48 89 c7             	mov    %rax,%rdi
   1a8e9:	e8 4a 1f 00 00       	call   1c838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a8ee:	48 8b 00             	mov    (%rax),%rax
   1a8f1:	48 39 c3             	cmp    %rax,%rbx
   1a8f4:	0f 94 c0             	sete   %al
   1a8f7:	84 c0                	test   %al,%al
   1a8f9:	74 4c                	je     1a947 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1d3>
	    return _Res(_M_leftmost(), _M_leftmost());
   1a8fb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a902:	48 89 c7             	mov    %rax,%rdi
   1a905:	e8 2e 1f 00 00       	call   1c838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a90a:	48 89 c3             	mov    %rax,%rbx
   1a90d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1a914:	48 89 c7             	mov    %rax,%rdi
   1a917:	e8 1c 1f 00 00       	call   1c838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1a91c:	48 89 c1             	mov    %rax,%rcx
   1a91f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1a926:	48 89 da             	mov    %rbx,%rdx
   1a929:	48 89 ce             	mov    %rcx,%rsi
   1a92c:	48 89 c7             	mov    %rax,%rdi
   1a92f:	e8 16 1f 00 00       	call   1c84a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   1a934:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1a93b:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   1a942:	e9 75 02 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1a947:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1a94e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   1a955:	48 89 c7             	mov    %rax,%rdi
   1a958:	e8 31 1f 00 00       	call   1c88e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
   1a95d:	48 8b 00             	mov    (%rax),%rax
   1a960:	48 89 c7             	mov    %rax,%rdi
   1a963:	e8 10 1d 00 00       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1a968:	48 89 c1             	mov    %rax,%rcx
   1a96b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1a972:	48 89 c2             	mov    %rax,%rdx
   1a975:	48 89 ce             	mov    %rcx,%rsi
   1a978:	48 89 df             	mov    %rbx,%rdi
   1a97b:	e8 8e cd ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1a980:	84 c0                	test   %al,%al
   1a982:	0f 84 8a 00 00 00    	je     1aa12 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x29e>
	      if (_S_right(__before._M_node) == 0)
   1a988:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   1a98f:	48 89 c7             	mov    %rax,%rdi
   1a992:	e8 86 fb ff ff       	call   1a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1a997:	48 85 c0             	test   %rax,%rax
   1a99a:	0f 94 c0             	sete   %al
   1a99d:	84 c0                	test   %al,%al
   1a99f:	74 3e                	je     1a9df <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x26b>
		return _Res(0, __before._M_node);
   1a9a1:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1a9a8:	00 00 00 00 
   1a9ac:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1a9b3:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
   1a9ba:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1a9c1:	48 89 ce             	mov    %rcx,%rsi
   1a9c4:	48 89 c7             	mov    %rax,%rdi
   1a9c7:	e8 c6 1c 00 00       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1a9cc:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   1a9d3:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   1a9da:	e9 dd 01 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__pos._M_node, __pos._M_node);
   1a9df:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1a9e6:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1a9ed:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   1a9f4:	48 89 ce             	mov    %rcx,%rsi
   1a9f7:	48 89 c7             	mov    %rax,%rdi
   1a9fa:	e8 4b 1e 00 00       	call   1c84a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   1a9ff:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1aa06:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1aa0d:	e9 aa 01 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1aa12:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1aa19:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aa20:	48 89 d6             	mov    %rdx,%rsi
   1aa23:	48 89 c7             	mov    %rax,%rdi
   1aa26:	e8 97 1c 00 00       	call   1c6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1aa2b:	e9 8c 01 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1aa30:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1aa37:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1aa3e:	48 89 c7             	mov    %rax,%rdi
   1aa41:	e8 32 1c 00 00       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1aa46:	48 89 c1             	mov    %rax,%rcx
   1aa49:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1aa50:	48 89 c2             	mov    %rax,%rdx
   1aa53:	48 89 ce             	mov    %rcx,%rsi
   1aa56:	48 89 df             	mov    %rbx,%rdi
   1aa59:	e8 b0 cc ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1aa5e:	84 c0                	test   %al,%al
   1aa60:	0f 84 2c 01 00 00    	je     1ab92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x41e>
	  iterator __after = __pos;
   1aa66:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1aa6d:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	  if (__pos._M_node == _M_rightmost())
   1aa74:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1aa7b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aa82:	48 89 c7             	mov    %rax,%rdi
   1aa85:	e8 dc 1b 00 00       	call   1c666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1aa8a:	48 8b 00             	mov    (%rax),%rax
   1aa8d:	48 39 c3             	cmp    %rax,%rbx
   1aa90:	0f 94 c0             	sete   %al
   1aa93:	84 c0                	test   %al,%al
   1aa95:	74 3a                	je     1aad1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x35d>
	    return _Res(0, _M_rightmost());
   1aa97:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1aa9e:	48 89 c7             	mov    %rax,%rdi
   1aaa1:	e8 c0 1b 00 00       	call   1c666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1aaa6:	48 89 c2             	mov    %rax,%rdx
   1aaa9:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   1aab0:	00 
   1aab1:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
   1aab5:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1aab9:	48 89 ce             	mov    %rcx,%rsi
   1aabc:	48 89 c7             	mov    %rax,%rdi
   1aabf:	e8 ce 1b 00 00       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1aac4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1aac8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1aacc:	e9 eb 00 00 00       	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1aad1:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1aad8:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   1aadf:	48 89 c7             	mov    %rax,%rdi
   1aae2:	e8 cf 1d 00 00       	call   1c8b6 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>
   1aae7:	48 8b 00             	mov    (%rax),%rax
   1aaea:	48 89 c7             	mov    %rax,%rdi
   1aaed:	e8 86 1b 00 00       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1aaf2:	48 89 c2             	mov    %rax,%rdx
   1aaf5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1aafc:	48 89 c6             	mov    %rax,%rsi
   1aaff:	48 89 df             	mov    %rbx,%rdi
   1ab02:	e8 07 cc ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1ab07:	84 c0                	test   %al,%al
   1ab09:	74 6c                	je     1ab77 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x403>
	      if (_S_right(__pos._M_node) == 0)
   1ab0b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1ab12:	48 89 c7             	mov    %rax,%rdi
   1ab15:	e8 03 fa ff ff       	call   1a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1ab1a:	48 85 c0             	test   %rax,%rax
   1ab1d:	0f 94 c0             	sete   %al
   1ab20:	84 c0                	test   %al,%al
   1ab22:	74 2c                	je     1ab50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x3dc>
		return _Res(0, __pos._M_node);
   1ab24:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1ab2b:	00 
   1ab2c:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1ab33:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
   1ab37:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1ab3b:	48 89 ce             	mov    %rcx,%rsi
   1ab3e:	48 89 c7             	mov    %rax,%rdi
   1ab41:	e8 4c 1b 00 00       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1ab46:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1ab4a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1ab4e:	eb 6c                	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__after._M_node, __after._M_node);
   1ab50:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   1ab57:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
   1ab5e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1ab62:	48 89 ce             	mov    %rcx,%rsi
   1ab65:	48 89 c7             	mov    %rax,%rdi
   1ab68:	e8 dd 1c 00 00       	call   1c84a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
   1ab6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ab71:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ab75:	eb 45                	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1ab77:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1ab7e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ab85:	48 89 d6             	mov    %rdx,%rsi
   1ab88:	48 89 c7             	mov    %rax,%rdi
   1ab8b:	e8 32 1b 00 00       	call   1c6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1ab90:	eb 2a                	jmp    1abbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	return _Res(__pos._M_node, 0);
   1ab92:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1ab99:	00 
   1ab9a:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1ab9e:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1aba5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1aba9:	48 89 ce             	mov    %rcx,%rsi
   1abac:	48 89 c7             	mov    %rax,%rdi
   1abaf:	e8 de 1a 00 00       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1abb4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1abb8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1abbc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1abc0:	c9                   	leave
   1abc1:	c3                   	ret

000000000001abc2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
   1abc2:	55                   	push   %rbp
   1abc3:	48 89 e5             	mov    %rsp,%rbp
   1abc6:	48 83 ec 10          	sub    $0x10,%rsp
   1abca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _S_key(_M_node); }
   1abce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abd2:	48 8b 40 08          	mov    0x8(%rax),%rax
   1abd6:	48 89 c7             	mov    %rax,%rdi
   1abd9:	e8 00 1d 00 00       	call   1c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1abde:	c9                   	leave
   1abdf:	c3                   	ret

000000000001abe0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
   1abe0:	55                   	push   %rbp
   1abe1:	48 89 e5             	mov    %rsp,%rbp
   1abe4:	48 83 ec 30          	sub    $0x30,%rsp
   1abe8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1abec:	48 89 d1             	mov    %rdx,%rcx
   1abef:	48 89 f0             	mov    %rsi,%rax
   1abf2:	48 89 fa             	mov    %rdi,%rdx
   1abf5:	48 89 ca             	mov    %rcx,%rdx
   1abf8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1abfc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   1ac00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ac04:	48 8b 00             	mov    (%rax),%rax
   1ac07:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ac0b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
   1ac0f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ac13:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1ac17:	48 89 c7             	mov    %rax,%rdi
   1ac1a:	e8 eb 1c 00 00       	call   1c90a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
   1ac1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_node = nullptr;
   1ac23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ac27:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1ac2e:	00 
	  return __it;
   1ac2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1ac33:	c9                   	leave
   1ac34:	c3                   	ret
   1ac35:	90                   	nop

000000000001ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1ac36:	55                   	push   %rbp
   1ac37:	48 89 e5             	mov    %rsp,%rbp
   1ac3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac3e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
   1ac42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ac4a:	48 89 10             	mov    %rdx,(%rax)
   1ac4d:	90                   	nop
   1ac4e:	5d                   	pop    %rbp
   1ac4f:	c3                   	ret

000000000001ac50 <_ZN9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1ac50:	55                   	push   %rbp
   1ac51:	48 89 e5             	mov    %rsp,%rbp
   1ac54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac58:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1ac5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ac60:	48 8b 10             	mov    (%rax),%rdx
   1ac63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac67:	48 89 10             	mov    %rdx,(%rax)
   1ac6a:	90                   	nop
   1ac6b:	5d                   	pop    %rbp
   1ac6c:	c3                   	ret
   1ac6d:	90                   	nop

000000000001ac6e <_ZNK9__gnu_cxx17__normal_iteratorIPK18VkSurfaceFormatKHRSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1ac6e:	55                   	push   %rbp
   1ac6f:	48 89 e5             	mov    %rsp,%rbp
   1ac72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1ac76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac7a:	5d                   	pop    %rbp
   1ac7b:	c3                   	ret

000000000001ac7c <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
   1ac7c:	55                   	push   %rbp
   1ac7d:	48 89 e5             	mov    %rsp,%rbp
   1ac80:	48 83 ec 10          	sub    $0x10,%rsp
   1ac84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ac88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return allocator_type(_M_get_Tp_allocator()); }
   1ac8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ac90:	48 89 c7             	mov    %rax,%rdi
   1ac93:	e8 36 1d 00 00       	call   1c9ce <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1ac98:	48 89 c2             	mov    %rax,%rdx
   1ac9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ac9f:	48 89 d6             	mov    %rdx,%rsi
   1aca2:	48 89 c7             	mov    %rax,%rdi
   1aca5:	e8 76 08 ff ff       	call   b520 <_ZNSaIP9VkImage_TEC1ERKS1_>
   1acaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1acae:	c9                   	leave
   1acaf:	c3                   	ret

000000000001acb0 <_ZNSt6vectorIP9VkImage_TSaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   1acb0:	55                   	push   %rbp
   1acb1:	48 89 e5             	mov    %rsp,%rbp
   1acb4:	48 83 ec 10          	sub    $0x10,%rsp
   1acb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1acbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(__a) { }
   1acc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1acc4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1acc8:	48 89 d6             	mov    %rdx,%rsi
   1accb:	48 89 c7             	mov    %rax,%rdi
   1acce:	e8 09 1d 00 00       	call   1c9dc <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1ERKS2_>
   1acd3:	90                   	nop
   1acd4:	c9                   	leave
   1acd5:	c3                   	ret

000000000001acd6 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
   1acd6:	55                   	push   %rbp
   1acd7:	48 89 e5             	mov    %rsp,%rbp
   1acda:	48 83 ec 30          	sub    $0x30,%rsp
   1acde:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ace2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  _Vector_impl_data __tmp;
   1ace6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1acea:	48 89 c7             	mov    %rax,%rdi
   1aced:	e8 b0 1c ff ff       	call   c9a2 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
   1acf2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1acf6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1acfa:	48 89 d6             	mov    %rdx,%rsi
   1acfd:	48 89 c7             	mov    %rax,%rdi
   1ad00:	e8 fd 1c 00 00       	call   1ca02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  _M_copy_data(__x);
   1ad05:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1ad09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ad0d:	48 89 d6             	mov    %rdx,%rsi
   1ad10:	48 89 c7             	mov    %rax,%rdi
   1ad13:	e8 ea 1c 00 00       	call   1ca02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  __x._M_copy_data(__tmp);
   1ad18:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1ad1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ad20:	48 89 d6             	mov    %rdx,%rsi
   1ad23:	48 89 c7             	mov    %rax,%rdi
   1ad26:	e8 d7 1c 00 00       	call   1ca02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	}
   1ad2b:	90                   	nop
   1ad2c:	c9                   	leave
   1ad2d:	c3                   	ret

000000000001ad2e <_ZSt15__alloc_on_moveISaIP9VkImage_TEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
   1ad2e:	55                   	push   %rbp
   1ad2f:	48 89 e5             	mov    %rsp,%rbp
   1ad32:	48 83 ec 10          	sub    $0x10,%rsp
   1ad36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ad3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__one = std::move(__two);
   1ad3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ad42:	48 89 c7             	mov    %rax,%rdi
   1ad45:	e8 f5 1c 00 00       	call   1ca3f <_ZSt4moveIRSaIP9VkImage_TEEONSt16remove_referenceIT_E4typeEOS5_>
    }
   1ad4a:	90                   	nop
   1ad4b:	c9                   	leave
   1ad4c:	c3                   	ret
   1ad4d:	90                   	nop

000000000001ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1ad4e:	55                   	push   %rbp
   1ad4f:	48 89 e5             	mov    %rsp,%rbp
   1ad52:	48 83 ec 10          	sub    $0x10,%rsp
   1ad56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1ad5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ad5e:	48 89 c7             	mov    %rax,%rdi
   1ad61:	e8 2a 1d 00 00       	call   1ca90 <_ZNKSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1ad66:	48 89 c7             	mov    %rax,%rdi
   1ad69:	e8 df 1c 00 00       	call   1ca4d <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_max_sizeERKS2_>
   1ad6e:	c9                   	leave
   1ad6f:	c3                   	ret

000000000001ad70 <_ZSt27__uninitialized_default_n_aIPP13VkImageView_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1ad70:	55                   	push   %rbp
   1ad71:	48 89 e5             	mov    %rsp,%rbp
   1ad74:	48 83 ec 20          	sub    $0x20,%rsp
   1ad78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ad7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ad80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1ad84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ad88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ad8c:	48 89 d6             	mov    %rdx,%rsi
   1ad8f:	48 89 c7             	mov    %rax,%rdi
   1ad92:	e8 07 1d 00 00       	call   1ca9e <_ZSt25__uninitialized_default_nIPP13VkImageView_TmET_S3_T0_>
   1ad97:	c9                   	leave
   1ad98:	c3                   	ret
   1ad99:	90                   	nop

000000000001ad9a <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1ad9a:	55                   	push   %rbp
   1ad9b:	48 89 e5             	mov    %rsp,%rbp
   1ad9e:	53                   	push   %rbx
   1ad9f:	48 83 ec 38          	sub    $0x38,%rsp
   1ada3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ada7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1adab:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1adaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adb3:	48 89 c7             	mov    %rax,%rdi
   1adb6:	e8 93 ff ff ff       	call   1ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   1adbb:	48 89 c3             	mov    %rax,%rbx
   1adbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adc2:	48 89 c7             	mov    %rax,%rdi
   1adc5:	e8 d6 a4 ff ff       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   1adca:	48 29 c3             	sub    %rax,%rbx
   1adcd:	48 89 da             	mov    %rbx,%rdx
   1add0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1add4:	48 39 c2             	cmp    %rax,%rdx
   1add7:	0f 92 c0             	setb   %al
   1adda:	84 c0                	test   %al,%al
   1addc:	74 0c                	je     1adea <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1adde:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ade2:	48 89 c7             	mov    %rax,%rdi
   1ade5:	e8 16 94 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1adea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adee:	48 89 c7             	mov    %rax,%rdi
   1adf1:	e8 aa a4 ff ff       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   1adf6:	48 89 c3             	mov    %rax,%rbx
   1adf9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1adfd:	48 89 c7             	mov    %rax,%rdi
   1ae00:	e8 9b a4 ff ff       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   1ae05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ae09:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1ae0d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1ae11:	48 89 d6             	mov    %rdx,%rsi
   1ae14:	48 89 c7             	mov    %rax,%rdi
   1ae17:	e8 ce 14 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1ae1c:	48 8b 00             	mov    (%rax),%rax
   1ae1f:	48 01 d8             	add    %rbx,%rax
   1ae22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ae26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ae2a:	48 89 c7             	mov    %rax,%rdi
   1ae2d:	e8 6e a4 ff ff       	call   152a0 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE4sizeEv>
   1ae32:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1ae36:	72 12                	jb     1ae4a <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1ae38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ae3c:	48 89 c7             	mov    %rax,%rdi
   1ae3f:	e8 0a ff ff ff       	call   1ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   1ae44:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1ae48:	73 0e                	jae    1ae58 <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1ae4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ae4e:	48 89 c7             	mov    %rax,%rdi
   1ae51:	e8 f8 fe ff ff       	call   1ad4e <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE8max_sizeEv>
   1ae56:	eb 04                	jmp    1ae5c <_ZNKSt6vectorIP13VkImageView_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1ae58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1ae5c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ae60:	c9                   	leave
   1ae61:	c3                   	ret

000000000001ae62 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1ae62:	55                   	push   %rbp
   1ae63:	48 89 e5             	mov    %rsp,%rbp
   1ae66:	48 83 ec 10          	sub    $0x10,%rsp
   1ae6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ae6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1ae72:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1ae77:	74 15                	je     1ae8e <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm+0x2c>
   1ae79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ae7d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ae81:	48 89 d6             	mov    %rdx,%rsi
   1ae84:	48 89 c7             	mov    %rax,%rdi
   1ae87:	e8 3b 1c 00 00       	call   1cac7 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8allocateERS2_m>
   1ae8c:	eb 05                	jmp    1ae93 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE11_M_allocateEm+0x31>
   1ae8e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1ae93:	c9                   	leave
   1ae94:	c3                   	ret

000000000001ae95 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1ae95:	55                   	push   %rbp
   1ae96:	48 89 e5             	mov    %rsp,%rbp
   1ae99:	48 83 ec 20          	sub    $0x20,%rsp
   1ae9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aea1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1aea5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1aea9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1aead:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1aeb1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1aeb5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1aeb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aebd:	48 89 c7             	mov    %rax,%rdi
   1aec0:	e8 2c 1c 00 00       	call   1caf1 <_ZSt12__relocate_aIPP13VkImageView_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1aec5:	c9                   	leave
   1aec6:	c3                   	ret

000000000001aec7 <_ZNSt14__array_traitsI33VkVertexInputAttributeDescriptionLm2EE6_S_refERA2_KS0_m>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
   1aec7:	55                   	push   %rbp
   1aec8:	48 89 e5             	mov    %rsp,%rbp
   1aecb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aecf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return const_cast<_Tp&>(__t[__n]); }
   1aed3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aed7:	48 c1 e0 04          	shl    $0x4,%rax
   1aedb:	48 89 c2             	mov    %rax,%rdx
   1aede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1aee2:	48 01 d0             	add    %rdx,%rax
   1aee5:	5d                   	pop    %rbp
   1aee6:	c3                   	ret
   1aee7:	90                   	nop

000000000001aee8 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1aee8:	55                   	push   %rbp
   1aee9:	48 89 e5             	mov    %rsp,%rbp
   1aeec:	48 83 ec 10          	sub    $0x10,%rsp
   1aef0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1aef4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1aef8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1aefc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af00:	48 89 d6             	mov    %rdx,%rsi
   1af03:	48 89 c7             	mov    %rax,%rdi
   1af06:	e8 49 1c 00 00       	call   1cb54 <_ZNSaI28VkGraphicsPipelineCreateInfoEC1ERKS0_>
   1af0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af0f:	48 89 c7             	mov    %rax,%rdi
   1af12:	e8 63 1c 00 00       	call   1cb7a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
   1af17:	90                   	nop
   1af18:	c9                   	leave
   1af19:	c3                   	ret

000000000001af1a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE13_M_deallocateEPS0_m>:
      _M_deallocate(pointer __p, size_t __n)
   1af1a:	55                   	push   %rbp
   1af1b:	48 89 e5             	mov    %rsp,%rbp
   1af1e:	48 83 ec 20          	sub    $0x20,%rsp
   1af22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af26:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1af2a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1af2e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1af33:	74 17                	je     1af4c <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE13_M_deallocateEPS0_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1af35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1af3d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1af41:	48 89 ce             	mov    %rcx,%rsi
   1af44:	48 89 c7             	mov    %rax,%rdi
   1af47:	e8 5c 1c 00 00       	call   1cba8 <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE10deallocateERS1_PS0_m>
      }
   1af4c:	90                   	nop
   1af4d:	c9                   	leave
   1af4e:	c3                   	ret
   1af4f:	90                   	nop

000000000001af50 <_ZNKSt16initializer_listI28VkGraphicsPipelineCreateInfoE4sizeEv>:
   1af50:	55                   	push   %rbp
   1af51:	48 89 e5             	mov    %rsp,%rbp
   1af54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af5c:	48 8b 40 08          	mov    0x8(%rax),%rax
   1af60:	5d                   	pop    %rbp
   1af61:	c3                   	ret

000000000001af62 <_ZSt19__iterator_categoryIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1af62:	55                   	push   %rbp
   1af63:	48 89 e5             	mov    %rsp,%rbp
   1af66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1af6a:	90                   	nop
   1af6b:	5d                   	pop    %rbp
   1af6c:	c3                   	ret

000000000001af6d <_ZSt10__distanceIPK28VkGraphicsPipelineCreateInfoENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   1af6d:	55                   	push   %rbp
   1af6e:	48 89 e5             	mov    %rsp,%rbp
   1af71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af75:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   1af79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1af7d:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   1af81:	48 c1 f8 04          	sar    $0x4,%rax
   1af85:	48 89 c2             	mov    %rax,%rdx
   1af88:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
   1af8f:	e3 38 8e 
   1af92:	48 0f af c2          	imul   %rdx,%rax
    }
   1af96:	5d                   	pop    %rbp
   1af97:	c3                   	ret

000000000001af98 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE17_S_check_init_lenEmRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   1af98:	55                   	push   %rbp
   1af99:	48 89 e5             	mov    %rsp,%rbp
   1af9c:	53                   	push   %rbx
   1af9d:	48 83 ec 28          	sub    $0x28,%rsp
   1afa1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1afa5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1afa9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1afad:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1afb1:	48 89 d6             	mov    %rdx,%rsi
   1afb4:	48 89 c7             	mov    %rax,%rdi
   1afb7:	e8 98 1b 00 00       	call   1cb54 <_ZNSaI28VkGraphicsPipelineCreateInfoEC1ERKS0_>
   1afbc:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1afc0:	48 89 c7             	mov    %rax,%rdi
   1afc3:	e8 0e 1c 00 00       	call   1cbd6 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_S_max_sizeERKS1_>
   1afc8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1afcc:	0f 92 c3             	setb   %bl
   1afcf:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1afd3:	48 89 c7             	mov    %rax,%rdi
   1afd6:	e8 31 a0 ff ff       	call   1500c <_ZNSaI28VkGraphicsPipelineCreateInfoED1Ev>
   1afdb:	84 db                	test   %bl,%bl
   1afdd:	74 0f                	je     1afee <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE17_S_check_init_lenEmRKS1_+0x56>
	  __throw_length_error(
   1afdf:	48 8d 05 4a 8a 00 00 	lea    0x8a4a(%rip),%rax        # 23a30 <_ZZN9VulkanApp6renderEvE11submitCount+0x738>
   1afe6:	48 89 c7             	mov    %rax,%rdi
   1afe9:	e8 12 92 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   1afee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   1aff2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1aff6:	c9                   	leave
   1aff7:	c3                   	ret

000000000001aff8 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1aff8:	55                   	push   %rbp
   1aff9:	48 89 e5             	mov    %rsp,%rbp
   1affc:	48 83 ec 10          	sub    $0x10,%rsp
   1b000:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b004:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b008:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b00d:	74 15                	je     1b024 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_allocateEm+0x2c>
   1b00f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b013:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b017:	48 89 d6             	mov    %rdx,%rsi
   1b01a:	48 89 c7             	mov    %rax,%rdi
   1b01d:	e8 f6 1b 00 00       	call   1cc18 <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE8allocateERS1_m>
   1b022:	eb 05                	jmp    1b029 <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_allocateEm+0x31>
   1b024:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1b029:	c9                   	leave
   1b02a:	c3                   	ret

000000000001b02b <_ZSt22__uninitialized_copy_aIPK28VkGraphicsPipelineCreateInfoPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1b02b:	55                   	push   %rbp
   1b02c:	48 89 e5             	mov    %rsp,%rbp
   1b02f:	48 83 ec 20          	sub    $0x20,%rsp
   1b033:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b037:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b03b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b03f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   1b043:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b047:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b04b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b04f:	48 89 ce             	mov    %rcx,%rsi
   1b052:	48 89 c7             	mov    %rax,%rdi
   1b055:	e8 e8 1b 00 00       	call   1cc42 <_ZSt18uninitialized_copyIPK28VkGraphicsPipelineCreateInfoPS0_ET0_T_S5_S4_>
    }
   1b05a:	c9                   	leave
   1b05b:	c3                   	ret

000000000001b05c <_ZSt8_DestroyIP28VkGraphicsPipelineCreateInfoEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b05c:	55                   	push   %rbp
   1b05d:	48 89 e5             	mov    %rsp,%rbp
   1b060:	48 83 ec 10          	sub    $0x10,%rsp
   1b064:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b068:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1b06c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b074:	48 89 d6             	mov    %rdx,%rsi
   1b077:	48 89 c7             	mov    %rax,%rdi
   1b07a:	e8 f8 1b 00 00       	call   1cc77 <_ZNSt12_Destroy_auxILb1EE9__destroyIP28VkGraphicsPipelineCreateInfoEEvT_S4_>
    }
   1b07f:	90                   	nop
   1b080:	c9                   	leave
   1b081:	c3                   	ret

000000000001b082 <_ZNSt15__new_allocatorIP12VkPipeline_TEC1Ev>:
   1b082:	55                   	push   %rbp
   1b083:	48 89 e5             	mov    %rsp,%rbp
   1b086:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b08a:	90                   	nop
   1b08b:	5d                   	pop    %rbp
   1b08c:	c3                   	ret
   1b08d:	90                   	nop

000000000001b08e <_ZNSt15__new_allocatorIP12VkPipeline_TED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1b08e:	55                   	push   %rbp
   1b08f:	48 89 e5             	mov    %rsp,%rbp
   1b092:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b096:	90                   	nop
   1b097:	5d                   	pop    %rbp
   1b098:	c3                   	ret

000000000001b099 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   1b099:	55                   	push   %rbp
   1b09a:	48 89 e5             	mov    %rsp,%rbp
   1b09d:	53                   	push   %rbx
   1b09e:	48 83 ec 28          	sub    $0x28,%rsp
   1b0a2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b0a6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1b0aa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1b0ae:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b0b2:	48 89 d6             	mov    %rdx,%rsi
   1b0b5:	48 89 c7             	mov    %rax,%rdi
   1b0b8:	e8 ff 00 00 00       	call   1b1bc <_ZNSaIP12VkPipeline_TEC1ERKS1_>
   1b0bd:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b0c1:	48 89 c7             	mov    %rax,%rdi
   1b0c4:	e8 bd 1b 00 00       	call   1cc86 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE11_S_max_sizeERKS2_>
   1b0c9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1b0cd:	0f 92 c3             	setb   %bl
   1b0d0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b0d4:	48 89 c7             	mov    %rax,%rdi
   1b0d7:	e8 40 ce ff ff       	call   17f1c <_ZNSaIP12VkPipeline_TED1Ev>
   1b0dc:	84 db                	test   %bl,%bl
   1b0de:	74 0f                	je     1b0ef <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   1b0e0:	48 8d 05 49 89 00 00 	lea    0x8949(%rip),%rax        # 23a30 <_ZZN9VulkanApp6renderEvE11submitCount+0x738>
   1b0e7:	48 89 c7             	mov    %rax,%rdi
   1b0ea:	e8 11 91 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   1b0ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   1b0f3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b0f7:	c9                   	leave
   1b0f8:	c3                   	ret
   1b0f9:	90                   	nop

000000000001b0fa <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   1b0fa:	55                   	push   %rbp
   1b0fb:	48 89 e5             	mov    %rsp,%rbp
   1b0fe:	53                   	push   %rbx
   1b0ff:	48 83 ec 28          	sub    $0x28,%rsp
   1b103:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b107:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b10b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   1b10f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b113:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b117:	48 89 d6             	mov    %rdx,%rsi
   1b11a:	48 89 c7             	mov    %rax,%rdi
   1b11d:	e8 a6 1b 00 00       	call   1ccc8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   1b122:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b126:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b12a:	48 89 d6             	mov    %rdx,%rsi
   1b12d:	48 89 c7             	mov    %rax,%rdi
   1b130:	e8 c5 1b 00 00       	call   1ccfa <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_M_create_storageEm>
   1b135:	eb 1a                	jmp    1b151 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EEC1EmRKS2_+0x57>
   1b137:	48 89 c3             	mov    %rax,%rbx
   1b13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b13e:	48 89 c7             	mov    %rax,%rdi
   1b141:	e8 ae 9f ff ff       	call   150f4 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implD1Ev>
   1b146:	48 89 d8             	mov    %rbx,%rax
   1b149:	48 89 c7             	mov    %rax,%rdi
   1b14c:	e8 1f 98 fe ff       	call   4970 <_Unwind_Resume@plt>
   1b151:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b155:	c9                   	leave
   1b156:	c3                   	ret
   1b157:	90                   	nop

000000000001b158 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
   1b158:	55                   	push   %rbp
   1b159:	48 89 e5             	mov    %rsp,%rbp
   1b15c:	48 83 ec 10          	sub    $0x10,%rsp
   1b160:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b164:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
   1b168:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b16c:	48 89 c7             	mov    %rax,%rdi
   1b16f:	e8 d0 ce ff ff       	call   18044 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b174:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   1b177:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b17b:	48 8b 00             	mov    (%rax),%rax
   1b17e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b182:	48 89 ce             	mov    %rcx,%rsi
   1b185:	48 89 c7             	mov    %rax,%rdi
   1b188:	e8 c3 1b 00 00       	call   1cd50 <_ZSt27__uninitialized_default_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
   1b18d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b191:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   1b195:	90                   	nop
   1b196:	c9                   	leave
   1b197:	c3                   	ret

000000000001b198 <_ZNKSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_M_data_ptrIS0_EEPT_S5_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1b198:	55                   	push   %rbp
   1b199:	48 89 e5             	mov    %rsp,%rbp
   1b19c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1b1a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b1a8:	5d                   	pop    %rbp
   1b1a9:	c3                   	ret

000000000001b1aa <_ZNKSt6vectorIP12VkPipeline_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1b1aa:	55                   	push   %rbp
   1b1ab:	48 89 e5             	mov    %rsp,%rbp
   1b1ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1b1b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b1ba:	5d                   	pop    %rbp
   1b1bb:	c3                   	ret

000000000001b1bc <_ZNSaIP12VkPipeline_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1b1bc:	55                   	push   %rbp
   1b1bd:	48 89 e5             	mov    %rsp,%rbp
   1b1c0:	48 83 ec 10          	sub    $0x10,%rsp
   1b1c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1b1cc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b1d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b1d4:	48 89 d6             	mov    %rdx,%rsi
   1b1d7:	48 89 c7             	mov    %rax,%rdi
   1b1da:	e8 9b 1b 00 00       	call   1cd7a <_ZNSt15__new_allocatorIP12VkPipeline_TEC1ERKS2_>
   1b1df:	90                   	nop
   1b1e0:	c9                   	leave
   1b1e1:	c3                   	ret

000000000001b1e2 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1b1e2:	55                   	push   %rbp
   1b1e3:	48 89 e5             	mov    %rsp,%rbp
   1b1e6:	48 83 ec 20          	sub    $0x20,%rsp
   1b1ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1ee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b1f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1b1f6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b1fb:	74 17                	je     1b214 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1b1fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b201:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b205:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b209:	48 89 ce             	mov    %rcx,%rsi
   1b20c:	48 89 c7             	mov    %rax,%rdi
   1b20f:	e8 75 1b 00 00       	call   1cd89 <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE10deallocateERS2_PS1_m>
      }
   1b214:	90                   	nop
   1b215:	c9                   	leave
   1b216:	c3                   	ret

000000000001b217 <_ZSt8_DestroyIPP12VkPipeline_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b217:	55                   	push   %rbp
   1b218:	48 89 e5             	mov    %rsp,%rbp
   1b21b:	48 83 ec 10          	sub    $0x10,%rsp
   1b21f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b223:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1b227:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b22b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b22f:	48 89 d6             	mov    %rdx,%rsi
   1b232:	48 89 c7             	mov    %rax,%rdi
   1b235:	e8 7d 1b 00 00       	call   1cdb7 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12VkPipeline_TEEvT_S5_>
    }
   1b23a:	90                   	nop
   1b23b:	c9                   	leave
   1b23c:	c3                   	ret
   1b23d:	90                   	nop

000000000001b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1b23e:	55                   	push   %rbp
   1b23f:	48 89 e5             	mov    %rsp,%rbp
   1b242:	48 83 ec 10          	sub    $0x10,%rsp
   1b246:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1b24a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b24e:	48 89 c7             	mov    %rax,%rdi
   1b251:	e8 b2 1b 00 00       	call   1ce08 <_ZNKSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b256:	48 89 c7             	mov    %rax,%rdi
   1b259:	e8 68 1b 00 00       	call   1cdc6 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE11_S_max_sizeERKS2_>
   1b25e:	c9                   	leave
   1b25f:	c3                   	ret

000000000001b260 <_ZSt27__uninitialized_default_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1b260:	55                   	push   %rbp
   1b261:	48 89 e5             	mov    %rsp,%rbp
   1b264:	48 83 ec 20          	sub    $0x20,%rsp
   1b268:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b26c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b270:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1b274:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b27c:	48 89 d6             	mov    %rdx,%rsi
   1b27f:	48 89 c7             	mov    %rax,%rdi
   1b282:	e8 8f 1b 00 00       	call   1ce16 <_ZSt25__uninitialized_default_nIPP15VkFramebuffer_TmET_S3_T0_>
   1b287:	c9                   	leave
   1b288:	c3                   	ret
   1b289:	90                   	nop

000000000001b28a <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1b28a:	55                   	push   %rbp
   1b28b:	48 89 e5             	mov    %rsp,%rbp
   1b28e:	53                   	push   %rbx
   1b28f:	48 83 ec 38          	sub    $0x38,%rsp
   1b293:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b297:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b29b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1b29f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b2a3:	48 89 c7             	mov    %rax,%rdi
   1b2a6:	e8 93 ff ff ff       	call   1b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>
   1b2ab:	48 89 c3             	mov    %rax,%rbx
   1b2ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b2b2:	48 89 c7             	mov    %rax,%rdi
   1b2b5:	e8 c2 cd ff ff       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   1b2ba:	48 29 c3             	sub    %rax,%rbx
   1b2bd:	48 89 da             	mov    %rbx,%rdx
   1b2c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b2c4:	48 39 c2             	cmp    %rax,%rdx
   1b2c7:	0f 92 c0             	setb   %al
   1b2ca:	84 c0                	test   %al,%al
   1b2cc:	74 0c                	je     1b2da <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1b2ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b2d2:	48 89 c7             	mov    %rax,%rdi
   1b2d5:	e8 26 8f fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1b2da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b2de:	48 89 c7             	mov    %rax,%rdi
   1b2e1:	e8 96 cd ff ff       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   1b2e6:	48 89 c3             	mov    %rax,%rbx
   1b2e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b2ed:	48 89 c7             	mov    %rax,%rdi
   1b2f0:	e8 87 cd ff ff       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   1b2f5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b2f9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1b2fd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1b301:	48 89 d6             	mov    %rdx,%rsi
   1b304:	48 89 c7             	mov    %rax,%rdi
   1b307:	e8 de 0f 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1b30c:	48 8b 00             	mov    (%rax),%rax
   1b30f:	48 01 d8             	add    %rbx,%rax
   1b312:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b316:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b31a:	48 89 c7             	mov    %rax,%rdi
   1b31d:	e8 5a cd ff ff       	call   1807c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE4sizeEv>
   1b322:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b326:	72 12                	jb     1b33a <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1b328:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b32c:	48 89 c7             	mov    %rax,%rdi
   1b32f:	e8 0a ff ff ff       	call   1b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>
   1b334:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1b338:	73 0e                	jae    1b348 <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1b33a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b33e:	48 89 c7             	mov    %rax,%rdi
   1b341:	e8 f8 fe ff ff       	call   1b23e <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE8max_sizeEv>
   1b346:	eb 04                	jmp    1b34c <_ZNKSt6vectorIP15VkFramebuffer_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1b348:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1b34c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b350:	c9                   	leave
   1b351:	c3                   	ret

000000000001b352 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1b352:	55                   	push   %rbp
   1b353:	48 89 e5             	mov    %rsp,%rbp
   1b356:	48 83 ec 10          	sub    $0x10,%rsp
   1b35a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b35e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b362:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b367:	74 15                	je     1b37e <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE11_M_allocateEm+0x2c>
   1b369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b36d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b371:	48 89 d6             	mov    %rdx,%rsi
   1b374:	48 89 c7             	mov    %rax,%rdi
   1b377:	e8 c3 1a 00 00       	call   1ce3f <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE8allocateERS2_m>
   1b37c:	eb 05                	jmp    1b383 <_ZNSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE11_M_allocateEm+0x31>
   1b37e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1b383:	c9                   	leave
   1b384:	c3                   	ret

000000000001b385 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1b385:	55                   	push   %rbp
   1b386:	48 89 e5             	mov    %rsp,%rbp
   1b389:	48 83 ec 20          	sub    $0x20,%rsp
   1b38d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b391:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b395:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b399:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1b39d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1b3a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b3a5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1b3a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3ad:	48 89 c7             	mov    %rax,%rdi
   1b3b0:	e8 b4 1a 00 00       	call   1ce69 <_ZSt12__relocate_aIPP15VkFramebuffer_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1b3b5:	c9                   	leave
   1b3b6:	c3                   	ret
   1b3b7:	90                   	nop

000000000001b3b8 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1b3b8:	55                   	push   %rbp
   1b3b9:	48 89 e5             	mov    %rsp,%rbp
   1b3bc:	48 83 ec 10          	sub    $0x10,%rsp
   1b3c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b3c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1b3c8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b3cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3d0:	48 89 d6             	mov    %rdx,%rsi
   1b3d3:	48 89 c7             	mov    %rax,%rdi
   1b3d6:	e8 f1 1a 00 00       	call   1cecc <_ZNSaIP13VkImageView_TEC1ERKS1_>
   1b3db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3df:	48 89 c7             	mov    %rax,%rdi
   1b3e2:	e8 3b e9 ff ff       	call   19d22 <_ZNSt12_Vector_baseIP13VkImageView_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   1b3e7:	90                   	nop
   1b3e8:	c9                   	leave
   1b3e9:	c3                   	ret

000000000001b3ea <_ZNKSt16initializer_listIP13VkImageView_TE4sizeEv>:
   1b3ea:	55                   	push   %rbp
   1b3eb:	48 89 e5             	mov    %rsp,%rbp
   1b3ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3f6:	48 8b 40 08          	mov    0x8(%rax),%rax
   1b3fa:	5d                   	pop    %rbp
   1b3fb:	c3                   	ret

000000000001b3fc <_ZSt19__iterator_categoryIPKP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   1b3fc:	55                   	push   %rbp
   1b3fd:	48 89 e5             	mov    %rsp,%rbp
   1b400:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1b404:	90                   	nop
   1b405:	5d                   	pop    %rbp
   1b406:	c3                   	ret

000000000001b407 <_ZSt10__distanceIPKP13VkImageView_TENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   1b407:	55                   	push   %rbp
   1b408:	48 89 e5             	mov    %rsp,%rbp
   1b40b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b40f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   1b413:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b417:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   1b41b:	48 c1 f8 03          	sar    $0x3,%rax
    }
   1b41f:	5d                   	pop    %rbp
   1b420:	c3                   	ret

000000000001b421 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   1b421:	55                   	push   %rbp
   1b422:	48 89 e5             	mov    %rsp,%rbp
   1b425:	53                   	push   %rbx
   1b426:	48 83 ec 28          	sub    $0x28,%rsp
   1b42a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b42e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1b432:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1b436:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b43a:	48 89 d6             	mov    %rdx,%rsi
   1b43d:	48 89 c7             	mov    %rax,%rdi
   1b440:	e8 87 1a 00 00       	call   1cecc <_ZNSaIP13VkImageView_TEC1ERKS1_>
   1b445:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b449:	48 89 c7             	mov    %rax,%rdi
   1b44c:	e8 fc 15 00 00       	call   1ca4d <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_max_sizeERKS2_>
   1b451:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1b455:	0f 92 c3             	setb   %bl
   1b458:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1b45c:	48 89 c7             	mov    %rax,%rdi
   1b45f:	e8 02 9f ff ff       	call   15366 <_ZNSaIP13VkImageView_TED1Ev>
   1b464:	84 db                	test   %bl,%bl
   1b466:	74 0f                	je     1b477 <_ZNSt6vectorIP13VkImageView_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   1b468:	48 8d 05 c1 85 00 00 	lea    0x85c1(%rip),%rax        # 23a30 <_ZZN9VulkanApp6renderEvE11submitCount+0x738>
   1b46f:	48 89 c7             	mov    %rax,%rdi
   1b472:	e8 89 8d fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   1b477:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   1b47b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b47f:	c9                   	leave
   1b480:	c3                   	ret

000000000001b481 <_ZSt22__uninitialized_copy_aIPKP13VkImageView_TPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1b481:	55                   	push   %rbp
   1b482:	48 89 e5             	mov    %rsp,%rbp
   1b485:	48 83 ec 20          	sub    $0x20,%rsp
   1b489:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b48d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b491:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b495:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   1b499:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b49d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b4a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4a5:	48 89 ce             	mov    %rcx,%rsi
   1b4a8:	48 89 c7             	mov    %rax,%rdi
   1b4ab:	e8 42 1a 00 00       	call   1cef2 <_ZSt18uninitialized_copyIPKP13VkImageView_TPS1_ET0_T_S6_S5_>
    }
   1b4b0:	c9                   	leave
   1b4b1:	c3                   	ret

000000000001b4b2 <_ZSt8_DestroyIPP13VkImageView_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b4b2:	55                   	push   %rbp
   1b4b3:	48 89 e5             	mov    %rsp,%rbp
   1b4b6:	48 83 ec 10          	sub    $0x10,%rsp
   1b4ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b4be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1b4c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b4c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4ca:	48 89 d6             	mov    %rdx,%rsi
   1b4cd:	48 89 c7             	mov    %rax,%rdi
   1b4d0:	e8 52 1a 00 00       	call   1cf27 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkImageView_TEEvT_S5_>
    }
   1b4d5:	90                   	nop
   1b4d6:	c9                   	leave
   1b4d7:	c3                   	ret

000000000001b4d8 <_ZNKSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
   1b4d8:	55                   	push   %rbp
   1b4d9:	48 89 e5             	mov    %rsp,%rbp
   1b4dc:	48 83 ec 10          	sub    $0x10,%rsp
   1b4e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b4e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return allocator_type(_M_get_Tp_allocator()); }
   1b4e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b4ec:	48 89 c7             	mov    %rax,%rdi
   1b4ef:	e8 42 1a 00 00       	call   1cf36 <_ZNKSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b4f4:	48 89 c2             	mov    %rax,%rdx
   1b4f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b4fb:	48 89 d6             	mov    %rdx,%rsi
   1b4fe:	48 89 c7             	mov    %rax,%rdi
   1b501:	e8 4c b5 fe ff       	call   6a52 <_ZNSaIP17VkCommandBuffer_TEC1ERKS1_>
   1b506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b50a:	c9                   	leave
   1b50b:	c3                   	ret

000000000001b50c <_ZNSt6vectorIP17VkCommandBuffer_TSaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   1b50c:	55                   	push   %rbp
   1b50d:	48 89 e5             	mov    %rsp,%rbp
   1b510:	48 83 ec 10          	sub    $0x10,%rsp
   1b514:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b518:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(__a) { }
   1b51c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b520:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b524:	48 89 d6             	mov    %rdx,%rsi
   1b527:	48 89 c7             	mov    %rax,%rdi
   1b52a:	e8 15 1a 00 00       	call   1cf44 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1ERKS2_>
   1b52f:	90                   	nop
   1b530:	c9                   	leave
   1b531:	c3                   	ret

000000000001b532 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
   1b532:	55                   	push   %rbp
   1b533:	48 89 e5             	mov    %rsp,%rbp
   1b536:	48 83 ec 30          	sub    $0x30,%rsp
   1b53a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b53e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	  _Vector_impl_data __tmp;
   1b542:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1b546:	48 89 c7             	mov    %rax,%rdi
   1b549:	e8 d2 b6 fe ff       	call   6c20 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
   1b54e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b552:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1b556:	48 89 d6             	mov    %rdx,%rsi
   1b559:	48 89 c7             	mov    %rax,%rdi
   1b55c:	e8 09 1a 00 00       	call   1cf6a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  _M_copy_data(__x);
   1b561:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1b565:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b569:	48 89 d6             	mov    %rdx,%rsi
   1b56c:	48 89 c7             	mov    %rax,%rdi
   1b56f:	e8 f6 19 00 00       	call   1cf6a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  __x._M_copy_data(__tmp);
   1b574:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1b578:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b57c:	48 89 d6             	mov    %rdx,%rsi
   1b57f:	48 89 c7             	mov    %rax,%rdi
   1b582:	e8 e3 19 00 00       	call   1cf6a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	}
   1b587:	90                   	nop
   1b588:	c9                   	leave
   1b589:	c3                   	ret

000000000001b58a <_ZSt15__alloc_on_moveISaIP17VkCommandBuffer_TEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
   1b58a:	55                   	push   %rbp
   1b58b:	48 89 e5             	mov    %rsp,%rbp
   1b58e:	48 83 ec 10          	sub    $0x10,%rsp
   1b592:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b596:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__one = std::move(__two);
   1b59a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b59e:	48 89 c7             	mov    %rax,%rdi
   1b5a1:	e8 01 1a 00 00       	call   1cfa7 <_ZSt4moveIRSaIP17VkCommandBuffer_TEEONSt16remove_referenceIT_E4typeEOS5_>
    }
   1b5a6:	90                   	nop
   1b5a7:	c9                   	leave
   1b5a8:	c3                   	ret
   1b5a9:	90                   	nop

000000000001b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1b5aa:	55                   	push   %rbp
   1b5ab:	48 89 e5             	mov    %rsp,%rbp
   1b5ae:	48 83 ec 10          	sub    $0x10,%rsp
   1b5b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1b5b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5ba:	48 89 c7             	mov    %rax,%rdi
   1b5bd:	e8 36 1a 00 00       	call   1cff8 <_ZNKSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b5c2:	48 89 c7             	mov    %rax,%rdi
   1b5c5:	e8 eb 19 00 00       	call   1cfb5 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE11_S_max_sizeERKS2_>
   1b5ca:	c9                   	leave
   1b5cb:	c3                   	ret

000000000001b5cc <_ZSt27__uninitialized_default_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1b5cc:	55                   	push   %rbp
   1b5cd:	48 89 e5             	mov    %rsp,%rbp
   1b5d0:	48 83 ec 20          	sub    $0x20,%rsp
   1b5d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b5d8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b5dc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1b5e0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b5e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5e8:	48 89 d6             	mov    %rdx,%rsi
   1b5eb:	48 89 c7             	mov    %rax,%rdi
   1b5ee:	e8 13 1a 00 00       	call   1d006 <_ZSt25__uninitialized_default_nIPP10VkBuffer_TmET_S3_T0_>
   1b5f3:	c9                   	leave
   1b5f4:	c3                   	ret
   1b5f5:	90                   	nop

000000000001b5f6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1b5f6:	55                   	push   %rbp
   1b5f7:	48 89 e5             	mov    %rsp,%rbp
   1b5fa:	53                   	push   %rbx
   1b5fb:	48 83 ec 38          	sub    $0x38,%rsp
   1b5ff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b603:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b607:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1b60b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b60f:	48 89 c7             	mov    %rax,%rdi
   1b612:	e8 93 ff ff ff       	call   1b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>
   1b617:	48 89 c3             	mov    %rax,%rbx
   1b61a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b61e:	48 89 c7             	mov    %rax,%rdi
   1b621:	e8 c0 cf ff ff       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   1b626:	48 29 c3             	sub    %rax,%rbx
   1b629:	48 89 da             	mov    %rbx,%rdx
   1b62c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b630:	48 39 c2             	cmp    %rax,%rdx
   1b633:	0f 92 c0             	setb   %al
   1b636:	84 c0                	test   %al,%al
   1b638:	74 0c                	je     1b646 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1b63a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b63e:	48 89 c7             	mov    %rax,%rdi
   1b641:	e8 ba 8b fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1b646:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b64a:	48 89 c7             	mov    %rax,%rdi
   1b64d:	e8 94 cf ff ff       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   1b652:	48 89 c3             	mov    %rax,%rbx
   1b655:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b659:	48 89 c7             	mov    %rax,%rdi
   1b65c:	e8 85 cf ff ff       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   1b661:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b665:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1b669:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1b66d:	48 89 d6             	mov    %rdx,%rsi
   1b670:	48 89 c7             	mov    %rax,%rdi
   1b673:	e8 72 0c 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1b678:	48 8b 00             	mov    (%rax),%rax
   1b67b:	48 01 d8             	add    %rbx,%rax
   1b67e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b682:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b686:	48 89 c7             	mov    %rax,%rdi
   1b689:	e8 58 cf ff ff       	call   185e6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE4sizeEv>
   1b68e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b692:	72 12                	jb     1b6a6 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1b694:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b698:	48 89 c7             	mov    %rax,%rdi
   1b69b:	e8 0a ff ff ff       	call   1b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>
   1b6a0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1b6a4:	73 0e                	jae    1b6b4 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1b6a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b6aa:	48 89 c7             	mov    %rax,%rdi
   1b6ad:	e8 f8 fe ff ff       	call   1b5aa <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE8max_sizeEv>
   1b6b2:	eb 04                	jmp    1b6b8 <_ZNKSt6vectorIP10VkBuffer_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1b6b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1b6b8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b6bc:	c9                   	leave
   1b6bd:	c3                   	ret

000000000001b6be <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1b6be:	55                   	push   %rbp
   1b6bf:	48 89 e5             	mov    %rsp,%rbp
   1b6c2:	48 83 ec 10          	sub    $0x10,%rsp
   1b6c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b6ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b6ce:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b6d3:	74 15                	je     1b6ea <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE11_M_allocateEm+0x2c>
   1b6d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b6d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b6dd:	48 89 d6             	mov    %rdx,%rsi
   1b6e0:	48 89 c7             	mov    %rax,%rdi
   1b6e3:	e8 47 19 00 00       	call   1d02f <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE8allocateERS2_m>
   1b6e8:	eb 05                	jmp    1b6ef <_ZNSt12_Vector_baseIP10VkBuffer_TSaIS1_EE11_M_allocateEm+0x31>
   1b6ea:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1b6ef:	c9                   	leave
   1b6f0:	c3                   	ret

000000000001b6f1 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1b6f1:	55                   	push   %rbp
   1b6f2:	48 89 e5             	mov    %rsp,%rbp
   1b6f5:	48 83 ec 20          	sub    $0x20,%rsp
   1b6f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b6fd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b701:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b705:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1b709:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1b70d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b711:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1b715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b719:	48 89 c7             	mov    %rax,%rdi
   1b71c:	e8 38 19 00 00       	call   1d059 <_ZSt12__relocate_aIPP10VkBuffer_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1b721:	c9                   	leave
   1b722:	c3                   	ret
   1b723:	90                   	nop

000000000001b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1b724:	55                   	push   %rbp
   1b725:	48 89 e5             	mov    %rsp,%rbp
   1b728:	48 83 ec 10          	sub    $0x10,%rsp
   1b72c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1b730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b734:	48 89 c7             	mov    %rax,%rdi
   1b737:	e8 c2 19 00 00       	call   1d0fe <_ZNKSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b73c:	48 89 c7             	mov    %rax,%rdi
   1b73f:	e8 78 19 00 00       	call   1d0bc <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE11_S_max_sizeERKS2_>
   1b744:	c9                   	leave
   1b745:	c3                   	ret

000000000001b746 <_ZSt27__uninitialized_default_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1b746:	55                   	push   %rbp
   1b747:	48 89 e5             	mov    %rsp,%rbp
   1b74a:	48 83 ec 20          	sub    $0x20,%rsp
   1b74e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b752:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b756:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1b75a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b75e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b762:	48 89 d6             	mov    %rdx,%rsi
   1b765:	48 89 c7             	mov    %rax,%rdi
   1b768:	e8 9f 19 00 00       	call   1d10c <_ZSt25__uninitialized_default_nIPP16VkDeviceMemory_TmET_S3_T0_>
   1b76d:	c9                   	leave
   1b76e:	c3                   	ret
   1b76f:	90                   	nop

000000000001b770 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1b770:	55                   	push   %rbp
   1b771:	48 89 e5             	mov    %rsp,%rbp
   1b774:	53                   	push   %rbx
   1b775:	48 83 ec 38          	sub    $0x38,%rsp
   1b779:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b77d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b781:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1b785:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b789:	48 89 c7             	mov    %rax,%rdi
   1b78c:	e8 93 ff ff ff       	call   1b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>
   1b791:	48 89 c3             	mov    %rax,%rbx
   1b794:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b798:	48 89 c7             	mov    %rax,%rdi
   1b79b:	e8 d4 d0 ff ff       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   1b7a0:	48 29 c3             	sub    %rax,%rbx
   1b7a3:	48 89 da             	mov    %rbx,%rdx
   1b7a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b7aa:	48 39 c2             	cmp    %rax,%rdx
   1b7ad:	0f 92 c0             	setb   %al
   1b7b0:	84 c0                	test   %al,%al
   1b7b2:	74 0c                	je     1b7c0 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1b7b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b7b8:	48 89 c7             	mov    %rax,%rdi
   1b7bb:	e8 40 8a fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1b7c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b7c4:	48 89 c7             	mov    %rax,%rdi
   1b7c7:	e8 a8 d0 ff ff       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   1b7cc:	48 89 c3             	mov    %rax,%rbx
   1b7cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b7d3:	48 89 c7             	mov    %rax,%rdi
   1b7d6:	e8 99 d0 ff ff       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   1b7db:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b7df:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1b7e3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1b7e7:	48 89 d6             	mov    %rdx,%rsi
   1b7ea:	48 89 c7             	mov    %rax,%rdi
   1b7ed:	e8 f8 0a 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1b7f2:	48 8b 00             	mov    (%rax),%rax
   1b7f5:	48 01 d8             	add    %rbx,%rax
   1b7f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b7fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b800:	48 89 c7             	mov    %rax,%rdi
   1b803:	e8 6c d0 ff ff       	call   18874 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE4sizeEv>
   1b808:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b80c:	72 12                	jb     1b820 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1b80e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b812:	48 89 c7             	mov    %rax,%rdi
   1b815:	e8 0a ff ff ff       	call   1b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>
   1b81a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1b81e:	73 0e                	jae    1b82e <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1b820:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b824:	48 89 c7             	mov    %rax,%rdi
   1b827:	e8 f8 fe ff ff       	call   1b724 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE8max_sizeEv>
   1b82c:	eb 04                	jmp    1b832 <_ZNKSt6vectorIP16VkDeviceMemory_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1b82e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1b832:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b836:	c9                   	leave
   1b837:	c3                   	ret

000000000001b838 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1b838:	55                   	push   %rbp
   1b839:	48 89 e5             	mov    %rsp,%rbp
   1b83c:	48 83 ec 10          	sub    $0x10,%rsp
   1b840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b844:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b848:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b84d:	74 15                	je     1b864 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE11_M_allocateEm+0x2c>
   1b84f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b853:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b857:	48 89 d6             	mov    %rdx,%rsi
   1b85a:	48 89 c7             	mov    %rax,%rdi
   1b85d:	e8 d3 18 00 00       	call   1d135 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE8allocateERS2_m>
   1b862:	eb 05                	jmp    1b869 <_ZNSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE11_M_allocateEm+0x31>
   1b864:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1b869:	c9                   	leave
   1b86a:	c3                   	ret

000000000001b86b <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1b86b:	55                   	push   %rbp
   1b86c:	48 89 e5             	mov    %rsp,%rbp
   1b86f:	48 83 ec 20          	sub    $0x20,%rsp
   1b873:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b877:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b87b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b87f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1b883:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1b887:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b88b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1b88f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b893:	48 89 c7             	mov    %rax,%rdi
   1b896:	e8 c4 18 00 00       	call   1d15f <_ZSt12__relocate_aIPP16VkDeviceMemory_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1b89b:	c9                   	leave
   1b89c:	c3                   	ret

000000000001b89d <_ZNSt6chrono20__duration_cast_implINS_8durationIfSt5ratioILl1ELl1EEEES2_ILl1ELl1000000000EEfLb1ELb0EE6__castIlS5_EES4_RKNS1_IT_T0_EE>:
	  __cast(const duration<_Rep, _Period>& __d)
   1b89d:	55                   	push   %rbp
   1b89e:	48 89 e5             	mov    %rsp,%rbp
   1b8a1:	48 83 ec 20          	sub    $0x20,%rsp
   1b8a5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   1b8a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b8ad:	48 89 c7             	mov    %rax,%rdi
   1b8b0:	e8 db 85 ff ff       	call   13e90 <_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv>
   1b8b5:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1b8b9:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
   1b8be:	f3 0f 10 0d 42 82 00 	movss  0x8242(%rip),%xmm1        # 23b08 <_ZZN9VulkanApp6renderEvE11submitCount+0x810>
   1b8c5:	00 
   1b8c6:	f3 0f 5e c1          	divss  %xmm1,%xmm0
	    return _ToDur(static_cast<__to_rep>(
   1b8ca:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   1b8cf:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx
   1b8d3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b8d7:	48 89 d6             	mov    %rdx,%rsi
   1b8da:	48 89 c7             	mov    %rax,%rdi
   1b8dd:	e8 e0 18 00 00       	call   1d1c2 <_ZNSt6chrono8durationIfSt5ratioILl1ELl1EEEC1IfvEERKT_>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   1b8e2:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
	  }
   1b8e7:	c9                   	leave
   1b8e8:	c3                   	ret

000000000001b8e9 <_ZN3glm6detail17compute_normalizeILi3EfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEE>:
		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)
   1b8e9:	55                   	push   %rbp
   1b8ea:	48 89 e5             	mov    %rsp,%rbp
   1b8ed:	48 83 ec 30          	sub    $0x30,%rsp
   1b8f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
			return v * inversesqrt(dot(v, v));
   1b8f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b8f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b8fd:	48 89 d6             	mov    %rdx,%rsi
   1b900:	48 89 c7             	mov    %rax,%rdi
   1b903:	e8 6c 01 00 00       	call   1ba74 <_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_>
   1b908:	66 0f 7e c0          	movd   %xmm0,%eax
   1b90c:	66 0f 6e c0          	movd   %eax,%xmm0
   1b910:	e8 cc 18 00 00       	call   1d1e1 <_ZN3glm11inversesqrtIfEET_S1_>
   1b915:	66 0f 7e c0          	movd   %xmm0,%eax
   1b919:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b91d:	66 0f 6e c0          	movd   %eax,%xmm0
   1b921:	48 89 d7             	mov    %rdx,%rdi
   1b924:	e8 e2 18 00 00       	call   1d20b <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S3_>
   1b929:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1b92e:	0f 28 c1             	movaps %xmm1,%xmm0
   1b931:	48 89 45 f4          	mov    %rax,-0xc(%rbp)
   1b935:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   1b93a:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1b93e:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1b943:	0f 28 c8             	movaps %xmm0,%xmm1
		}
   1b946:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1b94b:	c9                   	leave
   1b94c:	c3                   	ret
   1b94d:	90                   	nop

000000000001b94e <_ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v)
   1b94e:	55                   	push   %rbp
   1b94f:	48 89 e5             	mov    %rsp,%rbp
   1b952:	48 83 ec 20          	sub    $0x20,%rsp
   1b956:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b95a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
   1b95e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b962:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1b966:	48 8b 00             	mov    (%rax),%rax
   1b969:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b96d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1b971:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b975:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b979:	48 89 d6             	mov    %rdx,%rsi
   1b97c:	48 89 c7             	mov    %rax,%rdi
   1b97f:	e8 fc 18 00 00       	call   1d280 <_ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_>
   1b984:	66 48 0f 7e c2       	movq   %xmm0,%rdx
   1b989:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1b98d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b991:	48 89 10             	mov    %rdx,(%rax)
   1b994:	66 0f d6 40 08       	movq   %xmm0,0x8(%rax)
   1b999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1b99d:	c9                   	leave
   1b99e:	c3                   	ret

000000000001b99f <_ZN3glmmiIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
   1b99f:	55                   	push   %rbp
   1b9a0:	48 89 e5             	mov    %rsp,%rbp
   1b9a3:	48 83 ec 40          	sub    $0x40,%rsp
   1b9a7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b9ab:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
			v1.z - v2.z);
   1b9af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9b3:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
   1b9b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b9bc:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
		return vec<3, T, Q>(
   1b9c1:	0f 28 d0             	movaps %xmm0,%xmm2
   1b9c4:	f3 0f 5c d1          	subss  %xmm1,%xmm2
			v1.y - v2.y,
   1b9c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9cc:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
   1b9d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b9d5:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
		return vec<3, T, Q>(
   1b9da:	0f 28 d8             	movaps %xmm0,%xmm3
   1b9dd:	f3 0f 5c d9          	subss  %xmm1,%xmm3
			v1.x - v2.x,
   1b9e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9e5:	f3 0f 10 00          	movss  (%rax),%xmm0
   1b9e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b9ed:	f3 0f 10 08          	movss  (%rax),%xmm1
		return vec<3, T, Q>(
   1b9f1:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   1b9f5:	66 0f 7e c2          	movd   %xmm0,%edx
   1b9f9:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
   1b9fd:	0f 28 cb             	movaps %xmm3,%xmm1
   1ba00:	66 0f 6e c2          	movd   %edx,%xmm0
   1ba04:	48 89 c7             	mov    %rax,%rdi
   1ba07:	e8 22 84 ff ff       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
			v1.z - v2.z);
   1ba0c:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1ba10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1ba14:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1ba17:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1ba1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba1e:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   1ba23:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   1ba26:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1ba2b:	c9                   	leave
   1ba2c:	c3                   	ret

000000000001ba2d <_ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>:
	GLM_FUNC_QUALIFIER vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& y)
   1ba2d:	55                   	push   %rbp
   1ba2e:	48 89 e5             	mov    %rsp,%rbp
   1ba31:	48 83 ec 30          	sub    $0x30,%rsp
   1ba35:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ba39:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
		return detail::compute_cross<T, Q, detail::is_aligned<Q>::value>::call(x, y);
   1ba3d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ba41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba45:	48 89 d6             	mov    %rdx,%rsi
   1ba48:	48 89 c7             	mov    %rax,%rdi
   1ba4b:	e8 d8 18 00 00       	call   1d328 <_ZN3glm6detail13compute_crossIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEES7_>
   1ba50:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1ba55:	0f 28 c1             	movaps %xmm1,%xmm0
   1ba58:	48 89 45 f4          	mov    %rax,-0xc(%rbp)
   1ba5c:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   1ba61:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1ba65:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1ba6a:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   1ba6d:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1ba72:	c9                   	leave
   1ba73:	c3                   	ret

000000000001ba74 <_ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_>:
	GLM_FUNC_QUALIFIER T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
   1ba74:	55                   	push   %rbp
   1ba75:	48 89 e5             	mov    %rsp,%rbp
   1ba78:	48 83 ec 10          	sub    $0x10,%rsp
   1ba7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ba80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		return detail::compute_dot<vec<L, T, Q>, T, detail::is_aligned<Q>::value>::call(x, y);
   1ba84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ba88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ba8c:	48 89 d6             	mov    %rdx,%rsi
   1ba8f:	48 89 c7             	mov    %rax,%rdi
   1ba92:	e8 6e 19 00 00       	call   1d405 <_ZN3glm6detail11compute_dotINS_3vecILi3EfLNS_9qualifierE0EEEfLb0EE4callERKS4_S7_>
	}
   1ba97:	c9                   	leave
   1ba98:	c3                   	ret

000000000001ba99 <_ZN3glm3absIfEET_S1_>:
		}
	};
}//namespace detail

	template<typename genFIType>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType abs(genFIType x)
   1ba99:	55                   	push   %rbp
   1ba9a:	48 89 e5             	mov    %rsp,%rbp
   1ba9d:	48 83 ec 10          	sub    $0x10,%rsp
   1baa1:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
	{
		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);
   1baa6:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1baa9:	66 0f 6e c0          	movd   %eax,%xmm0
   1baad:	e8 a0 19 00 00       	call   1d452 <_ZN3glm6detail11compute_absIfLb1EE4callEf>
	}
   1bab2:	c9                   	leave
   1bab3:	c3                   	ret

000000000001bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1bab4:	55                   	push   %rbp
   1bab5:	48 89 e5             	mov    %rsp,%rbp
   1bab8:	48 83 ec 10          	sub    $0x10,%rsp
   1babc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1bac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bac4:	48 89 c7             	mov    %rax,%rdi
   1bac7:	e8 f8 19 00 00       	call   1d4c4 <_ZNKSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1bacc:	48 89 c7             	mov    %rax,%rdi
   1bacf:	e8 ae 19 00 00       	call   1d482 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE11_S_max_sizeERKS2_>
   1bad4:	c9                   	leave
   1bad5:	c3                   	ret

000000000001bad6 <_ZSt27__uninitialized_default_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1bad6:	55                   	push   %rbp
   1bad7:	48 89 e5             	mov    %rsp,%rbp
   1bada:	48 83 ec 20          	sub    $0x20,%rsp
   1bade:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bae2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bae6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1baea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1baee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1baf2:	48 89 d6             	mov    %rdx,%rsi
   1baf5:	48 89 c7             	mov    %rax,%rdi
   1baf8:	e8 d5 19 00 00       	call   1d4d2 <_ZSt25__uninitialized_default_nIPP13VkSemaphore_TmET_S3_T0_>
   1bafd:	c9                   	leave
   1bafe:	c3                   	ret
   1baff:	90                   	nop

000000000001bb00 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1bb00:	55                   	push   %rbp
   1bb01:	48 89 e5             	mov    %rsp,%rbp
   1bb04:	53                   	push   %rbx
   1bb05:	48 83 ec 38          	sub    $0x38,%rsp
   1bb09:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bb0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bb11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1bb15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb19:	48 89 c7             	mov    %rax,%rdi
   1bb1c:	e8 93 ff ff ff       	call   1bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>
   1bb21:	48 89 c3             	mov    %rax,%rbx
   1bb24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb28:	48 89 c7             	mov    %rax,%rdi
   1bb2b:	e8 94 ae ff ff       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   1bb30:	48 29 c3             	sub    %rax,%rbx
   1bb33:	48 89 da             	mov    %rbx,%rdx
   1bb36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb3a:	48 39 c2             	cmp    %rax,%rdx
   1bb3d:	0f 92 c0             	setb   %al
   1bb40:	84 c0                	test   %al,%al
   1bb42:	74 0c                	je     1bb50 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1bb44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bb48:	48 89 c7             	mov    %rax,%rdi
   1bb4b:	e8 b0 86 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1bb50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb54:	48 89 c7             	mov    %rax,%rdi
   1bb57:	e8 68 ae ff ff       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   1bb5c:	48 89 c3             	mov    %rax,%rbx
   1bb5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb63:	48 89 c7             	mov    %rax,%rdi
   1bb66:	e8 59 ae ff ff       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   1bb6b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1bb6f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1bb73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1bb77:	48 89 d6             	mov    %rdx,%rsi
   1bb7a:	48 89 c7             	mov    %rax,%rdi
   1bb7d:	e8 68 07 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1bb82:	48 8b 00             	mov    (%rax),%rax
   1bb85:	48 01 d8             	add    %rbx,%rax
   1bb88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bb8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb90:	48 89 c7             	mov    %rax,%rdi
   1bb93:	e8 2c ae ff ff       	call   169c4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE4sizeEv>
   1bb98:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1bb9c:	72 12                	jb     1bbb0 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1bb9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bba2:	48 89 c7             	mov    %rax,%rdi
   1bba5:	e8 0a ff ff ff       	call   1bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>
   1bbaa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1bbae:	73 0e                	jae    1bbbe <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1bbb0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bbb4:	48 89 c7             	mov    %rax,%rdi
   1bbb7:	e8 f8 fe ff ff       	call   1bab4 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE8max_sizeEv>
   1bbbc:	eb 04                	jmp    1bbc2 <_ZNKSt6vectorIP13VkSemaphore_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1bbbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1bbc2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bbc6:	c9                   	leave
   1bbc7:	c3                   	ret

000000000001bbc8 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1bbc8:	55                   	push   %rbp
   1bbc9:	48 89 e5             	mov    %rsp,%rbp
   1bbcc:	48 83 ec 10          	sub    $0x10,%rsp
   1bbd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bbd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bbd8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bbdd:	74 15                	je     1bbf4 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE11_M_allocateEm+0x2c>
   1bbdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbe3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bbe7:	48 89 d6             	mov    %rdx,%rsi
   1bbea:	48 89 c7             	mov    %rax,%rdi
   1bbed:	e8 09 19 00 00       	call   1d4fb <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE8allocateERS2_m>
   1bbf2:	eb 05                	jmp    1bbf9 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE11_M_allocateEm+0x31>
   1bbf4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1bbf9:	c9                   	leave
   1bbfa:	c3                   	ret

000000000001bbfb <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1bbfb:	55                   	push   %rbp
   1bbfc:	48 89 e5             	mov    %rsp,%rbp
   1bbff:	48 83 ec 20          	sub    $0x20,%rsp
   1bc03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bc07:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bc0b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bc0f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1bc13:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1bc17:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bc1b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1bc1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc23:	48 89 c7             	mov    %rax,%rdi
   1bc26:	e8 fa 18 00 00       	call   1d525 <_ZSt12__relocate_aIPP13VkSemaphore_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1bc2b:	c9                   	leave
   1bc2c:	c3                   	ret
   1bc2d:	90                   	nop

000000000001bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1bc2e:	55                   	push   %rbp
   1bc2f:	48 89 e5             	mov    %rsp,%rbp
   1bc32:	48 83 ec 10          	sub    $0x10,%rsp
   1bc36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1bc3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc3e:	48 89 c7             	mov    %rax,%rdi
   1bc41:	e8 84 19 00 00       	call   1d5ca <_ZNKSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1bc46:	48 89 c7             	mov    %rax,%rdi
   1bc49:	e8 3a 19 00 00       	call   1d588 <_ZNSt6vectorIP9VkFence_TSaIS1_EE11_S_max_sizeERKS2_>
   1bc4e:	c9                   	leave
   1bc4f:	c3                   	ret

000000000001bc50 <_ZSt27__uninitialized_default_n_aIPP9VkFence_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1bc50:	55                   	push   %rbp
   1bc51:	48 89 e5             	mov    %rsp,%rbp
   1bc54:	48 83 ec 20          	sub    $0x20,%rsp
   1bc58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bc5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bc60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1bc64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bc68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc6c:	48 89 d6             	mov    %rdx,%rsi
   1bc6f:	48 89 c7             	mov    %rax,%rdi
   1bc72:	e8 61 19 00 00       	call   1d5d8 <_ZSt25__uninitialized_default_nIPP9VkFence_TmET_S3_T0_>
   1bc77:	c9                   	leave
   1bc78:	c3                   	ret
   1bc79:	90                   	nop

000000000001bc7a <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1bc7a:	55                   	push   %rbp
   1bc7b:	48 89 e5             	mov    %rsp,%rbp
   1bc7e:	53                   	push   %rbx
   1bc7f:	48 83 ec 38          	sub    $0x38,%rsp
   1bc83:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bc87:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bc8b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1bc8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc93:	48 89 c7             	mov    %rax,%rdi
   1bc96:	e8 93 ff ff ff       	call   1bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>
   1bc9b:	48 89 c3             	mov    %rax,%rbx
   1bc9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bca2:	48 89 c7             	mov    %rax,%rdi
   1bca5:	e8 20 da ff ff       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   1bcaa:	48 29 c3             	sub    %rax,%rbx
   1bcad:	48 89 da             	mov    %rbx,%rdx
   1bcb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bcb4:	48 39 c2             	cmp    %rax,%rdx
   1bcb7:	0f 92 c0             	setb   %al
   1bcba:	84 c0                	test   %al,%al
   1bcbc:	74 0c                	je     1bcca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1bcbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bcc2:	48 89 c7             	mov    %rax,%rdi
   1bcc5:	e8 36 85 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1bcca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bcce:	48 89 c7             	mov    %rax,%rdi
   1bcd1:	e8 f4 d9 ff ff       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   1bcd6:	48 89 c3             	mov    %rax,%rbx
   1bcd9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bcdd:	48 89 c7             	mov    %rax,%rdi
   1bce0:	e8 e5 d9 ff ff       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   1bce5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1bce9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1bced:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1bcf1:	48 89 d6             	mov    %rdx,%rsi
   1bcf4:	48 89 c7             	mov    %rax,%rdi
   1bcf7:	e8 ee 05 00 00       	call   1c2ea <_ZSt3maxImERKT_S2_S2_>
   1bcfc:	48 8b 00             	mov    (%rax),%rax
   1bcff:	48 01 d8             	add    %rbx,%rax
   1bd02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bd06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd0a:	48 89 c7             	mov    %rax,%rdi
   1bd0d:	e8 b8 d9 ff ff       	call   196ca <_ZNKSt6vectorIP9VkFence_TSaIS1_EE4sizeEv>
   1bd12:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1bd16:	72 12                	jb     1bd2a <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   1bd18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd1c:	48 89 c7             	mov    %rax,%rdi
   1bd1f:	e8 0a ff ff ff       	call   1bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>
   1bd24:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1bd28:	73 0e                	jae    1bd38 <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   1bd2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd2e:	48 89 c7             	mov    %rax,%rdi
   1bd31:	e8 f8 fe ff ff       	call   1bc2e <_ZNKSt6vectorIP9VkFence_TSaIS1_EE8max_sizeEv>
   1bd36:	eb 04                	jmp    1bd3c <_ZNKSt6vectorIP9VkFence_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   1bd38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1bd3c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bd40:	c9                   	leave
   1bd41:	c3                   	ret

000000000001bd42 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1bd42:	55                   	push   %rbp
   1bd43:	48 89 e5             	mov    %rsp,%rbp
   1bd46:	48 83 ec 10          	sub    $0x10,%rsp
   1bd4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bd52:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bd57:	74 15                	je     1bd6e <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE11_M_allocateEm+0x2c>
   1bd59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd5d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bd61:	48 89 d6             	mov    %rdx,%rsi
   1bd64:	48 89 c7             	mov    %rax,%rdi
   1bd67:	e8 95 18 00 00       	call   1d601 <_ZNSt16allocator_traitsISaIP9VkFence_TEE8allocateERS2_m>
   1bd6c:	eb 05                	jmp    1bd73 <_ZNSt12_Vector_baseIP9VkFence_TSaIS1_EE11_M_allocateEm+0x31>
   1bd6e:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1bd73:	c9                   	leave
   1bd74:	c3                   	ret

000000000001bd75 <_ZNSt6vectorIP9VkFence_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1bd75:	55                   	push   %rbp
   1bd76:	48 89 e5             	mov    %rsp,%rbp
   1bd79:	48 83 ec 20          	sub    $0x20,%rsp
   1bd7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd81:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bd85:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bd89:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1bd8d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1bd91:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bd95:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1bd99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd9d:	48 89 c7             	mov    %rax,%rdi
   1bda0:	e8 86 18 00 00       	call   1d62b <_ZSt12__relocate_aIPP9VkFence_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1bda5:	c9                   	leave
   1bda6:	c3                   	ret
   1bda7:	90                   	nop

000000000001bda8 <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1bda8:	55                   	push   %rbp
   1bda9:	48 89 e5             	mov    %rsp,%rbp
   1bdac:	48 83 ec 10          	sub    $0x10,%rsp
   1bdb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bdb4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1bdb8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bdbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdc0:	48 89 d6             	mov    %rdx,%rsi
   1bdc3:	48 89 c7             	mov    %rax,%rdi
   1bdc6:	e8 c3 18 00 00       	call   1d68e <_ZNSaIP13VkSemaphore_TEC1ERKS1_>
   1bdcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bdcf:	48 89 c7             	mov    %rax,%rdi
   1bdd2:	e8 73 e0 ff ff       	call   19e4a <_ZNSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   1bdd7:	90                   	nop
   1bdd8:	c9                   	leave
   1bdd9:	c3                   	ret

000000000001bdda <_ZNKSt16initializer_listIP13VkSemaphore_TE4sizeEv>:
   1bdda:	55                   	push   %rbp
   1bddb:	48 89 e5             	mov    %rsp,%rbp
   1bdde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bde2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bde6:	48 8b 40 08          	mov    0x8(%rax),%rax
   1bdea:	5d                   	pop    %rbp
   1bdeb:	c3                   	ret

000000000001bdec <_ZSt19__iterator_categoryIPKP13VkSemaphore_TENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   1bdec:	55                   	push   %rbp
   1bded:	48 89 e5             	mov    %rsp,%rbp
   1bdf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1bdf4:	90                   	nop
   1bdf5:	5d                   	pop    %rbp
   1bdf6:	c3                   	ret

000000000001bdf7 <_ZSt10__distanceIPKP13VkSemaphore_TENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   1bdf7:	55                   	push   %rbp
   1bdf8:	48 89 e5             	mov    %rsp,%rbp
   1bdfb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bdff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   1be03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1be07:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   1be0b:	48 c1 f8 03          	sar    $0x3,%rax
    }
   1be0f:	5d                   	pop    %rbp
   1be10:	c3                   	ret

000000000001be11 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_S_check_init_lenEmRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   1be11:	55                   	push   %rbp
   1be12:	48 89 e5             	mov    %rsp,%rbp
   1be15:	53                   	push   %rbx
   1be16:	48 83 ec 28          	sub    $0x28,%rsp
   1be1a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1be1e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1be22:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1be26:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1be2a:	48 89 d6             	mov    %rdx,%rsi
   1be2d:	48 89 c7             	mov    %rax,%rdi
   1be30:	e8 59 18 00 00       	call   1d68e <_ZNSaIP13VkSemaphore_TEC1ERKS1_>
   1be35:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1be39:	48 89 c7             	mov    %rax,%rdi
   1be3c:	e8 41 16 00 00       	call   1d482 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE11_S_max_sizeERKS2_>
   1be41:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1be45:	0f 92 c3             	setb   %bl
   1be48:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1be4c:	48 89 c7             	mov    %rax,%rdi
   1be4f:	e8 84 a9 ff ff       	call   167d8 <_ZNSaIP13VkSemaphore_TED1Ev>
   1be54:	84 db                	test   %bl,%bl
   1be56:	74 0f                	je     1be67 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   1be58:	48 8d 05 d1 7b 00 00 	lea    0x7bd1(%rip),%rax        # 23a30 <_ZZN9VulkanApp6renderEvE11submitCount+0x738>
   1be5f:	48 89 c7             	mov    %rax,%rdi
   1be62:	e8 99 83 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   1be67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   1be6b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1be6f:	c9                   	leave
   1be70:	c3                   	ret

000000000001be71 <_ZSt22__uninitialized_copy_aIPKP13VkSemaphore_TPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1be71:	55                   	push   %rbp
   1be72:	48 89 e5             	mov    %rsp,%rbp
   1be75:	48 83 ec 20          	sub    $0x20,%rsp
   1be79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1be7d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1be81:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1be85:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   1be89:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1be8d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1be91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be95:	48 89 ce             	mov    %rcx,%rsi
   1be98:	48 89 c7             	mov    %rax,%rdi
   1be9b:	e8 14 18 00 00       	call   1d6b4 <_ZSt18uninitialized_copyIPKP13VkSemaphore_TPS1_ET0_T_S6_S5_>
    }
   1bea0:	c9                   	leave
   1bea1:	c3                   	ret

000000000001bea2 <_ZSt8_DestroyIPP13VkSemaphore_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1bea2:	55                   	push   %rbp
   1bea3:	48 89 e5             	mov    %rsp,%rbp
   1bea6:	48 83 ec 10          	sub    $0x10,%rsp
   1beaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1beae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1beb2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1beb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1beba:	48 89 d6             	mov    %rdx,%rsi
   1bebd:	48 89 c7             	mov    %rax,%rdi
   1bec0:	e8 24 18 00 00       	call   1d6e9 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkSemaphore_TEEvT_S5_>
    }
   1bec5:	90                   	nop
   1bec6:	c9                   	leave
   1bec7:	c3                   	ret

000000000001bec8 <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1bec8:	55                   	push   %rbp
   1bec9:	48 89 e5             	mov    %rsp,%rbp
   1becc:	48 83 ec 10          	sub    $0x10,%rsp
   1bed0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bed4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1bed8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bedc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bee0:	48 89 d6             	mov    %rdx,%rsi
   1bee3:	48 89 c7             	mov    %rax,%rdi
   1bee6:	e8 0d 18 00 00       	call   1d6f8 <_ZNSaIjEC1ERKS_>
   1beeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1beef:	48 89 c7             	mov    %rax,%rdi
   1bef2:	e8 27 18 00 00       	call   1d71e <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>
	{ }
   1bef7:	90                   	nop
   1bef8:	c9                   	leave
   1bef9:	c3                   	ret

000000000001befa <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm>:
      _M_deallocate(pointer __p, size_t __n)
   1befa:	55                   	push   %rbp
   1befb:	48 89 e5             	mov    %rsp,%rbp
   1befe:	48 83 ec 20          	sub    $0x20,%rsp
   1bf02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bf06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bf0a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1bf0e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bf13:	74 17                	je     1bf2c <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1bf15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bf1d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1bf21:	48 89 ce             	mov    %rcx,%rsi
   1bf24:	48 89 c7             	mov    %rax,%rdi
   1bf27:	e8 20 18 00 00       	call   1d74c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjm>
      }
   1bf2c:	90                   	nop
   1bf2d:	c9                   	leave
   1bf2e:	c3                   	ret
   1bf2f:	90                   	nop

000000000001bf30 <_ZNKSt16initializer_listIjE4sizeEv>:
   1bf30:	55                   	push   %rbp
   1bf31:	48 89 e5             	mov    %rsp,%rbp
   1bf34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bf38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bf3c:	48 8b 40 08          	mov    0x8(%rax),%rax
   1bf40:	5d                   	pop    %rbp
   1bf41:	c3                   	ret

000000000001bf42 <_ZSt19__iterator_categoryIPKjENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
   1bf42:	55                   	push   %rbp
   1bf43:	48 89 e5             	mov    %rsp,%rbp
   1bf46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1bf4a:	90                   	nop
   1bf4b:	5d                   	pop    %rbp
   1bf4c:	c3                   	ret

000000000001bf4d <_ZSt10__distanceIPKjENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   1bf4d:	55                   	push   %rbp
   1bf4e:	48 89 e5             	mov    %rsp,%rbp
   1bf51:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bf55:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   1bf59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bf5d:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   1bf61:	48 c1 f8 02          	sar    $0x2,%rax
    }
   1bf65:	5d                   	pop    %rbp
   1bf66:	c3                   	ret

000000000001bf67 <_ZNSt6vectorIjSaIjEE17_S_check_init_lenEmRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
   1bf67:	55                   	push   %rbp
   1bf68:	48 89 e5             	mov    %rsp,%rbp
   1bf6b:	53                   	push   %rbx
   1bf6c:	48 83 ec 28          	sub    $0x28,%rsp
   1bf70:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bf74:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1bf78:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1bf7c:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1bf80:	48 89 d6             	mov    %rdx,%rsi
   1bf83:	48 89 c7             	mov    %rax,%rdi
   1bf86:	e8 6d 17 00 00       	call   1d6f8 <_ZNSaIjEC1ERKS_>
   1bf8b:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1bf8f:	48 89 c7             	mov    %rax,%rdi
   1bf92:	e8 e3 17 00 00       	call   1d77a <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>
   1bf97:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1bf9b:	0f 92 c3             	setb   %bl
   1bf9e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1bfa2:	48 89 c7             	mov    %rax,%rdi
   1bfa5:	e8 32 a9 ff ff       	call   168dc <_ZNSaIjED1Ev>
   1bfaa:	84 db                	test   %bl,%bl
   1bfac:	74 0f                	je     1bfbd <_ZNSt6vectorIjSaIjEE17_S_check_init_lenEmRKS0_+0x56>
	  __throw_length_error(
   1bfae:	48 8d 05 7b 7a 00 00 	lea    0x7a7b(%rip),%rax        # 23a30 <_ZZN9VulkanApp6renderEvE11submitCount+0x738>
   1bfb5:	48 89 c7             	mov    %rax,%rdi
   1bfb8:	e8 43 82 fe ff       	call   4200 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
   1bfbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   1bfc1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1bfc5:	c9                   	leave
   1bfc6:	c3                   	ret
   1bfc7:	90                   	nop

000000000001bfc8 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1bfc8:	55                   	push   %rbp
   1bfc9:	48 89 e5             	mov    %rsp,%rbp
   1bfcc:	48 83 ec 10          	sub    $0x10,%rsp
   1bfd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bfd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bfd8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bfdd:	74 15                	je     1bff4 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm+0x2c>
   1bfdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bfe3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bfe7:	48 89 d6             	mov    %rdx,%rsi
   1bfea:	48 89 c7             	mov    %rax,%rdi
   1bfed:	e8 ca 17 00 00       	call   1d7bc <_ZNSt16allocator_traitsISaIjEE8allocateERS0_m>
   1bff2:	eb 05                	jmp    1bff9 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEm+0x31>
   1bff4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1bff9:	c9                   	leave
   1bffa:	c3                   	ret

000000000001bffb <_ZSt22__uninitialized_copy_aIPKjPjjET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1bffb:	55                   	push   %rbp
   1bffc:	48 89 e5             	mov    %rsp,%rbp
   1bfff:	48 83 ec 20          	sub    $0x20,%rsp
   1c003:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c007:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c00b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1c00f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      return std::uninitialized_copy(__first, __last, __result);
   1c013:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c017:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c01b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c01f:	48 89 ce             	mov    %rcx,%rsi
   1c022:	48 89 c7             	mov    %rax,%rdi
   1c025:	e8 bc 17 00 00       	call   1d7e6 <_ZSt18uninitialized_copyIPKjPjET0_T_S4_S3_>
    }
   1c02a:	c9                   	leave
   1c02b:	c3                   	ret

000000000001c02c <_ZSt8_DestroyIPjEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1c02c:	55                   	push   %rbp
   1c02d:	48 89 e5             	mov    %rsp,%rbp
   1c030:	48 83 ec 10          	sub    $0x10,%rsp
   1c034:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c038:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1c03c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c044:	48 89 d6             	mov    %rdx,%rsi
   1c047:	48 89 c7             	mov    %rax,%rdi
   1c04a:	e8 cc 17 00 00       	call   1d81b <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>
    }
   1c04f:	90                   	nop
   1c050:	c9                   	leave
   1c051:	c3                   	ret

000000000001c052 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c052:	55                   	push   %rbp
   1c053:	48 89 e5             	mov    %rsp,%rbp
   1c056:	48 83 ec 20          	sub    $0x20,%rsp
   1c05a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c05e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c062:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c066:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c06a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c06e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c072:	48 89 ce             	mov    %rcx,%rsi
   1c075:	48 89 c7             	mov    %rax,%rdi
   1c078:	e8 ad 17 00 00       	call   1d82a <_ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m>
   1c07d:	90                   	nop
   1c07e:	c9                   	leave
   1c07f:	c3                   	ret

000000000001c080 <_ZNSt15__new_allocatorIP15VkFramebuffer_TEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1c080:	55                   	push   %rbp
   1c081:	48 89 e5             	mov    %rsp,%rbp
   1c084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c088:	90                   	nop
   1c089:	5d                   	pop    %rbp
   1c08a:	c3                   	ret

000000000001c08b <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c08b:	55                   	push   %rbp
   1c08c:	48 89 e5             	mov    %rsp,%rbp
   1c08f:	48 83 ec 20          	sub    $0x20,%rsp
   1c093:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c097:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c09b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c09f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c0a3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c0a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c0ab:	48 89 ce             	mov    %rcx,%rsi
   1c0ae:	48 89 c7             	mov    %rax,%rdi
   1c0b1:	e8 a6 17 00 00       	call   1d85c <_ZNSt15__new_allocatorIP15VkFramebuffer_TE10deallocateEPS1_m>
   1c0b6:	90                   	nop
   1c0b7:	c9                   	leave
   1c0b8:	c3                   	ret

000000000001c0b9 <_ZSt8_DestroyIPP15VkFramebuffer_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1c0b9:	55                   	push   %rbp
   1c0ba:	48 89 e5             	mov    %rsp,%rbp
   1c0bd:	48 83 ec 10          	sub    $0x10,%rsp
   1c0c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c0c5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1c0c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c0cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c0d1:	48 89 d6             	mov    %rdx,%rsi
   1c0d4:	48 89 c7             	mov    %rax,%rdi
   1c0d7:	e8 b1 17 00 00       	call   1d88d <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15VkFramebuffer_TEEvT_S5_>
    }
   1c0dc:	90                   	nop
   1c0dd:	c9                   	leave
   1c0de:	c3                   	ret

000000000001c0df <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c0df:	55                   	push   %rbp
   1c0e0:	48 89 e5             	mov    %rsp,%rbp
   1c0e3:	48 83 ec 20          	sub    $0x20,%rsp
   1c0e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c0eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c0ef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c0f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c0f7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c0fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c0ff:	48 89 ce             	mov    %rcx,%rsi
   1c102:	48 89 c7             	mov    %rax,%rdi
   1c105:	e8 92 17 00 00       	call   1d89c <_ZNSt15__new_allocatorIP13VkSemaphore_TE10deallocateEPS1_m>
   1c10a:	90                   	nop
   1c10b:	c9                   	leave
   1c10c:	c3                   	ret
   1c10d:	90                   	nop

000000000001c10e <_ZNSt15__new_allocatorIP9VkFence_TEC1Ev>:
   1c10e:	55                   	push   %rbp
   1c10f:	48 89 e5             	mov    %rsp,%rbp
   1c112:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c116:	90                   	nop
   1c117:	5d                   	pop    %rbp
   1c118:	c3                   	ret

000000000001c119 <_ZNSt16allocator_traitsISaIP9VkFence_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c119:	55                   	push   %rbp
   1c11a:	48 89 e5             	mov    %rsp,%rbp
   1c11d:	48 83 ec 20          	sub    $0x20,%rsp
   1c121:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c125:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c129:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c12d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c131:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c139:	48 89 ce             	mov    %rcx,%rsi
   1c13c:	48 89 c7             	mov    %rax,%rdi
   1c13f:	e8 8a 17 00 00       	call   1d8ce <_ZNSt15__new_allocatorIP9VkFence_TE10deallocateEPS1_m>
   1c144:	90                   	nop
   1c145:	c9                   	leave
   1c146:	c3                   	ret

000000000001c147 <_ZSt8_DestroyIPP9VkFence_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1c147:	55                   	push   %rbp
   1c148:	48 89 e5             	mov    %rsp,%rbp
   1c14b:	48 83 ec 10          	sub    $0x10,%rsp
   1c14f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c153:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1c157:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c15b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c15f:	48 89 d6             	mov    %rdx,%rsi
   1c162:	48 89 c7             	mov    %rax,%rdi
   1c165:	e8 95 17 00 00       	call   1d8ff <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkFence_TEEvT_S5_>
    }
   1c16a:	90                   	nop
   1c16b:	c9                   	leave
   1c16c:	c3                   	ret
   1c16d:	90                   	nop

000000000001c16e <_ZNSt15__new_allocatorIP10VkBuffer_TEC1Ev>:
   1c16e:	55                   	push   %rbp
   1c16f:	48 89 e5             	mov    %rsp,%rbp
   1c172:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c176:	90                   	nop
   1c177:	5d                   	pop    %rbp
   1c178:	c3                   	ret

000000000001c179 <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c179:	55                   	push   %rbp
   1c17a:	48 89 e5             	mov    %rsp,%rbp
   1c17d:	48 83 ec 20          	sub    $0x20,%rsp
   1c181:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c185:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c189:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c18d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c191:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c195:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c199:	48 89 ce             	mov    %rcx,%rsi
   1c19c:	48 89 c7             	mov    %rax,%rdi
   1c19f:	e8 6a 17 00 00       	call   1d90e <_ZNSt15__new_allocatorIP10VkBuffer_TE10deallocateEPS1_m>
   1c1a4:	90                   	nop
   1c1a5:	c9                   	leave
   1c1a6:	c3                   	ret

000000000001c1a7 <_ZSt8_DestroyIPP10VkBuffer_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1c1a7:	55                   	push   %rbp
   1c1a8:	48 89 e5             	mov    %rsp,%rbp
   1c1ab:	48 83 ec 10          	sub    $0x10,%rsp
   1c1af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c1b3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1c1b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c1bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c1bf:	48 89 d6             	mov    %rdx,%rsi
   1c1c2:	48 89 c7             	mov    %rax,%rdi
   1c1c5:	e8 75 17 00 00       	call   1d93f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10VkBuffer_TEEvT_S5_>
    }
   1c1ca:	90                   	nop
   1c1cb:	c9                   	leave
   1c1cc:	c3                   	ret
   1c1cd:	90                   	nop

000000000001c1ce <_ZNSt15__new_allocatorIP16VkDeviceMemory_TEC1Ev>:
   1c1ce:	55                   	push   %rbp
   1c1cf:	48 89 e5             	mov    %rsp,%rbp
   1c1d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c1d6:	90                   	nop
   1c1d7:	5d                   	pop    %rbp
   1c1d8:	c3                   	ret

000000000001c1d9 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c1d9:	55                   	push   %rbp
   1c1da:	48 89 e5             	mov    %rsp,%rbp
   1c1dd:	48 83 ec 20          	sub    $0x20,%rsp
   1c1e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c1e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c1e9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1c1ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c1f1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c1f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c1f9:	48 89 ce             	mov    %rcx,%rsi
   1c1fc:	48 89 c7             	mov    %rax,%rdi
   1c1ff:	e8 4a 17 00 00       	call   1d94e <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE10deallocateEPS1_m>
   1c204:	90                   	nop
   1c205:	c9                   	leave
   1c206:	c3                   	ret

000000000001c207 <_ZSt8_DestroyIPP16VkDeviceMemory_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1c207:	55                   	push   %rbp
   1c208:	48 89 e5             	mov    %rsp,%rbp
   1c20b:	48 83 ec 10          	sub    $0x10,%rsp
   1c20f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c213:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	__destroy(__first, __last);
   1c217:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c21b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c21f:	48 89 d6             	mov    %rdx,%rsi
   1c222:	48 89 c7             	mov    %rax,%rdi
   1c225:	e8 55 17 00 00       	call   1d97f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16VkDeviceMemory_TEEvT_S5_>
    }
   1c22a:	90                   	nop
   1c22b:	c9                   	leave
   1c22c:	c3                   	ret
   1c22d:	90                   	nop

000000000001c22e <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Effff>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T _x, T _y, T _z, T _w)
   1c22e:	55                   	push   %rbp
   1c22f:	48 89 e5             	mov    %rsp,%rbp
   1c232:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c236:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
   1c23b:	f3 0f 11 4d f0       	movss  %xmm1,-0x10(%rbp)
   1c240:	f3 0f 11 55 ec       	movss  %xmm2,-0x14(%rbp)
   1c245:	f3 0f 11 5d e8       	movss  %xmm3,-0x18(%rbp)
		: x(_x), y(_y), z(_z), w(_w)
   1c24a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c24e:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
   1c253:	f3 0f 11 00          	movss  %xmm0,(%rax)
   1c257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c25b:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   1c260:	f3 0f 11 40 04       	movss  %xmm0,0x4(%rax)
   1c265:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c269:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
   1c26e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
   1c273:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c277:	f3 0f 10 45 e8       	movss  -0x18(%rbp),%xmm0
   1c27c:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
	{}
   1c281:	90                   	nop
   1c282:	5d                   	pop    %rbp
   1c283:	c3                   	ret

000000000001c284 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1c284:	55                   	push   %rbp
   1c285:	48 89 e5             	mov    %rsp,%rbp
   1c288:	48 83 ec 30          	sub    $0x30,%rsp
   1c28c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c290:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c294:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1c298:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1c29c:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1c2a0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1c2a4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1c2a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c2ac:	48 89 ce             	mov    %rcx,%rsi
   1c2af:	48 89 c7             	mov    %rax,%rdi
   1c2b2:	e8 d7 16 00 00       	call   1d98e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>
    }
   1c2b7:	c9                   	leave
   1c2b8:	c3                   	ret

000000000001c2b9 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1c2b9:	55                   	push   %rbp
   1c2ba:	48 89 e5             	mov    %rsp,%rbp
   1c2bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c2c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c2c5:	90                   	nop
   1c2c6:	5d                   	pop    %rbp
   1c2c7:	c3                   	ret

000000000001c2c8 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1c2c8:	55                   	push   %rbp
   1c2c9:	48 89 e5             	mov    %rsp,%rbp
   1c2cc:	48 83 ec 10          	sub    $0x10,%rsp
   1c2d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1c2d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2d8:	48 89 c7             	mov    %rax,%rdi
   1c2db:	e8 dc 16 00 00       	call   1d9bc <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1c2e0:	48 89 c7             	mov    %rax,%rdi
   1c2e3:	e8 57 f5 fe ff       	call   b83f <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   1c2e8:	c9                   	leave
   1c2e9:	c3                   	ret

000000000001c2ea <_ZSt3maxImERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
   1c2ea:	55                   	push   %rbp
   1c2eb:	48 89 e5             	mov    %rsp,%rbp
   1c2ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c2f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__a < __b)
   1c2f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2fa:	48 8b 10             	mov    (%rax),%rdx
   1c2fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c301:	48 8b 00             	mov    (%rax),%rax
   1c304:	48 39 c2             	cmp    %rax,%rdx
   1c307:	73 06                	jae    1c30f <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
   1c309:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c30d:	eb 04                	jmp    1c313 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
   1c30f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1c313:	5d                   	pop    %rbp
   1c314:	c3                   	ret

000000000001c315 <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1c315:	55                   	push   %rbp
   1c316:	48 89 e5             	mov    %rsp,%rbp
   1c319:	41 54                	push   %r12
   1c31b:	53                   	push   %rbx
   1c31c:	48 83 ec 20          	sub    $0x20,%rsp
   1c320:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c324:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c328:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1c32c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
   1c330:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c334:	48 89 c7             	mov    %rax,%rdi
   1c337:	e8 8e 16 00 00       	call   1d9ca <_ZSt12__niter_baseIPPKcET_S3_>
   1c33c:	49 89 c4             	mov    %rax,%r12
   1c33f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c343:	48 89 c7             	mov    %rax,%rdi
   1c346:	e8 7f 16 00 00       	call   1d9ca <_ZSt12__niter_baseIPPKcET_S3_>
   1c34b:	48 89 c3             	mov    %rax,%rbx
   1c34e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c352:	48 89 c7             	mov    %rax,%rdi
   1c355:	e8 70 16 00 00       	call   1d9ca <_ZSt12__niter_baseIPPKcET_S3_>
   1c35a:	48 89 c7             	mov    %rax,%rdi
   1c35d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c361:	48 89 c1             	mov    %rax,%rcx
   1c364:	4c 89 e2             	mov    %r12,%rdx
   1c367:	48 89 de             	mov    %rbx,%rsi
   1c36a:	e8 69 16 00 00       	call   1d9d8 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
   1c36f:	48 83 c4 20          	add    $0x20,%rsp
   1c373:	5b                   	pop    %rbx
   1c374:	41 5c                	pop    %r12
   1c376:	5d                   	pop    %rbp
   1c377:	c3                   	ret

000000000001c378 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE8_StorageIS2_Lb1EEC1IJS2_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
   1c378:	55                   	push   %rbp
   1c379:	48 89 e5             	mov    %rsp,%rbp
   1c37c:	48 83 ec 10          	sub    $0x10,%rsp
   1c380:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c384:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    : _M_value(std::forward<_Args>(__args)...)
   1c388:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c38c:	48 89 c7             	mov    %rax,%rdi
   1c38f:	e8 ca b0 ff ff       	call   1745e <_ZSt7forwardISt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS3_E4typeE>
   1c394:	48 89 c1             	mov    %rax,%rcx
   1c397:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   1c39b:	48 8b 01             	mov    (%rcx),%rax
   1c39e:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1c3a2:	48 89 06             	mov    %rax,(%rsi)
   1c3a5:	48 89 56 08          	mov    %rdx,0x8(%rsi)
   1c3a9:	48 8b 41 0c          	mov    0xc(%rcx),%rax
   1c3ad:	48 8b 51 14          	mov    0x14(%rcx),%rdx
   1c3b1:	48 89 46 0c          	mov    %rax,0xc(%rsi)
   1c3b5:	48 89 56 14          	mov    %rdx,0x14(%rsi)
	    { }
   1c3b9:	90                   	nop
   1c3ba:	c9                   	leave
   1c3bb:	c3                   	ret

000000000001c3bc <_ZSt11__addressofISt4pairIj23VkQueueFamilyPropertiesEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1c3bc:	55                   	push   %rbp
   1c3bd:	48 89 e5             	mov    %rsp,%rbp
   1c3c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1c3c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3c8:	5d                   	pop    %rbp
   1c3c9:	c3                   	ret

000000000001c3ca <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c3ca:	55                   	push   %rbp
   1c3cb:	48 89 e5             	mov    %rsp,%rbp
   1c3ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c3d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c3d6:	5d                   	pop    %rbp
   1c3d7:	c3                   	ret

000000000001c3d8 <_ZSt10_ConstructISt4pairIj23VkQueueFamilyPropertiesEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1c3d8:	55                   	push   %rbp
   1c3d9:	48 89 e5             	mov    %rsp,%rbp
   1c3dc:	53                   	push   %rbx
   1c3dd:	48 83 ec 18          	sub    $0x18,%rsp
   1c3e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c3e5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1c3e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c3ed:	48 89 c6             	mov    %rax,%rsi
   1c3f0:	bf 1c 00 00 00       	mov    $0x1c,%edi
   1c3f5:	e8 58 a3 fe ff       	call   6752 <_ZnwmPv>
   1c3fa:	48 89 c3             	mov    %rax,%rbx
   1c3fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c401:	48 89 c7             	mov    %rax,%rdi
   1c404:	e8 c1 ff ff ff       	call   1c3ca <_ZSt7forwardIRKSt4pairIj23VkQueueFamilyPropertiesEEOT_RNSt16remove_referenceIS5_E4typeE>
   1c409:	48 89 c1             	mov    %rax,%rcx
   1c40c:	48 8b 01             	mov    (%rcx),%rax
   1c40f:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1c413:	48 89 03             	mov    %rax,(%rbx)
   1c416:	48 89 53 08          	mov    %rdx,0x8(%rbx)
   1c41a:	48 8b 41 0c          	mov    0xc(%rcx),%rax
   1c41e:	48 8b 51 14          	mov    0x14(%rcx),%rdx
   1c422:	48 89 43 0c          	mov    %rax,0xc(%rbx)
   1c426:	48 89 53 14          	mov    %rdx,0x14(%rbx)
    }
   1c42a:	90                   	nop
   1c42b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c42f:	c9                   	leave
   1c430:	c3                   	ret
   1c431:	90                   	nop

000000000001c432 <_ZNSt22_Optional_payload_baseISt4pairIj23VkQueueFamilyPropertiesEE10_M_destroyEv>:
      _M_destroy() noexcept
   1c432:	55                   	push   %rbp
   1c433:	48 89 e5             	mov    %rsp,%rbp
   1c436:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_engaged = false;
   1c43a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c43e:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
      }
   1c442:	90                   	nop
   1c443:	5d                   	pop    %rbp
   1c444:	c3                   	ret
   1c445:	90                   	nop

000000000001c446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1c446:	55                   	push   %rbp
   1c447:	48 89 e5             	mov    %rsp,%rbp
   1c44a:	53                   	push   %rbx
   1c44b:	48 83 ec 18          	sub    $0x18,%rsp
   1c44f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c453:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
   1c457:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c45b:	48 89 c7             	mov    %rax,%rdi
   1c45e:	e8 ad e1 ff ff       	call   1a610 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1c463:	48 89 c3             	mov    %rax,%rbx
   1c466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c46a:	48 89 c7             	mov    %rax,%rdi
   1c46d:	e8 ca 15 00 00       	call   1da3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c472:	48 89 de             	mov    %rbx,%rsi
   1c475:	48 89 c7             	mov    %rax,%rdi
   1c478:	e8 cd 15 00 00       	call   1da4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>
      }
   1c47d:	90                   	nop
   1c47e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c482:	c9                   	leave
   1c483:	c3                   	ret

000000000001c484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1c484:	55                   	push   %rbp
   1c485:	48 89 e5             	mov    %rsp,%rbp
   1c488:	48 83 ec 10          	sub    $0x10,%rsp
   1c48c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c490:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
   1c494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c498:	48 89 c7             	mov    %rax,%rdi
   1c49b:	e8 9c 15 00 00       	call   1da3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1c4a0:	48 89 c1             	mov    %rax,%rcx
   1c4a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c4a7:	ba 01 00 00 00       	mov    $0x1,%edx
   1c4ac:	48 89 c6             	mov    %rax,%rsi
   1c4af:	48 89 cf             	mov    %rcx,%rdi
   1c4b2:	e8 b9 15 00 00       	call   1da70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>
   1c4b7:	90                   	nop
   1c4b8:	c9                   	leave
   1c4b9:	c3                   	ret

000000000001c4ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
   1c4ba:	55                   	push   %rbp
   1c4bb:	48 89 e5             	mov    %rsp,%rbp
   1c4be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &this->_M_impl._M_header; }
   1c4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c4c6:	48 83 c0 08          	add    $0x8,%rax
   1c4ca:	5d                   	pop    %rbp
   1c4cb:	c3                   	ret

000000000001c4cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c4cc:	55                   	push   %rbp
   1c4cd:	48 89 e5             	mov    %rsp,%rbp
   1c4d0:	53                   	push   %rbx
   1c4d1:	48 83 ec 38          	sub    $0x38,%rsp
   1c4d5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c4d9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c4dd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c4e1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      while (__x != 0)
   1c4e5:	eb 56                	jmp    1c53d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1c4e7:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1c4eb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c4ef:	48 89 c7             	mov    %rax,%rdi
   1c4f2:	e8 e7 03 00 00       	call   1c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1c4f7:	48 89 c1             	mov    %rax,%rcx
   1c4fa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c4fe:	48 89 c2             	mov    %rax,%rdx
   1c501:	48 89 ce             	mov    %rcx,%rsi
   1c504:	48 89 df             	mov    %rbx,%rdi
   1c507:	e8 02 b2 ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c50c:	83 f0 01             	xor    $0x1,%eax
   1c50f:	84 c0                	test   %al,%al
   1c511:	74 1a                	je     1c52d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x61>
	  __y = __x, __x = _S_left(__x);
   1c513:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c517:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1c51b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c51f:	48 89 c7             	mov    %rax,%rdi
   1c522:	e8 08 e0 ff ff       	call   1a52f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1c527:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1c52b:	eb 10                	jmp    1c53d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	  __x = _S_right(__x);
   1c52d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c531:	48 89 c7             	mov    %rax,%rdi
   1c534:	e8 e4 df ff ff       	call   1a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1c539:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      while (__x != 0)
   1c53d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1c542:	75 a3                	jne    1c4e7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x1b>
      return iterator(__y);
   1c544:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c548:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1c54c:	48 89 d6             	mov    %rdx,%rsi
   1c54f:	48 89 c7             	mov    %rax,%rdi
   1c552:	e8 df e6 ff ff       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c557:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1c55b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c55f:	c9                   	leave
   1c560:	c3                   	ret
   1c561:	90                   	nop

000000000001c562 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
   1c562:	55                   	push   %rbp
   1c563:	48 89 e5             	mov    %rsp,%rbp
   1c566:	48 83 ec 10          	sub    $0x10,%rsp
   1c56a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
   1c56e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c572:	48 89 c7             	mov    %rax,%rdi
   1c575:	e8 24 15 00 00       	call   1da9e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1c57a:	c9                   	leave
   1c57b:	c3                   	ret

000000000001c57c <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
   1c57c:	55                   	push   %rbp
   1c57d:	48 89 e5             	mov    %rsp,%rbp
   1c580:	53                   	push   %rbx
   1c581:	48 83 ec 18          	sub    $0x18,%rsp
   1c585:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c589:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::forward<_UHead>(__head))
   1c58d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1c591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c595:	48 89 c7             	mov    %rax,%rdi
   1c598:	e8 b9 e0 ff ff       	call   1a656 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1c59d:	48 89 c6             	mov    %rax,%rsi
   1c5a0:	48 89 df             	mov    %rbx,%rdi
   1c5a3:	e8 04 15 00 00       	call   1daac <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
   1c5a8:	90                   	nop
   1c5a9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c5ad:	c9                   	leave
   1c5ae:	c3                   	ret
   1c5af:	90                   	nop

000000000001c5b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
   1c5b0:	55                   	push   %rbp
   1c5b1:	48 89 e5             	mov    %rsp,%rbp
   1c5b4:	41 54                	push   %r12
   1c5b6:	53                   	push   %rbx
   1c5b7:	48 83 ec 30          	sub    $0x30,%rsp
   1c5bb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c5bf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c5c3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c5c7:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	  _Link_type __tmp = _M_get_node();
   1c5cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c5cf:	48 89 c7             	mov    %rax,%rdi
   1c5d2:	e8 fb 14 00 00       	call   1dad2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>
   1c5d7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   1c5db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c5df:	48 89 c7             	mov    %rax,%rdi
   1c5e2:	e8 cc e0 ff ff       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1c5e7:	49 89 c4             	mov    %rax,%r12
   1c5ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c5ee:	48 89 c7             	mov    %rax,%rdi
   1c5f1:	e8 af e0 ff ff       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1c5f6:	48 89 c3             	mov    %rax,%rbx
   1c5f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c5fd:	48 89 c7             	mov    %rax,%rdi
   1c600:	e8 92 e0 ff ff       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1c605:	48 89 c2             	mov    %rax,%rdx
   1c608:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1c60c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c610:	4d 89 e0             	mov    %r12,%r8
   1c613:	48 89 d9             	mov    %rbx,%rcx
   1c616:	48 89 c7             	mov    %rax,%rdi
   1c619:	e8 dc 14 00 00       	call   1dafa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
   1c61e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1c622:	48 83 c4 30          	add    $0x30,%rsp
   1c626:	5b                   	pop    %rbx
   1c627:	41 5c                	pop    %r12
   1c629:	5d                   	pop    %rbp
   1c62a:	c3                   	ret
   1c62b:	90                   	nop

000000000001c62c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
   1c62c:	55                   	push   %rbp
   1c62d:	48 89 e5             	mov    %rsp,%rbp
   1c630:	48 83 ec 20          	sub    $0x20,%rsp
   1c634:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
   1c638:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c63c:	48 8b 10             	mov    (%rax),%rdx
   1c63f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c643:	48 89 d6             	mov    %rdx,%rsi
   1c646:	48 89 c7             	mov    %rax,%rdi
   1c649:	e8 e8 e5 ff ff       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c64e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c652:	c9                   	leave
   1c653:	c3                   	ret

000000000001c654 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1c654:	55                   	push   %rbp
   1c655:	48 89 e5             	mov    %rsp,%rbp
   1c658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
   1c65c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c660:	48 8b 40 28          	mov    0x28(%rax),%rax
   1c664:	5d                   	pop    %rbp
   1c665:	c3                   	ret

000000000001c666 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
   1c666:	55                   	push   %rbp
   1c667:	48 89 e5             	mov    %rsp,%rbp
   1c66a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
   1c66e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c672:	48 83 c0 20          	add    $0x20,%rax
   1c676:	5d                   	pop    %rbp
   1c677:	c3                   	ret

000000000001c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
   1c678:	55                   	push   %rbp
   1c679:	48 89 e5             	mov    %rsp,%rbp
   1c67c:	48 83 ec 10          	sub    $0x10,%rsp
   1c680:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
   1c684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c688:	48 89 c7             	mov    %rax,%rdi
   1c68b:	e8 4e 02 00 00       	call   1c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1c690:	c9                   	leave
   1c691:	c3                   	ret

000000000001c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
   1c692:	55                   	push   %rbp
   1c693:	48 89 e5             	mov    %rsp,%rbp
   1c696:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c69a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c69e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      : first(__a), second(__b) { }
   1c6a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c6a6:	48 8b 10             	mov    (%rax),%rdx
   1c6a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c6ad:	48 89 10             	mov    %rdx,(%rax)
   1c6b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c6b4:	48 8b 10             	mov    (%rax),%rdx
   1c6b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c6bb:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1c6bf:	90                   	nop
   1c6c0:	5d                   	pop    %rbp
   1c6c1:	c3                   	ret

000000000001c6c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c6c2:	55                   	push   %rbp
   1c6c3:	48 89 e5             	mov    %rsp,%rbp
   1c6c6:	53                   	push   %rbx
   1c6c7:	48 83 ec 78          	sub    $0x78,%rsp
   1c6cb:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1c6cf:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      _Link_type __x = _M_begin();
   1c6d3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1c6d7:	48 89 c7             	mov    %rax,%rdi
   1c6da:	e8 4d af ff ff       	call   1762c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1c6df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      _Base_ptr __y = _M_end();
   1c6e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1c6e7:	48 89 c7             	mov    %rax,%rdi
   1c6ea:	e8 cb fd ff ff       	call   1c4ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1c6ef:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      bool __comp = true;
   1c6f3:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
      while (__x != 0)
   1c6f7:	eb 51                	jmp    1c74a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x88>
	  __y = __x;
   1c6f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1c6fd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   1c701:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1c705:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1c709:	48 89 c7             	mov    %rax,%rdi
   1c70c:	e8 cd 01 00 00       	call   1c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1c711:	48 89 c2             	mov    %rax,%rdx
   1c714:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1c718:	48 89 c6             	mov    %rax,%rsi
   1c71b:	48 89 df             	mov    %rbx,%rdi
   1c71e:	e8 eb af ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c723:	88 45 ef             	mov    %al,-0x11(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1c726:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1c72a:	74 0e                	je     1c73a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x78>
   1c72c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1c730:	48 89 c7             	mov    %rax,%rdi
   1c733:	e8 f7 dd ff ff       	call   1a52f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1c738:	eb 0c                	jmp    1c746 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x84>
   1c73a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1c73e:	48 89 c7             	mov    %rax,%rdi
   1c741:	e8 d7 dd ff ff       	call   1a51d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1c746:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      while (__x != 0)
   1c74a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1c74e:	48 85 c0             	test   %rax,%rax
   1c751:	75 a6                	jne    1c6f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x37>
      iterator __j = iterator(__y);
   1c753:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1c757:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1c75b:	48 89 d6             	mov    %rdx,%rsi
   1c75e:	48 89 c7             	mov    %rax,%rdi
   1c761:	e8 d0 e4 ff ff       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
   1c766:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1c76a:	74 54                	je     1c7c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xfe>
	  if (__j == begin())
   1c76c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1c770:	48 89 c7             	mov    %rax,%rdi
   1c773:	e8 54 14 00 00       	call   1dbcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>
   1c778:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1c77c:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
   1c780:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1c784:	48 89 d6             	mov    %rdx,%rsi
   1c787:	48 89 c7             	mov    %rax,%rdi
   1c78a:	e8 23 af ff ff       	call   176b2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   1c78f:	84 c0                	test   %al,%al
   1c791:	74 21                	je     1c7b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf2>
	    return _Res(__x, __y);
   1c793:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1c797:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1c79b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1c79f:	48 89 ce             	mov    %rcx,%rsi
   1c7a2:	48 89 c7             	mov    %rax,%rdi
   1c7a5:	e8 4c 14 00 00       	call   1dbf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>
   1c7aa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1c7ae:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1c7b2:	eb 7d                	jmp    1c831 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	    --__j;
   1c7b4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1c7b8:	48 89 c7             	mov    %rax,%rdi
   1c7bb:	e8 ce 00 00 00       	call   1c88e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1c7c0:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1c7c4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1c7c8:	48 89 c7             	mov    %rax,%rdi
   1c7cb:	e8 a8 fe ff ff       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c7d0:	48 89 c1             	mov    %rax,%rcx
   1c7d3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1c7d7:	48 89 c2             	mov    %rax,%rdx
   1c7da:	48 89 ce             	mov    %rcx,%rsi
   1c7dd:	48 89 df             	mov    %rbx,%rdi
   1c7e0:	e8 29 af ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c7e5:	84 c0                	test   %al,%al
   1c7e7:	74 21                	je     1c80a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x148>
	return _Res(__x, __y);
   1c7e9:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1c7ed:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1c7f1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1c7f5:	48 89 ce             	mov    %rcx,%rsi
   1c7f8:	48 89 c7             	mov    %rax,%rdi
   1c7fb:	e8 f6 13 00 00       	call   1dbf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>
   1c800:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c804:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c808:	eb 27                	jmp    1c831 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
      return _Res(__j._M_node, 0);
   1c80a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1c811:	00 
   1c812:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1c816:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   1c81a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1c81e:	48 89 ce             	mov    %rcx,%rsi
   1c821:	48 89 c7             	mov    %rax,%rdi
   1c824:	e8 69 fe ff ff       	call   1c692 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
   1c829:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c82d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1c831:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c835:	c9                   	leave
   1c836:	c3                   	ret
   1c837:	90                   	nop

000000000001c838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
   1c838:	55                   	push   %rbp
   1c839:	48 89 e5             	mov    %rsp,%rbp
   1c83c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
   1c840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c844:	48 83 c0 18          	add    $0x18,%rax
   1c848:	5d                   	pop    %rbp
   1c849:	c3                   	ret

000000000001c84a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
   1c84a:	55                   	push   %rbp
   1c84b:	48 89 e5             	mov    %rsp,%rbp
   1c84e:	48 83 ec 20          	sub    $0x20,%rsp
   1c852:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c856:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c85a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1c85e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c862:	48 89 c7             	mov    %rax,%rdi
   1c865:	e8 d0 13 00 00       	call   1dc3a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1c86a:	48 8b 10             	mov    (%rax),%rdx
   1c86d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c871:	48 89 10             	mov    %rdx,(%rax)
   1c874:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c878:	48 89 c7             	mov    %rax,%rdi
   1c87b:	e8 ba 13 00 00       	call   1dc3a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1c880:	48 8b 10             	mov    (%rax),%rdx
   1c883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c887:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1c88b:	90                   	nop
   1c88c:	c9                   	leave
   1c88d:	c3                   	ret

000000000001c88e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
   1c88e:	55                   	push   %rbp
   1c88f:	48 89 e5             	mov    %rsp,%rbp
   1c892:	48 83 ec 10          	sub    $0x10,%rsp
   1c896:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_decrement(_M_node);
   1c89a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c89e:	48 8b 00             	mov    (%rax),%rax
   1c8a1:	48 89 c7             	mov    %rax,%rdi
   1c8a4:	e8 87 7c fe ff       	call   4530 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
   1c8a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c8ad:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1c8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1c8b4:	c9                   	leave
   1c8b5:	c3                   	ret

000000000001c8b6 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1c8b6:	55                   	push   %rbp
   1c8b7:	48 89 e5             	mov    %rsp,%rbp
   1c8ba:	48 83 ec 10          	sub    $0x10,%rsp
   1c8be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
   1c8c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c8c6:	48 8b 00             	mov    (%rax),%rax
   1c8c9:	48 89 c7             	mov    %rax,%rdi
   1c8cc:	e8 ff 79 fe ff       	call   42d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
   1c8d1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c8d5:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1c8d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1c8dc:	c9                   	leave
   1c8dd:	c3                   	ret

000000000001c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
   1c8de:	55                   	push   %rbp
   1c8df:	48 89 e5             	mov    %rsp,%rbp
   1c8e2:	48 83 ec 20          	sub    $0x20,%rsp
   1c8e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return _KeyOfValue()(*__x->_M_valptr());
   1c8ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c8ee:	48 89 c7             	mov    %rax,%rdi
   1c8f1:	e8 52 13 00 00       	call   1dc48 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1c8f6:	48 89 c2             	mov    %rax,%rdx
   1c8f9:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   1c8fd:	48 89 d6             	mov    %rdx,%rsi
   1c900:	48 89 c7             	mov    %rax,%rdi
   1c903:	e8 5e 13 00 00       	call   1dc66 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>
      }
   1c908:	c9                   	leave
   1c909:	c3                   	ret

000000000001c90a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c90a:	55                   	push   %rbp
   1c90b:	48 89 e5             	mov    %rsp,%rbp
   1c90e:	41 54                	push   %r12
   1c910:	53                   	push   %rbx
   1c911:	48 83 ec 30          	sub    $0x30,%rsp
   1c915:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c919:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c91d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c921:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
			    || _M_impl._M_key_compare(_S_key(__z),
   1c925:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1c92a:	75 43                	jne    1c96f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
      bool __insert_left = (__x != 0 || __p == _M_end()
   1c92c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c930:	48 89 c7             	mov    %rax,%rdi
   1c933:	e8 82 fb ff ff       	call   1c4ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1c938:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1c93c:	74 31                	je     1c96f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
			    || _M_impl._M_key_compare(_S_key(__z),
   1c93e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1c942:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c946:	48 89 c7             	mov    %rax,%rdi
   1c949:	e8 2a fd ff ff       	call   1c678 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c94e:	49 89 c4             	mov    %rax,%r12
   1c951:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1c955:	48 89 c7             	mov    %rax,%rdi
   1c958:	e8 81 ff ff ff       	call   1c8de <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1c95d:	4c 89 e2             	mov    %r12,%rdx
   1c960:	48 89 c6             	mov    %rax,%rsi
   1c963:	48 89 df             	mov    %rbx,%rdi
   1c966:	e8 a3 ad ff ff       	call   1770e <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c96b:	84 c0                	test   %al,%al
   1c96d:	74 07                	je     1c976 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x6c>
   1c96f:	b8 01 00 00 00       	mov    $0x1,%eax
   1c974:	eb 05                	jmp    1c97b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x71>
   1c976:	b8 00 00 00 00       	mov    $0x0,%eax
      bool __insert_left = (__x != 0 || __p == _M_end()
   1c97b:	88 45 ef             	mov    %al,-0x11(%rbp)
				    this->_M_impl._M_header);
   1c97e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c982:	48 8d 48 08          	lea    0x8(%rax),%rcx
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1c986:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1c98a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c98e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1c992:	89 c7                	mov    %eax,%edi
   1c994:	e8 d7 76 fe ff       	call   4070 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
   1c999:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c99d:	48 8b 40 28          	mov    0x28(%rax),%rax
   1c9a1:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1c9a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c9a9:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
   1c9ad:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1c9b1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1c9b5:	48 89 d6             	mov    %rdx,%rsi
   1c9b8:	48 89 c7             	mov    %rax,%rdi
   1c9bb:	e8 76 e2 ff ff       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c9c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
   1c9c4:	48 83 c4 30          	add    $0x30,%rsp
   1c9c8:	5b                   	pop    %rbx
   1c9c9:	41 5c                	pop    %r12
   1c9cb:	5d                   	pop    %rbp
   1c9cc:	c3                   	ret
   1c9cd:	90                   	nop

000000000001c9ce <_ZNKSt12_Vector_baseIP9VkImage_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1c9ce:	55                   	push   %rbp
   1c9cf:	48 89 e5             	mov    %rsp,%rbp
   1c9d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1c9d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9da:	5d                   	pop    %rbp
   1c9db:	c3                   	ret

000000000001c9dc <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   1c9dc:	55                   	push   %rbp
   1c9dd:	48 89 e5             	mov    %rsp,%rbp
   1c9e0:	48 83 ec 10          	sub    $0x10,%rsp
   1c9e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c9e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   1c9ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c9f4:	48 89 d6             	mov    %rdx,%rsi
   1c9f7:	48 89 c7             	mov    %rax,%rdi
   1c9fa:	e8 d5 f6 fe ff       	call   c0d4 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE12_Vector_implC1ERKS2_>
   1c9ff:	90                   	nop
   1ca00:	c9                   	leave
   1ca01:	c3                   	ret

000000000001ca02 <_ZNSt12_Vector_baseIP9VkImage_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
   1ca02:	55                   	push   %rbp
   1ca03:	48 89 e5             	mov    %rsp,%rbp
   1ca06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ca0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  _M_start = __x._M_start;
   1ca0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca12:	48 8b 10             	mov    (%rax),%rdx
   1ca15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca19:	48 89 10             	mov    %rdx,(%rax)
	  _M_finish = __x._M_finish;
   1ca1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca20:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1ca24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca28:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  _M_end_of_storage = __x._M_end_of_storage;
   1ca2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ca30:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1ca34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca38:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
   1ca3c:	90                   	nop
   1ca3d:	5d                   	pop    %rbp
   1ca3e:	c3                   	ret

000000000001ca3f <_ZSt4moveIRSaIP9VkImage_TEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1ca3f:	55                   	push   %rbp
   1ca40:	48 89 e5             	mov    %rsp,%rbp
   1ca43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1ca47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca4b:	5d                   	pop    %rbp
   1ca4c:	c3                   	ret

000000000001ca4d <_ZNSt6vectorIP13VkImageView_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1ca4d:	55                   	push   %rbp
   1ca4e:	48 89 e5             	mov    %rsp,%rbp
   1ca51:	48 83 ec 20          	sub    $0x20,%rsp
   1ca55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1ca59:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ca60:	ff ff 0f 
   1ca63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1ca67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ca6b:	48 89 c7             	mov    %rax,%rdi
   1ca6e:	e8 05 12 00 00       	call   1dc78 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8max_sizeERKS2_>
   1ca73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1ca77:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1ca7b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ca7f:	48 89 d6             	mov    %rdx,%rsi
   1ca82:	48 89 c7             	mov    %rax,%rdi
   1ca85:	e8 0d 93 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1ca8a:	48 8b 00             	mov    (%rax),%rax
      }
   1ca8d:	c9                   	leave
   1ca8e:	c3                   	ret
   1ca8f:	90                   	nop

000000000001ca90 <_ZNKSt12_Vector_baseIP13VkImageView_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1ca90:	55                   	push   %rbp
   1ca91:	48 89 e5             	mov    %rsp,%rbp
   1ca94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1ca98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca9c:	5d                   	pop    %rbp
   1ca9d:	c3                   	ret

000000000001ca9e <_ZSt25__uninitialized_default_nIPP13VkImageView_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1ca9e:	55                   	push   %rbp
   1ca9f:	48 89 e5             	mov    %rsp,%rbp
   1caa2:	48 83 ec 20          	sub    $0x20,%rsp
   1caa6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1caaa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1caae:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1cab2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1cab6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1caba:	48 89 d6             	mov    %rdx,%rsi
   1cabd:	48 89 c7             	mov    %rax,%rdi
   1cac0:	e8 cd 11 00 00       	call   1dc92 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_>
    }
   1cac5:	c9                   	leave
   1cac6:	c3                   	ret

000000000001cac7 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1cac7:	55                   	push   %rbp
   1cac8:	48 89 e5             	mov    %rsp,%rbp
   1cacb:	48 83 ec 10          	sub    $0x10,%rsp
   1cacf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cad3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1cad7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cadb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cadf:	ba 00 00 00 00       	mov    $0x0,%edx
   1cae4:	48 89 ce             	mov    %rcx,%rsi
   1cae7:	48 89 c7             	mov    %rax,%rdi
   1caea:	e8 01 12 00 00       	call   1dcf0 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv>
   1caef:	c9                   	leave
   1caf0:	c3                   	ret

000000000001caf1 <_ZSt12__relocate_aIPP13VkImageView_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1caf1:	55                   	push   %rbp
   1caf2:	48 89 e5             	mov    %rsp,%rbp
   1caf5:	41 54                	push   %r12
   1caf7:	53                   	push   %rbx
   1caf8:	48 83 ec 20          	sub    $0x20,%rsp
   1cafc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cb00:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cb04:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1cb08:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1cb0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cb10:	48 89 c7             	mov    %rax,%rdi
   1cb13:	e8 39 12 00 00       	call   1dd51 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   1cb18:	49 89 c4             	mov    %rax,%r12
   1cb1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cb1f:	48 89 c7             	mov    %rax,%rdi
   1cb22:	e8 2a 12 00 00       	call   1dd51 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   1cb27:	48 89 c3             	mov    %rax,%rbx
   1cb2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cb2e:	48 89 c7             	mov    %rax,%rdi
   1cb31:	e8 1b 12 00 00       	call   1dd51 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   1cb36:	48 89 c7             	mov    %rax,%rdi
   1cb39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1cb3d:	48 89 c1             	mov    %rax,%rcx
   1cb40:	4c 89 e2             	mov    %r12,%rdx
   1cb43:	48 89 de             	mov    %rbx,%rsi
   1cb46:	e8 14 12 00 00       	call   1dd5f <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1cb4b:	48 83 c4 20          	add    $0x20,%rsp
   1cb4f:	5b                   	pop    %rbx
   1cb50:	41 5c                	pop    %r12
   1cb52:	5d                   	pop    %rbp
   1cb53:	c3                   	ret

000000000001cb54 <_ZNSaI28VkGraphicsPipelineCreateInfoEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1cb54:	55                   	push   %rbp
   1cb55:	48 89 e5             	mov    %rsp,%rbp
   1cb58:	48 83 ec 10          	sub    $0x10,%rsp
   1cb5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cb60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1cb64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cb68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb6c:	48 89 d6             	mov    %rdx,%rsi
   1cb6f:	48 89 c7             	mov    %rax,%rdi
   1cb72:	e8 4b 12 00 00       	call   1ddc2 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoEC1ERKS1_>
   1cb77:	90                   	nop
   1cb78:	c9                   	leave
   1cb79:	c3                   	ret

000000000001cb7a <_ZNSt12_Vector_baseI28VkGraphicsPipelineCreateInfoSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   1cb7a:	55                   	push   %rbp
   1cb7b:	48 89 e5             	mov    %rsp,%rbp
   1cb7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1cb82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb86:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1cb8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb91:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1cb98:	00 
   1cb99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb9d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1cba4:	00 
	{ }
   1cba5:	90                   	nop
   1cba6:	5d                   	pop    %rbp
   1cba7:	c3                   	ret

000000000001cba8 <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE10deallocateERS1_PS0_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1cba8:	55                   	push   %rbp
   1cba9:	48 89 e5             	mov    %rsp,%rbp
   1cbac:	48 83 ec 20          	sub    $0x20,%rsp
   1cbb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cbb4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cbb8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1cbbc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cbc0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cbc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cbc8:	48 89 ce             	mov    %rcx,%rsi
   1cbcb:	48 89 c7             	mov    %rax,%rdi
   1cbce:	e8 ff 11 00 00       	call   1ddd2 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE10deallocateEPS0_m>
   1cbd3:	90                   	nop
   1cbd4:	c9                   	leave
   1cbd5:	c3                   	ret

000000000001cbd6 <_ZNSt6vectorI28VkGraphicsPipelineCreateInfoSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cbd6:	55                   	push   %rbp
   1cbd7:	48 89 e5             	mov    %rsp,%rbp
   1cbda:	48 83 ec 20          	sub    $0x20,%rsp
   1cbde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cbe2:	48 b8 e3 38 8e e3 38 	movabs $0xe38e38e38e38e3,%rax
   1cbe9:	8e e3 00 
   1cbec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cbf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cbf4:	48 89 c7             	mov    %rax,%rdi
   1cbf7:	e8 10 12 00 00       	call   1de0c <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE8max_sizeERKS1_>
   1cbfc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1cc00:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1cc04:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1cc08:	48 89 d6             	mov    %rdx,%rsi
   1cc0b:	48 89 c7             	mov    %rax,%rdi
   1cc0e:	e8 84 91 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1cc13:	48 8b 00             	mov    (%rax),%rax
      }
   1cc16:	c9                   	leave
   1cc17:	c3                   	ret

000000000001cc18 <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE8allocateERS1_m>:
      allocate(allocator_type& __a, size_type __n)
   1cc18:	55                   	push   %rbp
   1cc19:	48 89 e5             	mov    %rsp,%rbp
   1cc1c:	48 83 ec 10          	sub    $0x10,%rsp
   1cc20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc24:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1cc28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cc2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc30:	ba 00 00 00 00       	mov    $0x0,%edx
   1cc35:	48 89 ce             	mov    %rcx,%rsi
   1cc38:	48 89 c7             	mov    %rax,%rdi
   1cc3b:	e8 e6 11 00 00       	call   1de26 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8allocateEmPKv>
   1cc40:	c9                   	leave
   1cc41:	c3                   	ret

000000000001cc42 <_ZSt18uninitialized_copyIPK28VkGraphicsPipelineCreateInfoPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1cc42:	55                   	push   %rbp
   1cc43:	48 89 e5             	mov    %rsp,%rbp
   1cc46:	48 83 ec 30          	sub    $0x30,%rsp
   1cc4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cc4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cc52:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1cc56:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1cc5a:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1cc5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1cc62:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1cc66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cc6a:	48 89 ce             	mov    %rcx,%rsi
   1cc6d:	48 89 c7             	mov    %rax,%rdi
   1cc70:	e8 1c 12 00 00       	call   1de91 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK28VkGraphicsPipelineCreateInfoPS2_EET0_T_S7_S6_>
    }
   1cc75:	c9                   	leave
   1cc76:	c3                   	ret

000000000001cc77 <_ZNSt12_Destroy_auxILb1EE9__destroyIP28VkGraphicsPipelineCreateInfoEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1cc77:	55                   	push   %rbp
   1cc78:	48 89 e5             	mov    %rsp,%rbp
   1cc7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc7f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cc83:	90                   	nop
   1cc84:	5d                   	pop    %rbp
   1cc85:	c3                   	ret

000000000001cc86 <_ZNSt6vectorIP12VkPipeline_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cc86:	55                   	push   %rbp
   1cc87:	48 89 e5             	mov    %rsp,%rbp
   1cc8a:	48 83 ec 20          	sub    $0x20,%rsp
   1cc8e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cc92:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1cc99:	ff ff 0f 
   1cc9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cca4:	48 89 c7             	mov    %rax,%rdi
   1cca7:	e8 12 12 00 00       	call   1debe <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8max_sizeERKS2_>
   1ccac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1ccb0:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1ccb4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ccb8:	48 89 d6             	mov    %rdx,%rsi
   1ccbb:	48 89 c7             	mov    %rax,%rdi
   1ccbe:	e8 d4 90 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1ccc3:	48 8b 00             	mov    (%rax),%rax
      }
   1ccc6:	c9                   	leave
   1ccc7:	c3                   	ret

000000000001ccc8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1ccc8:	55                   	push   %rbp
   1ccc9:	48 89 e5             	mov    %rsp,%rbp
   1cccc:	48 83 ec 10          	sub    $0x10,%rsp
   1ccd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ccd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1ccd8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ccdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cce0:	48 89 d6             	mov    %rdx,%rsi
   1cce3:	48 89 c7             	mov    %rax,%rdi
   1cce6:	e8 d1 e4 ff ff       	call   1b1bc <_ZNSaIP12VkPipeline_TEC1ERKS1_>
   1cceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccef:	48 89 c7             	mov    %rax,%rdi
   1ccf2:	e8 e1 11 00 00       	call   1ded8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
   1ccf7:	90                   	nop
   1ccf8:	c9                   	leave
   1ccf9:	c3                   	ret

000000000001ccfa <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   1ccfa:	55                   	push   %rbp
   1ccfb:	48 89 e5             	mov    %rsp,%rbp
   1ccfe:	48 83 ec 10          	sub    $0x10,%rsp
   1cd02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   1cd0a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cd0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd12:	48 89 d6             	mov    %rdx,%rsi
   1cd15:	48 89 c7             	mov    %rax,%rdi
   1cd18:	e8 e9 11 00 00       	call   1df06 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm>
   1cd1d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1cd21:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   1cd24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd28:	48 8b 10             	mov    (%rax),%rdx
   1cd2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd2f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1cd33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd37:	48 8b 00             	mov    (%rax),%rax
   1cd3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cd3e:	48 c1 e2 03          	shl    $0x3,%rdx
   1cd42:	48 01 c2             	add    %rax,%rdx
   1cd45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd49:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   1cd4d:	90                   	nop
   1cd4e:	c9                   	leave
   1cd4f:	c3                   	ret

000000000001cd50 <_ZSt27__uninitialized_default_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1cd50:	55                   	push   %rbp
   1cd51:	48 89 e5             	mov    %rsp,%rbp
   1cd54:	48 83 ec 20          	sub    $0x20,%rsp
   1cd58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd60:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1cd64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cd68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd6c:	48 89 d6             	mov    %rdx,%rsi
   1cd6f:	48 89 c7             	mov    %rax,%rdi
   1cd72:	e8 c2 11 00 00       	call   1df39 <_ZSt25__uninitialized_default_nIPP12VkPipeline_TmET_S3_T0_>
   1cd77:	c9                   	leave
   1cd78:	c3                   	ret
   1cd79:	90                   	nop

000000000001cd7a <_ZNSt15__new_allocatorIP12VkPipeline_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   1cd7a:	55                   	push   %rbp
   1cd7b:	48 89 e5             	mov    %rsp,%rbp
   1cd7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd86:	90                   	nop
   1cd87:	5d                   	pop    %rbp
   1cd88:	c3                   	ret

000000000001cd89 <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1cd89:	55                   	push   %rbp
   1cd8a:	48 89 e5             	mov    %rsp,%rbp
   1cd8d:	48 83 ec 20          	sub    $0x20,%rsp
   1cd91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1cd9d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cda1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1cda5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cda9:	48 89 ce             	mov    %rcx,%rsi
   1cdac:	48 89 c7             	mov    %rax,%rdi
   1cdaf:	e8 ae 11 00 00       	call   1df62 <_ZNSt15__new_allocatorIP12VkPipeline_TE10deallocateEPS1_m>
   1cdb4:	90                   	nop
   1cdb5:	c9                   	leave
   1cdb6:	c3                   	ret

000000000001cdb7 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12VkPipeline_TEEvT_S5_>:
   1cdb7:	55                   	push   %rbp
   1cdb8:	48 89 e5             	mov    %rsp,%rbp
   1cdbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cdbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cdc3:	90                   	nop
   1cdc4:	5d                   	pop    %rbp
   1cdc5:	c3                   	ret

000000000001cdc6 <_ZNSt6vectorIP15VkFramebuffer_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cdc6:	55                   	push   %rbp
   1cdc7:	48 89 e5             	mov    %rsp,%rbp
   1cdca:	48 83 ec 20          	sub    $0x20,%rsp
   1cdce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cdd2:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1cdd9:	ff ff 0f 
   1cddc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cde0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cde4:	48 89 c7             	mov    %rax,%rdi
   1cde7:	e8 a7 11 00 00       	call   1df93 <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE8max_sizeERKS2_>
   1cdec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1cdf0:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1cdf4:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1cdf8:	48 89 d6             	mov    %rdx,%rsi
   1cdfb:	48 89 c7             	mov    %rax,%rdi
   1cdfe:	e8 94 8f fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1ce03:	48 8b 00             	mov    (%rax),%rax
      }
   1ce06:	c9                   	leave
   1ce07:	c3                   	ret

000000000001ce08 <_ZNKSt12_Vector_baseIP15VkFramebuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1ce08:	55                   	push   %rbp
   1ce09:	48 89 e5             	mov    %rsp,%rbp
   1ce0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1ce10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce14:	5d                   	pop    %rbp
   1ce15:	c3                   	ret

000000000001ce16 <_ZSt25__uninitialized_default_nIPP15VkFramebuffer_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1ce16:	55                   	push   %rbp
   1ce17:	48 89 e5             	mov    %rsp,%rbp
   1ce1a:	48 83 ec 20          	sub    $0x20,%rsp
   1ce1e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ce22:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1ce26:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1ce2a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ce2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ce32:	48 89 d6             	mov    %rdx,%rsi
   1ce35:	48 89 c7             	mov    %rax,%rdi
   1ce38:	e8 70 11 00 00       	call   1dfad <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP15VkFramebuffer_TmEET_S5_T0_>
    }
   1ce3d:	c9                   	leave
   1ce3e:	c3                   	ret

000000000001ce3f <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1ce3f:	55                   	push   %rbp
   1ce40:	48 89 e5             	mov    %rsp,%rbp
   1ce43:	48 83 ec 10          	sub    $0x10,%rsp
   1ce47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ce4b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1ce4f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1ce53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce57:	ba 00 00 00 00       	mov    $0x0,%edx
   1ce5c:	48 89 ce             	mov    %rcx,%rsi
   1ce5f:	48 89 c7             	mov    %rax,%rdi
   1ce62:	e8 a3 11 00 00       	call   1e00a <_ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv>
   1ce67:	c9                   	leave
   1ce68:	c3                   	ret

000000000001ce69 <_ZSt12__relocate_aIPP15VkFramebuffer_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1ce69:	55                   	push   %rbp
   1ce6a:	48 89 e5             	mov    %rsp,%rbp
   1ce6d:	41 54                	push   %r12
   1ce6f:	53                   	push   %rbx
   1ce70:	48 83 ec 20          	sub    $0x20,%rsp
   1ce74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ce78:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ce7c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1ce80:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1ce84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ce88:	48 89 c7             	mov    %rax,%rdi
   1ce8b:	e8 db 11 00 00       	call   1e06b <_ZSt12__niter_baseIPP15VkFramebuffer_TET_S3_>
   1ce90:	49 89 c4             	mov    %rax,%r12
   1ce93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ce97:	48 89 c7             	mov    %rax,%rdi
   1ce9a:	e8 cc 11 00 00       	call   1e06b <_ZSt12__niter_baseIPP15VkFramebuffer_TET_S3_>
   1ce9f:	48 89 c3             	mov    %rax,%rbx
   1cea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cea6:	48 89 c7             	mov    %rax,%rdi
   1cea9:	e8 bd 11 00 00       	call   1e06b <_ZSt12__niter_baseIPP15VkFramebuffer_TET_S3_>
   1ceae:	48 89 c7             	mov    %rax,%rdi
   1ceb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ceb5:	48 89 c1             	mov    %rax,%rcx
   1ceb8:	4c 89 e2             	mov    %r12,%rdx
   1cebb:	48 89 de             	mov    %rbx,%rsi
   1cebe:	e8 b6 11 00 00       	call   1e079 <_ZSt14__relocate_a_1IP15VkFramebuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1cec3:	48 83 c4 20          	add    $0x20,%rsp
   1cec7:	5b                   	pop    %rbx
   1cec8:	41 5c                	pop    %r12
   1ceca:	5d                   	pop    %rbp
   1cecb:	c3                   	ret

000000000001cecc <_ZNSaIP13VkImageView_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1cecc:	55                   	push   %rbp
   1cecd:	48 89 e5             	mov    %rsp,%rbp
   1ced0:	48 83 ec 10          	sub    $0x10,%rsp
   1ced4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ced8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1cedc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cee4:	48 89 d6             	mov    %rdx,%rsi
   1cee7:	48 89 c7             	mov    %rax,%rdi
   1ceea:	e8 ed 11 00 00       	call   1e0dc <_ZNSt15__new_allocatorIP13VkImageView_TEC1ERKS2_>
   1ceef:	90                   	nop
   1cef0:	c9                   	leave
   1cef1:	c3                   	ret

000000000001cef2 <_ZSt18uninitialized_copyIPKP13VkImageView_TPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1cef2:	55                   	push   %rbp
   1cef3:	48 89 e5             	mov    %rsp,%rbp
   1cef6:	48 83 ec 30          	sub    $0x30,%rsp
   1cefa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cefe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cf02:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1cf06:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1cf0a:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1cf0e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1cf12:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1cf16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cf1a:	48 89 ce             	mov    %rcx,%rsi
   1cf1d:	48 89 c7             	mov    %rax,%rdi
   1cf20:	e8 c6 11 00 00       	call   1e0eb <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP13VkImageView_TPS3_EET0_T_S8_S7_>
    }
   1cf25:	c9                   	leave
   1cf26:	c3                   	ret

000000000001cf27 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkImageView_TEEvT_S5_>:
   1cf27:	55                   	push   %rbp
   1cf28:	48 89 e5             	mov    %rsp,%rbp
   1cf2b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf2f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cf33:	90                   	nop
   1cf34:	5d                   	pop    %rbp
   1cf35:	c3                   	ret

000000000001cf36 <_ZNKSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1cf36:	55                   	push   %rbp
   1cf37:	48 89 e5             	mov    %rsp,%rbp
   1cf3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1cf3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf42:	5d                   	pop    %rbp
   1cf43:	c3                   	ret

000000000001cf44 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   1cf44:	55                   	push   %rbp
   1cf45:	48 89 e5             	mov    %rsp,%rbp
   1cf48:	48 83 ec 10          	sub    $0x10,%rsp
   1cf4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf50:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   1cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf58:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cf5c:	48 89 d6             	mov    %rdx,%rsi
   1cf5f:	48 89 c7             	mov    %rax,%rdi
   1cf62:	e8 89 9b fe ff       	call   6af0 <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE12_Vector_implC1ERKS2_>
   1cf67:	90                   	nop
   1cf68:	c9                   	leave
   1cf69:	c3                   	ret

000000000001cf6a <_ZNSt12_Vector_baseIP17VkCommandBuffer_TSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
   1cf6a:	55                   	push   %rbp
   1cf6b:	48 89 e5             	mov    %rsp,%rbp
   1cf6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf72:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  _M_start = __x._M_start;
   1cf76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf7a:	48 8b 10             	mov    (%rax),%rdx
   1cf7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf81:	48 89 10             	mov    %rdx,(%rax)
	  _M_finish = __x._M_finish;
   1cf84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf88:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1cf8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf90:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  _M_end_of_storage = __x._M_end_of_storage;
   1cf94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cf98:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1cf9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfa0:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
   1cfa4:	90                   	nop
   1cfa5:	5d                   	pop    %rbp
   1cfa6:	c3                   	ret

000000000001cfa7 <_ZSt4moveIRSaIP17VkCommandBuffer_TEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1cfa7:	55                   	push   %rbp
   1cfa8:	48 89 e5             	mov    %rsp,%rbp
   1cfab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1cfaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfb3:	5d                   	pop    %rbp
   1cfb4:	c3                   	ret

000000000001cfb5 <_ZNSt6vectorIP10VkBuffer_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cfb5:	55                   	push   %rbp
   1cfb6:	48 89 e5             	mov    %rsp,%rbp
   1cfb9:	48 83 ec 20          	sub    $0x20,%rsp
   1cfbd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cfc1:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1cfc8:	ff ff 0f 
   1cfcb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cfcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cfd3:	48 89 c7             	mov    %rax,%rdi
   1cfd6:	e8 3d 11 00 00       	call   1e118 <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE8max_sizeERKS2_>
   1cfdb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1cfdf:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1cfe3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1cfe7:	48 89 d6             	mov    %rdx,%rsi
   1cfea:	48 89 c7             	mov    %rax,%rdi
   1cfed:	e8 a5 8d fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1cff2:	48 8b 00             	mov    (%rax),%rax
      }
   1cff5:	c9                   	leave
   1cff6:	c3                   	ret
   1cff7:	90                   	nop

000000000001cff8 <_ZNKSt12_Vector_baseIP10VkBuffer_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1cff8:	55                   	push   %rbp
   1cff9:	48 89 e5             	mov    %rsp,%rbp
   1cffc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d004:	5d                   	pop    %rbp
   1d005:	c3                   	ret

000000000001d006 <_ZSt25__uninitialized_default_nIPP10VkBuffer_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d006:	55                   	push   %rbp
   1d007:	48 89 e5             	mov    %rsp,%rbp
   1d00a:	48 83 ec 20          	sub    $0x20,%rsp
   1d00e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d012:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d016:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d01a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d01e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d022:	48 89 d6             	mov    %rdx,%rsi
   1d025:	48 89 c7             	mov    %rax,%rdi
   1d028:	e8 05 11 00 00       	call   1e132 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP10VkBuffer_TmEET_S5_T0_>
    }
   1d02d:	c9                   	leave
   1d02e:	c3                   	ret

000000000001d02f <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d02f:	55                   	push   %rbp
   1d030:	48 89 e5             	mov    %rsp,%rbp
   1d033:	48 83 ec 10          	sub    $0x10,%rsp
   1d037:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d03b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1d03f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d047:	ba 00 00 00 00       	mov    $0x0,%edx
   1d04c:	48 89 ce             	mov    %rcx,%rsi
   1d04f:	48 89 c7             	mov    %rax,%rdi
   1d052:	e8 39 11 00 00       	call   1e190 <_ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv>
   1d057:	c9                   	leave
   1d058:	c3                   	ret

000000000001d059 <_ZSt12__relocate_aIPP10VkBuffer_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d059:	55                   	push   %rbp
   1d05a:	48 89 e5             	mov    %rsp,%rbp
   1d05d:	41 54                	push   %r12
   1d05f:	53                   	push   %rbx
   1d060:	48 83 ec 20          	sub    $0x20,%rsp
   1d064:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d068:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d06c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d070:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d074:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d078:	48 89 c7             	mov    %rax,%rdi
   1d07b:	e8 71 11 00 00       	call   1e1f1 <_ZSt12__niter_baseIPP10VkBuffer_TET_S3_>
   1d080:	49 89 c4             	mov    %rax,%r12
   1d083:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d087:	48 89 c7             	mov    %rax,%rdi
   1d08a:	e8 62 11 00 00       	call   1e1f1 <_ZSt12__niter_baseIPP10VkBuffer_TET_S3_>
   1d08f:	48 89 c3             	mov    %rax,%rbx
   1d092:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d096:	48 89 c7             	mov    %rax,%rdi
   1d099:	e8 53 11 00 00       	call   1e1f1 <_ZSt12__niter_baseIPP10VkBuffer_TET_S3_>
   1d09e:	48 89 c7             	mov    %rax,%rdi
   1d0a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d0a5:	48 89 c1             	mov    %rax,%rcx
   1d0a8:	4c 89 e2             	mov    %r12,%rdx
   1d0ab:	48 89 de             	mov    %rbx,%rsi
   1d0ae:	e8 4c 11 00 00       	call   1e1ff <_ZSt14__relocate_a_1IP10VkBuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1d0b3:	48 83 c4 20          	add    $0x20,%rsp
   1d0b7:	5b                   	pop    %rbx
   1d0b8:	41 5c                	pop    %r12
   1d0ba:	5d                   	pop    %rbp
   1d0bb:	c3                   	ret

000000000001d0bc <_ZNSt6vectorIP16VkDeviceMemory_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d0bc:	55                   	push   %rbp
   1d0bd:	48 89 e5             	mov    %rsp,%rbp
   1d0c0:	48 83 ec 20          	sub    $0x20,%rsp
   1d0c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d0c8:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1d0cf:	ff ff 0f 
   1d0d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d0d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d0da:	48 89 c7             	mov    %rax,%rdi
   1d0dd:	e8 80 11 00 00       	call   1e262 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE8max_sizeERKS2_>
   1d0e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d0e6:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d0ea:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d0ee:	48 89 d6             	mov    %rdx,%rsi
   1d0f1:	48 89 c7             	mov    %rax,%rdi
   1d0f4:	e8 9e 8c fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1d0f9:	48 8b 00             	mov    (%rax),%rax
      }
   1d0fc:	c9                   	leave
   1d0fd:	c3                   	ret

000000000001d0fe <_ZNKSt12_Vector_baseIP16VkDeviceMemory_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d0fe:	55                   	push   %rbp
   1d0ff:	48 89 e5             	mov    %rsp,%rbp
   1d102:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d10a:	5d                   	pop    %rbp
   1d10b:	c3                   	ret

000000000001d10c <_ZSt25__uninitialized_default_nIPP16VkDeviceMemory_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d10c:	55                   	push   %rbp
   1d10d:	48 89 e5             	mov    %rsp,%rbp
   1d110:	48 83 ec 20          	sub    $0x20,%rsp
   1d114:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d118:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d11c:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d120:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d124:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d128:	48 89 d6             	mov    %rdx,%rsi
   1d12b:	48 89 c7             	mov    %rax,%rdi
   1d12e:	e8 49 11 00 00       	call   1e27c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP16VkDeviceMemory_TmEET_S5_T0_>
    }
   1d133:	c9                   	leave
   1d134:	c3                   	ret

000000000001d135 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d135:	55                   	push   %rbp
   1d136:	48 89 e5             	mov    %rsp,%rbp
   1d139:	48 83 ec 10          	sub    $0x10,%rsp
   1d13d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d141:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1d145:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d14d:	ba 00 00 00 00       	mov    $0x0,%edx
   1d152:	48 89 ce             	mov    %rcx,%rsi
   1d155:	48 89 c7             	mov    %rax,%rdi
   1d158:	e8 7d 11 00 00       	call   1e2da <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv>
   1d15d:	c9                   	leave
   1d15e:	c3                   	ret

000000000001d15f <_ZSt12__relocate_aIPP16VkDeviceMemory_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d15f:	55                   	push   %rbp
   1d160:	48 89 e5             	mov    %rsp,%rbp
   1d163:	41 54                	push   %r12
   1d165:	53                   	push   %rbx
   1d166:	48 83 ec 20          	sub    $0x20,%rsp
   1d16a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d16e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d172:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d176:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d17a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d17e:	48 89 c7             	mov    %rax,%rdi
   1d181:	e8 b5 11 00 00       	call   1e33b <_ZSt12__niter_baseIPP16VkDeviceMemory_TET_S3_>
   1d186:	49 89 c4             	mov    %rax,%r12
   1d189:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d18d:	48 89 c7             	mov    %rax,%rdi
   1d190:	e8 a6 11 00 00       	call   1e33b <_ZSt12__niter_baseIPP16VkDeviceMemory_TET_S3_>
   1d195:	48 89 c3             	mov    %rax,%rbx
   1d198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d19c:	48 89 c7             	mov    %rax,%rdi
   1d19f:	e8 97 11 00 00       	call   1e33b <_ZSt12__niter_baseIPP16VkDeviceMemory_TET_S3_>
   1d1a4:	48 89 c7             	mov    %rax,%rdi
   1d1a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d1ab:	48 89 c1             	mov    %rax,%rcx
   1d1ae:	4c 89 e2             	mov    %r12,%rdx
   1d1b1:	48 89 de             	mov    %rbx,%rsi
   1d1b4:	e8 90 11 00 00       	call   1e349 <_ZSt14__relocate_a_1IP16VkDeviceMemory_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1d1b9:	48 83 c4 20          	add    $0x20,%rsp
   1d1bd:	5b                   	pop    %rbx
   1d1be:	41 5c                	pop    %r12
   1d1c0:	5d                   	pop    %rbp
   1d1c1:	c3                   	ret

000000000001d1c2 <_ZNSt6chrono8durationIfSt5ratioILl1ELl1EEEC1IfvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
   1d1c2:	55                   	push   %rbp
   1d1c3:	48 89 e5             	mov    %rsp,%rbp
   1d1c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d1ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  : __r(static_cast<rep>(__rep)) { }
   1d1ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d1d2:	f3 0f 10 00          	movss  (%rax),%xmm0
   1d1d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d1da:	f3 0f 11 00          	movss  %xmm0,(%rax)
   1d1de:	90                   	nop
   1d1df:	5d                   	pop    %rbp
   1d1e0:	c3                   	ret

000000000001d1e1 <_ZN3glm11inversesqrtIfEET_S1_>:
		return detail::compute_sqrt<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	// inversesqrt
	template<typename genType>
	GLM_FUNC_QUALIFIER genType inversesqrt(genType x)
   1d1e1:	55                   	push   %rbp
   1d1e2:	48 89 e5             	mov    %rsp,%rbp
   1d1e5:	48 83 ec 10          	sub    $0x10,%rsp
   1d1e9:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
	{
		return static_cast<genType>(1) / sqrt(x);
   1d1ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1d1f1:	66 0f 6e c0          	movd   %eax,%xmm0
   1d1f5:	e8 f0 6b ff ff       	call   13dea <_ZSt4sqrtf>
   1d1fa:	f3 0f 10 0d ca 68 00 	movss  0x68ca(%rip),%xmm1        # 23acc <_ZZN9VulkanApp6renderEvE11submitCount+0x7d4>
   1d201:	00 
   1d202:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   1d206:	0f 28 c1             	movaps %xmm1,%xmm0
	}
   1d209:	c9                   	leave
   1d20a:	c3                   	ret

000000000001d20b <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S3_>:
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar)
   1d20b:	55                   	push   %rbp
   1d20c:	48 89 e5             	mov    %rsp,%rbp
   1d20f:	48 83 ec 40          	sub    $0x40,%rsp
   1d213:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d217:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
			v.z * scalar);
   1d21c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d220:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
		return vec<3, T, Q>(
   1d225:	0f 28 d0             	movaps %xmm0,%xmm2
   1d228:	f3 0f 59 55 d4       	mulss  -0x2c(%rbp),%xmm2
			v.y * scalar,
   1d22d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d231:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
		return vec<3, T, Q>(
   1d236:	0f 28 c8             	movaps %xmm0,%xmm1
   1d239:	f3 0f 59 4d d4       	mulss  -0x2c(%rbp),%xmm1
			v.x * scalar,
   1d23e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d242:	f3 0f 10 00          	movss  (%rax),%xmm0
		return vec<3, T, Q>(
   1d246:	f3 0f 59 45 d4       	mulss  -0x2c(%rbp),%xmm0
   1d24b:	66 0f 7e c2          	movd   %xmm0,%edx
   1d24f:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
   1d253:	66 0f 6e c2          	movd   %edx,%xmm0
   1d257:	48 89 c7             	mov    %rax,%rdi
   1d25a:	e8 cf 6b ff ff       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
			v.z * scalar);
   1d25f:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1d263:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d267:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1d26a:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1d26d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d271:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   1d276:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   1d279:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1d27e:	c9                   	leave
   1d27f:	c3                   	ret

000000000001d280 <_ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_>:
		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
   1d280:	55                   	push   %rbp
   1d281:	48 89 e5             	mov    %rsp,%rbp
   1d284:	53                   	push   %rbx
   1d285:	48 83 ec 28          	sub    $0x28,%rsp
   1d289:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d28d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
   1d291:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d295:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
   1d29a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d29e:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
   1d2a3:	0f 28 d9             	movaps %xmm1,%xmm3
   1d2a6:	f3 0f 58 d8          	addss  %xmm0,%xmm3
   1d2aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d2ae:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
   1d2b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d2b7:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
   1d2bc:	0f 28 d1             	movaps %xmm1,%xmm2
   1d2bf:	f3 0f 58 d0          	addss  %xmm0,%xmm2
   1d2c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d2c7:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
   1d2cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d2d0:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
   1d2d5:	0f 28 e1             	movaps %xmm1,%xmm4
   1d2d8:	f3 0f 58 e0          	addss  %xmm0,%xmm4
   1d2dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d2e0:	f3 0f 10 08          	movss  (%rax),%xmm1
   1d2e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d2e8:	f3 0f 10 00          	movss  (%rax),%xmm0
   1d2ec:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   1d2f0:	66 0f 7e ca          	movd   %xmm1,%edx
   1d2f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1d2f8:	0f 28 cc             	movaps %xmm4,%xmm1
   1d2fb:	66 0f 6e c2          	movd   %edx,%xmm0
   1d2ff:	48 89 c7             	mov    %rax,%rdi
   1d302:	e8 27 ef ff ff       	call   1c22e <_ZN3glm3vecILi4EfLNS_9qualifierE0EEC1Effff>
   1d307:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d30b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d30f:	48 89 c1             	mov    %rax,%rcx
   1d312:	48 89 d3             	mov    %rdx,%rbx
   1d315:	48 89 d0             	mov    %rdx,%rax
		}
   1d318:	66 48 0f 6e c1       	movq   %rcx,%xmm0
   1d31d:	66 48 0f 6e c8       	movq   %rax,%xmm1
   1d322:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d326:	c9                   	leave
   1d327:	c3                   	ret

000000000001d328 <_ZN3glm6detail13compute_crossIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEES7_>:
		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(vec<3, T, Q> const& x, vec<3, T, Q> const& y)
   1d328:	55                   	push   %rbp
   1d329:	48 89 e5             	mov    %rsp,%rbp
   1d32c:	48 83 ec 40          	sub    $0x40,%rsp
   1d330:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d334:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
				x.x * y.y - y.x * x.y);
   1d338:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d33c:	f3 0f 10 08          	movss  (%rax),%xmm1
   1d340:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d344:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
   1d349:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   1d34d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d351:	f3 0f 10 10          	movss  (%rax),%xmm2
   1d355:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d359:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
   1d35e:	f3 0f 59 ca          	mulss  %xmm2,%xmm1
			return vec<3, T, Q>(
   1d362:	0f 28 e0             	movaps %xmm0,%xmm4
   1d365:	f3 0f 5c e1          	subss  %xmm1,%xmm4
				x.z * y.x - y.z * x.x,
   1d369:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d36d:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
   1d372:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d376:	f3 0f 10 00          	movss  (%rax),%xmm0
   1d37a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   1d37e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d382:	f3 0f 10 50 08       	movss  0x8(%rax),%xmm2
   1d387:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d38b:	f3 0f 10 08          	movss  (%rax),%xmm1
   1d38f:	f3 0f 59 ca          	mulss  %xmm2,%xmm1
			return vec<3, T, Q>(
   1d393:	0f 28 d8             	movaps %xmm0,%xmm3
   1d396:	f3 0f 5c d9          	subss  %xmm1,%xmm3
				x.y * y.z - y.y * x.z,
   1d39a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d39e:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
   1d3a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d3a7:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
   1d3ac:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   1d3b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d3b4:	f3 0f 10 50 04       	movss  0x4(%rax),%xmm2
   1d3b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d3bd:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
   1d3c2:	f3 0f 59 ca          	mulss  %xmm2,%xmm1
			return vec<3, T, Q>(
   1d3c6:	f3 0f 5c c1          	subss  %xmm1,%xmm0
   1d3ca:	66 0f 7e c2          	movd   %xmm0,%edx
   1d3ce:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
   1d3d2:	0f 28 d4             	movaps %xmm4,%xmm2
   1d3d5:	0f 28 cb             	movaps %xmm3,%xmm1
   1d3d8:	66 0f 6e c2          	movd   %edx,%xmm0
   1d3dc:	48 89 c7             	mov    %rax,%rdi
   1d3df:	e8 4a 6a ff ff       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
				x.x * y.y - y.x * x.y);
   1d3e4:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1d3e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1d3ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1d3ef:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1d3f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3f6:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   1d3fb:	0f 28 c8             	movaps %xmm0,%xmm1
		}
   1d3fe:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1d403:	c9                   	leave
   1d404:	c3                   	ret

000000000001d405 <_ZN3glm6detail11compute_dotINS_3vecILi3EfLNS_9qualifierE0EEEfLb0EE4callERKS4_S7_>:
		GLM_FUNC_QUALIFIER static T call(vec<3, T, Q> const& a, vec<3, T, Q> const& b)
   1d405:	55                   	push   %rbp
   1d406:	48 89 e5             	mov    %rsp,%rbp
   1d409:	48 83 ec 20          	sub    $0x20,%rsp
   1d40d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d411:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
			vec<3, T, Q> tmp(a * b);
   1d415:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d41d:	48 89 d6             	mov    %rdx,%rsi
   1d420:	48 89 c7             	mov    %rax,%rdi
   1d423:	e8 84 0f 00 00       	call   1e3ac <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>
   1d428:	66 48 0f 7e c0       	movq   %xmm0,%rax
   1d42d:	0f 28 c1             	movaps %xmm1,%xmm0
   1d430:	48 89 45 f4          	mov    %rax,-0xc(%rbp)
   1d434:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
			return tmp.x + tmp.y + tmp.z;
   1d439:	f3 0f 10 4d f4       	movss  -0xc(%rbp),%xmm1
   1d43e:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
   1d443:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   1d447:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1d44c:	f3 0f 58 c1          	addss  %xmm1,%xmm0
		}
   1d450:	c9                   	leave
   1d451:	c3                   	ret

000000000001d452 <_ZN3glm6detail11compute_absIfLb1EE4callEf>:
	{};

	template<typename genFIType>
	struct compute_abs<genFIType, true>
	{
		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genFIType call(genFIType x)
   1d452:	55                   	push   %rbp
   1d453:	48 89 e5             	mov    %rsp,%rbp
   1d456:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
		{
			GLM_STATIC_ASSERT(
				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed,
				"'abs' only accept floating-point and integer scalar or vector inputs");

			return x >= genFIType(0) ? x : -x;
   1d45b:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1d460:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1d464:	0f 2f c1             	comiss %xmm1,%xmm0
   1d467:	72 07                	jb     1d470 <_ZN3glm6detail11compute_absIfLb1EE4callEf+0x1e>
   1d469:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1d46e:	eb 10                	jmp    1d480 <_ZN3glm6detail11compute_absIfLb1EE4callEf+0x2e>
   1d470:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
   1d475:	f3 0f 10 0d 73 66 00 	movss  0x6673(%rip),%xmm1        # 23af0 <_ZZN9VulkanApp6renderEvE11submitCount+0x7f8>
   1d47c:	00 
   1d47d:	0f 57 c1             	xorps  %xmm1,%xmm0
			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
		}
   1d480:	5d                   	pop    %rbp
   1d481:	c3                   	ret

000000000001d482 <_ZNSt6vectorIP13VkSemaphore_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d482:	55                   	push   %rbp
   1d483:	48 89 e5             	mov    %rsp,%rbp
   1d486:	48 83 ec 20          	sub    $0x20,%rsp
   1d48a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d48e:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1d495:	ff ff 0f 
   1d498:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d49c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4a0:	48 89 c7             	mov    %rax,%rdi
   1d4a3:	e8 92 0f 00 00       	call   1e43a <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE8max_sizeERKS2_>
   1d4a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d4ac:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d4b0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d4b4:	48 89 d6             	mov    %rdx,%rsi
   1d4b7:	48 89 c7             	mov    %rax,%rdi
   1d4ba:	e8 d8 88 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1d4bf:	48 8b 00             	mov    (%rax),%rax
      }
   1d4c2:	c9                   	leave
   1d4c3:	c3                   	ret

000000000001d4c4 <_ZNKSt12_Vector_baseIP13VkSemaphore_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d4c4:	55                   	push   %rbp
   1d4c5:	48 89 e5             	mov    %rsp,%rbp
   1d4c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d4cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d4d0:	5d                   	pop    %rbp
   1d4d1:	c3                   	ret

000000000001d4d2 <_ZSt25__uninitialized_default_nIPP13VkSemaphore_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d4d2:	55                   	push   %rbp
   1d4d3:	48 89 e5             	mov    %rsp,%rbp
   1d4d6:	48 83 ec 20          	sub    $0x20,%rsp
   1d4da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d4de:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d4e2:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d4e6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d4ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4ee:	48 89 d6             	mov    %rdx,%rsi
   1d4f1:	48 89 c7             	mov    %rax,%rdi
   1d4f4:	e8 5b 0f 00 00       	call   1e454 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkSemaphore_TmEET_S5_T0_>
    }
   1d4f9:	c9                   	leave
   1d4fa:	c3                   	ret

000000000001d4fb <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d4fb:	55                   	push   %rbp
   1d4fc:	48 89 e5             	mov    %rsp,%rbp
   1d4ff:	48 83 ec 10          	sub    $0x10,%rsp
   1d503:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d507:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1d50b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d50f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d513:	ba 00 00 00 00       	mov    $0x0,%edx
   1d518:	48 89 ce             	mov    %rcx,%rsi
   1d51b:	48 89 c7             	mov    %rax,%rdi
   1d51e:	e8 8f 0f 00 00       	call   1e4b2 <_ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv>
   1d523:	c9                   	leave
   1d524:	c3                   	ret

000000000001d525 <_ZSt12__relocate_aIPP13VkSemaphore_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d525:	55                   	push   %rbp
   1d526:	48 89 e5             	mov    %rsp,%rbp
   1d529:	41 54                	push   %r12
   1d52b:	53                   	push   %rbx
   1d52c:	48 83 ec 20          	sub    $0x20,%rsp
   1d530:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d534:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d538:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d53c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d540:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d544:	48 89 c7             	mov    %rax,%rdi
   1d547:	e8 c7 0f 00 00       	call   1e513 <_ZSt12__niter_baseIPP13VkSemaphore_TET_S3_>
   1d54c:	49 89 c4             	mov    %rax,%r12
   1d54f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d553:	48 89 c7             	mov    %rax,%rdi
   1d556:	e8 b8 0f 00 00       	call   1e513 <_ZSt12__niter_baseIPP13VkSemaphore_TET_S3_>
   1d55b:	48 89 c3             	mov    %rax,%rbx
   1d55e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d562:	48 89 c7             	mov    %rax,%rdi
   1d565:	e8 a9 0f 00 00       	call   1e513 <_ZSt12__niter_baseIPP13VkSemaphore_TET_S3_>
   1d56a:	48 89 c7             	mov    %rax,%rdi
   1d56d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d571:	48 89 c1             	mov    %rax,%rcx
   1d574:	4c 89 e2             	mov    %r12,%rdx
   1d577:	48 89 de             	mov    %rbx,%rsi
   1d57a:	e8 a2 0f 00 00       	call   1e521 <_ZSt14__relocate_a_1IP13VkSemaphore_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1d57f:	48 83 c4 20          	add    $0x20,%rsp
   1d583:	5b                   	pop    %rbx
   1d584:	41 5c                	pop    %r12
   1d586:	5d                   	pop    %rbp
   1d587:	c3                   	ret

000000000001d588 <_ZNSt6vectorIP9VkFence_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d588:	55                   	push   %rbp
   1d589:	48 89 e5             	mov    %rsp,%rbp
   1d58c:	48 83 ec 20          	sub    $0x20,%rsp
   1d590:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d594:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1d59b:	ff ff 0f 
   1d59e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d5a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d5a6:	48 89 c7             	mov    %rax,%rdi
   1d5a9:	e8 d6 0f 00 00       	call   1e584 <_ZNSt16allocator_traitsISaIP9VkFence_TEE8max_sizeERKS2_>
   1d5ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d5b2:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d5b6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d5ba:	48 89 d6             	mov    %rdx,%rsi
   1d5bd:	48 89 c7             	mov    %rax,%rdi
   1d5c0:	e8 d2 87 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1d5c5:	48 8b 00             	mov    (%rax),%rax
      }
   1d5c8:	c9                   	leave
   1d5c9:	c3                   	ret

000000000001d5ca <_ZNKSt12_Vector_baseIP9VkFence_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d5ca:	55                   	push   %rbp
   1d5cb:	48 89 e5             	mov    %rsp,%rbp
   1d5ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d5d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5d6:	5d                   	pop    %rbp
   1d5d7:	c3                   	ret

000000000001d5d8 <_ZSt25__uninitialized_default_nIPP9VkFence_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d5d8:	55                   	push   %rbp
   1d5d9:	48 89 e5             	mov    %rsp,%rbp
   1d5dc:	48 83 ec 20          	sub    $0x20,%rsp
   1d5e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d5e4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d5e8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d5ec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d5f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d5f4:	48 89 d6             	mov    %rdx,%rsi
   1d5f7:	48 89 c7             	mov    %rax,%rdi
   1d5fa:	e8 9f 0f 00 00       	call   1e59e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkFence_TmEET_S5_T0_>
    }
   1d5ff:	c9                   	leave
   1d600:	c3                   	ret

000000000001d601 <_ZNSt16allocator_traitsISaIP9VkFence_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d601:	55                   	push   %rbp
   1d602:	48 89 e5             	mov    %rsp,%rbp
   1d605:	48 83 ec 10          	sub    $0x10,%rsp
   1d609:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d60d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1d611:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d619:	ba 00 00 00 00       	mov    $0x0,%edx
   1d61e:	48 89 ce             	mov    %rcx,%rsi
   1d621:	48 89 c7             	mov    %rax,%rdi
   1d624:	e8 d3 0f 00 00       	call   1e5fc <_ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv>
   1d629:	c9                   	leave
   1d62a:	c3                   	ret

000000000001d62b <_ZSt12__relocate_aIPP9VkFence_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d62b:	55                   	push   %rbp
   1d62c:	48 89 e5             	mov    %rsp,%rbp
   1d62f:	41 54                	push   %r12
   1d631:	53                   	push   %rbx
   1d632:	48 83 ec 20          	sub    $0x20,%rsp
   1d636:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d63a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d63e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d642:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d646:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d64a:	48 89 c7             	mov    %rax,%rdi
   1d64d:	e8 0b 10 00 00       	call   1e65d <_ZSt12__niter_baseIPP9VkFence_TET_S3_>
   1d652:	49 89 c4             	mov    %rax,%r12
   1d655:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d659:	48 89 c7             	mov    %rax,%rdi
   1d65c:	e8 fc 0f 00 00       	call   1e65d <_ZSt12__niter_baseIPP9VkFence_TET_S3_>
   1d661:	48 89 c3             	mov    %rax,%rbx
   1d664:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d668:	48 89 c7             	mov    %rax,%rdi
   1d66b:	e8 ed 0f 00 00       	call   1e65d <_ZSt12__niter_baseIPP9VkFence_TET_S3_>
   1d670:	48 89 c7             	mov    %rax,%rdi
   1d673:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d677:	48 89 c1             	mov    %rax,%rcx
   1d67a:	4c 89 e2             	mov    %r12,%rdx
   1d67d:	48 89 de             	mov    %rbx,%rsi
   1d680:	e8 e6 0f 00 00       	call   1e66b <_ZSt14__relocate_a_1IP9VkFence_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1d685:	48 83 c4 20          	add    $0x20,%rsp
   1d689:	5b                   	pop    %rbx
   1d68a:	41 5c                	pop    %r12
   1d68c:	5d                   	pop    %rbp
   1d68d:	c3                   	ret

000000000001d68e <_ZNSaIP13VkSemaphore_TEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1d68e:	55                   	push   %rbp
   1d68f:	48 89 e5             	mov    %rsp,%rbp
   1d692:	48 83 ec 10          	sub    $0x10,%rsp
   1d696:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d69a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1d69e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d6a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d6a6:	48 89 d6             	mov    %rdx,%rsi
   1d6a9:	48 89 c7             	mov    %rax,%rdi
   1d6ac:	e8 1d 10 00 00       	call   1e6ce <_ZNSt15__new_allocatorIP13VkSemaphore_TEC1ERKS2_>
   1d6b1:	90                   	nop
   1d6b2:	c9                   	leave
   1d6b3:	c3                   	ret

000000000001d6b4 <_ZSt18uninitialized_copyIPKP13VkSemaphore_TPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1d6b4:	55                   	push   %rbp
   1d6b5:	48 89 e5             	mov    %rsp,%rbp
   1d6b8:	48 83 ec 30          	sub    $0x30,%rsp
   1d6bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d6c0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d6c4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1d6c8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1d6cc:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1d6d0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1d6d4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1d6d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d6dc:	48 89 ce             	mov    %rcx,%rsi
   1d6df:	48 89 c7             	mov    %rax,%rdi
   1d6e2:	e8 f6 0f 00 00       	call   1e6dd <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP13VkSemaphore_TPS3_EET0_T_S8_S7_>
    }
   1d6e7:	c9                   	leave
   1d6e8:	c3                   	ret

000000000001d6e9 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13VkSemaphore_TEEvT_S5_>:
   1d6e9:	55                   	push   %rbp
   1d6ea:	48 89 e5             	mov    %rsp,%rbp
   1d6ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d6f1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d6f5:	90                   	nop
   1d6f6:	5d                   	pop    %rbp
   1d6f7:	c3                   	ret

000000000001d6f8 <_ZNSaIjEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1d6f8:	55                   	push   %rbp
   1d6f9:	48 89 e5             	mov    %rsp,%rbp
   1d6fc:	48 83 ec 10          	sub    $0x10,%rsp
   1d700:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d704:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1d708:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d70c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d710:	48 89 d6             	mov    %rdx,%rsi
   1d713:	48 89 c7             	mov    %rax,%rdi
   1d716:	e8 ef 0f 00 00       	call   1e70a <_ZNSt15__new_allocatorIjEC1ERKS0_>
   1d71b:	90                   	nop
   1d71c:	c9                   	leave
   1d71d:	c3                   	ret

000000000001d71e <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   1d71e:	55                   	push   %rbp
   1d71f:	48 89 e5             	mov    %rsp,%rbp
   1d722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1d726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d72a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1d731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d735:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1d73c:	00 
   1d73d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d741:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1d748:	00 
	{ }
   1d749:	90                   	nop
   1d74a:	5d                   	pop    %rbp
   1d74b:	c3                   	ret

000000000001d74c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjm>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1d74c:	55                   	push   %rbp
   1d74d:	48 89 e5             	mov    %rsp,%rbp
   1d750:	48 83 ec 20          	sub    $0x20,%rsp
   1d754:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d758:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d75c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1d760:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d764:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d768:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d76c:	48 89 ce             	mov    %rcx,%rsi
   1d76f:	48 89 c7             	mov    %rax,%rdi
   1d772:	e8 a3 0f 00 00       	call   1e71a <_ZNSt15__new_allocatorIjE10deallocateEPjm>
   1d777:	90                   	nop
   1d778:	c9                   	leave
   1d779:	c3                   	ret

000000000001d77a <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d77a:	55                   	push   %rbp
   1d77b:	48 89 e5             	mov    %rsp,%rbp
   1d77e:	48 83 ec 20          	sub    $0x20,%rsp
   1d782:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d786:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1d78d:	ff ff 1f 
   1d790:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d794:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d798:	48 89 c7             	mov    %rax,%rdi
   1d79b:	e8 ab 0f 00 00       	call   1e74b <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
   1d7a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d7a4:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d7a8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d7ac:	48 89 d6             	mov    %rdx,%rsi
   1d7af:	48 89 c7             	mov    %rax,%rdi
   1d7b2:	e8 e0 85 fe ff       	call   5d97 <_ZSt3minImERKT_S2_S2_>
   1d7b7:	48 8b 00             	mov    (%rax),%rax
      }
   1d7ba:	c9                   	leave
   1d7bb:	c3                   	ret

000000000001d7bc <_ZNSt16allocator_traitsISaIjEE8allocateERS0_m>:
      allocate(allocator_type& __a, size_type __n)
   1d7bc:	55                   	push   %rbp
   1d7bd:	48 89 e5             	mov    %rsp,%rbp
   1d7c0:	48 83 ec 10          	sub    $0x10,%rsp
   1d7c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d7c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1d7cc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d7d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d7d4:	ba 00 00 00 00       	mov    $0x0,%edx
   1d7d9:	48 89 ce             	mov    %rcx,%rsi
   1d7dc:	48 89 c7             	mov    %rax,%rdi
   1d7df:	e8 82 0f 00 00       	call   1e766 <_ZNSt15__new_allocatorIjE8allocateEmPKv>
   1d7e4:	c9                   	leave
   1d7e5:	c3                   	ret

000000000001d7e6 <_ZSt18uninitialized_copyIPKjPjET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1d7e6:	55                   	push   %rbp
   1d7e7:	48 89 e5             	mov    %rsp,%rbp
   1d7ea:	48 83 ec 30          	sub    $0x30,%rsp
   1d7ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d7f2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d7f6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1d7fa:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   1d7fe:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1d802:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1d806:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1d80a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d80e:	48 89 ce             	mov    %rcx,%rsi
   1d811:	48 89 c7             	mov    %rax,%rdi
   1d814:	e8 ae 0f 00 00       	call   1e7c7 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKjPjEET0_T_S6_S5_>
    }
   1d819:	c9                   	leave
   1d81a:	c3                   	ret

000000000001d81b <_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_>:
   1d81b:	55                   	push   %rbp
   1d81c:	48 89 e5             	mov    %rsp,%rbp
   1d81f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d823:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d827:	90                   	nop
   1d828:	5d                   	pop    %rbp
   1d829:	c3                   	ret

000000000001d82a <_ZNSt15__new_allocatorIP13VkImageView_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d82a:	55                   	push   %rbp
   1d82b:	48 89 e5             	mov    %rsp,%rbp
   1d82e:	48 83 ec 20          	sub    $0x20,%rsp
   1d832:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d836:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d83a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d83e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d842:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d849:	00 
   1d84a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d84e:	48 89 d6             	mov    %rdx,%rsi
   1d851:	48 89 c7             	mov    %rax,%rdi
   1d854:	e8 97 6c fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d859:	c9                   	leave
   1d85a:	c3                   	ret
   1d85b:	90                   	nop

000000000001d85c <_ZNSt15__new_allocatorIP15VkFramebuffer_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d85c:	55                   	push   %rbp
   1d85d:	48 89 e5             	mov    %rsp,%rbp
   1d860:	48 83 ec 20          	sub    $0x20,%rsp
   1d864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d86c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d874:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d87b:	00 
   1d87c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d880:	48 89 d6             	mov    %rdx,%rsi
   1d883:	48 89 c7             	mov    %rax,%rdi
   1d886:	e8 65 6c fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d88b:	c9                   	leave
   1d88c:	c3                   	ret

000000000001d88d <_ZNSt12_Destroy_auxILb1EE9__destroyIPP15VkFramebuffer_TEEvT_S5_>:
   1d88d:	55                   	push   %rbp
   1d88e:	48 89 e5             	mov    %rsp,%rbp
   1d891:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d895:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d899:	90                   	nop
   1d89a:	5d                   	pop    %rbp
   1d89b:	c3                   	ret

000000000001d89c <_ZNSt15__new_allocatorIP13VkSemaphore_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d89c:	55                   	push   %rbp
   1d89d:	48 89 e5             	mov    %rsp,%rbp
   1d8a0:	48 83 ec 20          	sub    $0x20,%rsp
   1d8a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d8a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d8ac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d8b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d8b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d8bb:	00 
   1d8bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8c0:	48 89 d6             	mov    %rdx,%rsi
   1d8c3:	48 89 c7             	mov    %rax,%rdi
   1d8c6:	e8 25 6c fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d8cb:	c9                   	leave
   1d8cc:	c3                   	ret
   1d8cd:	90                   	nop

000000000001d8ce <_ZNSt15__new_allocatorIP9VkFence_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d8ce:	55                   	push   %rbp
   1d8cf:	48 89 e5             	mov    %rsp,%rbp
   1d8d2:	48 83 ec 20          	sub    $0x20,%rsp
   1d8d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d8da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d8de:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d8e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d8e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d8ed:	00 
   1d8ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d8f2:	48 89 d6             	mov    %rdx,%rsi
   1d8f5:	48 89 c7             	mov    %rax,%rdi
   1d8f8:	e8 f3 6b fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d8fd:	c9                   	leave
   1d8fe:	c3                   	ret

000000000001d8ff <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9VkFence_TEEvT_S5_>:
   1d8ff:	55                   	push   %rbp
   1d900:	48 89 e5             	mov    %rsp,%rbp
   1d903:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d907:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d90b:	90                   	nop
   1d90c:	5d                   	pop    %rbp
   1d90d:	c3                   	ret

000000000001d90e <_ZNSt15__new_allocatorIP10VkBuffer_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d90e:	55                   	push   %rbp
   1d90f:	48 89 e5             	mov    %rsp,%rbp
   1d912:	48 83 ec 20          	sub    $0x20,%rsp
   1d916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d91a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d91e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d922:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d926:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d92d:	00 
   1d92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d932:	48 89 d6             	mov    %rdx,%rsi
   1d935:	48 89 c7             	mov    %rax,%rdi
   1d938:	e8 b3 6b fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d93d:	c9                   	leave
   1d93e:	c3                   	ret

000000000001d93f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10VkBuffer_TEEvT_S5_>:
   1d93f:	55                   	push   %rbp
   1d940:	48 89 e5             	mov    %rsp,%rbp
   1d943:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d947:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d94b:	90                   	nop
   1d94c:	5d                   	pop    %rbp
   1d94d:	c3                   	ret

000000000001d94e <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1d94e:	55                   	push   %rbp
   1d94f:	48 89 e5             	mov    %rsp,%rbp
   1d952:	48 83 ec 20          	sub    $0x20,%rsp
   1d956:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d95a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d95e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d962:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d966:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1d96d:	00 
   1d96e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d972:	48 89 d6             	mov    %rdx,%rsi
   1d975:	48 89 c7             	mov    %rax,%rdi
   1d978:	e8 73 6b fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1d97d:	c9                   	leave
   1d97e:	c3                   	ret

000000000001d97f <_ZNSt12_Destroy_auxILb1EE9__destroyIPP16VkDeviceMemory_TEEvT_S5_>:
   1d97f:	55                   	push   %rbp
   1d980:	48 89 e5             	mov    %rsp,%rbp
   1d983:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d987:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d98b:	90                   	nop
   1d98c:	5d                   	pop    %rbp
   1d98d:	c3                   	ret

000000000001d98e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1d98e:	55                   	push   %rbp
   1d98f:	48 89 e5             	mov    %rsp,%rbp
   1d992:	48 83 ec 20          	sub    $0x20,%rsp
   1d996:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d99a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d99e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1d9a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d9a6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d9aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d9ae:	48 89 ce             	mov    %rcx,%rsi
   1d9b1:	48 89 c7             	mov    %rax,%rdi
   1d9b4:	e8 3b 0e 00 00       	call   1e7f4 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>
   1d9b9:	c9                   	leave
   1d9ba:	c3                   	ret
   1d9bb:	90                   	nop

000000000001d9bc <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d9bc:	55                   	push   %rbp
   1d9bd:	48 89 e5             	mov    %rsp,%rbp
   1d9c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d9c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d9c8:	5d                   	pop    %rbp
   1d9c9:	c3                   	ret

000000000001d9ca <_ZSt12__niter_baseIPPKcET_S3_>:
    __niter_base(_Iterator __it)
   1d9ca:	55                   	push   %rbp
   1d9cb:	48 89 e5             	mov    %rsp,%rbp
   1d9ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1d9d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d9d6:	5d                   	pop    %rbp
   1d9d7:	c3                   	ret

000000000001d9d8 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1d9d8:	55                   	push   %rbp
   1d9d9:	48 89 e5             	mov    %rsp,%rbp
   1d9dc:	48 83 ec 30          	sub    $0x30,%rsp
   1d9e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d9e4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d9e8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d9ec:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1d9f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d9f4:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1d9f8:	48 c1 f8 03          	sar    $0x3,%rax
   1d9fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1da00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1da05:	7e 1f                	jle    1da26 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1da07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da0b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1da12:	00 
   1da13:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1da17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1da1b:	48 89 ce             	mov    %rcx,%rsi
   1da1e:	48 89 c7             	mov    %rax,%rdi
   1da21:	e8 9a 6e fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1da26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da2a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1da31:	00 
   1da32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1da36:	48 01 d0             	add    %rdx,%rax
    }
   1da39:	c9                   	leave
   1da3a:	c3                   	ret
   1da3b:	90                   	nop

000000000001da3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   1da3c:	55                   	push   %rbp
   1da3d:	48 89 e5             	mov    %rsp,%rbp
   1da40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1da44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da48:	5d                   	pop    %rbp
   1da49:	c3                   	ret

000000000001da4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1da4a:	55                   	push   %rbp
   1da4b:	48 89 e5             	mov    %rsp,%rbp
   1da4e:	48 83 ec 10          	sub    $0x10,%rsp
   1da52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1da56:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  __a.destroy(__p);
   1da5a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1da5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da62:	48 89 d6             	mov    %rdx,%rsi
   1da65:	48 89 c7             	mov    %rax,%rdi
   1da68:	e8 ef 0d 00 00       	call   1e85c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE7destroyIS9_EEvPT_>
	}
   1da6d:	90                   	nop
   1da6e:	c9                   	leave
   1da6f:	c3                   	ret

000000000001da70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1da70:	55                   	push   %rbp
   1da71:	48 89 e5             	mov    %rsp,%rbp
   1da74:	48 83 ec 20          	sub    $0x20,%rsp
   1da78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1da7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1da80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
   1da84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1da88:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1da8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da90:	48 89 ce             	mov    %rcx,%rsi
   1da93:	48 89 c7             	mov    %rax,%rdi
   1da96:	e8 e1 0d 00 00       	call   1e87c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>
   1da9b:	90                   	nop
   1da9c:	c9                   	leave
   1da9d:	c3                   	ret

000000000001da9e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() noexcept
   1da9e:	55                   	push   %rbp
   1da9f:	48 89 e5             	mov    %rsp,%rbp
   1daa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
   1daa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1daaa:	5d                   	pop    %rbp
   1daab:	c3                   	ret

000000000001daac <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
   1daac:	55                   	push   %rbp
   1daad:	48 89 e5             	mov    %rsp,%rbp
   1dab0:	48 83 ec 10          	sub    $0x10,%rsp
   1dab4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dab8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   1dabc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dac0:	48 89 c7             	mov    %rax,%rdi
   1dac3:	e8 8e cb ff ff       	call   1a656 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1dac8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1dacc:	48 89 02             	mov    %rax,(%rdx)
   1dacf:	90                   	nop
   1dad0:	c9                   	leave
   1dad1:	c3                   	ret

000000000001dad2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
   1dad2:	55                   	push   %rbp
   1dad3:	48 89 e5             	mov    %rsp,%rbp
   1dad6:	48 83 ec 10          	sub    $0x10,%rsp
   1dada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
   1dade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dae2:	48 89 c7             	mov    %rax,%rdi
   1dae5:	e8 52 ff ff ff       	call   1da3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1daea:	be 01 00 00 00       	mov    $0x1,%esi
   1daef:	48 89 c7             	mov    %rax,%rdi
   1daf2:	e8 bf 0d 00 00       	call   1e8b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>
   1daf7:	c9                   	leave
   1daf8:	c3                   	ret
   1daf9:	90                   	nop

000000000001dafa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
   1dafa:	55                   	push   %rbp
   1dafb:	48 89 e5             	mov    %rsp,%rbp
   1dafe:	41 56                	push   %r14
   1db00:	41 55                	push   %r13
   1db02:	41 54                	push   %r12
   1db04:	53                   	push   %rbx
   1db05:	48 83 ec 30          	sub    $0x30,%rsp
   1db09:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1db0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1db11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1db15:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   1db19:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	      ::new(__node) _Rb_tree_node<_Val>;
   1db1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1db21:	48 89 c6             	mov    %rax,%rsi
   1db24:	bf 48 00 00 00       	mov    $0x48,%edi
   1db29:	e8 24 8c fe ff       	call   6752 <_ZnwmPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
   1db2e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1db32:	48 89 c7             	mov    %rax,%rdi
   1db35:	e8 79 cb ff ff       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1db3a:	49 89 c6             	mov    %rax,%r14
   1db3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1db41:	48 89 c7             	mov    %rax,%rdi
   1db44:	e8 5c cb ff ff       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1db49:	49 89 c5             	mov    %rax,%r13
   1db4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1db50:	48 89 c7             	mov    %rax,%rdi
   1db53:	e8 3f cb ff ff       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1db58:	49 89 c4             	mov    %rax,%r12
   1db5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1db5f:	48 89 c7             	mov    %rax,%rdi
   1db62:	e8 a9 ca ff ff       	call   1a610 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1db67:	48 89 c3             	mov    %rax,%rbx
   1db6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1db6e:	48 89 c7             	mov    %rax,%rdi
   1db71:	e8 c6 fe ff ff       	call   1da3c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1db76:	4d 89 f0             	mov    %r14,%r8
   1db79:	4c 89 e9             	mov    %r13,%rcx
   1db7c:	4c 89 e2             	mov    %r12,%rdx
   1db7f:	48 89 de             	mov    %rbx,%rsi
   1db82:	48 89 c7             	mov    %rax,%rdi
   1db85:	e8 56 0d 00 00       	call   1e8e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
   1db8a:	eb 33                	jmp    1dbbf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_+0xc5>
	  __catch(...)
   1db8c:	48 89 c7             	mov    %rax,%rdi
   1db8f:	e8 dc 65 fe ff       	call   4170 <__cxa_begin_catch@plt>
	      _M_put_node(__node);
   1db94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1db98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1db9c:	48 89 d6             	mov    %rdx,%rsi
   1db9f:	48 89 c7             	mov    %rax,%rdi
   1dba2:	e8 dd e8 ff ff       	call   1c484 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
	      __throw_exception_again;
   1dba7:	e8 24 6c fe ff       	call   47d0 <__cxa_rethrow@plt>
	  __catch(...)
   1dbac:	48 89 c3             	mov    %rax,%rbx
   1dbaf:	e8 1c 6d fe ff       	call   48d0 <__cxa_end_catch@plt>
   1dbb4:	48 89 d8             	mov    %rbx,%rax
   1dbb7:	48 89 c7             	mov    %rax,%rdi
   1dbba:	e8 b1 6d fe ff       	call   4970 <_Unwind_Resume@plt>
	}
   1dbbf:	48 83 c4 30          	add    $0x30,%rsp
   1dbc3:	5b                   	pop    %rbx
   1dbc4:	41 5c                	pop    %r12
   1dbc6:	41 5d                	pop    %r13
   1dbc8:	41 5e                	pop    %r14
   1dbca:	5d                   	pop    %rbp
   1dbcb:	c3                   	ret

000000000001dbcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1dbcc:	55                   	push   %rbp
   1dbcd:	48 89 e5             	mov    %rsp,%rbp
   1dbd0:	48 83 ec 20          	sub    $0x20,%rsp
   1dbd4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_header._M_left); }
   1dbd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dbdc:	48 8b 50 18          	mov    0x18(%rax),%rdx
   1dbe0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1dbe4:	48 89 d6             	mov    %rdx,%rsi
   1dbe7:	48 89 c7             	mov    %rax,%rdi
   1dbea:	e8 47 d0 ff ff       	call   1ac36 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1dbef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dbf3:	c9                   	leave
   1dbf4:	c3                   	ret
   1dbf5:	90                   	nop

000000000001dbf6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
   1dbf6:	55                   	push   %rbp
   1dbf7:	48 89 e5             	mov    %rsp,%rbp
   1dbfa:	48 83 ec 20          	sub    $0x20,%rsp
   1dbfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc02:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dc06:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1dc0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dc0e:	48 89 c7             	mov    %rax,%rdi
   1dc11:	e8 36 0d 00 00       	call   1e94c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>
   1dc16:	48 8b 10             	mov    (%rax),%rdx
   1dc19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc1d:	48 89 10             	mov    %rdx,(%rax)
   1dc20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dc24:	48 89 c7             	mov    %rax,%rdi
   1dc27:	e8 0e 00 00 00       	call   1dc3a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1dc2c:	48 8b 10             	mov    (%rax),%rdx
   1dc2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc33:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1dc37:	90                   	nop
   1dc38:	c9                   	leave
   1dc39:	c3                   	ret

000000000001dc3a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1dc3a:	55                   	push   %rbp
   1dc3b:	48 89 e5             	mov    %rsp,%rbp
   1dc3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1dc42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc46:	5d                   	pop    %rbp
   1dc47:	c3                   	ret

000000000001dc48 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr() const
   1dc48:	55                   	push   %rbp
   1dc49:	48 89 e5             	mov    %rsp,%rbp
   1dc4c:	48 83 ec 10          	sub    $0x10,%rsp
   1dc50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1dc54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc58:	48 83 c0 20          	add    $0x20,%rax
   1dc5c:	48 89 c7             	mov    %rax,%rdi
   1dc5f:	e8 f6 0c 00 00       	call   1e95a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1dc64:	c9                   	leave
   1dc65:	c3                   	ret

000000000001dc66 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   1dc66:	55                   	push   %rbp
   1dc67:	48 89 e5             	mov    %rsp,%rbp
   1dc6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
   1dc72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dc76:	5d                   	pop    %rbp
   1dc77:	c3                   	ret

000000000001dc78 <_ZNSt16allocator_traitsISaIP13VkImageView_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1dc78:	55                   	push   %rbp
   1dc79:	48 89 e5             	mov    %rsp,%rbp
   1dc7c:	48 83 ec 10          	sub    $0x10,%rsp
   1dc80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1dc84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc88:	48 89 c7             	mov    %rax,%rdi
   1dc8b:	e8 e4 0c 00 00       	call   1e974 <_ZNKSt15__new_allocatorIP13VkImageView_TE8max_sizeEv>
      }
   1dc90:	c9                   	leave
   1dc91:	c3                   	ret

000000000001dc92 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1dc92:	55                   	push   %rbp
   1dc93:	48 89 e5             	mov    %rsp,%rbp
   1dc96:	48 83 ec 20          	sub    $0x20,%rsp
   1dc9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1dc9e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1dca2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1dca7:	74 40                	je     1dce9 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkImageView_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1dca9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dcad:	48 89 c7             	mov    %rax,%rdi
   1dcb0:	e8 d9 0c 00 00       	call   1e98e <_ZSt11__addressofIP13VkImageView_TEPT_RS2_>
   1dcb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1dcb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dcbd:	48 89 c7             	mov    %rax,%rdi
   1dcc0:	e8 d7 0c 00 00       	call   1e99c <_ZSt10_ConstructIP13VkImageView_TJEEvPT_DpOT0_>
	      ++__first;
   1dcc5:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1dcca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1dcce:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1dcd2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1dcd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dcda:	48 89 ce             	mov    %rcx,%rsi
   1dcdd:	48 89 c7             	mov    %rax,%rdi
   1dce0:	e8 de 0c 00 00       	call   1e9c3 <_ZSt6fill_nIPP13VkImageView_TmS1_ET_S3_T0_RKT1_>
   1dce5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1dce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1dced:	c9                   	leave
   1dcee:	c3                   	ret
   1dcef:	90                   	nop

000000000001dcf0 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1dcf0:	55                   	push   %rbp
   1dcf1:	48 89 e5             	mov    %rsp,%rbp
   1dcf4:	48 83 ec 20          	sub    $0x20,%rsp
   1dcf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dcfc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dd00:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1dd04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dd08:	48 89 c7             	mov    %rax,%rdi
   1dd0b:	e8 f8 0c 00 00       	call   1ea08 <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>
   1dd10:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1dd14:	0f 92 c0             	setb   %al
   1dd17:	0f b6 c0             	movzbl %al,%eax
   1dd1a:	48 85 c0             	test   %rax,%rax
   1dd1d:	0f 95 c0             	setne  %al
   1dd20:	84 c0                	test   %al,%al
   1dd22:	74 1a                	je     1dd3e <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1dd24:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1dd2b:	ff ff 1f 
   1dd2e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1dd32:	73 05                	jae    1dd39 <_ZNSt15__new_allocatorIP13VkImageView_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1dd34:	e8 17 66 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1dd39:	e8 e2 63 fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1dd3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dd42:	48 c1 e0 03          	shl    $0x3,%rax
   1dd46:	48 89 c7             	mov    %rax,%rdi
   1dd49:	e8 82 67 fe ff       	call   44d0 <_Znwm@plt>
   1dd4e:	90                   	nop
      }
   1dd4f:	c9                   	leave
   1dd50:	c3                   	ret

000000000001dd51 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>:
    __niter_base(_Iterator __it)
   1dd51:	55                   	push   %rbp
   1dd52:	48 89 e5             	mov    %rsp,%rbp
   1dd55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1dd59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dd5d:	5d                   	pop    %rbp
   1dd5e:	c3                   	ret

000000000001dd5f <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1dd5f:	55                   	push   %rbp
   1dd60:	48 89 e5             	mov    %rsp,%rbp
   1dd63:	48 83 ec 30          	sub    $0x30,%rsp
   1dd67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1dd6b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1dd6f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1dd73:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1dd77:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1dd7b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1dd7f:	48 c1 f8 03          	sar    $0x3,%rax
   1dd83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1dd87:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1dd8c:	7e 1f                	jle    1ddad <_ZSt14__relocate_a_1IP13VkImageView_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1dd8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dd92:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1dd99:	00 
   1dd9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1dd9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dda2:	48 89 ce             	mov    %rcx,%rsi
   1dda5:	48 89 c7             	mov    %rax,%rdi
   1dda8:	e8 13 6b fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1ddad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ddb1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1ddb8:	00 
   1ddb9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ddbd:	48 01 d0             	add    %rdx,%rax
    }
   1ddc0:	c9                   	leave
   1ddc1:	c3                   	ret

000000000001ddc2 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   1ddc2:	55                   	push   %rbp
   1ddc3:	48 89 e5             	mov    %rsp,%rbp
   1ddc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ddca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ddce:	90                   	nop
   1ddcf:	5d                   	pop    %rbp
   1ddd0:	c3                   	ret
   1ddd1:	90                   	nop

000000000001ddd2 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE10deallocateEPS0_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1ddd2:	55                   	push   %rbp
   1ddd3:	48 89 e5             	mov    %rsp,%rbp
   1ddd6:	48 83 ec 20          	sub    $0x20,%rsp
   1ddda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ddde:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dde2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1dde6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ddea:	48 89 d0             	mov    %rdx,%rax
   1dded:	48 c1 e0 03          	shl    $0x3,%rax
   1ddf1:	48 01 d0             	add    %rdx,%rax
   1ddf4:	48 c1 e0 04          	shl    $0x4,%rax
   1ddf8:	48 89 c2             	mov    %rax,%rdx
   1ddfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ddff:	48 89 d6             	mov    %rdx,%rsi
   1de02:	48 89 c7             	mov    %rax,%rdi
   1de05:	e8 e6 66 fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1de0a:	c9                   	leave
   1de0b:	c3                   	ret

000000000001de0c <_ZNSt16allocator_traitsISaI28VkGraphicsPipelineCreateInfoEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1de0c:	55                   	push   %rbp
   1de0d:	48 89 e5             	mov    %rsp,%rbp
   1de10:	48 83 ec 10          	sub    $0x10,%rsp
   1de14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1de18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de1c:	48 89 c7             	mov    %rax,%rdi
   1de1f:	e8 f8 0b 00 00       	call   1ea1c <_ZNKSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8max_sizeEv>
      }
   1de24:	c9                   	leave
   1de25:	c3                   	ret

000000000001de26 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1de26:	55                   	push   %rbp
   1de27:	48 89 e5             	mov    %rsp,%rbp
   1de2a:	48 83 ec 20          	sub    $0x20,%rsp
   1de2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1de32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1de36:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1de3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de3e:	48 89 c7             	mov    %rax,%rdi
   1de41:	e8 f0 0b 00 00       	call   1ea36 <_ZNKSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE11_M_max_sizeEv>
   1de46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1de4a:	0f 92 c0             	setb   %al
   1de4d:	0f b6 c0             	movzbl %al,%eax
   1de50:	48 85 c0             	test   %rax,%rax
   1de53:	0f 95 c0             	setne  %al
   1de56:	84 c0                	test   %al,%al
   1de58:	74 1a                	je     1de74 <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1de5a:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   1de61:	1c c7 01 
   1de64:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1de68:	73 05                	jae    1de6f <_ZNSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1de6a:	e8 e1 64 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1de6f:	e8 ac 62 fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1de74:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1de78:	48 89 d0             	mov    %rdx,%rax
   1de7b:	48 c1 e0 03          	shl    $0x3,%rax
   1de7f:	48 01 d0             	add    %rdx,%rax
   1de82:	48 c1 e0 04          	shl    $0x4,%rax
   1de86:	48 89 c7             	mov    %rax,%rdi
   1de89:	e8 42 66 fe ff       	call   44d0 <_Znwm@plt>
   1de8e:	90                   	nop
      }
   1de8f:	c9                   	leave
   1de90:	c3                   	ret

000000000001de91 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK28VkGraphicsPipelineCreateInfoPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1de91:	55                   	push   %rbp
   1de92:	48 89 e5             	mov    %rsp,%rbp
   1de95:	48 83 ec 20          	sub    $0x20,%rsp
   1de99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1de9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dea1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1dea5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1dea9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1dead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1deb1:	48 89 ce             	mov    %rcx,%rsi
   1deb4:	48 89 c7             	mov    %rax,%rdi
   1deb7:	e8 8e 0b 00 00       	call   1ea4a <_ZSt4copyIPK28VkGraphicsPipelineCreateInfoPS0_ET0_T_S5_S4_>
   1debc:	c9                   	leave
   1debd:	c3                   	ret

000000000001debe <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1debe:	55                   	push   %rbp
   1debf:	48 89 e5             	mov    %rsp,%rbp
   1dec2:	48 83 ec 10          	sub    $0x10,%rsp
   1dec6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1deca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dece:	48 89 c7             	mov    %rax,%rdi
   1ded1:	e8 c0 0b 00 00       	call   1ea96 <_ZNKSt15__new_allocatorIP12VkPipeline_TE8max_sizeEv>
      }
   1ded6:	c9                   	leave
   1ded7:	c3                   	ret

000000000001ded8 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   1ded8:	55                   	push   %rbp
   1ded9:	48 89 e5             	mov    %rsp,%rbp
   1dedc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1dee0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dee4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1deeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1deef:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1def6:	00 
   1def7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1defb:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1df02:	00 
	{ }
   1df03:	90                   	nop
   1df04:	5d                   	pop    %rbp
   1df05:	c3                   	ret

000000000001df06 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1df06:	55                   	push   %rbp
   1df07:	48 89 e5             	mov    %rsp,%rbp
   1df0a:	48 83 ec 10          	sub    $0x10,%rsp
   1df0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df12:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1df16:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1df1b:	74 15                	je     1df32 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm+0x2c>
   1df1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1df21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1df25:	48 89 d6             	mov    %rdx,%rsi
   1df28:	48 89 c7             	mov    %rax,%rdi
   1df2b:	e8 80 0b 00 00       	call   1eab0 <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8allocateERS2_m>
   1df30:	eb 05                	jmp    1df37 <_ZNSt12_Vector_baseIP12VkPipeline_TSaIS1_EE11_M_allocateEm+0x31>
   1df32:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1df37:	c9                   	leave
   1df38:	c3                   	ret

000000000001df39 <_ZSt25__uninitialized_default_nIPP12VkPipeline_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1df39:	55                   	push   %rbp
   1df3a:	48 89 e5             	mov    %rsp,%rbp
   1df3d:	48 83 ec 20          	sub    $0x20,%rsp
   1df41:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1df45:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1df49:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1df4d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1df51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1df55:	48 89 d6             	mov    %rdx,%rsi
   1df58:	48 89 c7             	mov    %rax,%rdi
   1df5b:	e8 7a 0b 00 00       	call   1eada <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_>
    }
   1df60:	c9                   	leave
   1df61:	c3                   	ret

000000000001df62 <_ZNSt15__new_allocatorIP12VkPipeline_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1df62:	55                   	push   %rbp
   1df63:	48 89 e5             	mov    %rsp,%rbp
   1df66:	48 83 ec 20          	sub    $0x20,%rsp
   1df6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1df72:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1df76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1df7a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1df81:	00 
   1df82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1df86:	48 89 d6             	mov    %rdx,%rsi
   1df89:	48 89 c7             	mov    %rax,%rdi
   1df8c:	e8 5f 65 fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1df91:	c9                   	leave
   1df92:	c3                   	ret

000000000001df93 <_ZNSt16allocator_traitsISaIP15VkFramebuffer_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1df93:	55                   	push   %rbp
   1df94:	48 89 e5             	mov    %rsp,%rbp
   1df97:	48 83 ec 10          	sub    $0x10,%rsp
   1df9b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1df9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dfa3:	48 89 c7             	mov    %rax,%rdi
   1dfa6:	e8 8d 0b 00 00       	call   1eb38 <_ZNKSt15__new_allocatorIP15VkFramebuffer_TE8max_sizeEv>
      }
   1dfab:	c9                   	leave
   1dfac:	c3                   	ret

000000000001dfad <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP15VkFramebuffer_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1dfad:	55                   	push   %rbp
   1dfae:	48 89 e5             	mov    %rsp,%rbp
   1dfb1:	48 83 ec 20          	sub    $0x20,%rsp
   1dfb5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1dfb9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1dfbd:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1dfc2:	74 40                	je     1e004 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP15VkFramebuffer_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1dfc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dfc8:	48 89 c7             	mov    %rax,%rdi
   1dfcb:	e8 82 0b 00 00       	call   1eb52 <_ZSt11__addressofIP15VkFramebuffer_TEPT_RS2_>
   1dfd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1dfd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dfd8:	48 89 c7             	mov    %rax,%rdi
   1dfdb:	e8 80 0b 00 00       	call   1eb60 <_ZSt10_ConstructIP15VkFramebuffer_TJEEvPT_DpOT0_>
	      ++__first;
   1dfe0:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1dfe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1dfe9:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1dfed:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1dff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dff5:	48 89 ce             	mov    %rcx,%rsi
   1dff8:	48 89 c7             	mov    %rax,%rdi
   1dffb:	e8 87 0b 00 00       	call   1eb87 <_ZSt6fill_nIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_>
   1e000:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e004:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e008:	c9                   	leave
   1e009:	c3                   	ret

000000000001e00a <_ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e00a:	55                   	push   %rbp
   1e00b:	48 89 e5             	mov    %rsp,%rbp
   1e00e:	48 83 ec 20          	sub    $0x20,%rsp
   1e012:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e016:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e01a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e01e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e022:	48 89 c7             	mov    %rax,%rdi
   1e025:	e8 a2 0b 00 00       	call   1ebcc <_ZNKSt15__new_allocatorIP15VkFramebuffer_TE11_M_max_sizeEv>
   1e02a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e02e:	0f 92 c0             	setb   %al
   1e031:	0f b6 c0             	movzbl %al,%eax
   1e034:	48 85 c0             	test   %rax,%rax
   1e037:	0f 95 c0             	setne  %al
   1e03a:	84 c0                	test   %al,%al
   1e03c:	74 1a                	je     1e058 <_ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e03e:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1e045:	ff ff 1f 
   1e048:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e04c:	73 05                	jae    1e053 <_ZNSt15__new_allocatorIP15VkFramebuffer_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e04e:	e8 fd 62 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e053:	e8 c8 60 fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e05c:	48 c1 e0 03          	shl    $0x3,%rax
   1e060:	48 89 c7             	mov    %rax,%rdi
   1e063:	e8 68 64 fe ff       	call   44d0 <_Znwm@plt>
   1e068:	90                   	nop
      }
   1e069:	c9                   	leave
   1e06a:	c3                   	ret

000000000001e06b <_ZSt12__niter_baseIPP15VkFramebuffer_TET_S3_>:
    __niter_base(_Iterator __it)
   1e06b:	55                   	push   %rbp
   1e06c:	48 89 e5             	mov    %rsp,%rbp
   1e06f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e077:	5d                   	pop    %rbp
   1e078:	c3                   	ret

000000000001e079 <_ZSt14__relocate_a_1IP15VkFramebuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1e079:	55                   	push   %rbp
   1e07a:	48 89 e5             	mov    %rsp,%rbp
   1e07d:	48 83 ec 30          	sub    $0x30,%rsp
   1e081:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e085:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e089:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e08d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1e091:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e095:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1e099:	48 c1 f8 03          	sar    $0x3,%rax
   1e09d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1e0a1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1e0a6:	7e 1f                	jle    1e0c7 <_ZSt14__relocate_a_1IP15VkFramebuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1e0a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e0ac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e0b3:	00 
   1e0b4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e0b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e0bc:	48 89 ce             	mov    %rcx,%rsi
   1e0bf:	48 89 c7             	mov    %rax,%rdi
   1e0c2:	e8 f9 67 fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1e0c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e0cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e0d2:	00 
   1e0d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e0d7:	48 01 d0             	add    %rdx,%rax
    }
   1e0da:	c9                   	leave
   1e0db:	c3                   	ret

000000000001e0dc <_ZNSt15__new_allocatorIP13VkImageView_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   1e0dc:	55                   	push   %rbp
   1e0dd:	48 89 e5             	mov    %rsp,%rbp
   1e0e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e0e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e0e8:	90                   	nop
   1e0e9:	5d                   	pop    %rbp
   1e0ea:	c3                   	ret

000000000001e0eb <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP13VkImageView_TPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1e0eb:	55                   	push   %rbp
   1e0ec:	48 89 e5             	mov    %rsp,%rbp
   1e0ef:	48 83 ec 20          	sub    $0x20,%rsp
   1e0f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e0f7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e0fb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1e0ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e103:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e107:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e10b:	48 89 ce             	mov    %rcx,%rsi
   1e10e:	48 89 c7             	mov    %rax,%rdi
   1e111:	e8 ca 0a 00 00       	call   1ebe0 <_ZSt4copyIPKP13VkImageView_TPS1_ET0_T_S6_S5_>
   1e116:	c9                   	leave
   1e117:	c3                   	ret

000000000001e118 <_ZNSt16allocator_traitsISaIP10VkBuffer_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1e118:	55                   	push   %rbp
   1e119:	48 89 e5             	mov    %rsp,%rbp
   1e11c:	48 83 ec 10          	sub    $0x10,%rsp
   1e120:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1e124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e128:	48 89 c7             	mov    %rax,%rdi
   1e12b:	e8 fc 0a 00 00       	call   1ec2c <_ZNKSt15__new_allocatorIP10VkBuffer_TE8max_sizeEv>
      }
   1e130:	c9                   	leave
   1e131:	c3                   	ret

000000000001e132 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP10VkBuffer_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e132:	55                   	push   %rbp
   1e133:	48 89 e5             	mov    %rsp,%rbp
   1e136:	48 83 ec 20          	sub    $0x20,%rsp
   1e13a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e13e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1e142:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e147:	74 40                	je     1e189 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP10VkBuffer_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1e149:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e14d:	48 89 c7             	mov    %rax,%rdi
   1e150:	e8 f1 0a 00 00       	call   1ec46 <_ZSt11__addressofIP10VkBuffer_TEPT_RS2_>
   1e155:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1e159:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e15d:	48 89 c7             	mov    %rax,%rdi
   1e160:	e8 ef 0a 00 00       	call   1ec54 <_ZSt10_ConstructIP10VkBuffer_TJEEvPT_DpOT0_>
	      ++__first;
   1e165:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1e16a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e16e:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1e172:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e176:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e17a:	48 89 ce             	mov    %rcx,%rsi
   1e17d:	48 89 c7             	mov    %rax,%rdi
   1e180:	e8 f6 0a 00 00       	call   1ec7b <_ZSt6fill_nIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_>
   1e185:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e18d:	c9                   	leave
   1e18e:	c3                   	ret
   1e18f:	90                   	nop

000000000001e190 <_ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e190:	55                   	push   %rbp
   1e191:	48 89 e5             	mov    %rsp,%rbp
   1e194:	48 83 ec 20          	sub    $0x20,%rsp
   1e198:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e19c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e1a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e1a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e1a8:	48 89 c7             	mov    %rax,%rdi
   1e1ab:	e8 10 0b 00 00       	call   1ecc0 <_ZNKSt15__new_allocatorIP10VkBuffer_TE11_M_max_sizeEv>
   1e1b0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e1b4:	0f 92 c0             	setb   %al
   1e1b7:	0f b6 c0             	movzbl %al,%eax
   1e1ba:	48 85 c0             	test   %rax,%rax
   1e1bd:	0f 95 c0             	setne  %al
   1e1c0:	84 c0                	test   %al,%al
   1e1c2:	74 1a                	je     1e1de <_ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e1c4:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1e1cb:	ff ff 1f 
   1e1ce:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e1d2:	73 05                	jae    1e1d9 <_ZNSt15__new_allocatorIP10VkBuffer_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e1d4:	e8 77 61 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e1d9:	e8 42 5f fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e1de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e1e2:	48 c1 e0 03          	shl    $0x3,%rax
   1e1e6:	48 89 c7             	mov    %rax,%rdi
   1e1e9:	e8 e2 62 fe ff       	call   44d0 <_Znwm@plt>
   1e1ee:	90                   	nop
      }
   1e1ef:	c9                   	leave
   1e1f0:	c3                   	ret

000000000001e1f1 <_ZSt12__niter_baseIPP10VkBuffer_TET_S3_>:
    __niter_base(_Iterator __it)
   1e1f1:	55                   	push   %rbp
   1e1f2:	48 89 e5             	mov    %rsp,%rbp
   1e1f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e1f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e1fd:	5d                   	pop    %rbp
   1e1fe:	c3                   	ret

000000000001e1ff <_ZSt14__relocate_a_1IP10VkBuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1e1ff:	55                   	push   %rbp
   1e200:	48 89 e5             	mov    %rsp,%rbp
   1e203:	48 83 ec 30          	sub    $0x30,%rsp
   1e207:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e20b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e20f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e213:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1e217:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e21b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1e21f:	48 c1 f8 03          	sar    $0x3,%rax
   1e223:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1e227:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1e22c:	7e 1f                	jle    1e24d <_ZSt14__relocate_a_1IP10VkBuffer_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1e22e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e232:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e239:	00 
   1e23a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e23e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e242:	48 89 ce             	mov    %rcx,%rsi
   1e245:	48 89 c7             	mov    %rax,%rdi
   1e248:	e8 73 66 fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1e24d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e251:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e258:	00 
   1e259:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e25d:	48 01 d0             	add    %rdx,%rax
    }
   1e260:	c9                   	leave
   1e261:	c3                   	ret

000000000001e262 <_ZNSt16allocator_traitsISaIP16VkDeviceMemory_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1e262:	55                   	push   %rbp
   1e263:	48 89 e5             	mov    %rsp,%rbp
   1e266:	48 83 ec 10          	sub    $0x10,%rsp
   1e26a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1e26e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e272:	48 89 c7             	mov    %rax,%rdi
   1e275:	e8 5a 0a 00 00       	call   1ecd4 <_ZNKSt15__new_allocatorIP16VkDeviceMemory_TE8max_sizeEv>
      }
   1e27a:	c9                   	leave
   1e27b:	c3                   	ret

000000000001e27c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP16VkDeviceMemory_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e27c:	55                   	push   %rbp
   1e27d:	48 89 e5             	mov    %rsp,%rbp
   1e280:	48 83 ec 20          	sub    $0x20,%rsp
   1e284:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e288:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1e28c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e291:	74 40                	je     1e2d3 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP16VkDeviceMemory_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1e293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e297:	48 89 c7             	mov    %rax,%rdi
   1e29a:	e8 4f 0a 00 00       	call   1ecee <_ZSt11__addressofIP16VkDeviceMemory_TEPT_RS2_>
   1e29f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1e2a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e2a7:	48 89 c7             	mov    %rax,%rdi
   1e2aa:	e8 4d 0a 00 00       	call   1ecfc <_ZSt10_ConstructIP16VkDeviceMemory_TJEEvPT_DpOT0_>
	      ++__first;
   1e2af:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1e2b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e2b8:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1e2bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e2c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e2c4:	48 89 ce             	mov    %rcx,%rsi
   1e2c7:	48 89 c7             	mov    %rax,%rdi
   1e2ca:	e8 54 0a 00 00       	call   1ed23 <_ZSt6fill_nIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_>
   1e2cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e2d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e2d7:	c9                   	leave
   1e2d8:	c3                   	ret
   1e2d9:	90                   	nop

000000000001e2da <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e2da:	55                   	push   %rbp
   1e2db:	48 89 e5             	mov    %rsp,%rbp
   1e2de:	48 83 ec 20          	sub    $0x20,%rsp
   1e2e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e2e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e2ea:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e2f2:	48 89 c7             	mov    %rax,%rdi
   1e2f5:	e8 6e 0a 00 00       	call   1ed68 <_ZNKSt15__new_allocatorIP16VkDeviceMemory_TE11_M_max_sizeEv>
   1e2fa:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e2fe:	0f 92 c0             	setb   %al
   1e301:	0f b6 c0             	movzbl %al,%eax
   1e304:	48 85 c0             	test   %rax,%rax
   1e307:	0f 95 c0             	setne  %al
   1e30a:	84 c0                	test   %al,%al
   1e30c:	74 1a                	je     1e328 <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e30e:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1e315:	ff ff 1f 
   1e318:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e31c:	73 05                	jae    1e323 <_ZNSt15__new_allocatorIP16VkDeviceMemory_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e31e:	e8 2d 60 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e323:	e8 f8 5d fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e32c:	48 c1 e0 03          	shl    $0x3,%rax
   1e330:	48 89 c7             	mov    %rax,%rdi
   1e333:	e8 98 61 fe ff       	call   44d0 <_Znwm@plt>
   1e338:	90                   	nop
      }
   1e339:	c9                   	leave
   1e33a:	c3                   	ret

000000000001e33b <_ZSt12__niter_baseIPP16VkDeviceMemory_TET_S3_>:
    __niter_base(_Iterator __it)
   1e33b:	55                   	push   %rbp
   1e33c:	48 89 e5             	mov    %rsp,%rbp
   1e33f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e347:	5d                   	pop    %rbp
   1e348:	c3                   	ret

000000000001e349 <_ZSt14__relocate_a_1IP16VkDeviceMemory_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1e349:	55                   	push   %rbp
   1e34a:	48 89 e5             	mov    %rsp,%rbp
   1e34d:	48 83 ec 30          	sub    $0x30,%rsp
   1e351:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e355:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e359:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e35d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1e361:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e365:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1e369:	48 c1 f8 03          	sar    $0x3,%rax
   1e36d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1e371:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1e376:	7e 1f                	jle    1e397 <_ZSt14__relocate_a_1IP16VkDeviceMemory_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1e378:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e37c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e383:	00 
   1e384:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e388:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e38c:	48 89 ce             	mov    %rcx,%rsi
   1e38f:	48 89 c7             	mov    %rax,%rdi
   1e392:	e8 29 65 fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1e397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e39b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e3a2:	00 
   1e3a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e3a7:	48 01 d0             	add    %rdx,%rax
    }
   1e3aa:	c9                   	leave
   1e3ab:	c3                   	ret

000000000001e3ac <_ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_>:
			scalar.x * v.y,
			scalar.x * v.z);
	}

	template<typename T, qualifier Q>
	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
   1e3ac:	55                   	push   %rbp
   1e3ad:	48 89 e5             	mov    %rsp,%rbp
   1e3b0:	48 83 ec 40          	sub    $0x40,%rsp
   1e3b4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e3b8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	{
		return vec<3, T, Q>(
			v1.x * v2.x,
			v1.y * v2.y,
			v1.z * v2.z);
   1e3bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e3c0:	f3 0f 10 48 08       	movss  0x8(%rax),%xmm1
   1e3c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e3c9:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
		return vec<3, T, Q>(
   1e3ce:	0f 28 d1             	movaps %xmm1,%xmm2
   1e3d1:	f3 0f 59 d0          	mulss  %xmm0,%xmm2
			v1.y * v2.y,
   1e3d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e3d9:	f3 0f 10 48 04       	movss  0x4(%rax),%xmm1
   1e3de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e3e2:	f3 0f 10 40 04       	movss  0x4(%rax),%xmm0
		return vec<3, T, Q>(
   1e3e7:	0f 28 d9             	movaps %xmm1,%xmm3
   1e3ea:	f3 0f 59 d8          	mulss  %xmm0,%xmm3
			v1.x * v2.x,
   1e3ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e3f2:	f3 0f 10 08          	movss  (%rax),%xmm1
   1e3f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e3fa:	f3 0f 10 00          	movss  (%rax),%xmm0
		return vec<3, T, Q>(
   1e3fe:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   1e402:	66 0f 7e ca          	movd   %xmm1,%edx
   1e406:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
   1e40a:	0f 28 cb             	movaps %xmm3,%xmm1
   1e40d:	66 0f 6e c2          	movd   %edx,%xmm0
   1e411:	48 89 c7             	mov    %rax,%rdi
   1e414:	e8 15 5a ff ff       	call   13e2e <_ZN3glm3vecILi3EfLNS_9qualifierE0EEC1Efff>
			v1.z * v2.z);
   1e419:	48 8b 45 f4          	mov    -0xc(%rbp),%rax
   1e41d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1e421:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1e424:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1e427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e42b:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
   1e430:	0f 28 c8             	movaps %xmm0,%xmm1
	}
   1e433:	66 48 0f 6e c0       	movq   %rax,%xmm0
   1e438:	c9                   	leave
   1e439:	c3                   	ret

000000000001e43a <_ZNSt16allocator_traitsISaIP13VkSemaphore_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1e43a:	55                   	push   %rbp
   1e43b:	48 89 e5             	mov    %rsp,%rbp
   1e43e:	48 83 ec 10          	sub    $0x10,%rsp
   1e442:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1e446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e44a:	48 89 c7             	mov    %rax,%rdi
   1e44d:	e8 2a 09 00 00       	call   1ed7c <_ZNKSt15__new_allocatorIP13VkSemaphore_TE8max_sizeEv>
      }
   1e452:	c9                   	leave
   1e453:	c3                   	ret

000000000001e454 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkSemaphore_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e454:	55                   	push   %rbp
   1e455:	48 89 e5             	mov    %rsp,%rbp
   1e458:	48 83 ec 20          	sub    $0x20,%rsp
   1e45c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e460:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1e464:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e469:	74 40                	je     1e4ab <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP13VkSemaphore_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1e46b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e46f:	48 89 c7             	mov    %rax,%rdi
   1e472:	e8 1f 09 00 00       	call   1ed96 <_ZSt11__addressofIP13VkSemaphore_TEPT_RS2_>
   1e477:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1e47b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e47f:	48 89 c7             	mov    %rax,%rdi
   1e482:	e8 1d 09 00 00       	call   1eda4 <_ZSt10_ConstructIP13VkSemaphore_TJEEvPT_DpOT0_>
	      ++__first;
   1e487:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1e48c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e490:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1e494:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e49c:	48 89 ce             	mov    %rcx,%rsi
   1e49f:	48 89 c7             	mov    %rax,%rdi
   1e4a2:	e8 24 09 00 00       	call   1edcb <_ZSt6fill_nIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_>
   1e4a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e4ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e4af:	c9                   	leave
   1e4b0:	c3                   	ret
   1e4b1:	90                   	nop

000000000001e4b2 <_ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e4b2:	55                   	push   %rbp
   1e4b3:	48 89 e5             	mov    %rsp,%rbp
   1e4b6:	48 83 ec 20          	sub    $0x20,%rsp
   1e4ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e4be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e4c2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e4c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4ca:	48 89 c7             	mov    %rax,%rdi
   1e4cd:	e8 3e 09 00 00       	call   1ee10 <_ZNKSt15__new_allocatorIP13VkSemaphore_TE11_M_max_sizeEv>
   1e4d2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e4d6:	0f 92 c0             	setb   %al
   1e4d9:	0f b6 c0             	movzbl %al,%eax
   1e4dc:	48 85 c0             	test   %rax,%rax
   1e4df:	0f 95 c0             	setne  %al
   1e4e2:	84 c0                	test   %al,%al
   1e4e4:	74 1a                	je     1e500 <_ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e4e6:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1e4ed:	ff ff 1f 
   1e4f0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e4f4:	73 05                	jae    1e4fb <_ZNSt15__new_allocatorIP13VkSemaphore_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e4f6:	e8 55 5e fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e4fb:	e8 20 5c fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e504:	48 c1 e0 03          	shl    $0x3,%rax
   1e508:	48 89 c7             	mov    %rax,%rdi
   1e50b:	e8 c0 5f fe ff       	call   44d0 <_Znwm@plt>
   1e510:	90                   	nop
      }
   1e511:	c9                   	leave
   1e512:	c3                   	ret

000000000001e513 <_ZSt12__niter_baseIPP13VkSemaphore_TET_S3_>:
    __niter_base(_Iterator __it)
   1e513:	55                   	push   %rbp
   1e514:	48 89 e5             	mov    %rsp,%rbp
   1e517:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e51b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e51f:	5d                   	pop    %rbp
   1e520:	c3                   	ret

000000000001e521 <_ZSt14__relocate_a_1IP13VkSemaphore_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1e521:	55                   	push   %rbp
   1e522:	48 89 e5             	mov    %rsp,%rbp
   1e525:	48 83 ec 30          	sub    $0x30,%rsp
   1e529:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e52d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e531:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e535:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1e539:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e53d:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1e541:	48 c1 f8 03          	sar    $0x3,%rax
   1e545:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1e549:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1e54e:	7e 1f                	jle    1e56f <_ZSt14__relocate_a_1IP13VkSemaphore_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1e550:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e554:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e55b:	00 
   1e55c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e560:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e564:	48 89 ce             	mov    %rcx,%rsi
   1e567:	48 89 c7             	mov    %rax,%rdi
   1e56a:	e8 51 63 fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1e56f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e573:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e57a:	00 
   1e57b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e57f:	48 01 d0             	add    %rdx,%rax
    }
   1e582:	c9                   	leave
   1e583:	c3                   	ret

000000000001e584 <_ZNSt16allocator_traitsISaIP9VkFence_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1e584:	55                   	push   %rbp
   1e585:	48 89 e5             	mov    %rsp,%rbp
   1e588:	48 83 ec 10          	sub    $0x10,%rsp
   1e58c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1e590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e594:	48 89 c7             	mov    %rax,%rdi
   1e597:	e8 88 08 00 00       	call   1ee24 <_ZNKSt15__new_allocatorIP9VkFence_TE8max_sizeEv>
      }
   1e59c:	c9                   	leave
   1e59d:	c3                   	ret

000000000001e59e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkFence_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e59e:	55                   	push   %rbp
   1e59f:	48 89 e5             	mov    %rsp,%rbp
   1e5a2:	48 83 ec 20          	sub    $0x20,%rsp
   1e5a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e5aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1e5ae:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e5b3:	74 40                	je     1e5f5 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP9VkFence_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1e5b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e5b9:	48 89 c7             	mov    %rax,%rdi
   1e5bc:	e8 7d 08 00 00       	call   1ee3e <_ZSt11__addressofIP9VkFence_TEPT_RS2_>
   1e5c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1e5c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e5c9:	48 89 c7             	mov    %rax,%rdi
   1e5cc:	e8 7b 08 00 00       	call   1ee4c <_ZSt10_ConstructIP9VkFence_TJEEvPT_DpOT0_>
	      ++__first;
   1e5d1:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1e5d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e5da:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1e5de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e5e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e5e6:	48 89 ce             	mov    %rcx,%rsi
   1e5e9:	48 89 c7             	mov    %rax,%rdi
   1e5ec:	e8 82 08 00 00       	call   1ee73 <_ZSt6fill_nIPP9VkFence_TmS1_ET_S3_T0_RKT1_>
   1e5f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e5f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e5f9:	c9                   	leave
   1e5fa:	c3                   	ret
   1e5fb:	90                   	nop

000000000001e5fc <_ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e5fc:	55                   	push   %rbp
   1e5fd:	48 89 e5             	mov    %rsp,%rbp
   1e600:	48 83 ec 20          	sub    $0x20,%rsp
   1e604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e608:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e60c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e614:	48 89 c7             	mov    %rax,%rdi
   1e617:	e8 9c 08 00 00       	call   1eeb8 <_ZNKSt15__new_allocatorIP9VkFence_TE11_M_max_sizeEv>
   1e61c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e620:	0f 92 c0             	setb   %al
   1e623:	0f b6 c0             	movzbl %al,%eax
   1e626:	48 85 c0             	test   %rax,%rax
   1e629:	0f 95 c0             	setne  %al
   1e62c:	84 c0                	test   %al,%al
   1e62e:	74 1a                	je     1e64a <_ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e630:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1e637:	ff ff 1f 
   1e63a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e63e:	73 05                	jae    1e645 <_ZNSt15__new_allocatorIP9VkFence_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e640:	e8 0b 5d fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e645:	e8 d6 5a fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e64a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e64e:	48 c1 e0 03          	shl    $0x3,%rax
   1e652:	48 89 c7             	mov    %rax,%rdi
   1e655:	e8 76 5e fe ff       	call   44d0 <_Znwm@plt>
   1e65a:	90                   	nop
      }
   1e65b:	c9                   	leave
   1e65c:	c3                   	ret

000000000001e65d <_ZSt12__niter_baseIPP9VkFence_TET_S3_>:
    __niter_base(_Iterator __it)
   1e65d:	55                   	push   %rbp
   1e65e:	48 89 e5             	mov    %rsp,%rbp
   1e661:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e665:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e669:	5d                   	pop    %rbp
   1e66a:	c3                   	ret

000000000001e66b <_ZSt14__relocate_a_1IP9VkFence_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1e66b:	55                   	push   %rbp
   1e66c:	48 89 e5             	mov    %rsp,%rbp
   1e66f:	48 83 ec 30          	sub    $0x30,%rsp
   1e673:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e677:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e67b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e67f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1e683:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e687:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1e68b:	48 c1 f8 03          	sar    $0x3,%rax
   1e68f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1e693:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1e698:	7e 1f                	jle    1e6b9 <_ZSt14__relocate_a_1IP9VkFence_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x4e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1e69a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e69e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e6a5:	00 
   1e6a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1e6aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e6ae:	48 89 ce             	mov    %rcx,%rsi
   1e6b1:	48 89 c7             	mov    %rax,%rdi
   1e6b4:	e8 07 62 fe ff       	call   48c0 <memmove@plt>
      return __result + __count;
   1e6b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e6bd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e6c4:	00 
   1e6c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e6c9:	48 01 d0             	add    %rdx,%rax
    }
   1e6cc:	c9                   	leave
   1e6cd:	c3                   	ret

000000000001e6ce <_ZNSt15__new_allocatorIP13VkSemaphore_TEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   1e6ce:	55                   	push   %rbp
   1e6cf:	48 89 e5             	mov    %rsp,%rbp
   1e6d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e6d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e6da:	90                   	nop
   1e6db:	5d                   	pop    %rbp
   1e6dc:	c3                   	ret

000000000001e6dd <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKP13VkSemaphore_TPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1e6dd:	55                   	push   %rbp
   1e6de:	48 89 e5             	mov    %rsp,%rbp
   1e6e1:	48 83 ec 20          	sub    $0x20,%rsp
   1e6e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e6e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e6ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1e6f1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e6f5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e6f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e6fd:	48 89 ce             	mov    %rcx,%rsi
   1e700:	48 89 c7             	mov    %rax,%rdi
   1e703:	e8 c4 07 00 00       	call   1eecc <_ZSt4copyIPKP13VkSemaphore_TPS1_ET0_T_S6_S5_>
   1e708:	c9                   	leave
   1e709:	c3                   	ret

000000000001e70a <_ZNSt15__new_allocatorIjEC1ERKS0_>:
   1e70a:	55                   	push   %rbp
   1e70b:	48 89 e5             	mov    %rsp,%rbp
   1e70e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e712:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e716:	90                   	nop
   1e717:	5d                   	pop    %rbp
   1e718:	c3                   	ret
   1e719:	90                   	nop

000000000001e71a <_ZNSt15__new_allocatorIjE10deallocateEPjm>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e71a:	55                   	push   %rbp
   1e71b:	48 89 e5             	mov    %rsp,%rbp
   1e71e:	48 83 ec 20          	sub    $0x20,%rsp
   1e722:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e726:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e72a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e72e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e732:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1e739:	00 
   1e73a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e73e:	48 89 d6             	mov    %rdx,%rsi
   1e741:	48 89 c7             	mov    %rax,%rdi
   1e744:	e8 a7 5d fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1e749:	c9                   	leave
   1e74a:	c3                   	ret

000000000001e74b <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1e74b:	55                   	push   %rbp
   1e74c:	48 89 e5             	mov    %rsp,%rbp
   1e74f:	48 83 ec 10          	sub    $0x10,%rsp
   1e753:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return __a.max_size();
   1e757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e75b:	48 89 c7             	mov    %rax,%rdi
   1e75e:	e8 b5 07 00 00       	call   1ef18 <_ZNKSt15__new_allocatorIjE8max_sizeEv>
      }
   1e763:	c9                   	leave
   1e764:	c3                   	ret
   1e765:	90                   	nop

000000000001e766 <_ZNSt15__new_allocatorIjE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e766:	55                   	push   %rbp
   1e767:	48 89 e5             	mov    %rsp,%rbp
   1e76a:	48 83 ec 20          	sub    $0x20,%rsp
   1e76e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e772:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e776:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e77a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e77e:	48 89 c7             	mov    %rax,%rdi
   1e781:	e8 ac 07 00 00       	call   1ef32 <_ZNKSt15__new_allocatorIjE11_M_max_sizeEv>
   1e786:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e78a:	0f 92 c0             	setb   %al
   1e78d:	0f b6 c0             	movzbl %al,%eax
   1e790:	48 85 c0             	test   %rax,%rax
   1e793:	0f 95 c0             	setne  %al
   1e796:	84 c0                	test   %al,%al
   1e798:	74 1a                	je     1e7b4 <_ZNSt15__new_allocatorIjE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e79a:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
   1e7a1:	ff ff 3f 
   1e7a4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e7a8:	73 05                	jae    1e7af <_ZNSt15__new_allocatorIjE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e7aa:	e8 a1 5b fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e7af:	e8 6c 59 fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e7b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e7b8:	48 c1 e0 02          	shl    $0x2,%rax
   1e7bc:	48 89 c7             	mov    %rax,%rdi
   1e7bf:	e8 0c 5d fe ff       	call   44d0 <_Znwm@plt>
   1e7c4:	90                   	nop
      }
   1e7c5:	c9                   	leave
   1e7c6:	c3                   	ret

000000000001e7c7 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKjPjEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1e7c7:	55                   	push   %rbp
   1e7c8:	48 89 e5             	mov    %rsp,%rbp
   1e7cb:	48 83 ec 20          	sub    $0x20,%rsp
   1e7cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e7d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e7d7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1e7db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e7df:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e7e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e7e7:	48 89 ce             	mov    %rcx,%rsi
   1e7ea:	48 89 c7             	mov    %rax,%rdi
   1e7ed:	e8 54 07 00 00       	call   1ef46 <_ZSt4copyIPKjPjET0_T_S4_S3_>
   1e7f2:	c9                   	leave
   1e7f3:	c3                   	ret

000000000001e7f4 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1e7f4:	55                   	push   %rbp
   1e7f5:	48 89 e5             	mov    %rsp,%rbp
   1e7f8:	53                   	push   %rbx
   1e7f9:	48 83 ec 28          	sub    $0x28,%rsp
   1e7fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e801:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e805:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1e809:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e80d:	48 89 c7             	mov    %rax,%rdi
   1e810:	e8 7c 07 00 00       	call   1ef91 <_ZSt12__miter_baseIPKPKcET_S4_>
   1e815:	48 89 c3             	mov    %rax,%rbx
   1e818:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e81c:	48 89 c7             	mov    %rax,%rdi
   1e81f:	e8 6d 07 00 00       	call   1ef91 <_ZSt12__miter_baseIPKPKcET_S4_>
   1e824:	48 89 c1             	mov    %rax,%rcx
   1e827:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e82b:	48 89 c2             	mov    %rax,%rdx
   1e82e:	48 89 de             	mov    %rbx,%rsi
   1e831:	48 89 cf             	mov    %rcx,%rdi
   1e834:	e8 66 07 00 00       	call   1ef9f <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>
    }
   1e839:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e83d:	c9                   	leave
   1e83e:	c3                   	ret
   1e83f:	90                   	nop

000000000001e840 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>:
    struct pair
   1e840:	55                   	push   %rbp
   1e841:	48 89 e5             	mov    %rsp,%rbp
   1e844:	48 83 ec 10          	sub    $0x10,%rsp
   1e848:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e84c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e850:	48 89 c7             	mov    %rax,%rdi
   1e853:	e8 28 5a fe ff       	call   4280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
   1e858:	90                   	nop
   1e859:	c9                   	leave
   1e85a:	c3                   	ret
   1e85b:	90                   	nop

000000000001e85c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE7destroyIS9_EEvPT_>:
	destroy(_Up* __p)
   1e85c:	55                   	push   %rbp
   1e85d:	48 89 e5             	mov    %rsp,%rbp
   1e860:	48 83 ec 10          	sub    $0x10,%rsp
   1e864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e868:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __p->~_Up(); }
   1e86c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e870:	48 89 c7             	mov    %rax,%rdi
   1e873:	e8 c8 ff ff ff       	call   1e840 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>
   1e878:	90                   	nop
   1e879:	c9                   	leave
   1e87a:	c3                   	ret
   1e87b:	90                   	nop

000000000001e87c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e87c:	55                   	push   %rbp
   1e87d:	48 89 e5             	mov    %rsp,%rbp
   1e880:	48 83 ec 20          	sub    $0x20,%rsp
   1e884:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e888:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e88c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e890:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e894:	48 89 d0             	mov    %rdx,%rax
   1e897:	48 c1 e0 03          	shl    $0x3,%rax
   1e89b:	48 01 d0             	add    %rdx,%rax
   1e89e:	48 c1 e0 03          	shl    $0x3,%rax
   1e8a2:	48 89 c2             	mov    %rax,%rdx
   1e8a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e8a9:	48 89 d6             	mov    %rdx,%rsi
   1e8ac:	48 89 c7             	mov    %rax,%rdi
   1e8af:	e8 3c 5c fe ff       	call   44f0 <_ZdlPvm@plt>
      }
   1e8b4:	c9                   	leave
   1e8b5:	c3                   	ret

000000000001e8b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>:
      allocate(allocator_type& __a, size_type __n)
   1e8b6:	55                   	push   %rbp
   1e8b7:	48 89 e5             	mov    %rsp,%rbp
   1e8ba:	48 83 ec 10          	sub    $0x10,%rsp
   1e8be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e8c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1e8c6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e8ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e8ce:	ba 00 00 00 00       	mov    $0x0,%edx
   1e8d3:	48 89 ce             	mov    %rcx,%rsi
   1e8d6:	48 89 c7             	mov    %rax,%rdi
   1e8d9:	e8 2c 07 00 00       	call   1f00a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>
   1e8de:	c9                   	leave
   1e8df:	c3                   	ret

000000000001e8e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1e8e0:	55                   	push   %rbp
   1e8e1:	48 89 e5             	mov    %rsp,%rbp
   1e8e4:	41 54                	push   %r12
   1e8e6:	53                   	push   %rbx
   1e8e7:	48 83 ec 30          	sub    $0x30,%rsp
   1e8eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e8ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e8f3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e8f7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1e8fb:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  __a.construct(__p, std::forward<_Args>(__args)...);
   1e8ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e903:	48 89 c7             	mov    %rax,%rdi
   1e906:	e8 a8 bd ff ff       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1e90b:	49 89 c4             	mov    %rax,%r12
   1e90e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e912:	48 89 c7             	mov    %rax,%rdi
   1e915:	e8 8b bd ff ff       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1e91a:	48 89 c3             	mov    %rax,%rbx
   1e91d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e921:	48 89 c7             	mov    %rax,%rdi
   1e924:	e8 6e bd ff ff       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1e929:	48 89 c2             	mov    %rax,%rdx
   1e92c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1e930:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e934:	4d 89 e0             	mov    %r12,%r8
   1e937:	48 89 d9             	mov    %rbx,%rcx
   1e93a:	48 89 c7             	mov    %rax,%rdi
   1e93d:	e8 5a 07 00 00       	call   1f09c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_>
	}
   1e942:	90                   	nop
   1e943:	48 83 c4 30          	add    $0x30,%rsp
   1e947:	5b                   	pop    %rbx
   1e948:	41 5c                	pop    %r12
   1e94a:	5d                   	pop    %rbp
   1e94b:	c3                   	ret

000000000001e94c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1e94c:	55                   	push   %rbp
   1e94d:	48 89 e5             	mov    %rsp,%rbp
   1e950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1e954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e958:	5d                   	pop    %rbp
   1e959:	c3                   	ret

000000000001e95a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
   1e95a:	55                   	push   %rbp
   1e95b:	48 89 e5             	mov    %rsp,%rbp
   1e95e:	48 83 ec 10          	sub    $0x10,%rsp
   1e962:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
   1e966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e96a:	48 89 c7             	mov    %rax,%rdi
   1e96d:	e8 da 07 00 00       	call   1f14c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1e972:	c9                   	leave
   1e973:	c3                   	ret

000000000001e974 <_ZNKSt15__new_allocatorIP13VkImageView_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1e974:	55                   	push   %rbp
   1e975:	48 89 e5             	mov    %rsp,%rbp
   1e978:	48 83 ec 10          	sub    $0x10,%rsp
   1e97c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1e980:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e984:	48 89 c7             	mov    %rax,%rdi
   1e987:	e8 7c 00 00 00       	call   1ea08 <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>
   1e98c:	c9                   	leave
   1e98d:	c3                   	ret

000000000001e98e <_ZSt11__addressofIP13VkImageView_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1e98e:	55                   	push   %rbp
   1e98f:	48 89 e5             	mov    %rsp,%rbp
   1e992:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1e996:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e99a:	5d                   	pop    %rbp
   1e99b:	c3                   	ret

000000000001e99c <_ZSt10_ConstructIP13VkImageView_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1e99c:	55                   	push   %rbp
   1e99d:	48 89 e5             	mov    %rsp,%rbp
   1e9a0:	48 83 ec 10          	sub    $0x10,%rsp
   1e9a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1e9a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e9ac:	48 89 c6             	mov    %rax,%rsi
   1e9af:	bf 08 00 00 00       	mov    $0x8,%edi
   1e9b4:	e8 99 7d fe ff       	call   6752 <_ZnwmPv>
   1e9b9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1e9c0:	90                   	nop
   1e9c1:	c9                   	leave
   1e9c2:	c3                   	ret

000000000001e9c3 <_ZSt6fill_nIPP13VkImageView_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1e9c3:	55                   	push   %rbp
   1e9c4:	48 89 e5             	mov    %rsp,%rbp
   1e9c7:	48 83 ec 20          	sub    $0x20,%rsp
   1e9cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e9cf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e9d3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1e9d7:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1e9db:	48 89 c7             	mov    %rax,%rdi
   1e9de:	e8 77 07 00 00       	call   1f15a <_ZSt19__iterator_categoryIPP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1e9e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e9e7:	48 89 c7             	mov    %rax,%rdi
   1e9ea:	e8 75 7d fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1e9ef:	48 89 c1             	mov    %rax,%rcx
   1e9f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e9f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e9fa:	48 89 ce             	mov    %rcx,%rsi
   1e9fd:	48 89 c7             	mov    %rax,%rdi
   1ea00:	e8 60 07 00 00       	call   1f165 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1ea05:	c9                   	leave
   1ea06:	c3                   	ret
   1ea07:	90                   	nop

000000000001ea08 <_ZNKSt15__new_allocatorIP13VkImageView_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ea08:	55                   	push   %rbp
   1ea09:	48 89 e5             	mov    %rsp,%rbp
   1ea0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ea10:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ea17:	ff ff 0f 
      }
   1ea1a:	5d                   	pop    %rbp
   1ea1b:	c3                   	ret

000000000001ea1c <_ZNKSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ea1c:	55                   	push   %rbp
   1ea1d:	48 89 e5             	mov    %rsp,%rbp
   1ea20:	48 83 ec 10          	sub    $0x10,%rsp
   1ea24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ea28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea2c:	48 89 c7             	mov    %rax,%rdi
   1ea2f:	e8 02 00 00 00       	call   1ea36 <_ZNKSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE11_M_max_sizeEv>
   1ea34:	c9                   	leave
   1ea35:	c3                   	ret

000000000001ea36 <_ZNKSt15__new_allocatorI28VkGraphicsPipelineCreateInfoE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ea36:	55                   	push   %rbp
   1ea37:	48 89 e5             	mov    %rsp,%rbp
   1ea3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ea3e:	48 b8 e3 38 8e e3 38 	movabs $0xe38e38e38e38e3,%rax
   1ea45:	8e e3 00 
      }
   1ea48:	5d                   	pop    %rbp
   1ea49:	c3                   	ret

000000000001ea4a <_ZSt4copyIPK28VkGraphicsPipelineCreateInfoPS0_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
   1ea4a:	55                   	push   %rbp
   1ea4b:	48 89 e5             	mov    %rsp,%rbp
   1ea4e:	53                   	push   %rbx
   1ea4f:	48 83 ec 28          	sub    $0x28,%rsp
   1ea53:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ea57:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ea5b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1ea5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ea63:	48 89 c7             	mov    %rax,%rdi
   1ea66:	e8 57 07 00 00       	call   1f1c2 <_ZSt12__miter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>
   1ea6b:	48 89 c3             	mov    %rax,%rbx
   1ea6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ea72:	48 89 c7             	mov    %rax,%rdi
   1ea75:	e8 48 07 00 00       	call   1f1c2 <_ZSt12__miter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>
   1ea7a:	48 89 c1             	mov    %rax,%rcx
   1ea7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ea81:	48 89 c2             	mov    %rax,%rdx
   1ea84:	48 89 de             	mov    %rbx,%rsi
   1ea87:	48 89 cf             	mov    %rcx,%rdi
   1ea8a:	e8 41 07 00 00       	call   1f1d0 <_ZSt13__copy_move_aILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>
    }
   1ea8f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ea93:	c9                   	leave
   1ea94:	c3                   	ret
   1ea95:	90                   	nop

000000000001ea96 <_ZNKSt15__new_allocatorIP12VkPipeline_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ea96:	55                   	push   %rbp
   1ea97:	48 89 e5             	mov    %rsp,%rbp
   1ea9a:	48 83 ec 10          	sub    $0x10,%rsp
   1ea9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1eaa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eaa6:	48 89 c7             	mov    %rax,%rdi
   1eaa9:	e8 8c 07 00 00       	call   1f23a <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>
   1eaae:	c9                   	leave
   1eaaf:	c3                   	ret

000000000001eab0 <_ZNSt16allocator_traitsISaIP12VkPipeline_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1eab0:	55                   	push   %rbp
   1eab1:	48 89 e5             	mov    %rsp,%rbp
   1eab4:	48 83 ec 10          	sub    $0x10,%rsp
   1eab8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eabc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
   1eac0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1eac4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eac8:	ba 00 00 00 00       	mov    $0x0,%edx
   1eacd:	48 89 ce             	mov    %rcx,%rsi
   1ead0:	48 89 c7             	mov    %rax,%rdi
   1ead3:	e8 76 07 00 00       	call   1f24e <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv>
   1ead8:	c9                   	leave
   1ead9:	c3                   	ret

000000000001eada <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1eada:	55                   	push   %rbp
   1eadb:	48 89 e5             	mov    %rsp,%rbp
   1eade:	48 83 ec 20          	sub    $0x20,%rsp
   1eae2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1eae6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1eaea:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1eaef:	74 40                	je     1eb31 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP12VkPipeline_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1eaf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eaf5:	48 89 c7             	mov    %rax,%rdi
   1eaf8:	e8 b2 07 00 00       	call   1f2af <_ZSt11__addressofIP12VkPipeline_TEPT_RS2_>
   1eafd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1eb01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb05:	48 89 c7             	mov    %rax,%rdi
   1eb08:	e8 b0 07 00 00       	call   1f2bd <_ZSt10_ConstructIP12VkPipeline_TJEEvPT_DpOT0_>
	      ++__first;
   1eb0d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1eb12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1eb16:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1eb1a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1eb1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eb22:	48 89 ce             	mov    %rcx,%rsi
   1eb25:	48 89 c7             	mov    %rax,%rdi
   1eb28:	e8 b7 07 00 00       	call   1f2e4 <_ZSt6fill_nIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_>
   1eb2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1eb31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1eb35:	c9                   	leave
   1eb36:	c3                   	ret
   1eb37:	90                   	nop

000000000001eb38 <_ZNKSt15__new_allocatorIP15VkFramebuffer_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1eb38:	55                   	push   %rbp
   1eb39:	48 89 e5             	mov    %rsp,%rbp
   1eb3c:	48 83 ec 10          	sub    $0x10,%rsp
   1eb40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1eb44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb48:	48 89 c7             	mov    %rax,%rdi
   1eb4b:	e8 7c 00 00 00       	call   1ebcc <_ZNKSt15__new_allocatorIP15VkFramebuffer_TE11_M_max_sizeEv>
   1eb50:	c9                   	leave
   1eb51:	c3                   	ret

000000000001eb52 <_ZSt11__addressofIP15VkFramebuffer_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1eb52:	55                   	push   %rbp
   1eb53:	48 89 e5             	mov    %rsp,%rbp
   1eb56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1eb5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb5e:	5d                   	pop    %rbp
   1eb5f:	c3                   	ret

000000000001eb60 <_ZSt10_ConstructIP15VkFramebuffer_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1eb60:	55                   	push   %rbp
   1eb61:	48 89 e5             	mov    %rsp,%rbp
   1eb64:	48 83 ec 10          	sub    $0x10,%rsp
   1eb68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1eb6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb70:	48 89 c6             	mov    %rax,%rsi
   1eb73:	bf 08 00 00 00       	mov    $0x8,%edi
   1eb78:	e8 d5 7b fe ff       	call   6752 <_ZnwmPv>
   1eb7d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1eb84:	90                   	nop
   1eb85:	c9                   	leave
   1eb86:	c3                   	ret

000000000001eb87 <_ZSt6fill_nIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1eb87:	55                   	push   %rbp
   1eb88:	48 89 e5             	mov    %rsp,%rbp
   1eb8b:	48 83 ec 20          	sub    $0x20,%rsp
   1eb8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eb93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1eb97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1eb9b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1eb9f:	48 89 c7             	mov    %rax,%rdi
   1eba2:	e8 81 07 00 00       	call   1f328 <_ZSt19__iterator_categoryIPP15VkFramebuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1eba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ebab:	48 89 c7             	mov    %rax,%rdi
   1ebae:	e8 b1 7b fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1ebb3:	48 89 c1             	mov    %rax,%rcx
   1ebb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ebba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ebbe:	48 89 ce             	mov    %rcx,%rsi
   1ebc1:	48 89 c7             	mov    %rax,%rdi
   1ebc4:	e8 6a 07 00 00       	call   1f333 <_ZSt10__fill_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1ebc9:	c9                   	leave
   1ebca:	c3                   	ret
   1ebcb:	90                   	nop

000000000001ebcc <_ZNKSt15__new_allocatorIP15VkFramebuffer_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ebcc:	55                   	push   %rbp
   1ebcd:	48 89 e5             	mov    %rsp,%rbp
   1ebd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ebd4:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ebdb:	ff ff 0f 
      }
   1ebde:	5d                   	pop    %rbp
   1ebdf:	c3                   	ret

000000000001ebe0 <_ZSt4copyIPKP13VkImageView_TPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1ebe0:	55                   	push   %rbp
   1ebe1:	48 89 e5             	mov    %rsp,%rbp
   1ebe4:	53                   	push   %rbx
   1ebe5:	48 83 ec 28          	sub    $0x28,%rsp
   1ebe9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ebed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ebf1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1ebf5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ebf9:	48 89 c7             	mov    %rax,%rdi
   1ebfc:	e8 8f 07 00 00       	call   1f390 <_ZSt12__miter_baseIPKP13VkImageView_TET_S4_>
   1ec01:	48 89 c3             	mov    %rax,%rbx
   1ec04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ec08:	48 89 c7             	mov    %rax,%rdi
   1ec0b:	e8 80 07 00 00       	call   1f390 <_ZSt12__miter_baseIPKP13VkImageView_TET_S4_>
   1ec10:	48 89 c1             	mov    %rax,%rcx
   1ec13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ec17:	48 89 c2             	mov    %rax,%rdx
   1ec1a:	48 89 de             	mov    %rbx,%rsi
   1ec1d:	48 89 cf             	mov    %rcx,%rdi
   1ec20:	e8 79 07 00 00       	call   1f39e <_ZSt13__copy_move_aILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>
    }
   1ec25:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ec29:	c9                   	leave
   1ec2a:	c3                   	ret
   1ec2b:	90                   	nop

000000000001ec2c <_ZNKSt15__new_allocatorIP10VkBuffer_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ec2c:	55                   	push   %rbp
   1ec2d:	48 89 e5             	mov    %rsp,%rbp
   1ec30:	48 83 ec 10          	sub    $0x10,%rsp
   1ec34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ec38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec3c:	48 89 c7             	mov    %rax,%rdi
   1ec3f:	e8 7c 00 00 00       	call   1ecc0 <_ZNKSt15__new_allocatorIP10VkBuffer_TE11_M_max_sizeEv>
   1ec44:	c9                   	leave
   1ec45:	c3                   	ret

000000000001ec46 <_ZSt11__addressofIP10VkBuffer_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1ec46:	55                   	push   %rbp
   1ec47:	48 89 e5             	mov    %rsp,%rbp
   1ec4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1ec4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec52:	5d                   	pop    %rbp
   1ec53:	c3                   	ret

000000000001ec54 <_ZSt10_ConstructIP10VkBuffer_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ec54:	55                   	push   %rbp
   1ec55:	48 89 e5             	mov    %rsp,%rbp
   1ec58:	48 83 ec 10          	sub    $0x10,%rsp
   1ec5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ec60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec64:	48 89 c6             	mov    %rax,%rsi
   1ec67:	bf 08 00 00 00       	mov    $0x8,%edi
   1ec6c:	e8 e1 7a fe ff       	call   6752 <_ZnwmPv>
   1ec71:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1ec78:	90                   	nop
   1ec79:	c9                   	leave
   1ec7a:	c3                   	ret

000000000001ec7b <_ZSt6fill_nIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1ec7b:	55                   	push   %rbp
   1ec7c:	48 89 e5             	mov    %rsp,%rbp
   1ec7f:	48 83 ec 20          	sub    $0x20,%rsp
   1ec83:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ec87:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ec8b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1ec8f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ec93:	48 89 c7             	mov    %rax,%rdi
   1ec96:	e8 6d 07 00 00       	call   1f408 <_ZSt19__iterator_categoryIPP10VkBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1ec9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ec9f:	48 89 c7             	mov    %rax,%rdi
   1eca2:	e8 bd 7a fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1eca7:	48 89 c1             	mov    %rax,%rcx
   1ecaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ecae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ecb2:	48 89 ce             	mov    %rcx,%rsi
   1ecb5:	48 89 c7             	mov    %rax,%rdi
   1ecb8:	e8 56 07 00 00       	call   1f413 <_ZSt10__fill_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1ecbd:	c9                   	leave
   1ecbe:	c3                   	ret
   1ecbf:	90                   	nop

000000000001ecc0 <_ZNKSt15__new_allocatorIP10VkBuffer_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ecc0:	55                   	push   %rbp
   1ecc1:	48 89 e5             	mov    %rsp,%rbp
   1ecc4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ecc8:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1eccf:	ff ff 0f 
      }
   1ecd2:	5d                   	pop    %rbp
   1ecd3:	c3                   	ret

000000000001ecd4 <_ZNKSt15__new_allocatorIP16VkDeviceMemory_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ecd4:	55                   	push   %rbp
   1ecd5:	48 89 e5             	mov    %rsp,%rbp
   1ecd8:	48 83 ec 10          	sub    $0x10,%rsp
   1ecdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ece0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ece4:	48 89 c7             	mov    %rax,%rdi
   1ece7:	e8 7c 00 00 00       	call   1ed68 <_ZNKSt15__new_allocatorIP16VkDeviceMemory_TE11_M_max_sizeEv>
   1ecec:	c9                   	leave
   1eced:	c3                   	ret

000000000001ecee <_ZSt11__addressofIP16VkDeviceMemory_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1ecee:	55                   	push   %rbp
   1ecef:	48 89 e5             	mov    %rsp,%rbp
   1ecf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1ecf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ecfa:	5d                   	pop    %rbp
   1ecfb:	c3                   	ret

000000000001ecfc <_ZSt10_ConstructIP16VkDeviceMemory_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ecfc:	55                   	push   %rbp
   1ecfd:	48 89 e5             	mov    %rsp,%rbp
   1ed00:	48 83 ec 10          	sub    $0x10,%rsp
   1ed04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ed08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ed0c:	48 89 c6             	mov    %rax,%rsi
   1ed0f:	bf 08 00 00 00       	mov    $0x8,%edi
   1ed14:	e8 39 7a fe ff       	call   6752 <_ZnwmPv>
   1ed19:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1ed20:	90                   	nop
   1ed21:	c9                   	leave
   1ed22:	c3                   	ret

000000000001ed23 <_ZSt6fill_nIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1ed23:	55                   	push   %rbp
   1ed24:	48 89 e5             	mov    %rsp,%rbp
   1ed27:	48 83 ec 20          	sub    $0x20,%rsp
   1ed2b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ed2f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ed33:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1ed37:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ed3b:	48 89 c7             	mov    %rax,%rdi
   1ed3e:	e8 2d 07 00 00       	call   1f470 <_ZSt19__iterator_categoryIPP16VkDeviceMemory_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1ed43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ed47:	48 89 c7             	mov    %rax,%rdi
   1ed4a:	e8 15 7a fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1ed4f:	48 89 c1             	mov    %rax,%rcx
   1ed52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ed56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ed5a:	48 89 ce             	mov    %rcx,%rsi
   1ed5d:	48 89 c7             	mov    %rax,%rdi
   1ed60:	e8 16 07 00 00       	call   1f47b <_ZSt10__fill_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1ed65:	c9                   	leave
   1ed66:	c3                   	ret
   1ed67:	90                   	nop

000000000001ed68 <_ZNKSt15__new_allocatorIP16VkDeviceMemory_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ed68:	55                   	push   %rbp
   1ed69:	48 89 e5             	mov    %rsp,%rbp
   1ed6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ed70:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ed77:	ff ff 0f 
      }
   1ed7a:	5d                   	pop    %rbp
   1ed7b:	c3                   	ret

000000000001ed7c <_ZNKSt15__new_allocatorIP13VkSemaphore_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ed7c:	55                   	push   %rbp
   1ed7d:	48 89 e5             	mov    %rsp,%rbp
   1ed80:	48 83 ec 10          	sub    $0x10,%rsp
   1ed84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ed88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ed8c:	48 89 c7             	mov    %rax,%rdi
   1ed8f:	e8 7c 00 00 00       	call   1ee10 <_ZNKSt15__new_allocatorIP13VkSemaphore_TE11_M_max_sizeEv>
   1ed94:	c9                   	leave
   1ed95:	c3                   	ret

000000000001ed96 <_ZSt11__addressofIP13VkSemaphore_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1ed96:	55                   	push   %rbp
   1ed97:	48 89 e5             	mov    %rsp,%rbp
   1ed9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1ed9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eda2:	5d                   	pop    %rbp
   1eda3:	c3                   	ret

000000000001eda4 <_ZSt10_ConstructIP13VkSemaphore_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1eda4:	55                   	push   %rbp
   1eda5:	48 89 e5             	mov    %rsp,%rbp
   1eda8:	48 83 ec 10          	sub    $0x10,%rsp
   1edac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1edb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1edb4:	48 89 c6             	mov    %rax,%rsi
   1edb7:	bf 08 00 00 00       	mov    $0x8,%edi
   1edbc:	e8 91 79 fe ff       	call   6752 <_ZnwmPv>
   1edc1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1edc8:	90                   	nop
   1edc9:	c9                   	leave
   1edca:	c3                   	ret

000000000001edcb <_ZSt6fill_nIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1edcb:	55                   	push   %rbp
   1edcc:	48 89 e5             	mov    %rsp,%rbp
   1edcf:	48 83 ec 20          	sub    $0x20,%rsp
   1edd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1edd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1eddb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1eddf:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ede3:	48 89 c7             	mov    %rax,%rdi
   1ede6:	e8 ed 06 00 00       	call   1f4d8 <_ZSt19__iterator_categoryIPP13VkSemaphore_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1edeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1edef:	48 89 c7             	mov    %rax,%rdi
   1edf2:	e8 6d 79 fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1edf7:	48 89 c1             	mov    %rax,%rcx
   1edfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1edfe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ee02:	48 89 ce             	mov    %rcx,%rsi
   1ee05:	48 89 c7             	mov    %rax,%rdi
   1ee08:	e8 d6 06 00 00       	call   1f4e3 <_ZSt10__fill_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1ee0d:	c9                   	leave
   1ee0e:	c3                   	ret
   1ee0f:	90                   	nop

000000000001ee10 <_ZNKSt15__new_allocatorIP13VkSemaphore_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ee10:	55                   	push   %rbp
   1ee11:	48 89 e5             	mov    %rsp,%rbp
   1ee14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ee18:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1ee1f:	ff ff 0f 
      }
   1ee22:	5d                   	pop    %rbp
   1ee23:	c3                   	ret

000000000001ee24 <_ZNKSt15__new_allocatorIP9VkFence_TE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ee24:	55                   	push   %rbp
   1ee25:	48 89 e5             	mov    %rsp,%rbp
   1ee28:	48 83 ec 10          	sub    $0x10,%rsp
   1ee2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ee30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ee34:	48 89 c7             	mov    %rax,%rdi
   1ee37:	e8 7c 00 00 00       	call   1eeb8 <_ZNKSt15__new_allocatorIP9VkFence_TE11_M_max_sizeEv>
   1ee3c:	c9                   	leave
   1ee3d:	c3                   	ret

000000000001ee3e <_ZSt11__addressofIP9VkFence_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1ee3e:	55                   	push   %rbp
   1ee3f:	48 89 e5             	mov    %rsp,%rbp
   1ee42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1ee46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ee4a:	5d                   	pop    %rbp
   1ee4b:	c3                   	ret

000000000001ee4c <_ZSt10_ConstructIP9VkFence_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ee4c:	55                   	push   %rbp
   1ee4d:	48 89 e5             	mov    %rsp,%rbp
   1ee50:	48 83 ec 10          	sub    $0x10,%rsp
   1ee54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ee58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ee5c:	48 89 c6             	mov    %rax,%rsi
   1ee5f:	bf 08 00 00 00       	mov    $0x8,%edi
   1ee64:	e8 e9 78 fe ff       	call   6752 <_ZnwmPv>
   1ee69:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1ee70:	90                   	nop
   1ee71:	c9                   	leave
   1ee72:	c3                   	ret

000000000001ee73 <_ZSt6fill_nIPP9VkFence_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1ee73:	55                   	push   %rbp
   1ee74:	48 89 e5             	mov    %rsp,%rbp
   1ee77:	48 83 ec 20          	sub    $0x20,%rsp
   1ee7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ee7f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ee83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1ee87:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1ee8b:	48 89 c7             	mov    %rax,%rdi
   1ee8e:	e8 ad 06 00 00       	call   1f540 <_ZSt19__iterator_categoryIPP9VkFence_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1ee93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ee97:	48 89 c7             	mov    %rax,%rdi
   1ee9a:	e8 c5 78 fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1ee9f:	48 89 c1             	mov    %rax,%rcx
   1eea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eea6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1eeaa:	48 89 ce             	mov    %rcx,%rsi
   1eead:	48 89 c7             	mov    %rax,%rdi
   1eeb0:	e8 96 06 00 00       	call   1f54b <_ZSt10__fill_n_aIPP9VkFence_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1eeb5:	c9                   	leave
   1eeb6:	c3                   	ret
   1eeb7:	90                   	nop

000000000001eeb8 <_ZNKSt15__new_allocatorIP9VkFence_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1eeb8:	55                   	push   %rbp
   1eeb9:	48 89 e5             	mov    %rsp,%rbp
   1eebc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1eec0:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1eec7:	ff ff 0f 
      }
   1eeca:	5d                   	pop    %rbp
   1eecb:	c3                   	ret

000000000001eecc <_ZSt4copyIPKP13VkSemaphore_TPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1eecc:	55                   	push   %rbp
   1eecd:	48 89 e5             	mov    %rsp,%rbp
   1eed0:	53                   	push   %rbx
   1eed1:	48 83 ec 28          	sub    $0x28,%rsp
   1eed5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1eed9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1eedd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1eee1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1eee5:	48 89 c7             	mov    %rax,%rdi
   1eee8:	e8 bb 06 00 00       	call   1f5a8 <_ZSt12__miter_baseIPKP13VkSemaphore_TET_S4_>
   1eeed:	48 89 c3             	mov    %rax,%rbx
   1eef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eef4:	48 89 c7             	mov    %rax,%rdi
   1eef7:	e8 ac 06 00 00       	call   1f5a8 <_ZSt12__miter_baseIPKP13VkSemaphore_TET_S4_>
   1eefc:	48 89 c1             	mov    %rax,%rcx
   1eeff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ef03:	48 89 c2             	mov    %rax,%rdx
   1ef06:	48 89 de             	mov    %rbx,%rsi
   1ef09:	48 89 cf             	mov    %rcx,%rdi
   1ef0c:	e8 a5 06 00 00       	call   1f5b6 <_ZSt13__copy_move_aILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>
    }
   1ef11:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ef15:	c9                   	leave
   1ef16:	c3                   	ret
   1ef17:	90                   	nop

000000000001ef18 <_ZNKSt15__new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
   1ef18:	55                   	push   %rbp
   1ef19:	48 89 e5             	mov    %rsp,%rbp
   1ef1c:	48 83 ec 10          	sub    $0x10,%rsp
   1ef20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_max_size(); }
   1ef24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef28:	48 89 c7             	mov    %rax,%rdi
   1ef2b:	e8 02 00 00 00       	call   1ef32 <_ZNKSt15__new_allocatorIjE11_M_max_sizeEv>
   1ef30:	c9                   	leave
   1ef31:	c3                   	ret

000000000001ef32 <_ZNKSt15__new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ef32:	55                   	push   %rbp
   1ef33:	48 89 e5             	mov    %rsp,%rbp
   1ef36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ef3a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1ef41:	ff ff 1f 
      }
   1ef44:	5d                   	pop    %rbp
   1ef45:	c3                   	ret

000000000001ef46 <_ZSt4copyIPKjPjET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
   1ef46:	55                   	push   %rbp
   1ef47:	48 89 e5             	mov    %rsp,%rbp
   1ef4a:	53                   	push   %rbx
   1ef4b:	48 83 ec 28          	sub    $0x28,%rsp
   1ef4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ef53:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ef57:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1ef5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ef5f:	48 89 c7             	mov    %rax,%rdi
   1ef62:	e8 b9 06 00 00       	call   1f620 <_ZSt12__miter_baseIPKjET_S2_>
   1ef67:	48 89 c3             	mov    %rax,%rbx
   1ef6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ef6e:	48 89 c7             	mov    %rax,%rdi
   1ef71:	e8 aa 06 00 00       	call   1f620 <_ZSt12__miter_baseIPKjET_S2_>
   1ef76:	48 89 c1             	mov    %rax,%rcx
   1ef79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ef7d:	48 89 c2             	mov    %rax,%rdx
   1ef80:	48 89 de             	mov    %rbx,%rsi
   1ef83:	48 89 cf             	mov    %rcx,%rdi
   1ef86:	e8 a3 06 00 00       	call   1f62e <_ZSt13__copy_move_aILb0EPKjPjET1_T0_S4_S3_>
    }
   1ef8b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ef8f:	c9                   	leave
   1ef90:	c3                   	ret

000000000001ef91 <_ZSt12__miter_baseIPKPKcET_S4_>:
    __miter_base(_Iterator __it)
   1ef91:	55                   	push   %rbp
   1ef92:	48 89 e5             	mov    %rsp,%rbp
   1ef95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1ef99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef9d:	5d                   	pop    %rbp
   1ef9e:	c3                   	ret

000000000001ef9f <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1ef9f:	55                   	push   %rbp
   1efa0:	48 89 e5             	mov    %rsp,%rbp
   1efa3:	41 54                	push   %r12
   1efa5:	53                   	push   %rbx
   1efa6:	48 83 ec 20          	sub    $0x20,%rsp
   1efaa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1efae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1efb2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1efb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1efba:	48 89 c7             	mov    %rax,%rdi
   1efbd:	e8 08 ea ff ff       	call   1d9ca <_ZSt12__niter_baseIPPKcET_S3_>
   1efc2:	49 89 c4             	mov    %rax,%r12
   1efc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1efc9:	48 89 c7             	mov    %rax,%rdi
   1efcc:	e8 c7 06 00 00       	call   1f698 <_ZSt12__niter_baseIPKPKcET_S4_>
   1efd1:	48 89 c3             	mov    %rax,%rbx
   1efd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1efd8:	48 89 c7             	mov    %rax,%rdi
   1efdb:	e8 b8 06 00 00       	call   1f698 <_ZSt12__niter_baseIPKPKcET_S4_>
   1efe0:	4c 89 e2             	mov    %r12,%rdx
   1efe3:	48 89 de             	mov    %rbx,%rsi
   1efe6:	48 89 c7             	mov    %rax,%rdi
   1efe9:	e8 b8 06 00 00       	call   1f6a6 <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1efee:	48 89 c2             	mov    %rax,%rdx
   1eff1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1eff5:	48 89 d6             	mov    %rdx,%rsi
   1eff8:	48 89 c7             	mov    %rax,%rdi
   1effb:	e8 d3 06 00 00       	call   1f6d3 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>
    }
   1f000:	48 83 c4 20          	add    $0x20,%rsp
   1f004:	5b                   	pop    %rbx
   1f005:	41 5c                	pop    %r12
   1f007:	5d                   	pop    %rbp
   1f008:	c3                   	ret
   1f009:	90                   	nop

000000000001f00a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1f00a:	55                   	push   %rbp
   1f00b:	48 89 e5             	mov    %rsp,%rbp
   1f00e:	48 83 ec 20          	sub    $0x20,%rsp
   1f012:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f016:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f01a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1f01e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f022:	48 89 c7             	mov    %rax,%rdi
   1f025:	e8 bc 06 00 00       	call   1f6e6 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>
   1f02a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f02e:	0f 92 c0             	setb   %al
   1f031:	0f b6 c0             	movzbl %al,%eax
   1f034:	48 85 c0             	test   %rax,%rax
   1f037:	0f 95 c0             	setne  %al
   1f03a:	84 c0                	test   %al,%al
   1f03c:	74 1a                	je     1f058 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1f03e:	48 b8 8e e3 38 8e e3 	movabs $0x38e38e38e38e38e,%rax
   1f045:	38 8e 03 
   1f048:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f04c:	73 05                	jae    1f053 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1f04e:	e8 fd 52 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1f053:	e8 c8 50 fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f058:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f05c:	48 89 d0             	mov    %rdx,%rax
   1f05f:	48 c1 e0 03          	shl    $0x3,%rax
   1f063:	48 01 d0             	add    %rdx,%rax
   1f066:	48 c1 e0 03          	shl    $0x3,%rax
   1f06a:	48 89 c7             	mov    %rax,%rdi
   1f06d:	e8 5e 54 fe ff       	call   44d0 <_Znwm@plt>
   1f072:	90                   	nop
      }
   1f073:	c9                   	leave
   1f074:	c3                   	ret
   1f075:	90                   	nop

000000000001f076 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      constexpr tuple(tuple&&) = default;
   1f076:	55                   	push   %rbp
   1f077:	48 89 e5             	mov    %rsp,%rbp
   1f07a:	48 83 ec 10          	sub    $0x10,%rsp
   1f07e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f082:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f08a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f08e:	48 89 d6             	mov    %rdx,%rsi
   1f091:	48 89 c7             	mov    %rax,%rdi
   1f094:	e8 61 06 00 00       	call   1f6fa <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1f099:	90                   	nop
   1f09a:	c9                   	leave
   1f09b:	c3                   	ret

000000000001f09c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
   1f09c:	55                   	push   %rbp
   1f09d:	48 89 e5             	mov    %rsp,%rbp
   1f0a0:	41 56                	push   %r14
   1f0a2:	41 55                	push   %r13
   1f0a4:	41 54                	push   %r12
   1f0a6:	53                   	push   %rbx
   1f0a7:	48 83 ec 40          	sub    $0x40,%rsp
   1f0ab:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1f0af:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1f0b3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1f0b7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
   1f0bb:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f0bf:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
   1f0c3:	48 89 de             	mov    %rbx,%rsi
   1f0c6:	bf 28 00 00 00       	mov    $0x28,%edi
   1f0cb:	e8 82 76 fe ff       	call   6752 <_ZnwmPv>
   1f0d0:	49 89 c4             	mov    %rax,%r12
   1f0d3:	41 be 01 00 00 00    	mov    $0x1,%r14d
   1f0d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f0dd:	48 89 c7             	mov    %rax,%rdi
   1f0e0:	e8 ce b5 ff ff       	call   1a6b3 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1f0e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1f0e9:	48 89 c7             	mov    %rax,%rdi
   1f0ec:	e8 b4 b5 ff ff       	call   1a6a5 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1f0f1:	48 89 c2             	mov    %rax,%rdx
   1f0f4:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f0f8:	48 89 d6             	mov    %rdx,%rsi
   1f0fb:	48 89 c7             	mov    %rax,%rdi
   1f0fe:	e8 73 ff ff ff       	call   1f076 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1f103:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f107:	48 89 c7             	mov    %rax,%rdi
   1f10a:	e8 88 b5 ff ff       	call   1a697 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1f10f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f113:	48 89 c6             	mov    %rax,%rsi
   1f116:	4c 89 e7             	mov    %r12,%rdi
   1f119:	e8 fa 05 00 00       	call   1f718 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
   1f11e:	eb 1e                	jmp    1f13e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_+0xa2>
   1f120:	49 89 c5             	mov    %rax,%r13
   1f123:	45 84 f6             	test   %r14b,%r14b
   1f126:	74 0b                	je     1f133 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESG_IJEEEEEvPT_DpOT0_+0x97>
   1f128:	48 89 de             	mov    %rbx,%rsi
   1f12b:	4c 89 e7             	mov    %r12,%rdi
   1f12e:	e8 f6 4b ff ff       	call   13d29 <_ZdlPvS_>
   1f133:	4c 89 e8             	mov    %r13,%rax
   1f136:	48 89 c7             	mov    %rax,%rdi
   1f139:	e8 32 58 fe ff       	call   4970 <_Unwind_Resume@plt>
   1f13e:	48 83 c4 40          	add    $0x40,%rsp
   1f142:	5b                   	pop    %rbx
   1f143:	41 5c                	pop    %r12
   1f145:	41 5d                	pop    %r13
   1f147:	41 5e                	pop    %r14
   1f149:	5d                   	pop    %rbp
   1f14a:	c3                   	ret
   1f14b:	90                   	nop

000000000001f14c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() const noexcept
   1f14c:	55                   	push   %rbp
   1f14d:	48 89 e5             	mov    %rsp,%rbp
   1f150:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
   1f154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f158:	5d                   	pop    %rbp
   1f159:	c3                   	ret

000000000001f15a <_ZSt19__iterator_categoryIPP13VkImageView_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f15a:	55                   	push   %rbp
   1f15b:	48 89 e5             	mov    %rsp,%rbp
   1f15e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f162:	90                   	nop
   1f163:	5d                   	pop    %rbp
   1f164:	c3                   	ret

000000000001f165 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f165:	55                   	push   %rbp
   1f166:	48 89 e5             	mov    %rsp,%rbp
   1f169:	48 83 ec 20          	sub    $0x20,%rsp
   1f16d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f171:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f175:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f179:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f17e:	75 06                	jne    1f186 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f184:	eb 3a                	jmp    1f1c0 <_ZSt10__fill_n_aIPP13VkImageView_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f18a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f191:	00 
   1f192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f196:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f19a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f19e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1a2:	48 89 ce             	mov    %rcx,%rsi
   1f1a5:	48 89 c7             	mov    %rax,%rdi
   1f1a8:	e8 95 05 00 00       	call   1f742 <_ZSt8__fill_aIPP13VkImageView_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f1b1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f1b8:	00 
   1f1b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1bd:	48 01 d0             	add    %rdx,%rax
    }
   1f1c0:	c9                   	leave
   1f1c1:	c3                   	ret

000000000001f1c2 <_ZSt12__miter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>:
    __miter_base(_Iterator __it)
   1f1c2:	55                   	push   %rbp
   1f1c3:	48 89 e5             	mov    %rsp,%rbp
   1f1c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f1ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1ce:	5d                   	pop    %rbp
   1f1cf:	c3                   	ret

000000000001f1d0 <_ZSt13__copy_move_aILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1f1d0:	55                   	push   %rbp
   1f1d1:	48 89 e5             	mov    %rsp,%rbp
   1f1d4:	41 54                	push   %r12
   1f1d6:	53                   	push   %rbx
   1f1d7:	48 83 ec 20          	sub    $0x20,%rsp
   1f1db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f1df:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f1e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1f1e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f1eb:	48 89 c7             	mov    %rax,%rdi
   1f1ee:	e8 8b 05 00 00       	call   1f77e <_ZSt12__niter_baseIP28VkGraphicsPipelineCreateInfoET_S2_>
   1f1f3:	49 89 c4             	mov    %rax,%r12
   1f1f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f1fa:	48 89 c7             	mov    %rax,%rdi
   1f1fd:	e8 6e 05 00 00       	call   1f770 <_ZSt12__niter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>
   1f202:	48 89 c3             	mov    %rax,%rbx
   1f205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f209:	48 89 c7             	mov    %rax,%rdi
   1f20c:	e8 5f 05 00 00       	call   1f770 <_ZSt12__niter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>
   1f211:	4c 89 e2             	mov    %r12,%rdx
   1f214:	48 89 de             	mov    %rbx,%rsi
   1f217:	48 89 c7             	mov    %rax,%rdi
   1f21a:	e8 6d 05 00 00       	call   1f78c <_ZSt14__copy_move_a1ILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>
   1f21f:	48 89 c2             	mov    %rax,%rdx
   1f222:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f226:	48 89 d6             	mov    %rdx,%rsi
   1f229:	48 89 c7             	mov    %rax,%rdi
   1f22c:	e8 88 05 00 00       	call   1f7b9 <_ZSt12__niter_wrapIP28VkGraphicsPipelineCreateInfoET_RKS2_S2_>
    }
   1f231:	48 83 c4 20          	add    $0x20,%rsp
   1f235:	5b                   	pop    %rbx
   1f236:	41 5c                	pop    %r12
   1f238:	5d                   	pop    %rbp
   1f239:	c3                   	ret

000000000001f23a <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f23a:	55                   	push   %rbp
   1f23b:	48 89 e5             	mov    %rsp,%rbp
   1f23e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f242:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1f249:	ff ff 0f 
      }
   1f24c:	5d                   	pop    %rbp
   1f24d:	c3                   	ret

000000000001f24e <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1f24e:	55                   	push   %rbp
   1f24f:	48 89 e5             	mov    %rsp,%rbp
   1f252:	48 83 ec 20          	sub    $0x20,%rsp
   1f256:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f25a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f25e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1f262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f266:	48 89 c7             	mov    %rax,%rdi
   1f269:	e8 cc ff ff ff       	call   1f23a <_ZNKSt15__new_allocatorIP12VkPipeline_TE11_M_max_sizeEv>
   1f26e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f272:	0f 92 c0             	setb   %al
   1f275:	0f b6 c0             	movzbl %al,%eax
   1f278:	48 85 c0             	test   %rax,%rax
   1f27b:	0f 95 c0             	setne  %al
   1f27e:	84 c0                	test   %al,%al
   1f280:	74 1a                	je     1f29c <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1f282:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1f289:	ff ff 1f 
   1f28c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f290:	73 05                	jae    1f297 <_ZNSt15__new_allocatorIP12VkPipeline_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1f292:	e8 b9 50 fe ff       	call   4350 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1f297:	e8 84 4e fe ff       	call   4120 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f29c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f2a0:	48 c1 e0 03          	shl    $0x3,%rax
   1f2a4:	48 89 c7             	mov    %rax,%rdi
   1f2a7:	e8 24 52 fe ff       	call   44d0 <_Znwm@plt>
   1f2ac:	90                   	nop
      }
   1f2ad:	c9                   	leave
   1f2ae:	c3                   	ret

000000000001f2af <_ZSt11__addressofIP12VkPipeline_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1f2af:	55                   	push   %rbp
   1f2b0:	48 89 e5             	mov    %rsp,%rbp
   1f2b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1f2b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f2bb:	5d                   	pop    %rbp
   1f2bc:	c3                   	ret

000000000001f2bd <_ZSt10_ConstructIP12VkPipeline_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1f2bd:	55                   	push   %rbp
   1f2be:	48 89 e5             	mov    %rsp,%rbp
   1f2c1:	48 83 ec 10          	sub    $0x10,%rsp
   1f2c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1f2c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f2cd:	48 89 c6             	mov    %rax,%rsi
   1f2d0:	bf 08 00 00 00       	mov    $0x8,%edi
   1f2d5:	e8 78 74 fe ff       	call   6752 <_ZnwmPv>
   1f2da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1f2e1:	90                   	nop
   1f2e2:	c9                   	leave
   1f2e3:	c3                   	ret

000000000001f2e4 <_ZSt6fill_nIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1f2e4:	55                   	push   %rbp
   1f2e5:	48 89 e5             	mov    %rsp,%rbp
   1f2e8:	48 83 ec 20          	sub    $0x20,%rsp
   1f2ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f2f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f2f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1f2f8:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f2fc:	48 89 c7             	mov    %rax,%rdi
   1f2ff:	e8 c7 04 00 00       	call   1f7cb <_ZSt19__iterator_categoryIPP12VkPipeline_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1f304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f308:	48 89 c7             	mov    %rax,%rdi
   1f30b:	e8 54 74 fe ff       	call   6764 <_ZSt17__size_to_integerm>
   1f310:	48 89 c1             	mov    %rax,%rcx
   1f313:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f317:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f31b:	48 89 ce             	mov    %rcx,%rsi
   1f31e:	48 89 c7             	mov    %rax,%rdi
   1f321:	e8 b0 04 00 00       	call   1f7d6 <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1f326:	c9                   	leave
   1f327:	c3                   	ret

000000000001f328 <_ZSt19__iterator_categoryIPP15VkFramebuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f328:	55                   	push   %rbp
   1f329:	48 89 e5             	mov    %rsp,%rbp
   1f32c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f330:	90                   	nop
   1f331:	5d                   	pop    %rbp
   1f332:	c3                   	ret

000000000001f333 <_ZSt10__fill_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f333:	55                   	push   %rbp
   1f334:	48 89 e5             	mov    %rsp,%rbp
   1f337:	48 83 ec 20          	sub    $0x20,%rsp
   1f33b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f33f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f343:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f347:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f34c:	75 06                	jne    1f354 <_ZSt10__fill_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f34e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f352:	eb 3a                	jmp    1f38e <_ZSt10__fill_n_aIPP15VkFramebuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f358:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f35f:	00 
   1f360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f364:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f368:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f36c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f370:	48 89 ce             	mov    %rcx,%rsi
   1f373:	48 89 c7             	mov    %rax,%rdi
   1f376:	e8 b8 04 00 00       	call   1f833 <_ZSt8__fill_aIPP15VkFramebuffer_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f37b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f37f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f386:	00 
   1f387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f38b:	48 01 d0             	add    %rdx,%rax
    }
   1f38e:	c9                   	leave
   1f38f:	c3                   	ret

000000000001f390 <_ZSt12__miter_baseIPKP13VkImageView_TET_S4_>:
    __miter_base(_Iterator __it)
   1f390:	55                   	push   %rbp
   1f391:	48 89 e5             	mov    %rsp,%rbp
   1f394:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f398:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f39c:	5d                   	pop    %rbp
   1f39d:	c3                   	ret

000000000001f39e <_ZSt13__copy_move_aILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1f39e:	55                   	push   %rbp
   1f39f:	48 89 e5             	mov    %rsp,%rbp
   1f3a2:	41 54                	push   %r12
   1f3a4:	53                   	push   %rbx
   1f3a5:	48 83 ec 20          	sub    $0x20,%rsp
   1f3a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f3ad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f3b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1f3b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f3b9:	48 89 c7             	mov    %rax,%rdi
   1f3bc:	e8 90 e9 ff ff       	call   1dd51 <_ZSt12__niter_baseIPP13VkImageView_TET_S3_>
   1f3c1:	49 89 c4             	mov    %rax,%r12
   1f3c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f3c8:	48 89 c7             	mov    %rax,%rdi
   1f3cb:	e8 91 04 00 00       	call   1f861 <_ZSt12__niter_baseIPKP13VkImageView_TET_S4_>
   1f3d0:	48 89 c3             	mov    %rax,%rbx
   1f3d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f3d7:	48 89 c7             	mov    %rax,%rdi
   1f3da:	e8 82 04 00 00       	call   1f861 <_ZSt12__niter_baseIPKP13VkImageView_TET_S4_>
   1f3df:	4c 89 e2             	mov    %r12,%rdx
   1f3e2:	48 89 de             	mov    %rbx,%rsi
   1f3e5:	48 89 c7             	mov    %rax,%rdi
   1f3e8:	e8 82 04 00 00       	call   1f86f <_ZSt14__copy_move_a1ILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>
   1f3ed:	48 89 c2             	mov    %rax,%rdx
   1f3f0:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f3f4:	48 89 d6             	mov    %rdx,%rsi
   1f3f7:	48 89 c7             	mov    %rax,%rdi
   1f3fa:	e8 9d 04 00 00       	call   1f89c <_ZSt12__niter_wrapIPP13VkImageView_TET_RKS3_S3_>
    }
   1f3ff:	48 83 c4 20          	add    $0x20,%rsp
   1f403:	5b                   	pop    %rbx
   1f404:	41 5c                	pop    %r12
   1f406:	5d                   	pop    %rbp
   1f407:	c3                   	ret

000000000001f408 <_ZSt19__iterator_categoryIPP10VkBuffer_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f408:	55                   	push   %rbp
   1f409:	48 89 e5             	mov    %rsp,%rbp
   1f40c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f410:	90                   	nop
   1f411:	5d                   	pop    %rbp
   1f412:	c3                   	ret

000000000001f413 <_ZSt10__fill_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f413:	55                   	push   %rbp
   1f414:	48 89 e5             	mov    %rsp,%rbp
   1f417:	48 83 ec 20          	sub    $0x20,%rsp
   1f41b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f41f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f423:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f427:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f42c:	75 06                	jne    1f434 <_ZSt10__fill_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f42e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f432:	eb 3a                	jmp    1f46e <_ZSt10__fill_n_aIPP10VkBuffer_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f434:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f438:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f43f:	00 
   1f440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f444:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f448:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f44c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f450:	48 89 ce             	mov    %rcx,%rsi
   1f453:	48 89 c7             	mov    %rax,%rdi
   1f456:	e8 53 04 00 00       	call   1f8ae <_ZSt8__fill_aIPP10VkBuffer_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f45b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f45f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f466:	00 
   1f467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f46b:	48 01 d0             	add    %rdx,%rax
    }
   1f46e:	c9                   	leave
   1f46f:	c3                   	ret

000000000001f470 <_ZSt19__iterator_categoryIPP16VkDeviceMemory_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f470:	55                   	push   %rbp
   1f471:	48 89 e5             	mov    %rsp,%rbp
   1f474:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f478:	90                   	nop
   1f479:	5d                   	pop    %rbp
   1f47a:	c3                   	ret

000000000001f47b <_ZSt10__fill_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f47b:	55                   	push   %rbp
   1f47c:	48 89 e5             	mov    %rsp,%rbp
   1f47f:	48 83 ec 20          	sub    $0x20,%rsp
   1f483:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f487:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f48b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f48f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f494:	75 06                	jne    1f49c <_ZSt10__fill_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f496:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f49a:	eb 3a                	jmp    1f4d6 <_ZSt10__fill_n_aIPP16VkDeviceMemory_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f49c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f4a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f4a7:	00 
   1f4a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4ac:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f4b0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f4b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4b8:	48 89 ce             	mov    %rcx,%rsi
   1f4bb:	48 89 c7             	mov    %rax,%rdi
   1f4be:	e8 19 04 00 00       	call   1f8dc <_ZSt8__fill_aIPP16VkDeviceMemory_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f4c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f4c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f4ce:	00 
   1f4cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4d3:	48 01 d0             	add    %rdx,%rax
    }
   1f4d6:	c9                   	leave
   1f4d7:	c3                   	ret

000000000001f4d8 <_ZSt19__iterator_categoryIPP13VkSemaphore_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f4d8:	55                   	push   %rbp
   1f4d9:	48 89 e5             	mov    %rsp,%rbp
   1f4dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f4e0:	90                   	nop
   1f4e1:	5d                   	pop    %rbp
   1f4e2:	c3                   	ret

000000000001f4e3 <_ZSt10__fill_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f4e3:	55                   	push   %rbp
   1f4e4:	48 89 e5             	mov    %rsp,%rbp
   1f4e7:	48 83 ec 20          	sub    $0x20,%rsp
   1f4eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f4ef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f4f3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f4f7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f4fc:	75 06                	jne    1f504 <_ZSt10__fill_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f4fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f502:	eb 3a                	jmp    1f53e <_ZSt10__fill_n_aIPP13VkSemaphore_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f504:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f508:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f50f:	00 
   1f510:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f514:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f518:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f51c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f520:	48 89 ce             	mov    %rcx,%rsi
   1f523:	48 89 c7             	mov    %rax,%rdi
   1f526:	e8 df 03 00 00       	call   1f90a <_ZSt8__fill_aIPP13VkSemaphore_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f52b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f52f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f536:	00 
   1f537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f53b:	48 01 d0             	add    %rdx,%rax
    }
   1f53e:	c9                   	leave
   1f53f:	c3                   	ret

000000000001f540 <_ZSt19__iterator_categoryIPP9VkFence_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f540:	55                   	push   %rbp
   1f541:	48 89 e5             	mov    %rsp,%rbp
   1f544:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f548:	90                   	nop
   1f549:	5d                   	pop    %rbp
   1f54a:	c3                   	ret

000000000001f54b <_ZSt10__fill_n_aIPP9VkFence_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f54b:	55                   	push   %rbp
   1f54c:	48 89 e5             	mov    %rsp,%rbp
   1f54f:	48 83 ec 20          	sub    $0x20,%rsp
   1f553:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f557:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f55b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f55f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f564:	75 06                	jne    1f56c <_ZSt10__fill_n_aIPP9VkFence_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f566:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f56a:	eb 3a                	jmp    1f5a6 <_ZSt10__fill_n_aIPP9VkFence_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f56c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f570:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f577:	00 
   1f578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f57c:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f580:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f588:	48 89 ce             	mov    %rcx,%rsi
   1f58b:	48 89 c7             	mov    %rax,%rdi
   1f58e:	e8 a5 03 00 00       	call   1f938 <_ZSt8__fill_aIPP9VkFence_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f593:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f597:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f59e:	00 
   1f59f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5a3:	48 01 d0             	add    %rdx,%rax
    }
   1f5a6:	c9                   	leave
   1f5a7:	c3                   	ret

000000000001f5a8 <_ZSt12__miter_baseIPKP13VkSemaphore_TET_S4_>:
    __miter_base(_Iterator __it)
   1f5a8:	55                   	push   %rbp
   1f5a9:	48 89 e5             	mov    %rsp,%rbp
   1f5ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f5b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5b4:	5d                   	pop    %rbp
   1f5b5:	c3                   	ret

000000000001f5b6 <_ZSt13__copy_move_aILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1f5b6:	55                   	push   %rbp
   1f5b7:	48 89 e5             	mov    %rsp,%rbp
   1f5ba:	41 54                	push   %r12
   1f5bc:	53                   	push   %rbx
   1f5bd:	48 83 ec 20          	sub    $0x20,%rsp
   1f5c1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f5c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f5c9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1f5cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f5d1:	48 89 c7             	mov    %rax,%rdi
   1f5d4:	e8 3a ef ff ff       	call   1e513 <_ZSt12__niter_baseIPP13VkSemaphore_TET_S3_>
   1f5d9:	49 89 c4             	mov    %rax,%r12
   1f5dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f5e0:	48 89 c7             	mov    %rax,%rdi
   1f5e3:	e8 7e 03 00 00       	call   1f966 <_ZSt12__niter_baseIPKP13VkSemaphore_TET_S4_>
   1f5e8:	48 89 c3             	mov    %rax,%rbx
   1f5eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f5ef:	48 89 c7             	mov    %rax,%rdi
   1f5f2:	e8 6f 03 00 00       	call   1f966 <_ZSt12__niter_baseIPKP13VkSemaphore_TET_S4_>
   1f5f7:	4c 89 e2             	mov    %r12,%rdx
   1f5fa:	48 89 de             	mov    %rbx,%rsi
   1f5fd:	48 89 c7             	mov    %rax,%rdi
   1f600:	e8 6f 03 00 00       	call   1f974 <_ZSt14__copy_move_a1ILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>
   1f605:	48 89 c2             	mov    %rax,%rdx
   1f608:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f60c:	48 89 d6             	mov    %rdx,%rsi
   1f60f:	48 89 c7             	mov    %rax,%rdi
   1f612:	e8 8a 03 00 00       	call   1f9a1 <_ZSt12__niter_wrapIPP13VkSemaphore_TET_RKS3_S3_>
    }
   1f617:	48 83 c4 20          	add    $0x20,%rsp
   1f61b:	5b                   	pop    %rbx
   1f61c:	41 5c                	pop    %r12
   1f61e:	5d                   	pop    %rbp
   1f61f:	c3                   	ret

000000000001f620 <_ZSt12__miter_baseIPKjET_S2_>:
    __miter_base(_Iterator __it)
   1f620:	55                   	push   %rbp
   1f621:	48 89 e5             	mov    %rsp,%rbp
   1f624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f62c:	5d                   	pop    %rbp
   1f62d:	c3                   	ret

000000000001f62e <_ZSt13__copy_move_aILb0EPKjPjET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1f62e:	55                   	push   %rbp
   1f62f:	48 89 e5             	mov    %rsp,%rbp
   1f632:	41 54                	push   %r12
   1f634:	53                   	push   %rbx
   1f635:	48 83 ec 20          	sub    $0x20,%rsp
   1f639:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f63d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f641:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1f645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f649:	48 89 c7             	mov    %rax,%rdi
   1f64c:	e8 70 03 00 00       	call   1f9c1 <_ZSt12__niter_baseIPjET_S1_>
   1f651:	49 89 c4             	mov    %rax,%r12
   1f654:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f658:	48 89 c7             	mov    %rax,%rdi
   1f65b:	e8 53 03 00 00       	call   1f9b3 <_ZSt12__niter_baseIPKjET_S2_>
   1f660:	48 89 c3             	mov    %rax,%rbx
   1f663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f667:	48 89 c7             	mov    %rax,%rdi
   1f66a:	e8 44 03 00 00       	call   1f9b3 <_ZSt12__niter_baseIPKjET_S2_>
   1f66f:	4c 89 e2             	mov    %r12,%rdx
   1f672:	48 89 de             	mov    %rbx,%rsi
   1f675:	48 89 c7             	mov    %rax,%rdi
   1f678:	e8 52 03 00 00       	call   1f9cf <_ZSt14__copy_move_a1ILb0EPKjPjET1_T0_S4_S3_>
   1f67d:	48 89 c2             	mov    %rax,%rdx
   1f680:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1f684:	48 89 d6             	mov    %rdx,%rsi
   1f687:	48 89 c7             	mov    %rax,%rdi
   1f68a:	e8 6d 03 00 00       	call   1f9fc <_ZSt12__niter_wrapIPjET_RKS1_S1_>
    }
   1f68f:	48 83 c4 20          	add    $0x20,%rsp
   1f693:	5b                   	pop    %rbx
   1f694:	41 5c                	pop    %r12
   1f696:	5d                   	pop    %rbp
   1f697:	c3                   	ret

000000000001f698 <_ZSt12__niter_baseIPKPKcET_S4_>:
    __niter_base(_Iterator __it)
   1f698:	55                   	push   %rbp
   1f699:	48 89 e5             	mov    %rsp,%rbp
   1f69c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f6a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6a4:	5d                   	pop    %rbp
   1f6a5:	c3                   	ret

000000000001f6a6 <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1f6a6:	55                   	push   %rbp
   1f6a7:	48 89 e5             	mov    %rsp,%rbp
   1f6aa:	48 83 ec 20          	sub    $0x20,%rsp
   1f6ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f6b2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f6b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1f6ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f6be:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f6c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6c6:	48 89 ce             	mov    %rcx,%rsi
   1f6c9:	48 89 c7             	mov    %rax,%rdi
   1f6cc:	e8 3d 03 00 00       	call   1fa0e <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1f6d1:	c9                   	leave
   1f6d2:	c3                   	ret

000000000001f6d3 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1f6d3:	55                   	push   %rbp
   1f6d4:	48 89 e5             	mov    %rsp,%rbp
   1f6d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f6db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1f6df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f6e3:	5d                   	pop    %rbp
   1f6e4:	c3                   	ret
   1f6e5:	90                   	nop

000000000001f6e6 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f6e6:	55                   	push   %rbp
   1f6e7:	48 89 e5             	mov    %rsp,%rbp
   1f6ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f6ee:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   1f6f5:	1c c7 01 
      }
   1f6f8:	5d                   	pop    %rbp
   1f6f9:	c3                   	ret

000000000001f6fa <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
   1f6fa:	55                   	push   %rbp
   1f6fb:	48 89 e5             	mov    %rsp,%rbp
   1f6fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f702:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(static_cast<_Base&&>(__in))
   1f706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f70a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f70e:	48 8b 12             	mov    (%rdx),%rdx
   1f711:	48 89 10             	mov    %rdx,(%rax)
      { }
   1f714:	90                   	nop
   1f715:	5d                   	pop    %rbp
   1f716:	c3                   	ret
   1f717:	90                   	nop

000000000001f718 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
   1f718:	55                   	push   %rbp
   1f719:	48 89 e5             	mov    %rsp,%rbp
   1f71c:	48 83 ec 20          	sub    $0x20,%rsp
   1f720:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f724:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
   1f728:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1f72c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f730:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f734:	48 89 ce             	mov    %rcx,%rsi
   1f737:	48 89 c7             	mov    %rax,%rdi
   1f73a:	e8 fd 02 00 00       	call   1fa3c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
   1f73f:	90                   	nop
   1f740:	c9                   	leave
   1f741:	c3                   	ret

000000000001f742 <_ZSt8__fill_aIPP13VkImageView_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f742:	55                   	push   %rbp
   1f743:	48 89 e5             	mov    %rsp,%rbp
   1f746:	48 83 ec 20          	sub    $0x20,%rsp
   1f74a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f74e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f752:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f756:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f75a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f75e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f762:	48 89 ce             	mov    %rcx,%rsi
   1f765:	48 89 c7             	mov    %rax,%rdi
   1f768:	e8 19 03 00 00       	call   1fa86 <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f76d:	90                   	nop
   1f76e:	c9                   	leave
   1f76f:	c3                   	ret

000000000001f770 <_ZSt12__niter_baseIPK28VkGraphicsPipelineCreateInfoET_S3_>:
    __niter_base(_Iterator __it)
   1f770:	55                   	push   %rbp
   1f771:	48 89 e5             	mov    %rsp,%rbp
   1f774:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f77c:	5d                   	pop    %rbp
   1f77d:	c3                   	ret

000000000001f77e <_ZSt12__niter_baseIP28VkGraphicsPipelineCreateInfoET_S2_>:
    __niter_base(_Iterator __it)
   1f77e:	55                   	push   %rbp
   1f77f:	48 89 e5             	mov    %rsp,%rbp
   1f782:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f786:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f78a:	5d                   	pop    %rbp
   1f78b:	c3                   	ret

000000000001f78c <_ZSt14__copy_move_a1ILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1f78c:	55                   	push   %rbp
   1f78d:	48 89 e5             	mov    %rsp,%rbp
   1f790:	48 83 ec 20          	sub    $0x20,%rsp
   1f794:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f798:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f79c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1f7a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f7a4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f7a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7ac:	48 89 ce             	mov    %rcx,%rsi
   1f7af:	48 89 c7             	mov    %rax,%rdi
   1f7b2:	e8 0a 03 00 00       	call   1fac1 <_ZSt14__copy_move_a2ILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>
   1f7b7:	c9                   	leave
   1f7b8:	c3                   	ret

000000000001f7b9 <_ZSt12__niter_wrapIP28VkGraphicsPipelineCreateInfoET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1f7b9:	55                   	push   %rbp
   1f7ba:	48 89 e5             	mov    %rsp,%rbp
   1f7bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7c1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1f7c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f7c9:	5d                   	pop    %rbp
   1f7ca:	c3                   	ret

000000000001f7cb <_ZSt19__iterator_categoryIPP12VkPipeline_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f7cb:	55                   	push   %rbp
   1f7cc:	48 89 e5             	mov    %rsp,%rbp
   1f7cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f7d3:	90                   	nop
   1f7d4:	5d                   	pop    %rbp
   1f7d5:	c3                   	ret

000000000001f7d6 <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f7d6:	55                   	push   %rbp
   1f7d7:	48 89 e5             	mov    %rsp,%rbp
   1f7da:	48 83 ec 20          	sub    $0x20,%rsp
   1f7de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7e2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f7e6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f7ea:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f7ef:	75 06                	jne    1f7f7 <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f7f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7f5:	eb 3a                	jmp    1f831 <_ZSt10__fill_n_aIPP12VkPipeline_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f7f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f7fb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f802:	00 
   1f803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f807:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f80b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f80f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f813:	48 89 ce             	mov    %rcx,%rsi
   1f816:	48 89 c7             	mov    %rax,%rdi
   1f819:	e8 d0 02 00 00       	call   1faee <_ZSt8__fill_aIPP12VkPipeline_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f81e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f822:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f829:	00 
   1f82a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f82e:	48 01 d0             	add    %rdx,%rax
    }
   1f831:	c9                   	leave
   1f832:	c3                   	ret

000000000001f833 <_ZSt8__fill_aIPP15VkFramebuffer_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f833:	55                   	push   %rbp
   1f834:	48 89 e5             	mov    %rsp,%rbp
   1f837:	48 83 ec 20          	sub    $0x20,%rsp
   1f83b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f83f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f843:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f847:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f84b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f84f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f853:	48 89 ce             	mov    %rcx,%rsi
   1f856:	48 89 c7             	mov    %rax,%rdi
   1f859:	e8 be 02 00 00       	call   1fb1c <_ZSt9__fill_a1IPP15VkFramebuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f85e:	90                   	nop
   1f85f:	c9                   	leave
   1f860:	c3                   	ret

000000000001f861 <_ZSt12__niter_baseIPKP13VkImageView_TET_S4_>:
    __niter_base(_Iterator __it)
   1f861:	55                   	push   %rbp
   1f862:	48 89 e5             	mov    %rsp,%rbp
   1f865:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f869:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f86d:	5d                   	pop    %rbp
   1f86e:	c3                   	ret

000000000001f86f <_ZSt14__copy_move_a1ILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1f86f:	55                   	push   %rbp
   1f870:	48 89 e5             	mov    %rsp,%rbp
   1f873:	48 83 ec 20          	sub    $0x20,%rsp
   1f877:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f87b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f87f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1f883:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f887:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f88b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f88f:	48 89 ce             	mov    %rcx,%rsi
   1f892:	48 89 c7             	mov    %rax,%rdi
   1f895:	e8 bd 02 00 00       	call   1fb57 <_ZSt14__copy_move_a2ILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>
   1f89a:	c9                   	leave
   1f89b:	c3                   	ret

000000000001f89c <_ZSt12__niter_wrapIPP13VkImageView_TET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1f89c:	55                   	push   %rbp
   1f89d:	48 89 e5             	mov    %rsp,%rbp
   1f8a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f8a4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1f8a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f8ac:	5d                   	pop    %rbp
   1f8ad:	c3                   	ret

000000000001f8ae <_ZSt8__fill_aIPP10VkBuffer_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f8ae:	55                   	push   %rbp
   1f8af:	48 89 e5             	mov    %rsp,%rbp
   1f8b2:	48 83 ec 20          	sub    $0x20,%rsp
   1f8b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f8ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f8be:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f8c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f8c6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f8ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8ce:	48 89 ce             	mov    %rcx,%rsi
   1f8d1:	48 89 c7             	mov    %rax,%rdi
   1f8d4:	e8 ab 02 00 00       	call   1fb84 <_ZSt9__fill_a1IPP10VkBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f8d9:	90                   	nop
   1f8da:	c9                   	leave
   1f8db:	c3                   	ret

000000000001f8dc <_ZSt8__fill_aIPP16VkDeviceMemory_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f8dc:	55                   	push   %rbp
   1f8dd:	48 89 e5             	mov    %rsp,%rbp
   1f8e0:	48 83 ec 20          	sub    $0x20,%rsp
   1f8e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f8e8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f8ec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f8f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f8f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f8f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8fc:	48 89 ce             	mov    %rcx,%rsi
   1f8ff:	48 89 c7             	mov    %rax,%rdi
   1f902:	e8 b8 02 00 00       	call   1fbbf <_ZSt9__fill_a1IPP16VkDeviceMemory_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f907:	90                   	nop
   1f908:	c9                   	leave
   1f909:	c3                   	ret

000000000001f90a <_ZSt8__fill_aIPP13VkSemaphore_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f90a:	55                   	push   %rbp
   1f90b:	48 89 e5             	mov    %rsp,%rbp
   1f90e:	48 83 ec 20          	sub    $0x20,%rsp
   1f912:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f916:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f91a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f91e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f922:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f92a:	48 89 ce             	mov    %rcx,%rsi
   1f92d:	48 89 c7             	mov    %rax,%rdi
   1f930:	e8 c5 02 00 00       	call   1fbfa <_ZSt9__fill_a1IPP13VkSemaphore_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f935:	90                   	nop
   1f936:	c9                   	leave
   1f937:	c3                   	ret

000000000001f938 <_ZSt8__fill_aIPP9VkFence_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1f938:	55                   	push   %rbp
   1f939:	48 89 e5             	mov    %rsp,%rbp
   1f93c:	48 83 ec 20          	sub    $0x20,%rsp
   1f940:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f944:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f948:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1f94c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f950:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f958:	48 89 ce             	mov    %rcx,%rsi
   1f95b:	48 89 c7             	mov    %rax,%rdi
   1f95e:	e8 d2 02 00 00       	call   1fc35 <_ZSt9__fill_a1IPP9VkFence_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1f963:	90                   	nop
   1f964:	c9                   	leave
   1f965:	c3                   	ret

000000000001f966 <_ZSt12__niter_baseIPKP13VkSemaphore_TET_S4_>:
    __niter_base(_Iterator __it)
   1f966:	55                   	push   %rbp
   1f967:	48 89 e5             	mov    %rsp,%rbp
   1f96a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f96e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f972:	5d                   	pop    %rbp
   1f973:	c3                   	ret

000000000001f974 <_ZSt14__copy_move_a1ILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1f974:	55                   	push   %rbp
   1f975:	48 89 e5             	mov    %rsp,%rbp
   1f978:	48 83 ec 20          	sub    $0x20,%rsp
   1f97c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f980:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f984:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1f988:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f98c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f994:	48 89 ce             	mov    %rcx,%rsi
   1f997:	48 89 c7             	mov    %rax,%rdi
   1f99a:	e8 d1 02 00 00       	call   1fc70 <_ZSt14__copy_move_a2ILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>
   1f99f:	c9                   	leave
   1f9a0:	c3                   	ret

000000000001f9a1 <_ZSt12__niter_wrapIPP13VkSemaphore_TET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1f9a1:	55                   	push   %rbp
   1f9a2:	48 89 e5             	mov    %rsp,%rbp
   1f9a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f9a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1f9ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f9b1:	5d                   	pop    %rbp
   1f9b2:	c3                   	ret

000000000001f9b3 <_ZSt12__niter_baseIPKjET_S2_>:
    __niter_base(_Iterator __it)
   1f9b3:	55                   	push   %rbp
   1f9b4:	48 89 e5             	mov    %rsp,%rbp
   1f9b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f9bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9bf:	5d                   	pop    %rbp
   1f9c0:	c3                   	ret

000000000001f9c1 <_ZSt12__niter_baseIPjET_S1_>:
    __niter_base(_Iterator __it)
   1f9c1:	55                   	push   %rbp
   1f9c2:	48 89 e5             	mov    %rsp,%rbp
   1f9c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1f9c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9cd:	5d                   	pop    %rbp
   1f9ce:	c3                   	ret

000000000001f9cf <_ZSt14__copy_move_a1ILb0EPKjPjET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1f9cf:	55                   	push   %rbp
   1f9d0:	48 89 e5             	mov    %rsp,%rbp
   1f9d3:	48 83 ec 20          	sub    $0x20,%rsp
   1f9d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f9db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f9df:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1f9e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f9e7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f9eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9ef:	48 89 ce             	mov    %rcx,%rsi
   1f9f2:	48 89 c7             	mov    %rax,%rdi
   1f9f5:	e8 a3 02 00 00       	call   1fc9d <_ZSt14__copy_move_a2ILb0EPKjPjET1_T0_S4_S3_>
   1f9fa:	c9                   	leave
   1f9fb:	c3                   	ret

000000000001f9fc <_ZSt12__niter_wrapIPjET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1f9fc:	55                   	push   %rbp
   1f9fd:	48 89 e5             	mov    %rsp,%rbp
   1fa00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fa04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1fa08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fa0c:	5d                   	pop    %rbp
   1fa0d:	c3                   	ret

000000000001fa0e <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1fa0e:	55                   	push   %rbp
   1fa0f:	48 89 e5             	mov    %rsp,%rbp
   1fa12:	48 83 ec 20          	sub    $0x20,%rsp
   1fa16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fa1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fa1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   1fa22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fa26:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fa2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa2e:	48 89 ce             	mov    %rcx,%rsi
   1fa31:	48 89 c7             	mov    %rax,%rdi
   1fa34:	e8 91 02 00 00       	call   1fcca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>
    }
   1fa39:	c9                   	leave
   1fa3a:	c3                   	ret
   1fa3b:	90                   	nop

000000000001fa3c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
   1fa3c:	55                   	push   %rbp
   1fa3d:	48 89 e5             	mov    %rsp,%rbp
   1fa40:	53                   	push   %rbx
   1fa41:	48 83 ec 28          	sub    $0x28,%rsp
   1fa45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fa49:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fa4d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1fa51:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1fa55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fa59:	48 89 c7             	mov    %rax,%rdi
   1fa5c:	e8 c8 02 00 00       	call   1fd29 <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
   1fa61:	48 89 c7             	mov    %rax,%rdi
   1fa64:	e8 da 02 00 00       	call   1fd43 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
   1fa69:	48 89 c6             	mov    %rax,%rsi
   1fa6c:	48 89 df             	mov    %rbx,%rdi
   1fa6f:	e8 fc 47 fe ff       	call   4270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@plt>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   1fa74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fa78:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
      { }
   1fa7f:	90                   	nop
   1fa80:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fa84:	c9                   	leave
   1fa85:	c3                   	ret

000000000001fa86 <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fa86:	55                   	push   %rbp
   1fa87:	48 89 e5             	mov    %rsp,%rbp
   1fa8a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fa8e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fa92:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fa96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fa9a:	48 8b 00             	mov    (%rax),%rax
   1fa9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1faa1:	eb 10                	jmp    1fab3 <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1faa3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1faa7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1faab:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1faae:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fab3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fab7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fabb:	75 e6                	jne    1faa3 <_ZSt9__fill_a1IPP13VkImageView_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fabd:	90                   	nop
   1fabe:	90                   	nop
   1fabf:	5d                   	pop    %rbp
   1fac0:	c3                   	ret

000000000001fac1 <_ZSt14__copy_move_a2ILb0EPK28VkGraphicsPipelineCreateInfoPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1fac1:	55                   	push   %rbp
   1fac2:	48 89 e5             	mov    %rsp,%rbp
   1fac5:	48 83 ec 20          	sub    $0x20,%rsp
   1fac9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1facd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fad1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   1fad5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fad9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fadd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fae1:	48 89 ce             	mov    %rcx,%rsi
   1fae4:	48 89 c7             	mov    %rax,%rdi
   1fae7:	e8 65 02 00 00       	call   1fd51 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI28VkGraphicsPipelineCreateInfoEEPT_PKS4_S7_S5_>
    }
   1faec:	c9                   	leave
   1faed:	c3                   	ret

000000000001faee <_ZSt8__fill_aIPP12VkPipeline_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1faee:	55                   	push   %rbp
   1faef:	48 89 e5             	mov    %rsp,%rbp
   1faf2:	48 83 ec 20          	sub    $0x20,%rsp
   1faf6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fafa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fafe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1fb02:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fb06:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fb0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb0e:	48 89 ce             	mov    %rcx,%rsi
   1fb11:	48 89 c7             	mov    %rax,%rdi
   1fb14:	e8 ba 02 00 00       	call   1fdd3 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1fb19:	90                   	nop
   1fb1a:	c9                   	leave
   1fb1b:	c3                   	ret

000000000001fb1c <_ZSt9__fill_a1IPP15VkFramebuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fb1c:	55                   	push   %rbp
   1fb1d:	48 89 e5             	mov    %rsp,%rbp
   1fb20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fb24:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fb28:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fb2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fb30:	48 8b 00             	mov    (%rax),%rax
   1fb33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fb37:	eb 10                	jmp    1fb49 <_ZSt9__fill_a1IPP15VkFramebuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fb39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fb41:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fb44:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fb49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb4d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fb51:	75 e6                	jne    1fb39 <_ZSt9__fill_a1IPP15VkFramebuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fb53:	90                   	nop
   1fb54:	90                   	nop
   1fb55:	5d                   	pop    %rbp
   1fb56:	c3                   	ret

000000000001fb57 <_ZSt14__copy_move_a2ILb0EPKP13VkImageView_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1fb57:	55                   	push   %rbp
   1fb58:	48 89 e5             	mov    %rsp,%rbp
   1fb5b:	48 83 ec 20          	sub    $0x20,%rsp
   1fb5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fb63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fb67:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   1fb6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fb6f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fb73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb77:	48 89 ce             	mov    %rcx,%rsi
   1fb7a:	48 89 c7             	mov    %rax,%rdi
   1fb7d:	e8 8c 02 00 00       	call   1fe0e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkImageView_TEEPT_PKS5_S8_S6_>
    }
   1fb82:	c9                   	leave
   1fb83:	c3                   	ret

000000000001fb84 <_ZSt9__fill_a1IPP10VkBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fb84:	55                   	push   %rbp
   1fb85:	48 89 e5             	mov    %rsp,%rbp
   1fb88:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fb8c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fb90:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fb94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fb98:	48 8b 00             	mov    (%rax),%rax
   1fb9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fb9f:	eb 10                	jmp    1fbb1 <_ZSt9__fill_a1IPP10VkBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fba5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fba9:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fbac:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fbb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fbb5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fbb9:	75 e6                	jne    1fba1 <_ZSt9__fill_a1IPP10VkBuffer_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fbbb:	90                   	nop
   1fbbc:	90                   	nop
   1fbbd:	5d                   	pop    %rbp
   1fbbe:	c3                   	ret

000000000001fbbf <_ZSt9__fill_a1IPP16VkDeviceMemory_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fbbf:	55                   	push   %rbp
   1fbc0:	48 89 e5             	mov    %rsp,%rbp
   1fbc3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fbc7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fbcb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fbcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fbd3:	48 8b 00             	mov    (%rax),%rax
   1fbd6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fbda:	eb 10                	jmp    1fbec <_ZSt9__fill_a1IPP16VkDeviceMemory_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fbdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fbe0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fbe4:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fbe7:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fbec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fbf0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fbf4:	75 e6                	jne    1fbdc <_ZSt9__fill_a1IPP16VkDeviceMemory_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fbf6:	90                   	nop
   1fbf7:	90                   	nop
   1fbf8:	5d                   	pop    %rbp
   1fbf9:	c3                   	ret

000000000001fbfa <_ZSt9__fill_a1IPP13VkSemaphore_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fbfa:	55                   	push   %rbp
   1fbfb:	48 89 e5             	mov    %rsp,%rbp
   1fbfe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fc02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fc06:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fc0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc0e:	48 8b 00             	mov    (%rax),%rax
   1fc11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fc15:	eb 10                	jmp    1fc27 <_ZSt9__fill_a1IPP13VkSemaphore_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fc17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc1f:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fc22:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fc27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc2b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fc2f:	75 e6                	jne    1fc17 <_ZSt9__fill_a1IPP13VkSemaphore_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fc31:	90                   	nop
   1fc32:	90                   	nop
   1fc33:	5d                   	pop    %rbp
   1fc34:	c3                   	ret

000000000001fc35 <_ZSt9__fill_a1IPP9VkFence_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fc35:	55                   	push   %rbp
   1fc36:	48 89 e5             	mov    %rsp,%rbp
   1fc39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fc3d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fc41:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fc45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fc49:	48 8b 00             	mov    (%rax),%rax
   1fc4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fc50:	eb 10                	jmp    1fc62 <_ZSt9__fill_a1IPP9VkFence_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fc5a:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fc5d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fc62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc66:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fc6a:	75 e6                	jne    1fc52 <_ZSt9__fill_a1IPP9VkFence_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fc6c:	90                   	nop
   1fc6d:	90                   	nop
   1fc6e:	5d                   	pop    %rbp
   1fc6f:	c3                   	ret

000000000001fc70 <_ZSt14__copy_move_a2ILb0EPKP13VkSemaphore_TPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1fc70:	55                   	push   %rbp
   1fc71:	48 89 e5             	mov    %rsp,%rbp
   1fc74:	48 83 ec 20          	sub    $0x20,%rsp
   1fc78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fc7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fc80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   1fc84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fc88:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fc8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc90:	48 89 ce             	mov    %rcx,%rsi
   1fc93:	48 89 c7             	mov    %rax,%rdi
   1fc96:	e8 d2 01 00 00       	call   1fe6d <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkSemaphore_TEEPT_PKS5_S8_S6_>
    }
   1fc9b:	c9                   	leave
   1fc9c:	c3                   	ret

000000000001fc9d <_ZSt14__copy_move_a2ILb0EPKjPjET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1fc9d:	55                   	push   %rbp
   1fc9e:	48 89 e5             	mov    %rsp,%rbp
   1fca1:	48 83 ec 20          	sub    $0x20,%rsp
   1fca5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fca9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fcad:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			      _Category>::__copy_m(__first, __last, __result);
   1fcb1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fcb5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fcb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fcbd:	48 89 ce             	mov    %rcx,%rsi
   1fcc0:	48 89 c7             	mov    %rax,%rdi
   1fcc3:	e8 04 02 00 00       	call   1fecc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_>
    }
   1fcc8:	c9                   	leave
   1fcc9:	c3                   	ret

000000000001fcca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fcca:	55                   	push   %rbp
   1fccb:	48 89 e5             	mov    %rsp,%rbp
   1fcce:	48 83 ec 30          	sub    $0x30,%rsp
   1fcd2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fcd6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fcda:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fcde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fce2:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fce6:	48 c1 f8 03          	sar    $0x3,%rax
   1fcea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1fcee:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fcf3:	74 1f                	je     1fd14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1fcf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fcf9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fd00:	00 
   1fd01:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fd05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fd09:	48 89 ce             	mov    %rcx,%rsi
   1fd0c:	48 89 c7             	mov    %rax,%rdi
   1fd0f:	e8 ac 4b fe ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
   1fd14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd18:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fd1f:	00 
   1fd20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fd24:	48 01 d0             	add    %rdx,%rax
	}
   1fd27:	c9                   	leave
   1fd28:	c3                   	ret

000000000001fd29 <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
   1fd29:	55                   	push   %rbp
   1fd2a:	48 89 e5             	mov    %rsp,%rbp
   1fd2d:	48 83 ec 10          	sub    $0x10,%rsp
   1fd31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   1fd35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd39:	48 89 c7             	mov    %rax,%rdi
   1fd3c:	e8 ea 01 00 00       	call   1ff2b <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
   1fd41:	c9                   	leave
   1fd42:	c3                   	ret

000000000001fd43 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1fd43:	55                   	push   %rbp
   1fd44:	48 89 e5             	mov    %rsp,%rbp
   1fd47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1fd4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd4f:	5d                   	pop    %rbp
   1fd50:	c3                   	ret

000000000001fd51 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI28VkGraphicsPipelineCreateInfoEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fd51:	55                   	push   %rbp
   1fd52:	48 89 e5             	mov    %rsp,%rbp
   1fd55:	48 83 ec 30          	sub    $0x30,%rsp
   1fd59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fd5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fd61:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fd65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fd69:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fd6d:	48 c1 f8 04          	sar    $0x4,%rax
   1fd71:	48 89 c2             	mov    %rax,%rdx
   1fd74:	48 b8 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%rax
   1fd7b:	e3 38 8e 
   1fd7e:	48 0f af c2          	imul   %rdx,%rax
   1fd82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1fd86:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fd8b:	74 28                	je     1fdb5 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI28VkGraphicsPipelineCreateInfoEEPT_PKS4_S7_S5_+0x64>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1fd8d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fd91:	48 89 d0             	mov    %rdx,%rax
   1fd94:	48 c1 e0 03          	shl    $0x3,%rax
   1fd98:	48 01 d0             	add    %rdx,%rax
   1fd9b:	48 c1 e0 04          	shl    $0x4,%rax
   1fd9f:	48 89 c2             	mov    %rax,%rdx
   1fda2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fda6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fdaa:	48 89 ce             	mov    %rcx,%rsi
   1fdad:	48 89 c7             	mov    %rax,%rdi
   1fdb0:	e8 0b 4b fe ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
   1fdb5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fdb9:	48 89 d0             	mov    %rdx,%rax
   1fdbc:	48 c1 e0 03          	shl    $0x3,%rax
   1fdc0:	48 01 d0             	add    %rdx,%rax
   1fdc3:	48 c1 e0 04          	shl    $0x4,%rax
   1fdc7:	48 89 c2             	mov    %rax,%rdx
   1fdca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fdce:	48 01 d0             	add    %rdx,%rax
	}
   1fdd1:	c9                   	leave
   1fdd2:	c3                   	ret

000000000001fdd3 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1fdd3:	55                   	push   %rbp
   1fdd4:	48 89 e5             	mov    %rsp,%rbp
   1fdd7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fddb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fddf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1fde3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fde7:	48 8b 00             	mov    (%rax),%rax
   1fdea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1fdee:	eb 10                	jmp    1fe00 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1fdf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fdf4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1fdf8:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fdfb:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fe00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fe04:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fe08:	75 e6                	jne    1fdf0 <_ZSt9__fill_a1IPP12VkPipeline_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   1fe0a:	90                   	nop
   1fe0b:	90                   	nop
   1fe0c:	5d                   	pop    %rbp
   1fe0d:	c3                   	ret

000000000001fe0e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkImageView_TEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fe0e:	55                   	push   %rbp
   1fe0f:	48 89 e5             	mov    %rsp,%rbp
   1fe12:	48 83 ec 30          	sub    $0x30,%rsp
   1fe16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fe1a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fe1e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fe22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fe26:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fe2a:	48 c1 f8 03          	sar    $0x3,%rax
   1fe2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1fe32:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fe37:	74 1f                	je     1fe58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkImageView_TEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1fe39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe3d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fe44:	00 
   1fe45:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fe49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fe4d:	48 89 ce             	mov    %rcx,%rsi
   1fe50:	48 89 c7             	mov    %rax,%rdi
   1fe53:	e8 68 4a fe ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
   1fe58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe5c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fe63:	00 
   1fe64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fe68:	48 01 d0             	add    %rdx,%rax
	}
   1fe6b:	c9                   	leave
   1fe6c:	c3                   	ret

000000000001fe6d <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkSemaphore_TEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fe6d:	55                   	push   %rbp
   1fe6e:	48 89 e5             	mov    %rsp,%rbp
   1fe71:	48 83 ec 30          	sub    $0x30,%rsp
   1fe75:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fe79:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fe7d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fe81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fe85:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fe89:	48 c1 f8 03          	sar    $0x3,%rax
   1fe8d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1fe91:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fe96:	74 1f                	je     1feb7 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP13VkSemaphore_TEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1fe98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe9c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fea3:	00 
   1fea4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1feac:	48 89 ce             	mov    %rcx,%rsi
   1feaf:	48 89 c7             	mov    %rax,%rdi
   1feb2:	e8 09 4a fe ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
   1feb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1febb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fec2:	00 
   1fec3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fec7:	48 01 d0             	add    %rdx,%rax
	}
   1feca:	c9                   	leave
   1fecb:	c3                   	ret

000000000001fecc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fecc:	55                   	push   %rbp
   1fecd:	48 89 e5             	mov    %rsp,%rbp
   1fed0:	48 83 ec 30          	sub    $0x30,%rsp
   1fed4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fed8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fedc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fee0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fee4:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fee8:	48 c1 f8 02          	sar    $0x2,%rax
   1feec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1fef0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fef5:	74 1f                	je     1ff16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIjEEPT_PKS3_S6_S4_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1fef7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fefb:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ff02:	00 
   1ff03:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1ff07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ff0b:	48 89 ce             	mov    %rcx,%rsi
   1ff0e:	48 89 c7             	mov    %rax,%rdi
   1ff11:	e8 aa 49 fe ff       	call   48c0 <memmove@plt>
	  return __result + _Num;
   1ff16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff1a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ff21:	00 
   1ff22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ff26:	48 01 d0             	add    %rdx,%rax
	}
   1ff29:	c9                   	leave
   1ff2a:	c3                   	ret

000000000001ff2b <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   1ff2b:	55                   	push   %rbp
   1ff2c:	48 89 e5             	mov    %rsp,%rbp
   1ff2f:	48 83 ec 10          	sub    $0x10,%rsp
   1ff33:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   1ff37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff3b:	48 89 c7             	mov    %rax,%rdi
   1ff3e:	e8 02 00 00 00       	call   1ff45 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
   1ff43:	c9                   	leave
   1ff44:	c3                   	ret

000000000001ff45 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   1ff45:	55                   	push   %rbp
   1ff46:	48 89 e5             	mov    %rsp,%rbp
   1ff49:	48 83 ec 10          	sub    $0x10,%rsp
   1ff4d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff55:	48 89 c7             	mov    %rax,%rdi
   1ff58:	e8 02 00 00 00       	call   1ff5f <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
   1ff5d:	c9                   	leave
   1ff5e:	c3                   	ret

000000000001ff5f <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   1ff5f:	55                   	push   %rbp
   1ff60:	48 89 e5             	mov    %rsp,%rbp
   1ff63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff6b:	48 8b 00             	mov    (%rax),%rax
   1ff6e:	5d                   	pop    %rbp
   1ff6f:	c3                   	ret

000000000001ff70 <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
   1ff70:	55                   	push   %rbp
   1ff71:	48 89 e5             	mov    %rsp,%rbp
   1ff74:	48 83 ec 10          	sub    $0x10,%rsp
   1ff78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff7c:	48 8d 15 3d 4d 01 00 	lea    0x14d3d(%rip),%rdx        # 34cc0 <_ZTVSt19bad_optional_access+0x10>
   1ff83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff87:	48 89 10             	mov    %rdx,(%rax)
   1ff8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff8e:	48 89 c7             	mov    %rax,%rdi
   1ff91:	e8 4a 4a fe ff       	call   49e0 <_ZNSt9exceptionD2Ev@plt>
   1ff96:	90                   	nop
   1ff97:	c9                   	leave
   1ff98:	c3                   	ret
   1ff99:	90                   	nop

000000000001ff9a <_ZNSt19bad_optional_accessD0Ev>:
   1ff9a:	55                   	push   %rbp
   1ff9b:	48 89 e5             	mov    %rsp,%rbp
   1ff9e:	48 83 ec 10          	sub    $0x10,%rsp
   1ffa2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ffa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffaa:	48 89 c7             	mov    %rax,%rdi
   1ffad:	e8 be ff ff ff       	call   1ff70 <_ZNSt19bad_optional_accessD1Ev>
   1ffb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffb6:	be 08 00 00 00       	mov    $0x8,%esi
   1ffbb:	48 89 c7             	mov    %rax,%rdi
   1ffbe:	e8 2d 45 fe ff       	call   44f0 <_ZdlPvm@plt>
   1ffc3:	c9                   	leave
   1ffc4:	c3                   	ret

Disassembly of section .fini:

000000000001ffc8 <_fini>:
   1ffc8:	48 83 ec 08          	sub    $0x8,%rsp
   1ffcc:	48 83 c4 08          	add    $0x8,%rsp
   1ffd0:	c3                   	ret
