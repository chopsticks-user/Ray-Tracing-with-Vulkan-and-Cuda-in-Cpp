
build/Application:     file format elf64-x86-64


Disassembly of section .init:

0000000000005000 <_init>:
    5000:	48 83 ec 08          	sub    $0x8,%rsp
    5004:	48 8b 05 b5 df 02 00 	mov    0x2dfb5(%rip),%rax        # 32fc0 <__gmon_start__@Base>
    500b:	48 85 c0             	test   %rax,%rax
    500e:	74 02                	je     5012 <_init+0x12>
    5010:	ff d0                	call   *%rax
    5012:	48 83 c4 08          	add    $0x8,%rsp
    5016:	c3                   	ret

Disassembly of section .plt:

0000000000005020 <_Znam@plt-0x10>:
    5020:	ff 35 ca df 02 00    	push   0x2dfca(%rip)        # 32ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    5026:	ff 25 cc df 02 00    	jmp    *0x2dfcc(%rip)        # 32ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    502c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005030 <_Znam@plt>:
    5030:	ff 25 ca df 02 00    	jmp    *0x2dfca(%rip)        # 33000 <_Znam@GLIBCXX_3.4>
    5036:	68 00 00 00 00       	push   $0x0
    503b:	e9 e0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
    5040:	ff 25 c2 df 02 00    	jmp    *0x2dfc2(%rip)        # 33008 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
    5046:	68 01 00 00 00       	push   $0x1
    504b:	e9 d0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005050 <_ZNSaIcED2Ev@plt>:
    5050:	ff 25 ba df 02 00    	jmp    *0x2dfba(%rip)        # 33010 <_ZNSaIcED2Ev@GLIBCXX_3.4>
    5056:	68 02 00 00 00       	push   $0x2
    505b:	e9 c0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005060 <glfwDestroyWindow@plt>:
    5060:	ff 25 b2 df 02 00    	jmp    *0x2dfb2(%rip)        # 33018 <glfwDestroyWindow@Base>
    5066:	68 03 00 00 00       	push   $0x3
    506b:	e9 b0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>:
    5070:	ff 25 aa df 02 00    	jmp    *0x2dfaa(%rip)        # 33020 <_ZNSolsEPFRSt8ios_baseS0_E@GLIBCXX_3.4>
    5076:	68 04 00 00 00       	push   $0x4
    507b:	e9 a0 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005080 <_ZSt17__throw_bad_allocv@plt>:
    5080:	ff 25 a2 df 02 00    	jmp    *0x2dfa2(%rip)        # 33028 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    5086:	68 05 00 00 00       	push   $0x5
    508b:	e9 90 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005090 <_ZNSt13runtime_errorC1EPKc@plt>:
    5090:	ff 25 9a df 02 00    	jmp    *0x2df9a(%rip)        # 33030 <_ZNSt13runtime_errorC1EPKc@GLIBCXX_3.4.21>
    5096:	68 06 00 00 00       	push   $0x6
    509b:	e9 80 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050a0 <__cxa_begin_catch@plt>:
    50a0:	ff 25 92 df 02 00    	jmp    *0x2df92(%rip)        # 33038 <__cxa_begin_catch@CXXABI_1.3>
    50a6:	68 07 00 00 00       	push   $0x7
    50ab:	e9 70 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050b0 <strlen@plt>:
    50b0:	ff 25 8a df 02 00    	jmp    *0x2df8a(%rip)        # 33040 <strlen@GLIBC_2.2.5>
    50b6:	68 08 00 00 00       	push   $0x8
    50bb:	e9 60 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050c0 <memcmp@plt>:
    50c0:	ff 25 82 df 02 00    	jmp    *0x2df82(%rip)        # 33048 <memcmp@GLIBC_2.2.5>
    50c6:	68 09 00 00 00       	push   $0x9
    50cb:	e9 50 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050d0 <__cxa_allocate_exception@plt>:
    50d0:	ff 25 7a df 02 00    	jmp    *0x2df7a(%rip)        # 33050 <__cxa_allocate_exception@CXXABI_1.3>
    50d6:	68 0a 00 00 00       	push   $0xa
    50db:	e9 40 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050e0 <_ZSt20__throw_length_errorPKc@plt>:
    50e0:	ff 25 72 df 02 00    	jmp    *0x2df72(%rip)        # 33058 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    50e6:	68 0b 00 00 00       	push   $0xb
    50eb:	e9 30 ff ff ff       	jmp    5020 <_init+0x20>

00000000000050f0 <__cxa_guard_abort@plt>:
    50f0:	ff 25 6a df 02 00    	jmp    *0x2df6a(%rip)        # 33060 <__cxa_guard_abort@CXXABI_1.3>
    50f6:	68 0c 00 00 00       	push   $0xc
    50fb:	e9 20 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005100 <__cxa_guard_release@plt>:
    5100:	ff 25 62 df 02 00    	jmp    *0x2df62(%rip)        # 33068 <__cxa_guard_release@CXXABI_1.3>
    5106:	68 0d 00 00 00       	push   $0xd
    510b:	e9 10 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005110 <__assert_fail@plt>:
    5110:	ff 25 5a df 02 00    	jmp    *0x2df5a(%rip)        # 33070 <__assert_fail@GLIBC_2.2.5>
    5116:	68 0e 00 00 00       	push   $0xe
    511b:	e9 00 ff ff ff       	jmp    5020 <_init+0x20>

0000000000005120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
    5120:	ff 25 52 df 02 00    	jmp    *0x2df52(%rip)        # 33078 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5126:	68 0f 00 00 00       	push   $0xf
    512b:	e9 f0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>:
    5130:	ff 25 4a df 02 00    	jmp    *0x2df4a(%rip)        # 33080 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@GLIBCXX_3.4.26>
    5136:	68 10 00 00 00       	push   $0x10
    513b:	e9 e0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005140 <_ZSt19__throw_logic_errorPKc@plt>:
    5140:	ff 25 42 df 02 00    	jmp    *0x2df42(%rip)        # 33088 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
    5146:	68 11 00 00 00       	push   $0x11
    514b:	e9 d0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005150 <__cxa_free_exception@plt>:
    5150:	ff 25 3a df 02 00    	jmp    *0x2df3a(%rip)        # 33090 <__cxa_free_exception@CXXABI_1.3>
    5156:	68 12 00 00 00       	push   $0x12
    515b:	e9 c0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
    5160:	ff 25 32 df 02 00    	jmp    *0x2df32(%rip)        # 33098 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    5166:	68 13 00 00 00       	push   $0x13
    516b:	e9 b0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005170 <glfwGetRequiredInstanceExtensions@plt>:
    5170:	ff 25 2a df 02 00    	jmp    *0x2df2a(%rip)        # 330a0 <glfwGetRequiredInstanceExtensions@Base>
    5176:	68 14 00 00 00       	push   $0x14
    517b:	e9 a0 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005180 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    5180:	ff 25 22 df 02 00    	jmp    *0x2df22(%rip)        # 330a8 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    5186:	68 15 00 00 00       	push   $0x15
    518b:	e9 90 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005190 <dlclose@plt>:
    5190:	ff 25 1a df 02 00    	jmp    *0x2df1a(%rip)        # 330b0 <dlclose@GLIBC_2.34>
    5196:	68 16 00 00 00       	push   $0x16
    519b:	e9 80 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051a0 <memcpy@plt>:
    51a0:	ff 25 12 df 02 00    	jmp    *0x2df12(%rip)        # 330b8 <memcpy@GLIBC_2.14>
    51a6:	68 17 00 00 00       	push   $0x17
    51ab:	e9 70 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051b0 <glfwWindowHint@plt>:
    51b0:	ff 25 0a df 02 00    	jmp    *0x2df0a(%rip)        # 330c0 <glfwWindowHint@Base>
    51b6:	68 18 00 00 00       	push   $0x18
    51bb:	e9 60 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051c0 <_ZNSt12system_errorD2Ev@plt>:
    51c0:	ff 25 02 df 02 00    	jmp    *0x2df02(%rip)        # 330c8 <_ZNSt12system_errorD2Ev@GLIBCXX_3.4.11>
    51c6:	68 19 00 00 00       	push   $0x19
    51cb:	e9 50 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051d0 <__cxa_atexit@plt>:
    51d0:	ff 25 fa de 02 00    	jmp    *0x2defa(%rip)        # 330d0 <__cxa_atexit@GLIBC_2.2.5>
    51d6:	68 1a 00 00 00       	push   $0x1a
    51db:	e9 40 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051e0 <dlsym@plt>:
    51e0:	ff 25 f2 de 02 00    	jmp    *0x2def2(%rip)        # 330d8 <dlsym@GLIBC_2.34>
    51e6:	68 1b 00 00 00       	push   $0x1b
    51eb:	e9 30 fe ff ff       	jmp    5020 <_init+0x20>

00000000000051f0 <_ZdlPv@plt>:
    51f0:	ff 25 ea de 02 00    	jmp    *0x2deea(%rip)        # 330e0 <_ZdlPv@GLIBCXX_3.4>
    51f6:	68 1c 00 00 00       	push   $0x1c
    51fb:	e9 20 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005200 <glfwPollEvents@plt>:
    5200:	ff 25 e2 de 02 00    	jmp    *0x2dee2(%rip)        # 330e8 <glfwPollEvents@Base>
    5206:	68 1d 00 00 00       	push   $0x1d
    520b:	e9 10 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    5210:	ff 25 da de 02 00    	jmp    *0x2deda(%rip)        # 330f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    5216:	68 1e 00 00 00       	push   $0x1e
    521b:	e9 00 fe ff ff       	jmp    5020 <_init+0x20>

0000000000005220 <_Znwm@plt>:
    5220:	ff 25 d2 de 02 00    	jmp    *0x2ded2(%rip)        # 330f8 <_Znwm@GLIBCXX_3.4>
    5226:	68 1f 00 00 00       	push   $0x1f
    522b:	e9 f0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005230 <_ZdlPvm@plt>:
    5230:	ff 25 ca de 02 00    	jmp    *0x2deca(%rip)        # 33100 <_ZdlPvm@CXXABI_1.3.9>
    5236:	68 20 00 00 00       	push   $0x20
    523b:	e9 e0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005240 <glfwTerminate@plt>:
    5240:	ff 25 c2 de 02 00    	jmp    *0x2dec2(%rip)        # 33108 <glfwTerminate@Base>
    5246:	68 21 00 00 00       	push   $0x21
    524b:	e9 d0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
    5250:	ff 25 ba de 02 00    	jmp    *0x2deba(%rip)        # 33110 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
    5256:	68 22 00 00 00       	push   $0x22
    525b:	e9 c0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005260 <_ZNSolsEPFRSoS_E@plt>:
    5260:	ff 25 b2 de 02 00    	jmp    *0x2deb2(%rip)        # 33118 <_ZNSolsEPFRSoS_E@GLIBCXX_3.4>
    5266:	68 23 00 00 00       	push   $0x23
    526b:	e9 b0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005270 <_ZNSaIcED1Ev@plt>:
    5270:	ff 25 aa de 02 00    	jmp    *0x2deaa(%rip)        # 33120 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    5276:	68 24 00 00 00       	push   $0x24
    527b:	e9 a0 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005280 <vkEnumerateInstanceLayerProperties@plt>:
    5280:	ff 25 a2 de 02 00    	jmp    *0x2dea2(%rip)        # 33128 <vkEnumerateInstanceLayerProperties@Base>
    5286:	68 25 00 00 00       	push   $0x25
    528b:	e9 90 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005290 <glfwInit@plt>:
    5290:	ff 25 9a de 02 00    	jmp    *0x2de9a(%rip)        # 33130 <glfwInit@Base>
    5296:	68 26 00 00 00       	push   $0x26
    529b:	e9 80 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    52a0:	ff 25 92 de 02 00    	jmp    *0x2de92(%rip)        # 33138 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    52a6:	68 27 00 00 00       	push   $0x27
    52ab:	e9 70 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
    52b0:	ff 25 8a de 02 00    	jmp    *0x2de8a(%rip)        # 33140 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
    52b6:	68 28 00 00 00       	push   $0x28
    52bb:	e9 60 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052c0 <_ZdaPv@plt>:
    52c0:	ff 25 82 de 02 00    	jmp    *0x2de82(%rip)        # 33148 <_ZdaPv@GLIBCXX_3.4>
    52c6:	68 29 00 00 00       	push   $0x29
    52cb:	e9 50 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052d0 <_ZNSolsEj@plt>:
    52d0:	ff 25 7a de 02 00    	jmp    *0x2de7a(%rip)        # 33150 <_ZNSolsEj@GLIBCXX_3.4>
    52d6:	68 2a 00 00 00       	push   $0x2a
    52db:	e9 40 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052e0 <_ZNKSt13runtime_error4whatEv@plt>:
    52e0:	ff 25 72 de 02 00    	jmp    *0x2de72(%rip)        # 33158 <_ZNKSt13runtime_error4whatEv@GLIBCXX_3.4>
    52e6:	68 2b 00 00 00       	push   $0x2b
    52eb:	e9 30 fd ff ff       	jmp    5020 <_init+0x20>

00000000000052f0 <dlopen@plt>:
    52f0:	ff 25 6a de 02 00    	jmp    *0x2de6a(%rip)        # 33160 <dlopen@GLIBC_2.34>
    52f6:	68 2c 00 00 00       	push   $0x2c
    52fb:	e9 20 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005300 <_ZNSaIcEC2ERKS_@plt>:
    5300:	ff 25 62 de 02 00    	jmp    *0x2de62(%rip)        # 33168 <_ZNSaIcEC2ERKS_@GLIBCXX_3.4>
    5306:	68 2d 00 00 00       	push   $0x2d
    530b:	e9 10 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005310 <__cxa_rethrow@plt>:
    5310:	ff 25 5a de 02 00    	jmp    *0x2de5a(%rip)        # 33170 <__cxa_rethrow@CXXABI_1.3>
    5316:	68 2e 00 00 00       	push   $0x2e
    531b:	e9 00 fd ff ff       	jmp    5020 <_init+0x20>

0000000000005320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
    5320:	ff 25 52 de 02 00    	jmp    *0x2de52(%rip)        # 33178 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
    5326:	68 2f 00 00 00       	push   $0x2f
    532b:	e9 f0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005330 <_ZNSt8ios_base4InitC1Ev@plt>:
    5330:	ff 25 4a de 02 00    	jmp    *0x2de4a(%rip)        # 33180 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    5336:	68 30 00 00 00       	push   $0x30
    533b:	e9 e0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005340 <glfwCreateWindowSurface@plt>:
    5340:	ff 25 42 de 02 00    	jmp    *0x2de42(%rip)        # 33188 <glfwCreateWindowSurface@Base>
    5346:	68 31 00 00 00       	push   $0x31
    534b:	e9 d0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005350 <glfwCreateWindow@plt>:
    5350:	ff 25 3a de 02 00    	jmp    *0x2de3a(%rip)        # 33190 <glfwCreateWindow@Base>
    5356:	68 32 00 00 00       	push   $0x32
    535b:	e9 c0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005360 <memmove@plt>:
    5360:	ff 25 32 de 02 00    	jmp    *0x2de32(%rip)        # 33198 <memmove@GLIBC_2.2.5>
    5366:	68 33 00 00 00       	push   $0x33
    536b:	e9 b0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005370 <__cxa_end_catch@plt>:
    5370:	ff 25 2a de 02 00    	jmp    *0x2de2a(%rip)        # 331a0 <__cxa_end_catch@CXXABI_1.3>
    5376:	68 34 00 00 00       	push   $0x34
    537b:	e9 a0 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005380 <__cxa_throw@plt>:
    5380:	ff 25 22 de 02 00    	jmp    *0x2de22(%rip)        # 331a8 <__cxa_throw@CXXABI_1.3>
    5386:	68 35 00 00 00       	push   $0x35
    538b:	e9 90 fc ff ff       	jmp    5020 <_init+0x20>

0000000000005390 <_ZNSt3_V214error_categoryD2Ev@plt>:
    5390:	ff 25 1a de 02 00    	jmp    *0x2de1a(%rip)        # 331b0 <_ZNSt3_V214error_categoryD2Ev@GLIBCXX_3.4.21>
    5396:	68 36 00 00 00       	push   $0x36
    539b:	e9 80 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053a0 <_Unwind_Resume@plt>:
    53a0:	ff 25 12 de 02 00    	jmp    *0x2de12(%rip)        # 331b8 <_Unwind_Resume@GCC_3.0>
    53a6:	68 37 00 00 00       	push   $0x37
    53ab:	e9 70 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053b0 <_ZNSaIcEC1Ev@plt>:
    53b0:	ff 25 0a de 02 00    	jmp    *0x2de0a(%rip)        # 331c0 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    53b6:	68 38 00 00 00       	push   $0x38
    53bb:	e9 60 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053c0 <__cxa_guard_acquire@plt>:
    53c0:	ff 25 02 de 02 00    	jmp    *0x2de02(%rip)        # 331c8 <__cxa_guard_acquire@CXXABI_1.3>
    53c6:	68 39 00 00 00       	push   $0x39
    53cb:	e9 50 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>:
    53d0:	ff 25 fa dd 02 00    	jmp    *0x2ddfa(%rip)        # 331d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@GLIBCXX_3.4.29>
    53d6:	68 3a 00 00 00       	push   $0x3a
    53db:	e9 40 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053e0 <_ZNSt9exceptionD2Ev@plt>:
    53e0:	ff 25 f2 dd 02 00    	jmp    *0x2ddf2(%rip)        # 331d8 <_ZNSt9exceptionD2Ev@GLIBCXX_3.4>
    53e6:	68 3b 00 00 00       	push   $0x3b
    53eb:	e9 30 fc ff ff       	jmp    5020 <_init+0x20>

00000000000053f0 <glfwWindowShouldClose@plt>:
    53f0:	ff 25 ea dd 02 00    	jmp    *0x2ddea(%rip)        # 331e0 <glfwWindowShouldClose@Base>
    53f6:	68 3c 00 00 00       	push   $0x3c
    53fb:	e9 20 fc ff ff       	jmp    5020 <_init+0x20>

Disassembly of section .plt.got:

0000000000005400 <__cxa_finalize@plt>:
    5400:	ff 25 92 db 02 00    	jmp    *0x2db92(%rip)        # 32f98 <__cxa_finalize@GLIBC_2.2.5>
    5406:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000005410 <_start>:
    5410:	31 ed                	xor    %ebp,%ebp
    5412:	49 89 d1             	mov    %rdx,%r9
    5415:	5e                   	pop    %rsi
    5416:	48 89 e2             	mov    %rsp,%rdx
    5419:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    541d:	50                   	push   %rax
    541e:	54                   	push   %rsp
    541f:	45 31 c0             	xor    %r8d,%r8d
    5422:	31 c9                	xor    %ecx,%ecx
    5424:	48 8d 3d c3 0b 00 00 	lea    0xbc3(%rip),%rdi        # 5fee <main>
    542b:	ff 15 77 db 02 00    	call   *0x2db77(%rip)        # 32fa8 <__libc_start_main@GLIBC_2.34>
    5431:	f4                   	hlt
    5432:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    5439:	00 00 00 
    543c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005440 <deregister_tm_clones>:
    5440:	48 8d 3d e9 dd 02 00 	lea    0x2dde9(%rip),%rdi        # 33230 <__TMC_END__>
    5447:	48 8d 05 e2 dd 02 00 	lea    0x2dde2(%rip),%rax        # 33230 <__TMC_END__>
    544e:	48 39 f8             	cmp    %rdi,%rax
    5451:	74 15                	je     5468 <deregister_tm_clones+0x28>
    5453:	48 8b 05 5e db 02 00 	mov    0x2db5e(%rip),%rax        # 32fb8 <_ITM_deregisterTMCloneTable@Base>
    545a:	48 85 c0             	test   %rax,%rax
    545d:	74 09                	je     5468 <deregister_tm_clones+0x28>
    545f:	ff e0                	jmp    *%rax
    5461:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5468:	c3                   	ret
    5469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005470 <register_tm_clones>:
    5470:	48 8d 3d b9 dd 02 00 	lea    0x2ddb9(%rip),%rdi        # 33230 <__TMC_END__>
    5477:	48 8d 35 b2 dd 02 00 	lea    0x2ddb2(%rip),%rsi        # 33230 <__TMC_END__>
    547e:	48 29 fe             	sub    %rdi,%rsi
    5481:	48 89 f0             	mov    %rsi,%rax
    5484:	48 c1 ee 3f          	shr    $0x3f,%rsi
    5488:	48 c1 f8 03          	sar    $0x3,%rax
    548c:	48 01 c6             	add    %rax,%rsi
    548f:	48 d1 fe             	sar    %rsi
    5492:	74 14                	je     54a8 <register_tm_clones+0x38>
    5494:	48 8b 05 2d db 02 00 	mov    0x2db2d(%rip),%rax        # 32fc8 <_ITM_registerTMCloneTable@Base>
    549b:	48 85 c0             	test   %rax,%rax
    549e:	74 08                	je     54a8 <register_tm_clones+0x38>
    54a0:	ff e0                	jmp    *%rax
    54a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    54a8:	c3                   	ret
    54a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054b0 <__do_global_dtors_aux>:
    54b0:	f3 0f 1e fa          	endbr64
    54b4:	80 3d 95 de 02 00 00 	cmpb   $0x0,0x2de95(%rip)        # 33350 <completed.0>
    54bb:	75 2b                	jne    54e8 <__do_global_dtors_aux+0x38>
    54bd:	55                   	push   %rbp
    54be:	48 83 3d d2 da 02 00 	cmpq   $0x0,0x2dad2(%rip)        # 32f98 <__cxa_finalize@GLIBC_2.2.5>
    54c5:	00 
    54c6:	48 89 e5             	mov    %rsp,%rbp
    54c9:	74 0c                	je     54d7 <__do_global_dtors_aux+0x27>
    54cb:	48 8b 3d 26 dd 02 00 	mov    0x2dd26(%rip),%rdi        # 331f8 <__dso_handle>
    54d2:	e8 29 ff ff ff       	call   5400 <__cxa_finalize@plt>
    54d7:	e8 64 ff ff ff       	call   5440 <deregister_tm_clones>
    54dc:	c6 05 6d de 02 00 01 	movb   $0x1,0x2de6d(%rip)        # 33350 <completed.0>
    54e3:	5d                   	pop    %rbp
    54e4:	c3                   	ret
    54e5:	0f 1f 00             	nopl   (%rax)
    54e8:	c3                   	ret
    54e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000054f0 <frame_dummy>:
    54f0:	f3 0f 1e fa          	endbr64
    54f4:	e9 77 ff ff ff       	jmp    5470 <register_tm_clones>

00000000000054f9 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
  };

  namespace
  {
    [[noreturn]] void throwResultException( Result result, char const * message )
    {
    54f9:	55                   	push   %rbp
    54fa:	48 89 e5             	mov    %rsp,%rbp
    54fd:	41 54                	push   %r12
    54ff:	53                   	push   %rbx
    5500:	48 83 ec 30          	sub    $0x30,%rsp
    5504:	89 7d cc             	mov    %edi,-0x34(%rbp)
    5507:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    550b:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    550f:	0f 89 28 07 00 00    	jns    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5515:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    5519:	0f 8d 3d 01 00 00    	jge    565c <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    551f:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5526:	0f 84 19 05 00 00    	je     5a45 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    552c:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    5533:	0f 8f 04 07 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5539:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    5540:	0f 84 37 05 00 00    	je     5a7d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    5546:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    554d:	0f 8f ea 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5553:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    555a:	0f 84 55 05 00 00    	je     5ab5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    5560:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    5567:	0f 8f d0 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    556d:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5574:	0f 84 73 05 00 00    	je     5aed <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    557a:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    5581:	0f 8f b6 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5587:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    558e:	0f 84 91 05 00 00    	je     5b25 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    5594:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    559b:	0f 8f 9c 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55a1:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55a8:	0f 84 af 05 00 00    	je     5b5d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    55ae:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    55b5:	0f 8f 82 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55bb:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55c2:	0f 84 9d 03 00 00    	je     5965 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    55c8:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    55cf:	0f 8f 68 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55d5:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55dc:	0f 84 bb 03 00 00    	je     599d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    55e2:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    55e9:	0f 8f 4e 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    55ef:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    55f6:	0f 84 99 05 00 00    	je     5b95 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    55fc:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    5603:	0f 8f 34 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5609:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    5610:	0f 84 bf 03 00 00    	je     59d5 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    5616:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    561d:	0f 8f 1a 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    5623:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    562a:	0f 84 9d 05 00 00    	je     5bcd <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    5630:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    5637:	0f 8f 00 06 00 00    	jg     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    563d:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    5644:	0f 84 bb 05 00 00    	je     5c05 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    564a:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    5651:	0f 84 b6 03 00 00    	je     5a0d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    5657:	e9 e1 05 00 00       	jmp    5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    565c:	8b 45 cc             	mov    -0x34(%rbp),%eax
    565f:	83 c0 0d             	add    $0xd,%eax
    5662:	83 f8 0c             	cmp    $0xc,%eax
    5665:	0f 87 d2 05 00 00    	ja     5c3d <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    566b:	89 c0                	mov    %eax,%eax
    566d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    5674:	00 
    5675:	48 8d 05 64 c3 01 00 	lea    0x1c364(%rip),%rax        # 219e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    567c:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    567f:	48 98                	cltq
    5681:	48 8d 15 58 c3 01 00 	lea    0x1c358(%rip),%rdx        # 219e0 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    5688:	48 01 d0             	add    %rdx,%rax
    568b:	ff e0                	jmp    *%rax
      {
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    568d:	bf 28 00 00 00       	mov    $0x28,%edi
    5692:	e8 39 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5697:	48 89 c3             	mov    %rax,%rbx
    569a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    569e:	48 89 c6             	mov    %rax,%rsi
    56a1:	48 89 df             	mov    %rbx,%rdi
    56a4:	e8 1d 23 00 00       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    56a9:	48 8d 05 04 6f 00 00 	lea    0x6f04(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    56b0:	48 89 c2             	mov    %rax,%rdx
    56b3:	48 8d 05 2e d6 02 00 	lea    0x2d62e(%rip),%rax        # 32ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56ba:	48 89 c6             	mov    %rax,%rsi
    56bd:	48 89 df             	mov    %rbx,%rdi
    56c0:	e8 bb fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    56c5:	bf 28 00 00 00       	mov    $0x28,%edi
    56ca:	e8 01 fa ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    56cf:	48 89 c3             	mov    %rax,%rbx
    56d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    56d6:	48 89 c6             	mov    %rax,%rsi
    56d9:	48 89 df             	mov    %rbx,%rdi
    56dc:	e8 b7 23 00 00       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    56e1:	48 8d 05 5c 6e 00 00 	lea    0x6e5c(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    56e8:	48 89 c2             	mov    %rax,%rdx
    56eb:	48 8d 05 de d5 02 00 	lea    0x2d5de(%rip),%rax        # 32cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    56f2:	48 89 c6             	mov    %rax,%rsi
    56f5:	48 89 df             	mov    %rbx,%rdi
    56f8:	e8 83 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    56fd:	bf 28 00 00 00       	mov    $0x28,%edi
    5702:	e8 c9 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5707:	48 89 c3             	mov    %rax,%rbx
    570a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    570e:	48 89 c6             	mov    %rax,%rsi
    5711:	48 89 df             	mov    %rbx,%rdi
    5714:	e8 51 24 00 00       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    5719:	48 8d 05 b4 6d 00 00 	lea    0x6db4(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    5720:	48 89 c2             	mov    %rax,%rdx
    5723:	48 8d 05 8e d5 02 00 	lea    0x2d58e(%rip),%rax        # 32cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    572a:	48 89 c6             	mov    %rax,%rsi
    572d:	48 89 df             	mov    %rbx,%rdi
    5730:	e8 4b fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5735:	bf 28 00 00 00       	mov    $0x28,%edi
    573a:	e8 91 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    573f:	48 89 c3             	mov    %rax,%rbx
    5742:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5746:	48 89 c6             	mov    %rax,%rsi
    5749:	48 89 df             	mov    %rbx,%rdi
    574c:	e8 eb 24 00 00       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    5751:	48 8d 05 0c 6d 00 00 	lea    0x6d0c(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
    5758:	48 89 c2             	mov    %rax,%rdx
    575b:	48 8d 05 3e d5 02 00 	lea    0x2d53e(%rip),%rax        # 32ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5762:	48 89 c6             	mov    %rax,%rsi
    5765:	48 89 df             	mov    %rbx,%rdi
    5768:	e8 13 fc ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    576d:	bf 28 00 00 00       	mov    $0x28,%edi
    5772:	e8 59 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5777:	48 89 c3             	mov    %rax,%rbx
    577a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    577e:	48 89 c6             	mov    %rax,%rsi
    5781:	48 89 df             	mov    %rbx,%rdi
    5784:	e8 85 25 00 00       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    5789:	48 8d 05 64 6c 00 00 	lea    0x6c64(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    5790:	48 89 c2             	mov    %rax,%rdx
    5793:	48 8d 05 ee d4 02 00 	lea    0x2d4ee(%rip),%rax        # 32c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    579a:	48 89 c6             	mov    %rax,%rsi
    579d:	48 89 df             	mov    %rbx,%rdi
    57a0:	e8 db fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    57a5:	bf 28 00 00 00       	mov    $0x28,%edi
    57aa:	e8 21 f9 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57af:	48 89 c3             	mov    %rax,%rbx
    57b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57b6:	48 89 c6             	mov    %rax,%rsi
    57b9:	48 89 df             	mov    %rbx,%rdi
    57bc:	e8 1f 26 00 00       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    57c1:	48 8d 05 bc 6b 00 00 	lea    0x6bbc(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    57c8:	48 89 c2             	mov    %rax,%rdx
    57cb:	48 8d 05 9e d4 02 00 	lea    0x2d49e(%rip),%rax        # 32c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    57d2:	48 89 c6             	mov    %rax,%rsi
    57d5:	48 89 df             	mov    %rbx,%rdi
    57d8:	e8 a3 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    57dd:	bf 28 00 00 00       	mov    $0x28,%edi
    57e2:	e8 e9 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    57e7:	48 89 c3             	mov    %rax,%rbx
    57ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    57ee:	48 89 c6             	mov    %rax,%rsi
    57f1:	48 89 df             	mov    %rbx,%rdi
    57f4:	e8 b9 26 00 00       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    57f9:	48 8d 05 14 6b 00 00 	lea    0x6b14(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    5800:	48 89 c2             	mov    %rax,%rdx
    5803:	48 8d 05 4e d4 02 00 	lea    0x2d44e(%rip),%rax        # 32c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    580a:	48 89 c6             	mov    %rax,%rsi
    580d:	48 89 df             	mov    %rbx,%rdi
    5810:	e8 6b fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5815:	bf 28 00 00 00       	mov    $0x28,%edi
    581a:	e8 b1 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    581f:	48 89 c3             	mov    %rax,%rbx
    5822:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5826:	48 89 c6             	mov    %rax,%rsi
    5829:	48 89 df             	mov    %rbx,%rdi
    582c:	e8 53 27 00 00       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    5831:	48 8d 05 6c 6a 00 00 	lea    0x6a6c(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    5838:	48 89 c2             	mov    %rax,%rdx
    583b:	48 8d 05 fe d3 02 00 	lea    0x2d3fe(%rip),%rax        # 32c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5842:	48 89 c6             	mov    %rax,%rsi
    5845:	48 89 df             	mov    %rbx,%rdi
    5848:	e8 33 fb ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    584d:	bf 28 00 00 00       	mov    $0x28,%edi
    5852:	e8 79 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5857:	48 89 c3             	mov    %rax,%rbx
    585a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    585e:	48 89 c6             	mov    %rax,%rsi
    5861:	48 89 df             	mov    %rbx,%rdi
    5864:	e8 ed 27 00 00       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    5869:	48 8d 05 c4 69 00 00 	lea    0x69c4(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    5870:	48 89 c2             	mov    %rax,%rdx
    5873:	48 8d 05 ae d3 02 00 	lea    0x2d3ae(%rip),%rax        # 32c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    587a:	48 89 c6             	mov    %rax,%rsi
    587d:	48 89 df             	mov    %rbx,%rdi
    5880:	e8 fb fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5885:	bf 28 00 00 00       	mov    $0x28,%edi
    588a:	e8 41 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    588f:	48 89 c3             	mov    %rax,%rbx
    5892:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5896:	48 89 c6             	mov    %rax,%rsi
    5899:	48 89 df             	mov    %rbx,%rdi
    589c:	e8 87 28 00 00       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    58a1:	48 8d 05 1c 69 00 00 	lea    0x691c(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    58a8:	48 89 c2             	mov    %rax,%rdx
    58ab:	48 8d 05 5e d3 02 00 	lea    0x2d35e(%rip),%rax        # 32c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58b2:	48 89 c6             	mov    %rax,%rsi
    58b5:	48 89 df             	mov    %rbx,%rdi
    58b8:	e8 c3 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    58bd:	bf 28 00 00 00       	mov    $0x28,%edi
    58c2:	e8 09 f8 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58c7:	48 89 c3             	mov    %rax,%rbx
    58ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    58ce:	48 89 c6             	mov    %rax,%rsi
    58d1:	48 89 df             	mov    %rbx,%rdi
    58d4:	e8 21 29 00 00       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    58d9:	48 8d 05 74 68 00 00 	lea    0x6874(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    58e0:	48 89 c2             	mov    %rax,%rdx
    58e3:	48 8d 05 0e d3 02 00 	lea    0x2d30e(%rip),%rax        # 32bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    58ea:	48 89 c6             	mov    %rax,%rsi
    58ed:	48 89 df             	mov    %rbx,%rdi
    58f0:	e8 8b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    58f5:	bf 28 00 00 00       	mov    $0x28,%edi
    58fa:	e8 d1 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    58ff:	48 89 c3             	mov    %rax,%rbx
    5902:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5906:	48 89 c6             	mov    %rax,%rsi
    5909:	48 89 df             	mov    %rbx,%rdi
    590c:	e8 bb 29 00 00       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    5911:	48 8d 05 cc 67 00 00 	lea    0x67cc(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    5918:	48 89 c2             	mov    %rax,%rdx
    591b:	48 8d 05 be d2 02 00 	lea    0x2d2be(%rip),%rax        # 32be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5922:	48 89 c6             	mov    %rax,%rsi
    5925:	48 89 df             	mov    %rbx,%rdi
    5928:	e8 53 fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    592d:	bf 28 00 00 00       	mov    $0x28,%edi
    5932:	e8 99 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5937:	48 89 c3             	mov    %rax,%rbx
    593a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    593e:	48 89 c6             	mov    %rax,%rsi
    5941:	48 89 df             	mov    %rbx,%rdi
    5944:	e8 55 2a 00 00       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    5949:	48 8d 05 24 67 00 00 	lea    0x6724(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
    5950:	48 89 c2             	mov    %rax,%rdx
    5953:	48 8d 05 6e d2 02 00 	lea    0x2d26e(%rip),%rax        # 32bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    595a:	48 89 c6             	mov    %rax,%rsi
    595d:	48 89 df             	mov    %rbx,%rdi
    5960:	e8 1b fa ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5965:	bf 28 00 00 00       	mov    $0x28,%edi
    596a:	e8 61 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    596f:	48 89 c3             	mov    %rax,%rbx
    5972:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5976:	48 89 c6             	mov    %rax,%rsi
    5979:	48 89 df             	mov    %rbx,%rdi
    597c:	e8 ef 2a 00 00       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    5981:	48 8d 05 7c 66 00 00 	lea    0x667c(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    5988:	48 89 c2             	mov    %rax,%rdx
    598b:	48 8d 05 1e d2 02 00 	lea    0x2d21e(%rip),%rax        # 32bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5992:	48 89 c6             	mov    %rax,%rsi
    5995:	48 89 df             	mov    %rbx,%rdi
    5998:	e8 e3 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    599d:	bf 28 00 00 00       	mov    $0x28,%edi
    59a2:	e8 29 f7 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59a7:	48 89 c3             	mov    %rax,%rbx
    59aa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59ae:	48 89 c6             	mov    %rax,%rsi
    59b1:	48 89 df             	mov    %rbx,%rdi
    59b4:	e8 89 2b 00 00       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    59b9:	48 8d 05 d4 65 00 00 	lea    0x65d4(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    59c0:	48 89 c2             	mov    %rax,%rdx
    59c3:	48 8d 05 ce d1 02 00 	lea    0x2d1ce(%rip),%rax        # 32b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    59ca:	48 89 c6             	mov    %rax,%rsi
    59cd:	48 89 df             	mov    %rbx,%rdi
    59d0:	e8 ab f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    59d5:	bf 28 00 00 00       	mov    $0x28,%edi
    59da:	e8 f1 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    59df:	48 89 c3             	mov    %rax,%rbx
    59e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    59e6:	48 89 c6             	mov    %rax,%rsi
    59e9:	48 89 df             	mov    %rbx,%rdi
    59ec:	e8 23 2c 00 00       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    59f1:	48 8d 05 2c 65 00 00 	lea    0x652c(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
    59f8:	48 89 c2             	mov    %rax,%rdx
    59fb:	48 8d 05 7e d1 02 00 	lea    0x2d17e(%rip),%rax        # 32b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a02:	48 89 c6             	mov    %rax,%rsi
    5a05:	48 89 df             	mov    %rbx,%rdi
    5a08:	e8 73 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5a0d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a12:	e8 b9 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a17:	48 89 c3             	mov    %rax,%rbx
    5a1a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a1e:	48 89 c6             	mov    %rax,%rsi
    5a21:	48 89 df             	mov    %rbx,%rdi
    5a24:	e8 bd 2c 00 00       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    5a29:	48 8d 05 84 64 00 00 	lea    0x6484(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    5a30:	48 89 c2             	mov    %rax,%rdx
    5a33:	48 8d 05 2e d1 02 00 	lea    0x2d12e(%rip),%rax        # 32b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a3a:	48 89 c6             	mov    %rax,%rsi
    5a3d:	48 89 df             	mov    %rbx,%rdi
    5a40:	e8 3b f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5a45:	bf 28 00 00 00       	mov    $0x28,%edi
    5a4a:	e8 81 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a4f:	48 89 c3             	mov    %rax,%rbx
    5a52:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a56:	48 89 c6             	mov    %rax,%rsi
    5a59:	48 89 df             	mov    %rbx,%rdi
    5a5c:	e8 57 2d 00 00       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    5a61:	48 8d 05 dc 63 00 00 	lea    0x63dc(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    5a68:	48 89 c2             	mov    %rax,%rdx
    5a6b:	48 8d 05 de d0 02 00 	lea    0x2d0de(%rip),%rax        # 32b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5a72:	48 89 c6             	mov    %rax,%rsi
    5a75:	48 89 df             	mov    %rbx,%rdi
    5a78:	e8 03 f9 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5a7d:	bf 28 00 00 00       	mov    $0x28,%edi
    5a82:	e8 49 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5a87:	48 89 c3             	mov    %rax,%rbx
    5a8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5a8e:	48 89 c6             	mov    %rax,%rsi
    5a91:	48 89 df             	mov    %rbx,%rdi
    5a94:	e8 f1 2d 00 00       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    5a99:	48 8d 05 34 63 00 00 	lea    0x6334(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    5aa0:	48 89 c2             	mov    %rax,%rdx
    5aa3:	48 8d 05 8e d0 02 00 	lea    0x2d08e(%rip),%rax        # 32b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5aaa:	48 89 c6             	mov    %rax,%rsi
    5aad:	48 89 df             	mov    %rbx,%rdi
    5ab0:	e8 cb f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ab5:	bf 28 00 00 00       	mov    $0x28,%edi
    5aba:	e8 11 f6 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5abf:	48 89 c3             	mov    %rax,%rbx
    5ac2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ac6:	48 89 c6             	mov    %rax,%rsi
    5ac9:	48 89 df             	mov    %rbx,%rdi
    5acc:	e8 8b 2e 00 00       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    5ad1:	48 8d 05 8c 62 00 00 	lea    0x628c(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    5ad8:	48 89 c2             	mov    %rax,%rdx
    5adb:	48 8d 05 3e d0 02 00 	lea    0x2d03e(%rip),%rax        # 32b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5ae2:	48 89 c6             	mov    %rax,%rsi
    5ae5:	48 89 df             	mov    %rbx,%rdi
    5ae8:	e8 93 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5aed:	bf 28 00 00 00       	mov    $0x28,%edi
    5af2:	e8 d9 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5af7:	48 89 c3             	mov    %rax,%rbx
    5afa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5afe:	48 89 c6             	mov    %rax,%rsi
    5b01:	48 89 df             	mov    %rbx,%rdi
    5b04:	e8 25 2f 00 00       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    5b09:	48 8d 05 e4 61 00 00 	lea    0x61e4(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    5b10:	48 89 c2             	mov    %rax,%rdx
    5b13:	48 8d 05 ee cf 02 00 	lea    0x2cfee(%rip),%rax        # 32b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b1a:	48 89 c6             	mov    %rax,%rsi
    5b1d:	48 89 df             	mov    %rbx,%rdi
    5b20:	e8 5b f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5b25:	bf 28 00 00 00       	mov    $0x28,%edi
    5b2a:	e8 a1 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b2f:	48 89 c3             	mov    %rax,%rbx
    5b32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b36:	48 89 c6             	mov    %rax,%rsi
    5b39:	48 89 df             	mov    %rbx,%rdi
    5b3c:	e8 bf 2f 00 00       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    5b41:	48 8d 05 3c 61 00 00 	lea    0x613c(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    5b48:	48 89 c2             	mov    %rax,%rdx
    5b4b:	48 8d 05 9e cf 02 00 	lea    0x2cf9e(%rip),%rax        # 32af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b52:	48 89 c6             	mov    %rax,%rsi
    5b55:	48 89 df             	mov    %rbx,%rdi
    5b58:	e8 23 f8 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5b5d:	bf 28 00 00 00       	mov    $0x28,%edi
    5b62:	e8 69 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b67:	48 89 c3             	mov    %rax,%rbx
    5b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5b6e:	48 89 c6             	mov    %rax,%rsi
    5b71:	48 89 df             	mov    %rbx,%rdi
    5b74:	e8 59 30 00 00       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    5b79:	48 8d 05 94 60 00 00 	lea    0x6094(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    5b80:	48 89 c2             	mov    %rax,%rdx
    5b83:	48 8d 05 4e cf 02 00 	lea    0x2cf4e(%rip),%rax        # 32ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5b8a:	48 89 c6             	mov    %rax,%rsi
    5b8d:	48 89 df             	mov    %rbx,%rdi
    5b90:	e8 eb f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorVideoProfileCodecNotSupportedKHR: throw VideoProfileCodecNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
#  if defined( VK_ENABLE_BETA_EXTENSIONS )
        case Result::eErrorVideoStdVersionNotSupportedKHR: throw VideoStdVersionNotSupportedKHRError( message );
#  endif /*VK_ENABLE_BETA_EXTENSIONS*/
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5b95:	bf 28 00 00 00       	mov    $0x28,%edi
    5b9a:	e8 31 f5 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5b9f:	48 89 c3             	mov    %rax,%rbx
    5ba2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5ba6:	48 89 c6             	mov    %rax,%rsi
    5ba9:	48 89 df             	mov    %rbx,%rdi
    5bac:	e8 f3 30 00 00       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    5bb1:	48 8d 05 ec 5f 00 00 	lea    0x5fec(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    5bb8:	48 89 c2             	mov    %rax,%rdx
    5bbb:	48 8d 05 fe ce 02 00 	lea    0x2cefe(%rip),%rax        # 32ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bc2:	48 89 c6             	mov    %rax,%rsi
    5bc5:	48 89 df             	mov    %rbx,%rdi
    5bc8:	e8 b3 f7 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5bcd:	bf 28 00 00 00       	mov    $0x28,%edi
    5bd2:	e8 f9 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5bd7:	48 89 c3             	mov    %rax,%rbx
    5bda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5bde:	48 89 c6             	mov    %rax,%rsi
    5be1:	48 89 df             	mov    %rbx,%rdi
    5be4:	e8 8d 31 00 00       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    5be9:	48 8d 05 44 5f 00 00 	lea    0x5f44(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    5bf0:	48 89 c2             	mov    %rax,%rdx
    5bf3:	48 8d 05 ae ce 02 00 	lea    0x2ceae(%rip),%rax        # 32aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5bfa:	48 89 c6             	mov    %rax,%rsi
    5bfd:	48 89 df             	mov    %rbx,%rdi
    5c00:	e8 7b f7 ff ff       	call   5380 <__cxa_throw@plt>
#  if defined( VK_USE_PLATFORM_WIN32_KHR )
        case Result::eErrorFullScreenExclusiveModeLostEXT: throw FullScreenExclusiveModeLostEXTError( message );
#  endif /*VK_USE_PLATFORM_WIN32_KHR*/
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5c05:	bf 28 00 00 00       	mov    $0x28,%edi
    5c0a:	e8 c1 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c0f:	48 89 c3             	mov    %rax,%rbx
    5c12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5c16:	48 89 c6             	mov    %rax,%rsi
    5c19:	48 89 df             	mov    %rbx,%rdi
    5c1c:	e8 27 32 00 00       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    5c21:	48 8d 05 9c 5e 00 00 	lea    0x5e9c(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    5c28:	48 89 c2             	mov    %rax,%rdx
    5c2b:	48 8d 05 5e ce 02 00 	lea    0x2ce5e(%rip),%rax        # 32a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    5c32:	48 89 c6             	mov    %rax,%rsi
    5c35:	48 89 df             	mov    %rbx,%rdi
    5c38:	e8 43 f7 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    5c3d:	bf 28 00 00 00       	mov    $0x28,%edi
    5c42:	e8 89 f4 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    5c47:	48 89 c3             	mov    %rax,%rbx
    5c4a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5c4d:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    5c50:	0f b6 05 01 d7 02 00 	movzbl 0x2d701(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c57:	84 c0                	test   %al,%al
    5c59:	0f 94 c0             	sete   %al
    5c5c:	84 c0                	test   %al,%al
    5c5e:	74 4a                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c60:	48 8d 05 f1 d6 02 00 	lea    0x2d6f1(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5c67:	48 89 c7             	mov    %rax,%rdi
    5c6a:	e8 51 f7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    5c6f:	85 c0                	test   %eax,%eax
    5c71:	0f 95 c0             	setne  %al
    5c74:	84 c0                	test   %al,%al
    5c76:	74 32                	je     5caa <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    5c78:	48 8d 05 79 d5 02 00 	lea    0x2d579(%rip),%rax        # 331f8 <__dso_handle>
    5c7f:	48 89 c2             	mov    %rax,%rdx
    5c82:	48 8d 05 77 d5 02 00 	lea    0x2d577(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    5c89:	48 89 c6             	mov    %rax,%rsi
    5c8c:	48 8d 05 91 69 00 00 	lea    0x6991(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    5c93:	48 89 c7             	mov    %rax,%rdi
    5c96:	e8 35 f5 ff ff       	call   51d0 <__cxa_atexit@plt>
    5c9b:	48 8d 05 b6 d6 02 00 	lea    0x2d6b6(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    5ca2:	48 89 c7             	mov    %rax,%rdi
    5ca5:	e8 56 f4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    5caa:	48 8d 15 4f d5 02 00 	lea    0x2d54f(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    5cb1:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    5cb4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5cb8:	89 ce                	mov    %ecx,%esi
    5cba:	48 89 c7             	mov    %rax,%rdi
    5cbd:	e8 46 06 00 00       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    5cc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5cc6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    5cca:	48 89 c6             	mov    %rax,%rsi
    5ccd:	48 89 d7             	mov    %rdx,%rdi
    5cd0:	89 f1                	mov    %esi,%ecx
    5cd2:	48 89 d0             	mov    %rdx,%rax
    5cd5:	89 ce                	mov    %ecx,%esi
    5cd7:	48 89 c2             	mov    %rax,%rdx
    5cda:	48 89 df             	mov    %rbx,%rdi
    5cdd:	e8 2e 1b 00 00       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    5ce2:	48 8d 05 5d 1c 00 00 	lea    0x1c5d(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    5ce9:	48 89 c2             	mov    %rax,%rdx
    5cec:	48 8d 05 0d d0 02 00 	lea    0x2d00d(%rip),%rax        # 32d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    5cf3:	48 89 c6             	mov    %rax,%rsi
    5cf6:	48 89 df             	mov    %rbx,%rdi
    5cf9:	e8 82 f6 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    5cfe:	49 89 c4             	mov    %rax,%r12
    5d01:	48 89 df             	mov    %rbx,%rdi
    5d04:	e8 47 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d09:	4c 89 e0             	mov    %r12,%rax
    5d0c:	48 89 c7             	mov    %rax,%rdi
    5d0f:	e8 8c f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    5d14:	49 89 c4             	mov    %rax,%r12
    5d17:	48 89 df             	mov    %rbx,%rdi
    5d1a:	e8 31 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d1f:	4c 89 e0             	mov    %r12,%rax
    5d22:	48 89 c7             	mov    %rax,%rdi
    5d25:	e8 76 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    5d2a:	49 89 c4             	mov    %rax,%r12
    5d2d:	48 89 df             	mov    %rbx,%rdi
    5d30:	e8 1b f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d35:	4c 89 e0             	mov    %r12,%rax
    5d38:	48 89 c7             	mov    %rax,%rdi
    5d3b:	e8 60 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    5d40:	49 89 c4             	mov    %rax,%r12
    5d43:	48 89 df             	mov    %rbx,%rdi
    5d46:	e8 05 f4 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d4b:	4c 89 e0             	mov    %r12,%rax
    5d4e:	48 89 c7             	mov    %rax,%rdi
    5d51:	e8 4a f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    5d56:	49 89 c4             	mov    %rax,%r12
    5d59:	48 89 df             	mov    %rbx,%rdi
    5d5c:	e8 ef f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d61:	4c 89 e0             	mov    %r12,%rax
    5d64:	48 89 c7             	mov    %rax,%rdi
    5d67:	e8 34 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    5d6c:	49 89 c4             	mov    %rax,%r12
    5d6f:	48 89 df             	mov    %rbx,%rdi
    5d72:	e8 d9 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d77:	4c 89 e0             	mov    %r12,%rax
    5d7a:	48 89 c7             	mov    %rax,%rdi
    5d7d:	e8 1e f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    5d82:	49 89 c4             	mov    %rax,%r12
    5d85:	48 89 df             	mov    %rbx,%rdi
    5d88:	e8 c3 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5d8d:	4c 89 e0             	mov    %r12,%rax
    5d90:	48 89 c7             	mov    %rax,%rdi
    5d93:	e8 08 f6 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    5d98:	49 89 c4             	mov    %rax,%r12
    5d9b:	48 89 df             	mov    %rbx,%rdi
    5d9e:	e8 ad f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5da3:	4c 89 e0             	mov    %r12,%rax
    5da6:	48 89 c7             	mov    %rax,%rdi
    5da9:	e8 f2 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    5dae:	49 89 c4             	mov    %rax,%r12
    5db1:	48 89 df             	mov    %rbx,%rdi
    5db4:	e8 97 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5db9:	4c 89 e0             	mov    %r12,%rax
    5dbc:	48 89 c7             	mov    %rax,%rdi
    5dbf:	e8 dc f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    5dc4:	49 89 c4             	mov    %rax,%r12
    5dc7:	48 89 df             	mov    %rbx,%rdi
    5dca:	e8 81 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dcf:	4c 89 e0             	mov    %r12,%rax
    5dd2:	48 89 c7             	mov    %rax,%rdi
    5dd5:	e8 c6 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    5dda:	49 89 c4             	mov    %rax,%r12
    5ddd:	48 89 df             	mov    %rbx,%rdi
    5de0:	e8 6b f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5de5:	4c 89 e0             	mov    %r12,%rax
    5de8:	48 89 c7             	mov    %rax,%rdi
    5deb:	e8 b0 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    5df0:	49 89 c4             	mov    %rax,%r12
    5df3:	48 89 df             	mov    %rbx,%rdi
    5df6:	e8 55 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5dfb:	4c 89 e0             	mov    %r12,%rax
    5dfe:	48 89 c7             	mov    %rax,%rdi
    5e01:	e8 9a f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    5e06:	49 89 c4             	mov    %rax,%r12
    5e09:	48 89 df             	mov    %rbx,%rdi
    5e0c:	e8 3f f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e11:	4c 89 e0             	mov    %r12,%rax
    5e14:	48 89 c7             	mov    %rax,%rdi
    5e17:	e8 84 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    5e1c:	49 89 c4             	mov    %rax,%r12
    5e1f:	48 89 df             	mov    %rbx,%rdi
    5e22:	e8 29 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e27:	4c 89 e0             	mov    %r12,%rax
    5e2a:	48 89 c7             	mov    %rax,%rdi
    5e2d:	e8 6e f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    5e32:	49 89 c4             	mov    %rax,%r12
    5e35:	48 89 df             	mov    %rbx,%rdi
    5e38:	e8 13 f3 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e3d:	4c 89 e0             	mov    %r12,%rax
    5e40:	48 89 c7             	mov    %rax,%rdi
    5e43:	e8 58 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    5e48:	49 89 c4             	mov    %rax,%r12
    5e4b:	48 89 df             	mov    %rbx,%rdi
    5e4e:	e8 fd f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e53:	4c 89 e0             	mov    %r12,%rax
    5e56:	48 89 c7             	mov    %rax,%rdi
    5e59:	e8 42 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    5e5e:	49 89 c4             	mov    %rax,%r12
    5e61:	48 89 df             	mov    %rbx,%rdi
    5e64:	e8 e7 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e69:	4c 89 e0             	mov    %r12,%rax
    5e6c:	48 89 c7             	mov    %rax,%rdi
    5e6f:	e8 2c f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    5e74:	49 89 c4             	mov    %rax,%r12
    5e77:	48 89 df             	mov    %rbx,%rdi
    5e7a:	e8 d1 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e7f:	4c 89 e0             	mov    %r12,%rax
    5e82:	48 89 c7             	mov    %rax,%rdi
    5e85:	e8 16 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    5e8a:	49 89 c4             	mov    %rax,%r12
    5e8d:	48 89 df             	mov    %rbx,%rdi
    5e90:	e8 bb f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5e95:	4c 89 e0             	mov    %r12,%rax
    5e98:	48 89 c7             	mov    %rax,%rdi
    5e9b:	e8 00 f5 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    5ea0:	49 89 c4             	mov    %rax,%r12
    5ea3:	48 89 df             	mov    %rbx,%rdi
    5ea6:	e8 a5 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eab:	4c 89 e0             	mov    %r12,%rax
    5eae:	48 89 c7             	mov    %rax,%rdi
    5eb1:	e8 ea f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    5eb6:	49 89 c4             	mov    %rax,%r12
    5eb9:	48 89 df             	mov    %rbx,%rdi
    5ebc:	e8 8f f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ec1:	4c 89 e0             	mov    %r12,%rax
    5ec4:	48 89 c7             	mov    %rax,%rdi
    5ec7:	e8 d4 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    5ecc:	49 89 c4             	mov    %rax,%r12
    5ecf:	48 89 df             	mov    %rbx,%rdi
    5ed2:	e8 79 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5ed7:	4c 89 e0             	mov    %r12,%rax
    5eda:	48 89 c7             	mov    %rax,%rdi
    5edd:	e8 be f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    5ee2:	49 89 c4             	mov    %rax,%r12
    5ee5:	48 89 df             	mov    %rbx,%rdi
    5ee8:	e8 63 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5eed:	4c 89 e0             	mov    %r12,%rax
    5ef0:	48 89 c7             	mov    %rax,%rdi
    5ef3:	e8 a8 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    5ef8:	49 89 c4             	mov    %rax,%r12
    5efb:	48 89 df             	mov    %rbx,%rdi
    5efe:	e8 4d f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f03:	4c 89 e0             	mov    %r12,%rax
    5f06:	48 89 c7             	mov    %rax,%rdi
    5f09:	e8 92 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    5f0e:	49 89 c4             	mov    %rax,%r12
    5f11:	48 89 df             	mov    %rbx,%rdi
    5f14:	e8 37 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f19:	4c 89 e0             	mov    %r12,%rax
    5f1c:	48 89 c7             	mov    %rax,%rdi
    5f1f:	e8 7c f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    5f24:	49 89 c4             	mov    %rax,%r12
    5f27:	48 89 df             	mov    %rbx,%rdi
    5f2a:	e8 21 f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f2f:	4c 89 e0             	mov    %r12,%rax
    5f32:	48 89 c7             	mov    %rax,%rdi
    5f35:	e8 66 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    5f3a:	49 89 c4             	mov    %rax,%r12
    5f3d:	48 89 df             	mov    %rbx,%rdi
    5f40:	e8 0b f2 ff ff       	call   5150 <__cxa_free_exception@plt>
    5f45:	4c 89 e0             	mov    %r12,%rax
    5f48:	48 89 c7             	mov    %rax,%rdi
    5f4b:	e8 50 f4 ff ff       	call   53a0 <_Unwind_Resume@plt>

0000000000005f50 <_Z14protected_mainv>:
#include <vulkan_app.hpp>

#include <iostream>

int protected_main() {
    5f50:	55                   	push   %rbp
    5f51:	48 89 e5             	mov    %rsp,%rbp
    5f54:	41 55                	push   %r13
    5f56:	41 54                	push   %r12
    5f58:	53                   	push   %rbx
    5f59:	48 83 ec 18          	sub    $0x18,%rsp
  auto app = new rtvc::VulkanApp{};
    5f5d:	bf d8 00 00 00       	mov    $0xd8,%edi
    5f62:	e8 b9 f2 ff ff       	call   5220 <_Znwm@plt>
    5f67:	48 89 c3             	mov    %rax,%rbx
    5f6a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    5f70:	48 89 de             	mov    %rbx,%rsi
    5f73:	b8 00 00 00 00       	mov    $0x0,%eax
    5f78:	ba 1b 00 00 00       	mov    $0x1b,%edx
    5f7d:	48 89 f7             	mov    %rsi,%rdi
    5f80:	48 89 d1             	mov    %rdx,%rcx
    5f83:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    5f86:	48 89 df             	mov    %rbx,%rdi
    5f89:	e8 c0 3b 00 00       	call   9b4e <_ZN4rtvc9VulkanAppC1Ev>
    5f8e:	48 89 5d d8          	mov    %rbx,-0x28(%rbp)
  app->render();
    5f92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f96:	48 89 c7             	mov    %rax,%rdi
    5f99:	e8 74 3b 00 00       	call   9b12 <_ZN4rtvc9VulkanApp6renderEv>
  delete app;
    5f9e:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    5fa2:	48 85 db             	test   %rbx,%rbx
    5fa5:	74 15                	je     5fbc <_Z14protected_mainv+0x6c>
    5fa7:	48 89 df             	mov    %rbx,%rdi
    5faa:	e8 11 3d 00 00       	call   9cc0 <_ZN4rtvc9VulkanAppD1Ev>
    5faf:	be d8 00 00 00       	mov    $0xd8,%esi
    5fb4:	48 89 df             	mov    %rbx,%rdi
    5fb7:	e8 74 f2 ff ff       	call   5230 <_ZdlPvm@plt>
  return EXIT_SUCCESS;
    5fbc:	b8 00 00 00 00       	mov    $0x0,%eax
    5fc1:	eb 20                	jmp    5fe3 <_Z14protected_mainv+0x93>
  auto app = new rtvc::VulkanApp{};
    5fc3:	49 89 c4             	mov    %rax,%r12
    5fc6:	45 84 ed             	test   %r13b,%r13b
    5fc9:	74 0d                	je     5fd8 <_Z14protected_mainv+0x88>
    5fcb:	be d8 00 00 00       	mov    $0xd8,%esi
    5fd0:	48 89 df             	mov    %rbx,%rdi
    5fd3:	e8 58 f2 ff ff       	call   5230 <_ZdlPvm@plt>
    5fd8:	4c 89 e0             	mov    %r12,%rax
    5fdb:	48 89 c7             	mov    %rax,%rdi
    5fde:	e8 bd f3 ff ff       	call   53a0 <_Unwind_Resume@plt>
}
    5fe3:	48 83 c4 18          	add    $0x18,%rsp
    5fe7:	5b                   	pop    %rbx
    5fe8:	41 5c                	pop    %r12
    5fea:	41 5d                	pop    %r13
    5fec:	5d                   	pop    %rbp
    5fed:	c3                   	ret

0000000000005fee <main>:

int main() {
    5fee:	55                   	push   %rbp
    5fef:	48 89 e5             	mov    %rsp,%rbp
    5ff2:	53                   	push   %rbx
    5ff3:	48 83 ec 18          	sub    $0x18,%rsp
  try {
    return protected_main();
    5ff7:	e8 54 ff ff ff       	call   5f50 <_Z14protected_mainv>
    5ffc:	e9 30 01 00 00       	jmp    6131 <main+0x143>
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  } catch (...) {
    std::cerr << "Uncaught exception" << std::endl;
  }
  return EXIT_FAILURE;
    6001:	b8 01 00 00 00       	mov    $0x1,%eax
    6006:	e9 26 01 00 00       	jmp    6131 <main+0x143>
  } catch (vk::SystemError &e) {
    600b:	48 83 fa 01          	cmp    $0x1,%rdx
    600f:	74 0b                	je     601c <main+0x2e>
    6011:	48 83 fa 02          	cmp    $0x2,%rdx
    6015:	74 53                	je     606a <main+0x7c>
    6017:	e9 9f 00 00 00       	jmp    60bb <main+0xcd>
    601c:	48 89 c7             	mov    %rax,%rdi
    601f:	e8 7c f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6024:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    std::cerr << e.what() << std::endl;
    6028:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    602c:	48 8b 00             	mov    (%rax),%rax
    602f:	48 83 c0 10          	add    $0x10,%rax
    6033:	48 8b 10             	mov    (%rax),%rdx
    6036:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    603a:	48 89 c7             	mov    %rax,%rdi
    603d:	ff d2                	call   *%rdx
    603f:	48 89 c6             	mov    %rax,%rsi
    6042:	48 8d 05 f7 d1 02 00 	lea    0x2d1f7(%rip),%rax        # 33240 <_ZSt4cerr@GLIBCXX_3.4>
    6049:	48 89 c7             	mov    %rax,%rdi
    604c:	e8 bf f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    6051:	48 8b 15 48 cf 02 00 	mov    0x2cf48(%rip),%rdx        # 32fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    6058:	48 89 d6             	mov    %rdx,%rsi
    605b:	48 89 c7             	mov    %rax,%rdi
    605e:	e8 fd f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (std::exception &e) {
    6063:	e8 08 f3 ff ff       	call   5370 <__cxa_end_catch@plt>
    6068:	eb 97                	jmp    6001 <main+0x13>
    606a:	48 89 c7             	mov    %rax,%rdi
    606d:	e8 2e f0 ff ff       	call   50a0 <__cxa_begin_catch@plt>
    6072:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    std::cerr << e.what() << std::endl;
    6076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    607a:	48 8b 00             	mov    (%rax),%rax
    607d:	48 83 c0 10          	add    $0x10,%rax
    6081:	48 8b 10             	mov    (%rax),%rdx
    6084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6088:	48 89 c7             	mov    %rax,%rdi
    608b:	ff d2                	call   *%rdx
    608d:	48 89 c6             	mov    %rax,%rsi
    6090:	48 8d 05 a9 d1 02 00 	lea    0x2d1a9(%rip),%rax        # 33240 <_ZSt4cerr@GLIBCXX_3.4>
    6097:	48 89 c7             	mov    %rax,%rdi
    609a:	e8 71 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    609f:	48 8b 15 fa ce 02 00 	mov    0x2cefa(%rip),%rdx        # 32fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60a6:	48 89 d6             	mov    %rdx,%rsi
    60a9:	48 89 c7             	mov    %rax,%rdi
    60ac:	e8 af f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  } catch (...) {
    60b1:	e8 ba f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60b6:	e9 46 ff ff ff       	jmp    6001 <main+0x13>
    60bb:	48 89 c7             	mov    %rax,%rdi
    60be:	e8 dd ef ff ff       	call   50a0 <__cxa_begin_catch@plt>
    std::cerr << "Uncaught exception" << std::endl;
    60c3:	48 8d 05 48 bc 01 00 	lea    0x1bc48(%rip),%rax        # 21d12 <_ZNSt8__detailL19__atomic_spin_countE+0x2ae>
    60ca:	48 89 c6             	mov    %rax,%rsi
    60cd:	48 8d 05 6c d1 02 00 	lea    0x2d16c(%rip),%rax        # 33240 <_ZSt4cerr@GLIBCXX_3.4>
    60d4:	48 89 c7             	mov    %rax,%rdi
    60d7:	e8 34 f1 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    60dc:	48 8b 15 bd ce 02 00 	mov    0x2cebd(%rip),%rdx        # 32fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    60e3:	48 89 d6             	mov    %rdx,%rsi
    60e6:	48 89 c7             	mov    %rax,%rdi
    60e9:	e8 72 f1 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
    60ee:	e8 7d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    60f3:	e9 09 ff ff ff       	jmp    6001 <main+0x13>
  } catch (std::exception &e) {
    60f8:	48 89 c3             	mov    %rax,%rbx
    60fb:	e8 70 f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6100:	48 89 d8             	mov    %rbx,%rax
    6103:	48 89 c7             	mov    %rax,%rdi
    6106:	e8 95 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  } catch (...) {
    610b:	48 89 c3             	mov    %rax,%rbx
    610e:	e8 5d f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6113:	48 89 d8             	mov    %rbx,%rax
    6116:	48 89 c7             	mov    %rax,%rdi
    6119:	e8 82 f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
  }
    611e:	48 89 c3             	mov    %rax,%rbx
    6121:	e8 4a f2 ff ff       	call   5370 <__cxa_end_catch@plt>
    6126:	48 89 d8             	mov    %rbx,%rax
    6129:	48 89 c7             	mov    %rax,%rdi
    612c:	e8 6f f2 ff ff       	call   53a0 <_Unwind_Resume@plt>
    6131:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6135:	c9                   	leave
    6136:	c3                   	ret

0000000000006137 <_Z41__static_initialization_and_destruction_0ii>:
    6137:	55                   	push   %rbp
    6138:	48 89 e5             	mov    %rsp,%rbp
    613b:	48 83 ec 10          	sub    $0x10,%rsp
    613f:	89 7d fc             	mov    %edi,-0x4(%rbp)
    6142:	89 75 f8             	mov    %esi,-0x8(%rbp)
    6145:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    6149:	75 3b                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
    614b:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    6152:	75 32                	jne    6186 <_Z41__static_initialization_and_destruction_0ii+0x4f>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    6154:	48 8d 05 f6 d1 02 00 	lea    0x2d1f6(%rip),%rax        # 33351 <_ZStL8__ioinit>
    615b:	48 89 c7             	mov    %rax,%rdi
    615e:	e8 cd f1 ff ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
    6163:	48 8d 05 8e d0 02 00 	lea    0x2d08e(%rip),%rax        # 331f8 <__dso_handle>
    616a:	48 89 c2             	mov    %rax,%rdx
    616d:	48 8d 05 dd d1 02 00 	lea    0x2d1dd(%rip),%rax        # 33351 <_ZStL8__ioinit>
    6174:	48 89 c6             	mov    %rax,%rsi
    6177:	48 8b 05 52 ce 02 00 	mov    0x2ce52(%rip),%rax        # 32fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    617e:	48 89 c7             	mov    %rax,%rdi
    6181:	e8 4a f0 ff ff       	call   51d0 <__cxa_atexit@plt>
    6186:	90                   	nop
    6187:	c9                   	leave
    6188:	c3                   	ret

0000000000006189 <_GLOBAL__sub_I__Z14protected_mainv>:
    6189:	55                   	push   %rbp
    618a:	48 89 e5             	mov    %rsp,%rbp
    618d:	be ff ff 00 00       	mov    $0xffff,%esi
    6192:	bf 01 00 00 00       	mov    $0x1,%edi
    6197:	e8 9b ff ff ff       	call   6137 <_Z41__static_initialization_and_destruction_0ii>
    619c:	5d                   	pop    %rbp
    619d:	c3                   	ret

000000000000619e <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    619e:	55                   	push   %rbp
    619f:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    61a2:	b8 00 00 00 00       	mov    $0x0,%eax
#else
    return false;
#endif
  }
    61a7:	5d                   	pop    %rbp
    61a8:	c3                   	ret

00000000000061a9 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
    61a9:	55                   	push   %rbp
    61aa:	48 89 e5             	mov    %rsp,%rbp
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
    61ad:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
  }
    61b2:	5d                   	pop    %rbp
    61b3:	c3                   	ret

00000000000061b4 <_ZnwmPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    61b4:	55                   	push   %rbp
    61b5:	48 89 e5             	mov    %rsp,%rbp
    61b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    61c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61c4:	5d                   	pop    %rbp
    61c5:	c3                   	ret

00000000000061c6 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    61c6:	55                   	push   %rbp
    61c7:	48 89 e5             	mov    %rsp,%rbp
    61ca:	48 83 ec 10          	sub    $0x10,%rsp
    61ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    61d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
    61d6:	e8 c3 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    61db:	84 c0                	test   %al,%al
    61dd:	74 15                	je     61f4 <_ZNSt11char_traitsIcE6assignERcRKc+0x2e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
    61df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    61e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61e7:	48 89 d6             	mov    %rdx,%rsi
    61ea:	48 89 c7             	mov    %rax,%rdi
    61ed:	e8 5b 3b 00 00       	call   9d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
    61f2:	eb 0d                	jmp    6201 <_ZNSt11char_traitsIcE6assignERcRKc+0x3b>
	__c1 = __c2;
    61f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    61f8:	0f b6 10             	movzbl (%rax),%edx
    61fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    61ff:	88 10                	mov    %dl,(%rax)
      }
    6201:	90                   	nop
    6202:	c9                   	leave
    6203:	c3                   	ret

0000000000006204 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    6204:	55                   	push   %rbp
    6205:	48 89 e5             	mov    %rsp,%rbp
    6208:	48 83 ec 10          	sub    $0x10,%rsp
    620c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    6210:	e8 89 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    6215:	84 c0                	test   %al,%al
    6217:	74 0e                	je     6227 <_ZNSt11char_traitsIcE6lengthEPKc+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    6219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    621d:	48 89 c7             	mov    %rax,%rdi
    6220:	e8 6d 37 00 00       	call   9992 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
    6225:	eb 0d                	jmp    6234 <_ZNSt11char_traitsIcE6lengthEPKc+0x30>
#endif
	return __builtin_strlen(__s);
    6227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    622b:	48 89 c7             	mov    %rax,%rdi
    622e:	e8 7d ee ff ff       	call   50b0 <strlen@plt>
    6233:	90                   	nop
      }
    6234:	c9                   	leave
    6235:	c3                   	ret

0000000000006236 <_ZNSt11char_traitsIcE4moveEPcPKcm>:
#endif
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
    6236:	55                   	push   %rbp
    6237:	48 89 e5             	mov    %rsp,%rbp
    623a:	48 83 ec 20          	sub    $0x20,%rsp
    623e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6242:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    6246:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    624a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    624f:	75 06                	jne    6257 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x21>
	  return __s1;
    6251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6255:	eb 3a                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    6257:	e8 42 ff ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    625c:	84 c0                	test   %al,%al
    625e:	74 19                	je     6279 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
    6260:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6264:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    626c:	48 89 ce             	mov    %rcx,%rsi
    626f:	48 89 c7             	mov    %rax,%rdi
    6272:	e8 15 3b 00 00       	call   9d8c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>
    6277:	eb 18                	jmp    6291 <_ZNSt11char_traitsIcE4moveEPcPKcm+0x5b>
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    6279:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    627d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6285:	48 89 ce             	mov    %rcx,%rsi
    6288:	48 89 c7             	mov    %rax,%rdi
    628b:	e8 d0 f0 ff ff       	call   5360 <memmove@plt>
    6290:	90                   	nop
      }
    6291:	c9                   	leave
    6292:	c3                   	ret

0000000000006293 <_ZNSt11char_traitsIcE4copyEPcPKcm>:

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
    6293:	55                   	push   %rbp
    6294:	48 89 e5             	mov    %rsp,%rbp
    6297:	48 83 ec 20          	sub    $0x20,%rsp
    629b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    629f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    62a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__n == 0)
    62a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    62ac:	75 06                	jne    62b4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x21>
	  return __s1;
    62ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62b2:	eb 40                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
    62b4:	e8 e5 fe ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    62b9:	84 c0                	test   %al,%al
    62bb:	74 19                	je     62d6 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x43>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
    62bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    62c1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    62c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    62c9:	48 89 ce             	mov    %rcx,%rsi
    62cc:	48 89 c7             	mov    %rax,%rdi
    62cf:	e8 6a 3b 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
    62d4:	eb 1e                	jmp    62f4 <_ZNSt11char_traitsIcE4copyEPcPKcm+0x61>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    62d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    62da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    62de:	48 89 d1             	mov    %rdx,%rcx
    62e1:	48 89 c6             	mov    %rax,%rsi
    62e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62e8:	48 89 c2             	mov    %rax,%rdx
    62eb:	48 89 cf             	mov    %rcx,%rdi
    62ee:	e8 ad ee ff ff       	call   51a0 <memcpy@plt>
    62f3:	90                   	nop
      }
    62f4:	c9                   	leave
    62f5:	c3                   	ret

00000000000062f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
    62f6:	55                   	push   %rbp
    62f7:	48 89 e5             	mov    %rsp,%rbp
    62fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    62fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6302:	48 8b 40 08          	mov    0x8(%rax),%rax
    6306:	5d                   	pop    %rbp
    6307:	c3                   	ret

0000000000006308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>:
  {
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    6308:	55                   	push   %rbp
    6309:	48 89 e5             	mov    %rsp,%rbp
    630c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6310:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6313:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    : _M_value(__v), _M_cat(&__cat) { }
    6317:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    631b:	8b 55 f4             	mov    -0xc(%rbp),%edx
    631e:	89 10                	mov    %edx,(%rax)
    6320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6324:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6328:	48 89 50 08          	mov    %rdx,0x8(%rax)
    632c:	90                   	nop
    632d:	5d                   	pop    %rbp
    632e:	c3                   	ret
    632f:	90                   	nop

0000000000006330 <_ZNKSt10error_code5valueEv>:
			 error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }
    6330:	55                   	push   %rbp
    6331:	48 89 e5             	mov    %rsp,%rbp
    6334:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    633c:	8b 00                	mov    (%rax),%eax
    633e:	5d                   	pop    %rbp
    633f:	c3                   	ret

0000000000006340 <_ZNKSt10error_code8categoryEv>:

    const error_category&
    category() const noexcept { return *_M_cat; }
    6340:	55                   	push   %rbp
    6341:	48 89 e5             	mov    %rsp,%rbp
    6344:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    634c:	48 8b 40 08          	mov    0x8(%rax),%rax
    6350:	5d                   	pop    %rbp
    6351:	c3                   	ret

0000000000006352 <_ZNKSt10error_code7messageB5cxx11Ev>:
    error_condition
    default_error_condition() const noexcept;

    _GLIBCXX_DEFAULT_ABI_TAG
    string
    message() const
    6352:	55                   	push   %rbp
    6353:	48 89 e5             	mov    %rsp,%rbp
    6356:	41 54                	push   %r12
    6358:	53                   	push   %rbx
    6359:	48 83 ec 10          	sub    $0x10,%rsp
    635d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6361:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return category().message(value()); }
    6365:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6369:	48 89 c7             	mov    %rax,%rdi
    636c:	e8 cf ff ff ff       	call   6340 <_ZNKSt10error_code8categoryEv>
    6371:	48 89 c3             	mov    %rax,%rbx
    6374:	48 8b 03             	mov    (%rbx),%rax
    6377:	48 83 c0 20          	add    $0x20,%rax
    637b:	4c 8b 20             	mov    (%rax),%r12
    637e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6382:	48 89 c7             	mov    %rax,%rdi
    6385:	e8 a6 ff ff ff       	call   6330 <_ZNKSt10error_code5valueEv>
    638a:	89 c2                	mov    %eax,%edx
    638c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6390:	48 89 de             	mov    %rbx,%rsi
    6393:	48 89 c7             	mov    %rax,%rdi
    6396:	41 ff d4             	call   *%r12
    6399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    639d:	48 83 c4 10          	add    $0x10,%rsp
    63a1:	5b                   	pop    %rbx
    63a2:	41 5c                	pop    %r12
    63a4:	5d                   	pop    %rbp
    63a5:	c3                   	ret

00000000000063a6 <_ZNSt12system_errorC1ESt10error_code>:
  {
  private:
    error_code 	_M_code;

  public:
    system_error(error_code __ec = error_code())
    63a6:	55                   	push   %rbp
    63a7:	48 89 e5             	mov    %rsp,%rbp
    63aa:	53                   	push   %rbx
    63ab:	48 83 ec 48          	sub    $0x48,%rsp
    63af:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    63b3:	48 89 d1             	mov    %rdx,%rcx
    63b6:	48 89 f0             	mov    %rsi,%rax
    63b9:	48 89 fa             	mov    %rdi,%rdx
    63bc:	48 89 ca             	mov    %rcx,%rdx
    63bf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    63c3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    : runtime_error(__ec.message()), _M_code(__ec) { }
    63c7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    63cb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    63d3:	48 89 d6             	mov    %rdx,%rsi
    63d6:	48 89 c7             	mov    %rax,%rdi
    63d9:	e8 74 ff ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    63de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63e2:	48 89 c6             	mov    %rax,%rsi
    63e5:	48 89 df             	mov    %rbx,%rdi
    63e8:	e8 c3 ee ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    63ed:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    63f1:	48 89 c7             	mov    %rax,%rdi
    63f4:	e8 df 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    63f9:	48 8d 15 d8 c5 02 00 	lea    0x2c5d8(%rip),%rdx        # 329d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    6400:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6404:	48 89 10             	mov    %rdx,(%rax)
    6407:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    640b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    640f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6413:	48 89 41 10          	mov    %rax,0x10(%rcx)
    6417:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    641b:	eb 1a                	jmp    6437 <_ZNSt12system_errorC1ESt10error_code+0x91>
    641d:	48 89 c3             	mov    %rax,%rbx
    6420:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6424:	48 89 c7             	mov    %rax,%rdi
    6427:	e8 ac 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    642c:	48 89 d8             	mov    %rbx,%rax
    642f:	48 89 c7             	mov    %rax,%rdi
    6432:	e8 69 ef ff ff       	call   53a0 <_Unwind_Resume@plt>
    6437:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    643b:	c9                   	leave
    643c:	c3                   	ret
    643d:	90                   	nop

000000000000643e <_ZNSt12system_errorC1ESt10error_codePKc>:

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    643e:	55                   	push   %rbp
    643f:	48 89 e5             	mov    %rsp,%rbp
    6442:	53                   	push   %rbx
    6443:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    644a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    644e:	89 f0                	mov    %esi,%eax
    6450:	48 89 d6             	mov    %rdx,%rsi
    6453:	48 89 f2             	mov    %rsi,%rdx
    6456:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    645d:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    6464:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
    6468:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
    646c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6470:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6477:	48 89 d6             	mov    %rdx,%rsi
    647a:	48 89 c7             	mov    %rax,%rdi
    647d:	e8 d0 fe ff ff       	call   6352 <_ZNKSt10error_code7messageB5cxx11Ev>
    6482:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6486:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    648a:	48 8d 0d af b1 01 00 	lea    0x1b1af(%rip),%rcx        # 21640 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8>
    6491:	48 89 ce             	mov    %rcx,%rsi
    6494:	48 89 c7             	mov    %rax,%rdi
    6497:	e8 88 3b 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    649c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64a0:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    64a4:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    64a8:	48 89 ce             	mov    %rcx,%rsi
    64ab:	48 89 c7             	mov    %rax,%rdi
    64ae:	e8 71 3b 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    64b3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64b7:	48 89 c6             	mov    %rax,%rsi
    64ba:	48 89 df             	mov    %rbx,%rdi
    64bd:	e8 ee ed ff ff       	call   52b0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
    64c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    64c6:	48 89 c7             	mov    %rax,%rdi
    64c9:	e8 0a 3a 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    64d2:	48 89 c7             	mov    %rax,%rdi
    64d5:	e8 fe 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    64de:	48 89 c7             	mov    %rax,%rdi
    64e1:	e8 f2 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    64e6:	48 8d 15 eb c4 02 00 	lea    0x2c4eb(%rip),%rdx        # 329d8 <_ZTVSt12system_error@GLIBCXX_3.4.11+0x10>
    64ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    64f1:	48 89 10             	mov    %rdx,(%rax)
    64f4:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    64f8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    64ff:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6506:	48 89 41 10          	mov    %rax,0x10(%rcx)
    650a:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    650e:	eb 3c                	jmp    654c <_ZNSt12system_errorC1ESt10error_codePKc+0x10e>
    6510:	48 89 c3             	mov    %rax,%rbx
    6513:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6517:	48 89 c7             	mov    %rax,%rdi
    651a:	e8 b9 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    651f:	eb 03                	jmp    6524 <_ZNSt12system_errorC1ESt10error_codePKc+0xe6>
    6521:	48 89 c3             	mov    %rax,%rbx
    6524:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6528:	48 89 c7             	mov    %rax,%rdi
    652b:	e8 a8 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6530:	eb 03                	jmp    6535 <_ZNSt12system_errorC1ESt10error_codePKc+0xf7>
    6532:	48 89 c3             	mov    %rax,%rbx
    6535:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6539:	48 89 c7             	mov    %rax,%rdi
    653c:	e8 97 39 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    6541:	48 89 d8             	mov    %rbx,%rax
    6544:	48 89 c7             	mov    %rax,%rdi
    6547:	e8 54 ee ff ff       	call   53a0 <_Unwind_Resume@plt>
    654c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    6550:	c9                   	leave
    6551:	c3                   	ret

0000000000006552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>:
    size_t getVkHeaderVersion() const
    6552:	55                   	push   %rbp
    6553:	48 89 e5             	mov    %rsp,%rbp
    6556:	48 83 ec 10          	sub    $0x10,%rsp
    655a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      VULKAN_HPP_ASSERT( m_valid );
    655e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6562:	0f b6 40 08          	movzbl 0x8(%rax),%eax
    6566:	84 c0                	test   %al,%al
    6568:	75 28                	jne    6592 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv+0x40>
    656a:	48 8d 05 d7 b0 01 00 	lea    0x1b0d7(%rip),%rax        # 21648 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x10>
    6571:	48 89 c1             	mov    %rax,%rcx
    6574:	ba 16 05 00 00       	mov    $0x516,%edx
    6579:	48 8d 05 08 b1 01 00 	lea    0x1b108(%rip),%rax        # 21688 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x50>
    6580:	48 89 c6             	mov    %rax,%rsi
    6583:	48 8d 05 1d b1 01 00 	lea    0x1b11d(%rip),%rax        # 216a7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x6f>
    658a:	48 89 c7             	mov    %rax,%rdi
    658d:	e8 7e eb ff ff       	call   5110 <__assert_fail@plt>
      return vkHeaderVersion;
    6592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6596:	48 8b 00             	mov    (%rax),%rax
    }
    6599:	c9                   	leave
    659a:	c3                   	ret
    659b:	90                   	nop

000000000000659c <_ZN2vk18DispatchLoaderBaseC1Ev>:
    DispatchLoaderBase() = default;
    659c:	55                   	push   %rbp
    659d:	48 89 e5             	mov    %rsp,%rbp
    65a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65a8:	48 c7 00 e7 00 00 00 	movq   $0xe7,(%rax)
    65af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65b3:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    65b7:	90                   	nop
    65b8:	5d                   	pop    %rbp
    65b9:	c3                   	ret

00000000000065ba <_ZStanSt13_Ios_FmtflagsS_>:
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
    65ba:	55                   	push   %rbp
    65bb:	48 89 e5             	mov    %rsp,%rbp
    65be:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65c1:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65c7:	23 45 f8             	and    -0x8(%rbp),%eax
    65ca:	5d                   	pop    %rbp
    65cb:	c3                   	ret

00000000000065cc <_ZStorSt13_Ios_FmtflagsS_>:

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
    65cc:	55                   	push   %rbp
    65cd:	48 89 e5             	mov    %rsp,%rbp
    65d0:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65d3:	89 75 f8             	mov    %esi,-0x8(%rbp)
    65d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65d9:	0b 45 f8             	or     -0x8(%rbp),%eax
    65dc:	5d                   	pop    %rbp
    65dd:	c3                   	ret

00000000000065de <_ZStcoSt13_Ios_Fmtflags>:
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }
    65de:	55                   	push   %rbp
    65df:	48 89 e5             	mov    %rsp,%rbp
    65e2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    65e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
    65e8:	f7 d0                	not    %eax
    65ea:	5d                   	pop    %rbp
    65eb:	c3                   	ret

00000000000065ec <_ZStoRRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }
    65ec:	55                   	push   %rbp
    65ed:	48 89 e5             	mov    %rsp,%rbp
    65f0:	48 83 ec 10          	sub    $0x10,%rsp
    65f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    65f8:	89 75 f4             	mov    %esi,-0xc(%rbp)
    65fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    65ff:	8b 00                	mov    (%rax),%eax
    6601:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6604:	89 d6                	mov    %edx,%esi
    6606:	89 c7                	mov    %eax,%edi
    6608:	e8 bf ff ff ff       	call   65cc <_ZStorSt13_Ios_FmtflagsS_>
    660d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6611:	89 02                	mov    %eax,(%rdx)
    6613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6617:	c9                   	leave
    6618:	c3                   	ret

0000000000006619 <_ZStaNRSt13_Ios_FmtflagsS_>:

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }
    6619:	55                   	push   %rbp
    661a:	48 89 e5             	mov    %rsp,%rbp
    661d:	48 83 ec 10          	sub    $0x10,%rsp
    6621:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6625:	89 75 f4             	mov    %esi,-0xc(%rbp)
    6628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    662c:	8b 00                	mov    (%rax),%eax
    662e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6631:	89 d6                	mov    %edx,%esi
    6633:	89 c7                	mov    %eax,%edi
    6635:	e8 80 ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    663a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    663e:	89 02                	mov    %eax,(%rdx)
    6640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6644:	c9                   	leave
    6645:	c3                   	ret

0000000000006646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>:
     *
     *  This function clears @a mask in the format flags, then sets
     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
    */
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    6646:	55                   	push   %rbp
    6647:	48 89 e5             	mov    %rsp,%rbp
    664a:	48 83 ec 20          	sub    $0x20,%rsp
    664e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6652:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    6655:	89 55 e0             	mov    %edx,-0x20(%rbp)
    {
      fmtflags __old = _M_flags;
    6658:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    665c:	8b 40 18             	mov    0x18(%rax),%eax
    665f:	89 45 fc             	mov    %eax,-0x4(%rbp)
      _M_flags &= ~__mask;
    6662:	8b 45 e0             	mov    -0x20(%rbp),%eax
    6665:	89 c7                	mov    %eax,%edi
    6667:	e8 72 ff ff ff       	call   65de <_ZStcoSt13_Ios_Fmtflags>
    666c:	89 c2                	mov    %eax,%edx
    666e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6672:	48 83 c0 18          	add    $0x18,%rax
    6676:	89 d6                	mov    %edx,%esi
    6678:	48 89 c7             	mov    %rax,%rdi
    667b:	e8 99 ff ff ff       	call   6619 <_ZStaNRSt13_Ios_FmtflagsS_>
      _M_flags |= (__fmtfl & __mask);
    6680:	8b 55 e0             	mov    -0x20(%rbp),%edx
    6683:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    6686:	89 d6                	mov    %edx,%esi
    6688:	89 c7                	mov    %eax,%edi
    668a:	e8 2b ff ff ff       	call   65ba <_ZStanSt13_Ios_FmtflagsS_>
    668f:	89 c2                	mov    %eax,%edx
    6691:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6695:	48 83 c0 18          	add    $0x18,%rax
    6699:	89 d6                	mov    %edx,%esi
    669b:	48 89 c7             	mov    %rax,%rdi
    669e:	e8 49 ff ff ff       	call   65ec <_ZStoRRSt13_Ios_FmtflagsS_>
      return __old;
    66a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
    66a6:	c9                   	leave
    66a7:	c3                   	ret

00000000000066a8 <_ZSt3hexRSt8ios_base>:
  }

  /// Calls base.setf(ios_base::hex, ios_base::basefield).
  inline ios_base&
  hex(ios_base& __base)
  {
    66a8:	55                   	push   %rbp
    66a9:	48 89 e5             	mov    %rsp,%rbp
    66ac:	48 83 ec 10          	sub    $0x10,%rsp
    66b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __base.setf(ios_base::hex, ios_base::basefield);
    66b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66b8:	ba 4a 00 00 00       	mov    $0x4a,%edx
    66bd:	be 08 00 00 00       	mov    $0x8,%esi
    66c2:	48 89 c7             	mov    %rax,%rdi
    66c5:	e8 7c ff ff ff       	call   6646 <_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_>
    return __base;
    66ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  }
    66ce:	c9                   	leave
    66cf:	c3                   	ret

00000000000066d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      struct _Alloc_hider : allocator_type // TODO check __is_final
    66d0:	55                   	push   %rbp
    66d1:	48 89 e5             	mov    %rsp,%rbp
    66d4:	48 83 ec 10          	sub    $0x10,%rsp
    66d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    66dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66e0:	48 89 c7             	mov    %rax,%rdi
    66e3:	e8 68 e9 ff ff       	call   5050 <_ZNSaIcED2Ev@plt>
    66e8:	90                   	nop
    66e9:	c9                   	leave
    66ea:	c3                   	ret
    66eb:	90                   	nop

00000000000066ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
    66ec:	55                   	push   %rbp
    66ed:	48 89 e5             	mov    %rsp,%rbp
    66f0:	53                   	push   %rbx
    66f1:	48 83 ec 48          	sub    $0x48,%rsp
    66f5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
      : _M_dataplus(_M_local_data())
    66f9:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
    66fd:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    6701:	48 89 c7             	mov    %rax,%rdi
    6704:	e8 a7 ec ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6709:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    670d:	48 89 c7             	mov    %rax,%rdi
    6710:	e8 97 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6715:	48 89 c1             	mov    %rax,%rcx
    6718:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    671c:	48 89 c2             	mov    %rax,%rdx
    671f:	48 89 ce             	mov    %rcx,%rsi
    6722:	48 89 df             	mov    %rbx,%rdi
    6725:	e8 e2 00 00 00       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
    672a:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    672e:	48 89 c7             	mov    %rax,%rdi
    6731:	e8 3a eb ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6736:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    673a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::is_constant_evaluated())
    673e:	e8 66 fa ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    6743:	84 c0                	test   %al,%al
    6745:	74 40                	je     6787 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x9b>
	  for (_CharT& __c : _M_local_buf)
    6747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    674b:	48 83 c0 10          	add    $0x10,%rax
    674f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    6753:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6757:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    675b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    675f:	48 83 c0 10          	add    $0x10,%rax
    6763:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    6767:	eb 14                	jmp    677d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x91>
    6769:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    676d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	    __c = _CharT();
    6771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6775:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    6778:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    677d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6781:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    6785:	75 e2                	jne    6769 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev+0x7d>
	return _M_local_data();
    6787:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    678b:	48 89 c7             	mov    %rax,%rdi
    678e:	e8 19 00 00 00       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    6793:	90                   	nop
	_M_set_length(0);
    6794:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6798:	be 00 00 00 00       	mov    $0x0,%esi
    679d:	48 89 c7             	mov    %rax,%rdi
    67a0:	e8 69 39 00 00       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    67a5:	90                   	nop
    67a6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    67aa:	c9                   	leave
    67ab:	c3                   	ret

00000000000067ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
    67ac:	55                   	push   %rbp
    67ad:	48 89 e5             	mov    %rsp,%rbp
    67b0:	48 83 ec 10          	sub    $0x10,%rsp
    67b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    67b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67bc:	48 83 c0 10          	add    $0x10,%rax
    67c0:	48 89 c7             	mov    %rax,%rdi
    67c3:	e8 02 00 00 00       	call   67ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
      }
    67c8:	c9                   	leave
    67c9:	c3                   	ret

00000000000067ca <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
    67ca:	55                   	push   %rbp
    67cb:	48 89 e5             	mov    %rsp,%rbp
    67ce:	48 83 ec 10          	sub    $0x10,%rsp
    67d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    67d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67da:	48 89 c7             	mov    %rax,%rdi
    67dd:	e8 02 00 00 00       	call   67e4 <_ZSt9addressofIcEPT_RS0_>
    67e2:	c9                   	leave
    67e3:	c3                   	ret

00000000000067e4 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
    67e4:	55                   	push   %rbp
    67e5:	48 89 e5             	mov    %rsp,%rbp
    67e8:	48 83 ec 10          	sub    $0x10,%rsp
    67ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    67f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67f4:	48 89 c7             	mov    %rax,%rdi
    67f7:	e8 02 00 00 00       	call   67fe <_ZSt11__addressofIcEPT_RS0_>
    67fc:	c9                   	leave
    67fd:	c3                   	ret

00000000000067fe <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    67fe:	55                   	push   %rbp
    67ff:	48 89 e5             	mov    %rsp,%rbp
    6802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    6806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    680a:	5d                   	pop    %rbp
    680b:	c3                   	ret

000000000000680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
    680c:	55                   	push   %rbp
    680d:	48 89 e5             	mov    %rsp,%rbp
    6810:	48 83 ec 20          	sub    $0x20,%rsp
    6814:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    6818:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    681c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
    6820:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6824:	48 89 c7             	mov    %rax,%rdi
    6827:	e8 20 00 00 00       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    682c:	48 89 c2             	mov    %rax,%rdx
    682f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6833:	48 89 d6             	mov    %rdx,%rsi
    6836:	48 89 c7             	mov    %rax,%rdi
    6839:	e8 c2 ea ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    683e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6842:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6846:	48 89 10             	mov    %rdx,(%rax)
    6849:	90                   	nop
    684a:	c9                   	leave
    684b:	c3                   	ret

000000000000684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
    684c:	55                   	push   %rbp
    684d:	48 89 e5             	mov    %rsp,%rbp
    6850:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    6854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6858:	5d                   	pop    %rbp
    6859:	c3                   	ret

000000000000685a <_ZNK2vk17ErrorCategoryImpl4nameEv>:
    virtual const char * name() const VULKAN_HPP_NOEXCEPT override
    685a:	55                   	push   %rbp
    685b:	48 89 e5             	mov    %rsp,%rbp
    685e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return VULKAN_HPP_NAMESPACE_STRING "::Result";
    6862:	48 8d 05 46 ae 01 00 	lea    0x1ae46(%rip),%rax        # 216af <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x77>
    }
    6869:	5d                   	pop    %rbp
    686a:	c3                   	ret
    686b:	90                   	nop

000000000000686c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei>:
    virtual std::string message( int ev ) const override
    686c:	55                   	push   %rbp
    686d:	48 89 e5             	mov    %rsp,%rbp
    6870:	41 54                	push   %r12
    6872:	53                   	push   %rbx
    6873:	48 81 ec 20 02 00 00 	sub    $0x220,%rsp
    687a:	48 89 bd e8 fd ff ff 	mov    %rdi,-0x218(%rbp)
    6881:	48 89 b5 e0 fd ff ff 	mov    %rsi,-0x220(%rbp)
    6888:	89 95 dc fd ff ff    	mov    %edx,-0x224(%rbp)
    688e:	8b 85 dc fd ff ff    	mov    -0x224(%rbp),%eax
    6894:	89 45 ec             	mov    %eax,-0x14(%rbp)
    6897:	48 8b 9d e8 fd ff ff 	mov    -0x218(%rbp),%rbx

  //=== VK_VERSION_1_0 ===

  VULKAN_HPP_INLINE std::string to_string( Result value )
  {
    switch ( value )
    689e:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68a5:	0f 84 eb 06 00 00    	je     6f96 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x72a>
    68ab:	81 7d ec 28 52 9f 3b 	cmpl   $0x3b9f5228,-0x14(%rbp)
    68b2:	0f 8f 08 0a 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68b8:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68bf:	0f 84 8f 09 00 00    	je     7254 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9e8>
    68c5:	81 7d ec e3 e0 9e 3b 	cmpl   $0x3b9ee0e3,-0x14(%rbp)
    68cc:	0f 8f ee 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68d2:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68d9:	0f 84 3f 09 00 00    	je     721e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x9b2>
    68df:	81 7d ec e2 e0 9e 3b 	cmpl   $0x3b9ee0e2,-0x14(%rbp)
    68e6:	0f 8f d4 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    68ec:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    68f3:	0f 84 ef 08 00 00    	je     71e8 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x97c>
    68f9:	81 7d ec e1 e0 9e 3b 	cmpl   $0x3b9ee0e1,-0x14(%rbp)
    6900:	0f 8f ba 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6906:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    690d:	0f 84 9f 08 00 00    	je     71b2 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x946>
    6913:	81 7d ec e0 e0 9e 3b 	cmpl   $0x3b9ee0e0,-0x14(%rbp)
    691a:	0f 8f a0 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6920:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6927:	0f 84 0b 07 00 00    	je     7038 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x7cc>
    692d:	81 7d ec eb cd 9a 3b 	cmpl   $0x3b9acdeb,-0x14(%rbp)
    6934:	0f 8f 86 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    693a:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
    693e:	0f 8f 7c 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6944:	83 7d ec f3          	cmpl   $0xfffffff3,-0x14(%rbp)
    6948:	0f 8d 3d 01 00 00    	jge    6a8b <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x21f>
    694e:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6955:	0f 84 71 06 00 00    	je     6fcc <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x760>
    695b:	81 7d ec 00 36 65 c4 	cmpl   $0xc4653600,-0x14(%rbp)
    6962:	0f 8f 58 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6968:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    696f:	0f 84 8d 06 00 00    	je     7002 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x796>
    6975:	81 7d ec ff 35 65 c4 	cmpl   $0xc46535ff,-0x14(%rbp)
    697c:	0f 8f 3e 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6982:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6989:	0f 84 df 06 00 00    	je     706e <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x802>
    698f:	81 7d ec 14 32 65 c4 	cmpl   $0xc4653214,-0x14(%rbp)
    6996:	0f 8f 24 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    699c:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69a3:	0f 84 fb 06 00 00    	je     70a4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x838>
    69a9:	81 7d ec 47 2a 65 c4 	cmpl   $0xc4652a47,-0x14(%rbp)
    69b0:	0f 8f 0a 09 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69b6:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69bd:	0f 84 17 07 00 00    	je     70da <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x86e>
    69c3:	81 7d ec 07 0b 65 c4 	cmpl   $0xc4650b07,-0x14(%rbp)
    69ca:	0f 8f f0 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69d0:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69d7:	0f 84 33 07 00 00    	je     7110 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8a4>
    69dd:	81 7d ec 20 07 65 c4 	cmpl   $0xc4650720,-0x14(%rbp)
    69e4:	0f 8f d6 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    69ea:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69f1:	0f 84 c7 04 00 00    	je     6ebe <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x652>
    69f7:	81 7d ec 78 28 64 c4 	cmpl   $0xc4642878,-0x14(%rbp)
    69fe:	0f 8f bc 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a04:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a0b:	0f 84 e3 04 00 00    	je     6ef4 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x688>
    6a11:	81 7d ec bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x14(%rbp)
    6a18:	0f 8f a2 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a1e:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a25:	0f 84 1b 07 00 00    	je     7146 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x8da>
    6a2b:	81 7d ec d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x14(%rbp)
    6a32:	0f 8f 88 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a38:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a3f:	0f 84 e5 04 00 00    	je     6f2a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6be>
    6a45:	81 7d ec 18 c1 62 c4 	cmpl   $0xc462c118,-0x14(%rbp)
    6a4c:	0f 8f 6e 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a52:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a59:	0f 84 1d 07 00 00    	je     717c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x910>
    6a5f:	81 7d ec 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x14(%rbp)
    6a66:	0f 8f 54 08 00 00    	jg     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a6c:	81 7d ec b0 0d 60 c4 	cmpl   $0xc4600db0,-0x14(%rbp)
    6a73:	0f 84 11 08 00 00    	je     728a <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa1e>
    6a79:	81 7d ec 18 4a 61 c4 	cmpl   $0xc4614a18,-0x14(%rbp)
    6a80:	0f 84 da 04 00 00    	je     6f60 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0x6f4>
    6a86:	e9 35 08 00 00       	jmp    72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a8b:	8b 45 ec             	mov    -0x14(%rbp),%eax
    6a8e:	83 c0 0d             	add    $0xd,%eax
    6a91:	83 f8 12             	cmp    $0x12,%eax
    6a94:	0f 87 26 08 00 00    	ja     72c0 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xa54>
    6a9a:	89 c0                	mov    %eax,%eax
    6a9c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    6aa3:	00 
    6aa4:	48 8d 05 45 b3 01 00 	lea    0x1b345(%rip),%rax        # 21df0 <_ZNSt8__detailL19__atomic_spin_countE+0x38c>
    6aab:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    6aae:	48 98                	cltq
    6ab0:	48 8d 15 39 b3 01 00 	lea    0x1b339(%rip),%rdx        # 21df0 <_ZNSt8__detailL19__atomic_spin_countE+0x38c>
    6ab7:	48 01 d0             	add    %rdx,%rax
    6aba:	ff e0                	jmp    *%rax
    {
      case Result::eSuccess: return "Success";
    6abc:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ac0:	48 89 c7             	mov    %rax,%rdi
    6ac3:	e8 e8 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ac8:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6acc:	48 89 c2             	mov    %rax,%rdx
    6acf:	48 8d 05 e4 ab 01 00 	lea    0x1abe4(%rip),%rax        # 216ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x82>
    6ad6:	48 89 c6             	mov    %rax,%rsi
    6ad9:	48 89 df             	mov    %rbx,%rdi
    6adc:	e8 8d 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ae1:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    6ae5:	48 89 c7             	mov    %rax,%rdi
    6ae8:	e8 83 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      return VULKAN_HPP_NAMESPACE::to_string( static_cast<VULKAN_HPP_NAMESPACE::Result>( ev ) );
    6aed:	e9 aa 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eNotReady: return "NotReady";
    6af2:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6af6:	48 89 c7             	mov    %rax,%rdi
    6af9:	e8 b2 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6afe:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b02:	48 89 c2             	mov    %rax,%rdx
    6b05:	48 8d 05 b6 ab 01 00 	lea    0x1abb6(%rip),%rax        # 216c2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x8a>
    6b0c:	48 89 c6             	mov    %rax,%rsi
    6b0f:	48 89 df             	mov    %rbx,%rdi
    6b12:	e8 57 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b17:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    6b1b:	48 89 c7             	mov    %rax,%rdi
    6b1e:	e8 4d e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b23:	e9 74 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eTimeout: return "Timeout";
    6b28:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b2c:	48 89 c7             	mov    %rax,%rdi
    6b2f:	e8 7c e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b34:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b38:	48 89 c2             	mov    %rax,%rdx
    6b3b:	48 8d 05 89 ab 01 00 	lea    0x1ab89(%rip),%rax        # 216cb <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x93>
    6b42:	48 89 c6             	mov    %rax,%rsi
    6b45:	48 89 df             	mov    %rbx,%rdi
    6b48:	e8 21 35 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b4d:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    6b51:	48 89 c7             	mov    %rax,%rdi
    6b54:	e8 17 e7 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b59:	e9 3e 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventSet: return "EventSet";
    6b5e:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b62:	48 89 c7             	mov    %rax,%rdi
    6b65:	e8 46 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6b6a:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b6e:	48 89 c2             	mov    %rax,%rdx
    6b71:	48 8d 05 5b ab 01 00 	lea    0x1ab5b(%rip),%rax        # 216d3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x9b>
    6b78:	48 89 c6             	mov    %rax,%rsi
    6b7b:	48 89 df             	mov    %rbx,%rdi
    6b7e:	e8 eb 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6b83:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    6b87:	48 89 c7             	mov    %rax,%rdi
    6b8a:	e8 e1 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6b8f:	e9 08 0c 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eEventReset: return "EventReset";
    6b94:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6b98:	48 89 c7             	mov    %rax,%rdi
    6b9b:	e8 10 e8 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ba0:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6ba4:	48 89 c2             	mov    %rax,%rdx
    6ba7:	48 8d 05 2e ab 01 00 	lea    0x1ab2e(%rip),%rax        # 216dc <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xa4>
    6bae:	48 89 c6             	mov    %rax,%rsi
    6bb1:	48 89 df             	mov    %rbx,%rdi
    6bb4:	e8 b5 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bb9:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    6bbd:	48 89 c7             	mov    %rax,%rdi
    6bc0:	e8 ab e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bc5:	e9 d2 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eIncomplete: return "Incomplete";
    6bca:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bce:	48 89 c7             	mov    %rax,%rdi
    6bd1:	e8 da e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6bd6:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bda:	48 89 c2             	mov    %rax,%rdx
    6bdd:	48 8d 05 03 ab 01 00 	lea    0x1ab03(%rip),%rax        # 216e7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xaf>
    6be4:	48 89 c6             	mov    %rax,%rsi
    6be7:	48 89 df             	mov    %rbx,%rdi
    6bea:	e8 7f 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6bef:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    6bf3:	48 89 c7             	mov    %rax,%rdi
    6bf6:	e8 75 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6bfb:	e9 9c 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    6c00:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c04:	48 89 c7             	mov    %rax,%rdi
    6c07:	e8 a4 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c0c:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c10:	48 89 c2             	mov    %rax,%rdx
    6c13:	48 8d 05 d8 aa 01 00 	lea    0x1aad8(%rip),%rax        # 216f2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xba>
    6c1a:	48 89 c6             	mov    %rax,%rsi
    6c1d:	48 89 df             	mov    %rbx,%rdi
    6c20:	e8 49 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c25:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    6c29:	48 89 c7             	mov    %rax,%rdi
    6c2c:	e8 3f e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c31:	e9 66 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    6c36:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c3a:	48 89 c7             	mov    %rax,%rdi
    6c3d:	e8 6e e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c42:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c46:	48 89 c2             	mov    %rax,%rdx
    6c49:	48 8d 05 b7 aa 01 00 	lea    0x1aab7(%rip),%rax        # 21707 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xcf>
    6c50:	48 89 c6             	mov    %rax,%rsi
    6c53:	48 89 df             	mov    %rbx,%rdi
    6c56:	e8 13 34 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6c5f:	48 89 c7             	mov    %rax,%rdi
    6c62:	e8 09 e6 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c67:	e9 30 0b 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    6c6c:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c70:	48 89 c7             	mov    %rax,%rdi
    6c73:	e8 38 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6c78:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c7c:	48 89 c2             	mov    %rax,%rdx
    6c7f:	48 8d 05 98 aa 01 00 	lea    0x1aa98(%rip),%rax        # 2171e <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0xe6>
    6c86:	48 89 c6             	mov    %rax,%rsi
    6c89:	48 89 df             	mov    %rbx,%rdi
    6c8c:	e8 dd 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6c91:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    6c95:	48 89 c7             	mov    %rax,%rdi
    6c98:	e8 d3 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6c9d:	e9 fa 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    6ca2:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ca6:	48 89 c7             	mov    %rax,%rdi
    6ca9:	e8 02 e7 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6cae:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6cb2:	48 89 c2             	mov    %rax,%rdx
    6cb5:	48 8d 05 7c aa 01 00 	lea    0x1aa7c(%rip),%rax        # 21738 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x100>
    6cbc:	48 89 c6             	mov    %rax,%rsi
    6cbf:	48 89 df             	mov    %rbx,%rdi
    6cc2:	e8 a7 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cc7:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    6ccb:	48 89 c7             	mov    %rax,%rdi
    6cce:	e8 9d e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6cd3:	e9 c4 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    6cd8:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6cdc:	48 89 c7             	mov    %rax,%rdi
    6cdf:	e8 cc e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6ce4:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6ce8:	48 89 c2             	mov    %rax,%rdx
    6ceb:	48 8d 05 56 aa 01 00 	lea    0x1aa56(%rip),%rax        # 21748 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x110>
    6cf2:	48 89 c6             	mov    %rax,%rsi
    6cf5:	48 89 df             	mov    %rbx,%rdi
    6cf8:	e8 71 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6cfd:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    6d01:	48 89 c7             	mov    %rax,%rdi
    6d04:	e8 67 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d09:	e9 8e 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    6d0e:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d12:	48 89 c7             	mov    %rax,%rdi
    6d15:	e8 96 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d1a:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d1e:	48 89 c2             	mov    %rax,%rdx
    6d21:	48 8d 05 35 aa 01 00 	lea    0x1aa35(%rip),%rax        # 2175d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x125>
    6d28:	48 89 c6             	mov    %rax,%rsi
    6d2b:	48 89 df             	mov    %rbx,%rdi
    6d2e:	e8 3b 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d33:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    6d37:	48 89 c7             	mov    %rax,%rdi
    6d3a:	e8 31 e5 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d3f:	e9 58 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    6d44:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d48:	48 89 c7             	mov    %rax,%rdi
    6d4b:	e8 60 e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d50:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d54:	48 89 c2             	mov    %rax,%rdx
    6d57:	48 8d 05 14 aa 01 00 	lea    0x1aa14(%rip),%rax        # 21772 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x13a>
    6d5e:	48 89 c6             	mov    %rax,%rsi
    6d61:	48 89 df             	mov    %rbx,%rdi
    6d64:	e8 05 33 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d69:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    6d6d:	48 89 c7             	mov    %rax,%rdi
    6d70:	e8 fb e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6d75:	e9 22 0a 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    6d7a:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d7e:	48 89 c7             	mov    %rax,%rdi
    6d81:	e8 2a e6 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6d86:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6d8a:	48 89 c2             	mov    %rax,%rdx
    6d8d:	48 8d 05 f7 a9 01 00 	lea    0x1a9f7(%rip),%rax        # 2178b <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x153>
    6d94:	48 89 c6             	mov    %rax,%rsi
    6d97:	48 89 df             	mov    %rbx,%rdi
    6d9a:	e8 cf 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6d9f:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    6da3:	48 89 c7             	mov    %rax,%rdi
    6da6:	e8 c5 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6dab:	e9 ec 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    6db0:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6db4:	48 89 c7             	mov    %rax,%rdi
    6db7:	e8 f4 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6dbc:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dc0:	48 89 c2             	mov    %rax,%rdx
    6dc3:	48 8d 05 d8 a9 01 00 	lea    0x1a9d8(%rip),%rax        # 217a2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x16a>
    6dca:	48 89 c6             	mov    %rax,%rsi
    6dcd:	48 89 df             	mov    %rbx,%rdi
    6dd0:	e8 99 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6dd5:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    6dd9:	48 89 c7             	mov    %rax,%rdi
    6ddc:	e8 8f e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6de1:	e9 b6 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    6de6:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6dea:	48 89 c7             	mov    %rax,%rdi
    6ded:	e8 be e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6df2:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6df6:	48 89 c2             	mov    %rax,%rdx
    6df9:	48 8d 05 ba a9 01 00 	lea    0x1a9ba(%rip),%rax        # 217ba <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x182>
    6e00:	48 89 c6             	mov    %rax,%rsi
    6e03:	48 89 df             	mov    %rbx,%rdi
    6e06:	e8 63 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e0b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    6e0f:	48 89 c7             	mov    %rax,%rdi
    6e12:	e8 59 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e17:	e9 80 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    6e1c:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e20:	48 89 c7             	mov    %rax,%rdi
    6e23:	e8 88 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e28:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e2c:	48 89 c2             	mov    %rax,%rdx
    6e2f:	48 8d 05 98 a9 01 00 	lea    0x1a998(%rip),%rax        # 217ce <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x196>
    6e36:	48 89 c6             	mov    %rax,%rsi
    6e39:	48 89 df             	mov    %rbx,%rdi
    6e3c:	e8 2d 32 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e41:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    6e45:	48 89 c7             	mov    %rax,%rdi
    6e48:	e8 23 e4 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e4d:	e9 4a 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    6e52:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e56:	48 89 c7             	mov    %rax,%rdi
    6e59:	e8 52 e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e5e:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e62:	48 89 c2             	mov    %rax,%rdx
    6e65:	48 8d 05 7a a9 01 00 	lea    0x1a97a(%rip),%rax        # 217e6 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ae>
    6e6c:	48 89 c6             	mov    %rax,%rsi
    6e6f:	48 89 df             	mov    %rbx,%rdi
    6e72:	e8 f7 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6e77:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    6e7b:	48 89 c7             	mov    %rax,%rdi
    6e7e:	e8 ed e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6e83:	e9 14 09 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorUnknown: return "ErrorUnknown";
    6e88:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e8c:	48 89 c7             	mov    %rax,%rdi
    6e8f:	e8 1c e5 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6e94:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6e98:	48 89 c2             	mov    %rax,%rdx
    6e9b:	48 8d 05 58 a9 01 00 	lea    0x1a958(%rip),%rax        # 217fa <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1c2>
    6ea2:	48 89 c6             	mov    %rax,%rsi
    6ea5:	48 89 df             	mov    %rbx,%rdi
    6ea8:	e8 c1 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ead:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    6eb1:	48 89 c7             	mov    %rax,%rdi
    6eb4:	e8 b7 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eb9:	e9 de 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    6ebe:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ec2:	48 89 c7             	mov    %rax,%rdi
    6ec5:	e8 e6 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6eca:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ece:	48 89 c2             	mov    %rax,%rdx
    6ed1:	48 8d 05 2f a9 01 00 	lea    0x1a92f(%rip),%rax        # 21807 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1cf>
    6ed8:	48 89 c6             	mov    %rax,%rsi
    6edb:	48 89 df             	mov    %rbx,%rdi
    6ede:	e8 8b 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ee3:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    6ee7:	48 89 c7             	mov    %rax,%rdi
    6eea:	e8 81 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6eef:	e9 a8 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    6ef4:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6ef8:	48 89 c7             	mov    %rax,%rdi
    6efb:	e8 b0 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f00:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f04:	48 89 c2             	mov    %rax,%rdx
    6f07:	48 8d 05 0e a9 01 00 	lea    0x1a90e(%rip),%rax        # 2181c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1e4>
    6f0e:	48 89 c6             	mov    %rax,%rsi
    6f11:	48 89 df             	mov    %rbx,%rdi
    6f14:	e8 55 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f19:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    6f1d:	48 89 c7             	mov    %rax,%rdi
    6f20:	e8 4b e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f25:	e9 72 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    6f2a:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f2e:	48 89 c7             	mov    %rax,%rdi
    6f31:	e8 7a e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f36:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f3a:	48 89 c2             	mov    %rax,%rdx
    6f3d:	48 8d 05 f3 a8 01 00 	lea    0x1a8f3(%rip),%rax        # 21837 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x1ff>
    6f44:	48 89 c6             	mov    %rax,%rsi
    6f47:	48 89 df             	mov    %rbx,%rdi
    6f4a:	e8 1f 31 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f4f:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    6f53:	48 89 c7             	mov    %rax,%rdi
    6f56:	e8 15 e3 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f5b:	e9 3c 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    6f60:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f64:	48 89 c7             	mov    %rax,%rdi
    6f67:	e8 44 e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6f6c:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f70:	48 89 c2             	mov    %rax,%rdx
    6f73:	48 8d 05 d6 a8 01 00 	lea    0x1a8d6(%rip),%rax        # 21850 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x218>
    6f7a:	48 89 c6             	mov    %rax,%rsi
    6f7d:	48 89 df             	mov    %rbx,%rdi
    6f80:	e8 e9 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6f85:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    6f89:	48 89 c7             	mov    %rax,%rdi
    6f8c:	e8 df e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6f91:	e9 06 08 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    6f96:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f9a:	48 89 c7             	mov    %rax,%rdi
    6f9d:	e8 0e e4 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fa2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fa6:	48 89 c2             	mov    %rax,%rdx
    6fa9:	48 8d 05 c1 a8 01 00 	lea    0x1a8c1(%rip),%rax        # 21871 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x239>
    6fb0:	48 89 c6             	mov    %rax,%rsi
    6fb3:	48 89 df             	mov    %rbx,%rdi
    6fb6:	e8 b3 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6fbb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fbf:	48 89 c7             	mov    %rax,%rdi
    6fc2:	e8 a9 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6fc7:	e9 d0 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    6fcc:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fd0:	48 89 c7             	mov    %rax,%rdi
    6fd3:	e8 d8 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    6fd8:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6fdc:	48 89 c2             	mov    %rax,%rdx
    6fdf:	48 8d 05 a3 a8 01 00 	lea    0x1a8a3(%rip),%rax        # 21889 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x251>
    6fe6:	48 89 c6             	mov    %rax,%rsi
    6fe9:	48 89 df             	mov    %rbx,%rdi
    6fec:	e8 7d 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    6ff1:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    6ff5:	48 89 c7             	mov    %rax,%rdi
    6ff8:	e8 73 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    6ffd:	e9 9a 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    7002:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7006:	48 89 c7             	mov    %rax,%rdi
    7009:	e8 a2 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    700e:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7012:	48 89 c2             	mov    %rax,%rdx
    7015:	48 8d 05 81 a8 01 00 	lea    0x1a881(%rip),%rax        # 2189d <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x265>
    701c:	48 89 c6             	mov    %rax,%rsi
    701f:	48 89 df             	mov    %rbx,%rdi
    7022:	e8 47 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7027:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    702b:	48 89 c7             	mov    %rax,%rdi
    702e:	e8 3d e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7033:	e9 64 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7038:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    703c:	48 89 c7             	mov    %rax,%rdi
    703f:	e8 6c e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7044:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7048:	48 89 c2             	mov    %rax,%rdx
    704b:	48 8d 05 65 a8 01 00 	lea    0x1a865(%rip),%rax        # 218b7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x27f>
    7052:	48 89 c6             	mov    %rax,%rsi
    7055:	48 89 df             	mov    %rbx,%rdi
    7058:	e8 11 30 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    705d:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    7061:	48 89 c7             	mov    %rax,%rdi
    7064:	e8 07 e2 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7069:	e9 2e 07 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    706e:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7072:	48 89 c7             	mov    %rax,%rdi
    7075:	e8 36 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    707a:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    707e:	48 89 c2             	mov    %rax,%rdx
    7081:	48 8d 05 3d a8 01 00 	lea    0x1a83d(%rip),%rax        # 218c5 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x28d>
    7088:	48 89 c6             	mov    %rax,%rsi
    708b:	48 89 df             	mov    %rbx,%rdi
    708e:	e8 db 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7093:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7097:	48 89 c7             	mov    %rax,%rdi
    709a:	e8 d1 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    709f:	e9 f8 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    70a4:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70a8:	48 89 c7             	mov    %rax,%rdi
    70ab:	e8 00 e3 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70b0:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70b4:	48 89 c2             	mov    %rax,%rdx
    70b7:	48 8d 05 19 a8 01 00 	lea    0x1a819(%rip),%rax        # 218d7 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x29f>
    70be:	48 89 c6             	mov    %rax,%rsi
    70c1:	48 89 df             	mov    %rbx,%rdi
    70c4:	e8 a5 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70c9:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    70cd:	48 89 c7             	mov    %rax,%rdi
    70d0:	e8 9b e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    70d5:	e9 c2 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    70da:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70de:	48 89 c7             	mov    %rax,%rdi
    70e1:	e8 ca e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    70e6:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    70ea:	48 89 c2             	mov    %rax,%rdx
    70ed:	48 8d 05 ff a7 01 00 	lea    0x1a7ff(%rip),%rax        # 218f3 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2bb>
    70f4:	48 89 c6             	mov    %rax,%rsi
    70f7:	48 89 df             	mov    %rbx,%rdi
    70fa:	e8 6f 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    70ff:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    7103:	48 89 c7             	mov    %rax,%rdi
    7106:	e8 65 e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    710b:	e9 8c 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    7110:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7114:	48 89 c7             	mov    %rax,%rdi
    7117:	e8 94 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    711c:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7120:	48 89 c2             	mov    %rax,%rdx
    7123:	48 8d 05 e2 a7 01 00 	lea    0x1a7e2(%rip),%rax        # 2190c <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2d4>
    712a:	48 89 c6             	mov    %rax,%rsi
    712d:	48 89 df             	mov    %rbx,%rdi
    7130:	e8 39 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7135:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    7139:	48 89 c7             	mov    %rax,%rdi
    713c:	e8 2f e1 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7141:	e9 56 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorVideoProfileOperationNotSupportedKHR: return "ErrorVideoProfileOperationNotSupportedKHR";
      case Result::eErrorVideoProfileFormatNotSupportedKHR: return "ErrorVideoProfileFormatNotSupportedKHR";
      case Result::eErrorVideoProfileCodecNotSupportedKHR: return "ErrorVideoProfileCodecNotSupportedKHR";
      case Result::eErrorVideoStdVersionNotSupportedKHR: return "ErrorVideoStdVersionNotSupportedKHR";
#endif /*VK_ENABLE_BETA_EXTENSIONS*/
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    7146:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    714a:	48 89 c7             	mov    %rax,%rdi
    714d:	e8 5e e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7152:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    7156:	48 89 c2             	mov    %rax,%rdx
    7159:	48 8d 05 c8 a7 01 00 	lea    0x1a7c8(%rip),%rax        # 21928 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x2f0>
    7160:	48 89 c6             	mov    %rax,%rsi
    7163:	48 89 df             	mov    %rbx,%rdi
    7166:	e8 03 2f 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    716b:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    716f:	48 89 c7             	mov    %rax,%rdi
    7172:	e8 f9 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7177:	e9 20 06 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    717c:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    7180:	48 89 c7             	mov    %rax,%rdi
    7183:	e8 28 e2 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7188:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    718c:	48 89 c2             	mov    %rax,%rdx
    718f:	48 8d 05 be a7 01 00 	lea    0x1a7be(%rip),%rax        # 21954 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x31c>
    7196:	48 89 c6             	mov    %rax,%rsi
    7199:	48 89 df             	mov    %rbx,%rdi
    719c:	e8 cd 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71a1:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    71a5:	48 89 c7             	mov    %rax,%rdi
    71a8:	e8 c3 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71ad:	e9 ea 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
#if defined( VK_USE_PLATFORM_WIN32_KHR )
      case Result::eErrorFullScreenExclusiveModeLostEXT: return "ErrorFullScreenExclusiveModeLostEXT";
#endif /*VK_USE_PLATFORM_WIN32_KHR*/
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    71b2:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71b6:	48 89 c7             	mov    %rax,%rdi
    71b9:	e8 f2 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71be:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71c2:	48 89 c2             	mov    %rax,%rdx
    71c5:	48 8d 05 9d a7 01 00 	lea    0x1a79d(%rip),%rax        # 21969 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x331>
    71cc:	48 89 c6             	mov    %rax,%rsi
    71cf:	48 89 df             	mov    %rbx,%rdi
    71d2:	e8 97 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    71d7:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    71db:	48 89 c7             	mov    %rax,%rdi
    71de:	e8 8d e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    71e3:	e9 b4 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    71e8:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71ec:	48 89 c7             	mov    %rax,%rdi
    71ef:	e8 bc e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    71f4:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    71f8:	48 89 c2             	mov    %rax,%rdx
    71fb:	48 8d 05 75 a7 01 00 	lea    0x1a775(%rip),%rax        # 21977 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x33f>
    7202:	48 89 c6             	mov    %rax,%rsi
    7205:	48 89 df             	mov    %rbx,%rdi
    7208:	e8 61 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    720d:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    7211:	48 89 c7             	mov    %rax,%rdi
    7214:	e8 57 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7219:	e9 7e 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    721e:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7222:	48 89 c7             	mov    %rax,%rdi
    7225:	e8 86 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    722a:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    722e:	48 89 c2             	mov    %rax,%rdx
    7231:	48 8d 05 4d a7 01 00 	lea    0x1a74d(%rip),%rax        # 21985 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x34d>
    7238:	48 89 c6             	mov    %rax,%rsi
    723b:	48 89 df             	mov    %rbx,%rdi
    723e:	e8 2b 2e 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7243:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7247:	48 89 c7             	mov    %rax,%rdi
    724a:	e8 21 e0 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    724f:	e9 48 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    7254:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7258:	48 89 c7             	mov    %rax,%rdi
    725b:	e8 50 e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7260:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7264:	48 89 c2             	mov    %rax,%rdx
    7267:	48 8d 05 2c a7 01 00 	lea    0x1a72c(%rip),%rax        # 2199a <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x362>
    726e:	48 89 c6             	mov    %rax,%rsi
    7271:	48 89 df             	mov    %rbx,%rdi
    7274:	e8 f5 2d 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    7279:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    727d:	48 89 c7             	mov    %rax,%rdi
    7280:	e8 eb df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7285:	e9 12 05 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    728a:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    728e:	48 89 c7             	mov    %rax,%rdi
    7291:	e8 1a e1 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    7296:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    729a:	48 89 c2             	mov    %rax,%rdx
    729d:	48 8d 05 0e a7 01 00 	lea    0x1a70e(%rip),%rax        # 219b2 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x37a>
    72a4:	48 89 c6             	mov    %rax,%rsi
    72a7:	48 89 df             	mov    %rbx,%rdi
    72aa:	e8 bf 2d 00 00       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    72af:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    72b3:	48 89 c7             	mov    %rax,%rdi
    72b6:	e8 b5 df ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    72bb:	e9 dc 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    72c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
    72c3:	89 45 e8             	mov    %eax,-0x18(%rbp)
    72c6:	4c 8d 65 80          	lea    -0x80(%rbp),%r12
    std::stringstream stream;
    72ca:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72d1:	48 89 c7             	mov    %rax,%rdi
    72d4:	e8 57 de ff ff       	call   5130 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@plt>
    stream << std::hex << value;
    72d9:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    72e0:	48 83 c0 10          	add    $0x10,%rax
    72e4:	48 8d 15 bd f3 ff ff 	lea    -0xc43(%rip),%rdx        # 66a8 <_ZSt3hexRSt8ios_base>
    72eb:	48 89 d6             	mov    %rdx,%rsi
    72ee:	48 89 c7             	mov    %rax,%rdi
    72f1:	e8 7a dd ff ff       	call   5070 <_ZNSolsEPFRSt8ios_baseS0_E@plt>
    72f6:	48 89 c2             	mov    %rax,%rdx
    72f9:	8b 45 e8             	mov    -0x18(%rbp),%eax
    72fc:	89 c6                	mov    %eax,%esi
    72fe:	48 89 d7             	mov    %rdx,%rdi
    7301:	e8 ca df ff ff       	call   52d0 <_ZNSolsEj@plt>
    return stream.str();
    7306:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    730d:	48 89 c6             	mov    %rax,%rsi
    7310:	4c 89 e7             	mov    %r12,%rdi
    7313:	e8 b8 e0 ff ff       	call   53d0 <_ZNKRSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEE3strEv@plt>
    7318:	90                   	nop
  }
    7319:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    7320:	48 89 c7             	mov    %rax,%rdi
    7323:	e8 38 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    return stream.str();
    7328:	90                   	nop
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    7329:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    732d:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7331:	48 8d 0d 97 a6 01 00 	lea    0x1a697(%rip),%rcx        # 219cf <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x397>
    7338:	48 89 ce             	mov    %rcx,%rsi
    733b:	48 89 c7             	mov    %rax,%rdi
    733e:	e8 e1 2c 00 00       	call   a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
    7343:	eb 1a                	jmp    735f <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xaf3>
  }
    7345:	48 89 c3             	mov    %rax,%rbx
    7348:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    734f:	48 89 c7             	mov    %rax,%rdi
    7352:	e8 09 de ff ff       	call   5160 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>
    7357:	48 89 d8             	mov    %rbx,%rax
    735a:	e9 35 04 00 00       	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    735f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7363:	48 8d 15 70 a6 01 00 	lea    0x1a670(%rip),%rdx        # 219da <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a2>
    736a:	48 89 c6             	mov    %rax,%rsi
    736d:	48 89 df             	mov    %rbx,%rdi
    7370:	e8 e5 2d 00 00       	call   a15a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
    7375:	90                   	nop
    7376:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    737a:	48 89 c7             	mov    %rax,%rdi
    737d:	e8 56 2b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    7382:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7386:	48 89 c7             	mov    %rax,%rdi
    7389:	e8 4a 2b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    738e:	e9 09 04 00 00       	jmp    779c <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf30>
      case Result::eSuccess: return "Success";
    7393:	48 89 c3             	mov    %rax,%rbx
    7396:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    739a:	48 89 c7             	mov    %rax,%rdi
    739d:	e8 ce de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73a2:	48 89 d8             	mov    %rbx,%rax
    73a5:	48 89 c7             	mov    %rax,%rdi
    73a8:	e8 f3 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eNotReady: return "NotReady";
    73ad:	48 89 c3             	mov    %rax,%rbx
    73b0:	48 8d 45 e6          	lea    -0x1a(%rbp),%rax
    73b4:	48 89 c7             	mov    %rax,%rdi
    73b7:	e8 b4 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73bc:	48 89 d8             	mov    %rbx,%rax
    73bf:	48 89 c7             	mov    %rax,%rdi
    73c2:	e8 d9 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eTimeout: return "Timeout";
    73c7:	48 89 c3             	mov    %rax,%rbx
    73ca:	48 8d 45 e5          	lea    -0x1b(%rbp),%rax
    73ce:	48 89 c7             	mov    %rax,%rdi
    73d1:	e8 9a de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73d6:	48 89 d8             	mov    %rbx,%rax
    73d9:	48 89 c7             	mov    %rax,%rdi
    73dc:	e8 bf df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventSet: return "EventSet";
    73e1:	48 89 c3             	mov    %rax,%rbx
    73e4:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
    73e8:	48 89 c7             	mov    %rax,%rdi
    73eb:	e8 80 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    73f0:	48 89 d8             	mov    %rbx,%rax
    73f3:	48 89 c7             	mov    %rax,%rdi
    73f6:	e8 a5 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eEventReset: return "EventReset";
    73fb:	48 89 c3             	mov    %rax,%rbx
    73fe:	48 8d 45 e3          	lea    -0x1d(%rbp),%rax
    7402:	48 89 c7             	mov    %rax,%rdi
    7405:	e8 66 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    740a:	48 89 d8             	mov    %rbx,%rax
    740d:	48 89 c7             	mov    %rax,%rdi
    7410:	e8 8b df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eIncomplete: return "Incomplete";
    7415:	48 89 c3             	mov    %rax,%rbx
    7418:	48 8d 45 e2          	lea    -0x1e(%rbp),%rax
    741c:	48 89 c7             	mov    %rax,%rdi
    741f:	e8 4c de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7424:	48 89 d8             	mov    %rbx,%rax
    7427:	48 89 c7             	mov    %rax,%rdi
    742a:	e8 71 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfHostMemory: return "ErrorOutOfHostMemory";
    742f:	48 89 c3             	mov    %rax,%rbx
    7432:	48 8d 45 e1          	lea    -0x1f(%rbp),%rax
    7436:	48 89 c7             	mov    %rax,%rdi
    7439:	e8 32 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    743e:	48 89 d8             	mov    %rbx,%rax
    7441:	48 89 c7             	mov    %rax,%rdi
    7444:	e8 57 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDeviceMemory: return "ErrorOutOfDeviceMemory";
    7449:	48 89 c3             	mov    %rax,%rbx
    744c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7450:	48 89 c7             	mov    %rax,%rdi
    7453:	e8 18 de ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7458:	48 89 d8             	mov    %rbx,%rax
    745b:	48 89 c7             	mov    %rax,%rdi
    745e:	e8 3d df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInitializationFailed: return "ErrorInitializationFailed";
    7463:	48 89 c3             	mov    %rax,%rbx
    7466:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    746a:	48 89 c7             	mov    %rax,%rdi
    746d:	e8 fe dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7472:	48 89 d8             	mov    %rbx,%rax
    7475:	48 89 c7             	mov    %rax,%rdi
    7478:	e8 23 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorDeviceLost: return "ErrorDeviceLost";
    747d:	48 89 c3             	mov    %rax,%rbx
    7480:	48 8d 45 de          	lea    -0x22(%rbp),%rax
    7484:	48 89 c7             	mov    %rax,%rdi
    7487:	e8 e4 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    748c:	48 89 d8             	mov    %rbx,%rax
    748f:	48 89 c7             	mov    %rax,%rdi
    7492:	e8 09 df ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorMemoryMapFailed: return "ErrorMemoryMapFailed";
    7497:	48 89 c3             	mov    %rax,%rbx
    749a:	48 8d 45 dd          	lea    -0x23(%rbp),%rax
    749e:	48 89 c7             	mov    %rax,%rdi
    74a1:	e8 ca dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74a6:	48 89 d8             	mov    %rbx,%rax
    74a9:	48 89 c7             	mov    %rax,%rdi
    74ac:	e8 ef de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorLayerNotPresent: return "ErrorLayerNotPresent";
    74b1:	48 89 c3             	mov    %rax,%rbx
    74b4:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
    74b8:	48 89 c7             	mov    %rax,%rdi
    74bb:	e8 b0 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74c0:	48 89 d8             	mov    %rbx,%rax
    74c3:	48 89 c7             	mov    %rax,%rdi
    74c6:	e8 d5 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorExtensionNotPresent: return "ErrorExtensionNotPresent";
    74cb:	48 89 c3             	mov    %rax,%rbx
    74ce:	48 8d 45 db          	lea    -0x25(%rbp),%rax
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 96 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74da:	48 89 d8             	mov    %rbx,%rax
    74dd:	48 89 c7             	mov    %rax,%rdi
    74e0:	e8 bb de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFeatureNotPresent: return "ErrorFeatureNotPresent";
    74e5:	48 89 c3             	mov    %rax,%rbx
    74e8:	48 8d 45 da          	lea    -0x26(%rbp),%rax
    74ec:	48 89 c7             	mov    %rax,%rdi
    74ef:	e8 7c dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    74f4:	48 89 d8             	mov    %rbx,%rax
    74f7:	48 89 c7             	mov    %rax,%rdi
    74fa:	e8 a1 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDriver: return "ErrorIncompatibleDriver";
    74ff:	48 89 c3             	mov    %rax,%rbx
    7502:	48 8d 45 d9          	lea    -0x27(%rbp),%rax
    7506:	48 89 c7             	mov    %rax,%rdi
    7509:	e8 62 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    750e:	48 89 d8             	mov    %rbx,%rax
    7511:	48 89 c7             	mov    %rax,%rdi
    7514:	e8 87 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorTooManyObjects: return "ErrorTooManyObjects";
    7519:	48 89 c3             	mov    %rax,%rbx
    751c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    7520:	48 89 c7             	mov    %rax,%rdi
    7523:	e8 48 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7528:	48 89 d8             	mov    %rbx,%rax
    752b:	48 89 c7             	mov    %rax,%rdi
    752e:	e8 6d de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFormatNotSupported: return "ErrorFormatNotSupported";
    7533:	48 89 c3             	mov    %rax,%rbx
    7536:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    753a:	48 89 c7             	mov    %rax,%rdi
    753d:	e8 2e dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7542:	48 89 d8             	mov    %rbx,%rax
    7545:	48 89 c7             	mov    %rax,%rdi
    7548:	e8 53 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentedPool: return "ErrorFragmentedPool";
    754d:	48 89 c3             	mov    %rax,%rbx
    7550:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
    7554:	48 89 c7             	mov    %rax,%rdi
    7557:	e8 14 dd ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    755c:	48 89 d8             	mov    %rbx,%rax
    755f:	48 89 c7             	mov    %rax,%rdi
    7562:	e8 39 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorUnknown: return "ErrorUnknown";
    7567:	48 89 c3             	mov    %rax,%rbx
    756a:	48 8d 45 d5          	lea    -0x2b(%rbp),%rax
    756e:	48 89 c7             	mov    %rax,%rdi
    7571:	e8 fa dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7576:	48 89 d8             	mov    %rbx,%rax
    7579:	48 89 c7             	mov    %rax,%rdi
    757c:	e8 1f de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfPoolMemory: return "ErrorOutOfPoolMemory";
    7581:	48 89 c3             	mov    %rax,%rbx
    7584:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
    7588:	48 89 c7             	mov    %rax,%rdi
    758b:	e8 e0 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7590:	48 89 d8             	mov    %rbx,%rax
    7593:	48 89 c7             	mov    %rax,%rdi
    7596:	e8 05 de ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidExternalHandle: return "ErrorInvalidExternalHandle";
    759b:	48 89 c3             	mov    %rax,%rbx
    759e:	48 8d 45 d3          	lea    -0x2d(%rbp),%rax
    75a2:	48 89 c7             	mov    %rax,%rdi
    75a5:	e8 c6 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75aa:	48 89 d8             	mov    %rbx,%rax
    75ad:	48 89 c7             	mov    %rax,%rdi
    75b0:	e8 eb dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorFragmentation: return "ErrorFragmentation";
    75b5:	48 89 c3             	mov    %rax,%rbx
    75b8:	48 8d 45 d2          	lea    -0x2e(%rbp),%rax
    75bc:	48 89 c7             	mov    %rax,%rdi
    75bf:	e8 ac dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75c4:	48 89 d8             	mov    %rbx,%rax
    75c7:	48 89 c7             	mov    %rax,%rdi
    75ca:	e8 d1 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidOpaqueCaptureAddress: return "ErrorInvalidOpaqueCaptureAddress";
    75cf:	48 89 c3             	mov    %rax,%rbx
    75d2:	48 8d 45 d1          	lea    -0x2f(%rbp),%rax
    75d6:	48 89 c7             	mov    %rax,%rdi
    75d9:	e8 92 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75de:	48 89 d8             	mov    %rbx,%rax
    75e1:	48 89 c7             	mov    %rax,%rdi
    75e4:	e8 b7 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::ePipelineCompileRequired: return "PipelineCompileRequired";
    75e9:	48 89 c3             	mov    %rax,%rbx
    75ec:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    75f0:	48 89 c7             	mov    %rax,%rdi
    75f3:	e8 78 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    75f8:	48 89 d8             	mov    %rbx,%rax
    75fb:	48 89 c7             	mov    %rax,%rdi
    75fe:	e8 9d dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorSurfaceLostKHR: return "ErrorSurfaceLostKHR";
    7603:	48 89 c3             	mov    %rax,%rbx
    7606:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
    760a:	48 89 c7             	mov    %rax,%rdi
    760d:	e8 5e dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7612:	48 89 d8             	mov    %rbx,%rax
    7615:	48 89 c7             	mov    %rax,%rdi
    7618:	e8 83 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNativeWindowInUseKHR: return "ErrorNativeWindowInUseKHR";
    761d:	48 89 c3             	mov    %rax,%rbx
    7620:	48 8d 45 ce          	lea    -0x32(%rbp),%rax
    7624:	48 89 c7             	mov    %rax,%rdi
    7627:	e8 44 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    762c:	48 89 d8             	mov    %rbx,%rax
    762f:	48 89 c7             	mov    %rax,%rdi
    7632:	e8 69 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eSuboptimalKHR: return "SuboptimalKHR";
    7637:	48 89 c3             	mov    %rax,%rbx
    763a:	48 8d 45 cd          	lea    -0x33(%rbp),%rax
    763e:	48 89 c7             	mov    %rax,%rdi
    7641:	e8 2a dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7646:	48 89 d8             	mov    %rbx,%rax
    7649:	48 89 c7             	mov    %rax,%rdi
    764c:	e8 4f dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorOutOfDateKHR: return "ErrorOutOfDateKHR";
    7651:	48 89 c3             	mov    %rax,%rbx
    7654:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    7658:	48 89 c7             	mov    %rax,%rdi
    765b:	e8 10 dc ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7660:	48 89 d8             	mov    %rbx,%rax
    7663:	48 89 c7             	mov    %rax,%rdi
    7666:	e8 35 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorIncompatibleDisplayKHR: return "ErrorIncompatibleDisplayKHR";
    766b:	48 89 c3             	mov    %rax,%rbx
    766e:	48 8d 45 cb          	lea    -0x35(%rbp),%rax
    7672:	48 89 c7             	mov    %rax,%rdi
    7675:	e8 f6 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    767a:	48 89 d8             	mov    %rbx,%rax
    767d:	48 89 c7             	mov    %rax,%rdi
    7680:	e8 1b dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorValidationFailedEXT: return "ErrorValidationFailedEXT";
    7685:	48 89 c3             	mov    %rax,%rbx
    7688:	48 8d 45 ca          	lea    -0x36(%rbp),%rax
    768c:	48 89 c7             	mov    %rax,%rdi
    768f:	e8 dc db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7694:	48 89 d8             	mov    %rbx,%rax
    7697:	48 89 c7             	mov    %rax,%rdi
    769a:	e8 01 dd ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidShaderNV: return "ErrorInvalidShaderNV";
    769f:	48 89 c3             	mov    %rax,%rbx
    76a2:	48 8d 45 c9          	lea    -0x37(%rbp),%rax
    76a6:	48 89 c7             	mov    %rax,%rdi
    76a9:	e8 c2 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76ae:	48 89 d8             	mov    %rbx,%rax
    76b1:	48 89 c7             	mov    %rax,%rdi
    76b4:	e8 e7 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: return "ErrorInvalidDrmFormatModifierPlaneLayoutEXT";
    76b9:	48 89 c3             	mov    %rax,%rbx
    76bc:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    76c0:	48 89 c7             	mov    %rax,%rdi
    76c3:	e8 a8 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76c8:	48 89 d8             	mov    %rbx,%rax
    76cb:	48 89 c7             	mov    %rax,%rdi
    76ce:	e8 cd dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorNotPermittedKHR: return "ErrorNotPermittedKHR";
    76d3:	48 89 c3             	mov    %rax,%rbx
    76d6:	48 8d 45 c7          	lea    -0x39(%rbp),%rax
    76da:	48 89 c7             	mov    %rax,%rdi
    76dd:	e8 8e db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76e2:	48 89 d8             	mov    %rbx,%rax
    76e5:	48 89 c7             	mov    %rax,%rdi
    76e8:	e8 b3 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadIdleKHR: return "ThreadIdleKHR";
    76ed:	48 89 c3             	mov    %rax,%rbx
    76f0:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
    76f4:	48 89 c7             	mov    %rax,%rdi
    76f7:	e8 74 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    76fc:	48 89 d8             	mov    %rbx,%rax
    76ff:	48 89 c7             	mov    %rax,%rdi
    7702:	e8 99 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eThreadDoneKHR: return "ThreadDoneKHR";
    7707:	48 89 c3             	mov    %rax,%rbx
    770a:	48 8d 45 c5          	lea    -0x3b(%rbp),%rax
    770e:	48 89 c7             	mov    %rax,%rdi
    7711:	e8 5a db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7716:	48 89 d8             	mov    %rbx,%rax
    7719:	48 89 c7             	mov    %rax,%rdi
    771c:	e8 7f dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationDeferredKHR: return "OperationDeferredKHR";
    7721:	48 89 c3             	mov    %rax,%rbx
    7724:	48 8d 45 c4          	lea    -0x3c(%rbp),%rax
    7728:	48 89 c7             	mov    %rax,%rdi
    772b:	e8 40 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7730:	48 89 d8             	mov    %rbx,%rax
    7733:	48 89 c7             	mov    %rax,%rdi
    7736:	e8 65 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eOperationNotDeferredKHR: return "OperationNotDeferredKHR";
    773b:	48 89 c3             	mov    %rax,%rbx
    773e:	48 8d 45 c3          	lea    -0x3d(%rbp),%rax
    7742:	48 89 c7             	mov    %rax,%rdi
    7745:	e8 26 db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    774a:	48 89 d8             	mov    %rbx,%rax
    774d:	48 89 c7             	mov    %rax,%rdi
    7750:	e8 4b dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      case Result::eErrorCompressionExhaustedEXT: return "ErrorCompressionExhaustedEXT";
    7755:	48 89 c3             	mov    %rax,%rbx
    7758:	48 8d 45 c2          	lea    -0x3e(%rbp),%rax
    775c:	48 89 c7             	mov    %rax,%rdi
    775f:	e8 0c db ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    7764:	48 89 d8             	mov    %rbx,%rax
    7767:	48 89 c7             	mov    %rax,%rdi
    776a:	e8 31 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
      default: return "invalid ( " + VULKAN_HPP_NAMESPACE::toHexString( static_cast<uint32_t>( value ) ) + " )";
    776f:	48 89 c3             	mov    %rax,%rbx
    7772:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7776:	48 89 c7             	mov    %rax,%rdi
    7779:	e8 5a 27 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    777e:	eb 03                	jmp    7783 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf17>
    7780:	48 89 c3             	mov    %rax,%rbx
    7783:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7787:	48 89 c7             	mov    %rax,%rdi
    778a:	e8 49 27 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    778f:	48 89 d8             	mov    %rbx,%rax
    7792:	eb 00                	jmp    7794 <_ZNK2vk17ErrorCategoryImpl7messageB5cxx11Ei+0xf28>
    7794:	48 89 c7             	mov    %rax,%rdi
    7797:	e8 04 dc ff ff       	call   53a0 <_Unwind_Resume@plt>
    }
    779c:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
    77a3:	48 81 c4 20 02 00 00 	add    $0x220,%rsp
    77aa:	5b                   	pop    %rbx
    77ab:	41 5c                	pop    %r12
    77ad:	5d                   	pop    %rbp
    77ae:	c3                   	ret
    77af:	90                   	nop

00000000000077b0 <_ZN2vk5ErrorC1Ev>:
    Error() VULKAN_HPP_NOEXCEPT                = default;
    77b0:	55                   	push   %rbp
    77b1:	48 89 e5             	mov    %rsp,%rbp
    77b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77b8:	48 8d 15 69 b2 02 00 	lea    0x2b269(%rip),%rdx        # 32a28 <_ZTVN2vk5ErrorE+0x10>
    77bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77c3:	48 89 10             	mov    %rdx,(%rax)
    77c6:	90                   	nop
    77c7:	5d                   	pop    %rbp
    77c8:	c3                   	ret
    77c9:	90                   	nop

00000000000077ca <_ZN2vk5ErrorD1Ev>:
    virtual ~Error() VULKAN_HPP_NOEXCEPT       = default;
    77ca:	55                   	push   %rbp
    77cb:	48 89 e5             	mov    %rsp,%rbp
    77ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77d2:	48 8d 15 4f b2 02 00 	lea    0x2b24f(%rip),%rdx        # 32a28 <_ZTVN2vk5ErrorE+0x10>
    77d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77dd:	48 89 10             	mov    %rdx,(%rax)
    77e0:	90                   	nop
    77e1:	5d                   	pop    %rbp
    77e2:	c3                   	ret
    77e3:	90                   	nop

00000000000077e4 <_ZN2vk5ErrorD0Ev>:
    77e4:	55                   	push   %rbp
    77e5:	48 89 e5             	mov    %rsp,%rbp
    77e8:	48 83 ec 10          	sub    $0x10,%rsp
    77ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    77f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    77f4:	48 89 c7             	mov    %rax,%rdi
    77f7:	e8 ce ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    77fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7800:	be 08 00 00 00       	mov    $0x8,%esi
    7805:	48 89 c7             	mov    %rax,%rdi
    7808:	e8 23 da ff ff       	call   5230 <_ZdlPvm@plt>
    780d:	c9                   	leave
    780e:	c3                   	ret
    780f:	90                   	nop

0000000000007810 <_ZN2vk11SystemErrorC1ESt10error_code>:
    SystemError( std::error_code ec ) : Error(), std::system_error( ec ) {}
    7810:	55                   	push   %rbp
    7811:	48 89 e5             	mov    %rsp,%rbp
    7814:	53                   	push   %rbx
    7815:	48 83 ec 28          	sub    $0x28,%rsp
    7819:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    781d:	48 89 d1             	mov    %rdx,%rcx
    7820:	48 89 f0             	mov    %rsi,%rax
    7823:	48 89 fa             	mov    %rdi,%rdx
    7826:	48 89 ca             	mov    %rcx,%rdx
    7829:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    782d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7835:	48 89 c7             	mov    %rax,%rdi
    7838:	e8 73 ff ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    783d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7841:	48 8d 48 08          	lea    0x8(%rax),%rcx
    7845:	8b 55 d0             	mov    -0x30(%rbp),%edx
    7848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    784c:	89 d6                	mov    %edx,%esi
    784e:	48 89 c2             	mov    %rax,%rdx
    7851:	48 89 cf             	mov    %rcx,%rdi
    7854:	e8 4d eb ff ff       	call   63a6 <_ZNSt12system_errorC1ESt10error_code>
    7859:	48 8d 15 b0 b0 02 00 	lea    0x2b0b0(%rip),%rdx        # 32910 <_ZTVN2vk11SystemErrorE+0x10>
    7860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7864:	48 89 10             	mov    %rdx,(%rax)
    7867:	48 8d 15 ca b0 02 00 	lea    0x2b0ca(%rip),%rdx        # 32938 <_ZTVN2vk11SystemErrorE+0x38>
    786e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7872:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7876:	eb 1a                	jmp    7892 <_ZN2vk11SystemErrorC1ESt10error_code+0x82>
    7878:	48 89 c3             	mov    %rax,%rbx
    787b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    787f:	48 89 c7             	mov    %rax,%rdi
    7882:	e8 43 ff ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7887:	48 89 d8             	mov    %rbx,%rax
    788a:	48 89 c7             	mov    %rax,%rdi
    788d:	e8 0e db ff ff       	call   53a0 <_Unwind_Resume@plt>
    7892:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7896:	c9                   	leave
    7897:	c3                   	ret

0000000000007898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>:
    SystemError( std::error_code ec, char const * what ) : Error(), std::system_error( ec, what ) {}
    7898:	55                   	push   %rbp
    7899:	48 89 e5             	mov    %rsp,%rbp
    789c:	53                   	push   %rbx
    789d:	48 83 ec 28          	sub    $0x28,%rsp
    78a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    78a5:	89 f0                	mov    %esi,%eax
    78a7:	48 89 d6             	mov    %rdx,%rsi
    78aa:	48 89 f2             	mov    %rsi,%rdx
    78ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    78b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    78b5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    78b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78bd:	48 89 c7             	mov    %rax,%rdi
    78c0:	e8 eb fe ff ff       	call   77b0 <_ZN2vk5ErrorC1Ev>
    78c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78c9:	48 8d 78 08          	lea    0x8(%rax),%rdi
    78cd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    78d1:	8b 55 d0             	mov    -0x30(%rbp),%edx
    78d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    78d8:	89 d6                	mov    %edx,%esi
    78da:	48 89 c2             	mov    %rax,%rdx
    78dd:	e8 5c eb ff ff       	call   643e <_ZNSt12system_errorC1ESt10error_codePKc>
    78e2:	48 8d 15 27 b0 02 00 	lea    0x2b027(%rip),%rdx        # 32910 <_ZTVN2vk11SystemErrorE+0x10>
    78e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78ed:	48 89 10             	mov    %rdx,(%rax)
    78f0:	48 8d 15 41 b0 02 00 	lea    0x2b041(%rip),%rdx        # 32938 <_ZTVN2vk11SystemErrorE+0x38>
    78f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    78fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    78ff:	eb 1a                	jmp    791b <_ZN2vk11SystemErrorC1ESt10error_codePKc+0x83>
    7901:	48 89 c3             	mov    %rax,%rbx
    7904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7908:	48 89 c7             	mov    %rax,%rdi
    790b:	e8 ba fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    7910:	48 89 d8             	mov    %rbx,%rax
    7913:	48 89 c7             	mov    %rax,%rdi
    7916:	e8 85 da ff ff       	call   53a0 <_Unwind_Resume@plt>
    791b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    791f:	c9                   	leave
    7920:	c3                   	ret
    7921:	90                   	nop

0000000000007922 <_ZNK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7922:	55                   	push   %rbp
    7923:	48 89 e5             	mov    %rsp,%rbp
    7926:	48 83 ec 10          	sub    $0x10,%rsp
    792a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return std::system_error::what();
    792e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7932:	48 83 c0 08          	add    $0x8,%rax
    7936:	48 89 c7             	mov    %rax,%rdi
    7939:	e8 a2 d9 ff ff       	call   52e0 <_ZNKSt13runtime_error4whatEv@plt>
    }
    793e:	c9                   	leave
    793f:	c3                   	ret

0000000000007940 <_ZThn8_NK2vk11SystemError4whatEv>:
    virtual const char * what() const VULKAN_HPP_NOEXCEPT
    7940:	48 83 ef 08          	sub    $0x8,%rdi
    7944:	eb dc                	jmp    7922 <_ZNK2vk11SystemError4whatEv>

0000000000007946 <_ZN2vk11SystemErrorD1Ev>:
  class SystemError
    7946:	55                   	push   %rbp
    7947:	48 89 e5             	mov    %rsp,%rbp
    794a:	48 83 ec 10          	sub    $0x10,%rsp
    794e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    7952:	48 8d 15 b7 af 02 00 	lea    0x2afb7(%rip),%rdx        # 32910 <_ZTVN2vk11SystemErrorE+0x10>
    7959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    795d:	48 89 10             	mov    %rdx,(%rax)
    7960:	48 8d 15 d1 af 02 00 	lea    0x2afd1(%rip),%rdx        # 32938 <_ZTVN2vk11SystemErrorE+0x38>
    7967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    796b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    796f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7973:	48 83 c0 08          	add    $0x8,%rax
    7977:	48 89 c7             	mov    %rax,%rdi
    797a:	e8 41 d8 ff ff       	call   51c0 <_ZNSt12system_errorD2Ev@plt>
    797f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7983:	48 89 c7             	mov    %rax,%rdi
    7986:	e8 3f fe ff ff       	call   77ca <_ZN2vk5ErrorD1Ev>
    798b:	90                   	nop
    798c:	c9                   	leave
    798d:	c3                   	ret

000000000000798e <_ZThn8_N2vk11SystemErrorD1Ev>:
    798e:	48 83 ef 08          	sub    $0x8,%rdi
    7992:	eb b2                	jmp    7946 <_ZN2vk11SystemErrorD1Ev>

0000000000007994 <_ZN2vk11SystemErrorD0Ev>:
    7994:	55                   	push   %rbp
    7995:	48 89 e5             	mov    %rsp,%rbp
    7998:	48 83 ec 10          	sub    $0x10,%rsp
    799c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    79a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79a4:	48 89 c7             	mov    %rax,%rdi
    79a7:	e8 9a ff ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    79ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    79b0:	be 28 00 00 00       	mov    $0x28,%esi
    79b5:	48 89 c7             	mov    %rax,%rdi
    79b8:	e8 73 d8 ff ff       	call   5230 <_ZdlPvm@plt>
    79bd:	c9                   	leave
    79be:	c3                   	ret

00000000000079bf <_ZThn8_N2vk11SystemErrorD0Ev>:
    79bf:	48 83 ef 08          	sub    $0x8,%rdi
    79c3:	eb cf                	jmp    7994 <_ZN2vk11SystemErrorD0Ev>
    79c5:	90                   	nop

00000000000079c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>:
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    79c6:	55                   	push   %rbp
    79c7:	48 89 e5             	mov    %rsp,%rbp
    79ca:	53                   	push   %rbx
    79cb:	48 83 ec 38          	sub    $0x38,%rsp
    79cf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    79d3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    79d7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    79db:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    79e2:	0f b6 05 6f b9 02 00 	movzbl 0x2b96f(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79e9:	84 c0                	test   %al,%al
    79eb:	0f 94 c0             	sete   %al
    79ee:	84 c0                	test   %al,%al
    79f0:	74 4a                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    79f2:	48 8d 05 5f b9 02 00 	lea    0x2b95f(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    79f9:	48 89 c7             	mov    %rax,%rdi
    79fc:	e8 bf d9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7a01:	85 c0                	test   %eax,%eax
    7a03:	0f 95 c0             	setne  %al
    7a06:	84 c0                	test   %al,%al
    7a08:	74 32                	je     7a3c <_ZN2vk20OutOfHostMemoryErrorC1EPKc+0x76>
    7a0a:	48 8d 05 e7 b7 02 00 	lea    0x2b7e7(%rip),%rax        # 331f8 <__dso_handle>
    7a11:	48 89 c2             	mov    %rax,%rdx
    7a14:	48 8d 05 e5 b7 02 00 	lea    0x2b7e5(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7a1b:	48 89 c6             	mov    %rax,%rsi
    7a1e:	48 8d 05 ff 4b 00 00 	lea    0x4bff(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7a25:	48 89 c7             	mov    %rax,%rdi
    7a28:	e8 a3 d7 ff ff       	call   51d0 <__cxa_atexit@plt>
    7a2d:	48 8d 05 24 b9 02 00 	lea    0x2b924(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7a34:	48 89 c7             	mov    %rax,%rdi
    7a37:	e8 c4 d6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7a3c:	48 8d 15 bd b7 02 00 	lea    0x2b7bd(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7a43:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7a46:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7a4a:	89 ce                	mov    %ecx,%esi
    7a4c:	48 89 c7             	mov    %rax,%rdi
    7a4f:	e8 b4 e8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7a54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7a58:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfHostMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfHostMemory ), message ) {}
    7a5c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7a60:	48 89 c6             	mov    %rax,%rsi
    7a63:	48 89 d7             	mov    %rdx,%rdi
    7a66:	48 89 d0             	mov    %rdx,%rax
    7a69:	48 89 c2             	mov    %rax,%rdx
    7a6c:	48 89 df             	mov    %rbx,%rdi
    7a6f:	e8 24 fe ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7a74:	48 8d 15 45 ae 02 00 	lea    0x2ae45(%rip),%rdx        # 328c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    7a7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a7f:	48 89 10             	mov    %rdx,(%rax)
    7a82:	48 8d 15 5f ae 02 00 	lea    0x2ae5f(%rip),%rdx        # 328e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    7a89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a8d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7a91:	90                   	nop
    7a92:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7a96:	c9                   	leave
    7a97:	c3                   	ret

0000000000007a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>:
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7a98:	55                   	push   %rbp
    7a99:	48 89 e5             	mov    %rsp,%rbp
    7a9c:	53                   	push   %rbx
    7a9d:	48 83 ec 38          	sub    $0x38,%rsp
    7aa1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7aa5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7aa9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7aad:	c7 45 ec fe ff ff ff 	movl   $0xfffffffe,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ab4:	0f b6 05 9d b8 02 00 	movzbl 0x2b89d(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7abb:	84 c0                	test   %al,%al
    7abd:	0f 94 c0             	sete   %al
    7ac0:	84 c0                	test   %al,%al
    7ac2:	74 4a                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7ac4:	48 8d 05 8d b8 02 00 	lea    0x2b88d(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7acb:	48 89 c7             	mov    %rax,%rdi
    7ace:	e8 ed d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ad3:	85 c0                	test   %eax,%eax
    7ad5:	0f 95 c0             	setne  %al
    7ad8:	84 c0                	test   %al,%al
    7ada:	74 32                	je     7b0e <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc+0x76>
    7adc:	48 8d 05 15 b7 02 00 	lea    0x2b715(%rip),%rax        # 331f8 <__dso_handle>
    7ae3:	48 89 c2             	mov    %rax,%rdx
    7ae6:	48 8d 05 13 b7 02 00 	lea    0x2b713(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7aed:	48 89 c6             	mov    %rax,%rsi
    7af0:	48 8d 05 2d 4b 00 00 	lea    0x4b2d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7af7:	48 89 c7             	mov    %rax,%rdi
    7afa:	e8 d1 d6 ff ff       	call   51d0 <__cxa_atexit@plt>
    7aff:	48 8d 05 52 b8 02 00 	lea    0x2b852(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b06:	48 89 c7             	mov    %rax,%rdi
    7b09:	e8 f2 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7b0e:	48 8d 15 eb b6 02 00 	lea    0x2b6eb(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7b15:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7b18:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7b1c:	89 ce                	mov    %ecx,%esi
    7b1e:	48 89 c7             	mov    %rax,%rdi
    7b21:	e8 e2 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7b26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7b2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDeviceMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDeviceMemory ), message ) {}
    7b2e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7b32:	48 89 c6             	mov    %rax,%rsi
    7b35:	48 89 d7             	mov    %rdx,%rdi
    7b38:	48 89 d0             	mov    %rdx,%rax
    7b3b:	48 89 c2             	mov    %rax,%rdx
    7b3e:	48 89 df             	mov    %rbx,%rdi
    7b41:	e8 52 fd ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7b46:	48 8d 15 23 ad 02 00 	lea    0x2ad23(%rip),%rdx        # 32870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    7b4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b51:	48 89 10             	mov    %rdx,(%rax)
    7b54:	48 8d 15 3d ad 02 00 	lea    0x2ad3d(%rip),%rdx        # 32898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    7b5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7b63:	90                   	nop
    7b64:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7b68:	c9                   	leave
    7b69:	c3                   	ret

0000000000007b6a <_ZN2vk25InitializationFailedErrorC1EPKc>:
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7b6a:	55                   	push   %rbp
    7b6b:	48 89 e5             	mov    %rsp,%rbp
    7b6e:	53                   	push   %rbx
    7b6f:	48 83 ec 38          	sub    $0x38,%rsp
    7b73:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7b77:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7b7b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7b7f:	c7 45 ec fd ff ff ff 	movl   $0xfffffffd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7b86:	0f b6 05 cb b7 02 00 	movzbl 0x2b7cb(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b8d:	84 c0                	test   %al,%al
    7b8f:	0f 94 c0             	sete   %al
    7b92:	84 c0                	test   %al,%al
    7b94:	74 4a                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7b96:	48 8d 05 bb b7 02 00 	lea    0x2b7bb(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7b9d:	48 89 c7             	mov    %rax,%rdi
    7ba0:	e8 1b d8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7ba5:	85 c0                	test   %eax,%eax
    7ba7:	0f 95 c0             	setne  %al
    7baa:	84 c0                	test   %al,%al
    7bac:	74 32                	je     7be0 <_ZN2vk25InitializationFailedErrorC1EPKc+0x76>
    7bae:	48 8d 05 43 b6 02 00 	lea    0x2b643(%rip),%rax        # 331f8 <__dso_handle>
    7bb5:	48 89 c2             	mov    %rax,%rdx
    7bb8:	48 8d 05 41 b6 02 00 	lea    0x2b641(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7bbf:	48 89 c6             	mov    %rax,%rsi
    7bc2:	48 8d 05 5b 4a 00 00 	lea    0x4a5b(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7bc9:	48 89 c7             	mov    %rax,%rdi
    7bcc:	e8 ff d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7bd1:	48 8d 05 80 b7 02 00 	lea    0x2b780(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7bd8:	48 89 c7             	mov    %rax,%rdi
    7bdb:	e8 20 d5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7be0:	48 8d 15 19 b6 02 00 	lea    0x2b619(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7be7:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7bea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7bee:	89 ce                	mov    %ecx,%esi
    7bf0:	48 89 c7             	mov    %rax,%rdi
    7bf3:	e8 10 e7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7bf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7bfc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InitializationFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorInitializationFailed ), message ) {}
    7c00:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7c04:	48 89 c6             	mov    %rax,%rsi
    7c07:	48 89 d7             	mov    %rdx,%rdi
    7c0a:	48 89 d0             	mov    %rdx,%rax
    7c0d:	48 89 c2             	mov    %rax,%rdx
    7c10:	48 89 df             	mov    %rbx,%rdi
    7c13:	e8 80 fc ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7c18:	48 8d 15 01 ac 02 00 	lea    0x2ac01(%rip),%rdx        # 32820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    7c1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c23:	48 89 10             	mov    %rdx,(%rax)
    7c26:	48 8d 15 1b ac 02 00 	lea    0x2ac1b(%rip),%rdx        # 32848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    7c2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7c31:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7c35:	90                   	nop
    7c36:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7c3a:	c9                   	leave
    7c3b:	c3                   	ret

0000000000007c3c <_ZN2vk15DeviceLostErrorC1EPKc>:
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7c3c:	55                   	push   %rbp
    7c3d:	48 89 e5             	mov    %rsp,%rbp
    7c40:	53                   	push   %rbx
    7c41:	48 83 ec 38          	sub    $0x38,%rsp
    7c45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7c49:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7c4d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7c51:	c7 45 ec fc ff ff ff 	movl   $0xfffffffc,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7c58:	0f b6 05 f9 b6 02 00 	movzbl 0x2b6f9(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c5f:	84 c0                	test   %al,%al
    7c61:	0f 94 c0             	sete   %al
    7c64:	84 c0                	test   %al,%al
    7c66:	74 4a                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c68:	48 8d 05 e9 b6 02 00 	lea    0x2b6e9(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7c6f:	48 89 c7             	mov    %rax,%rdi
    7c72:	e8 49 d7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7c77:	85 c0                	test   %eax,%eax
    7c79:	0f 95 c0             	setne  %al
    7c7c:	84 c0                	test   %al,%al
    7c7e:	74 32                	je     7cb2 <_ZN2vk15DeviceLostErrorC1EPKc+0x76>
    7c80:	48 8d 05 71 b5 02 00 	lea    0x2b571(%rip),%rax        # 331f8 <__dso_handle>
    7c87:	48 89 c2             	mov    %rax,%rdx
    7c8a:	48 8d 05 6f b5 02 00 	lea    0x2b56f(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7c91:	48 89 c6             	mov    %rax,%rsi
    7c94:	48 8d 05 89 49 00 00 	lea    0x4989(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7c9b:	48 89 c7             	mov    %rax,%rdi
    7c9e:	e8 2d d5 ff ff       	call   51d0 <__cxa_atexit@plt>
    7ca3:	48 8d 05 ae b6 02 00 	lea    0x2b6ae(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7caa:	48 89 c7             	mov    %rax,%rdi
    7cad:	e8 4e d4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7cb2:	48 8d 15 47 b5 02 00 	lea    0x2b547(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7cb9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7cbc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7cc0:	89 ce                	mov    %ecx,%esi
    7cc2:	48 89 c7             	mov    %rax,%rdi
    7cc5:	e8 3e e6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7cca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7cce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    DeviceLostError( char const * message ) : SystemError( make_error_code( Result::eErrorDeviceLost ), message ) {}
    7cd2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7cd6:	48 89 c6             	mov    %rax,%rsi
    7cd9:	48 89 d7             	mov    %rdx,%rdi
    7cdc:	48 89 d0             	mov    %rdx,%rax
    7cdf:	48 89 c2             	mov    %rax,%rdx
    7ce2:	48 89 df             	mov    %rbx,%rdi
    7ce5:	e8 ae fb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7cea:	48 8d 15 df aa 02 00 	lea    0x2aadf(%rip),%rdx        # 327d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    7cf1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7cf5:	48 89 10             	mov    %rdx,(%rax)
    7cf8:	48 8d 15 f9 aa 02 00 	lea    0x2aaf9(%rip),%rdx        # 327f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    7cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7d03:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7d07:	90                   	nop
    7d08:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7d0c:	c9                   	leave
    7d0d:	c3                   	ret

0000000000007d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>:
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7d0e:	55                   	push   %rbp
    7d0f:	48 89 e5             	mov    %rsp,%rbp
    7d12:	53                   	push   %rbx
    7d13:	48 83 ec 38          	sub    $0x38,%rsp
    7d17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7d1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7d1f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7d23:	c7 45 ec fb ff ff ff 	movl   $0xfffffffb,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7d2a:	0f b6 05 27 b6 02 00 	movzbl 0x2b627(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d31:	84 c0                	test   %al,%al
    7d33:	0f 94 c0             	sete   %al
    7d36:	84 c0                	test   %al,%al
    7d38:	74 4a                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d3a:	48 8d 05 17 b6 02 00 	lea    0x2b617(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d41:	48 89 c7             	mov    %rax,%rdi
    7d44:	e8 77 d6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7d49:	85 c0                	test   %eax,%eax
    7d4b:	0f 95 c0             	setne  %al
    7d4e:	84 c0                	test   %al,%al
    7d50:	74 32                	je     7d84 <_ZN2vk20MemoryMapFailedErrorC1EPKc+0x76>
    7d52:	48 8d 05 9f b4 02 00 	lea    0x2b49f(%rip),%rax        # 331f8 <__dso_handle>
    7d59:	48 89 c2             	mov    %rax,%rdx
    7d5c:	48 8d 05 9d b4 02 00 	lea    0x2b49d(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7d63:	48 89 c6             	mov    %rax,%rsi
    7d66:	48 8d 05 b7 48 00 00 	lea    0x48b7(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7d6d:	48 89 c7             	mov    %rax,%rdi
    7d70:	e8 5b d4 ff ff       	call   51d0 <__cxa_atexit@plt>
    7d75:	48 8d 05 dc b5 02 00 	lea    0x2b5dc(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7d7c:	48 89 c7             	mov    %rax,%rdi
    7d7f:	e8 7c d3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7d84:	48 8d 15 75 b4 02 00 	lea    0x2b475(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7d8b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7d8e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7d92:	89 ce                	mov    %ecx,%esi
    7d94:	48 89 c7             	mov    %rax,%rdi
    7d97:	e8 6c e5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7d9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7da0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    MemoryMapFailedError( char const * message ) : SystemError( make_error_code( Result::eErrorMemoryMapFailed ), message ) {}
    7da4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7da8:	48 89 c6             	mov    %rax,%rsi
    7dab:	48 89 d7             	mov    %rdx,%rdi
    7dae:	48 89 d0             	mov    %rdx,%rax
    7db1:	48 89 c2             	mov    %rax,%rdx
    7db4:	48 89 df             	mov    %rbx,%rdi
    7db7:	e8 dc fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7dbc:	48 8d 15 bd a9 02 00 	lea    0x2a9bd(%rip),%rdx        # 32780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    7dc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dc7:	48 89 10             	mov    %rdx,(%rax)
    7dca:	48 8d 15 d7 a9 02 00 	lea    0x2a9d7(%rip),%rdx        # 327a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    7dd1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7dd5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7dd9:	90                   	nop
    7dda:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7dde:	c9                   	leave
    7ddf:	c3                   	ret

0000000000007de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>:
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7de0:	55                   	push   %rbp
    7de1:	48 89 e5             	mov    %rsp,%rbp
    7de4:	53                   	push   %rbx
    7de5:	48 83 ec 38          	sub    $0x38,%rsp
    7de9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ded:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7df1:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7df5:	c7 45 ec fa ff ff ff 	movl   $0xfffffffa,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7dfc:	0f b6 05 55 b5 02 00 	movzbl 0x2b555(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e03:	84 c0                	test   %al,%al
    7e05:	0f 94 c0             	sete   %al
    7e08:	84 c0                	test   %al,%al
    7e0a:	74 4a                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e0c:	48 8d 05 45 b5 02 00 	lea    0x2b545(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e13:	48 89 c7             	mov    %rax,%rdi
    7e16:	e8 a5 d5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7e1b:	85 c0                	test   %eax,%eax
    7e1d:	0f 95 c0             	setne  %al
    7e20:	84 c0                	test   %al,%al
    7e22:	74 32                	je     7e56 <_ZN2vk20LayerNotPresentErrorC1EPKc+0x76>
    7e24:	48 8d 05 cd b3 02 00 	lea    0x2b3cd(%rip),%rax        # 331f8 <__dso_handle>
    7e2b:	48 89 c2             	mov    %rax,%rdx
    7e2e:	48 8d 05 cb b3 02 00 	lea    0x2b3cb(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7e35:	48 89 c6             	mov    %rax,%rsi
    7e38:	48 8d 05 e5 47 00 00 	lea    0x47e5(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7e3f:	48 89 c7             	mov    %rax,%rdi
    7e42:	e8 89 d3 ff ff       	call   51d0 <__cxa_atexit@plt>
    7e47:	48 8d 05 0a b5 02 00 	lea    0x2b50a(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7e4e:	48 89 c7             	mov    %rax,%rdi
    7e51:	e8 aa d2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7e56:	48 8d 15 a3 b3 02 00 	lea    0x2b3a3(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7e5d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7e60:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7e64:	89 ce                	mov    %ecx,%esi
    7e66:	48 89 c7             	mov    %rax,%rdi
    7e69:	e8 9a e4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7e6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7e72:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    LayerNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorLayerNotPresent ), message ) {}
    7e76:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7e7a:	48 89 c6             	mov    %rax,%rsi
    7e7d:	48 89 d7             	mov    %rdx,%rdi
    7e80:	48 89 d0             	mov    %rdx,%rax
    7e83:	48 89 c2             	mov    %rax,%rdx
    7e86:	48 89 df             	mov    %rbx,%rdi
    7e89:	e8 0a fa ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7e8e:	48 8d 15 9b a8 02 00 	lea    0x2a89b(%rip),%rdx        # 32730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    7e95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7e99:	48 89 10             	mov    %rdx,(%rax)
    7e9c:	48 8d 15 b5 a8 02 00 	lea    0x2a8b5(%rip),%rdx        # 32758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    7ea3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7ea7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7eab:	90                   	nop
    7eac:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7eb0:	c9                   	leave
    7eb1:	c3                   	ret

0000000000007eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>:
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7eb2:	55                   	push   %rbp
    7eb3:	48 89 e5             	mov    %rsp,%rbp
    7eb6:	53                   	push   %rbx
    7eb7:	48 83 ec 38          	sub    $0x38,%rsp
    7ebb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7ebf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7ec3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7ec7:	c7 45 ec f9 ff ff ff 	movl   $0xfffffff9,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7ece:	0f b6 05 83 b4 02 00 	movzbl 0x2b483(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ed5:	84 c0                	test   %al,%al
    7ed7:	0f 94 c0             	sete   %al
    7eda:	84 c0                	test   %al,%al
    7edc:	74 4a                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ede:	48 8d 05 73 b4 02 00 	lea    0x2b473(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ee5:	48 89 c7             	mov    %rax,%rdi
    7ee8:	e8 d3 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7eed:	85 c0                	test   %eax,%eax
    7eef:	0f 95 c0             	setne  %al
    7ef2:	84 c0                	test   %al,%al
    7ef4:	74 32                	je     7f28 <_ZN2vk24ExtensionNotPresentErrorC1EPKc+0x76>
    7ef6:	48 8d 05 fb b2 02 00 	lea    0x2b2fb(%rip),%rax        # 331f8 <__dso_handle>
    7efd:	48 89 c2             	mov    %rax,%rdx
    7f00:	48 8d 05 f9 b2 02 00 	lea    0x2b2f9(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7f07:	48 89 c6             	mov    %rax,%rsi
    7f0a:	48 8d 05 13 47 00 00 	lea    0x4713(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7f11:	48 89 c7             	mov    %rax,%rdi
    7f14:	e8 b7 d2 ff ff       	call   51d0 <__cxa_atexit@plt>
    7f19:	48 8d 05 38 b4 02 00 	lea    0x2b438(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7f20:	48 89 c7             	mov    %rax,%rdi
    7f23:	e8 d8 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7f28:	48 8d 15 d1 b2 02 00 	lea    0x2b2d1(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    7f2f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    7f32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7f36:	89 ce                	mov    %ecx,%esi
    7f38:	48 89 c7             	mov    %rax,%rdi
    7f3b:	e8 c8 e3 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    7f40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7f44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ExtensionNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorExtensionNotPresent ), message ) {}
    7f48:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    7f4c:	48 89 c6             	mov    %rax,%rsi
    7f4f:	48 89 d7             	mov    %rdx,%rdi
    7f52:	48 89 d0             	mov    %rdx,%rax
    7f55:	48 89 c2             	mov    %rax,%rdx
    7f58:	48 89 df             	mov    %rbx,%rdi
    7f5b:	e8 38 f9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    7f60:	48 8d 15 79 a7 02 00 	lea    0x2a779(%rip),%rdx        # 326e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    7f67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f6b:	48 89 10             	mov    %rdx,(%rax)
    7f6e:	48 8d 15 93 a7 02 00 	lea    0x2a793(%rip),%rdx        # 32708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    7f75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7f79:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7f7d:	90                   	nop
    7f7e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    7f82:	c9                   	leave
    7f83:	c3                   	ret

0000000000007f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>:
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    7f84:	55                   	push   %rbp
    7f85:	48 89 e5             	mov    %rsp,%rbp
    7f88:	53                   	push   %rbx
    7f89:	48 83 ec 38          	sub    $0x38,%rsp
    7f8d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7f91:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7f95:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    7f99:	c7 45 ec f8 ff ff ff 	movl   $0xfffffff8,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    7fa0:	0f b6 05 b1 b3 02 00 	movzbl 0x2b3b1(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fa7:	84 c0                	test   %al,%al
    7fa9:	0f 94 c0             	sete   %al
    7fac:	84 c0                	test   %al,%al
    7fae:	74 4a                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fb0:	48 8d 05 a1 b3 02 00 	lea    0x2b3a1(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7fb7:	48 89 c7             	mov    %rax,%rdi
    7fba:	e8 01 d4 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    7fbf:	85 c0                	test   %eax,%eax
    7fc1:	0f 95 c0             	setne  %al
    7fc4:	84 c0                	test   %al,%al
    7fc6:	74 32                	je     7ffa <_ZN2vk22FeatureNotPresentErrorC1EPKc+0x76>
    7fc8:	48 8d 05 29 b2 02 00 	lea    0x2b229(%rip),%rax        # 331f8 <__dso_handle>
    7fcf:	48 89 c2             	mov    %rax,%rdx
    7fd2:	48 8d 05 27 b2 02 00 	lea    0x2b227(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    7fd9:	48 89 c6             	mov    %rax,%rsi
    7fdc:	48 8d 05 41 46 00 00 	lea    0x4641(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    7fe3:	48 89 c7             	mov    %rax,%rdi
    7fe6:	e8 e5 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    7feb:	48 8d 05 66 b3 02 00 	lea    0x2b366(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    7ff2:	48 89 c7             	mov    %rax,%rdi
    7ff5:	e8 06 d1 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    7ffa:	48 8d 15 ff b1 02 00 	lea    0x2b1ff(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8001:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8004:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8008:	89 ce                	mov    %ecx,%esi
    800a:	48 89 c7             	mov    %rax,%rdi
    800d:	e8 f6 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8012:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8016:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FeatureNotPresentError( char const * message ) : SystemError( make_error_code( Result::eErrorFeatureNotPresent ), message ) {}
    801a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    801e:	48 89 c6             	mov    %rax,%rsi
    8021:	48 89 d7             	mov    %rdx,%rdi
    8024:	48 89 d0             	mov    %rdx,%rax
    8027:	48 89 c2             	mov    %rax,%rdx
    802a:	48 89 df             	mov    %rbx,%rdi
    802d:	e8 66 f8 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8032:	48 8d 15 57 a6 02 00 	lea    0x2a657(%rip),%rdx        # 32690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    8039:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    803d:	48 89 10             	mov    %rdx,(%rax)
    8040:	48 8d 15 71 a6 02 00 	lea    0x2a671(%rip),%rdx        # 326b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    8047:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    804b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    804f:	90                   	nop
    8050:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8054:	c9                   	leave
    8055:	c3                   	ret

0000000000008056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>:
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    8056:	55                   	push   %rbp
    8057:	48 89 e5             	mov    %rsp,%rbp
    805a:	53                   	push   %rbx
    805b:	48 83 ec 38          	sub    $0x38,%rsp
    805f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8063:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8067:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    806b:	c7 45 ec f7 ff ff ff 	movl   $0xfffffff7,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8072:	0f b6 05 df b2 02 00 	movzbl 0x2b2df(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8079:	84 c0                	test   %al,%al
    807b:	0f 94 c0             	sete   %al
    807e:	84 c0                	test   %al,%al
    8080:	74 4a                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    8082:	48 8d 05 cf b2 02 00 	lea    0x2b2cf(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8089:	48 89 c7             	mov    %rax,%rdi
    808c:	e8 2f d3 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8091:	85 c0                	test   %eax,%eax
    8093:	0f 95 c0             	setne  %al
    8096:	84 c0                	test   %al,%al
    8098:	74 32                	je     80cc <_ZN2vk23IncompatibleDriverErrorC1EPKc+0x76>
    809a:	48 8d 05 57 b1 02 00 	lea    0x2b157(%rip),%rax        # 331f8 <__dso_handle>
    80a1:	48 89 c2             	mov    %rax,%rdx
    80a4:	48 8d 05 55 b1 02 00 	lea    0x2b155(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    80ab:	48 89 c6             	mov    %rax,%rsi
    80ae:	48 8d 05 6f 45 00 00 	lea    0x456f(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    80b5:	48 89 c7             	mov    %rax,%rdi
    80b8:	e8 13 d1 ff ff       	call   51d0 <__cxa_atexit@plt>
    80bd:	48 8d 05 94 b2 02 00 	lea    0x2b294(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    80c4:	48 89 c7             	mov    %rax,%rdi
    80c7:	e8 34 d0 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    80cc:	48 8d 15 2d b1 02 00 	lea    0x2b12d(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    80d3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    80d6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    80da:	89 ce                	mov    %ecx,%esi
    80dc:	48 89 c7             	mov    %rax,%rdi
    80df:	e8 24 e2 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    80e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    80e8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDriverError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDriver ), message ) {}
    80ec:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    80f0:	48 89 c6             	mov    %rax,%rsi
    80f3:	48 89 d7             	mov    %rdx,%rdi
    80f6:	48 89 d0             	mov    %rdx,%rax
    80f9:	48 89 c2             	mov    %rax,%rdx
    80fc:	48 89 df             	mov    %rbx,%rdi
    80ff:	e8 94 f7 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8104:	48 8d 15 35 a5 02 00 	lea    0x2a535(%rip),%rdx        # 32640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    810b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    810f:	48 89 10             	mov    %rdx,(%rax)
    8112:	48 8d 15 4f a5 02 00 	lea    0x2a54f(%rip),%rdx        # 32668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    8119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    811d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8121:	90                   	nop
    8122:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8126:	c9                   	leave
    8127:	c3                   	ret

0000000000008128 <_ZN2vk19TooManyObjectsErrorC1EPKc>:
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    8128:	55                   	push   %rbp
    8129:	48 89 e5             	mov    %rsp,%rbp
    812c:	53                   	push   %rbx
    812d:	48 83 ec 38          	sub    $0x38,%rsp
    8131:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8135:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8139:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    813d:	c7 45 ec f6 ff ff ff 	movl   $0xfffffff6,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8144:	0f b6 05 0d b2 02 00 	movzbl 0x2b20d(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    814b:	84 c0                	test   %al,%al
    814d:	0f 94 c0             	sete   %al
    8150:	84 c0                	test   %al,%al
    8152:	74 4a                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    8154:	48 8d 05 fd b1 02 00 	lea    0x2b1fd(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    815b:	48 89 c7             	mov    %rax,%rdi
    815e:	e8 5d d2 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8163:	85 c0                	test   %eax,%eax
    8165:	0f 95 c0             	setne  %al
    8168:	84 c0                	test   %al,%al
    816a:	74 32                	je     819e <_ZN2vk19TooManyObjectsErrorC1EPKc+0x76>
    816c:	48 8d 05 85 b0 02 00 	lea    0x2b085(%rip),%rax        # 331f8 <__dso_handle>
    8173:	48 89 c2             	mov    %rax,%rdx
    8176:	48 8d 05 83 b0 02 00 	lea    0x2b083(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    817d:	48 89 c6             	mov    %rax,%rsi
    8180:	48 8d 05 9d 44 00 00 	lea    0x449d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8187:	48 89 c7             	mov    %rax,%rdi
    818a:	e8 41 d0 ff ff       	call   51d0 <__cxa_atexit@plt>
    818f:	48 8d 05 c2 b1 02 00 	lea    0x2b1c2(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8196:	48 89 c7             	mov    %rax,%rdi
    8199:	e8 62 cf ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    819e:	48 8d 15 5b b0 02 00 	lea    0x2b05b(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    81a5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    81a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    81ac:	89 ce                	mov    %ecx,%esi
    81ae:	48 89 c7             	mov    %rax,%rdi
    81b1:	e8 52 e1 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    81b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    81ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    TooManyObjectsError( char const * message ) : SystemError( make_error_code( Result::eErrorTooManyObjects ), message ) {}
    81be:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    81c2:	48 89 c6             	mov    %rax,%rsi
    81c5:	48 89 d7             	mov    %rdx,%rdi
    81c8:	48 89 d0             	mov    %rdx,%rax
    81cb:	48 89 c2             	mov    %rax,%rdx
    81ce:	48 89 df             	mov    %rbx,%rdi
    81d1:	e8 c2 f6 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    81d6:	48 8d 15 13 a4 02 00 	lea    0x2a413(%rip),%rdx        # 325f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    81dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81e1:	48 89 10             	mov    %rdx,(%rax)
    81e4:	48 8d 15 2d a4 02 00 	lea    0x2a42d(%rip),%rdx        # 32618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    81eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    81ef:	48 89 50 08          	mov    %rdx,0x8(%rax)
    81f3:	90                   	nop
    81f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    81f8:	c9                   	leave
    81f9:	c3                   	ret

00000000000081fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>:
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    81fa:	55                   	push   %rbp
    81fb:	48 89 e5             	mov    %rsp,%rbp
    81fe:	53                   	push   %rbx
    81ff:	48 83 ec 38          	sub    $0x38,%rsp
    8203:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8207:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    820b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    820f:	c7 45 ec f5 ff ff ff 	movl   $0xfffffff5,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8216:	0f b6 05 3b b1 02 00 	movzbl 0x2b13b(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    821d:	84 c0                	test   %al,%al
    821f:	0f 94 c0             	sete   %al
    8222:	84 c0                	test   %al,%al
    8224:	74 4a                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    8226:	48 8d 05 2b b1 02 00 	lea    0x2b12b(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    822d:	48 89 c7             	mov    %rax,%rdi
    8230:	e8 8b d1 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8235:	85 c0                	test   %eax,%eax
    8237:	0f 95 c0             	setne  %al
    823a:	84 c0                	test   %al,%al
    823c:	74 32                	je     8270 <_ZN2vk23FormatNotSupportedErrorC1EPKc+0x76>
    823e:	48 8d 05 b3 af 02 00 	lea    0x2afb3(%rip),%rax        # 331f8 <__dso_handle>
    8245:	48 89 c2             	mov    %rax,%rdx
    8248:	48 8d 05 b1 af 02 00 	lea    0x2afb1(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    824f:	48 89 c6             	mov    %rax,%rsi
    8252:	48 8d 05 cb 43 00 00 	lea    0x43cb(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8259:	48 89 c7             	mov    %rax,%rdi
    825c:	e8 6f cf ff ff       	call   51d0 <__cxa_atexit@plt>
    8261:	48 8d 05 f0 b0 02 00 	lea    0x2b0f0(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8268:	48 89 c7             	mov    %rax,%rdi
    826b:	e8 90 ce ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8270:	48 8d 15 89 af 02 00 	lea    0x2af89(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8277:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    827a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    827e:	89 ce                	mov    %ecx,%esi
    8280:	48 89 c7             	mov    %rax,%rdi
    8283:	e8 80 e0 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8288:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    828c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FormatNotSupportedError( char const * message ) : SystemError( make_error_code( Result::eErrorFormatNotSupported ), message ) {}
    8290:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8294:	48 89 c6             	mov    %rax,%rsi
    8297:	48 89 d7             	mov    %rdx,%rdi
    829a:	48 89 d0             	mov    %rdx,%rax
    829d:	48 89 c2             	mov    %rax,%rdx
    82a0:	48 89 df             	mov    %rbx,%rdi
    82a3:	e8 f0 f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    82a8:	48 8d 15 f1 a2 02 00 	lea    0x2a2f1(%rip),%rdx        # 325a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    82af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82b3:	48 89 10             	mov    %rdx,(%rax)
    82b6:	48 8d 15 0b a3 02 00 	lea    0x2a30b(%rip),%rdx        # 325c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    82bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    82c1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    82c5:	90                   	nop
    82c6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    82ca:	c9                   	leave
    82cb:	c3                   	ret

00000000000082cc <_ZN2vk19FragmentedPoolErrorC1EPKc>:
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    82cc:	55                   	push   %rbp
    82cd:	48 89 e5             	mov    %rsp,%rbp
    82d0:	53                   	push   %rbx
    82d1:	48 83 ec 38          	sub    $0x38,%rsp
    82d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    82d9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    82dd:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    82e1:	c7 45 ec f4 ff ff ff 	movl   $0xfffffff4,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    82e8:	0f b6 05 69 b0 02 00 	movzbl 0x2b069(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ef:	84 c0                	test   %al,%al
    82f1:	0f 94 c0             	sete   %al
    82f4:	84 c0                	test   %al,%al
    82f6:	74 4a                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    82f8:	48 8d 05 59 b0 02 00 	lea    0x2b059(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    82ff:	48 89 c7             	mov    %rax,%rdi
    8302:	e8 b9 d0 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8307:	85 c0                	test   %eax,%eax
    8309:	0f 95 c0             	setne  %al
    830c:	84 c0                	test   %al,%al
    830e:	74 32                	je     8342 <_ZN2vk19FragmentedPoolErrorC1EPKc+0x76>
    8310:	48 8d 05 e1 ae 02 00 	lea    0x2aee1(%rip),%rax        # 331f8 <__dso_handle>
    8317:	48 89 c2             	mov    %rax,%rdx
    831a:	48 8d 05 df ae 02 00 	lea    0x2aedf(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8321:	48 89 c6             	mov    %rax,%rsi
    8324:	48 8d 05 f9 42 00 00 	lea    0x42f9(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    832b:	48 89 c7             	mov    %rax,%rdi
    832e:	e8 9d ce ff ff       	call   51d0 <__cxa_atexit@plt>
    8333:	48 8d 05 1e b0 02 00 	lea    0x2b01e(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    833a:	48 89 c7             	mov    %rax,%rdi
    833d:	e8 be cd ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8342:	48 8d 15 b7 ae 02 00 	lea    0x2aeb7(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8349:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    834c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8350:	89 ce                	mov    %ecx,%esi
    8352:	48 89 c7             	mov    %rax,%rdi
    8355:	e8 ae df ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    835a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    835e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentedPoolError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentedPool ), message ) {}
    8362:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8366:	48 89 c6             	mov    %rax,%rsi
    8369:	48 89 d7             	mov    %rdx,%rdi
    836c:	48 89 d0             	mov    %rdx,%rax
    836f:	48 89 c2             	mov    %rax,%rdx
    8372:	48 89 df             	mov    %rbx,%rdi
    8375:	e8 1e f5 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    837a:	48 8d 15 cf a1 02 00 	lea    0x2a1cf(%rip),%rdx        # 32550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    8381:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8385:	48 89 10             	mov    %rdx,(%rax)
    8388:	48 8d 15 e9 a1 02 00 	lea    0x2a1e9(%rip),%rdx        # 32578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    838f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8393:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8397:	90                   	nop
    8398:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    839c:	c9                   	leave
    839d:	c3                   	ret

000000000000839e <_ZN2vk12UnknownErrorC1EPKc>:
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    839e:	55                   	push   %rbp
    839f:	48 89 e5             	mov    %rsp,%rbp
    83a2:	53                   	push   %rbx
    83a3:	48 83 ec 38          	sub    $0x38,%rsp
    83a7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    83ab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    83af:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    83b3:	c7 45 ec f3 ff ff ff 	movl   $0xfffffff3,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    83ba:	0f b6 05 97 af 02 00 	movzbl 0x2af97(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83c1:	84 c0                	test   %al,%al
    83c3:	0f 94 c0             	sete   %al
    83c6:	84 c0                	test   %al,%al
    83c8:	74 4a                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83ca:	48 8d 05 87 af 02 00 	lea    0x2af87(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    83d1:	48 89 c7             	mov    %rax,%rdi
    83d4:	e8 e7 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    83d9:	85 c0                	test   %eax,%eax
    83db:	0f 95 c0             	setne  %al
    83de:	84 c0                	test   %al,%al
    83e0:	74 32                	je     8414 <_ZN2vk12UnknownErrorC1EPKc+0x76>
    83e2:	48 8d 05 0f ae 02 00 	lea    0x2ae0f(%rip),%rax        # 331f8 <__dso_handle>
    83e9:	48 89 c2             	mov    %rax,%rdx
    83ec:	48 8d 05 0d ae 02 00 	lea    0x2ae0d(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    83f3:	48 89 c6             	mov    %rax,%rsi
    83f6:	48 8d 05 27 42 00 00 	lea    0x4227(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    83fd:	48 89 c7             	mov    %rax,%rdi
    8400:	e8 cb cd ff ff       	call   51d0 <__cxa_atexit@plt>
    8405:	48 8d 05 4c af 02 00 	lea    0x2af4c(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    840c:	48 89 c7             	mov    %rax,%rdi
    840f:	e8 ec cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8414:	48 8d 15 e5 ad 02 00 	lea    0x2ade5(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    841b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    841e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8422:	89 ce                	mov    %ecx,%esi
    8424:	48 89 c7             	mov    %rax,%rdi
    8427:	e8 dc de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    842c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8430:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    UnknownError( char const * message ) : SystemError( make_error_code( Result::eErrorUnknown ), message ) {}
    8434:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8438:	48 89 c6             	mov    %rax,%rsi
    843b:	48 89 d7             	mov    %rdx,%rdi
    843e:	48 89 d0             	mov    %rdx,%rax
    8441:	48 89 c2             	mov    %rax,%rdx
    8444:	48 89 df             	mov    %rbx,%rdi
    8447:	e8 4c f4 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    844c:	48 8d 15 ad a0 02 00 	lea    0x2a0ad(%rip),%rdx        # 32500 <_ZTVN2vk12UnknownErrorE+0x10>
    8453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8457:	48 89 10             	mov    %rdx,(%rax)
    845a:	48 8d 15 c7 a0 02 00 	lea    0x2a0c7(%rip),%rdx        # 32528 <_ZTVN2vk12UnknownErrorE+0x38>
    8461:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8465:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8469:	90                   	nop
    846a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    846e:	c9                   	leave
    846f:	c3                   	ret

0000000000008470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>:
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8470:	55                   	push   %rbp
    8471:	48 89 e5             	mov    %rsp,%rbp
    8474:	53                   	push   %rbx
    8475:	48 83 ec 38          	sub    $0x38,%rsp
    8479:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    847d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8481:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8485:	c7 45 ec 78 28 64 c4 	movl   $0xc4642878,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    848c:	0f b6 05 c5 ae 02 00 	movzbl 0x2aec5(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8493:	84 c0                	test   %al,%al
    8495:	0f 94 c0             	sete   %al
    8498:	84 c0                	test   %al,%al
    849a:	74 4a                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    849c:	48 8d 05 b5 ae 02 00 	lea    0x2aeb5(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84a3:	48 89 c7             	mov    %rax,%rdi
    84a6:	e8 15 cf ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    84ab:	85 c0                	test   %eax,%eax
    84ad:	0f 95 c0             	setne  %al
    84b0:	84 c0                	test   %al,%al
    84b2:	74 32                	je     84e6 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc+0x76>
    84b4:	48 8d 05 3d ad 02 00 	lea    0x2ad3d(%rip),%rax        # 331f8 <__dso_handle>
    84bb:	48 89 c2             	mov    %rax,%rdx
    84be:	48 8d 05 3b ad 02 00 	lea    0x2ad3b(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    84c5:	48 89 c6             	mov    %rax,%rsi
    84c8:	48 8d 05 55 41 00 00 	lea    0x4155(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    84cf:	48 89 c7             	mov    %rax,%rdi
    84d2:	e8 f9 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    84d7:	48 8d 05 7a ae 02 00 	lea    0x2ae7a(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    84de:	48 89 c7             	mov    %rax,%rdi
    84e1:	e8 1a cc ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    84e6:	48 8d 15 13 ad 02 00 	lea    0x2ad13(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    84ed:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    84f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    84f4:	89 ce                	mov    %ecx,%esi
    84f6:	48 89 c7             	mov    %rax,%rdi
    84f9:	e8 0a de ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    84fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8502:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfPoolMemoryError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfPoolMemory ), message ) {}
    8506:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    850a:	48 89 c6             	mov    %rax,%rsi
    850d:	48 89 d7             	mov    %rdx,%rdi
    8510:	48 89 d0             	mov    %rdx,%rax
    8513:	48 89 c2             	mov    %rax,%rdx
    8516:	48 89 df             	mov    %rbx,%rdi
    8519:	e8 7a f3 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    851e:	48 8d 15 8b 9f 02 00 	lea    0x29f8b(%rip),%rdx        # 324b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    8525:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8529:	48 89 10             	mov    %rdx,(%rax)
    852c:	48 8d 15 a5 9f 02 00 	lea    0x29fa5(%rip),%rdx        # 324d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    8533:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8537:	48 89 50 08          	mov    %rdx,0x8(%rax)
    853b:	90                   	nop
    853c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8540:	c9                   	leave
    8541:	c3                   	ret

0000000000008542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>:
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    8542:	55                   	push   %rbp
    8543:	48 89 e5             	mov    %rsp,%rbp
    8546:	53                   	push   %rbx
    8547:	48 83 ec 38          	sub    $0x38,%rsp
    854b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    854f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8553:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8557:	c7 45 ec bd 1c 64 c4 	movl   $0xc4641cbd,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    855e:	0f b6 05 f3 ad 02 00 	movzbl 0x2adf3(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8565:	84 c0                	test   %al,%al
    8567:	0f 94 c0             	sete   %al
    856a:	84 c0                	test   %al,%al
    856c:	74 4a                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    856e:	48 8d 05 e3 ad 02 00 	lea    0x2ade3(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8575:	48 89 c7             	mov    %rax,%rdi
    8578:	e8 43 ce ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    857d:	85 c0                	test   %eax,%eax
    857f:	0f 95 c0             	setne  %al
    8582:	84 c0                	test   %al,%al
    8584:	74 32                	je     85b8 <_ZN2vk26InvalidExternalHandleErrorC1EPKc+0x76>
    8586:	48 8d 05 6b ac 02 00 	lea    0x2ac6b(%rip),%rax        # 331f8 <__dso_handle>
    858d:	48 89 c2             	mov    %rax,%rdx
    8590:	48 8d 05 69 ac 02 00 	lea    0x2ac69(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8597:	48 89 c6             	mov    %rax,%rsi
    859a:	48 8d 05 83 40 00 00 	lea    0x4083(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    85a1:	48 89 c7             	mov    %rax,%rdi
    85a4:	e8 27 cc ff ff       	call   51d0 <__cxa_atexit@plt>
    85a9:	48 8d 05 a8 ad 02 00 	lea    0x2ada8(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    85b0:	48 89 c7             	mov    %rax,%rdi
    85b3:	e8 48 cb ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    85b8:	48 8d 15 41 ac 02 00 	lea    0x2ac41(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    85bf:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    85c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    85c6:	89 ce                	mov    %ecx,%esi
    85c8:	48 89 c7             	mov    %rax,%rdi
    85cb:	e8 38 dd ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    85d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    85d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidExternalHandleError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidExternalHandle ), message ) {}
    85d8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    85dc:	48 89 c6             	mov    %rax,%rsi
    85df:	48 89 d7             	mov    %rdx,%rdi
    85e2:	48 89 d0             	mov    %rdx,%rax
    85e5:	48 89 c2             	mov    %rax,%rdx
    85e8:	48 89 df             	mov    %rbx,%rdi
    85eb:	e8 a8 f2 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    85f0:	48 8d 15 69 9e 02 00 	lea    0x29e69(%rip),%rdx        # 32460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    85f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    85fb:	48 89 10             	mov    %rdx,(%rax)
    85fe:	48 8d 15 83 9e 02 00 	lea    0x29e83(%rip),%rdx        # 32488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    8605:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8609:	48 89 50 08          	mov    %rdx,0x8(%rax)
    860d:	90                   	nop
    860e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8612:	c9                   	leave
    8613:	c3                   	ret

0000000000008614 <_ZN2vk18FragmentationErrorC1EPKc>:
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    8614:	55                   	push   %rbp
    8615:	48 89 e5             	mov    %rsp,%rbp
    8618:	53                   	push   %rbx
    8619:	48 83 ec 38          	sub    $0x38,%rsp
    861d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8621:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8625:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8629:	c7 45 ec 18 c1 62 c4 	movl   $0xc462c118,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8630:	0f b6 05 21 ad 02 00 	movzbl 0x2ad21(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8637:	84 c0                	test   %al,%al
    8639:	0f 94 c0             	sete   %al
    863c:	84 c0                	test   %al,%al
    863e:	74 4a                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8640:	48 8d 05 11 ad 02 00 	lea    0x2ad11(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8647:	48 89 c7             	mov    %rax,%rdi
    864a:	e8 71 cd ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    864f:	85 c0                	test   %eax,%eax
    8651:	0f 95 c0             	setne  %al
    8654:	84 c0                	test   %al,%al
    8656:	74 32                	je     868a <_ZN2vk18FragmentationErrorC1EPKc+0x76>
    8658:	48 8d 05 99 ab 02 00 	lea    0x2ab99(%rip),%rax        # 331f8 <__dso_handle>
    865f:	48 89 c2             	mov    %rax,%rdx
    8662:	48 8d 05 97 ab 02 00 	lea    0x2ab97(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8669:	48 89 c6             	mov    %rax,%rsi
    866c:	48 8d 05 b1 3f 00 00 	lea    0x3fb1(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8673:	48 89 c7             	mov    %rax,%rdi
    8676:	e8 55 cb ff ff       	call   51d0 <__cxa_atexit@plt>
    867b:	48 8d 05 d6 ac 02 00 	lea    0x2acd6(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8682:	48 89 c7             	mov    %rax,%rdi
    8685:	e8 76 ca ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    868a:	48 8d 15 6f ab 02 00 	lea    0x2ab6f(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8691:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8694:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8698:	89 ce                	mov    %ecx,%esi
    869a:	48 89 c7             	mov    %rax,%rdi
    869d:	e8 66 dc ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    86a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    86a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    FragmentationError( char const * message ) : SystemError( make_error_code( Result::eErrorFragmentation ), message ) {}
    86aa:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    86ae:	48 89 c6             	mov    %rax,%rsi
    86b1:	48 89 d7             	mov    %rdx,%rdi
    86b4:	48 89 d0             	mov    %rdx,%rax
    86b7:	48 89 c2             	mov    %rax,%rdx
    86ba:	48 89 df             	mov    %rbx,%rdi
    86bd:	e8 d6 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    86c2:	48 8d 15 47 9d 02 00 	lea    0x29d47(%rip),%rdx        # 32410 <_ZTVN2vk18FragmentationErrorE+0x10>
    86c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86cd:	48 89 10             	mov    %rdx,(%rax)
    86d0:	48 8d 15 61 9d 02 00 	lea    0x29d61(%rip),%rdx        # 32438 <_ZTVN2vk18FragmentationErrorE+0x38>
    86d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    86db:	48 89 50 08          	mov    %rdx,0x8(%rax)
    86df:	90                   	nop
    86e0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    86e4:	c9                   	leave
    86e5:	c3                   	ret

00000000000086e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>:
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    86e6:	55                   	push   %rbp
    86e7:	48 89 e5             	mov    %rsp,%rbp
    86ea:	53                   	push   %rbx
    86eb:	48 83 ec 38          	sub    $0x38,%rsp
    86ef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    86f3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    86f7:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    86fb:	c7 45 ec 18 4a 61 c4 	movl   $0xc4614a18,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8702:	0f b6 05 4f ac 02 00 	movzbl 0x2ac4f(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8709:	84 c0                	test   %al,%al
    870b:	0f 94 c0             	sete   %al
    870e:	84 c0                	test   %al,%al
    8710:	74 4a                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    8712:	48 8d 05 3f ac 02 00 	lea    0x2ac3f(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8719:	48 89 c7             	mov    %rax,%rdi
    871c:	e8 9f cc ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8721:	85 c0                	test   %eax,%eax
    8723:	0f 95 c0             	setne  %al
    8726:	84 c0                	test   %al,%al
    8728:	74 32                	je     875c <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc+0x76>
    872a:	48 8d 05 c7 aa 02 00 	lea    0x2aac7(%rip),%rax        # 331f8 <__dso_handle>
    8731:	48 89 c2             	mov    %rax,%rdx
    8734:	48 8d 05 c5 aa 02 00 	lea    0x2aac5(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    873b:	48 89 c6             	mov    %rax,%rsi
    873e:	48 8d 05 df 3e 00 00 	lea    0x3edf(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8745:	48 89 c7             	mov    %rax,%rdi
    8748:	e8 83 ca ff ff       	call   51d0 <__cxa_atexit@plt>
    874d:	48 8d 05 04 ac 02 00 	lea    0x2ac04(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8754:	48 89 c7             	mov    %rax,%rdi
    8757:	e8 a4 c9 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    875c:	48 8d 15 9d aa 02 00 	lea    0x2aa9d(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8763:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8766:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    876a:	89 ce                	mov    %ecx,%esi
    876c:	48 89 c7             	mov    %rax,%rdi
    876f:	e8 94 db ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8774:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8778:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidOpaqueCaptureAddressError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidOpaqueCaptureAddress ), message ) {}
    877c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8780:	48 89 c6             	mov    %rax,%rsi
    8783:	48 89 d7             	mov    %rdx,%rdi
    8786:	48 89 d0             	mov    %rdx,%rax
    8789:	48 89 c2             	mov    %rax,%rdx
    878c:	48 89 df             	mov    %rbx,%rdi
    878f:	e8 04 f1 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8794:	48 8d 15 25 9c 02 00 	lea    0x29c25(%rip),%rdx        # 323c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    879b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    879f:	48 89 10             	mov    %rdx,(%rax)
    87a2:	48 8d 15 3f 9c 02 00 	lea    0x29c3f(%rip),%rdx        # 323e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    87a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    87ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
    87b1:	90                   	nop
    87b2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    87b6:	c9                   	leave
    87b7:	c3                   	ret

00000000000087b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>:
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    87b8:	55                   	push   %rbp
    87b9:	48 89 e5             	mov    %rsp,%rbp
    87bc:	53                   	push   %rbx
    87bd:	48 83 ec 38          	sub    $0x38,%rsp
    87c1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    87c5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    87c9:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    87cd:	c7 45 ec 00 36 65 c4 	movl   $0xc4653600,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    87d4:	0f b6 05 7d ab 02 00 	movzbl 0x2ab7d(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87db:	84 c0                	test   %al,%al
    87dd:	0f 94 c0             	sete   %al
    87e0:	84 c0                	test   %al,%al
    87e2:	74 4a                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87e4:	48 8d 05 6d ab 02 00 	lea    0x2ab6d(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    87eb:	48 89 c7             	mov    %rax,%rdi
    87ee:	e8 cd cb ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    87f3:	85 c0                	test   %eax,%eax
    87f5:	0f 95 c0             	setne  %al
    87f8:	84 c0                	test   %al,%al
    87fa:	74 32                	je     882e <_ZN2vk19SurfaceLostKHRErrorC1EPKc+0x76>
    87fc:	48 8d 05 f5 a9 02 00 	lea    0x2a9f5(%rip),%rax        # 331f8 <__dso_handle>
    8803:	48 89 c2             	mov    %rax,%rdx
    8806:	48 8d 05 f3 a9 02 00 	lea    0x2a9f3(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    880d:	48 89 c6             	mov    %rax,%rsi
    8810:	48 8d 05 0d 3e 00 00 	lea    0x3e0d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8817:	48 89 c7             	mov    %rax,%rdi
    881a:	e8 b1 c9 ff ff       	call   51d0 <__cxa_atexit@plt>
    881f:	48 8d 05 32 ab 02 00 	lea    0x2ab32(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8826:	48 89 c7             	mov    %rax,%rdi
    8829:	e8 d2 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    882e:	48 8d 15 cb a9 02 00 	lea    0x2a9cb(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8835:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8838:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    883c:	89 ce                	mov    %ecx,%esi
    883e:	48 89 c7             	mov    %rax,%rdi
    8841:	e8 c2 da ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8846:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    884a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    SurfaceLostKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorSurfaceLostKHR ), message ) {}
    884e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8852:	48 89 c6             	mov    %rax,%rsi
    8855:	48 89 d7             	mov    %rdx,%rdi
    8858:	48 89 d0             	mov    %rdx,%rax
    885b:	48 89 c2             	mov    %rax,%rdx
    885e:	48 89 df             	mov    %rbx,%rdi
    8861:	e8 32 f0 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8866:	48 8d 15 03 9b 02 00 	lea    0x29b03(%rip),%rdx        # 32370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    886d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8871:	48 89 10             	mov    %rdx,(%rax)
    8874:	48 8d 15 1d 9b 02 00 	lea    0x29b1d(%rip),%rdx        # 32398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    887b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    887f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8883:	90                   	nop
    8884:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8888:	c9                   	leave
    8889:	c3                   	ret

000000000000888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>:
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    888a:	55                   	push   %rbp
    888b:	48 89 e5             	mov    %rsp,%rbp
    888e:	53                   	push   %rbx
    888f:	48 83 ec 38          	sub    $0x38,%rsp
    8893:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8897:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    889b:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    889f:	c7 45 ec ff 35 65 c4 	movl   $0xc46535ff,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    88a6:	0f b6 05 ab aa 02 00 	movzbl 0x2aaab(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88ad:	84 c0                	test   %al,%al
    88af:	0f 94 c0             	sete   %al
    88b2:	84 c0                	test   %al,%al
    88b4:	74 4a                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88b6:	48 8d 05 9b aa 02 00 	lea    0x2aa9b(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88bd:	48 89 c7             	mov    %rax,%rdi
    88c0:	e8 fb ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    88c5:	85 c0                	test   %eax,%eax
    88c7:	0f 95 c0             	setne  %al
    88ca:	84 c0                	test   %al,%al
    88cc:	74 32                	je     8900 <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc+0x76>
    88ce:	48 8d 05 23 a9 02 00 	lea    0x2a923(%rip),%rax        # 331f8 <__dso_handle>
    88d5:	48 89 c2             	mov    %rax,%rdx
    88d8:	48 8d 05 21 a9 02 00 	lea    0x2a921(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    88df:	48 89 c6             	mov    %rax,%rsi
    88e2:	48 8d 05 3b 3d 00 00 	lea    0x3d3b(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    88e9:	48 89 c7             	mov    %rax,%rdi
    88ec:	e8 df c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    88f1:	48 8d 05 60 aa 02 00 	lea    0x2aa60(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    88f8:	48 89 c7             	mov    %rax,%rdi
    88fb:	e8 00 c8 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8900:	48 8d 15 f9 a8 02 00 	lea    0x2a8f9(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8907:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    890a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    890e:	89 ce                	mov    %ecx,%esi
    8910:	48 89 c7             	mov    %rax,%rdi
    8913:	e8 f0 d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8918:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    891c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NativeWindowInUseKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNativeWindowInUseKHR ), message ) {}
    8920:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8924:	48 89 c6             	mov    %rax,%rsi
    8927:	48 89 d7             	mov    %rdx,%rdi
    892a:	48 89 d0             	mov    %rdx,%rax
    892d:	48 89 c2             	mov    %rax,%rdx
    8930:	48 89 df             	mov    %rbx,%rdi
    8933:	e8 60 ef ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8938:	48 8d 15 e1 99 02 00 	lea    0x299e1(%rip),%rdx        # 32320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    893f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8943:	48 89 10             	mov    %rdx,(%rax)
    8946:	48 8d 15 fb 99 02 00 	lea    0x299fb(%rip),%rdx        # 32348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    894d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8951:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8955:	90                   	nop
    8956:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    895a:	c9                   	leave
    895b:	c3                   	ret

000000000000895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>:
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    895c:	55                   	push   %rbp
    895d:	48 89 e5             	mov    %rsp,%rbp
    8960:	53                   	push   %rbx
    8961:	48 83 ec 38          	sub    $0x38,%rsp
    8965:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8969:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    896d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8971:	c7 45 ec 14 32 65 c4 	movl   $0xc4653214,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8978:	0f b6 05 d9 a9 02 00 	movzbl 0x2a9d9(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    897f:	84 c0                	test   %al,%al
    8981:	0f 94 c0             	sete   %al
    8984:	84 c0                	test   %al,%al
    8986:	74 4a                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    8988:	48 8d 05 c9 a9 02 00 	lea    0x2a9c9(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    898f:	48 89 c7             	mov    %rax,%rdi
    8992:	e8 29 ca ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8997:	85 c0                	test   %eax,%eax
    8999:	0f 95 c0             	setne  %al
    899c:	84 c0                	test   %al,%al
    899e:	74 32                	je     89d2 <_ZN2vk17OutOfDateKHRErrorC1EPKc+0x76>
    89a0:	48 8d 05 51 a8 02 00 	lea    0x2a851(%rip),%rax        # 331f8 <__dso_handle>
    89a7:	48 89 c2             	mov    %rax,%rdx
    89aa:	48 8d 05 4f a8 02 00 	lea    0x2a84f(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    89b1:	48 89 c6             	mov    %rax,%rsi
    89b4:	48 8d 05 69 3c 00 00 	lea    0x3c69(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    89bb:	48 89 c7             	mov    %rax,%rdi
    89be:	e8 0d c8 ff ff       	call   51d0 <__cxa_atexit@plt>
    89c3:	48 8d 05 8e a9 02 00 	lea    0x2a98e(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    89ca:	48 89 c7             	mov    %rax,%rdi
    89cd:	e8 2e c7 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    89d2:	48 8d 15 27 a8 02 00 	lea    0x2a827(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    89d9:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    89dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    89e0:	89 ce                	mov    %ecx,%esi
    89e2:	48 89 c7             	mov    %rax,%rdi
    89e5:	e8 1e d9 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    89ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    89ee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    OutOfDateKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorOutOfDateKHR ), message ) {}
    89f2:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    89f6:	48 89 c6             	mov    %rax,%rsi
    89f9:	48 89 d7             	mov    %rdx,%rdi
    89fc:	48 89 d0             	mov    %rdx,%rax
    89ff:	48 89 c2             	mov    %rax,%rdx
    8a02:	48 89 df             	mov    %rbx,%rdi
    8a05:	e8 8e ee ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8a0a:	48 8d 15 bf 98 02 00 	lea    0x298bf(%rip),%rdx        # 322d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    8a11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a15:	48 89 10             	mov    %rdx,(%rax)
    8a18:	48 8d 15 d9 98 02 00 	lea    0x298d9(%rip),%rdx        # 322f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    8a1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a23:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8a27:	90                   	nop
    8a28:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8a2c:	c9                   	leave
    8a2d:	c3                   	ret

0000000000008a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>:
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8a2e:	55                   	push   %rbp
    8a2f:	48 89 e5             	mov    %rsp,%rbp
    8a32:	53                   	push   %rbx
    8a33:	48 83 ec 38          	sub    $0x38,%rsp
    8a37:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8a3b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8a3f:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8a43:	c7 45 ec 47 2a 65 c4 	movl   $0xc4652a47,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8a4a:	0f b6 05 07 a9 02 00 	movzbl 0x2a907(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a51:	84 c0                	test   %al,%al
    8a53:	0f 94 c0             	sete   %al
    8a56:	84 c0                	test   %al,%al
    8a58:	74 4a                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a5a:	48 8d 05 f7 a8 02 00 	lea    0x2a8f7(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a61:	48 89 c7             	mov    %rax,%rdi
    8a64:	e8 57 c9 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8a69:	85 c0                	test   %eax,%eax
    8a6b:	0f 95 c0             	setne  %al
    8a6e:	84 c0                	test   %al,%al
    8a70:	74 32                	je     8aa4 <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc+0x76>
    8a72:	48 8d 05 7f a7 02 00 	lea    0x2a77f(%rip),%rax        # 331f8 <__dso_handle>
    8a79:	48 89 c2             	mov    %rax,%rdx
    8a7c:	48 8d 05 7d a7 02 00 	lea    0x2a77d(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8a83:	48 89 c6             	mov    %rax,%rsi
    8a86:	48 8d 05 97 3b 00 00 	lea    0x3b97(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8a8d:	48 89 c7             	mov    %rax,%rdi
    8a90:	e8 3b c7 ff ff       	call   51d0 <__cxa_atexit@plt>
    8a95:	48 8d 05 bc a8 02 00 	lea    0x2a8bc(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8a9c:	48 89 c7             	mov    %rax,%rdi
    8a9f:	e8 5c c6 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8aa4:	48 8d 15 55 a7 02 00 	lea    0x2a755(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8aab:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8aae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ab2:	89 ce                	mov    %ecx,%esi
    8ab4:	48 89 c7             	mov    %rax,%rdi
    8ab7:	e8 4c d8 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8abc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8ac0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    IncompatibleDisplayKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorIncompatibleDisplayKHR ), message ) {}
    8ac4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ac8:	48 89 c6             	mov    %rax,%rsi
    8acb:	48 89 d7             	mov    %rdx,%rdi
    8ace:	48 89 d0             	mov    %rdx,%rax
    8ad1:	48 89 c2             	mov    %rax,%rdx
    8ad4:	48 89 df             	mov    %rbx,%rdi
    8ad7:	e8 bc ed ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8adc:	48 8d 15 9d 97 02 00 	lea    0x2979d(%rip),%rdx        # 32280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    8ae3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8ae7:	48 89 10             	mov    %rdx,(%rax)
    8aea:	48 8d 15 b7 97 02 00 	lea    0x297b7(%rip),%rdx        # 322a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    8af1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8af5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8af9:	90                   	nop
    8afa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8afe:	c9                   	leave
    8aff:	c3                   	ret

0000000000008b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>:
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b00:	55                   	push   %rbp
    8b01:	48 89 e5             	mov    %rsp,%rbp
    8b04:	53                   	push   %rbx
    8b05:	48 83 ec 38          	sub    $0x38,%rsp
    8b09:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8b0d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8b11:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8b15:	c7 45 ec 07 0b 65 c4 	movl   $0xc4650b07,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8b1c:	0f b6 05 35 a8 02 00 	movzbl 0x2a835(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b23:	84 c0                	test   %al,%al
    8b25:	0f 94 c0             	sete   %al
    8b28:	84 c0                	test   %al,%al
    8b2a:	74 4a                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b2c:	48 8d 05 25 a8 02 00 	lea    0x2a825(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b33:	48 89 c7             	mov    %rax,%rdi
    8b36:	e8 85 c8 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8b3b:	85 c0                	test   %eax,%eax
    8b3d:	0f 95 c0             	setne  %al
    8b40:	84 c0                	test   %al,%al
    8b42:	74 32                	je     8b76 <_ZN2vk24ValidationFailedEXTErrorC1EPKc+0x76>
    8b44:	48 8d 05 ad a6 02 00 	lea    0x2a6ad(%rip),%rax        # 331f8 <__dso_handle>
    8b4b:	48 89 c2             	mov    %rax,%rdx
    8b4e:	48 8d 05 ab a6 02 00 	lea    0x2a6ab(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8b55:	48 89 c6             	mov    %rax,%rsi
    8b58:	48 8d 05 c5 3a 00 00 	lea    0x3ac5(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8b5f:	48 89 c7             	mov    %rax,%rdi
    8b62:	e8 69 c6 ff ff       	call   51d0 <__cxa_atexit@plt>
    8b67:	48 8d 05 ea a7 02 00 	lea    0x2a7ea(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8b6e:	48 89 c7             	mov    %rax,%rdi
    8b71:	e8 8a c5 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8b76:	48 8d 15 83 a6 02 00 	lea    0x2a683(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8b7d:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8b80:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8b84:	89 ce                	mov    %ecx,%esi
    8b86:	48 89 c7             	mov    %rax,%rdi
    8b89:	e8 7a d7 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8b8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8b92:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ValidationFailedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorValidationFailedEXT ), message ) {}
    8b96:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8b9a:	48 89 c6             	mov    %rax,%rsi
    8b9d:	48 89 d7             	mov    %rdx,%rdi
    8ba0:	48 89 d0             	mov    %rdx,%rax
    8ba3:	48 89 c2             	mov    %rax,%rdx
    8ba6:	48 89 df             	mov    %rbx,%rdi
    8ba9:	e8 ea ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8bae:	48 8d 15 7b 96 02 00 	lea    0x2967b(%rip),%rdx        # 32230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    8bb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bb9:	48 89 10             	mov    %rdx,(%rax)
    8bbc:	48 8d 15 95 96 02 00 	lea    0x29695(%rip),%rdx        # 32258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    8bc3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8bc7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8bcb:	90                   	nop
    8bcc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8bd0:	c9                   	leave
    8bd1:	c3                   	ret

0000000000008bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>:
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8bd2:	55                   	push   %rbp
    8bd3:	48 89 e5             	mov    %rsp,%rbp
    8bd6:	53                   	push   %rbx
    8bd7:	48 83 ec 38          	sub    $0x38,%rsp
    8bdb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8bdf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8be3:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8be7:	c7 45 ec 20 07 65 c4 	movl   $0xc4650720,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8bee:	0f b6 05 63 a7 02 00 	movzbl 0x2a763(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8bf5:	84 c0                	test   %al,%al
    8bf7:	0f 94 c0             	sete   %al
    8bfa:	84 c0                	test   %al,%al
    8bfc:	74 4a                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8bfe:	48 8d 05 53 a7 02 00 	lea    0x2a753(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c05:	48 89 c7             	mov    %rax,%rdi
    8c08:	e8 b3 c7 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8c0d:	85 c0                	test   %eax,%eax
    8c0f:	0f 95 c0             	setne  %al
    8c12:	84 c0                	test   %al,%al
    8c14:	74 32                	je     8c48 <_ZN2vk20InvalidShaderNVErrorC1EPKc+0x76>
    8c16:	48 8d 05 db a5 02 00 	lea    0x2a5db(%rip),%rax        # 331f8 <__dso_handle>
    8c1d:	48 89 c2             	mov    %rax,%rdx
    8c20:	48 8d 05 d9 a5 02 00 	lea    0x2a5d9(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8c27:	48 89 c6             	mov    %rax,%rsi
    8c2a:	48 8d 05 f3 39 00 00 	lea    0x39f3(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8c31:	48 89 c7             	mov    %rax,%rdi
    8c34:	e8 97 c5 ff ff       	call   51d0 <__cxa_atexit@plt>
    8c39:	48 8d 05 18 a7 02 00 	lea    0x2a718(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8c40:	48 89 c7             	mov    %rax,%rdi
    8c43:	e8 b8 c4 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8c48:	48 8d 15 b1 a5 02 00 	lea    0x2a5b1(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8c4f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8c52:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8c56:	89 ce                	mov    %ecx,%esi
    8c58:	48 89 c7             	mov    %rax,%rdi
    8c5b:	e8 a8 d6 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8c60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8c64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    InvalidShaderNVError( char const * message ) : SystemError( make_error_code( Result::eErrorInvalidShaderNV ), message ) {}
    8c68:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8c6c:	48 89 c6             	mov    %rax,%rsi
    8c6f:	48 89 d7             	mov    %rdx,%rdi
    8c72:	48 89 d0             	mov    %rdx,%rax
    8c75:	48 89 c2             	mov    %rax,%rdx
    8c78:	48 89 df             	mov    %rbx,%rdi
    8c7b:	e8 18 ec ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8c80:	48 8d 15 59 95 02 00 	lea    0x29559(%rip),%rdx        # 321e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    8c87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c8b:	48 89 10             	mov    %rdx,(%rax)
    8c8e:	48 8d 15 73 95 02 00 	lea    0x29573(%rip),%rdx        # 32208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    8c95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8c99:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8c9d:	90                   	nop
    8c9e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8ca2:	c9                   	leave
    8ca3:	c3                   	ret

0000000000008ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>:
    InvalidDrmFormatModifierPlaneLayoutEXTError( char const * message )
    8ca4:	55                   	push   %rbp
    8ca5:	48 89 e5             	mov    %rsp,%rbp
    8ca8:	53                   	push   %rbx
    8ca9:	48 83 ec 38          	sub    $0x38,%rsp
    8cad:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8cb1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8cb5:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8cb9:	c7 45 ec d0 cc 62 c4 	movl   $0xc462ccd0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8cc0:	0f b6 05 91 a6 02 00 	movzbl 0x2a691(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cc7:	84 c0                	test   %al,%al
    8cc9:	0f 94 c0             	sete   %al
    8ccc:	84 c0                	test   %al,%al
    8cce:	74 4a                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8cd0:	48 8d 05 81 a6 02 00 	lea    0x2a681(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8cd7:	48 89 c7             	mov    %rax,%rdi
    8cda:	e8 e1 c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8cdf:	85 c0                	test   %eax,%eax
    8ce1:	0f 95 c0             	setne  %al
    8ce4:	84 c0                	test   %al,%al
    8ce6:	74 32                	je     8d1a <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc+0x76>
    8ce8:	48 8d 05 09 a5 02 00 	lea    0x2a509(%rip),%rax        # 331f8 <__dso_handle>
    8cef:	48 89 c2             	mov    %rax,%rdx
    8cf2:	48 8d 05 07 a5 02 00 	lea    0x2a507(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8cf9:	48 89 c6             	mov    %rax,%rsi
    8cfc:	48 8d 05 21 39 00 00 	lea    0x3921(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8d03:	48 89 c7             	mov    %rax,%rdi
    8d06:	e8 c5 c4 ff ff       	call   51d0 <__cxa_atexit@plt>
    8d0b:	48 8d 05 46 a6 02 00 	lea    0x2a646(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d12:	48 89 c7             	mov    %rax,%rdi
    8d15:	e8 e6 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8d1a:	48 8d 15 df a4 02 00 	lea    0x2a4df(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8d21:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8d24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8d28:	89 ce                	mov    %ecx,%esi
    8d2a:	48 89 c7             	mov    %rax,%rdi
    8d2d:	e8 d6 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8d32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8d36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
      : SystemError( make_error_code( Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT ), message )
    8d3a:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8d3e:	48 89 c6             	mov    %rax,%rsi
    8d41:	48 89 d7             	mov    %rdx,%rdi
    8d44:	48 89 d0             	mov    %rdx,%rax
    8d47:	48 89 c2             	mov    %rax,%rdx
    8d4a:	48 89 df             	mov    %rbx,%rdi
    8d4d:	e8 46 eb ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8d52:	48 8d 15 37 94 02 00 	lea    0x29437(%rip),%rdx        # 32190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    8d59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d5d:	48 89 10             	mov    %rdx,(%rax)
    8d60:	48 8d 15 51 94 02 00 	lea    0x29451(%rip),%rdx        # 321b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    8d67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8d6b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    }
    8d6f:	90                   	nop
    8d70:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8d74:	c9                   	leave
    8d75:	c3                   	ret

0000000000008d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>:
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8d76:	55                   	push   %rbp
    8d77:	48 89 e5             	mov    %rsp,%rbp
    8d7a:	53                   	push   %rbx
    8d7b:	48 83 ec 38          	sub    $0x38,%rsp
    8d7f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8d83:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8d87:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8d8b:	c7 45 ec 4f 8e 62 c4 	movl   $0xc4628e4f,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8d92:	0f b6 05 bf a5 02 00 	movzbl 0x2a5bf(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8d99:	84 c0                	test   %al,%al
    8d9b:	0f 94 c0             	sete   %al
    8d9e:	84 c0                	test   %al,%al
    8da0:	74 4a                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8da2:	48 8d 05 af a5 02 00 	lea    0x2a5af(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8da9:	48 89 c7             	mov    %rax,%rdi
    8dac:	e8 0f c6 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8db1:	85 c0                	test   %eax,%eax
    8db3:	0f 95 c0             	setne  %al
    8db6:	84 c0                	test   %al,%al
    8db8:	74 32                	je     8dec <_ZN2vk20NotPermittedKHRErrorC1EPKc+0x76>
    8dba:	48 8d 05 37 a4 02 00 	lea    0x2a437(%rip),%rax        # 331f8 <__dso_handle>
    8dc1:	48 89 c2             	mov    %rax,%rdx
    8dc4:	48 8d 05 35 a4 02 00 	lea    0x2a435(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8dcb:	48 89 c6             	mov    %rax,%rsi
    8dce:	48 8d 05 4f 38 00 00 	lea    0x384f(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8dd5:	48 89 c7             	mov    %rax,%rdi
    8dd8:	e8 f3 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8ddd:	48 8d 05 74 a5 02 00 	lea    0x2a574(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8de4:	48 89 c7             	mov    %rax,%rdi
    8de7:	e8 14 c3 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8dec:	48 8d 15 0d a4 02 00 	lea    0x2a40d(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8df3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8df6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8dfa:	89 ce                	mov    %ecx,%esi
    8dfc:	48 89 c7             	mov    %rax,%rdi
    8dff:	e8 04 d5 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8e04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8e08:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    NotPermittedKHRError( char const * message ) : SystemError( make_error_code( Result::eErrorNotPermittedKHR ), message ) {}
    8e0c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8e10:	48 89 c6             	mov    %rax,%rsi
    8e13:	48 89 d7             	mov    %rdx,%rdi
    8e16:	48 89 d0             	mov    %rdx,%rax
    8e19:	48 89 c2             	mov    %rax,%rdx
    8e1c:	48 89 df             	mov    %rbx,%rdi
    8e1f:	e8 74 ea ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8e24:	48 8d 15 15 93 02 00 	lea    0x29315(%rip),%rdx        # 32140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    8e2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e2f:	48 89 10             	mov    %rdx,(%rax)
    8e32:	48 8d 15 2f 93 02 00 	lea    0x2932f(%rip),%rdx        # 32168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    8e39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8e3d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8e41:	90                   	nop
    8e42:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8e46:	c9                   	leave
    8e47:	c3                   	ret

0000000000008e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>:
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8e48:	55                   	push   %rbp
    8e49:	48 89 e5             	mov    %rsp,%rbp
    8e4c:	53                   	push   %rbx
    8e4d:	48 83 ec 38          	sub    $0x38,%rsp
    8e51:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8e55:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    8e59:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    8e5d:	c7 45 ec b0 0d 60 c4 	movl   $0xc4600db0,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    8e64:	0f b6 05 ed a4 02 00 	movzbl 0x2a4ed(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e6b:	84 c0                	test   %al,%al
    8e6d:	0f 94 c0             	sete   %al
    8e70:	84 c0                	test   %al,%al
    8e72:	74 4a                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e74:	48 8d 05 dd a4 02 00 	lea    0x2a4dd(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8e7b:	48 89 c7             	mov    %rax,%rdi
    8e7e:	e8 3d c5 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    8e83:	85 c0                	test   %eax,%eax
    8e85:	0f 95 c0             	setne  %al
    8e88:	84 c0                	test   %al,%al
    8e8a:	74 32                	je     8ebe <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc+0x76>
    8e8c:	48 8d 05 65 a3 02 00 	lea    0x2a365(%rip),%rax        # 331f8 <__dso_handle>
    8e93:	48 89 c2             	mov    %rax,%rdx
    8e96:	48 8d 05 63 a3 02 00 	lea    0x2a363(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    8e9d:	48 89 c6             	mov    %rax,%rsi
    8ea0:	48 8d 05 7d 37 00 00 	lea    0x377d(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    8ea7:	48 89 c7             	mov    %rax,%rdi
    8eaa:	e8 21 c3 ff ff       	call   51d0 <__cxa_atexit@plt>
    8eaf:	48 8d 05 a2 a4 02 00 	lea    0x2a4a2(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    8eb6:	48 89 c7             	mov    %rax,%rdi
    8eb9:	e8 42 c2 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    8ebe:	48 8d 15 3b a3 02 00 	lea    0x2a33b(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    8ec5:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    8ec8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    8ecc:	89 ce                	mov    %ecx,%esi
    8ece:	48 89 c7             	mov    %rax,%rdi
    8ed1:	e8 32 d4 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    8ed6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8eda:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    CompressionExhaustedEXTError( char const * message ) : SystemError( make_error_code( Result::eErrorCompressionExhaustedEXT ), message ) {}
    8ede:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    8ee2:	48 89 c6             	mov    %rax,%rsi
    8ee5:	48 89 d7             	mov    %rdx,%rdi
    8ee8:	48 89 d0             	mov    %rdx,%rax
    8eeb:	48 89 c2             	mov    %rax,%rdx
    8eee:	48 89 df             	mov    %rbx,%rdi
    8ef1:	e8 a2 e9 ff ff       	call   7898 <_ZN2vk11SystemErrorC1ESt10error_codePKc>
    8ef6:	48 8d 15 f3 91 02 00 	lea    0x291f3(%rip),%rdx        # 320f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    8efd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f01:	48 89 10             	mov    %rdx,(%rax)
    8f04:	48 8d 15 0d 92 02 00 	lea    0x2920d(%rip),%rdx        # 32118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    8f0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8f0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8f13:	90                   	nop
    8f14:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    8f18:	c9                   	leave
    8f19:	c3                   	ret

0000000000008f1a <_ZN2vk10SurfaceKHRaSEDn>:
      m_surfaceKHR = surfaceKHR;
      return *this;
    }
#endif

    SurfaceKHR & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f1a:	55                   	push   %rbp
    8f1b:	48 89 e5             	mov    %rsp,%rbp
    8f1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_surfaceKHR = {};
    8f26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f2a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f35:	5d                   	pop    %rbp
    8f36:	c3                   	ret
    8f37:	90                   	nop

0000000000008f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>:
    {
      return m_surfaceKHR < rhs.m_surfaceKHR;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkSurfaceKHR() const VULKAN_HPP_NOEXCEPT
    8f38:	55                   	push   %rbp
    8f39:	48 89 e5             	mov    %rsp,%rbp
    8f3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR;
    8f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f44:	48 8b 00             	mov    (%rax),%rax
    }
    8f47:	5d                   	pop    %rbp
    8f48:	c3                   	ret
    8f49:	90                   	nop

0000000000008f4a <_ZNK2vk10SurfaceKHRcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f4a:	55                   	push   %rbp
    8f4b:	48 89 e5             	mov    %rsp,%rbp
    8f4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_surfaceKHR != VK_NULL_HANDLE;
    8f52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f56:	48 8b 00             	mov    (%rax),%rax
    8f59:	48 85 c0             	test   %rax,%rax
    8f5c:	0f 95 c0             	setne  %al
    }
    8f5f:	5d                   	pop    %rbp
    8f60:	c3                   	ret
    8f61:	90                   	nop

0000000000008f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>:
      m_debugUtilsMessengerEXT = debugUtilsMessengerEXT;
      return *this;
    }
#endif

    DebugUtilsMessengerEXT & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8f62:	55                   	push   %rbp
    8f63:	48 89 e5             	mov    %rsp,%rbp
    8f66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8f6a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_debugUtilsMessengerEXT = {};
    8f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8f79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8f7d:	5d                   	pop    %rbp
    8f7e:	c3                   	ret
    8f7f:	90                   	nop

0000000000008f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>:
    {
      return m_debugUtilsMessengerEXT < rhs.m_debugUtilsMessengerEXT;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkDebugUtilsMessengerEXT() const VULKAN_HPP_NOEXCEPT
    8f80:	55                   	push   %rbp
    8f81:	48 89 e5             	mov    %rsp,%rbp
    8f84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT;
    8f88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f8c:	48 8b 00             	mov    (%rax),%rax
    }
    8f8f:	5d                   	pop    %rbp
    8f90:	c3                   	ret
    8f91:	90                   	nop

0000000000008f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8f92:	55                   	push   %rbp
    8f93:	48 89 e5             	mov    %rsp,%rbp
    8f96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_debugUtilsMessengerEXT != VK_NULL_HANDLE;
    8f9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f9e:	48 8b 00             	mov    (%rax),%rax
    8fa1:	48 85 c0             	test   %rax,%rax
    8fa4:	0f 95 c0             	setne  %al
    }
    8fa7:	5d                   	pop    %rbp
    8fa8:	c3                   	ret
    8fa9:	90                   	nop

0000000000008faa <_ZN2vk11CommandPoolaSEDn>:
      m_commandPool = commandPool;
      return *this;
    }
#endif

    CommandPool & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8faa:	55                   	push   %rbp
    8fab:	48 89 e5             	mov    %rsp,%rbp
    8fae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8fb2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_commandPool = {};
    8fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    8fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    8fc5:	5d                   	pop    %rbp
    8fc6:	c3                   	ret
    8fc7:	90                   	nop

0000000000008fc8 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>:
    {
      return m_commandPool < rhs.m_commandPool;
    }
#endif

    VULKAN_HPP_TYPESAFE_EXPLICIT operator VkCommandPool() const VULKAN_HPP_NOEXCEPT
    8fc8:	55                   	push   %rbp
    8fc9:	48 89 e5             	mov    %rsp,%rbp
    8fcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool;
    8fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fd4:	48 8b 00             	mov    (%rax),%rax
    }
    8fd7:	5d                   	pop    %rbp
    8fd8:	c3                   	ret
    8fd9:	90                   	nop

0000000000008fda <_ZNK2vk11CommandPoolcvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    8fda:	55                   	push   %rbp
    8fdb:	48 89 e5             	mov    %rsp,%rbp
    8fde:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_commandPool != VK_NULL_HANDLE;
    8fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fe6:	48 8b 00             	mov    (%rax),%rax
    8fe9:	48 85 c0             	test   %rax,%rax
    8fec:	0f 95 c0             	setne  %al
    }
    8fef:	5d                   	pop    %rbp
    8ff0:	c3                   	ret
    8ff1:	90                   	nop

0000000000008ff2 <_ZN2vk5QueueaSEDn>:
    {
      m_queue = queue;
      return *this;
    }

    Queue & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    8ff2:	55                   	push   %rbp
    8ff3:	48 89 e5             	mov    %rsp,%rbp
    8ff6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8ffa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_queue = {};
    8ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9002:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9009:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    900d:	5d                   	pop    %rbp
    900e:	c3                   	ret
    900f:	90                   	nop

0000000000009010 <_ZN2vk6DeviceaSEDn>:
    {
      m_device = device;
      return *this;
    }

    Device & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9010:	55                   	push   %rbp
    9011:	48 89 e5             	mov    %rsp,%rbp
    9014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_device = {};
    901c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9020:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    9027:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    902b:	5d                   	pop    %rbp
    902c:	c3                   	ret
    902d:	90                   	nop

000000000000902e <_ZNK2vk6DevicecvP10VkDevice_TEv>:
    VULKAN_HPP_NODISCARD VULKAN_HPP_NAMESPACE::TilePropertiesQCOM
                         getDynamicRenderingTilePropertiesQCOM( const VULKAN_HPP_NAMESPACE::RenderingInfo & renderingInfo,
                                                                Dispatch const & d                          VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const VULKAN_HPP_NOEXCEPT;
#endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/

    operator VkDevice() const VULKAN_HPP_NOEXCEPT
    902e:	55                   	push   %rbp
    902f:	48 89 e5             	mov    %rsp,%rbp
    9032:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device;
    9036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    903a:	48 8b 00             	mov    (%rax),%rax
    }
    903d:	5d                   	pop    %rbp
    903e:	c3                   	ret
    903f:	90                   	nop

0000000000009040 <_ZNK2vk6DevicecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    9040:	55                   	push   %rbp
    9041:	48 89 e5             	mov    %rsp,%rbp
    9044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_device != VK_NULL_HANDLE;
    9048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    904c:	48 8b 00             	mov    (%rax),%rax
    904f:	48 85 c0             	test   %rax,%rax
    9052:	0f 95 c0             	setne  %al
    }
    9055:	5d                   	pop    %rbp
    9056:	c3                   	ret
    9057:	90                   	nop

0000000000009058 <_ZN2vk14PhysicalDeviceaSEDn>:
    {
      m_physicalDevice = physicalDevice;
      return *this;
    }

    PhysicalDevice & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9058:	55                   	push   %rbp
    9059:	48 89 e5             	mov    %rsp,%rbp
    905c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9060:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_physicalDevice = {};
    9064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9068:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    906f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9073:	5d                   	pop    %rbp
    9074:	c3                   	ret
    9075:	90                   	nop

0000000000009076 <_ZN2vk8InstanceaSEDn>:
    {
      m_instance = instance;
      return *this;
    }

    Instance & operator=( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
    9076:	55                   	push   %rbp
    9077:	48 89 e5             	mov    %rsp,%rbp
    907a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    907e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      m_instance = {};
    9082:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9086:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return *this;
    908d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    9091:	5d                   	pop    %rbp
    9092:	c3                   	ret
    9093:	90                   	nop

0000000000009094 <_ZNK2vk8InstancecvP12VkInstance_TEv>:
                                    Dispatch const & d                                                  VULKAN_HPP_DEFAULT_DISPATCHER_ASSIGNMENT ) const;
#    endif /*VULKAN_HPP_NO_SMART_HANDLE*/
#  endif   /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/
#endif     /*VK_USE_PLATFORM_SCREEN_QNX*/

    operator VkInstance() const VULKAN_HPP_NOEXCEPT
    9094:	55                   	push   %rbp
    9095:	48 89 e5             	mov    %rsp,%rbp
    9098:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance;
    909c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90a0:	48 8b 00             	mov    (%rax),%rax
    }
    90a3:	5d                   	pop    %rbp
    90a4:	c3                   	ret
    90a5:	90                   	nop

00000000000090a6 <_ZNK2vk8InstancecvbEv>:

    explicit operator bool() const VULKAN_HPP_NOEXCEPT
    90a6:	55                   	push   %rbp
    90a7:	48 89 e5             	mov    %rsp,%rbp
    90aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return m_instance != VK_NULL_HANDLE;
    90ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90b2:	48 8b 00             	mov    (%rax),%rax
    90b5:	48 85 c0             	test   %rax,%rax
    90b8:	0f 95 c0             	setne  %al
    }
    90bb:	5d                   	pop    %rbp
    90bc:	c3                   	ret
    90bd:	90                   	nop

00000000000090be <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  {
  public:
#  ifdef VULKAN_HPP_NO_EXCEPTIONS
    DynamicLoader( std::string const & vulkanLibraryName = {} ) VULKAN_HPP_NOEXCEPT
#  else
    DynamicLoader( std::string const & vulkanLibraryName = {} )
    90be:	55                   	push   %rbp
    90bf:	48 89 e5             	mov    %rsp,%rbp
    90c2:	41 54                	push   %r12
    90c4:	53                   	push   %rbx
    90c5:	48 83 ec 10          	sub    $0x10,%rsp
    90c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    90cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#  endif
    {
      if ( !vulkanLibraryName.empty() )
    90d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    90d5:	48 89 c7             	mov    %rax,%rdi
    90d8:	e8 c5 10 00 00       	call   a1a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
    90dd:	83 f0 01             	xor    $0x1,%eax
    90e0:	84 c0                	test   %al,%al
    90e2:	74 22                	je     9106 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( vulkanLibraryName.c_str(), RTLD_NOW | RTLD_LOCAL );
    90e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    90e8:	48 89 c7             	mov    %rax,%rdi
    90eb:	e8 ce 0d 00 00       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    90f0:	be 02 00 00 00       	mov    $0x2,%esi
    90f5:	48 89 c7             	mov    %rax,%rdi
    90f8:	e8 f3 c1 ff ff       	call   52f0 <dlopen@plt>
    90fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9101:	48 89 02             	mov    %rax,(%rdx)
    9104:	eb 42                	jmp    9148 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
#  endif
      }
      else
      {
#  if defined( __unix__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        m_library = dlopen( "libvulkan.so", RTLD_NOW | RTLD_LOCAL );
    9106:	be 02 00 00 00       	mov    $0x2,%esi
    910b:	48 8d 05 02 89 01 00 	lea    0x18902(%rip),%rax        # 21a14 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3dc>
    9112:	48 89 c7             	mov    %rax,%rdi
    9115:	e8 d6 c1 ff ff       	call   52f0 <dlopen@plt>
    911a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    911e:	48 89 02             	mov    %rax,(%rdx)
        if ( m_library == nullptr )
    9121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9125:	48 8b 00             	mov    (%rax),%rax
    9128:	48 85 c0             	test   %rax,%rax
    912b:	75 1b                	jne    9148 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
        {
          m_library = dlopen( "libvulkan.so.1", RTLD_NOW | RTLD_LOCAL );
    912d:	be 02 00 00 00       	mov    $0x2,%esi
    9132:	48 8d 05 e8 88 01 00 	lea    0x188e8(%rip),%rax        # 21a21 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3e9>
    9139:	48 89 c7             	mov    %rax,%rdi
    913c:	e8 af c1 ff ff       	call   52f0 <dlopen@plt>
    9141:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9145:	48 89 02             	mov    %rax,(%rdx)
#    error unsupported platform
#  endif
      }

#  ifndef VULKAN_HPP_NO_EXCEPTIONS
      if ( m_library == nullptr )
    9148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    914c:	48 8b 00             	mov    (%rax),%rax
    914f:	48 85 c0             	test   %rax,%rax
    9152:	75 51                	jne    91a5 <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe7>
      {
        // NOTE there should be an InitializationFailedError, but msvc insists on the symbol does not exist within the scope of this function.
        throw std::runtime_error( "Failed to load vulkan library!" );
    9154:	bf 10 00 00 00       	mov    $0x10,%edi
    9159:	e8 72 bf ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    915e:	48 89 c3             	mov    %rax,%rbx
    9161:	48 8d 05 c8 88 01 00 	lea    0x188c8(%rip),%rax        # 21a30 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3f8>
    9168:	48 89 c6             	mov    %rax,%rsi
    916b:	48 89 df             	mov    %rbx,%rdi
    916e:	e8 1d bf ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    9173:	48 8b 05 36 9e 02 00 	mov    0x29e36(%rip),%rax        # 32fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    917a:	48 89 c2             	mov    %rax,%rdx
    917d:	48 8d 05 7c 98 02 00 	lea    0x2987c(%rip),%rax        # 32a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    9184:	48 89 c6             	mov    %rax,%rsi
    9187:	48 89 df             	mov    %rbx,%rdi
    918a:	e8 f1 c1 ff ff       	call   5380 <__cxa_throw@plt>
    918f:	49 89 c4             	mov    %rax,%r12
    9192:	48 89 df             	mov    %rbx,%rdi
    9195:	e8 b6 bf ff ff       	call   5150 <__cxa_free_exception@plt>
    919a:	4c 89 e0             	mov    %r12,%rax
    919d:	48 89 c7             	mov    %rax,%rdi
    91a0:	e8 fb c1 ff ff       	call   53a0 <_Unwind_Resume@plt>
      }
#  endif
    }
    91a5:	90                   	nop
    91a6:	48 83 c4 10          	add    $0x10,%rsp
    91aa:	5b                   	pop    %rbx
    91ab:	41 5c                	pop    %r12
    91ad:	5d                   	pop    %rbp
    91ae:	c3                   	ret
    91af:	90                   	nop

00000000000091b0 <_ZN2vk13DynamicLoaderD1Ev>:
    {
      std::swap( m_library, other.m_library );
      return *this;
    }

    ~DynamicLoader() VULKAN_HPP_NOEXCEPT
    91b0:	55                   	push   %rbp
    91b1:	48 89 e5             	mov    %rsp,%rbp
    91b4:	48 83 ec 10          	sub    $0x10,%rsp
    91b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if ( m_library )
    91bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91c0:	48 8b 00             	mov    (%rax),%rax
    91c3:	48 85 c0             	test   %rax,%rax
    91c6:	74 0f                	je     91d7 <_ZN2vk13DynamicLoaderD1Ev+0x27>
      {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
        dlclose( m_library );
    91c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91cc:	48 8b 00             	mov    (%rax),%rax
    91cf:	48 89 c7             	mov    %rax,%rdi
    91d2:	e8 b9 bf ff ff       	call   5190 <dlclose@plt>
        ::FreeLibrary( m_library );
#  else
#    error unsupported platform
#  endif
      }
    }
    91d7:	90                   	nop
    91d8:	c9                   	leave
    91d9:	c3                   	ret

00000000000091da <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>:
    }

    class ContextDispatcher : public DispatchLoaderBase
    {
    public:
      ContextDispatcher( PFN_vkGetInstanceProcAddr getProcAddr )
    91da:	55                   	push   %rbp
    91db:	48 89 e5             	mov    %rsp,%rbp
    91de:	48 83 ec 10          	sub    $0x10,%rsp
    91e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    91e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        //=== VK_VERSION_1_0 ===
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
        //=== VK_VERSION_1_1 ===
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    91ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91ee:	48 89 c7             	mov    %rax,%rdi
    91f1:	e8 a6 d3 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
        : vkGetInstanceProcAddr( getProcAddr )
    91f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    91fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
        , vkCreateInstance( PFN_vkCreateInstance( getProcAddr( NULL, "vkCreateInstance" ) ) )
    9202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9206:	48 8d 15 5b 88 01 00 	lea    0x1885b(%rip),%rdx        # 21a68 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
    920d:	48 89 d6             	mov    %rdx,%rsi
    9210:	bf 00 00 00 00       	mov    $0x0,%edi
    9215:	ff d0                	call   *%rax
    9217:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    921b:	48 89 42 18          	mov    %rax,0x18(%rdx)
        , vkEnumerateInstanceExtensionProperties( PFN_vkEnumerateInstanceExtensionProperties( getProcAddr( NULL, "vkEnumerateInstanceExtensionProperties" ) ) )
    921f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9223:	48 8d 15 56 88 01 00 	lea    0x18856(%rip),%rdx        # 21a80 <_ZNSt8__detailL19__atomic_spin_countE+0x1c>
    922a:	48 89 d6             	mov    %rdx,%rsi
    922d:	bf 00 00 00 00       	mov    $0x0,%edi
    9232:	ff d0                	call   *%rax
    9234:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9238:	48 89 42 20          	mov    %rax,0x20(%rdx)
        , vkEnumerateInstanceLayerProperties( PFN_vkEnumerateInstanceLayerProperties( getProcAddr( NULL, "vkEnumerateInstanceLayerProperties" ) ) )
    923c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9240:	48 8d 15 61 88 01 00 	lea    0x18861(%rip),%rdx        # 21aa8 <_ZNSt8__detailL19__atomic_spin_countE+0x44>
    9247:	48 89 d6             	mov    %rdx,%rsi
    924a:	bf 00 00 00 00       	mov    $0x0,%edi
    924f:	ff d0                	call   *%rax
    9251:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9255:	48 89 42 28          	mov    %rax,0x28(%rdx)
        , vkEnumerateInstanceVersion( PFN_vkEnumerateInstanceVersion( getProcAddr( NULL, "vkEnumerateInstanceVersion" ) ) )
    9259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    925d:	48 8d 15 67 88 01 00 	lea    0x18867(%rip),%rdx        # 21acb <_ZNSt8__detailL19__atomic_spin_countE+0x67>
    9264:	48 89 d6             	mov    %rdx,%rsi
    9267:	bf 00 00 00 00       	mov    $0x0,%edi
    926c:	ff d0                	call   *%rax
    926e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9272:	48 89 42 30          	mov    %rax,0x30(%rdx)
      {
      }
    9276:	90                   	nop
    9277:	c9                   	leave
    9278:	c3                   	ret
    9279:	90                   	nop

000000000000927a <_ZN2vk4raii7ContextC1Ev>:

    class Context
    {
    public:
#  if VULKAN_HPP_ENABLE_DYNAMIC_LOADER_TOOL
      Context()
    927a:	55                   	push   %rbp
    927b:	48 89 e5             	mov    %rsp,%rbp
    927e:	41 54                	push   %r12
    9280:	53                   	push   %rbx
    9281:	48 83 ec 30          	sub    $0x30,%rsp
    9285:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9289:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    928d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    9291:	48 89 c7             	mov    %rax,%rdi
    9294:	e8 53 d4 ff ff       	call   66ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    9299:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    929d:	48 89 c6             	mov    %rax,%rsi
    92a0:	48 89 df             	mov    %rbx,%rdi
    92a3:	e8 16 fe ff ff       	call   90be <_ZN2vk13DynamicLoaderC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    92a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    92ac:	48 89 c7             	mov    %rax,%rdi
    92af:	e8 24 0c 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    92b8:	48 8d 58 08          	lea    0x8(%rax),%rbx
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    92bc:	bf 38 00 00 00       	mov    $0x38,%edi
    92c1:	e8 5a bf ff ff       	call   5220 <_Znwm@plt>
    92c6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92ca:	41 bc 01 00 00 00    	mov    $0x1,%r12d
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    92d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    92d4:	48 8d 15 0b 88 01 00 	lea    0x1880b(%rip),%rdx        # 21ae6 <_ZNSt8__detailL19__atomic_spin_countE+0x82>
    92db:	48 89 d6             	mov    %rdx,%rsi
    92de:	48 89 c7             	mov    %rax,%rdi
    92e1:	e8 dc 0e 00 00       	call   a1c2 <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>
    92e6:	48 89 c6             	mov    %rax,%rsi
    92e9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    92ed:	e8 e8 fe ff ff       	call   91da <_ZN2vk4raii17ContextDispatcherC1EPFPFvvEP12VkInstance_TPKcE>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    92f2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    92f6:	48 89 df             	mov    %rbx,%rdi
    92f9:	e8 12 0f 00 00       	call   a210 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>
#  else
      Context( PFN_vkGetInstanceProcAddr getInstanceProcAddr )
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher( getInstanceProcAddr ) )
#  endif
      {
      }
    92fe:	eb 4c                	jmp    934c <_ZN2vk4raii7ContextC1Ev+0xd2>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9300:	48 89 c3             	mov    %rax,%rbx
    9303:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    9307:	48 89 c7             	mov    %rax,%rdi
    930a:	e8 c9 0b 00 00       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    930f:	48 89 d8             	mov    %rbx,%rax
    9312:	48 89 c7             	mov    %rax,%rdi
    9315:	e8 86 c0 ff ff       	call   53a0 <_Unwind_Resume@plt>
        : m_dispatcher( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher(
    931a:	48 89 c3             	mov    %rax,%rbx
    931d:	45 84 e4             	test   %r12b,%r12b
    9320:	74 13                	je     9335 <_ZN2vk4raii7ContextC1Ev+0xbb>
            m_dynamicLoader.getProcAddress<PFN_vkGetInstanceProcAddr>( "vkGetInstanceProcAddr" ) ) )
    9322:	be 38 00 00 00       	mov    $0x38,%esi
    9327:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    932b:	e8 00 bf ff ff       	call   5230 <_ZdlPvm@plt>
    9330:	eb 03                	jmp    9335 <_ZN2vk4raii7ContextC1Ev+0xbb>
      }
    9332:	48 89 c3             	mov    %rax,%rbx
    9335:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9339:	48 89 c7             	mov    %rax,%rdi
    933c:	e8 6f fe ff ff       	call   91b0 <_ZN2vk13DynamicLoaderD1Ev>
    9341:	48 89 d8             	mov    %rbx,%rax
    9344:	48 89 c7             	mov    %rax,%rdi
    9347:	e8 54 c0 ff ff       	call   53a0 <_Unwind_Resume@plt>
    934c:	48 83 c4 30          	add    $0x30,%rsp
    9350:	5b                   	pop    %rbx
    9351:	41 5c                	pop    %r12
    9353:	5d                   	pop    %rbp
    9354:	c3                   	ret
    9355:	90                   	nop

0000000000009356 <_ZN2vk4raii8InstanceD1Ev>:
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
      }

      Instance( std::nullptr_t ) {}

      ~Instance()
    9356:	55                   	push   %rbp
    9357:	48 89 e5             	mov    %rsp,%rbp
    935a:	48 83 ec 10          	sub    $0x10,%rsp
    935e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9366:	48 89 c7             	mov    %rax,%rdi
    9369:	e8 14 00 00 00       	call   9382 <_ZN2vk4raii8Instance5clearEv>
      }
    936e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9372:	48 83 c0 10          	add    $0x10,%rax
    9376:	48 89 c7             	mov    %rax,%rdi
    9379:	e8 1c 0f 00 00       	call   a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
    937e:	90                   	nop
    937f:	c9                   	leave
    9380:	c3                   	ret
    9381:	90                   	nop

0000000000009382 <_ZN2vk4raii8Instance5clearEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_instance;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9382:	55                   	push   %rbp
    9383:	48 89 e5             	mov    %rsp,%rbp
    9386:	41 54                	push   %r12
    9388:	53                   	push   %rbx
    9389:	48 83 ec 10          	sub    $0x10,%rsp
    938d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_instance )
    9391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9395:	48 89 c7             	mov    %rax,%rdi
    9398:	e8 09 fd ff ff       	call   90a6 <_ZNK2vk8InstancecvbEv>
    939d:	84 c0                	test   %al,%al
    939f:	74 2d                	je     93ce <_ZN2vk4raii8Instance5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyInstance( static_cast<VkInstance>( m_instance ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    93a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93a5:	48 89 c7             	mov    %rax,%rdi
    93a8:	e8 5d 00 00 00       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
    93ad:	4c 8b 60 10          	mov    0x10(%rax),%r12
    93b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93b5:	48 8b 58 08          	mov    0x8(%rax),%rbx
    93b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93bd:	48 89 c7             	mov    %rax,%rdi
    93c0:	e8 cf fc ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    93c5:	48 89 de             	mov    %rbx,%rsi
    93c8:	48 89 c7             	mov    %rax,%rdi
    93cb:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    93ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93d2:	be 00 00 00 00       	mov    $0x0,%esi
    93d7:	48 89 c7             	mov    %rax,%rdi
    93da:	e8 97 fc ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_allocator  = nullptr;
    93df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93e3:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    93ea:	00 
        m_dispatcher = nullptr;
    93eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    93ef:	48 83 c0 10          	add    $0x10,%rax
    93f3:	be 00 00 00 00       	mov    $0x0,%esi
    93f8:	48 89 c7             	mov    %rax,%rdi
    93fb:	e8 34 0f 00 00       	call   a334 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    9400:	90                   	nop
    9401:	48 83 c4 10          	add    $0x10,%rsp
    9405:	5b                   	pop    %rbx
    9406:	41 5c                	pop    %r12
    9408:	5d                   	pop    %rbp
    9409:	c3                   	ret

000000000000940a <_ZNK2vk4raii8Instance13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    940a:	55                   	push   %rbp
    940b:	48 89 e5             	mov    %rsp,%rbp
    940e:	48 83 ec 10          	sub    $0x10,%rsp
    9412:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9416:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    941a:	48 83 c0 10          	add    $0x10,%rax
    941e:	48 89 c7             	mov    %rax,%rdi
    9421:	e8 36 0f 00 00       	call   a35c <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>
    9426:	48 89 c7             	mov    %rax,%rdi
    9429:	e8 24 d1 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    942e:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9434:	74 28                	je     945e <_ZNK2vk4raii8Instance13getDispatcherEv+0x54>
    9436:	48 8d 05 c3 86 01 00 	lea    0x186c3(%rip),%rax        # 21b00 <_ZNSt8__detailL19__atomic_spin_countE+0x9c>
    943d:	48 89 c1             	mov    %rax,%rcx
    9440:	ba 25 0a 00 00       	mov    $0xa25,%edx
    9445:	48 8d 05 04 87 01 00 	lea    0x18704(%rip),%rax        # 21b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    944c:	48 89 c6             	mov    %rax,%rsi
    944f:	48 8d 05 22 87 01 00 	lea    0x18722(%rip),%rax        # 21b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9456:	48 89 c7             	mov    %rax,%rdi
    9459:	e8 b2 bc ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    945e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9462:	48 83 c0 10          	add    $0x10,%rax
    9466:	48 89 c7             	mov    %rax,%rdi
    9469:	e8 08 0f 00 00       	call   a376 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    946e:	c9                   	leave
    946f:	c3                   	ret

0000000000009470 <_ZN2vk4raii14PhysicalDeviceD1Ev>:
      {
      }

      PhysicalDevice( std::nullptr_t ) {}

      ~PhysicalDevice()
    9470:	55                   	push   %rbp
    9471:	48 89 e5             	mov    %rsp,%rbp
    9474:	48 83 ec 10          	sub    $0x10,%rsp
    9478:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    947c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9480:	48 89 c7             	mov    %rax,%rdi
    9483:	e8 04 00 00 00       	call   948c <_ZN2vk4raii14PhysicalDevice5clearEv>
      }
    9488:	90                   	nop
    9489:	c9                   	leave
    948a:	c3                   	ret
    948b:	90                   	nop

000000000000948c <_ZN2vk4raii14PhysicalDevice5clearEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_physicalDevice;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    948c:	55                   	push   %rbp
    948d:	48 89 e5             	mov    %rsp,%rbp
    9490:	48 83 ec 10          	sub    $0x10,%rsp
    9494:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_physicalDevice = nullptr;
    9498:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    949c:	be 00 00 00 00       	mov    $0x0,%esi
    94a1:	48 89 c7             	mov    %rax,%rdi
    94a4:	e8 af fb ff ff       	call   9058 <_ZN2vk14PhysicalDeviceaSEDn>
        m_dispatcher     = nullptr;
    94a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94ad:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    94b4:	00 
      }
    94b5:	90                   	nop
    94b6:	c9                   	leave
    94b7:	c3                   	ret

00000000000094b8 <_ZN2vk4raii6DeviceD1Ev>:
                                                                                                   static_cast<VkDevice>( m_device ) ) );
      }

      Device( std::nullptr_t ) {}

      ~Device()
    94b8:	55                   	push   %rbp
    94b9:	48 89 e5             	mov    %rsp,%rbp
    94bc:	48 83 ec 10          	sub    $0x10,%rsp
    94c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    94c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94c8:	48 89 c7             	mov    %rax,%rdi
    94cb:	e8 14 00 00 00       	call   94e4 <_ZN2vk4raii6Device5clearEv>
      }
    94d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    94d4:	48 83 c0 10          	add    $0x10,%rax
    94d8:	48 89 c7             	mov    %rax,%rdi
    94db:	e8 d8 0e 00 00       	call   a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
    94e0:	90                   	nop
    94e1:	c9                   	leave
    94e2:	c3                   	ret
    94e3:	90                   	nop

00000000000094e4 <_ZN2vk4raii6Device5clearEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_device;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    94e4:	55                   	push   %rbp
    94e5:	48 89 e5             	mov    %rsp,%rbp
    94e8:	41 54                	push   %r12
    94ea:	53                   	push   %rbx
    94eb:	48 83 ec 10          	sub    $0x10,%rsp
    94ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        if ( m_device )
    94f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    94f7:	48 89 c7             	mov    %rax,%rdi
    94fa:	e8 41 fb ff ff       	call   9040 <_ZNK2vk6DevicecvbEv>
    94ff:	84 c0                	test   %al,%al
    9501:	74 2d                	je     9530 <_ZN2vk4raii6Device5clearEv+0x4c>
        {
          getDispatcher()->vkDestroyDevice( static_cast<VkDevice>( m_device ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9507:	48 89 c7             	mov    %rax,%rdi
    950a:	e8 5d 00 00 00       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
    950f:	4c 8b 60 18          	mov    0x18(%rax),%r12
    9513:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9517:	48 8b 58 08          	mov    0x8(%rax),%rbx
    951b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    951f:	48 89 c7             	mov    %rax,%rdi
    9522:	e8 07 fb ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
    9527:	48 89 de             	mov    %rbx,%rsi
    952a:	48 89 c7             	mov    %rax,%rdi
    952d:	41 ff d4             	call   *%r12
        }
        m_device     = nullptr;
    9530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9534:	be 00 00 00 00       	mov    $0x0,%esi
    9539:	48 89 c7             	mov    %rax,%rdi
    953c:	e8 cf fa ff ff       	call   9010 <_ZN2vk6DeviceaSEDn>
        m_allocator  = nullptr;
    9541:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9545:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    954c:	00 
        m_dispatcher = nullptr;
    954d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9551:	48 83 c0 10          	add    $0x10,%rax
    9555:	be 00 00 00 00       	mov    $0x0,%esi
    955a:	48 89 c7             	mov    %rax,%rdi
    955d:	e8 f0 0e 00 00       	call   a452 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>
      }
    9562:	90                   	nop
    9563:	48 83 c4 10          	add    $0x10,%rsp
    9567:	5b                   	pop    %rbx
    9568:	41 5c                	pop    %r12
    956a:	5d                   	pop    %rbp
    956b:	c3                   	ret

000000000000956c <_ZNK2vk4raii6Device13getDispatcherEv>:

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    956c:	55                   	push   %rbp
    956d:	48 89 e5             	mov    %rsp,%rbp
    9570:	48 83 ec 10          	sub    $0x10,%rsp
    9574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    957c:	48 83 c0 10          	add    $0x10,%rax
    9580:	48 89 c7             	mov    %rax,%rdi
    9583:	e8 f2 0e 00 00       	call   a47a <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>
    9588:	48 89 c7             	mov    %rax,%rdi
    958b:	e8 c2 cf ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9590:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    9596:	74 28                	je     95c0 <_ZNK2vk4raii6Device13getDispatcherEv+0x54>
    9598:	48 8d 05 11 86 01 00 	lea    0x18611(%rip),%rax        # 21bb0 <_ZNSt8__detailL19__atomic_spin_countE+0x14c>
    959f:	48 89 c1             	mov    %rax,%rcx
    95a2:	ba d7 0c 00 00       	mov    $0xcd7,%edx
    95a7:	48 8d 05 a2 85 01 00 	lea    0x185a2(%rip),%rax        # 21b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    95ae:	48 89 c6             	mov    %rax,%rsi
    95b1:	48 8d 05 c0 85 01 00 	lea    0x185c0(%rip),%rax        # 21b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    95b8:	48 89 c7             	mov    %rax,%rdi
    95bb:	e8 50 bb ff ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
    95c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95c4:	48 83 c0 10          	add    $0x10,%rax
    95c8:	48 89 c7             	mov    %rax,%rdi
    95cb:	e8 c4 0e 00 00       	call   a494 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>
      }
    95d0:	c9                   	leave
    95d1:	c3                   	ret

00000000000095d2 <_ZN2vk4raii11CommandPoolD1Ev>:
      {
      }

      CommandPool( std::nullptr_t ) {}

      ~CommandPool()
    95d2:	55                   	push   %rbp
    95d3:	48 89 e5             	mov    %rsp,%rbp
    95d6:	48 83 ec 10          	sub    $0x10,%rsp
    95da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    95de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    95e2:	48 89 c7             	mov    %rax,%rdi
    95e5:	e8 04 00 00 00       	call   95ee <_ZN2vk4raii11CommandPool5clearEv>
      }
    95ea:	90                   	nop
    95eb:	c9                   	leave
    95ec:	c3                   	ret
    95ed:	90                   	nop

00000000000095ee <_ZN2vk4raii11CommandPool5clearEv>:
      VULKAN_HPP_NAMESPACE::CommandPool const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_commandPool;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    95ee:	55                   	push   %rbp
    95ef:	48 89 e5             	mov    %rsp,%rbp
    95f2:	41 55                	push   %r13
    95f4:	41 54                	push   %r12
    95f6:	53                   	push   %rbx
    95f7:	48 83 ec 18          	sub    $0x18,%rsp
    95fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_commandPool )
    95ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9603:	48 83 c0 08          	add    $0x8,%rax
    9607:	48 89 c7             	mov    %rax,%rdi
    960a:	e8 cb f9 ff ff       	call   8fda <_ZNK2vk11CommandPoolcvbEv>
    960f:	84 c0                	test   %al,%al
    9611:	74 46                	je     9659 <_ZN2vk4raii11CommandPool5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyCommandPool(
    9613:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9617:	48 89 c7             	mov    %rax,%rdi
    961a:	e8 85 00 00 00       	call   96a4 <_ZNK2vk4raii11CommandPool13getDispatcherEv>
    961f:	4c 8b a0 40 02 00 00 	mov    0x240(%rax),%r12
            static_cast<VkDevice>( m_device ), static_cast<VkCommandPool>( m_commandPool ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    9626:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    962a:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyCommandPool(
    962e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9632:	48 83 c0 08          	add    $0x8,%rax
    9636:	48 89 c7             	mov    %rax,%rdi
    9639:	e8 8a f9 ff ff       	call   8fc8 <_ZNK2vk11CommandPoolcvP15VkCommandPool_TEv>
    963e:	49 89 c5             	mov    %rax,%r13
    9641:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9645:	48 89 c7             	mov    %rax,%rdi
    9648:	e8 e1 f9 ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
    964d:	48 89 da             	mov    %rbx,%rdx
    9650:	4c 89 ee             	mov    %r13,%rsi
    9653:	48 89 c7             	mov    %rax,%rdi
    9656:	41 ff d4             	call   *%r12
        }
        m_device      = nullptr;
    9659:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    965d:	be 00 00 00 00       	mov    $0x0,%esi
    9662:	48 89 c7             	mov    %rax,%rdi
    9665:	e8 a6 f9 ff ff       	call   9010 <_ZN2vk6DeviceaSEDn>
        m_commandPool = nullptr;
    966a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    966e:	48 83 c0 08          	add    $0x8,%rax
    9672:	be 00 00 00 00       	mov    $0x0,%esi
    9677:	48 89 c7             	mov    %rax,%rdi
    967a:	e8 2b f9 ff ff       	call   8faa <_ZN2vk11CommandPoolaSEDn>
        m_allocator   = nullptr;
    967f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9683:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    968a:	00 
        m_dispatcher  = nullptr;
    968b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    968f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    9696:	00 
      }
    9697:	90                   	nop
    9698:	48 83 c4 18          	add    $0x18,%rsp
    969c:	5b                   	pop    %rbx
    969d:	41 5c                	pop    %r12
    969f:	41 5d                	pop    %r13
    96a1:	5d                   	pop    %rbp
    96a2:	c3                   	ret
    96a3:	90                   	nop

00000000000096a4 <_ZNK2vk4raii11CommandPool13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Device getDevice() const
      {
        return m_device;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
    96a4:	55                   	push   %rbp
    96a5:	48 89 e5             	mov    %rsp,%rbp
    96a8:	48 83 ec 10          	sub    $0x10,%rsp
    96ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    96b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96b4:	48 8b 40 18          	mov    0x18(%rax),%rax
    96b8:	48 89 c7             	mov    %rax,%rdi
    96bb:	e8 92 ce ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    96c0:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    96c6:	74 28                	je     96f0 <_ZNK2vk4raii11CommandPool13getDispatcherEv+0x4c>
    96c8:	48 8d 05 31 85 01 00 	lea    0x18531(%rip),%rax        # 21c00 <_ZNSt8__detailL19__atomic_spin_countE+0x19c>
    96cf:	48 89 c1             	mov    %rax,%rcx
    96d2:	ba 77 12 00 00       	mov    $0x1277,%edx
    96d7:	48 8d 05 72 84 01 00 	lea    0x18472(%rip),%rax        # 21b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    96de:	48 89 c6             	mov    %rax,%rsi
    96e1:	48 8d 05 90 84 01 00 	lea    0x18490(%rip),%rax        # 21b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    96e8:	48 89 c7             	mov    %rax,%rdi
    96eb:	e8 20 ba ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    96f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96f4:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    96f8:	c9                   	leave
    96f9:	c3                   	ret

00000000000096fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>:
      {
      }

      DebugUtilsMessengerEXT( std::nullptr_t ) {}

      ~DebugUtilsMessengerEXT()
    96fa:	55                   	push   %rbp
    96fb:	48 89 e5             	mov    %rsp,%rbp
    96fe:	48 83 ec 10          	sub    $0x10,%rsp
    9702:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9706:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    970a:	48 89 c7             	mov    %rax,%rdi
    970d:	e8 04 00 00 00       	call   9716 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>
      }
    9712:	90                   	nop
    9713:	c9                   	leave
    9714:	c3                   	ret
    9715:	90                   	nop

0000000000009716 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv>:
      VULKAN_HPP_NAMESPACE::DebugUtilsMessengerEXT const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_messenger;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9716:	55                   	push   %rbp
    9717:	48 89 e5             	mov    %rsp,%rbp
    971a:	41 55                	push   %r13
    971c:	41 54                	push   %r12
    971e:	53                   	push   %rbx
    971f:	48 83 ec 18          	sub    $0x18,%rsp
    9723:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_messenger )
    9727:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    972b:	48 83 c0 08          	add    $0x8,%rax
    972f:	48 89 c7             	mov    %rax,%rdi
    9732:	e8 5b f8 ff ff       	call   8f92 <_ZNK2vk22DebugUtilsMessengerEXTcvbEv>
    9737:	84 c0                	test   %al,%al
    9739:	74 46                	je     9781 <_ZN2vk4raii22DebugUtilsMessengerEXT5clearEv+0x6b>
        {
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    973b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    973f:	48 89 c7             	mov    %rax,%rdi
    9742:	e8 85 00 00 00       	call   97cc <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>
    9747:	4c 8b a0 20 01 00 00 	mov    0x120(%rax),%r12
                                                            static_cast<VkDebugUtilsMessengerEXT>( m_messenger ),
                                                            reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    974e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9752:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroyDebugUtilsMessengerEXT( static_cast<VkInstance>( m_instance ),
    9756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    975a:	48 83 c0 08          	add    $0x8,%rax
    975e:	48 89 c7             	mov    %rax,%rdi
    9761:	e8 1a f8 ff ff       	call   8f80 <_ZNK2vk22DebugUtilsMessengerEXTcvP26VkDebugUtilsMessengerEXT_TEv>
    9766:	49 89 c5             	mov    %rax,%r13
    9769:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    976d:	48 89 c7             	mov    %rax,%rdi
    9770:	e8 1f f9 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    9775:	48 89 da             	mov    %rbx,%rdx
    9778:	4c 89 ee             	mov    %r13,%rsi
    977b:	48 89 c7             	mov    %rax,%rdi
    977e:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    9781:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9785:	be 00 00 00 00       	mov    $0x0,%esi
    978a:	48 89 c7             	mov    %rax,%rdi
    978d:	e8 e4 f8 ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_messenger  = nullptr;
    9792:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9796:	48 83 c0 08          	add    $0x8,%rax
    979a:	be 00 00 00 00       	mov    $0x0,%esi
    979f:	48 89 c7             	mov    %rax,%rdi
    97a2:	e8 bb f7 ff ff       	call   8f62 <_ZN2vk22DebugUtilsMessengerEXTaSEDn>
        m_allocator  = nullptr;
    97a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97ab:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    97b2:	00 
        m_dispatcher = nullptr;
    97b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    97b7:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    97be:	00 
      }
    97bf:	90                   	nop
    97c0:	48 83 c4 18          	add    $0x18,%rsp
    97c4:	5b                   	pop    %rbx
    97c5:	41 5c                	pop    %r12
    97c7:	41 5d                	pop    %r13
    97c9:	5d                   	pop    %rbp
    97ca:	c3                   	ret
    97cb:	90                   	nop

00000000000097cc <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    97cc:	55                   	push   %rbp
    97cd:	48 89 e5             	mov    %rsp,%rbp
    97d0:	48 83 ec 10          	sub    $0x10,%rsp
    97d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    97d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97dc:	48 8b 40 18          	mov    0x18(%rax),%rax
    97e0:	48 89 c7             	mov    %rax,%rdi
    97e3:	e8 6a cd ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    97e8:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    97ee:	74 28                	je     9818 <_ZNK2vk4raii22DebugUtilsMessengerEXT13getDispatcherEv+0x4c>
    97f0:	48 8d 05 59 84 01 00 	lea    0x18459(%rip),%rax        # 21c50 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
    97f7:	48 89 c1             	mov    %rax,%rcx
    97fa:	ba f5 17 00 00       	mov    $0x17f5,%edx
    97ff:	48 8d 05 4a 83 01 00 	lea    0x1834a(%rip),%rax        # 21b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9806:	48 89 c6             	mov    %rax,%rsi
    9809:	48 8d 05 68 83 01 00 	lea    0x18368(%rip),%rax        # 21b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9810:	48 89 c7             	mov    %rax,%rdi
    9813:	e8 f8 b8 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    981c:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9820:	c9                   	leave
    9821:	c3                   	ret

0000000000009822 <_ZN2vk4raii5QueueD1Ev>:
      {
      }

      Queue( std::nullptr_t ) {}

      ~Queue()
    9822:	55                   	push   %rbp
    9823:	48 89 e5             	mov    %rsp,%rbp
    9826:	48 83 ec 10          	sub    $0x10,%rsp
    982a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    982e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9832:	48 89 c7             	mov    %rax,%rdi
    9835:	e8 04 00 00 00       	call   983e <_ZN2vk4raii5Queue5clearEv>
      }
    983a:	90                   	nop
    983b:	c9                   	leave
    983c:	c3                   	ret
    983d:	90                   	nop

000000000000983e <_ZN2vk4raii5Queue5clearEv>:
      VULKAN_HPP_NAMESPACE::Queue const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_queue;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    983e:	55                   	push   %rbp
    983f:	48 89 e5             	mov    %rsp,%rbp
    9842:	48 83 ec 10          	sub    $0x10,%rsp
    9846:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        m_queue      = nullptr;
    984a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    984e:	be 00 00 00 00       	mov    $0x0,%esi
    9853:	48 89 c7             	mov    %rax,%rdi
    9856:	e8 97 f7 ff ff       	call   8ff2 <_ZN2vk5QueueaSEDn>
        m_dispatcher = nullptr;
    985b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    985f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    9866:	00 
      }
    9867:	90                   	nop
    9868:	c9                   	leave
    9869:	c3                   	ret

000000000000986a <_ZN2vk4raii10SurfaceKHRD1Ev>:
      {
      }

      SurfaceKHR( std::nullptr_t ) {}

      ~SurfaceKHR()
    986a:	55                   	push   %rbp
    986b:	48 89 e5             	mov    %rsp,%rbp
    986e:	48 83 ec 10          	sub    $0x10,%rsp
    9872:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        clear();
    9876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    987a:	48 89 c7             	mov    %rax,%rdi
    987d:	e8 04 00 00 00       	call   9886 <_ZN2vk4raii10SurfaceKHR5clearEv>
      }
    9882:	90                   	nop
    9883:	c9                   	leave
    9884:	c3                   	ret
    9885:	90                   	nop

0000000000009886 <_ZN2vk4raii10SurfaceKHR5clearEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
      {
        return m_surface;
      }

      void clear() VULKAN_HPP_NOEXCEPT
    9886:	55                   	push   %rbp
    9887:	48 89 e5             	mov    %rsp,%rbp
    988a:	41 55                	push   %r13
    988c:	41 54                	push   %r12
    988e:	53                   	push   %rbx
    988f:	48 83 ec 18          	sub    $0x18,%rsp
    9893:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
        if ( m_surface )
    9897:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    989b:	48 83 c0 08          	add    $0x8,%rax
    989f:	48 89 c7             	mov    %rax,%rdi
    98a2:	e8 a3 f6 ff ff       	call   8f4a <_ZNK2vk10SurfaceKHRcvbEv>
    98a7:	84 c0                	test   %al,%al
    98a9:	74 46                	je     98f1 <_ZN2vk4raii10SurfaceKHR5clearEv+0x6b>
        {
          getDispatcher()->vkDestroySurfaceKHR(
    98ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98af:	48 89 c7             	mov    %rax,%rdi
    98b2:	e8 85 00 00 00       	call   993c <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>
    98b7:	4c 8b a0 70 02 00 00 	mov    0x270(%rax),%r12
            static_cast<VkInstance>( m_instance ), static_cast<VkSurfaceKHR>( m_surface ), reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ) );
    98be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98c2:	48 8b 58 10          	mov    0x10(%rax),%rbx
          getDispatcher()->vkDestroySurfaceKHR(
    98c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98ca:	48 83 c0 08          	add    $0x8,%rax
    98ce:	48 89 c7             	mov    %rax,%rdi
    98d1:	e8 62 f6 ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    98d6:	49 89 c5             	mov    %rax,%r13
    98d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98dd:	48 89 c7             	mov    %rax,%rdi
    98e0:	e8 af f7 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    98e5:	48 89 da             	mov    %rbx,%rdx
    98e8:	4c 89 ee             	mov    %r13,%rsi
    98eb:	48 89 c7             	mov    %rax,%rdi
    98ee:	41 ff d4             	call   *%r12
        }
        m_instance   = nullptr;
    98f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    98f5:	be 00 00 00 00       	mov    $0x0,%esi
    98fa:	48 89 c7             	mov    %rax,%rdi
    98fd:	e8 74 f7 ff ff       	call   9076 <_ZN2vk8InstanceaSEDn>
        m_surface    = nullptr;
    9902:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9906:	48 83 c0 08          	add    $0x8,%rax
    990a:	be 00 00 00 00       	mov    $0x0,%esi
    990f:	48 89 c7             	mov    %rax,%rdi
    9912:	e8 03 f6 ff ff       	call   8f1a <_ZN2vk10SurfaceKHRaSEDn>
        m_allocator  = nullptr;
    9917:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    991b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    9922:	00 
        m_dispatcher = nullptr;
    9923:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9927:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    992e:	00 
      }
    992f:	90                   	nop
    9930:	48 83 c4 18          	add    $0x18,%rsp
    9934:	5b                   	pop    %rbx
    9935:	41 5c                	pop    %r12
    9937:	41 5d                	pop    %r13
    9939:	5d                   	pop    %rbp
    993a:	c3                   	ret
    993b:	90                   	nop

000000000000993c <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::Instance getInstance() const
      {
        return m_instance;
      }

      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
    993c:	55                   	push   %rbp
    993d:	48 89 e5             	mov    %rsp,%rbp
    9940:	48 83 ec 10          	sub    $0x10,%rsp
    9944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
    9948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    994c:	48 8b 40 18          	mov    0x18(%rax),%rax
    9950:	48 89 c7             	mov    %rax,%rdi
    9953:	e8 fa cb ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    9958:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    995e:	74 28                	je     9988 <_ZNK2vk4raii10SurfaceKHR13getDispatcherEv+0x4c>
    9960:	48 8d 05 49 83 01 00 	lea    0x18349(%rip),%rax        # 21cb0 <_ZNSt8__detailL19__atomic_spin_countE+0x24c>
    9967:	48 89 c1             	mov    %rax,%rcx
    996a:	ba ca 27 00 00       	mov    $0x27ca,%edx
    996f:	48 8d 05 da 81 01 00 	lea    0x181da(%rip),%rax        # 21b50 <_ZNSt8__detailL19__atomic_spin_countE+0xec>
    9976:	48 89 c6             	mov    %rax,%rsi
    9979:	48 8d 05 f8 81 01 00 	lea    0x181f8(%rip),%rax        # 21b78 <_ZNSt8__detailL19__atomic_spin_countE+0x114>
    9980:	48 89 c7             	mov    %rax,%rdi
    9983:	e8 88 b7 ff ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
    9988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    998c:	48 8b 40 18          	mov    0x18(%rax),%rax
      }
    9990:	c9                   	leave
    9991:	c3                   	ret

0000000000009992 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
    9992:	55                   	push   %rbp
    9993:	48 89 e5             	mov    %rsp,%rbp
    9996:	48 83 ec 20          	sub    $0x20,%rsp
    999a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      std::size_t __i = 0;
    999e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    99a5:	00 
      while (!eq(__p[__i], char_type()))
    99a6:	eb 05                	jmp    99ad <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x1b>
        ++__i;
    99a8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
      while (!eq(__p[__i], char_type()))
    99ad:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    99b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    99b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99b9:	48 01 c2             	add    %rax,%rdx
    99bc:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
    99c0:	48 89 c6             	mov    %rax,%rsi
    99c3:	48 89 d7             	mov    %rdx,%rdi
    99c6:	e8 0d 00 00 00       	call   99d8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
    99cb:	83 f0 01             	xor    $0x1,%eax
    99ce:	84 c0                	test   %al,%al
    99d0:	75 d6                	jne    99a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x16>
      return __i;
    99d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    99d6:	c9                   	leave
    99d7:	c3                   	ret

00000000000099d8 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
    99d8:	55                   	push   %rbp
    99d9:	48 89 e5             	mov    %rsp,%rbp
    99dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    99e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __c1 == __c2; }
    99e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    99e8:	0f b6 10             	movzbl (%rax),%edx
    99eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    99ef:	0f b6 00             	movzbl (%rax),%eax
    99f2:	38 c2                	cmp    %al,%dl
    99f4:	0f 94 c0             	sete   %al
    99f7:	5d                   	pop    %rbp
    99f8:	c3                   	ret
    99f9:	90                   	nop

00000000000099fa <_ZN4rtvc4GLFWC1Ev>:
    "VK_LAYER_KHRONOS_validation";
inline constexpr std::string_view mangohudLayerName =
    "VK_LAYER_MANGOHUD_overlay";

struct GLFW {
  GLFW() { glfwInit(); }
    99fa:	55                   	push   %rbp
    99fb:	48 89 e5             	mov    %rsp,%rbp
    99fe:	48 83 ec 10          	sub    $0x10,%rsp
    9a02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a06:	e8 85 b8 ff ff       	call   5290 <glfwInit@plt>
    9a0b:	90                   	nop
    9a0c:	c9                   	leave
    9a0d:	c3                   	ret

0000000000009a0e <_ZN4rtvc4GLFWD1Ev>:
  ~GLFW() { glfwTerminate(); }
    9a0e:	55                   	push   %rbp
    9a0f:	48 89 e5             	mov    %rsp,%rbp
    9a12:	48 83 ec 10          	sub    $0x10,%rsp
    9a16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a1a:	e8 21 b8 ff ff       	call   5240 <glfwTerminate@plt>
    9a1f:	90                   	nop
    9a20:	c9                   	leave
    9a21:	c3                   	ret

0000000000009a22 <_ZN4rtvc6WindowC1Ev>:

class Window {
  typedef GLFWwindow *pGLFWwindow;

public:
  Window() {
    9a22:	55                   	push   %rbp
    9a23:	48 89 e5             	mov    %rsp,%rbp
    9a26:	48 83 ec 10          	sub    $0x10,%rsp
    9a2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
    9a2e:	be 00 00 00 00       	mov    $0x0,%esi
    9a33:	bf 01 20 02 00       	mov    $0x22001,%edi
    9a38:	e8 73 b7 ff ff       	call   51b0 <glfwWindowHint@plt>
    glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
    9a3d:	be 00 00 00 00       	mov    $0x0,%esi
    9a42:	bf 03 00 02 00       	mov    $0x20003,%edi
    9a47:	e8 64 b7 ff ff       	call   51b0 <glfwWindowHint@plt>
    _window = glfwCreateWindow(800, 600, "VulkanApplication", nullptr, nullptr);
    9a4c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9a52:	b9 00 00 00 00       	mov    $0x0,%ecx
    9a57:	48 8d 05 a2 82 01 00 	lea    0x182a2(%rip),%rax        # 21d00 <_ZNSt8__detailL19__atomic_spin_countE+0x29c>
    9a5e:	48 89 c2             	mov    %rax,%rdx
    9a61:	be 58 02 00 00       	mov    $0x258,%esi
    9a66:	bf 20 03 00 00       	mov    $0x320,%edi
    9a6b:	e8 e0 b8 ff ff       	call   5350 <glfwCreateWindow@plt>
    9a70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9a74:	48 89 02             	mov    %rax,(%rdx)
  }
    9a77:	90                   	nop
    9a78:	c9                   	leave
    9a79:	c3                   	ret

0000000000009a7a <_ZN4rtvc6WindowD1Ev>:
  ~Window() { glfwDestroyWindow(_window); }
    9a7a:	55                   	push   %rbp
    9a7b:	48 89 e5             	mov    %rsp,%rbp
    9a7e:	48 83 ec 10          	sub    $0x10,%rsp
    9a82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9a86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a8a:	48 8b 00             	mov    (%rax),%rax
    9a8d:	48 89 c7             	mov    %rax,%rdi
    9a90:	e8 cb b5 ff ff       	call   5060 <glfwDestroyWindow@plt>
    9a95:	90                   	nop
    9a96:	c9                   	leave
    9a97:	c3                   	ret

0000000000009a98 <_ZNK4rtvc6Window3refEv>:
  Window(const Window &) = delete;
  Window(Window &&) = delete;
  Window &operator=(const Window &) = delete;
  Window &operator=(Window &&) = delete;

  const pGLFWwindow &ref() const noexcept { return _window; }
    9a98:	55                   	push   %rbp
    9a99:	48 89 e5             	mov    %rsp,%rbp
    9a9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9aa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9aa4:	5d                   	pop    %rbp
    9aa5:	c3                   	ret

0000000000009aa6 <_ZN2vk4raii7ContextD1Ev>:
      ~Context() = default;
    9aa6:	55                   	push   %rbp
    9aa7:	48 89 e5             	mov    %rsp,%rbp
    9aaa:	48 83 ec 10          	sub    $0x10,%rsp
    9aae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ab2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ab6:	48 83 c0 08          	add    $0x8,%rax
    9aba:	48 89 c7             	mov    %rax,%rdi
    9abd:	e8 74 07 00 00       	call   a236 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>
    9ac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ac6:	48 89 c7             	mov    %rax,%rdi
    9ac9:	e8 e2 f6 ff ff       	call   91b0 <_ZN2vk13DynamicLoaderD1Ev>
    9ace:	90                   	nop
    9acf:	c9                   	leave
    9ad0:	c3                   	ret
    9ad1:	90                   	nop

0000000000009ad2 <_ZN4rtvc13DeviceWrapperD1Ev>:

private:
  pGLFWwindow _window;
};

struct DeviceWrapper {
    9ad2:	55                   	push   %rbp
    9ad3:	48 89 e5             	mov    %rsp,%rbp
    9ad6:	48 83 ec 10          	sub    $0x10,%rsp
    9ada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ae2:	48 83 c0 28          	add    $0x28,%rax
    9ae6:	48 89 c7             	mov    %rax,%rdi
    9ae9:	e8 ca f9 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    9aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9af2:	48 83 c0 18          	add    $0x18,%rax
    9af6:	48 89 c7             	mov    %rax,%rdi
    9af9:	e8 72 f9 ff ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    9afe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b02:	48 83 c0 08          	add    $0x8,%rax
    9b06:	48 89 c7             	mov    %rax,%rdi
    9b09:	e8 14 fd ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    9b0e:	90                   	nop
    9b0f:	c9                   	leave
    9b10:	c3                   	ret
    9b11:	90                   	nop

0000000000009b12 <_ZN4rtvc9VulkanApp6renderEv>:
  VulkanApp(const VulkanApp &) = delete;
  VulkanApp(VulkanApp &&) = delete;
  VulkanApp &operator=(const VulkanApp &) = delete;
  VulkanApp &operator=(VulkanApp &&) = delete;

  void render() {
    9b12:	55                   	push   %rbp
    9b13:	48 89 e5             	mov    %rsp,%rbp
    9b16:	48 83 ec 10          	sub    $0x10,%rsp
    9b1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    while (!glfwWindowShouldClose(_window.ref())) {
    9b1e:	eb 05                	jmp    9b25 <_ZN4rtvc9VulkanApp6renderEv+0x13>
      glfwPollEvents();
    9b20:	e8 db b6 ff ff       	call   5200 <glfwPollEvents@plt>
    while (!glfwWindowShouldClose(_window.ref())) {
    9b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9b29:	48 83 c0 18          	add    $0x18,%rax
    9b2d:	48 89 c7             	mov    %rax,%rdi
    9b30:	e8 63 ff ff ff       	call   9a98 <_ZNK4rtvc6Window3refEv>
    9b35:	48 8b 00             	mov    (%rax),%rax
    9b38:	48 89 c7             	mov    %rax,%rdi
    9b3b:	e8 b0 b8 ff ff       	call   53f0 <glfwWindowShouldClose@plt>
    9b40:	85 c0                	test   %eax,%eax
    9b42:	0f 94 c0             	sete   %al
    9b45:	84 c0                	test   %al,%al
    9b47:	75 d7                	jne    9b20 <_ZN4rtvc9VulkanApp6renderEv+0xe>
    }
  }
    9b49:	90                   	nop
    9b4a:	90                   	nop
    9b4b:	c9                   	leave
    9b4c:	c3                   	ret
    9b4d:	90                   	nop

0000000000009b4e <_ZN4rtvc9VulkanAppC1Ev>:
  VulkanApp() = default;
    9b4e:	55                   	push   %rbp
    9b4f:	48 89 e5             	mov    %rsp,%rbp
    9b52:	53                   	push   %rbx
    9b53:	48 83 ec 18          	sub    $0x18,%rsp
    9b57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9b5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b5f:	48 89 c7             	mov    %rax,%rdi
    9b62:	e8 13 f7 ff ff       	call   927a <_ZN2vk4raii7ContextC1Ev>
    9b67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b6b:	48 83 c0 10          	add    $0x10,%rax
    9b6f:	48 89 c7             	mov    %rax,%rdi
    9b72:	e8 83 fe ff ff       	call   99fa <_ZN4rtvc4GLFWC1Ev>
    9b77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b7b:	48 83 c0 18          	add    $0x18,%rax
    9b7f:	48 89 c7             	mov    %rax,%rdi
    9b82:	e8 9b fe ff ff       	call   9a22 <_ZN4rtvc6WindowC1Ev>
    9b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9b8b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9b8f:	48 83 c2 20          	add    $0x20,%rdx
    9b93:	48 89 c6             	mov    %rax,%rsi
    9b96:	48 89 d7             	mov    %rdx,%rdi
    9b99:	e8 fb 37 00 00       	call   d399 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>
    9b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ba2:	48 8d 50 20          	lea    0x20(%rax),%rdx
    9ba6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9baa:	48 83 c0 38          	add    $0x38,%rax
    9bae:	48 89 d6             	mov    %rdx,%rsi
    9bb1:	48 89 c7             	mov    %rax,%rdi
    9bb4:	e8 21 3c 00 00       	call   d7da <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>
    9bb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bbd:	48 8d 50 18          	lea    0x18(%rax),%rdx
    9bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bc5:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9bc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bcd:	48 83 c0 58          	add    $0x58,%rax
    9bd1:	48 89 ce             	mov    %rcx,%rsi
    9bd4:	48 89 c7             	mov    %rax,%rdi
    9bd7:	e8 49 3c 00 00       	call   d825 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>
    9bdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9be0:	48 8d 50 58          	lea    0x58(%rax),%rdx
    9be4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9be8:	48 8d 48 20          	lea    0x20(%rax),%rcx
    9bec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9bf0:	48 83 c0 78          	add    $0x78,%rax
    9bf4:	48 89 ce             	mov    %rcx,%rsi
    9bf7:	48 89 c7             	mov    %rax,%rdi
    9bfa:	e8 ae 3c 00 00       	call   d8ad <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>
    9bff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c03:	48 8d 50 78          	lea    0x78(%rax),%rdx
    9c07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c0b:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9c11:	48 89 d6             	mov    %rdx,%rsi
    9c14:	48 89 c7             	mov    %rax,%rdi
    9c17:	e8 0f 52 00 00       	call   ee2b <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>
    9c1c:	e9 98 00 00 00       	jmp    9cb9 <_ZN4rtvc9VulkanAppC1Ev+0x16b>
    9c21:	48 89 c3             	mov    %rax,%rbx
    9c24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c28:	48 83 c0 78          	add    $0x78,%rax
    9c2c:	48 89 c7             	mov    %rax,%rdi
    9c2f:	e8 9e fe ff ff       	call   9ad2 <_ZN4rtvc13DeviceWrapperD1Ev>
    9c34:	eb 03                	jmp    9c39 <_ZN4rtvc9VulkanAppC1Ev+0xeb>
    9c36:	48 89 c3             	mov    %rax,%rbx
    9c39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c3d:	48 83 c0 58          	add    $0x58,%rax
    9c41:	48 89 c7             	mov    %rax,%rdi
    9c44:	e8 21 fc ff ff       	call   986a <_ZN2vk4raii10SurfaceKHRD1Ev>
    9c49:	eb 03                	jmp    9c4e <_ZN4rtvc9VulkanAppC1Ev+0x100>
    9c4b:	48 89 c3             	mov    %rax,%rbx
    9c4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c52:	48 83 c0 38          	add    $0x38,%rax
    9c56:	48 89 c7             	mov    %rax,%rdi
    9c59:	e8 9c fa ff ff       	call   96fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    9c5e:	eb 03                	jmp    9c63 <_ZN4rtvc9VulkanAppC1Ev+0x115>
    9c60:	48 89 c3             	mov    %rax,%rbx
    9c63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c67:	48 83 c0 20          	add    $0x20,%rax
    9c6b:	48 89 c7             	mov    %rax,%rdi
    9c6e:	e8 e3 f6 ff ff       	call   9356 <_ZN2vk4raii8InstanceD1Ev>
    9c73:	eb 03                	jmp    9c78 <_ZN4rtvc9VulkanAppC1Ev+0x12a>
    9c75:	48 89 c3             	mov    %rax,%rbx
    9c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c7c:	48 83 c0 18          	add    $0x18,%rax
    9c80:	48 89 c7             	mov    %rax,%rdi
    9c83:	e8 f2 fd ff ff       	call   9a7a <_ZN4rtvc6WindowD1Ev>
    9c88:	eb 03                	jmp    9c8d <_ZN4rtvc9VulkanAppC1Ev+0x13f>
    9c8a:	48 89 c3             	mov    %rax,%rbx
    9c8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9c91:	48 83 c0 10          	add    $0x10,%rax
    9c95:	48 89 c7             	mov    %rax,%rdi
    9c98:	e8 71 fd ff ff       	call   9a0e <_ZN4rtvc4GLFWD1Ev>
    9c9d:	eb 03                	jmp    9ca2 <_ZN4rtvc9VulkanAppC1Ev+0x154>
    9c9f:	48 89 c3             	mov    %rax,%rbx
    9ca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ca6:	48 89 c7             	mov    %rax,%rdi
    9ca9:	e8 f8 fd ff ff       	call   9aa6 <_ZN2vk4raii7ContextD1Ev>
    9cae:	48 89 d8             	mov    %rbx,%rax
    9cb1:	48 89 c7             	mov    %rax,%rdi
    9cb4:	e8 e7 b6 ff ff       	call   53a0 <_Unwind_Resume@plt>
    9cb9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9cbd:	c9                   	leave
    9cbe:	c3                   	ret
    9cbf:	90                   	nop

0000000000009cc0 <_ZN4rtvc9VulkanAppD1Ev>:
  ~VulkanApp() = default;
    9cc0:	55                   	push   %rbp
    9cc1:	48 89 e5             	mov    %rsp,%rbp
    9cc4:	48 83 ec 10          	sub    $0x10,%rsp
    9cc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    9ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cd0:	48 05 b8 00 00 00    	add    $0xb8,%rax
    9cd6:	48 89 c7             	mov    %rax,%rdi
    9cd9:	e8 f4 f8 ff ff       	call   95d2 <_ZN2vk4raii11CommandPoolD1Ev>
    9cde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ce2:	48 83 c0 78          	add    $0x78,%rax
    9ce6:	48 89 c7             	mov    %rax,%rdi
    9ce9:	e8 e4 fd ff ff       	call   9ad2 <_ZN4rtvc13DeviceWrapperD1Ev>
    9cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9cf2:	48 83 c0 58          	add    $0x58,%rax
    9cf6:	48 89 c7             	mov    %rax,%rdi
    9cf9:	e8 6c fb ff ff       	call   986a <_ZN2vk4raii10SurfaceKHRD1Ev>
    9cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d02:	48 83 c0 38          	add    $0x38,%rax
    9d06:	48 89 c7             	mov    %rax,%rdi
    9d09:	e8 ec f9 ff ff       	call   96fa <_ZN2vk4raii22DebugUtilsMessengerEXTD1Ev>
    9d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d12:	48 83 c0 20          	add    $0x20,%rax
    9d16:	48 89 c7             	mov    %rax,%rdi
    9d19:	e8 38 f6 ff ff       	call   9356 <_ZN2vk4raii8InstanceD1Ev>
    9d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d22:	48 83 c0 18          	add    $0x18,%rax
    9d26:	48 89 c7             	mov    %rax,%rdi
    9d29:	e8 4c fd ff ff       	call   9a7a <_ZN4rtvc6WindowD1Ev>
    9d2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d32:	48 83 c0 10          	add    $0x10,%rax
    9d36:	48 89 c7             	mov    %rax,%rdi
    9d39:	e8 d0 fc ff ff       	call   9a0e <_ZN4rtvc4GLFWD1Ev>
    9d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9d42:	48 89 c7             	mov    %rax,%rdi
    9d45:	e8 5c fd ff ff       	call   9aa6 <_ZN2vk4raii7ContextD1Ev>
    9d4a:	90                   	nop
    9d4b:	c9                   	leave
    9d4c:	c3                   	ret

0000000000009d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    9d4d:	55                   	push   %rbp
    9d4e:	48 89 e5             	mov    %rsp,%rbp
    9d51:	53                   	push   %rbx
    9d52:	48 83 ec 18          	sub    $0x18,%rsp
    9d56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d5a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
    9d5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d62:	48 89 c6             	mov    %rax,%rsi
    9d65:	bf 01 00 00 00       	mov    $0x1,%edi
    9d6a:	e8 45 c4 ff ff       	call   61b4 <_ZnwmPv>
    9d6f:	48 89 c3             	mov    %rax,%rbx
    9d72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9d76:	48 89 c7             	mov    %rax,%rdi
    9d79:	e8 58 07 00 00       	call   a4d6 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
    9d7e:	0f b6 00             	movzbl (%rax),%eax
    9d81:	88 03                	mov    %al,(%rbx)
    9d83:	48 89 d8             	mov    %rbx,%rax
    9d86:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    9d8a:	c9                   	leave
    9d8b:	c3                   	ret

0000000000009d8c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm>:
    char_traits<_CharT>::
    9d8c:	55                   	push   %rbp
    9d8d:	48 89 e5             	mov    %rsp,%rbp
    9d90:	48 83 ec 30          	sub    $0x30,%rsp
    9d94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9d98:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9d9c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__n == 0)
    9da0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    9da5:	75 09                	jne    9db0 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x24>
	return __s1;
    9da7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dab:	e9 8b 00 00 00       	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      if (std::__is_constant_evaluated())
    9db0:	e8 e9 c3 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    9db5:	84 c0                	test   %al,%al
    9db7:	74 67                	je     9e20 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x94>
	  if (__s1 == __s2) // unlikely, but saves a lot of work
    9db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dbd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    9dc1:	75 06                	jne    9dc9 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x3d>
	    return __s1;
    9dc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dc7:	eb 72                	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
	  char_type* __tmp = new char_type[__n];
    9dc9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9dcd:	48 89 c7             	mov    %rax,%rdi
    9dd0:	e8 5b b2 ff ff       	call   5030 <_Znam@plt>
    9dd5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  copy(__tmp, __s2, __n);
    9dd9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9ddd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9de1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9de5:	48 89 ce             	mov    %rcx,%rsi
    9de8:	48 89 c7             	mov    %rax,%rdi
    9deb:	e8 4e 00 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  copy(__s1, __tmp, __n);
    9df0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9df4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dfc:	48 89 ce             	mov    %rcx,%rsi
    9dff:	48 89 c7             	mov    %rax,%rdi
    9e02:	e8 37 00 00 00       	call   9e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>
	  delete[] __tmp;
    9e07:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    9e0c:	74 0c                	je     9e1a <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0x8e>
    9e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e12:	48 89 c7             	mov    %rax,%rdi
    9e15:	e8 a6 b4 ff ff       	call   52c0 <_ZdaPv@plt>
	  return __s1;
    9e1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e1e:	eb 1b                	jmp    9e3b <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcm+0xaf>
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
    9e20:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9e24:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9e28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e2c:	48 89 ce             	mov    %rcx,%rsi
    9e2f:	48 89 c7             	mov    %rax,%rdi
    9e32:	e8 29 b5 ff ff       	call   5360 <memmove@plt>
      return __s1;
    9e37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    9e3b:	c9                   	leave
    9e3c:	c3                   	ret
    9e3d:	90                   	nop

0000000000009e3e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm>:
    char_traits<_CharT>::
    9e3e:	55                   	push   %rbp
    9e3f:	48 89 e5             	mov    %rsp,%rbp
    9e42:	48 83 ec 30          	sub    $0x30,%rsp
    9e46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9e4a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9e4e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (std::__is_constant_evaluated())
    9e52:	e8 47 c3 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    9e57:	84 c0                	test   %al,%al
    9e59:	74 40                	je     9e9b <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x5d>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    9e5b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    9e62:	00 
    9e63:	eb 26                	jmp    9e8b <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x4d>
	    std::construct_at(__s1 + __i, __s2[__i]);
    9e65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e6d:	48 01 c2             	add    %rax,%rdx
    9e70:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9e74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e78:	48 01 c8             	add    %rcx,%rax
    9e7b:	48 89 d6             	mov    %rdx,%rsi
    9e7e:	48 89 c7             	mov    %rax,%rdi
    9e81:	e8 c7 fe ff ff       	call   9d4d <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
    9e86:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    9e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9e8f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    9e93:	72 d0                	jb     9e65 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x27>
	  return __s1;
    9e95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e99:	eb 21                	jmp    9ebc <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcm+0x7e>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
    9e9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9e9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ea3:	48 89 d1             	mov    %rdx,%rcx
    9ea6:	48 89 c6             	mov    %rax,%rsi
    9ea9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ead:	48 89 c2             	mov    %rax,%rdx
    9eb0:	48 89 cf             	mov    %rcx,%rdi
    9eb3:	e8 e8 b2 ff ff       	call   51a0 <memcpy@plt>
      return __s1;
    9eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
    9ebc:	c9                   	leave
    9ebd:	c3                   	ret

0000000000009ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
       *  This is a handle to internal data.  Do not modify or dire things may
       *  happen.
      */
      _GLIBCXX20_CONSTEXPR
      const _CharT*
      c_str() const _GLIBCXX_NOEXCEPT
    9ebe:	55                   	push   %rbp
    9ebf:	48 89 e5             	mov    %rsp,%rbp
    9ec2:	48 83 ec 10          	sub    $0x10,%rsp
    9ec6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
    9eca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ece:	48 89 c7             	mov    %rax,%rdi
    9ed1:	e8 0e 06 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    9ed6:	c9                   	leave
    9ed7:	c3                   	ret

0000000000009ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
      ~basic_string()
    9ed8:	55                   	push   %rbp
    9ed9:	48 89 e5             	mov    %rsp,%rbp
    9edc:	48 83 ec 10          	sub    $0x10,%rsp
    9ee0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_dispose(); }
    9ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ee8:	48 89 c7             	mov    %rax,%rdi
    9eeb:	e8 3c 06 00 00       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    9ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ef4:	48 89 c7             	mov    %rax,%rdi
    9ef7:	e8 d4 c7 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    9efc:	90                   	nop
    9efd:	c9                   	leave
    9efe:	c3                   	ret
    9eff:	90                   	nop

0000000000009f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
    9f00:	55                   	push   %rbp
    9f01:	48 89 e5             	mov    %rsp,%rbp
    9f04:	41 54                	push   %r12
    9f06:	53                   	push   %rbx
    9f07:	48 83 ec 10          	sub    $0x10,%rsp
    9f0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9f0f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
    9f13:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9f17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f1b:	48 89 c7             	mov    %rax,%rdi
    9f1e:	e8 43 06 00 00       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    9f23:	48 89 c7             	mov    %rax,%rdi
    9f26:	e8 21 c9 ff ff       	call   684c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
    9f2b:	49 89 c4             	mov    %rax,%r12
    9f2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f32:	48 89 c7             	mov    %rax,%rdi
    9f35:	e8 72 c8 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    9f3a:	4c 89 e2             	mov    %r12,%rdx
    9f3d:	48 89 c6             	mov    %rax,%rsi
    9f40:	48 89 df             	mov    %rbx,%rdi
    9f43:	e8 c4 c8 ff ff       	call   680c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
    9f48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f4c:	48 89 c7             	mov    %rax,%rdi
    9f4f:	e8 20 06 00 00       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    9f54:	84 c0                	test   %al,%al
    9f56:	74 2d                	je     9f85 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x85>
			      __str.length() + 1);
    9f58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f5c:	48 89 c7             	mov    %rax,%rdi
    9f5f:	e8 ae 00 00 00       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
    9f64:	48 8d 50 01          	lea    0x1(%rax),%rdx
    9f68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f6c:	48 8d 48 10          	lea    0x10(%rax),%rcx
    9f70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f74:	48 83 c0 10          	add    $0x10,%rax
    9f78:	48 89 ce             	mov    %rcx,%rsi
    9f7b:	48 89 c7             	mov    %rax,%rdi
    9f7e:	e8 10 c3 ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
    9f83:	eb 35                	jmp    9fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0xba>
	    _M_data(__str._M_data());
    9f85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9f89:	48 89 c7             	mov    %rax,%rdi
    9f8c:	e8 53 05 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    9f91:	48 89 c2             	mov    %rax,%rdx
    9f94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f98:	48 89 d6             	mov    %rdx,%rsi
    9f9b:	48 89 c7             	mov    %rax,%rdi
    9f9e:	e8 05 06 00 00       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
    9fa3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fa7:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9faf:	48 89 d6             	mov    %rdx,%rsi
    9fb2:	48 89 c7             	mov    %rax,%rdi
    9fb5:	e8 08 06 00 00       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
	_M_length(__str.length());
    9fba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fbe:	48 89 c7             	mov    %rax,%rdi
    9fc1:	e8 4c 00 00 00       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    9fc6:	48 89 c2             	mov    %rax,%rdx
    9fc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fcd:	48 89 d6             	mov    %rdx,%rsi
    9fd0:	48 89 c7             	mov    %rax,%rdi
    9fd3:	e8 06 06 00 00       	call   a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	__str._M_data(__str._M_local_data());
    9fd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9fdc:	48 89 c7             	mov    %rax,%rdi
    9fdf:	e8 c8 c7 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    9fe4:	48 89 c2             	mov    %rax,%rdx
    9fe7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9feb:	48 89 d6             	mov    %rdx,%rsi
    9fee:	48 89 c7             	mov    %rax,%rdi
    9ff1:	e8 b2 05 00 00       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
    9ff6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9ffa:	be 00 00 00 00       	mov    $0x0,%esi
    9fff:	48 89 c7             	mov    %rax,%rdi
    a002:	e8 07 01 00 00       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    a007:	90                   	nop
    a008:	48 83 c4 10          	add    $0x10,%rsp
    a00c:	5b                   	pop    %rbx
    a00d:	41 5c                	pop    %r12
    a00f:	5d                   	pop    %rbp
    a010:	c3                   	ret
    a011:	90                   	nop

000000000000a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
    a012:	55                   	push   %rbp
    a013:	48 89 e5             	mov    %rsp,%rbp
    a016:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_string_length; }
    a01a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a01e:	48 8b 40 08          	mov    0x8(%rax),%rax
    a022:	5d                   	pop    %rbp
    a023:	c3                   	ret

000000000000a024 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
    a024:	55                   	push   %rbp
    a025:	48 89 e5             	mov    %rsp,%rbp
    a028:	48 83 ec 20          	sub    $0x20,%rsp
    a02c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a030:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a034:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
    a038:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a03c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a040:	be 00 00 00 00       	mov    $0x0,%esi
    a045:	48 89 c7             	mov    %rax,%rdi
    a048:	e8 b3 07 00 00       	call   a800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>
    a04d:	48 89 c7             	mov    %rax,%rdi
    a050:	e8 9c 07 00 00       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a055:	48 89 c2             	mov    %rax,%rdx
    a058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a05c:	48 89 d6             	mov    %rdx,%rsi
    a05f:	48 89 c7             	mov    %rax,%rdi
    a062:	e8 99 fe ff ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a067:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a06b:	c9                   	leave
    a06c:	c3                   	ret
    a06d:	90                   	nop

000000000000a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    a06e:	55                   	push   %rbp
    a06f:	48 89 e5             	mov    %rsp,%rbp
    a072:	53                   	push   %rbx
    a073:	48 83 ec 38          	sub    $0x38,%rsp
    a077:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a07b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a07f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      : _M_dataplus(_M_local_data(), __a)
    a083:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    a087:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a08b:	48 89 c7             	mov    %rax,%rdi
    a08e:	e8 19 c7 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a093:	48 89 c1             	mov    %rax,%rcx
    a096:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a09a:	48 89 c2             	mov    %rax,%rdx
    a09d:	48 89 ce             	mov    %rcx,%rsi
    a0a0:	48 89 df             	mov    %rbx,%rdi
    a0a3:	e8 4e 04 00 00       	call   a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
    a0a8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    a0ad:	75 0f                	jne    a0be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    a0af:	48 8d 05 72 7c 01 00 	lea    0x17c72(%rip),%rax        # 21d28 <_ZNSt8__detailL19__atomic_spin_countE+0x2c4>
    a0b6:	48 89 c7             	mov    %rax,%rdi
    a0b9:	e8 82 b0 ff ff       	call   5140 <_ZSt19__throw_logic_errorPKc@plt>
	const _CharT* __end = __s + traits_type::length(__s);
    a0be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a0c2:	48 89 c7             	mov    %rax,%rdi
    a0c5:	e8 3a c1 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a0ca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a0ce:	48 01 d0             	add    %rdx,%rax
    a0d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_construct(__s, __end, forward_iterator_tag());
    a0d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a0d9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    a0dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a0e1:	48 89 ce             	mov    %rcx,%rsi
    a0e4:	48 89 c7             	mov    %rax,%rdi
    a0e7:	e8 52 05 00 00       	call   a63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
    a0ec:	eb 1a                	jmp    a108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x9a>
    a0ee:	48 89 c3             	mov    %rax,%rbx
    a0f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a0f5:	48 89 c7             	mov    %rax,%rdi
    a0f8:	e8 d3 c5 ff ff       	call   66d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
    a0fd:	48 89 d8             	mov    %rbx,%rax
    a100:	48 89 c7             	mov    %rax,%rdi
    a103:	e8 98 b2 ff ff       	call   53a0 <_Unwind_Resume@plt>
    a108:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a10c:	c9                   	leave
    a10d:	c3                   	ret

000000000000a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>:
      _M_set_length(size_type __n)
    a10e:	55                   	push   %rbp
    a10f:	48 89 e5             	mov    %rsp,%rbp
    a112:	48 83 ec 20          	sub    $0x20,%rsp
    a116:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a11a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_length(__n);
    a11e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a122:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a126:	48 89 d6             	mov    %rdx,%rsi
    a129:	48 89 c7             	mov    %rax,%rdi
    a12c:	e8 ad 04 00 00       	call   a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>
	traits_type::assign(_M_data()[__n], _CharT());
    a131:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    a135:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a139:	48 89 c7             	mov    %rax,%rdi
    a13c:	e8 a3 03 00 00       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a141:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    a145:	48 01 c2             	add    %rax,%rdx
    a148:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    a14c:	48 89 c6             	mov    %rax,%rsi
    a14f:	48 89 d7             	mov    %rdx,%rdi
    a152:	e8 6f c0 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    a157:	90                   	nop
    a158:	c9                   	leave
    a159:	c3                   	ret

000000000000a15a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    a15a:	55                   	push   %rbp
    a15b:	48 89 e5             	mov    %rsp,%rbp
    a15e:	48 83 ec 20          	sub    $0x20,%rsp
    a162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a166:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a16a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
    a16e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a172:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a176:	48 89 d6             	mov    %rdx,%rsi
    a179:	48 89 c7             	mov    %rax,%rdi
    a17c:	e8 ed 05 00 00       	call   a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
    a181:	48 89 c7             	mov    %rax,%rdi
    a184:	e8 68 06 00 00       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
    a189:	48 89 c2             	mov    %rax,%rdx
    a18c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a190:	48 89 d6             	mov    %rdx,%rsi
    a193:	48 89 c7             	mov    %rax,%rdi
    a196:	e8 65 fd ff ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    a19b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a19f:	c9                   	leave
    a1a0:	c3                   	ret
    a1a1:	90                   	nop

000000000000a1a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
    a1a2:	55                   	push   %rbp
    a1a3:	48 89 e5             	mov    %rsp,%rbp
    a1a6:	48 83 ec 10          	sub    $0x10,%rsp
    a1aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->size() == 0; }
    a1ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1b2:	48 89 c7             	mov    %rax,%rdi
    a1b5:	e8 3c c1 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a1ba:	48 85 c0             	test   %rax,%rax
    a1bd:	0f 94 c0             	sete   %al
    a1c0:	c9                   	leave
    a1c1:	c3                   	ret

000000000000a1c2 <_ZNK2vk13DynamicLoader14getProcAddressIPFPFvvEP12VkInstance_TPKcEEET_S7_>:

    template <typename T>
    T getProcAddress( const char * function ) const VULKAN_HPP_NOEXCEPT
    a1c2:	55                   	push   %rbp
    a1c3:	48 89 e5             	mov    %rsp,%rbp
    a1c6:	48 83 ec 10          	sub    $0x10,%rsp
    a1ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
#  if defined( __unix__ ) || defined( __APPLE__ ) || defined( __QNXNTO__ ) || defined( __Fuchsia__ )
      return (T)dlsym( m_library, function );
    a1d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1d6:	48 8b 00             	mov    (%rax),%rax
    a1d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a1dd:	48 89 d6             	mov    %rdx,%rsi
    a1e0:	48 89 c7             	mov    %rax,%rdi
    a1e3:	e8 f8 af ff ff       	call   51e0 <dlsym@plt>
#  elif defined( _WIN32 )
      return ( T )::GetProcAddress( m_library, function );
#  else
#    error unsupported platform
#  endif
    }
    a1e8:	c9                   	leave
    a1e9:	c3                   	ret

000000000000a1ea <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
    a1ea:	55                   	push   %rbp
    a1eb:	48 89 e5             	mov    %rsp,%rbp
    a1ee:	48 83 ec 10          	sub    $0x10,%rsp
    a1f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a1f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a1fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a1fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a202:	48 89 d6             	mov    %rdx,%rsi
    a205:	48 89 c7             	mov    %rax,%rdi
    a208:	e8 97 06 00 00       	call   a8a4 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>
    a20d:	90                   	nop
    a20e:	c9                   	leave
    a20f:	c3                   	ret

000000000000a210 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1IS4_vEEPS2_>:
       * The deleter will be value-initialized.
       */
      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
	_GLIBCXX23_CONSTEXPR
	explicit
	unique_ptr(pointer __p) noexcept
    a210:	55                   	push   %rbp
    a211:	48 89 e5             	mov    %rsp,%rbp
    a214:	48 83 ec 10          	sub    $0x10,%rsp
    a218:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a21c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_t(__p)
    a220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a224:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a228:	48 89 d6             	mov    %rdx,%rsi
    a22b:	48 89 c7             	mov    %rax,%rdi
    a22e:	e8 b7 ff ff ff       	call   a1ea <_ZNSt15__uniq_ptr_dataIN2vk4raii17ContextDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEPS2_>
        { }
    a233:	90                   	nop
    a234:	c9                   	leave
    a235:	c3                   	ret

000000000000a236 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr() noexcept
    a236:	55                   	push   %rbp
    a237:	48 89 e5             	mov    %rsp,%rbp
    a23a:	53                   	push   %rbx
    a23b:	48 83 ec 28          	sub    $0x28,%rsp
    a23f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
    a243:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a247:	48 89 c7             	mov    %rax,%rdi
    a24a:	e8 8d 06 00 00       	call   a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a24f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a257:	48 8b 00             	mov    (%rax),%rax
    a25a:	48 85 c0             	test   %rax,%rax
    a25d:	74 29                	je     a288 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a25f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a263:	48 89 c7             	mov    %rax,%rdi
    a266:	e8 8b 06 00 00       	call   a8f6 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a26b:	48 89 c3             	mov    %rax,%rbx
    a26e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a272:	48 89 c7             	mov    %rax,%rdi
    a275:	e8 96 06 00 00       	call   a910 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a27a:	48 8b 00             	mov    (%rax),%rax
    a27d:	48 89 c6             	mov    %rax,%rsi
    a280:	48 89 df             	mov    %rbx,%rdi
    a283:	e8 96 06 00 00       	call   a91e <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>
	__ptr = pointer();
    a288:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a28c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a293:	90                   	nop
    a294:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a298:	c9                   	leave
    a299:	c3                   	ret

000000000000a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a29a:	55                   	push   %rbp
    a29b:	48 89 e5             	mov    %rsp,%rbp
    a29e:	53                   	push   %rbx
    a29f:	48 83 ec 28          	sub    $0x28,%rsp
    a2a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a2a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a2ab:	48 89 c7             	mov    %rax,%rdi
    a2ae:	e8 95 06 00 00       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a2b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2bb:	48 8b 00             	mov    (%rax),%rax
    a2be:	48 85 c0             	test   %rax,%rax
    a2c1:	74 29                	je     a2ec <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a2c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a2c7:	48 89 c7             	mov    %rax,%rdi
    a2ca:	e8 93 06 00 00       	call   a962 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a2cf:	48 89 c3             	mov    %rax,%rbx
    a2d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2d6:	48 89 c7             	mov    %rax,%rdi
    a2d9:	e8 9e 06 00 00       	call   a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a2de:	48 8b 00             	mov    (%rax),%rax
    a2e1:	48 89 c6             	mov    %rax,%rsi
    a2e4:	48 89 df             	mov    %rbx,%rdi
    a2e7:	e8 9e 06 00 00       	call   a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
	__ptr = pointer();
    a2ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a2f7:	90                   	nop
    a2f8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a2fc:	c9                   	leave
    a2fd:	c3                   	ret

000000000000a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
    a2fe:	55                   	push   %rbp
    a2ff:	48 89 e5             	mov    %rsp,%rbp
    a302:	53                   	push   %rbx
    a303:	48 83 ec 18          	sub    $0x18,%rsp
    a307:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a30b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
    a30f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a313:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a317:	48 89 c7             	mov    %rax,%rdi
    a31a:	e8 5d 06 00 00       	call   a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a31f:	48 8b 00             	mov    (%rax),%rax
    a322:	48 89 c6             	mov    %rax,%rsi
    a325:	48 89 df             	mov    %rbx,%rdi
    a328:	e8 87 06 00 00       	call   a9b4 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a32d:	90                   	nop
    a32e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a332:	c9                   	leave
    a333:	c3                   	ret

000000000000a334 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a334:	55                   	push   %rbp
    a335:	48 89 e5             	mov    %rsp,%rbp
    a338:	48 83 ec 10          	sub    $0x10,%rsp
    a33c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a340:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a348:	be 00 00 00 00       	mov    $0x0,%esi
    a34d:	48 89 c7             	mov    %rax,%rdi
    a350:	e8 a9 ff ff ff       	call   a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a359:	c9                   	leave
    a35a:	c3                   	ret
    a35b:	90                   	nop

000000000000a35c <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a35c:	55                   	push   %rbp
    a35d:	48 89 e5             	mov    %rsp,%rbp
    a360:	48 83 ec 10          	sub    $0x10,%rsp
    a364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a36c:	48 89 c7             	mov    %rax,%rdi
    a36f:	e8 a4 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a374:	c9                   	leave
    a375:	c3                   	ret

000000000000a376 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a376:	55                   	push   %rbp
    a377:	48 89 e5             	mov    %rsp,%rbp
    a37a:	48 83 ec 10          	sub    $0x10,%rsp
    a37e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a382:	e8 17 be ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a387:	84 c0                	test   %al,%al
    a389:	74 18                	je     a3a3 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a38b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a38f:	48 89 c7             	mov    %rax,%rdi
    a392:	e8 81 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
    a397:	48 85 c0             	test   %rax,%rax
    a39a:	75 07                	jne    a3a3 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a39c:	b8 01 00 00 00       	mov    $0x1,%eax
    a3a1:	eb 05                	jmp    a3a8 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a3a3:	b8 00 00 00 00       	mov    $0x0,%eax
    a3a8:	84 c0                	test   %al,%al
	return *get();
    a3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a3ae:	48 89 c7             	mov    %rax,%rdi
    a3b1:	e8 62 06 00 00       	call   aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a3b6:	c9                   	leave
    a3b7:	c3                   	ret

000000000000a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>:
      ~unique_ptr() noexcept
    a3b8:	55                   	push   %rbp
    a3b9:	48 89 e5             	mov    %rsp,%rbp
    a3bc:	53                   	push   %rbx
    a3bd:	48 83 ec 28          	sub    $0x28,%rsp
    a3c1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	auto& __ptr = _M_t._M_ptr();
    a3c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3c9:	48 89 c7             	mov    %rax,%rdi
    a3cc:	e8 61 06 00 00       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a3d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
    a3d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3d9:	48 8b 00             	mov    (%rax),%rax
    a3dc:	48 85 c0             	test   %rax,%rax
    a3df:	74 29                	je     a40a <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev+0x52>
	  get_deleter()(std::move(__ptr));
    a3e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3e5:	48 89 c7             	mov    %rax,%rdi
    a3e8:	e8 5f 06 00 00       	call   aa4c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>
    a3ed:	48 89 c3             	mov    %rax,%rbx
    a3f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a3f4:	48 89 c7             	mov    %rax,%rdi
    a3f7:	e8 6a 06 00 00       	call   aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a3fc:	48 8b 00             	mov    (%rax),%rax
    a3ff:	48 89 c6             	mov    %rax,%rsi
    a402:	48 89 df             	mov    %rbx,%rdi
    a405:	e8 6a 06 00 00       	call   aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
	__ptr = pointer();
    a40a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a40e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
    a415:	90                   	nop
    a416:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a41a:	c9                   	leave
    a41b:	c3                   	ret

000000000000a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      reset(pointer __p = pointer()) noexcept
    a41c:	55                   	push   %rbp
    a41d:	48 89 e5             	mov    %rsp,%rbp
    a420:	53                   	push   %rbx
    a421:	48 83 ec 18          	sub    $0x18,%rsp
    a425:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a429:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_M_t.reset(std::move(__p));
    a42d:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    a431:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    a435:	48 89 c7             	mov    %rax,%rdi
    a438:	e8 29 06 00 00       	call   aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>
    a43d:	48 8b 00             	mov    (%rax),%rax
    a440:	48 89 c6             	mov    %rax,%rsi
    a443:	48 89 df             	mov    %rbx,%rdi
    a446:	e8 53 06 00 00       	call   aa9e <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
    a44b:	90                   	nop
    a44c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a450:	c9                   	leave
    a451:	c3                   	ret

000000000000a452 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEaSEDn>:
      operator=(nullptr_t) noexcept
    a452:	55                   	push   %rbp
    a453:	48 89 e5             	mov    %rsp,%rbp
    a456:	48 83 ec 10          	sub    $0x10,%rsp
    a45a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a45e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reset();
    a462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a466:	be 00 00 00 00       	mov    $0x0,%esi
    a46b:	48 89 c7             	mov    %rax,%rdi
    a46e:	e8 a9 ff ff ff       	call   a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
	return *this;
    a473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    a477:	c9                   	leave
    a478:	c3                   	ret
    a479:	90                   	nop

000000000000a47a <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
    a47a:	55                   	push   %rbp
    a47b:	48 89 e5             	mov    %rsp,%rbp
    a47e:	48 83 ec 10          	sub    $0x10,%rsp
    a482:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
    a486:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a48a:	48 89 c7             	mov    %rax,%rdi
    a48d:	e8 70 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a492:	c9                   	leave
    a493:	c3                   	ret

000000000000a494 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
    a494:	55                   	push   %rbp
    a495:	48 89 e5             	mov    %rsp,%rbp
    a498:	48 83 ec 10          	sub    $0x10,%rsp
    a49c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
    a4a0:	e8 f9 bc ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    a4a5:	84 c0                	test   %al,%al
    a4a7:	74 18                	je     a4c1 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a4a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4ad:	48 89 c7             	mov    %rax,%rdi
    a4b0:	e8 4d 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
    a4b5:	48 85 c0             	test   %rax,%rax
    a4b8:	75 07                	jne    a4c1 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
    a4ba:	b8 01 00 00 00       	mov    $0x1,%eax
    a4bf:	eb 05                	jmp    a4c6 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEdeEv+0x32>
    a4c1:	b8 00 00 00 00       	mov    $0x0,%eax
    a4c6:	84 c0                	test   %al,%al
	return *get();
    a4c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4cc:	48 89 c7             	mov    %rax,%rdi
    a4cf:	e8 2e 06 00 00       	call   ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>
      }
    a4d4:	c9                   	leave
    a4d5:	c3                   	ret

000000000000a4d6 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    a4d6:	55                   	push   %rbp
    a4d7:	48 89 e5             	mov    %rsp,%rbp
    a4da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    a4de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4e2:	5d                   	pop    %rbp
    a4e3:	c3                   	ret

000000000000a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
    a4e4:	55                   	push   %rbp
    a4e5:	48 89 e5             	mov    %rsp,%rbp
    a4e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus._M_p; }
    a4ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a4f0:	48 8b 00             	mov    (%rax),%rax
    a4f3:	5d                   	pop    %rbp
    a4f4:	c3                   	ret
    a4f5:	90                   	nop

000000000000a4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
    a4f6:	55                   	push   %rbp
    a4f7:	48 89 e5             	mov    %rsp,%rbp
    a4fa:	48 83 ec 20          	sub    $0x20,%rsp
    a4fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a502:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a506:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
    a50a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a50e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a512:	48 89 d6             	mov    %rdx,%rsi
    a515:	48 89 c7             	mov    %rax,%rdi
    a518:	e8 e3 ad ff ff       	call   5300 <_ZNSaIcEC2ERKS_@plt>
    a51d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a521:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a525:	48 89 10             	mov    %rdx,(%rax)
    a528:	90                   	nop
    a529:	c9                   	leave
    a52a:	c3                   	ret
    a52b:	90                   	nop

000000000000a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
    a52c:	55                   	push   %rbp
    a52d:	48 89 e5             	mov    %rsp,%rbp
    a530:	48 83 ec 10          	sub    $0x10,%rsp
    a534:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!_M_is_local())
    a538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a53c:	48 89 c7             	mov    %rax,%rdi
    a53f:	e8 30 00 00 00       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a544:	83 f0 01             	xor    $0x1,%eax
    a547:	84 c0                	test   %al,%al
    a549:	74 17                	je     a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x36>
	  _M_destroy(_M_allocated_capacity);
    a54b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a54f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a557:	48 89 d6             	mov    %rdx,%rsi
    a55a:	48 89 c7             	mov    %rax,%rdi
    a55d:	e8 82 06 00 00       	call   abe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>
      }
    a562:	90                   	nop
    a563:	c9                   	leave
    a564:	c3                   	ret
    a565:	90                   	nop

000000000000a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
    a566:	55                   	push   %rbp
    a567:	48 89 e5             	mov    %rsp,%rbp
    a56a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    a56e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a572:	5d                   	pop    %rbp
    a573:	c3                   	ret

000000000000a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
    a574:	55                   	push   %rbp
    a575:	48 89 e5             	mov    %rsp,%rbp
    a578:	53                   	push   %rbx
    a579:	48 83 ec 18          	sub    $0x18,%rsp
    a57d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _M_data() == _M_local_data(); }
    a581:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a585:	48 89 c7             	mov    %rax,%rdi
    a588:	e8 57 ff ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a58d:	48 89 c3             	mov    %rax,%rbx
    a590:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a594:	48 89 c7             	mov    %rax,%rdi
    a597:	e8 96 06 00 00       	call   ac32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a59c:	48 39 c3             	cmp    %rax,%rbx
    a59f:	0f 94 c0             	sete   %al
    a5a2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a5a6:	c9                   	leave
    a5a7:	c3                   	ret

000000000000a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
    a5a8:	55                   	push   %rbp
    a5a9:	48 89 e5             	mov    %rsp,%rbp
    a5ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_dataplus._M_p = __p; }
    a5b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5bc:	48 89 10             	mov    %rdx,(%rax)
    a5bf:	90                   	nop
    a5c0:	5d                   	pop    %rbp
    a5c1:	c3                   	ret

000000000000a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>:
      _M_capacity(size_type __capacity)
    a5c2:	55                   	push   %rbp
    a5c3:	48 89 e5             	mov    %rsp,%rbp
    a5c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_allocated_capacity = __capacity; }
    a5ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5d6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a5da:	90                   	nop
    a5db:	5d                   	pop    %rbp
    a5dc:	c3                   	ret
    a5dd:	90                   	nop

000000000000a5de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm>:
      _M_length(size_type __length)
    a5de:	55                   	push   %rbp
    a5df:	48 89 e5             	mov    %rsp,%rbp
    a5e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a5e6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_string_length = __length; }
    a5ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a5ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a5f2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a5f6:	90                   	nop
    a5f7:	5d                   	pop    %rbp
    a5f8:	c3                   	ret
    a5f9:	90                   	nop

000000000000a5fa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    a5fa:	55                   	push   %rbp
    a5fb:	48 89 e5             	mov    %rsp,%rbp
    a5fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a602:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a60a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a60e:	48 89 10             	mov    %rdx,(%rax)
    a611:	90                   	nop
    a612:	5d                   	pop    %rbp
    a613:	c3                   	ret

000000000000a614 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    a614:	55                   	push   %rbp
    a615:	48 89 e5             	mov    %rsp,%rbp
    a618:	48 83 ec 10          	sub    $0x10,%rsp
    a61c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a624:	48 8b 00             	mov    (%rax),%rax
    a627:	48 85 c0             	test   %rax,%rax
    a62a:	74 0f                	je     a63b <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x27>
    a62c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a630:	48 8b 00             	mov    (%rax),%rax
    a633:	48 89 c7             	mov    %rax,%rdi
    a636:	e8 f1 fe ff ff       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    a63b:	90                   	nop
    a63c:	c9                   	leave
    a63d:	c3                   	ret

000000000000a63e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
    a63e:	55                   	push   %rbp
    a63f:	48 89 e5             	mov    %rsp,%rbp
    a642:	48 83 ec 60          	sub    $0x60,%rsp
    a646:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    a64a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    a64e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    a652:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a656:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a65a:	48 89 d6             	mov    %rdx,%rsi
    a65d:	48 89 c7             	mov    %rax,%rdi
    a660:	e8 eb 05 00 00       	call   ac50 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    a665:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	if (__dnew > size_type(_S_local_capacity))
    a669:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a66d:	48 83 f8 0f          	cmp    $0xf,%rax
    a671:	76 3f                	jbe    a6b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x74>
	    _M_data(_M_create(__dnew, size_type(0)));
    a673:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    a677:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a67b:	ba 00 00 00 00       	mov    $0x0,%edx
    a680:	48 89 ce             	mov    %rcx,%rsi
    a683:	48 89 c7             	mov    %rax,%rdi
    a686:	e8 91 04 00 00       	call   ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    a68b:	48 89 c2             	mov    %rax,%rdx
    a68e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a692:	48 89 d6             	mov    %rdx,%rsi
    a695:	48 89 c7             	mov    %rax,%rdi
    a698:	e8 0b ff ff ff       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
    a69d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a6a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a6a5:	48 89 d6             	mov    %rdx,%rsi
    a6a8:	48 89 c7             	mov    %rax,%rdi
    a6ab:	e8 12 ff ff ff       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    a6b0:	eb 5e                	jmp    a710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xd2>
    a6b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a6b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (std::is_constant_evaluated())
    a6ba:	e8 ea ba ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    a6bf:	84 c0                	test   %al,%al
    a6c1:	74 40                	je     a703 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc5>
	  for (_CharT& __c : _M_local_buf)
    a6c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a6c7:	48 83 c0 10          	add    $0x10,%rax
    a6cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a6cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6db:	48 83 c0 10          	add    $0x10,%rax
    a6df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a6e3:	eb 14                	jmp    a6f9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xbb>
    a6e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	    __c = _CharT();
    a6ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a6f1:	c6 00 00             	movb   $0x0,(%rax)
	  for (_CharT& __c : _M_local_buf)
    a6f4:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    a6f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a6fd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    a701:	75 e2                	jne    a6e5 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa7>
	return _M_local_data();
    a703:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a707:	48 89 c7             	mov    %rax,%rdi
    a70a:	e8 9d c0 ff ff       	call   67ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
    a70f:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    a710:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    a714:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    a718:	48 89 d6             	mov    %rdx,%rsi
    a71b:	48 89 c7             	mov    %rax,%rdi
    a71e:	e8 d7 fe ff ff       	call   a5fa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
    a723:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a727:	48 89 c7             	mov    %rax,%rdi
    a72a:	e8 b5 fd ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    a72f:	48 89 c1             	mov    %rax,%rcx
    a732:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a736:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a73a:	48 89 c6             	mov    %rax,%rsi
    a73d:	48 89 cf             	mov    %rcx,%rdi
    a740:	e8 3c 05 00 00       	call   ac81 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
    a745:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    a74c:	00 

	_M_set_length(__dnew);
    a74d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a751:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a755:	48 89 d6             	mov    %rdx,%rsi
    a758:	48 89 c7             	mov    %rax,%rdi
    a75b:	e8 ae f9 ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      }
    a760:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    a764:	48 89 c7             	mov    %rax,%rdi
    a767:	e8 a8 fe ff ff       	call   a614 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
    a76c:	c9                   	leave
    a76d:	c3                   	ret

000000000000a76e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
      append(const _CharT* __s)
    a76e:	55                   	push   %rbp
    a76f:	48 89 e5             	mov    %rsp,%rbp
    a772:	48 83 ec 20          	sub    $0x20,%rsp
    a776:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a77a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const size_type __n = traits_type::length(__s);
    a77e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a782:	48 89 c7             	mov    %rax,%rdi
    a785:	e8 7a ba ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a78a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	_M_check_length(size_type(0), __n, "basic_string::append");
    a78e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a796:	48 8d 0d bd 75 01 00 	lea    0x175bd(%rip),%rcx        # 21d5a <_ZNSt8__detailL19__atomic_spin_countE+0x2f6>
    a79d:	be 00 00 00 00       	mov    $0x0,%esi
    a7a2:	48 89 c7             	mov    %rax,%rdi
    a7a5:	e8 1a 05 00 00       	call   acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>
	return _M_append(__s, __n);
    a7aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a7ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a7b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7b6:	48 89 ce             	mov    %rcx,%rsi
    a7b9:	48 89 c7             	mov    %rax,%rdi
    a7bc:	e8 61 05 00 00       	call   ad22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>
      }
    a7c1:	c9                   	leave
    a7c2:	c3                   	ret
    a7c3:	90                   	nop

000000000000a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
    a7c4:	55                   	push   %rbp
    a7c5:	48 89 e5             	mov    %rsp,%rbp
    a7c8:	48 83 ec 10          	sub    $0x10,%rsp
    a7cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return _M_is_local() ? size_type(_S_local_capacity)
    a7d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7d4:	48 89 c7             	mov    %rax,%rdi
    a7d7:	e8 98 fd ff ff       	call   a574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
    a7dc:	84 c0                	test   %al,%al
    a7de:	74 07                	je     a7e7 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x23>
    a7e0:	b8 0f 00 00 00       	mov    $0xf,%eax
	                     : _M_allocated_capacity;
    a7e5:	eb 08                	jmp    a7ef <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x2b>
	return _M_is_local() ? size_type(_S_local_capacity)
    a7e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7eb:	48 8b 40 10          	mov    0x10(%rax),%rax
      }
    a7ef:	c9                   	leave
    a7f0:	c3                   	ret

000000000000a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
    a7f1:	55                   	push   %rbp
    a7f2:	48 89 e5             	mov    %rsp,%rbp
    a7f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a7f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7fd:	5d                   	pop    %rbp
    a7fe:	c3                   	ret
    a7ff:	90                   	nop

000000000000a800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc>:
      insert(size_type __pos, const _CharT* __s)
    a800:	55                   	push   %rbp
    a801:	48 89 e5             	mov    %rsp,%rbp
    a804:	48 83 ec 20          	sub    $0x20,%rsp
    a808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a80c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a810:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	return this->replace(__pos, size_type(0), __s,
    a814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a818:	48 89 c7             	mov    %rax,%rdi
    a81b:	e8 e4 b9 ff ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
    a820:	48 89 c1             	mov    %rax,%rcx
    a823:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a827:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    a82b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a82f:	49 89 c8             	mov    %rcx,%r8
    a832:	48 89 d1             	mov    %rdx,%rcx
    a835:	ba 00 00 00 00       	mov    $0x0,%edx
    a83a:	48 89 c7             	mov    %rax,%rdi
    a83d:	e8 aa 05 00 00       	call   adec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>
      }
    a842:	c9                   	leave
    a843:	c3                   	ret

000000000000a844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>:
      _M_check(size_type __pos, const char* __s) const
    a844:	55                   	push   %rbp
    a845:	48 89 e5             	mov    %rsp,%rbp
    a848:	48 83 ec 20          	sub    $0x20,%rsp
    a84c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a850:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    a854:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__pos > this->size())
    a858:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a85c:	48 89 c7             	mov    %rax,%rdi
    a85f:	e8 92 ba ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a864:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    a868:	0f 92 c0             	setb   %al
    a86b:	84 c0                	test   %al,%al
    a86d:	74 2e                	je     a89d <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc+0x59>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
    a86f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a873:	48 89 c7             	mov    %rax,%rdi
    a876:	e8 7b ba ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    a87b:	48 89 c1             	mov    %rax,%rcx
    a87e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a882:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a886:	48 89 c6             	mov    %rax,%rsi
    a889:	48 8d 05 e0 74 01 00 	lea    0x174e0(%rip),%rax        # 21d70 <_ZNSt8__detailL19__atomic_spin_countE+0x30c>
    a890:	48 89 c7             	mov    %rax,%rdi
    a893:	b8 00 00 00 00       	mov    $0x0,%eax
    a898:	e8 83 aa ff ff       	call   5320 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
	return __pos;
    a89d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
    a8a1:	c9                   	leave
    a8a2:	c3                   	ret
    a8a3:	90                   	nop

000000000000a8a4 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEC1EPS2_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    a8a4:	55                   	push   %rbp
    a8a5:	48 89 e5             	mov    %rsp,%rbp
    a8a8:	53                   	push   %rbx
    a8a9:	48 83 ec 18          	sub    $0x18,%rsp
    a8ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a8b1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a8b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8b9:	48 89 c7             	mov    %rax,%rdi
    a8bc:	e8 ef 05 00 00       	call   aeb0 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
    a8c1:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
    a8c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8c9:	48 89 c7             	mov    %rax,%rdi
    a8cc:	e8 0b 00 00 00       	call   a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a8d1:	48 89 18             	mov    %rbx,(%rax)
    a8d4:	90                   	nop
    a8d5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    a8d9:	c9                   	leave
    a8da:	c3                   	ret
    a8db:	90                   	nop

000000000000a8dc <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    a8dc:	55                   	push   %rbp
    a8dd:	48 89 e5             	mov    %rsp,%rbp
    a8e0:	48 83 ec 10          	sub    $0x10,%rsp
    a8e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a8e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8ec:	48 89 c7             	mov    %rax,%rdi
    a8ef:	e8 d7 05 00 00       	call   aecb <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    a8f4:	c9                   	leave
    a8f5:	c3                   	ret

000000000000a8f6 <_ZNSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    a8f6:	55                   	push   %rbp
    a8f7:	48 89 e5             	mov    %rsp,%rbp
    a8fa:	48 83 ec 10          	sub    $0x10,%rsp
    a8fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    a902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a906:	48 89 c7             	mov    %rax,%rdi
    a909:	e8 d8 05 00 00       	call   aee6 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a90e:	c9                   	leave
    a90f:	c3                   	ret

000000000000a910 <_ZSt4moveIRPN2vk4raii17ContextDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    a910:	55                   	push   %rbp
    a911:	48 89 e5             	mov    %rsp,%rbp
    a914:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a91c:	5d                   	pop    %rbp
    a91d:	c3                   	ret

000000000000a91e <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    a91e:	55                   	push   %rbp
    a91f:	48 89 e5             	mov    %rsp,%rbp
    a922:	48 83 ec 10          	sub    $0x10,%rsp
    a926:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a92a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    a92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a932:	48 85 c0             	test   %rax,%rax
    a935:	74 0d                	je     a944 <_ZNKSt14default_deleteIN2vk4raii17ContextDispatcherEEclEPS2_+0x26>
    a937:	be 38 00 00 00       	mov    $0x38,%esi
    a93c:	48 89 c7             	mov    %rax,%rdi
    a93f:	e8 ec a8 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    a944:	90                   	nop
    a945:	c9                   	leave
    a946:	c3                   	ret
    a947:	90                   	nop

000000000000a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    a948:	55                   	push   %rbp
    a949:	48 89 e5             	mov    %rsp,%rbp
    a94c:	48 83 ec 10          	sub    $0x10,%rsp
    a950:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a954:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a958:	48 89 c7             	mov    %rax,%rdi
    a95b:	e8 a0 05 00 00       	call   af00 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    a960:	c9                   	leave
    a961:	c3                   	ret

000000000000a962 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    a962:	55                   	push   %rbp
    a963:	48 89 e5             	mov    %rsp,%rbp
    a966:	48 83 ec 10          	sub    $0x10,%rsp
    a96a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    a96e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a972:	48 89 c7             	mov    %rax,%rdi
    a975:	e8 a0 05 00 00       	call   af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a97a:	c9                   	leave
    a97b:	c3                   	ret

000000000000a97c <_ZSt4moveIRPN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    a97c:	55                   	push   %rbp
    a97d:	48 89 e5             	mov    %rsp,%rbp
    a980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    a984:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a988:	5d                   	pop    %rbp
    a989:	c3                   	ret

000000000000a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    a98a:	55                   	push   %rbp
    a98b:	48 89 e5             	mov    %rsp,%rbp
    a98e:	48 83 ec 10          	sub    $0x10,%rsp
    a992:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    a996:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    a99a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a99e:	48 85 c0             	test   %rax,%rax
    a9a1:	74 0d                	je     a9b0 <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_+0x26>
    a9a3:	be 48 03 00 00       	mov    $0x348,%esi
    a9a8:	48 89 c7             	mov    %rax,%rdi
    a9ab:	e8 80 a8 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    a9b0:	90                   	nop
    a9b1:	c9                   	leave
    a9b2:	c3                   	ret
    a9b3:	90                   	nop

000000000000a9b4 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    a9b4:	55                   	push   %rbp
    a9b5:	48 89 e5             	mov    %rsp,%rbp
    a9b8:	53                   	push   %rbx
    a9b9:	48 83 ec 28          	sub    $0x28,%rsp
    a9bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a9c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    a9c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9c9:	48 89 c7             	mov    %rax,%rdi
    a9cc:	e8 77 ff ff ff       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a9d1:	48 8b 00             	mov    (%rax),%rax
    a9d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    a9d8:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    a9dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9e0:	48 89 c7             	mov    %rax,%rdi
    a9e3:	e8 60 ff ff ff       	call   a948 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    a9e8:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    a9eb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    a9f0:	74 1e                	je     aa10 <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    a9f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a9f6:	48 89 c7             	mov    %rax,%rdi
    a9f9:	e8 1c 05 00 00       	call   af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    a9fe:	48 89 c2             	mov    %rax,%rdx
    aa01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa05:	48 89 c6             	mov    %rax,%rsi
    aa08:	48 89 d7             	mov    %rdx,%rdi
    aa0b:	e8 7a ff ff ff       	call   a98a <_ZNKSt14default_deleteIN2vk4raii18InstanceDispatcherEEclEPS2_>
      }
    aa10:	90                   	nop
    aa11:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aa15:	c9                   	leave
    aa16:	c3                   	ret
    aa17:	90                   	nop

000000000000aa18 <_ZNKSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    aa18:	55                   	push   %rbp
    aa19:	48 89 e5             	mov    %rsp,%rbp
    aa1c:	48 83 ec 10          	sub    $0x10,%rsp
    aa20:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    aa24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa28:	48 89 c7             	mov    %rax,%rdi
    aa2b:	e8 04 05 00 00       	call   af34 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aa30:	c9                   	leave
    aa31:	c3                   	ret

000000000000aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
    aa32:	55                   	push   %rbp
    aa33:	48 89 e5             	mov    %rsp,%rbp
    aa36:	48 83 ec 10          	sub    $0x10,%rsp
    aa3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa42:	48 89 c7             	mov    %rax,%rdi
    aa45:	e8 07 05 00 00       	call   af51 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    aa4a:	c9                   	leave
    aa4b:	c3                   	ret

000000000000aa4c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE11get_deleterEv>:
      get_deleter() noexcept
    aa4c:	55                   	push   %rbp
    aa4d:	48 89 e5             	mov    %rsp,%rbp
    aa50:	48 83 ec 10          	sub    $0x10,%rsp
    aa54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_deleter(); }
    aa58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa5c:	48 89 c7             	mov    %rax,%rdi
    aa5f:	e8 08 05 00 00       	call   af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    aa64:	c9                   	leave
    aa65:	c3                   	ret

000000000000aa66 <_ZSt4moveIRPN2vk4raii16DeviceDispatcherEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
    aa66:	55                   	push   %rbp
    aa67:	48 89 e5             	mov    %rsp,%rbp
    aa6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    aa6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa72:	5d                   	pop    %rbp
    aa73:	c3                   	ret

000000000000aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>:
      operator()(_Tp* __ptr) const
    aa74:	55                   	push   %rbp
    aa75:	48 89 e5             	mov    %rsp,%rbp
    aa78:	48 83 ec 10          	sub    $0x10,%rsp
    aa7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aa80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	delete __ptr;
    aa84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    aa88:	48 85 c0             	test   %rax,%rax
    aa8b:	74 0d                	je     aa9a <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_+0x26>
    aa8d:	be b8 0f 00 00       	mov    $0xfb8,%esi
    aa92:	48 89 c7             	mov    %rax,%rdi
    aa95:	e8 96 a7 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    aa9a:	90                   	nop
    aa9b:	c9                   	leave
    aa9c:	c3                   	ret
    aa9d:	90                   	nop

000000000000aa9e <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>:
      void reset(pointer __p) noexcept
    aa9e:	55                   	push   %rbp
    aa9f:	48 89 e5             	mov    %rsp,%rbp
    aaa2:	53                   	push   %rbx
    aaa3:	48 83 ec 28          	sub    $0x28,%rsp
    aaa7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    aaab:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const pointer __old_p = _M_ptr();
    aaaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aab3:	48 89 c7             	mov    %rax,%rdi
    aab6:	e8 77 ff ff ff       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aabb:	48 8b 00             	mov    (%rax),%rax
    aabe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	_M_ptr() = __p;
    aac2:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    aac6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aaca:	48 89 c7             	mov    %rax,%rdi
    aacd:	e8 60 ff ff ff       	call   aa32 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    aad2:	48 89 18             	mov    %rbx,(%rax)
	if (__old_p)
    aad5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    aada:	74 1e                	je     aafa <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_+0x5c>
	  _M_deleter()(__old_p);
    aadc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aae0:	48 89 c7             	mov    %rax,%rdi
    aae3:	e8 84 04 00 00       	call   af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>
    aae8:	48 89 c2             	mov    %rax,%rdx
    aaeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaef:	48 89 c6             	mov    %rax,%rsi
    aaf2:	48 89 d7             	mov    %rdx,%rdi
    aaf5:	e8 7a ff ff ff       	call   aa74 <_ZNKSt14default_deleteIN2vk4raii16DeviceDispatcherEEclEPS2_>
      }
    aafa:	90                   	nop
    aafb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    aaff:	c9                   	leave
    ab00:	c3                   	ret
    ab01:	90                   	nop

000000000000ab02 <_ZNKSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
    ab02:	55                   	push   %rbp
    ab03:	48 89 e5             	mov    %rsp,%rbp
    ab06:	48 83 ec 10          	sub    $0x10,%rsp
    ab0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
    ab0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab12:	48 89 c7             	mov    %rax,%rdi
    ab15:	e8 6c 04 00 00       	call   af86 <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
    ab1a:	c9                   	leave
    ab1b:	c3                   	ret

000000000000ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>:
    basic_string<_CharT, _Traits, _Alloc>::
    ab1c:	55                   	push   %rbp
    ab1d:	48 89 e5             	mov    %rsp,%rbp
    ab20:	53                   	push   %rbx
    ab21:	48 83 ec 28          	sub    $0x28,%rsp
    ab25:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ab29:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ab2d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      if (__capacity > max_size())
    ab31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab35:	48 8b 18             	mov    (%rax),%rbx
    ab38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab3c:	48 89 c7             	mov    %rax,%rdi
    ab3f:	e8 60 04 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ab44:	48 39 d8             	cmp    %rbx,%rax
    ab47:	0f 92 c0             	setb   %al
    ab4a:	84 c0                	test   %al,%al
    ab4c:	74 0f                	je     ab5d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0x41>
	std::__throw_length_error(__N("basic_string::_M_create"));
    ab4e:	48 8d 05 52 72 01 00 	lea    0x17252(%rip),%rax        # 21da7 <_ZNSt8__detailL19__atomic_spin_countE+0x343>
    ab55:	48 89 c7             	mov    %rax,%rdi
    ab58:	e8 83 a5 ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    ab5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab61:	48 8b 00             	mov    (%rax),%rax
    ab64:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    ab68:	73 52                	jae    abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
    ab6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab6e:	48 8b 10             	mov    (%rax),%rdx
    ab71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab75:	48 01 c0             	add    %rax,%rax
    ab78:	48 39 c2             	cmp    %rax,%rdx
    ab7b:	73 3f                	jae    abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	  __capacity = 2 * __old_capacity;
    ab7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ab81:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    ab85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab89:	48 89 10             	mov    %rdx,(%rax)
	  if (__capacity > max_size())
    ab8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab90:	48 8b 18             	mov    (%rax),%rbx
    ab93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab97:	48 89 c7             	mov    %rax,%rdi
    ab9a:	e8 05 04 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ab9f:	48 39 d8             	cmp    %rbx,%rax
    aba2:	0f 92 c0             	setb   %al
    aba5:	84 c0                	test   %al,%al
    aba7:	74 13                	je     abbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm+0xa0>
	    __capacity = max_size();
    aba9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    abad:	48 89 c7             	mov    %rax,%rdi
    abb0:	e8 ef 03 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    abb5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    abb9:	48 89 02             	mov    %rax,(%rdx)
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    abbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    abc0:	48 8b 00             	mov    (%rax),%rax
    abc3:	48 8d 58 01          	lea    0x1(%rax),%rbx
    abc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    abcb:	48 89 c7             	mov    %rax,%rdi
    abce:	e8 93 f9 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    abd3:	48 89 de             	mov    %rbx,%rsi
    abd6:	48 89 c7             	mov    %rax,%rdi
    abd9:	e8 ef 03 00 00       	call   afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    }
    abde:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    abe2:	c9                   	leave
    abe3:	c3                   	ret

000000000000abe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm>:
      _M_destroy(size_type __size) throw()
    abe4:	55                   	push   %rbp
    abe5:	48 89 e5             	mov    %rsp,%rbp
    abe8:	41 54                	push   %r12
    abea:	53                   	push   %rbx
    abeb:	48 83 ec 10          	sub    $0x10,%rsp
    abef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    abf3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    abf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    abfb:	48 8d 58 01          	lea    0x1(%rax),%rbx
    abff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac03:	48 89 c7             	mov    %rax,%rdi
    ac06:	e8 d9 f8 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    ac0b:	49 89 c4             	mov    %rax,%r12
    ac0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac12:	48 89 c7             	mov    %rax,%rdi
    ac15:	e8 4c f9 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    ac1a:	48 89 da             	mov    %rbx,%rdx
    ac1d:	4c 89 e6             	mov    %r12,%rsi
    ac20:	48 89 c7             	mov    %rax,%rdi
    ac23:	e8 13 04 00 00       	call   b03b <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>
    ac28:	90                   	nop
    ac29:	48 83 c4 10          	add    $0x10,%rsp
    ac2d:	5b                   	pop    %rbx
    ac2e:	41 5c                	pop    %r12
    ac30:	5d                   	pop    %rbp
    ac31:	c3                   	ret

000000000000ac32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
    ac32:	55                   	push   %rbp
    ac33:	48 89 e5             	mov    %rsp,%rbp
    ac36:	48 83 ec 10          	sub    $0x10,%rsp
    ac3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
    ac3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac42:	48 83 c0 10          	add    $0x10,%rax
    ac46:	48 89 c7             	mov    %rax,%rdi
    ac49:	e8 4b 04 00 00       	call   b099 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
      }
    ac4e:	c9                   	leave
    ac4f:	c3                   	ret

000000000000ac50 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    ac50:	55                   	push   %rbp
    ac51:	48 89 e5             	mov    %rsp,%rbp
    ac54:	48 83 ec 10          	sub    $0x10,%rsp
    ac58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    ac60:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    ac64:	48 89 c7             	mov    %rax,%rdi
    ac67:	e8 47 04 00 00       	call   b0b3 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    ac6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    ac74:	48 89 d6             	mov    %rdx,%rsi
    ac77:	48 89 c7             	mov    %rax,%rdi
    ac7a:	e8 3f 04 00 00       	call   b0be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    ac7f:	c9                   	leave
    ac80:	c3                   	ret

000000000000ac81 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
    ac81:	55                   	push   %rbp
    ac82:	48 89 e5             	mov    %rsp,%rbp
    ac85:	48 83 ec 20          	sub    $0x20,%rsp
    ac89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ac8d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ac91:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { _S_copy(__p, __k1, __k2 - __k1); }
    ac95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac99:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    ac9d:	48 89 c2             	mov    %rax,%rdx
    aca0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    aca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aca8:	48 89 ce             	mov    %rcx,%rsi
    acab:	48 89 c7             	mov    %rax,%rdi
    acae:	e8 21 04 00 00       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    acb3:	90                   	nop
    acb4:	c9                   	leave
    acb5:	c3                   	ret

000000000000acb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
    acb6:	55                   	push   %rbp
    acb7:	48 89 e5             	mov    %rsp,%rbp
    acba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_dataplus; }
    acbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acc2:	5d                   	pop    %rbp
    acc3:	c3                   	ret

000000000000acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
    acc4:	55                   	push   %rbp
    acc5:	48 89 e5             	mov    %rsp,%rbp
    acc8:	53                   	push   %rbx
    acc9:	48 83 ec 28          	sub    $0x28,%rsp
    accd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    acd1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    acd5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    acd9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	if (this->max_size() - (this->size() - __n1) < __n2)
    acdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ace1:	48 89 c7             	mov    %rax,%rdi
    ace4:	e8 bb 02 00 00       	call   afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
    ace9:	48 89 c3             	mov    %rax,%rbx
    acec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    acf0:	48 89 c7             	mov    %rax,%rdi
    acf3:	e8 fe b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    acf8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    acfc:	48 29 c2             	sub    %rax,%rdx
    acff:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
    ad03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    ad07:	0f 92 c0             	setb   %al
    ad0a:	84 c0                	test   %al,%al
    ad0c:	74 0c                	je     ad1a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc+0x56>
	  __throw_length_error(__N(__s));
    ad0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ad12:	48 89 c7             	mov    %rax,%rdi
    ad15:	e8 c6 a3 ff ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      }
    ad1a:	90                   	nop
    ad1b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ad1f:	c9                   	leave
    ad20:	c3                   	ret
    ad21:	90                   	nop

000000000000ad22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    ad22:	55                   	push   %rbp
    ad23:	48 89 e5             	mov    %rsp,%rbp
    ad26:	53                   	push   %rbx
    ad27:	48 83 ec 38          	sub    $0x38,%rsp
    ad2b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ad2f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    ad33:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();
    ad37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad3b:	48 89 c7             	mov    %rax,%rdi
    ad3e:	e8 b3 b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ad43:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ad47:	48 01 d0             	add    %rdx,%rax
    ad4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      if (__len <= this->capacity())
    ad4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad52:	48 89 c7             	mov    %rax,%rdi
    ad55:	e8 6a fa ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    ad5a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    ad5e:	0f 93 c0             	setae  %al
    ad61:	84 c0                	test   %al,%al
    ad63:	74 3b                	je     ada0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0x7e>
	{
	  if (__n)
    ad65:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    ad6a:	74 62                	je     adce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
    ad6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad70:	48 89 c7             	mov    %rax,%rdi
    ad73:	e8 6c f7 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    ad78:	48 89 c3             	mov    %rax,%rbx
    ad7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ad7f:	48 89 c7             	mov    %rax,%rdi
    ad82:	e8 6f b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ad87:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    ad8b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    ad8f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ad93:	48 89 c6             	mov    %rax,%rsi
    ad96:	48 89 cf             	mov    %rcx,%rdi
    ad99:	e8 36 03 00 00       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    ad9e:	eb 2e                	jmp    adce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm+0xac>
	}
      else
	this->_M_mutate(this->size(), size_type(0), __s, __n);
    ada0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ada4:	48 89 c7             	mov    %rax,%rdi
    ada7:	e8 4a b5 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    adac:	48 89 c6             	mov    %rax,%rsi
    adaf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    adb3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    adb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    adbb:	49 89 c8             	mov    %rcx,%r8
    adbe:	48 89 d1             	mov    %rdx,%rcx
    adc1:	ba 00 00 00 00       	mov    $0x0,%edx
    adc6:	48 89 c7             	mov    %rax,%rdi
    adc9:	e8 50 03 00 00       	call   b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__len);
    adce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    add2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    add6:	48 89 d6             	mov    %rdx,%rsi
    add9:	48 89 c7             	mov    %rax,%rdi
    addc:	e8 2d f3 ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    ade1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    }
    ade5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ade9:	c9                   	leave
    adea:	c3                   	ret
    adeb:	90                   	nop

000000000000adec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm>:
      replace(size_type __pos, size_type __n1, const _CharT* __s,
    adec:	55                   	push   %rbp
    aded:	48 89 e5             	mov    %rsp,%rbp
    adf0:	53                   	push   %rbx
    adf1:	48 83 ec 38          	sub    $0x38,%rsp
    adf5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    adf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    adfd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ae01:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    ae05:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
    ae09:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ae0d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ae11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae15:	48 89 ce             	mov    %rcx,%rsi
    ae18:	48 89 c7             	mov    %rax,%rdi
    ae1b:	e8 44 00 00 00       	call   ae64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>
    ae20:	48 89 c3             	mov    %rax,%rbx
    ae23:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    ae27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae2b:	48 8d 15 8d 6f 01 00 	lea    0x16f8d(%rip),%rdx        # 21dbf <_ZNSt8__detailL19__atomic_spin_countE+0x35b>
    ae32:	48 89 ce             	mov    %rcx,%rsi
    ae35:	48 89 c7             	mov    %rax,%rdi
    ae38:	e8 07 fa ff ff       	call   a844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc>
    ae3d:	48 89 c6             	mov    %rax,%rsi
    ae40:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    ae44:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ae48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae4c:	49 89 c8             	mov    %rcx,%r8
    ae4f:	48 89 d1             	mov    %rdx,%rcx
    ae52:	48 89 da             	mov    %rbx,%rdx
    ae55:	48 89 c7             	mov    %rax,%rdi
    ae58:	e8 05 04 00 00       	call   b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>
      }
    ae5d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ae61:	c9                   	leave
    ae62:	c3                   	ret
    ae63:	90                   	nop

000000000000ae64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm>:
      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
    ae64:	55                   	push   %rbp
    ae65:	48 89 e5             	mov    %rsp,%rbp
    ae68:	48 83 ec 30          	sub    $0x30,%rsp
    ae6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ae70:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ae74:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const bool __testoff =  __off < this->size() - __pos;
    ae78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ae7c:	48 89 c7             	mov    %rax,%rdi
    ae7f:	e8 72 b4 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    ae84:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    ae88:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    ae8c:	0f 92 c0             	setb   %al
    ae8f:	88 45 ff             	mov    %al,-0x1(%rbp)
	return __testoff ? __off : this->size() - __pos;
    ae92:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    ae96:	74 06                	je     ae9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x3a>
    ae98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ae9c:	eb 10                	jmp    aeae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm+0x4a>
    ae9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aea2:	48 89 c7             	mov    %rax,%rdi
    aea5:	e8 4c b4 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    aeaa:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
      }
    aeae:	c9                   	leave
    aeaf:	c3                   	ret

000000000000aeb0 <_ZNSt5tupleIJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
    aeb0:	55                   	push   %rbp
    aeb1:	48 89 e5             	mov    %rsp,%rbp
    aeb4:	48 83 ec 10          	sub    $0x10,%rsp
    aeb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
    aebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aec0:	48 89 c7             	mov    %rax,%rdi
    aec3:	e8 42 07 00 00       	call   b60a <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>
    aec8:	90                   	nop
    aec9:	c9                   	leave
    aeca:	c3                   	ret

000000000000aecb <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    aecb:	55                   	push   %rbp
    aecc:	48 89 e5             	mov    %rsp,%rbp
    aecf:	48 83 ec 10          	sub    $0x10,%rsp
    aed3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    aed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aedb:	48 89 c7             	mov    %rax,%rdi
    aede:	e8 4e 07 00 00       	call   b631 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    aee3:	c9                   	leave
    aee4:	c3                   	ret
    aee5:	90                   	nop

000000000000aee6 <_ZNSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    aee6:	55                   	push   %rbp
    aee7:	48 89 e5             	mov    %rsp,%rbp
    aeea:	48 83 ec 10          	sub    $0x10,%rsp
    aeee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    aef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aef6:	48 89 c7             	mov    %rax,%rdi
    aef9:	e8 4d 07 00 00       	call   b64b <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    aefe:	c9                   	leave
    aeff:	c3                   	ret

000000000000af00 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    af00:	55                   	push   %rbp
    af01:	48 89 e5             	mov    %rsp,%rbp
    af04:	48 83 ec 10          	sub    $0x10,%rsp
    af08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    af0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af10:	48 89 c7             	mov    %rax,%rdi
    af13:	e8 4d 07 00 00       	call   b665 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    af18:	c9                   	leave
    af19:	c3                   	ret

000000000000af1a <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
    af1a:	55                   	push   %rbp
    af1b:	48 89 e5             	mov    %rsp,%rbp
    af1e:	48 83 ec 10          	sub    $0x10,%rsp
    af22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af2a:	48 89 c7             	mov    %rax,%rdi
    af2d:	e8 4d 07 00 00       	call   b67f <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    af32:	c9                   	leave
    af33:	c3                   	ret

000000000000af34 <_ZNKSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    af34:	55                   	push   %rbp
    af35:	48 89 e5             	mov    %rsp,%rbp
    af38:	48 83 ec 10          	sub    $0x10,%rsp
    af3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af44:	48 89 c7             	mov    %rax,%rdi
    af47:	e8 4d 07 00 00       	call   b699 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    af4c:	48 8b 00             	mov    (%rax),%rax
    af4f:	c9                   	leave
    af50:	c3                   	ret

000000000000af51 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    af51:	55                   	push   %rbp
    af52:	48 89 e5             	mov    %rsp,%rbp
    af55:	48 83 ec 10          	sub    $0x10,%rsp
    af59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    af5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af61:	48 89 c7             	mov    %rax,%rdi
    af64:	e8 4a 07 00 00       	call   b6b3 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
    af69:	c9                   	leave
    af6a:	c3                   	ret
    af6b:	90                   	nop

000000000000af6c <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
    af6c:	55                   	push   %rbp
    af6d:	48 89 e5             	mov    %rsp,%rbp
    af70:	48 83 ec 10          	sub    $0x10,%rsp
    af74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af7c:	48 89 c7             	mov    %rax,%rdi
    af7f:	e8 49 07 00 00       	call   b6cd <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
    af84:	c9                   	leave
    af85:	c3                   	ret

000000000000af86 <_ZNKSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    af86:	55                   	push   %rbp
    af87:	48 89 e5             	mov    %rsp,%rbp
    af8a:	48 83 ec 10          	sub    $0x10,%rsp
    af8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    af92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    af96:	48 89 c7             	mov    %rax,%rdi
    af99:	e8 49 07 00 00       	call   b6e7 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
    af9e:	48 8b 00             	mov    (%rax),%rax
    afa1:	c9                   	leave
    afa2:	c3                   	ret
    afa3:	90                   	nop

000000000000afa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
    afa4:	55                   	push   %rbp
    afa5:	48 89 e5             	mov    %rsp,%rbp
    afa8:	48 83 ec 10          	sub    $0x10,%rsp
    afac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
    afb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    afb4:	48 89 c7             	mov    %rax,%rdi
    afb7:	e8 fa fc ff ff       	call   acb6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    afbc:	48 89 c7             	mov    %rax,%rdi
    afbf:	e8 3d 07 00 00       	call   b701 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
    afc4:	48 83 e8 01          	sub    $0x1,%rax
    afc8:	48 d1 e8             	shr    %rax
    afcb:	c9                   	leave
    afcc:	c3                   	ret

000000000000afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
    afcd:	55                   	push   %rbp
    afce:	48 89 e5             	mov    %rsp,%rbp
    afd1:	48 83 ec 20          	sub    $0x20,%rsp
    afd5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    afd9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    afdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    afe1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    afe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    afe9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
#if __cplusplus > 201703L
      [[nodiscard,__gnu__::__always_inline__]]
      constexpr _Tp*
      allocate(size_t __n)
      {
	if (std::__is_constant_evaluated())
    afed:	e8 ac b1 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    aff2:	84 c0                	test   %al,%al
    aff4:	74 2a                	je     b020 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x53>
	  {
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    aff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    affa:	ba 00 00 00 00       	mov    $0x0,%edx
    afff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b003:	48 89 d0             	mov    %rdx,%rax
    b006:	83 e0 01             	and    $0x1,%eax
    b009:	84 c0                	test   %al,%al
    b00b:	74 05                	je     b012 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x45>
	      std::__throw_bad_array_new_length();
    b00d:	e8 6e a1 ff ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
    b012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b016:	48 89 c7             	mov    %rax,%rdi
    b019:	e8 02 a2 ff ff       	call   5220 <_Znwm@plt>
    b01e:	eb 19                	jmp    b039 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m+0x6c>
	  }

	return __allocator_base<_Tp>::allocate(__n, 0);
    b020:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b028:	ba 00 00 00 00       	mov    $0x0,%edx
    b02d:	48 89 ce             	mov    %rcx,%rsi
    b030:	48 89 c7             	mov    %rax,%rdi
    b033:	e8 c0 08 00 00       	call   b8f8 <_ZNSt15__new_allocatorIcE8allocateEmPKv>
    b038:	90                   	nop
      { return __a.allocate(__n); }
    b039:	c9                   	leave
    b03a:	c3                   	ret

000000000000b03b <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    b03b:	55                   	push   %rbp
    b03c:	48 89 e5             	mov    %rsp,%rbp
    b03f:	48 83 ec 40          	sub    $0x40,%rsp
    b043:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b047:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b04b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b04f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b053:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b057:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b05b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b05f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b063:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
    b067:	e8 32 b1 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b06c:	84 c0                	test   %al,%al
    b06e:	74 0e                	je     b07e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x43>
	  {
	    ::operator delete(__p);
    b070:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b074:	48 89 c7             	mov    %rax,%rdi
    b077:	e8 74 a1 ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b07c:	eb 18                	jmp    b096 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm+0x5b>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
    b07e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b082:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b08a:	48 89 ce             	mov    %rcx,%rsi
    b08d:	48 89 c7             	mov    %rax,%rdi
    b090:	e8 ab 08 00 00       	call   b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
      { __a.deallocate(__p, __n); }
    b095:	90                   	nop
    b096:	90                   	nop
    b097:	c9                   	leave
    b098:	c3                   	ret

000000000000b099 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
    b099:	55                   	push   %rbp
    b09a:	48 89 e5             	mov    %rsp,%rbp
    b09d:	48 83 ec 10          	sub    $0x10,%rsp
    b0a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::addressof(__r); }
    b0a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0a9:	48 89 c7             	mov    %rax,%rdi
    b0ac:	e8 61 06 00 00       	call   b712 <_ZSt9addressofIKcEPT_RS1_>
    b0b1:	c9                   	leave
    b0b2:	c3                   	ret

000000000000b0b3 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    b0b3:	55                   	push   %rbp
    b0b4:	48 89 e5             	mov    %rsp,%rbp
    b0b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    b0bb:	90                   	nop
    b0bc:	5d                   	pop    %rbp
    b0bd:	c3                   	ret

000000000000b0be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    b0be:	55                   	push   %rbp
    b0bf:	48 89 e5             	mov    %rsp,%rbp
    b0c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0c6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    b0ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b0ce:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    }
    b0d2:	5d                   	pop    %rbp
    b0d3:	c3                   	ret

000000000000b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
    b0d4:	55                   	push   %rbp
    b0d5:	48 89 e5             	mov    %rsp,%rbp
    b0d8:	48 83 ec 20          	sub    $0x20,%rsp
    b0dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b0e0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b0e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    b0e8:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    b0ed:	75 15                	jne    b104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    b0ef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b0f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b0f7:	48 89 d6             	mov    %rdx,%rsi
    b0fa:	48 89 c7             	mov    %rax,%rdi
    b0fd:	e8 c4 b0 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    b102:	eb 17                	jmp    b11b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm+0x47>
	  traits_type::copy(__d, __s, __n);
    b104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b108:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b110:	48 89 ce             	mov    %rcx,%rsi
    b113:	48 89 c7             	mov    %rax,%rdi
    b116:	e8 78 b1 ff ff       	call   6293 <_ZNSt11char_traitsIcE4copyEPcPKcm>
      }
    b11b:	90                   	nop
    b11c:	c9                   	leave
    b11d:	c3                   	ret

000000000000b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>:
    basic_string<_CharT, _Traits, _Alloc>::
    b11e:	55                   	push   %rbp
    b11f:	48 89 e5             	mov    %rsp,%rbp
    b122:	48 83 ec 50          	sub    $0x50,%rsp
    b126:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b12a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b12e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    b132:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    b136:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
      const size_type __how_much = length() - __pos - __len1;
    b13a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b13e:	48 89 c7             	mov    %rax,%rdi
    b141:	e8 cc ee ff ff       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b146:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    b14a:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b14e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      size_type __new_capacity = length() + __len2 - __len1;
    b152:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b156:	48 89 c7             	mov    %rax,%rdi
    b159:	e8 b4 ee ff ff       	call   a012 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
    b15e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b162:	48 01 d0             	add    %rdx,%rax
    b165:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    b169:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __r = _M_create(__new_capacity, capacity());
    b16d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b171:	48 89 c7             	mov    %rax,%rdi
    b174:	e8 4b f6 ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b179:	48 89 c2             	mov    %rax,%rdx
    b17c:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    b180:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b184:	48 89 ce             	mov    %rcx,%rsi
    b187:	48 89 c7             	mov    %rax,%rdi
    b18a:	e8 8d f9 ff ff       	call   ab1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm>
    b18f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (__pos)
    b193:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    b198:	74 22                	je     b1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x9e>
	this->_S_copy(__r, _M_data(), __pos);
    b19a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b19e:	48 89 c7             	mov    %rax,%rdi
    b1a1:	e8 3e f3 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b1a6:	48 89 c1             	mov    %rax,%rcx
    b1a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b1b1:	48 89 ce             	mov    %rcx,%rsi
    b1b4:	48 89 c7             	mov    %rax,%rdi
    b1b7:	e8 18 ff ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__s && __len2)
    b1bc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    b1c1:	74 26                	je     b1e9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
    b1c3:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    b1c8:	74 1f                	je     b1e9 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0xcb>
	this->_S_copy(__r + __pos, __s, __len2);
    b1ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b1ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b1d2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b1d6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    b1da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b1de:	48 89 c6             	mov    %rax,%rsi
    b1e1:	48 89 cf             	mov    %rcx,%rdi
    b1e4:	e8 eb fe ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      if (__how_much)
    b1e9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    b1ee:	74 3d                	je     b22d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm+0x10f>
		      _M_data() + __pos + __len1, __how_much);
    b1f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b1f4:	48 89 c7             	mov    %rax,%rdi
    b1f7:	e8 e8 f2 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b1fc:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b200:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b204:	48 01 ca             	add    %rcx,%rdx
    b207:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
	this->_S_copy(__r + __pos + __len2,
    b20b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b20f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b213:	48 01 c2             	add    %rax,%rdx
    b216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b21a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b21e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b222:	48 89 c2             	mov    %rax,%rdx
    b225:	48 89 cf             	mov    %rcx,%rdi
    b228:	e8 a7 fe ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
      _M_dispose();
    b22d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b231:	48 89 c7             	mov    %rax,%rdi
    b234:	e8 f3 f2 ff ff       	call   a52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
    b239:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b23d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b241:	48 89 d6             	mov    %rdx,%rsi
    b244:	48 89 c7             	mov    %rax,%rdi
    b247:	e8 5c f3 ff ff       	call   a5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
    b24c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b250:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b254:	48 89 d6             	mov    %rdx,%rsi
    b257:	48 89 c7             	mov    %rax,%rdi
    b25a:	e8 63 f3 ff ff       	call   a5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm>
    }
    b25f:	90                   	nop
    b260:	c9                   	leave
    b261:	c3                   	ret

000000000000b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm>:
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    b262:	55                   	push   %rbp
    b263:	48 89 e5             	mov    %rsp,%rbp
    b266:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    b26a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    b26e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    b272:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    b276:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    b27a:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
	       const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
    b27e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b282:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    b286:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b28a:	48 8d 0d 44 6b 01 00 	lea    0x16b44(%rip),%rcx        # 21dd5 <_ZNSt8__detailL19__atomic_spin_countE+0x371>
    b291:	48 89 c7             	mov    %rax,%rdi
    b294:	e8 2b fa ff ff       	call   acc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc>

      const size_type __old_size = this->size();
    b299:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b29d:	48 89 c7             	mov    %rax,%rdi
    b2a0:	e8 51 b0 ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b2a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      const size_type __new_size = __old_size + __len2 - __len1;
    b2a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b2ad:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b2b1:	48 01 d0             	add    %rdx,%rax
    b2b4:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b2b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

      if (__new_size <= this->capacity())
    b2bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b2c0:	48 89 c7             	mov    %rax,%rdi
    b2c3:	e8 fc f4 ff ff       	call   a7c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
    b2c8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b2cc:	0f 93 c0             	setae  %al
    b2cf:	84 c0                	test   %al,%al
    b2d1:	0f 84 fa 02 00 00    	je     b5d1 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x36f>
	{
	  pointer __p = this->_M_data() + __pos;
    b2d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b2db:	48 89 c7             	mov    %rax,%rdi
    b2de:	e8 01 f2 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b2e3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b2e7:	48 01 d0             	add    %rdx,%rax
    b2ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	  const size_type __how_much = __old_size - __pos - __len1;
    b2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b2f2:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
    b2f6:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b2fa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if __cpp_lib_is_constant_evaluated
	  if (std::is_constant_evaluated())
    b2fe:	e8 a6 ae ff ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
    b303:	84 c0                	test   %al,%al
    b305:	0f 84 09 01 00 00    	je     b414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x1b2>
	    {
	      auto __newp = _Alloc_traits::allocate(_M_get_allocator(),
    b30b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b30f:	48 89 c7             	mov    %rax,%rdi
    b312:	e8 4f f2 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b317:	48 89 c2             	mov    %rax,%rdx
    b31a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b31e:	48 89 c6             	mov    %rax,%rsi
    b321:	48 89 d7             	mov    %rdx,%rdi
    b324:	e8 a4 fc ff ff       	call   afcd <_ZNSt16allocator_traitsISaIcEE8allocateERS0_m>
    b329:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
						    __new_size);
	      _S_copy(__newp, this->_M_data(), __pos);
    b32d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b331:	48 89 c7             	mov    %rax,%rdi
    b334:	e8 ab f1 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b339:	48 89 c1             	mov    %rax,%rcx
    b33c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b340:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b344:	48 89 ce             	mov    %rcx,%rsi
    b347:	48 89 c7             	mov    %rax,%rdi
    b34a:	e8 85 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos, __s, __len2);
    b34f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    b353:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b357:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b35b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b35f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b363:	48 89 c6             	mov    %rax,%rsi
    b366:	48 89 cf             	mov    %rcx,%rdi
    b369:	e8 66 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);
    b36e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b372:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b376:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b37a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b37e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b382:	48 01 c2             	add    %rax,%rdx
    b385:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b389:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b38d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b391:	48 89 c2             	mov    %rax,%rdx
    b394:	48 89 cf             	mov    %rcx,%rdi
    b397:	e8 38 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      _S_copy(this->_M_data(), __newp, __new_size);
    b39c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b3a0:	48 89 c7             	mov    %rax,%rdi
    b3a3:	e8 3c f1 ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b3a8:	48 89 c1             	mov    %rax,%rcx
    b3ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b3af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b3b3:	48 89 c6             	mov    %rax,%rsi
    b3b6:	48 89 cf             	mov    %rcx,%rdi
    b3b9:	e8 16 fd ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
	      this->_M_get_allocator().deallocate(__newp, __new_size);
    b3be:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b3c2:	48 89 c7             	mov    %rax,%rdi
    b3c5:	e8 9c f1 ff ff       	call   a566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
    b3ca:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b3ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b3d2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b3d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b3da:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	if (std::__is_constant_evaluated())
    b3de:	e8 bb ad ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b3e3:	84 c0                	test   %al,%al
    b3e5:	74 11                	je     b3f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x196>
	    ::operator delete(__p);
    b3e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b3eb:	48 89 c7             	mov    %rax,%rdi
    b3ee:	e8 fd 9d ff ff       	call   51f0 <_ZdlPv@plt>
	    return;
    b3f3:	e9 f8 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	__allocator_base<_Tp>::deallocate(__p, __n);
    b3f8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b3fc:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    b400:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b404:	48 89 ce             	mov    %rcx,%rsi
    b407:	48 89 c7             	mov    %rax,%rdi
    b40a:	e8 31 05 00 00       	call   b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>
    b40f:	e9 dc 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
#endif
	  if (_M_disjunct(__s))
    b414:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b418:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b41c:	48 89 d6             	mov    %rdx,%rsi
    b41f:	48 89 c7             	mov    %rax,%rdi
    b422:	e8 05 03 00 00       	call   b72c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
    b427:	84 c0                	test   %al,%al
    b429:	74 5f                	je     b48a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x228>
	    {
	      if (__how_much && __len1 != __len2)
    b42b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b430:	74 31                	je     b463 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
    b432:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b436:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    b43a:	74 27                	je     b463 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x201>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    b43c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b440:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b444:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b448:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b44c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b450:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b454:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b458:	48 89 c2             	mov    %rax,%rdx
    b45b:	48 89 cf             	mov    %rcx,%rdi
    b45e:	e8 48 03 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2)
    b463:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b468:	0f 84 82 01 00 00    	je     b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		this->_S_copy(__p, __s, __len2);
    b46e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b472:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b47a:	48 89 ce             	mov    %rcx,%rsi
    b47d:	48 89 c7             	mov    %rax,%rdi
    b480:	e8 4f fc ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b485:	e9 66 01 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
	    }
	  else
	    {
	      // Work in-place.
	      if (__len2 && __len2 <= __len1)
    b48a:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b48f:	74 21                	je     b4b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
    b491:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b495:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    b499:	72 17                	jb     b4b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x250>
		this->_S_move(__p, __s, __len2);
    b49b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b49f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b4a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b4a7:	48 89 ce             	mov    %rcx,%rsi
    b4aa:	48 89 c7             	mov    %rax,%rdi
    b4ad:	e8 f9 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__how_much && __len1 != __len2)
    b4b2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b4b7:	74 31                	je     b4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
    b4b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b4bd:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    b4c1:	74 27                	je     b4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x288>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
    b4c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b4c7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b4cb:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    b4cf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b4d3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b4d7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b4db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b4df:	48 89 c2             	mov    %rax,%rdx
    b4e2:	48 89 cf             	mov    %rcx,%rdi
    b4e5:	e8 c1 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
	      if (__len2 > __len1)
    b4ea:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b4ee:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    b4f2:	0f 83 f8 00 00 00    	jae    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		{
		  if (__s + __len2 <= __p + __len1)
    b4f8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b4fc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b500:	48 01 d0             	add    %rdx,%rax
    b503:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b507:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    b50b:	48 01 ca             	add    %rcx,%rdx
    b50e:	48 39 c2             	cmp    %rax,%rdx
    b511:	72 1c                	jb     b52f <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x2cd>
		    this->_S_move(__p, __s, __len2);
    b513:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b517:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b51b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b51f:	48 89 ce             	mov    %rcx,%rsi
    b522:	48 89 c7             	mov    %rax,%rdi
    b525:	e8 81 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
    b52a:	e9 c1 00 00 00       	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		  else if (__s >= __p + __len1)
    b52f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b533:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b537:	48 01 d0             	add    %rdx,%rax
    b53a:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    b53e:	72 3b                	jb     b57b <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x319>
		    {
		      // Hint to middle end that __p and __s overlap
		      // (PR 98465).
		      const size_type __poff = (__s - __p) + (__len2 - __len1);
    b540:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b544:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    b548:	48 89 c2             	mov    %rax,%rdx
    b54b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b54f:	48 2b 45 98          	sub    -0x68(%rbp),%rax
    b553:	48 01 d0             	add    %rdx,%rax
    b556:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		      this->_S_copy(__p, __p + __poff, __len2);
    b55a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b55e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b562:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    b566:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b56a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b56e:	48 89 ce             	mov    %rcx,%rsi
    b571:	48 89 c7             	mov    %rax,%rdi
    b574:	e8 5b fb ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b579:	eb 75                	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		  else
		    {
		      const size_type __nleft = (__p + __len1) - __s;
    b57b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b57f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b583:	48 01 d0             	add    %rdx,%rax
    b586:	48 2b 45 90          	sub    -0x70(%rbp),%rax
    b58a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		      this->_S_move(__p, __s, __nleft);
    b58e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b592:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b59a:	48 89 ce             	mov    %rcx,%rsi
    b59d:	48 89 c7             	mov    %rax,%rdi
    b5a0:	e8 06 02 00 00       	call   b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>
		      this->_S_copy(__p + __nleft, __p + __len2,
    b5a5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b5a9:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    b5ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b5b1:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b5b5:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
    b5b9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    b5bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b5c1:	48 01 d1             	add    %rdx,%rcx
    b5c4:	48 89 c2             	mov    %rax,%rdx
    b5c7:	48 89 cf             	mov    %rcx,%rdi
    b5ca:	e8 05 fb ff ff       	call   b0d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm>
    b5cf:	eb 1f                	jmp    b5f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm+0x38e>
		    }
		}
	    }
	}
      else
	this->_M_mutate(__pos, __len1, __s, __len2);
    b5d1:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
    b5d5:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
    b5d9:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    b5dd:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    b5e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b5e5:	49 89 f8             	mov    %rdi,%r8
    b5e8:	48 89 c7             	mov    %rax,%rdi
    b5eb:	e8 2e fb ff ff       	call   b11e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm>

      this->_M_set_length(__new_size);
    b5f0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b5f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b5f8:	48 89 d6             	mov    %rdx,%rsi
    b5fb:	48 89 c7             	mov    %rax,%rdi
    b5fe:	e8 0b eb ff ff       	call   a10e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm>
      return *this;
    b603:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    }
    b607:	c9                   	leave
    b608:	c3                   	ret
    b609:	90                   	nop

000000000000b60a <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
    b60a:	55                   	push   %rbp
    b60b:	48 89 e5             	mov    %rsp,%rbp
    b60e:	48 83 ec 10          	sub    $0x10,%rsp
    b612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
    b616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b61a:	48 89 c7             	mov    %rax,%rdi
    b61d:	e8 d4 01 00 00       	call   b7f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>
    b622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b626:	48 89 c7             	mov    %rax,%rdi
    b629:	e8 e4 01 00 00       	call   b812 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>
    b62e:	90                   	nop
    b62f:	c9                   	leave
    b630:	c3                   	ret

000000000000b631 <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b631:	55                   	push   %rbp
    b632:	48 89 e5             	mov    %rsp,%rbp
    b635:	48 83 ec 10          	sub    $0x10,%rsp
    b639:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b63d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b641:	48 89 c7             	mov    %rax,%rdi
    b644:	e8 df 01 00 00       	call   b828 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b649:	c9                   	leave
    b64a:	c3                   	ret

000000000000b64b <_ZSt3getILm1EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b64b:	55                   	push   %rbp
    b64c:	48 89 e5             	mov    %rsp,%rbp
    b64f:	48 83 ec 10          	sub    $0x10,%rsp
    b653:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b65b:	48 89 c7             	mov    %rax,%rdi
    b65e:	e8 df 01 00 00       	call   b842 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b663:	c9                   	leave
    b664:	c3                   	ret

000000000000b665 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b665:	55                   	push   %rbp
    b666:	48 89 e5             	mov    %rsp,%rbp
    b669:	48 83 ec 10          	sub    $0x10,%rsp
    b66d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b675:	48 89 c7             	mov    %rax,%rdi
    b678:	e8 df 01 00 00       	call   b85c <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b67d:	c9                   	leave
    b67e:	c3                   	ret

000000000000b67f <_ZSt3getILm1EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b67f:	55                   	push   %rbp
    b680:	48 89 e5             	mov    %rsp,%rbp
    b683:	48 83 ec 10          	sub    $0x10,%rsp
    b687:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b68b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b68f:	48 89 c7             	mov    %rax,%rdi
    b692:	e8 df 01 00 00       	call   b876 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b697:	c9                   	leave
    b698:	c3                   	ret

000000000000b699 <_ZSt3getILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    b699:	55                   	push   %rbp
    b69a:	48 89 e5             	mov    %rsp,%rbp
    b69d:	48 83 ec 10          	sub    $0x10,%rsp
    b6a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6a9:	48 89 c7             	mov    %rax,%rdi
    b6ac:	e8 df 01 00 00       	call   b890 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b6b1:	c9                   	leave
    b6b2:	c3                   	ret

000000000000b6b3 <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b6b3:	55                   	push   %rbp
    b6b4:	48 89 e5             	mov    %rsp,%rbp
    b6b7:	48 83 ec 10          	sub    $0x10,%rsp
    b6bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b6bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6c3:	48 89 c7             	mov    %rax,%rdi
    b6c6:	e8 df 01 00 00       	call   b8aa <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>
    b6cb:	c9                   	leave
    b6cc:	c3                   	ret

000000000000b6cd <_ZSt3getILm1EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
    b6cd:	55                   	push   %rbp
    b6ce:	48 89 e5             	mov    %rsp,%rbp
    b6d1:	48 83 ec 10          	sub    $0x10,%rsp
    b6d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6dd:	48 89 c7             	mov    %rax,%rdi
    b6e0:	e8 df 01 00 00       	call   b8c4 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
    b6e5:	c9                   	leave
    b6e6:	c3                   	ret

000000000000b6e7 <_ZSt3getILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
    b6e7:	55                   	push   %rbp
    b6e8:	48 89 e5             	mov    %rsp,%rbp
    b6eb:	48 83 ec 10          	sub    $0x10,%rsp
    b6ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    b6f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6f7:	48 89 c7             	mov    %rax,%rdi
    b6fa:	e8 df 01 00 00       	call   b8de <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
    b6ff:	c9                   	leave
    b700:	c3                   	ret

000000000000b701 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    b701:	55                   	push   %rbp
    b702:	48 89 e5             	mov    %rsp,%rbp
    b705:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
    b709:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
#endif
      }
    b710:	5d                   	pop    %rbp
    b711:	c3                   	ret

000000000000b712 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
    b712:	55                   	push   %rbp
    b713:	48 89 e5             	mov    %rsp,%rbp
    b716:	48 83 ec 10          	sub    $0x10,%rsp
    b71a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__addressof(__r); }
    b71e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b722:	48 89 c7             	mov    %rax,%rdi
    b725:	e8 3f 02 00 00       	call   b969 <_ZSt11__addressofIKcEPT_RS1_>
    b72a:	c9                   	leave
    b72b:	c3                   	ret

000000000000b72c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
    b72c:	55                   	push   %rbp
    b72d:	48 89 e5             	mov    %rsp,%rbp
    b730:	53                   	push   %rbx
    b731:	48 83 ec 28          	sub    $0x28,%rsp
    b735:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b739:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	return (less<const _CharT*>()(__s, _M_data())
    b73d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b741:	48 89 c7             	mov    %rax,%rdi
    b744:	e8 9b ed ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b749:	48 89 c2             	mov    %rax,%rdx
    b74c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    b750:	48 8d 45 ee          	lea    -0x12(%rbp),%rax
    b754:	48 89 ce             	mov    %rcx,%rsi
    b757:	48 89 c7             	mov    %rax,%rdi
    b75a:	e8 19 02 00 00       	call   b978 <_ZNKSt4lessIPKcEclES1_S1_>
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
    b75f:	84 c0                	test   %al,%al
    b761:	75 36                	jne    b799 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x6d>
    b763:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b767:	48 89 c7             	mov    %rax,%rdi
    b76a:	e8 75 ed ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
    b76f:	48 89 c3             	mov    %rax,%rbx
    b772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b776:	48 89 c7             	mov    %rax,%rdi
    b779:	e8 78 ab ff ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
    b77e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
    b782:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b786:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    b78a:	48 89 ce             	mov    %rcx,%rsi
    b78d:	48 89 c7             	mov    %rax,%rdi
    b790:	e8 e3 01 00 00       	call   b978 <_ZNKSt4lessIPKcEclES1_S1_>
    b795:	84 c0                	test   %al,%al
    b797:	74 07                	je     b7a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x74>
    b799:	b8 01 00 00 00       	mov    $0x1,%eax
    b79e:	eb 05                	jmp    b7a5 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x79>
    b7a0:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    b7a5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    b7a9:	c9                   	leave
    b7aa:	c3                   	ret

000000000000b7ab <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
    b7ab:	55                   	push   %rbp
    b7ac:	48 89 e5             	mov    %rsp,%rbp
    b7af:	48 83 ec 20          	sub    $0x20,%rsp
    b7b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b7b7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b7bb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__n == 1)
    b7bf:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
    b7c4:	75 15                	jne    b7db <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x30>
	  traits_type::assign(*__d, *__s);
    b7c6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b7ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7ce:	48 89 d6             	mov    %rdx,%rsi
    b7d1:	48 89 c7             	mov    %rax,%rdi
    b7d4:	e8 ed a9 ff ff       	call   61c6 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
    b7d9:	eb 17                	jmp    b7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm+0x47>
	  traits_type::move(__d, __s, __n);
    b7db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b7df:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    b7e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b7e7:	48 89 ce             	mov    %rcx,%rsi
    b7ea:	48 89 c7             	mov    %rax,%rdi
    b7ed:	e8 44 aa ff ff       	call   6236 <_ZNSt11char_traitsIcE4moveEPcPKcm>
      }
    b7f2:	90                   	nop
    b7f3:	c9                   	leave
    b7f4:	c3                   	ret
    b7f5:	90                   	nop

000000000000b7f6 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEEC1Ev>:
      _Tuple_impl()
    b7f6:	55                   	push   %rbp
    b7f7:	48 89 e5             	mov    %rsp,%rbp
    b7fa:	48 83 ec 10          	sub    $0x10,%rsp
    b7fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
    b802:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b806:	48 89 c7             	mov    %rax,%rdi
    b809:	e8 a4 01 00 00       	call   b9b2 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>
    b80e:	90                   	nop
    b80f:	c9                   	leave
    b810:	c3                   	ret
    b811:	90                   	nop

000000000000b812 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
    b812:	55                   	push   %rbp
    b813:	48 89 e5             	mov    %rsp,%rbp
    b816:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    b81a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b81e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    b825:	90                   	nop
    b826:	5d                   	pop    %rbp
    b827:	c3                   	ret

000000000000b828 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b828:	55                   	push   %rbp
    b829:	48 89 e5             	mov    %rsp,%rbp
    b82c:	48 83 ec 10          	sub    $0x10,%rsp
    b830:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b838:	48 89 c7             	mov    %rax,%rdi
    b83b:	e8 7d 01 00 00       	call   b9bd <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>
    b840:	c9                   	leave
    b841:	c3                   	ret

000000000000b842 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b842:	55                   	push   %rbp
    b843:	48 89 e5             	mov    %rsp,%rbp
    b846:	48 83 ec 10          	sub    $0x10,%rsp
    b84a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b84e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b852:	48 89 c7             	mov    %rax,%rdi
    b855:	e8 71 01 00 00       	call   b9cb <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>
    b85a:	c9                   	leave
    b85b:	c3                   	ret

000000000000b85c <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b85c:	55                   	push   %rbp
    b85d:	48 89 e5             	mov    %rsp,%rbp
    b860:	48 83 ec 10          	sub    $0x10,%rsp
    b864:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b86c:	48 89 c7             	mov    %rax,%rdi
    b86f:	e8 71 01 00 00       	call   b9e5 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>
    b874:	c9                   	leave
    b875:	c3                   	ret

000000000000b876 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b876:	55                   	push   %rbp
    b877:	48 89 e5             	mov    %rsp,%rbp
    b87a:	48 83 ec 10          	sub    $0x10,%rsp
    b87e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b886:	48 89 c7             	mov    %rax,%rdi
    b889:	e8 65 01 00 00       	call   b9f3 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>
    b88e:	c9                   	leave
    b88f:	c3                   	ret

000000000000b890 <_ZSt12__get_helperILm0EPN2vk4raii18InstanceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b890:	55                   	push   %rbp
    b891:	48 89 e5             	mov    %rsp,%rbp
    b894:	48 83 ec 10          	sub    $0x10,%rsp
    b898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b89c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8a0:	48 89 c7             	mov    %rax,%rdi
    b8a3:	e8 65 01 00 00       	call   ba0d <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    b8a8:	c9                   	leave
    b8a9:	c3                   	ret

000000000000b8aa <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b8aa:	55                   	push   %rbp
    b8ab:	48 89 e5             	mov    %rsp,%rbp
    b8ae:	48 83 ec 10          	sub    $0x10,%rsp
    b8b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b8b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8ba:	48 89 c7             	mov    %rax,%rdi
    b8bd:	e8 65 01 00 00       	call   ba27 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>
    b8c2:	c9                   	leave
    b8c3:	c3                   	ret

000000000000b8c4 <_ZSt12__get_helperILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b8c4:	55                   	push   %rbp
    b8c5:	48 89 e5             	mov    %rsp,%rbp
    b8c8:	48 83 ec 10          	sub    $0x10,%rsp
    b8cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b8d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8d4:	48 89 c7             	mov    %rax,%rdi
    b8d7:	e8 59 01 00 00       	call   ba35 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>
    b8dc:	c9                   	leave
    b8dd:	c3                   	ret

000000000000b8de <_ZSt12__get_helperILm0EPN2vk4raii16DeviceDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    b8de:	55                   	push   %rbp
    b8df:	48 89 e5             	mov    %rsp,%rbp
    b8e2:	48 83 ec 10          	sub    $0x10,%rsp
    b8e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    b8ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b8ee:	48 89 c7             	mov    %rax,%rdi
    b8f1:	e8 59 01 00 00       	call   ba4f <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
    b8f6:	c9                   	leave
    b8f7:	c3                   	ret

000000000000b8f8 <_ZNSt15__new_allocatorIcE8allocateEmPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    b8f8:	55                   	push   %rbp
    b8f9:	48 89 e5             	mov    %rsp,%rbp
    b8fc:	48 83 ec 20          	sub    $0x20,%rsp
    b900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b904:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b908:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3308. std::allocator<void>().allocate(n)
	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__builtin_expect(__n > this->_M_max_size(), false))
    b90c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b910:	48 89 c7             	mov    %rax,%rdi
    b913:	e8 52 01 00 00       	call   ba6a <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
    b918:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    b91c:	0f 92 c0             	setb   %al
    b91f:	0f b6 c0             	movzbl %al,%eax
    b922:	48 85 c0             	test   %rax,%rax
    b925:	0f 95 c0             	setne  %al
    b928:	84 c0                	test   %al,%al
    b92a:	74 05                	je     b931 <_ZNSt15__new_allocatorIcE8allocateEmPKv+0x39>
	  {
	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
	    // 3190. allocator::allocate sometimes returns too little storage
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
	      std::__throw_bad_array_new_length();
	    std::__throw_bad_alloc();
    b92c:	e8 4f 97 ff ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    b931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b935:	48 89 c7             	mov    %rax,%rdi
    b938:	e8 e3 98 ff ff       	call   5220 <_Znwm@plt>
    b93d:	90                   	nop
      }
    b93e:	c9                   	leave
    b93f:	c3                   	ret

000000000000b940 <_ZNSt15__new_allocatorIcE10deallocateEPcm>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    b940:	55                   	push   %rbp
    b941:	48 89 e5             	mov    %rsp,%rbp
    b944:	48 83 ec 20          	sub    $0x20,%rsp
    b948:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b94c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b950:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    b954:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b958:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b95c:	48 89 d6             	mov    %rdx,%rsi
    b95f:	48 89 c7             	mov    %rax,%rdi
    b962:	e8 c9 98 ff ff       	call   5230 <_ZdlPvm@plt>
      }
    b967:	c9                   	leave
    b968:	c3                   	ret

000000000000b969 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    b969:	55                   	push   %rbp
    b96a:	48 89 e5             	mov    %rsp,%rbp
    b96d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    b971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b975:	5d                   	pop    %rbp
    b976:	c3                   	ret
    b977:	90                   	nop

000000000000b978 <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
    b978:	55                   	push   %rbp
    b979:	48 89 e5             	mov    %rsp,%rbp
    b97c:	48 83 ec 20          	sub    $0x20,%rsp
    b980:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b984:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    b988:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
#if __cplusplus >= 201402L
	if (std::__is_constant_evaluated())
    b98c:	e8 0d a8 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    b991:	84 c0                	test   %al,%al
    b993:	74 0d                	je     b9a2 <_ZNKSt4lessIPKcEclES1_S1_+0x2a>
	  return __x < __y;
    b995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b999:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    b99d:	0f 92 c0             	setb   %al
    b9a0:	eb 0e                	jmp    b9b0 <_ZNKSt4lessIPKcEclES1_S1_+0x38>
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
    b9a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b9a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9aa:	48 39 c2             	cmp    %rax,%rdx
    b9ad:	0f 92 c0             	setb   %al
      }
    b9b0:	c9                   	leave
    b9b1:	c3                   	ret

000000000000b9b2 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
    b9b2:	55                   	push   %rbp
    b9b3:	48 89 e5             	mov    %rsp,%rbp
    b9b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
    b9ba:	90                   	nop
    b9bb:	5d                   	pop    %rbp
    b9bc:	c3                   	ret

000000000000b9bd <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    b9bd:	55                   	push   %rbp
    b9be:	48 89 e5             	mov    %rsp,%rbp
    b9c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9c9:	5d                   	pop    %rbp
    b9ca:	c3                   	ret

000000000000b9cb <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii17ContextDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b9cb:	55                   	push   %rbp
    b9cc:	48 89 e5             	mov    %rsp,%rbp
    b9cf:	48 83 ec 10          	sub    $0x10,%rsp
    b9d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9db:	48 89 c7             	mov    %rax,%rdi
    b9de:	e8 9b 00 00 00       	call   ba7e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>
    b9e3:	c9                   	leave
    b9e4:	c3                   	ret

000000000000b9e5 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    b9e5:	55                   	push   %rbp
    b9e6:	48 89 e5             	mov    %rsp,%rbp
    b9e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9f1:	5d                   	pop    %rbp
    b9f2:	c3                   	ret

000000000000b9f3 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    b9f3:	55                   	push   %rbp
    b9f4:	48 89 e5             	mov    %rsp,%rbp
    b9f7:	48 83 ec 10          	sub    $0x10,%rsp
    b9fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    b9ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba03:	48 89 c7             	mov    %rax,%rdi
    ba06:	e8 81 00 00 00       	call   ba8c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>
    ba0b:	c9                   	leave
    ba0c:	c3                   	ret

000000000000ba0d <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba0d:	55                   	push   %rbp
    ba0e:	48 89 e5             	mov    %rsp,%rbp
    ba11:	48 83 ec 10          	sub    $0x10,%rsp
    ba15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba1d:	48 89 c7             	mov    %rax,%rdi
    ba20:	e8 75 00 00 00       	call   ba9a <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>
    ba25:	c9                   	leave
    ba26:	c3                   	ret

000000000000ba27 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    ba27:	55                   	push   %rbp
    ba28:	48 89 e5             	mov    %rsp,%rbp
    ba2b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba33:	5d                   	pop    %rbp
    ba34:	c3                   	ret

000000000000ba35 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba35:	55                   	push   %rbp
    ba36:	48 89 e5             	mov    %rsp,%rbp
    ba39:	48 83 ec 10          	sub    $0x10,%rsp
    ba3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba45:	48 89 c7             	mov    %rax,%rdi
    ba48:	e8 5b 00 00 00       	call   baa8 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>
    ba4d:	c9                   	leave
    ba4e:	c3                   	ret

000000000000ba4f <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    ba4f:	55                   	push   %rbp
    ba50:	48 89 e5             	mov    %rsp,%rbp
    ba53:	48 83 ec 10          	sub    $0x10,%rsp
    ba57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba5f:	48 89 c7             	mov    %rax,%rdi
    ba62:	e8 4f 00 00 00       	call   bab6 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>
    ba67:	c9                   	leave
    ba68:	c3                   	ret
    ba69:	90                   	nop

000000000000ba6a <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    ba6a:	55                   	push   %rbp
    ba6b:	48 89 e5             	mov    %rsp,%rbp
    ba6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    ba72:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    ba79:	ff ff 7f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    ba7c:	5d                   	pop    %rbp
    ba7d:	c3                   	ret

000000000000ba7e <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii17ContextDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    ba7e:	55                   	push   %rbp
    ba7f:	48 89 e5             	mov    %rsp,%rbp
    ba82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba8a:	5d                   	pop    %rbp
    ba8b:	c3                   	ret

000000000000ba8c <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EE7_M_headERS5_>:
    ba8c:	55                   	push   %rbp
    ba8d:	48 89 e5             	mov    %rsp,%rbp
    ba90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba98:	5d                   	pop    %rbp
    ba99:	c3                   	ret

000000000000ba9a <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    ba9a:	55                   	push   %rbp
    ba9b:	48 89 e5             	mov    %rsp,%rbp
    ba9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    baa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    baa6:	5d                   	pop    %rbp
    baa7:	c3                   	ret

000000000000baa8 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    baa8:	55                   	push   %rbp
    baa9:	48 89 e5             	mov    %rsp,%rbp
    baac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bab0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bab4:	5d                   	pop    %rbp
    bab5:	c3                   	ret

000000000000bab6 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    bab6:	55                   	push   %rbp
    bab7:	48 89 e5             	mov    %rsp,%rbp
    baba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    babe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bac2:	5d                   	pop    %rbp
    bac3:	c3                   	ret

000000000000bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>:
  class CompressionExhaustedEXTError : public SystemError
    bac4:	55                   	push   %rbp
    bac5:	48 89 e5             	mov    %rsp,%rbp
    bac8:	48 83 ec 10          	sub    $0x10,%rsp
    bacc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bad0:	48 8d 15 19 66 02 00 	lea    0x26619(%rip),%rdx        # 320f0 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x10>
    bad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    badb:	48 89 10             	mov    %rdx,(%rax)
    bade:	48 8d 15 33 66 02 00 	lea    0x26633(%rip),%rdx        # 32118 <_ZTVN2vk28CompressionExhaustedEXTErrorE+0x38>
    bae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bae9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    baed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    baf1:	48 89 c7             	mov    %rax,%rdi
    baf4:	e8 4d be ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    baf9:	90                   	nop
    bafa:	c9                   	leave
    bafb:	c3                   	ret

000000000000bafc <_ZThn8_N2vk28CompressionExhaustedEXTErrorD1Ev>:
    bafc:	48 83 ef 08          	sub    $0x8,%rdi
    bb00:	eb c2                	jmp    bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>

000000000000bb02 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>:
    bb02:	55                   	push   %rbp
    bb03:	48 89 e5             	mov    %rsp,%rbp
    bb06:	48 83 ec 10          	sub    $0x10,%rsp
    bb0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb12:	48 89 c7             	mov    %rax,%rdi
    bb15:	e8 aa ff ff ff       	call   bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    bb1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb1e:	be 28 00 00 00       	mov    $0x28,%esi
    bb23:	48 89 c7             	mov    %rax,%rdi
    bb26:	e8 05 97 ff ff       	call   5230 <_ZdlPvm@plt>
    bb2b:	c9                   	leave
    bb2c:	c3                   	ret

000000000000bb2d <_ZThn8_N2vk28CompressionExhaustedEXTErrorD0Ev>:
    bb2d:	48 83 ef 08          	sub    $0x8,%rdi
    bb31:	eb cf                	jmp    bb02 <_ZN2vk28CompressionExhaustedEXTErrorD0Ev>
    bb33:	90                   	nop

000000000000bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>:
  class NotPermittedKHRError : public SystemError
    bb34:	55                   	push   %rbp
    bb35:	48 89 e5             	mov    %rsp,%rbp
    bb38:	48 83 ec 10          	sub    $0x10,%rsp
    bb3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb40:	48 8d 15 f9 65 02 00 	lea    0x265f9(%rip),%rdx        # 32140 <_ZTVN2vk20NotPermittedKHRErrorE+0x10>
    bb47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb4b:	48 89 10             	mov    %rdx,(%rax)
    bb4e:	48 8d 15 13 66 02 00 	lea    0x26613(%rip),%rdx        # 32168 <_ZTVN2vk20NotPermittedKHRErrorE+0x38>
    bb55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb59:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bb5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb61:	48 89 c7             	mov    %rax,%rdi
    bb64:	e8 dd bd ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bb69:	90                   	nop
    bb6a:	c9                   	leave
    bb6b:	c3                   	ret

000000000000bb6c <_ZThn8_N2vk20NotPermittedKHRErrorD1Ev>:
    bb6c:	48 83 ef 08          	sub    $0x8,%rdi
    bb70:	eb c2                	jmp    bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>

000000000000bb72 <_ZN2vk20NotPermittedKHRErrorD0Ev>:
    bb72:	55                   	push   %rbp
    bb73:	48 89 e5             	mov    %rsp,%rbp
    bb76:	48 83 ec 10          	sub    $0x10,%rsp
    bb7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bb7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb82:	48 89 c7             	mov    %rax,%rdi
    bb85:	e8 aa ff ff ff       	call   bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    bb8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bb8e:	be 28 00 00 00       	mov    $0x28,%esi
    bb93:	48 89 c7             	mov    %rax,%rdi
    bb96:	e8 95 96 ff ff       	call   5230 <_ZdlPvm@plt>
    bb9b:	c9                   	leave
    bb9c:	c3                   	ret

000000000000bb9d <_ZThn8_N2vk20NotPermittedKHRErrorD0Ev>:
    bb9d:	48 83 ef 08          	sub    $0x8,%rdi
    bba1:	eb cf                	jmp    bb72 <_ZN2vk20NotPermittedKHRErrorD0Ev>
    bba3:	90                   	nop

000000000000bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
  class InvalidDrmFormatModifierPlaneLayoutEXTError : public SystemError
    bba4:	55                   	push   %rbp
    bba5:	48 89 e5             	mov    %rsp,%rbp
    bba8:	48 83 ec 10          	sub    $0x10,%rsp
    bbac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbb0:	48 8d 15 d9 65 02 00 	lea    0x265d9(%rip),%rdx        # 32190 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x10>
    bbb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbbb:	48 89 10             	mov    %rdx,(%rax)
    bbbe:	48 8d 15 f3 65 02 00 	lea    0x265f3(%rip),%rdx        # 321b8 <_ZTVN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorE+0x38>
    bbc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbc9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bbcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbd1:	48 89 c7             	mov    %rax,%rdi
    bbd4:	e8 6d bd ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bbd9:	90                   	nop
    bbda:	c9                   	leave
    bbdb:	c3                   	ret

000000000000bbdc <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>:
    bbdc:	48 83 ef 08          	sub    $0x8,%rdi
    bbe0:	eb c2                	jmp    bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>

000000000000bbe2 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    bbe2:	55                   	push   %rbp
    bbe3:	48 89 e5             	mov    %rsp,%rbp
    bbe6:	48 83 ec 10          	sub    $0x10,%rsp
    bbea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbf2:	48 89 c7             	mov    %rax,%rdi
    bbf5:	e8 aa ff ff ff       	call   bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    bbfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbfe:	be 28 00 00 00       	mov    $0x28,%esi
    bc03:	48 89 c7             	mov    %rax,%rdi
    bc06:	e8 25 96 ff ff       	call   5230 <_ZdlPvm@plt>
    bc0b:	c9                   	leave
    bc0c:	c3                   	ret

000000000000bc0d <_ZThn8_N2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>:
    bc0d:	48 83 ef 08          	sub    $0x8,%rdi
    bc11:	eb cf                	jmp    bbe2 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD0Ev>
    bc13:	90                   	nop

000000000000bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>:
  class InvalidShaderNVError : public SystemError
    bc14:	55                   	push   %rbp
    bc15:	48 89 e5             	mov    %rsp,%rbp
    bc18:	48 83 ec 10          	sub    $0x10,%rsp
    bc1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc20:	48 8d 15 b9 65 02 00 	lea    0x265b9(%rip),%rdx        # 321e0 <_ZTVN2vk20InvalidShaderNVErrorE+0x10>
    bc27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc2b:	48 89 10             	mov    %rdx,(%rax)
    bc2e:	48 8d 15 d3 65 02 00 	lea    0x265d3(%rip),%rdx        # 32208 <_ZTVN2vk20InvalidShaderNVErrorE+0x38>
    bc35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc39:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bc3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc41:	48 89 c7             	mov    %rax,%rdi
    bc44:	e8 fd bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bc49:	90                   	nop
    bc4a:	c9                   	leave
    bc4b:	c3                   	ret

000000000000bc4c <_ZThn8_N2vk20InvalidShaderNVErrorD1Ev>:
    bc4c:	48 83 ef 08          	sub    $0x8,%rdi
    bc50:	eb c2                	jmp    bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>

000000000000bc52 <_ZN2vk20InvalidShaderNVErrorD0Ev>:
    bc52:	55                   	push   %rbp
    bc53:	48 89 e5             	mov    %rsp,%rbp
    bc56:	48 83 ec 10          	sub    $0x10,%rsp
    bc5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc62:	48 89 c7             	mov    %rax,%rdi
    bc65:	e8 aa ff ff ff       	call   bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    bc6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc6e:	be 28 00 00 00       	mov    $0x28,%esi
    bc73:	48 89 c7             	mov    %rax,%rdi
    bc76:	e8 b5 95 ff ff       	call   5230 <_ZdlPvm@plt>
    bc7b:	c9                   	leave
    bc7c:	c3                   	ret

000000000000bc7d <_ZThn8_N2vk20InvalidShaderNVErrorD0Ev>:
    bc7d:	48 83 ef 08          	sub    $0x8,%rdi
    bc81:	eb cf                	jmp    bc52 <_ZN2vk20InvalidShaderNVErrorD0Ev>
    bc83:	90                   	nop

000000000000bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>:
  class ValidationFailedEXTError : public SystemError
    bc84:	55                   	push   %rbp
    bc85:	48 89 e5             	mov    %rsp,%rbp
    bc88:	48 83 ec 10          	sub    $0x10,%rsp
    bc8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bc90:	48 8d 15 99 65 02 00 	lea    0x26599(%rip),%rdx        # 32230 <_ZTVN2vk24ValidationFailedEXTErrorE+0x10>
    bc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bc9b:	48 89 10             	mov    %rdx,(%rax)
    bc9e:	48 8d 15 b3 65 02 00 	lea    0x265b3(%rip),%rdx        # 32258 <_ZTVN2vk24ValidationFailedEXTErrorE+0x38>
    bca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bca9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bcad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcb1:	48 89 c7             	mov    %rax,%rdi
    bcb4:	e8 8d bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bcb9:	90                   	nop
    bcba:	c9                   	leave
    bcbb:	c3                   	ret

000000000000bcbc <_ZThn8_N2vk24ValidationFailedEXTErrorD1Ev>:
    bcbc:	48 83 ef 08          	sub    $0x8,%rdi
    bcc0:	eb c2                	jmp    bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>

000000000000bcc2 <_ZN2vk24ValidationFailedEXTErrorD0Ev>:
    bcc2:	55                   	push   %rbp
    bcc3:	48 89 e5             	mov    %rsp,%rbp
    bcc6:	48 83 ec 10          	sub    $0x10,%rsp
    bcca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bcce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcd2:	48 89 c7             	mov    %rax,%rdi
    bcd5:	e8 aa ff ff ff       	call   bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    bcda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bcde:	be 28 00 00 00       	mov    $0x28,%esi
    bce3:	48 89 c7             	mov    %rax,%rdi
    bce6:	e8 45 95 ff ff       	call   5230 <_ZdlPvm@plt>
    bceb:	c9                   	leave
    bcec:	c3                   	ret

000000000000bced <_ZThn8_N2vk24ValidationFailedEXTErrorD0Ev>:
    bced:	48 83 ef 08          	sub    $0x8,%rdi
    bcf1:	eb cf                	jmp    bcc2 <_ZN2vk24ValidationFailedEXTErrorD0Ev>
    bcf3:	90                   	nop

000000000000bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>:
  class IncompatibleDisplayKHRError : public SystemError
    bcf4:	55                   	push   %rbp
    bcf5:	48 89 e5             	mov    %rsp,%rbp
    bcf8:	48 83 ec 10          	sub    $0x10,%rsp
    bcfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd00:	48 8d 15 79 65 02 00 	lea    0x26579(%rip),%rdx        # 32280 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x10>
    bd07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd0b:	48 89 10             	mov    %rdx,(%rax)
    bd0e:	48 8d 15 93 65 02 00 	lea    0x26593(%rip),%rdx        # 322a8 <_ZTVN2vk27IncompatibleDisplayKHRErrorE+0x38>
    bd15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd19:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bd1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd21:	48 89 c7             	mov    %rax,%rdi
    bd24:	e8 1d bc ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bd29:	90                   	nop
    bd2a:	c9                   	leave
    bd2b:	c3                   	ret

000000000000bd2c <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD1Ev>:
    bd2c:	48 83 ef 08          	sub    $0x8,%rdi
    bd30:	eb c2                	jmp    bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>

000000000000bd32 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>:
    bd32:	55                   	push   %rbp
    bd33:	48 89 e5             	mov    %rsp,%rbp
    bd36:	48 83 ec 10          	sub    $0x10,%rsp
    bd3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd42:	48 89 c7             	mov    %rax,%rdi
    bd45:	e8 aa ff ff ff       	call   bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    bd4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd4e:	be 28 00 00 00       	mov    $0x28,%esi
    bd53:	48 89 c7             	mov    %rax,%rdi
    bd56:	e8 d5 94 ff ff       	call   5230 <_ZdlPvm@plt>
    bd5b:	c9                   	leave
    bd5c:	c3                   	ret

000000000000bd5d <_ZThn8_N2vk27IncompatibleDisplayKHRErrorD0Ev>:
    bd5d:	48 83 ef 08          	sub    $0x8,%rdi
    bd61:	eb cf                	jmp    bd32 <_ZN2vk27IncompatibleDisplayKHRErrorD0Ev>
    bd63:	90                   	nop

000000000000bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>:
  class OutOfDateKHRError : public SystemError
    bd64:	55                   	push   %rbp
    bd65:	48 89 e5             	mov    %rsp,%rbp
    bd68:	48 83 ec 10          	sub    $0x10,%rsp
    bd6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bd70:	48 8d 15 59 65 02 00 	lea    0x26559(%rip),%rdx        # 322d0 <_ZTVN2vk17OutOfDateKHRErrorE+0x10>
    bd77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd7b:	48 89 10             	mov    %rdx,(%rax)
    bd7e:	48 8d 15 73 65 02 00 	lea    0x26573(%rip),%rdx        # 322f8 <_ZTVN2vk17OutOfDateKHRErrorE+0x38>
    bd85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bd8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd91:	48 89 c7             	mov    %rax,%rdi
    bd94:	e8 ad bb ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bd99:	90                   	nop
    bd9a:	c9                   	leave
    bd9b:	c3                   	ret

000000000000bd9c <_ZThn8_N2vk17OutOfDateKHRErrorD1Ev>:
    bd9c:	48 83 ef 08          	sub    $0x8,%rdi
    bda0:	eb c2                	jmp    bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>

000000000000bda2 <_ZN2vk17OutOfDateKHRErrorD0Ev>:
    bda2:	55                   	push   %rbp
    bda3:	48 89 e5             	mov    %rsp,%rbp
    bda6:	48 83 ec 10          	sub    $0x10,%rsp
    bdaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bdae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdb2:	48 89 c7             	mov    %rax,%rdi
    bdb5:	e8 aa ff ff ff       	call   bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    bdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdbe:	be 28 00 00 00       	mov    $0x28,%esi
    bdc3:	48 89 c7             	mov    %rax,%rdi
    bdc6:	e8 65 94 ff ff       	call   5230 <_ZdlPvm@plt>
    bdcb:	c9                   	leave
    bdcc:	c3                   	ret

000000000000bdcd <_ZThn8_N2vk17OutOfDateKHRErrorD0Ev>:
    bdcd:	48 83 ef 08          	sub    $0x8,%rdi
    bdd1:	eb cf                	jmp    bda2 <_ZN2vk17OutOfDateKHRErrorD0Ev>
    bdd3:	90                   	nop

000000000000bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>:
  class NativeWindowInUseKHRError : public SystemError
    bdd4:	55                   	push   %rbp
    bdd5:	48 89 e5             	mov    %rsp,%rbp
    bdd8:	48 83 ec 10          	sub    $0x10,%rsp
    bddc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bde0:	48 8d 15 39 65 02 00 	lea    0x26539(%rip),%rdx        # 32320 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x10>
    bde7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdeb:	48 89 10             	mov    %rdx,(%rax)
    bdee:	48 8d 15 53 65 02 00 	lea    0x26553(%rip),%rdx        # 32348 <_ZTVN2vk25NativeWindowInUseKHRErrorE+0x38>
    bdf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bdf9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bdfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be01:	48 89 c7             	mov    %rax,%rdi
    be04:	e8 3d bb ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    be09:	90                   	nop
    be0a:	c9                   	leave
    be0b:	c3                   	ret

000000000000be0c <_ZThn8_N2vk25NativeWindowInUseKHRErrorD1Ev>:
    be0c:	48 83 ef 08          	sub    $0x8,%rdi
    be10:	eb c2                	jmp    bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>

000000000000be12 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>:
    be12:	55                   	push   %rbp
    be13:	48 89 e5             	mov    %rsp,%rbp
    be16:	48 83 ec 10          	sub    $0x10,%rsp
    be1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be22:	48 89 c7             	mov    %rax,%rdi
    be25:	e8 aa ff ff ff       	call   bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    be2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be2e:	be 28 00 00 00       	mov    $0x28,%esi
    be33:	48 89 c7             	mov    %rax,%rdi
    be36:	e8 f5 93 ff ff       	call   5230 <_ZdlPvm@plt>
    be3b:	c9                   	leave
    be3c:	c3                   	ret

000000000000be3d <_ZThn8_N2vk25NativeWindowInUseKHRErrorD0Ev>:
    be3d:	48 83 ef 08          	sub    $0x8,%rdi
    be41:	eb cf                	jmp    be12 <_ZN2vk25NativeWindowInUseKHRErrorD0Ev>
    be43:	90                   	nop

000000000000be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>:
  class SurfaceLostKHRError : public SystemError
    be44:	55                   	push   %rbp
    be45:	48 89 e5             	mov    %rsp,%rbp
    be48:	48 83 ec 10          	sub    $0x10,%rsp
    be4c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be50:	48 8d 15 19 65 02 00 	lea    0x26519(%rip),%rdx        # 32370 <_ZTVN2vk19SurfaceLostKHRErrorE+0x10>
    be57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be5b:	48 89 10             	mov    %rdx,(%rax)
    be5e:	48 8d 15 33 65 02 00 	lea    0x26533(%rip),%rdx        # 32398 <_ZTVN2vk19SurfaceLostKHRErrorE+0x38>
    be65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be69:	48 89 50 08          	mov    %rdx,0x8(%rax)
    be6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be71:	48 89 c7             	mov    %rax,%rdi
    be74:	e8 cd ba ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    be79:	90                   	nop
    be7a:	c9                   	leave
    be7b:	c3                   	ret

000000000000be7c <_ZThn8_N2vk19SurfaceLostKHRErrorD1Ev>:
    be7c:	48 83 ef 08          	sub    $0x8,%rdi
    be80:	eb c2                	jmp    be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>

000000000000be82 <_ZN2vk19SurfaceLostKHRErrorD0Ev>:
    be82:	55                   	push   %rbp
    be83:	48 89 e5             	mov    %rsp,%rbp
    be86:	48 83 ec 10          	sub    $0x10,%rsp
    be8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    be8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be92:	48 89 c7             	mov    %rax,%rdi
    be95:	e8 aa ff ff ff       	call   be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    be9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be9e:	be 28 00 00 00       	mov    $0x28,%esi
    bea3:	48 89 c7             	mov    %rax,%rdi
    bea6:	e8 85 93 ff ff       	call   5230 <_ZdlPvm@plt>
    beab:	c9                   	leave
    beac:	c3                   	ret

000000000000bead <_ZThn8_N2vk19SurfaceLostKHRErrorD0Ev>:
    bead:	48 83 ef 08          	sub    $0x8,%rdi
    beb1:	eb cf                	jmp    be82 <_ZN2vk19SurfaceLostKHRErrorD0Ev>
    beb3:	90                   	nop

000000000000beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
  class InvalidOpaqueCaptureAddressError : public SystemError
    beb4:	55                   	push   %rbp
    beb5:	48 89 e5             	mov    %rsp,%rbp
    beb8:	48 83 ec 10          	sub    $0x10,%rsp
    bebc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bec0:	48 8d 15 f9 64 02 00 	lea    0x264f9(%rip),%rdx        # 323c0 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x10>
    bec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    becb:	48 89 10             	mov    %rdx,(%rax)
    bece:	48 8d 15 13 65 02 00 	lea    0x26513(%rip),%rdx        # 323e8 <_ZTVN2vk32InvalidOpaqueCaptureAddressErrorE+0x38>
    bed5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bed9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bedd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bee1:	48 89 c7             	mov    %rax,%rdi
    bee4:	e8 5d ba ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bee9:	90                   	nop
    beea:	c9                   	leave
    beeb:	c3                   	ret

000000000000beec <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD1Ev>:
    beec:	48 83 ef 08          	sub    $0x8,%rdi
    bef0:	eb c2                	jmp    beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>

000000000000bef2 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    bef2:	55                   	push   %rbp
    bef3:	48 89 e5             	mov    %rsp,%rbp
    bef6:	48 83 ec 10          	sub    $0x10,%rsp
    befa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    befe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf02:	48 89 c7             	mov    %rax,%rdi
    bf05:	e8 aa ff ff ff       	call   beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    bf0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf0e:	be 28 00 00 00       	mov    $0x28,%esi
    bf13:	48 89 c7             	mov    %rax,%rdi
    bf16:	e8 15 93 ff ff       	call   5230 <_ZdlPvm@plt>
    bf1b:	c9                   	leave
    bf1c:	c3                   	ret

000000000000bf1d <_ZThn8_N2vk32InvalidOpaqueCaptureAddressErrorD0Ev>:
    bf1d:	48 83 ef 08          	sub    $0x8,%rdi
    bf21:	eb cf                	jmp    bef2 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD0Ev>
    bf23:	90                   	nop

000000000000bf24 <_ZN2vk18FragmentationErrorD1Ev>:
  class FragmentationError : public SystemError
    bf24:	55                   	push   %rbp
    bf25:	48 89 e5             	mov    %rsp,%rbp
    bf28:	48 83 ec 10          	sub    $0x10,%rsp
    bf2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf30:	48 8d 15 d9 64 02 00 	lea    0x264d9(%rip),%rdx        # 32410 <_ZTVN2vk18FragmentationErrorE+0x10>
    bf37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf3b:	48 89 10             	mov    %rdx,(%rax)
    bf3e:	48 8d 15 f3 64 02 00 	lea    0x264f3(%rip),%rdx        # 32438 <_ZTVN2vk18FragmentationErrorE+0x38>
    bf45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf49:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bf4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf51:	48 89 c7             	mov    %rax,%rdi
    bf54:	e8 ed b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bf59:	90                   	nop
    bf5a:	c9                   	leave
    bf5b:	c3                   	ret

000000000000bf5c <_ZThn8_N2vk18FragmentationErrorD1Ev>:
    bf5c:	48 83 ef 08          	sub    $0x8,%rdi
    bf60:	eb c2                	jmp    bf24 <_ZN2vk18FragmentationErrorD1Ev>

000000000000bf62 <_ZN2vk18FragmentationErrorD0Ev>:
    bf62:	55                   	push   %rbp
    bf63:	48 89 e5             	mov    %rsp,%rbp
    bf66:	48 83 ec 10          	sub    $0x10,%rsp
    bf6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bf6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf72:	48 89 c7             	mov    %rax,%rdi
    bf75:	e8 aa ff ff ff       	call   bf24 <_ZN2vk18FragmentationErrorD1Ev>
    bf7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bf7e:	be 28 00 00 00       	mov    $0x28,%esi
    bf83:	48 89 c7             	mov    %rax,%rdi
    bf86:	e8 a5 92 ff ff       	call   5230 <_ZdlPvm@plt>
    bf8b:	c9                   	leave
    bf8c:	c3                   	ret

000000000000bf8d <_ZThn8_N2vk18FragmentationErrorD0Ev>:
    bf8d:	48 83 ef 08          	sub    $0x8,%rdi
    bf91:	eb cf                	jmp    bf62 <_ZN2vk18FragmentationErrorD0Ev>
    bf93:	90                   	nop

000000000000bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>:
  class InvalidExternalHandleError : public SystemError
    bf94:	55                   	push   %rbp
    bf95:	48 89 e5             	mov    %rsp,%rbp
    bf98:	48 83 ec 10          	sub    $0x10,%rsp
    bf9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfa0:	48 8d 15 b9 64 02 00 	lea    0x264b9(%rip),%rdx        # 32460 <_ZTVN2vk26InvalidExternalHandleErrorE+0x10>
    bfa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfab:	48 89 10             	mov    %rdx,(%rax)
    bfae:	48 8d 15 d3 64 02 00 	lea    0x264d3(%rip),%rdx        # 32488 <_ZTVN2vk26InvalidExternalHandleErrorE+0x38>
    bfb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfb9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bfbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfc1:	48 89 c7             	mov    %rax,%rdi
    bfc4:	e8 7d b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    bfc9:	90                   	nop
    bfca:	c9                   	leave
    bfcb:	c3                   	ret

000000000000bfcc <_ZThn8_N2vk26InvalidExternalHandleErrorD1Ev>:
    bfcc:	48 83 ef 08          	sub    $0x8,%rdi
    bfd0:	eb c2                	jmp    bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>

000000000000bfd2 <_ZN2vk26InvalidExternalHandleErrorD0Ev>:
    bfd2:	55                   	push   %rbp
    bfd3:	48 89 e5             	mov    %rsp,%rbp
    bfd6:	48 83 ec 10          	sub    $0x10,%rsp
    bfda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bfde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfe2:	48 89 c7             	mov    %rax,%rdi
    bfe5:	e8 aa ff ff ff       	call   bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    bfea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfee:	be 28 00 00 00       	mov    $0x28,%esi
    bff3:	48 89 c7             	mov    %rax,%rdi
    bff6:	e8 35 92 ff ff       	call   5230 <_ZdlPvm@plt>
    bffb:	c9                   	leave
    bffc:	c3                   	ret

000000000000bffd <_ZThn8_N2vk26InvalidExternalHandleErrorD0Ev>:
    bffd:	48 83 ef 08          	sub    $0x8,%rdi
    c001:	eb cf                	jmp    bfd2 <_ZN2vk26InvalidExternalHandleErrorD0Ev>
    c003:	90                   	nop

000000000000c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>:
  class OutOfPoolMemoryError : public SystemError
    c004:	55                   	push   %rbp
    c005:	48 89 e5             	mov    %rsp,%rbp
    c008:	48 83 ec 10          	sub    $0x10,%rsp
    c00c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c010:	48 8d 15 99 64 02 00 	lea    0x26499(%rip),%rdx        # 324b0 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x10>
    c017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c01b:	48 89 10             	mov    %rdx,(%rax)
    c01e:	48 8d 15 b3 64 02 00 	lea    0x264b3(%rip),%rdx        # 324d8 <_ZTVN2vk20OutOfPoolMemoryErrorE+0x38>
    c025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c029:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c02d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c031:	48 89 c7             	mov    %rax,%rdi
    c034:	e8 0d b9 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c039:	90                   	nop
    c03a:	c9                   	leave
    c03b:	c3                   	ret

000000000000c03c <_ZThn8_N2vk20OutOfPoolMemoryErrorD1Ev>:
    c03c:	48 83 ef 08          	sub    $0x8,%rdi
    c040:	eb c2                	jmp    c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>

000000000000c042 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>:
    c042:	55                   	push   %rbp
    c043:	48 89 e5             	mov    %rsp,%rbp
    c046:	48 83 ec 10          	sub    $0x10,%rsp
    c04a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c04e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c052:	48 89 c7             	mov    %rax,%rdi
    c055:	e8 aa ff ff ff       	call   c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    c05a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c05e:	be 28 00 00 00       	mov    $0x28,%esi
    c063:	48 89 c7             	mov    %rax,%rdi
    c066:	e8 c5 91 ff ff       	call   5230 <_ZdlPvm@plt>
    c06b:	c9                   	leave
    c06c:	c3                   	ret

000000000000c06d <_ZThn8_N2vk20OutOfPoolMemoryErrorD0Ev>:
    c06d:	48 83 ef 08          	sub    $0x8,%rdi
    c071:	eb cf                	jmp    c042 <_ZN2vk20OutOfPoolMemoryErrorD0Ev>
    c073:	90                   	nop

000000000000c074 <_ZN2vk12UnknownErrorD1Ev>:
  class UnknownError : public SystemError
    c074:	55                   	push   %rbp
    c075:	48 89 e5             	mov    %rsp,%rbp
    c078:	48 83 ec 10          	sub    $0x10,%rsp
    c07c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c080:	48 8d 15 79 64 02 00 	lea    0x26479(%rip),%rdx        # 32500 <_ZTVN2vk12UnknownErrorE+0x10>
    c087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c08b:	48 89 10             	mov    %rdx,(%rax)
    c08e:	48 8d 15 93 64 02 00 	lea    0x26493(%rip),%rdx        # 32528 <_ZTVN2vk12UnknownErrorE+0x38>
    c095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c099:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c09d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0a1:	48 89 c7             	mov    %rax,%rdi
    c0a4:	e8 9d b8 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c0a9:	90                   	nop
    c0aa:	c9                   	leave
    c0ab:	c3                   	ret

000000000000c0ac <_ZThn8_N2vk12UnknownErrorD1Ev>:
    c0ac:	48 83 ef 08          	sub    $0x8,%rdi
    c0b0:	eb c2                	jmp    c074 <_ZN2vk12UnknownErrorD1Ev>

000000000000c0b2 <_ZN2vk12UnknownErrorD0Ev>:
    c0b2:	55                   	push   %rbp
    c0b3:	48 89 e5             	mov    %rsp,%rbp
    c0b6:	48 83 ec 10          	sub    $0x10,%rsp
    c0ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0c2:	48 89 c7             	mov    %rax,%rdi
    c0c5:	e8 aa ff ff ff       	call   c074 <_ZN2vk12UnknownErrorD1Ev>
    c0ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0ce:	be 28 00 00 00       	mov    $0x28,%esi
    c0d3:	48 89 c7             	mov    %rax,%rdi
    c0d6:	e8 55 91 ff ff       	call   5230 <_ZdlPvm@plt>
    c0db:	c9                   	leave
    c0dc:	c3                   	ret

000000000000c0dd <_ZThn8_N2vk12UnknownErrorD0Ev>:
    c0dd:	48 83 ef 08          	sub    $0x8,%rdi
    c0e1:	eb cf                	jmp    c0b2 <_ZN2vk12UnknownErrorD0Ev>
    c0e3:	90                   	nop

000000000000c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>:
  class FragmentedPoolError : public SystemError
    c0e4:	55                   	push   %rbp
    c0e5:	48 89 e5             	mov    %rsp,%rbp
    c0e8:	48 83 ec 10          	sub    $0x10,%rsp
    c0ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c0f0:	48 8d 15 59 64 02 00 	lea    0x26459(%rip),%rdx        # 32550 <_ZTVN2vk19FragmentedPoolErrorE+0x10>
    c0f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c0fb:	48 89 10             	mov    %rdx,(%rax)
    c0fe:	48 8d 15 73 64 02 00 	lea    0x26473(%rip),%rdx        # 32578 <_ZTVN2vk19FragmentedPoolErrorE+0x38>
    c105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c109:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c111:	48 89 c7             	mov    %rax,%rdi
    c114:	e8 2d b8 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c119:	90                   	nop
    c11a:	c9                   	leave
    c11b:	c3                   	ret

000000000000c11c <_ZThn8_N2vk19FragmentedPoolErrorD1Ev>:
    c11c:	48 83 ef 08          	sub    $0x8,%rdi
    c120:	eb c2                	jmp    c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>

000000000000c122 <_ZN2vk19FragmentedPoolErrorD0Ev>:
    c122:	55                   	push   %rbp
    c123:	48 89 e5             	mov    %rsp,%rbp
    c126:	48 83 ec 10          	sub    $0x10,%rsp
    c12a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c132:	48 89 c7             	mov    %rax,%rdi
    c135:	e8 aa ff ff ff       	call   c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    c13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c13e:	be 28 00 00 00       	mov    $0x28,%esi
    c143:	48 89 c7             	mov    %rax,%rdi
    c146:	e8 e5 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c14b:	c9                   	leave
    c14c:	c3                   	ret

000000000000c14d <_ZThn8_N2vk19FragmentedPoolErrorD0Ev>:
    c14d:	48 83 ef 08          	sub    $0x8,%rdi
    c151:	eb cf                	jmp    c122 <_ZN2vk19FragmentedPoolErrorD0Ev>
    c153:	90                   	nop

000000000000c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>:
  class FormatNotSupportedError : public SystemError
    c154:	55                   	push   %rbp
    c155:	48 89 e5             	mov    %rsp,%rbp
    c158:	48 83 ec 10          	sub    $0x10,%rsp
    c15c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c160:	48 8d 15 39 64 02 00 	lea    0x26439(%rip),%rdx        # 325a0 <_ZTVN2vk23FormatNotSupportedErrorE+0x10>
    c167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c16b:	48 89 10             	mov    %rdx,(%rax)
    c16e:	48 8d 15 53 64 02 00 	lea    0x26453(%rip),%rdx        # 325c8 <_ZTVN2vk23FormatNotSupportedErrorE+0x38>
    c175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c179:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c17d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c181:	48 89 c7             	mov    %rax,%rdi
    c184:	e8 bd b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c189:	90                   	nop
    c18a:	c9                   	leave
    c18b:	c3                   	ret

000000000000c18c <_ZThn8_N2vk23FormatNotSupportedErrorD1Ev>:
    c18c:	48 83 ef 08          	sub    $0x8,%rdi
    c190:	eb c2                	jmp    c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>

000000000000c192 <_ZN2vk23FormatNotSupportedErrorD0Ev>:
    c192:	55                   	push   %rbp
    c193:	48 89 e5             	mov    %rsp,%rbp
    c196:	48 83 ec 10          	sub    $0x10,%rsp
    c19a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c19e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1a2:	48 89 c7             	mov    %rax,%rdi
    c1a5:	e8 aa ff ff ff       	call   c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    c1aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1ae:	be 28 00 00 00       	mov    $0x28,%esi
    c1b3:	48 89 c7             	mov    %rax,%rdi
    c1b6:	e8 75 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c1bb:	c9                   	leave
    c1bc:	c3                   	ret

000000000000c1bd <_ZThn8_N2vk23FormatNotSupportedErrorD0Ev>:
    c1bd:	48 83 ef 08          	sub    $0x8,%rdi
    c1c1:	eb cf                	jmp    c192 <_ZN2vk23FormatNotSupportedErrorD0Ev>
    c1c3:	90                   	nop

000000000000c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>:
  class TooManyObjectsError : public SystemError
    c1c4:	55                   	push   %rbp
    c1c5:	48 89 e5             	mov    %rsp,%rbp
    c1c8:	48 83 ec 10          	sub    $0x10,%rsp
    c1cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c1d0:	48 8d 15 19 64 02 00 	lea    0x26419(%rip),%rdx        # 325f0 <_ZTVN2vk19TooManyObjectsErrorE+0x10>
    c1d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1db:	48 89 10             	mov    %rdx,(%rax)
    c1de:	48 8d 15 33 64 02 00 	lea    0x26433(%rip),%rdx        # 32618 <_ZTVN2vk19TooManyObjectsErrorE+0x38>
    c1e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1e9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c1ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c1f1:	48 89 c7             	mov    %rax,%rdi
    c1f4:	e8 4d b7 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c1f9:	90                   	nop
    c1fa:	c9                   	leave
    c1fb:	c3                   	ret

000000000000c1fc <_ZThn8_N2vk19TooManyObjectsErrorD1Ev>:
    c1fc:	48 83 ef 08          	sub    $0x8,%rdi
    c200:	eb c2                	jmp    c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>

000000000000c202 <_ZN2vk19TooManyObjectsErrorD0Ev>:
    c202:	55                   	push   %rbp
    c203:	48 89 e5             	mov    %rsp,%rbp
    c206:	48 83 ec 10          	sub    $0x10,%rsp
    c20a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c20e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c212:	48 89 c7             	mov    %rax,%rdi
    c215:	e8 aa ff ff ff       	call   c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    c21a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c21e:	be 28 00 00 00       	mov    $0x28,%esi
    c223:	48 89 c7             	mov    %rax,%rdi
    c226:	e8 05 90 ff ff       	call   5230 <_ZdlPvm@plt>
    c22b:	c9                   	leave
    c22c:	c3                   	ret

000000000000c22d <_ZThn8_N2vk19TooManyObjectsErrorD0Ev>:
    c22d:	48 83 ef 08          	sub    $0x8,%rdi
    c231:	eb cf                	jmp    c202 <_ZN2vk19TooManyObjectsErrorD0Ev>
    c233:	90                   	nop

000000000000c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>:
  class IncompatibleDriverError : public SystemError
    c234:	55                   	push   %rbp
    c235:	48 89 e5             	mov    %rsp,%rbp
    c238:	48 83 ec 10          	sub    $0x10,%rsp
    c23c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c240:	48 8d 15 f9 63 02 00 	lea    0x263f9(%rip),%rdx        # 32640 <_ZTVN2vk23IncompatibleDriverErrorE+0x10>
    c247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c24b:	48 89 10             	mov    %rdx,(%rax)
    c24e:	48 8d 15 13 64 02 00 	lea    0x26413(%rip),%rdx        # 32668 <_ZTVN2vk23IncompatibleDriverErrorE+0x38>
    c255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c259:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c261:	48 89 c7             	mov    %rax,%rdi
    c264:	e8 dd b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c269:	90                   	nop
    c26a:	c9                   	leave
    c26b:	c3                   	ret

000000000000c26c <_ZThn8_N2vk23IncompatibleDriverErrorD1Ev>:
    c26c:	48 83 ef 08          	sub    $0x8,%rdi
    c270:	eb c2                	jmp    c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>

000000000000c272 <_ZN2vk23IncompatibleDriverErrorD0Ev>:
    c272:	55                   	push   %rbp
    c273:	48 89 e5             	mov    %rsp,%rbp
    c276:	48 83 ec 10          	sub    $0x10,%rsp
    c27a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c282:	48 89 c7             	mov    %rax,%rdi
    c285:	e8 aa ff ff ff       	call   c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    c28a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c28e:	be 28 00 00 00       	mov    $0x28,%esi
    c293:	48 89 c7             	mov    %rax,%rdi
    c296:	e8 95 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c29b:	c9                   	leave
    c29c:	c3                   	ret

000000000000c29d <_ZThn8_N2vk23IncompatibleDriverErrorD0Ev>:
    c29d:	48 83 ef 08          	sub    $0x8,%rdi
    c2a1:	eb cf                	jmp    c272 <_ZN2vk23IncompatibleDriverErrorD0Ev>
    c2a3:	90                   	nop

000000000000c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>:
  class FeatureNotPresentError : public SystemError
    c2a4:	55                   	push   %rbp
    c2a5:	48 89 e5             	mov    %rsp,%rbp
    c2a8:	48 83 ec 10          	sub    $0x10,%rsp
    c2ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2b0:	48 8d 15 d9 63 02 00 	lea    0x263d9(%rip),%rdx        # 32690 <_ZTVN2vk22FeatureNotPresentErrorE+0x10>
    c2b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2bb:	48 89 10             	mov    %rdx,(%rax)
    c2be:	48 8d 15 f3 63 02 00 	lea    0x263f3(%rip),%rdx        # 326b8 <_ZTVN2vk22FeatureNotPresentErrorE+0x38>
    c2c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2c9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c2cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2d1:	48 89 c7             	mov    %rax,%rdi
    c2d4:	e8 6d b6 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c2d9:	90                   	nop
    c2da:	c9                   	leave
    c2db:	c3                   	ret

000000000000c2dc <_ZThn8_N2vk22FeatureNotPresentErrorD1Ev>:
    c2dc:	48 83 ef 08          	sub    $0x8,%rdi
    c2e0:	eb c2                	jmp    c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>

000000000000c2e2 <_ZN2vk22FeatureNotPresentErrorD0Ev>:
    c2e2:	55                   	push   %rbp
    c2e3:	48 89 e5             	mov    %rsp,%rbp
    c2e6:	48 83 ec 10          	sub    $0x10,%rsp
    c2ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c2ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2f2:	48 89 c7             	mov    %rax,%rdi
    c2f5:	e8 aa ff ff ff       	call   c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    c2fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c2fe:	be 28 00 00 00       	mov    $0x28,%esi
    c303:	48 89 c7             	mov    %rax,%rdi
    c306:	e8 25 8f ff ff       	call   5230 <_ZdlPvm@plt>
    c30b:	c9                   	leave
    c30c:	c3                   	ret

000000000000c30d <_ZThn8_N2vk22FeatureNotPresentErrorD0Ev>:
    c30d:	48 83 ef 08          	sub    $0x8,%rdi
    c311:	eb cf                	jmp    c2e2 <_ZN2vk22FeatureNotPresentErrorD0Ev>
    c313:	90                   	nop

000000000000c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>:
  class ExtensionNotPresentError : public SystemError
    c314:	55                   	push   %rbp
    c315:	48 89 e5             	mov    %rsp,%rbp
    c318:	48 83 ec 10          	sub    $0x10,%rsp
    c31c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c320:	48 8d 15 b9 63 02 00 	lea    0x263b9(%rip),%rdx        # 326e0 <_ZTVN2vk24ExtensionNotPresentErrorE+0x10>
    c327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c32b:	48 89 10             	mov    %rdx,(%rax)
    c32e:	48 8d 15 d3 63 02 00 	lea    0x263d3(%rip),%rdx        # 32708 <_ZTVN2vk24ExtensionNotPresentErrorE+0x38>
    c335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c339:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c33d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c341:	48 89 c7             	mov    %rax,%rdi
    c344:	e8 fd b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c349:	90                   	nop
    c34a:	c9                   	leave
    c34b:	c3                   	ret

000000000000c34c <_ZThn8_N2vk24ExtensionNotPresentErrorD1Ev>:
    c34c:	48 83 ef 08          	sub    $0x8,%rdi
    c350:	eb c2                	jmp    c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>

000000000000c352 <_ZN2vk24ExtensionNotPresentErrorD0Ev>:
    c352:	55                   	push   %rbp
    c353:	48 89 e5             	mov    %rsp,%rbp
    c356:	48 83 ec 10          	sub    $0x10,%rsp
    c35a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c35e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c362:	48 89 c7             	mov    %rax,%rdi
    c365:	e8 aa ff ff ff       	call   c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    c36a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c36e:	be 28 00 00 00       	mov    $0x28,%esi
    c373:	48 89 c7             	mov    %rax,%rdi
    c376:	e8 b5 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c37b:	c9                   	leave
    c37c:	c3                   	ret

000000000000c37d <_ZThn8_N2vk24ExtensionNotPresentErrorD0Ev>:
    c37d:	48 83 ef 08          	sub    $0x8,%rdi
    c381:	eb cf                	jmp    c352 <_ZN2vk24ExtensionNotPresentErrorD0Ev>
    c383:	90                   	nop

000000000000c384 <_ZN2vk20LayerNotPresentErrorD1Ev>:
  class LayerNotPresentError : public SystemError
    c384:	55                   	push   %rbp
    c385:	48 89 e5             	mov    %rsp,%rbp
    c388:	48 83 ec 10          	sub    $0x10,%rsp
    c38c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c390:	48 8d 15 99 63 02 00 	lea    0x26399(%rip),%rdx        # 32730 <_ZTVN2vk20LayerNotPresentErrorE+0x10>
    c397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c39b:	48 89 10             	mov    %rdx,(%rax)
    c39e:	48 8d 15 b3 63 02 00 	lea    0x263b3(%rip),%rdx        # 32758 <_ZTVN2vk20LayerNotPresentErrorE+0x38>
    c3a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3a9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c3ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3b1:	48 89 c7             	mov    %rax,%rdi
    c3b4:	e8 8d b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c3b9:	90                   	nop
    c3ba:	c9                   	leave
    c3bb:	c3                   	ret

000000000000c3bc <_ZThn8_N2vk20LayerNotPresentErrorD1Ev>:
    c3bc:	48 83 ef 08          	sub    $0x8,%rdi
    c3c0:	eb c2                	jmp    c384 <_ZN2vk20LayerNotPresentErrorD1Ev>

000000000000c3c2 <_ZN2vk20LayerNotPresentErrorD0Ev>:
    c3c2:	55                   	push   %rbp
    c3c3:	48 89 e5             	mov    %rsp,%rbp
    c3c6:	48 83 ec 10          	sub    $0x10,%rsp
    c3ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c3ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3d2:	48 89 c7             	mov    %rax,%rdi
    c3d5:	e8 aa ff ff ff       	call   c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    c3da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c3de:	be 28 00 00 00       	mov    $0x28,%esi
    c3e3:	48 89 c7             	mov    %rax,%rdi
    c3e6:	e8 45 8e ff ff       	call   5230 <_ZdlPvm@plt>
    c3eb:	c9                   	leave
    c3ec:	c3                   	ret

000000000000c3ed <_ZThn8_N2vk20LayerNotPresentErrorD0Ev>:
    c3ed:	48 83 ef 08          	sub    $0x8,%rdi
    c3f1:	eb cf                	jmp    c3c2 <_ZN2vk20LayerNotPresentErrorD0Ev>
    c3f3:	90                   	nop

000000000000c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>:
  class MemoryMapFailedError : public SystemError
    c3f4:	55                   	push   %rbp
    c3f5:	48 89 e5             	mov    %rsp,%rbp
    c3f8:	48 83 ec 10          	sub    $0x10,%rsp
    c3fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c400:	48 8d 15 79 63 02 00 	lea    0x26379(%rip),%rdx        # 32780 <_ZTVN2vk20MemoryMapFailedErrorE+0x10>
    c407:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c40b:	48 89 10             	mov    %rdx,(%rax)
    c40e:	48 8d 15 93 63 02 00 	lea    0x26393(%rip),%rdx        # 327a8 <_ZTVN2vk20MemoryMapFailedErrorE+0x38>
    c415:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c419:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c41d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c421:	48 89 c7             	mov    %rax,%rdi
    c424:	e8 1d b5 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c429:	90                   	nop
    c42a:	c9                   	leave
    c42b:	c3                   	ret

000000000000c42c <_ZThn8_N2vk20MemoryMapFailedErrorD1Ev>:
    c42c:	48 83 ef 08          	sub    $0x8,%rdi
    c430:	eb c2                	jmp    c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>

000000000000c432 <_ZN2vk20MemoryMapFailedErrorD0Ev>:
    c432:	55                   	push   %rbp
    c433:	48 89 e5             	mov    %rsp,%rbp
    c436:	48 83 ec 10          	sub    $0x10,%rsp
    c43a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c43e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c442:	48 89 c7             	mov    %rax,%rdi
    c445:	e8 aa ff ff ff       	call   c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    c44a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c44e:	be 28 00 00 00       	mov    $0x28,%esi
    c453:	48 89 c7             	mov    %rax,%rdi
    c456:	e8 d5 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c45b:	c9                   	leave
    c45c:	c3                   	ret

000000000000c45d <_ZThn8_N2vk20MemoryMapFailedErrorD0Ev>:
    c45d:	48 83 ef 08          	sub    $0x8,%rdi
    c461:	eb cf                	jmp    c432 <_ZN2vk20MemoryMapFailedErrorD0Ev>
    c463:	90                   	nop

000000000000c464 <_ZN2vk15DeviceLostErrorD1Ev>:
  class DeviceLostError : public SystemError
    c464:	55                   	push   %rbp
    c465:	48 89 e5             	mov    %rsp,%rbp
    c468:	48 83 ec 10          	sub    $0x10,%rsp
    c46c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c470:	48 8d 15 59 63 02 00 	lea    0x26359(%rip),%rdx        # 327d0 <_ZTVN2vk15DeviceLostErrorE+0x10>
    c477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c47b:	48 89 10             	mov    %rdx,(%rax)
    c47e:	48 8d 15 73 63 02 00 	lea    0x26373(%rip),%rdx        # 327f8 <_ZTVN2vk15DeviceLostErrorE+0x38>
    c485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c489:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c48d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c491:	48 89 c7             	mov    %rax,%rdi
    c494:	e8 ad b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c499:	90                   	nop
    c49a:	c9                   	leave
    c49b:	c3                   	ret

000000000000c49c <_ZThn8_N2vk15DeviceLostErrorD1Ev>:
    c49c:	48 83 ef 08          	sub    $0x8,%rdi
    c4a0:	eb c2                	jmp    c464 <_ZN2vk15DeviceLostErrorD1Ev>

000000000000c4a2 <_ZN2vk15DeviceLostErrorD0Ev>:
    c4a2:	55                   	push   %rbp
    c4a3:	48 89 e5             	mov    %rsp,%rbp
    c4a6:	48 83 ec 10          	sub    $0x10,%rsp
    c4aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4b2:	48 89 c7             	mov    %rax,%rdi
    c4b5:	e8 aa ff ff ff       	call   c464 <_ZN2vk15DeviceLostErrorD1Ev>
    c4ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4be:	be 28 00 00 00       	mov    $0x28,%esi
    c4c3:	48 89 c7             	mov    %rax,%rdi
    c4c6:	e8 65 8d ff ff       	call   5230 <_ZdlPvm@plt>
    c4cb:	c9                   	leave
    c4cc:	c3                   	ret

000000000000c4cd <_ZThn8_N2vk15DeviceLostErrorD0Ev>:
    c4cd:	48 83 ef 08          	sub    $0x8,%rdi
    c4d1:	eb cf                	jmp    c4a2 <_ZN2vk15DeviceLostErrorD0Ev>
    c4d3:	90                   	nop

000000000000c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>:
  class InitializationFailedError : public SystemError
    c4d4:	55                   	push   %rbp
    c4d5:	48 89 e5             	mov    %rsp,%rbp
    c4d8:	48 83 ec 10          	sub    $0x10,%rsp
    c4dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c4e0:	48 8d 15 39 63 02 00 	lea    0x26339(%rip),%rdx        # 32820 <_ZTVN2vk25InitializationFailedErrorE+0x10>
    c4e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4eb:	48 89 10             	mov    %rdx,(%rax)
    c4ee:	48 8d 15 53 63 02 00 	lea    0x26353(%rip),%rdx        # 32848 <_ZTVN2vk25InitializationFailedErrorE+0x38>
    c4f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c4f9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c4fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c501:	48 89 c7             	mov    %rax,%rdi
    c504:	e8 3d b4 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c509:	90                   	nop
    c50a:	c9                   	leave
    c50b:	c3                   	ret

000000000000c50c <_ZThn8_N2vk25InitializationFailedErrorD1Ev>:
    c50c:	48 83 ef 08          	sub    $0x8,%rdi
    c510:	eb c2                	jmp    c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>

000000000000c512 <_ZN2vk25InitializationFailedErrorD0Ev>:
    c512:	55                   	push   %rbp
    c513:	48 89 e5             	mov    %rsp,%rbp
    c516:	48 83 ec 10          	sub    $0x10,%rsp
    c51a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c51e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c522:	48 89 c7             	mov    %rax,%rdi
    c525:	e8 aa ff ff ff       	call   c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    c52a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c52e:	be 28 00 00 00       	mov    $0x28,%esi
    c533:	48 89 c7             	mov    %rax,%rdi
    c536:	e8 f5 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c53b:	c9                   	leave
    c53c:	c3                   	ret

000000000000c53d <_ZThn8_N2vk25InitializationFailedErrorD0Ev>:
    c53d:	48 83 ef 08          	sub    $0x8,%rdi
    c541:	eb cf                	jmp    c512 <_ZN2vk25InitializationFailedErrorD0Ev>
    c543:	90                   	nop

000000000000c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>:
  class OutOfDeviceMemoryError : public SystemError
    c544:	55                   	push   %rbp
    c545:	48 89 e5             	mov    %rsp,%rbp
    c548:	48 83 ec 10          	sub    $0x10,%rsp
    c54c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c550:	48 8d 15 19 63 02 00 	lea    0x26319(%rip),%rdx        # 32870 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x10>
    c557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c55b:	48 89 10             	mov    %rdx,(%rax)
    c55e:	48 8d 15 33 63 02 00 	lea    0x26333(%rip),%rdx        # 32898 <_ZTVN2vk22OutOfDeviceMemoryErrorE+0x38>
    c565:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c569:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c56d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c571:	48 89 c7             	mov    %rax,%rdi
    c574:	e8 cd b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c579:	90                   	nop
    c57a:	c9                   	leave
    c57b:	c3                   	ret

000000000000c57c <_ZThn8_N2vk22OutOfDeviceMemoryErrorD1Ev>:
    c57c:	48 83 ef 08          	sub    $0x8,%rdi
    c580:	eb c2                	jmp    c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>

000000000000c582 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>:
    c582:	55                   	push   %rbp
    c583:	48 89 e5             	mov    %rsp,%rbp
    c586:	48 83 ec 10          	sub    $0x10,%rsp
    c58a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c58e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c592:	48 89 c7             	mov    %rax,%rdi
    c595:	e8 aa ff ff ff       	call   c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    c59a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c59e:	be 28 00 00 00       	mov    $0x28,%esi
    c5a3:	48 89 c7             	mov    %rax,%rdi
    c5a6:	e8 85 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c5ab:	c9                   	leave
    c5ac:	c3                   	ret

000000000000c5ad <_ZThn8_N2vk22OutOfDeviceMemoryErrorD0Ev>:
    c5ad:	48 83 ef 08          	sub    $0x8,%rdi
    c5b1:	eb cf                	jmp    c582 <_ZN2vk22OutOfDeviceMemoryErrorD0Ev>
    c5b3:	90                   	nop

000000000000c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>:
  class OutOfHostMemoryError : public SystemError
    c5b4:	55                   	push   %rbp
    c5b5:	48 89 e5             	mov    %rsp,%rbp
    c5b8:	48 83 ec 10          	sub    $0x10,%rsp
    c5bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5c0:	48 8d 15 f9 62 02 00 	lea    0x262f9(%rip),%rdx        # 328c0 <_ZTVN2vk20OutOfHostMemoryErrorE+0x10>
    c5c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5cb:	48 89 10             	mov    %rdx,(%rax)
    c5ce:	48 8d 15 13 63 02 00 	lea    0x26313(%rip),%rdx        # 328e8 <_ZTVN2vk20OutOfHostMemoryErrorE+0x38>
    c5d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5d9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c5dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c5e1:	48 89 c7             	mov    %rax,%rdi
    c5e4:	e8 5d b3 ff ff       	call   7946 <_ZN2vk11SystemErrorD1Ev>
    c5e9:	90                   	nop
    c5ea:	c9                   	leave
    c5eb:	c3                   	ret

000000000000c5ec <_ZThn8_N2vk20OutOfHostMemoryErrorD1Ev>:
    c5ec:	48 83 ef 08          	sub    $0x8,%rdi
    c5f0:	eb c2                	jmp    c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>

000000000000c5f2 <_ZN2vk20OutOfHostMemoryErrorD0Ev>:
    c5f2:	55                   	push   %rbp
    c5f3:	48 89 e5             	mov    %rsp,%rbp
    c5f6:	48 83 ec 10          	sub    $0x10,%rsp
    c5fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c5fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c602:	48 89 c7             	mov    %rax,%rdi
    c605:	e8 aa ff ff ff       	call   c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    c60a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c60e:	be 28 00 00 00       	mov    $0x28,%esi
    c613:	48 89 c7             	mov    %rax,%rdi
    c616:	e8 15 8c ff ff       	call   5230 <_ZdlPvm@plt>
    c61b:	c9                   	leave
    c61c:	c3                   	ret

000000000000c61d <_ZThn8_N2vk20OutOfHostMemoryErrorD0Ev>:
    c61d:	48 83 ef 08          	sub    $0x8,%rdi
    c621:	eb cf                	jmp    c5f2 <_ZN2vk20OutOfHostMemoryErrorD0Ev>
    c623:	90                   	nop

000000000000c624 <_ZN2vk17ErrorCategoryImplD1Ev>:
  class ErrorCategoryImpl : public std::error_category
    c624:	55                   	push   %rbp
    c625:	48 89 e5             	mov    %rsp,%rbp
    c628:	48 83 ec 10          	sub    $0x10,%rsp
    c62c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c630:	48 8d 15 19 64 02 00 	lea    0x26419(%rip),%rdx        # 32a50 <_ZTVN2vk17ErrorCategoryImplE+0x10>
    c637:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c63b:	48 89 10             	mov    %rdx,(%rax)
    c63e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c642:	48 89 c7             	mov    %rax,%rdi
    c645:	e8 46 8d ff ff       	call   5390 <_ZNSt3_V214error_categoryD2Ev@plt>
    c64a:	90                   	nop
    c64b:	c9                   	leave
    c64c:	c3                   	ret
    c64d:	90                   	nop

000000000000c64e <_ZN2vk17ErrorCategoryImplD0Ev>:
    c64e:	55                   	push   %rbp
    c64f:	48 89 e5             	mov    %rsp,%rbp
    c652:	48 83 ec 10          	sub    $0x10,%rsp
    c656:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    c65a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c65e:	48 89 c7             	mov    %rax,%rdi
    c661:	e8 be ff ff ff       	call   c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    c666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c66a:	be 08 00 00 00       	mov    $0x8,%esi
    c66f:	48 89 c7             	mov    %rax,%rdi
    c672:	e8 b9 8b ff ff       	call   5230 <_ZdlPvm@plt>
    c677:	c9                   	leave
    c678:	c3                   	ret

000000000000c679 <_ZN2vkL23getDispatchLoaderStaticEv>:
  {
    c679:	55                   	push   %rbp
    c67a:	48 89 e5             	mov    %rsp,%rbp
    return dls;
    c67d:	48 8d 05 9c 6b 02 00 	lea    0x26b9c(%rip),%rax        # 33220 <_ZZN2vkL23getDispatchLoaderStaticEvE3dls>
  }
    c684:	5d                   	pop    %rbp
    c685:	c3                   	ret

000000000000c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>:
    {
    c686:	55                   	push   %rbp
    c687:	48 89 e5             	mov    %rsp,%rbp
    c68a:	41 54                	push   %r12
    c68c:	53                   	push   %rbx
    c68d:	48 83 ec 30          	sub    $0x30,%rsp
    c691:	89 7d cc             	mov    %edi,-0x34(%rbp)
    c694:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      switch ( result )
    c698:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    c69c:	0f 89 28 07 00 00    	jns    cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6a2:	83 7d cc f3          	cmpl   $0xfffffff3,-0x34(%rbp)
    c6a6:	0f 8d 3d 01 00 00    	jge    c7e9 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x163>
    c6ac:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    c6b3:	0f 84 19 05 00 00    	je     cbd2 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x54c>
    c6b9:	81 7d cc 00 36 65 c4 	cmpl   $0xc4653600,-0x34(%rbp)
    c6c0:	0f 8f 04 07 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6c6:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    c6cd:	0f 84 37 05 00 00    	je     cc0a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x584>
    c6d3:	81 7d cc ff 35 65 c4 	cmpl   $0xc46535ff,-0x34(%rbp)
    c6da:	0f 8f ea 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6e0:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    c6e7:	0f 84 55 05 00 00    	je     cc42 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5bc>
    c6ed:	81 7d cc 14 32 65 c4 	cmpl   $0xc4653214,-0x34(%rbp)
    c6f4:	0f 8f d0 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c6fa:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    c701:	0f 84 73 05 00 00    	je     cc7a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x5f4>
    c707:	81 7d cc 47 2a 65 c4 	cmpl   $0xc4652a47,-0x34(%rbp)
    c70e:	0f 8f b6 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c714:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    c71b:	0f 84 91 05 00 00    	je     ccb2 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x62c>
    c721:	81 7d cc 07 0b 65 c4 	cmpl   $0xc4650b07,-0x34(%rbp)
    c728:	0f 8f 9c 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c72e:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    c735:	0f 84 af 05 00 00    	je     ccea <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x664>
    c73b:	81 7d cc 20 07 65 c4 	cmpl   $0xc4650720,-0x34(%rbp)
    c742:	0f 8f 82 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c748:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    c74f:	0f 84 9d 03 00 00    	je     caf2 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x46c>
    c755:	81 7d cc 78 28 64 c4 	cmpl   $0xc4642878,-0x34(%rbp)
    c75c:	0f 8f 68 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c762:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    c769:	0f 84 bb 03 00 00    	je     cb2a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4a4>
    c76f:	81 7d cc bd 1c 64 c4 	cmpl   $0xc4641cbd,-0x34(%rbp)
    c776:	0f 8f 4e 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c77c:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    c783:	0f 84 99 05 00 00    	je     cd22 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x69c>
    c789:	81 7d cc d0 cc 62 c4 	cmpl   $0xc462ccd0,-0x34(%rbp)
    c790:	0f 8f 34 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c796:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    c79d:	0f 84 bf 03 00 00    	je     cb62 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x4dc>
    c7a3:	81 7d cc 18 c1 62 c4 	cmpl   $0xc462c118,-0x34(%rbp)
    c7aa:	0f 8f 1a 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7b0:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    c7b7:	0f 84 9d 05 00 00    	je     cd5a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x6d4>
    c7bd:	81 7d cc 4f 8e 62 c4 	cmpl   $0xc4628e4f,-0x34(%rbp)
    c7c4:	0f 8f 00 06 00 00    	jg     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7ca:	81 7d cc b0 0d 60 c4 	cmpl   $0xc4600db0,-0x34(%rbp)
    c7d1:	0f 84 bb 05 00 00    	je     cd92 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x70c>
    c7d7:	81 7d cc 18 4a 61 c4 	cmpl   $0xc4614a18,-0x34(%rbp)
    c7de:	0f 84 b6 03 00 00    	je     cb9a <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x514>
    c7e4:	e9 e1 05 00 00       	jmp    cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
    c7ec:	83 c0 0d             	add    $0xd,%eax
    c7ef:	83 f8 0c             	cmp    $0xc,%eax
    c7f2:	0f 87 d2 05 00 00    	ja     cdca <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x744>
    c7f8:	89 c0                	mov    %eax,%eax
    c7fa:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    c801:	00 
    c802:	48 8d 05 6f 64 01 00 	lea    0x1646f(%rip),%rax        # 22c78 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    c809:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    c80c:	48 98                	cltq
    c80e:	48 8d 15 63 64 01 00 	lea    0x16463(%rip),%rdx        # 22c78 <_ZL44VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV+0x3a8>
    c815:	48 01 d0             	add    %rdx,%rax
    c818:	ff e0                	jmp    *%rax
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    c81a:	bf 28 00 00 00       	mov    $0x28,%edi
    c81f:	e8 ac 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c824:	48 89 c3             	mov    %rax,%rbx
    c827:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c82b:	48 89 c6             	mov    %rax,%rsi
    c82e:	48 89 df             	mov    %rbx,%rdi
    c831:	e8 90 b1 ff ff       	call   79c6 <_ZN2vk20OutOfHostMemoryErrorC1EPKc>
    c836:	48 8d 05 77 fd ff ff 	lea    -0x289(%rip),%rax        # c5b4 <_ZN2vk20OutOfHostMemoryErrorD1Ev>
    c83d:	48 89 c2             	mov    %rax,%rdx
    c840:	48 8d 05 a1 64 02 00 	lea    0x264a1(%rip),%rax        # 32ce8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c847:	48 89 c6             	mov    %rax,%rsi
    c84a:	48 89 df             	mov    %rbx,%rdi
    c84d:	e8 2e 8b ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    c852:	bf 28 00 00 00       	mov    $0x28,%edi
    c857:	e8 74 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c85c:	48 89 c3             	mov    %rax,%rbx
    c85f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c863:	48 89 c6             	mov    %rax,%rsi
    c866:	48 89 df             	mov    %rbx,%rdi
    c869:	e8 2a b2 ff ff       	call   7a98 <_ZN2vk22OutOfDeviceMemoryErrorC1EPKc>
    c86e:	48 8d 05 cf fc ff ff 	lea    -0x331(%rip),%rax        # c544 <_ZN2vk22OutOfDeviceMemoryErrorD1Ev>
    c875:	48 89 c2             	mov    %rax,%rdx
    c878:	48 8d 05 51 64 02 00 	lea    0x26451(%rip),%rax        # 32cd0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c87f:	48 89 c6             	mov    %rax,%rsi
    c882:	48 89 df             	mov    %rbx,%rdi
    c885:	e8 f6 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    c88a:	bf 28 00 00 00       	mov    $0x28,%edi
    c88f:	e8 3c 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c894:	48 89 c3             	mov    %rax,%rbx
    c897:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c89b:	48 89 c6             	mov    %rax,%rsi
    c89e:	48 89 df             	mov    %rbx,%rdi
    c8a1:	e8 c4 b2 ff ff       	call   7b6a <_ZN2vk25InitializationFailedErrorC1EPKc>
    c8a6:	48 8d 05 27 fc ff ff 	lea    -0x3d9(%rip),%rax        # c4d4 <_ZN2vk25InitializationFailedErrorD1Ev>
    c8ad:	48 89 c2             	mov    %rax,%rdx
    c8b0:	48 8d 05 01 64 02 00 	lea    0x26401(%rip),%rax        # 32cb8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c8b7:	48 89 c6             	mov    %rax,%rsi
    c8ba:	48 89 df             	mov    %rbx,%rdi
    c8bd:	e8 be 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    c8c2:	bf 28 00 00 00       	mov    $0x28,%edi
    c8c7:	e8 04 88 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c8cc:	48 89 c3             	mov    %rax,%rbx
    c8cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c8d3:	48 89 c6             	mov    %rax,%rsi
    c8d6:	48 89 df             	mov    %rbx,%rdi
    c8d9:	e8 5e b3 ff ff       	call   7c3c <_ZN2vk15DeviceLostErrorC1EPKc>
    c8de:	48 8d 05 7f fb ff ff 	lea    -0x481(%rip),%rax        # c464 <_ZN2vk15DeviceLostErrorD1Ev>
    c8e5:	48 89 c2             	mov    %rax,%rdx
    c8e8:	48 8d 05 b1 63 02 00 	lea    0x263b1(%rip),%rax        # 32ca0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c8ef:	48 89 c6             	mov    %rax,%rsi
    c8f2:	48 89 df             	mov    %rbx,%rdi
    c8f5:	e8 86 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    c8fa:	bf 28 00 00 00       	mov    $0x28,%edi
    c8ff:	e8 cc 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c904:	48 89 c3             	mov    %rax,%rbx
    c907:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c90b:	48 89 c6             	mov    %rax,%rsi
    c90e:	48 89 df             	mov    %rbx,%rdi
    c911:	e8 f8 b3 ff ff       	call   7d0e <_ZN2vk20MemoryMapFailedErrorC1EPKc>
    c916:	48 8d 05 d7 fa ff ff 	lea    -0x529(%rip),%rax        # c3f4 <_ZN2vk20MemoryMapFailedErrorD1Ev>
    c91d:	48 89 c2             	mov    %rax,%rdx
    c920:	48 8d 05 61 63 02 00 	lea    0x26361(%rip),%rax        # 32c88 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c927:	48 89 c6             	mov    %rax,%rsi
    c92a:	48 89 df             	mov    %rbx,%rdi
    c92d:	e8 4e 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    c932:	bf 28 00 00 00       	mov    $0x28,%edi
    c937:	e8 94 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c93c:	48 89 c3             	mov    %rax,%rbx
    c93f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c943:	48 89 c6             	mov    %rax,%rsi
    c946:	48 89 df             	mov    %rbx,%rdi
    c949:	e8 92 b4 ff ff       	call   7de0 <_ZN2vk20LayerNotPresentErrorC1EPKc>
    c94e:	48 8d 05 2f fa ff ff 	lea    -0x5d1(%rip),%rax        # c384 <_ZN2vk20LayerNotPresentErrorD1Ev>
    c955:	48 89 c2             	mov    %rax,%rdx
    c958:	48 8d 05 11 63 02 00 	lea    0x26311(%rip),%rax        # 32c70 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c95f:	48 89 c6             	mov    %rax,%rsi
    c962:	48 89 df             	mov    %rbx,%rdi
    c965:	e8 16 8a ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    c96a:	bf 28 00 00 00       	mov    $0x28,%edi
    c96f:	e8 5c 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c974:	48 89 c3             	mov    %rax,%rbx
    c977:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c97b:	48 89 c6             	mov    %rax,%rsi
    c97e:	48 89 df             	mov    %rbx,%rdi
    c981:	e8 2c b5 ff ff       	call   7eb2 <_ZN2vk24ExtensionNotPresentErrorC1EPKc>
    c986:	48 8d 05 87 f9 ff ff 	lea    -0x679(%rip),%rax        # c314 <_ZN2vk24ExtensionNotPresentErrorD1Ev>
    c98d:	48 89 c2             	mov    %rax,%rdx
    c990:	48 8d 05 c1 62 02 00 	lea    0x262c1(%rip),%rax        # 32c58 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c997:	48 89 c6             	mov    %rax,%rsi
    c99a:	48 89 df             	mov    %rbx,%rdi
    c99d:	e8 de 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    c9a2:	bf 28 00 00 00       	mov    $0x28,%edi
    c9a7:	e8 24 87 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c9ac:	48 89 c3             	mov    %rax,%rbx
    c9af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c9b3:	48 89 c6             	mov    %rax,%rsi
    c9b6:	48 89 df             	mov    %rbx,%rdi
    c9b9:	e8 c6 b5 ff ff       	call   7f84 <_ZN2vk22FeatureNotPresentErrorC1EPKc>
    c9be:	48 8d 05 df f8 ff ff 	lea    -0x721(%rip),%rax        # c2a4 <_ZN2vk22FeatureNotPresentErrorD1Ev>
    c9c5:	48 89 c2             	mov    %rax,%rdx
    c9c8:	48 8d 05 71 62 02 00 	lea    0x26271(%rip),%rax        # 32c40 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    c9cf:	48 89 c6             	mov    %rax,%rsi
    c9d2:	48 89 df             	mov    %rbx,%rdi
    c9d5:	e8 a6 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    c9da:	bf 28 00 00 00       	mov    $0x28,%edi
    c9df:	e8 ec 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    c9e4:	48 89 c3             	mov    %rax,%rbx
    c9e7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c9eb:	48 89 c6             	mov    %rax,%rsi
    c9ee:	48 89 df             	mov    %rbx,%rdi
    c9f1:	e8 60 b6 ff ff       	call   8056 <_ZN2vk23IncompatibleDriverErrorC1EPKc>
    c9f6:	48 8d 05 37 f8 ff ff 	lea    -0x7c9(%rip),%rax        # c234 <_ZN2vk23IncompatibleDriverErrorD1Ev>
    c9fd:	48 89 c2             	mov    %rax,%rdx
    ca00:	48 8d 05 21 62 02 00 	lea    0x26221(%rip),%rax        # 32c28 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ca07:	48 89 c6             	mov    %rax,%rsi
    ca0a:	48 89 df             	mov    %rbx,%rdi
    ca0d:	e8 6e 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    ca12:	bf 28 00 00 00       	mov    $0x28,%edi
    ca17:	e8 b4 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca1c:	48 89 c3             	mov    %rax,%rbx
    ca1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca23:	48 89 c6             	mov    %rax,%rsi
    ca26:	48 89 df             	mov    %rbx,%rdi
    ca29:	e8 fa b6 ff ff       	call   8128 <_ZN2vk19TooManyObjectsErrorC1EPKc>
    ca2e:	48 8d 05 8f f7 ff ff 	lea    -0x871(%rip),%rax        # c1c4 <_ZN2vk19TooManyObjectsErrorD1Ev>
    ca35:	48 89 c2             	mov    %rax,%rdx
    ca38:	48 8d 05 d1 61 02 00 	lea    0x261d1(%rip),%rax        # 32c10 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ca3f:	48 89 c6             	mov    %rax,%rsi
    ca42:	48 89 df             	mov    %rbx,%rdi
    ca45:	e8 36 89 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    ca4a:	bf 28 00 00 00       	mov    $0x28,%edi
    ca4f:	e8 7c 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca54:	48 89 c3             	mov    %rax,%rbx
    ca57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca5b:	48 89 c6             	mov    %rax,%rsi
    ca5e:	48 89 df             	mov    %rbx,%rdi
    ca61:	e8 94 b7 ff ff       	call   81fa <_ZN2vk23FormatNotSupportedErrorC1EPKc>
    ca66:	48 8d 05 e7 f6 ff ff 	lea    -0x919(%rip),%rax        # c154 <_ZN2vk23FormatNotSupportedErrorD1Ev>
    ca6d:	48 89 c2             	mov    %rax,%rdx
    ca70:	48 8d 05 81 61 02 00 	lea    0x26181(%rip),%rax        # 32bf8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ca77:	48 89 c6             	mov    %rax,%rsi
    ca7a:	48 89 df             	mov    %rbx,%rdi
    ca7d:	e8 fe 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    ca82:	bf 28 00 00 00       	mov    $0x28,%edi
    ca87:	e8 44 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ca8c:	48 89 c3             	mov    %rax,%rbx
    ca8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ca93:	48 89 c6             	mov    %rax,%rsi
    ca96:	48 89 df             	mov    %rbx,%rdi
    ca99:	e8 2e b8 ff ff       	call   82cc <_ZN2vk19FragmentedPoolErrorC1EPKc>
    ca9e:	48 8d 05 3f f6 ff ff 	lea    -0x9c1(%rip),%rax        # c0e4 <_ZN2vk19FragmentedPoolErrorD1Ev>
    caa5:	48 89 c2             	mov    %rax,%rdx
    caa8:	48 8d 05 31 61 02 00 	lea    0x26131(%rip),%rax        # 32be0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    caaf:	48 89 c6             	mov    %rax,%rsi
    cab2:	48 89 df             	mov    %rbx,%rdi
    cab5:	e8 c6 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    caba:	bf 28 00 00 00       	mov    $0x28,%edi
    cabf:	e8 0c 86 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cac4:	48 89 c3             	mov    %rax,%rbx
    cac7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cacb:	48 89 c6             	mov    %rax,%rsi
    cace:	48 89 df             	mov    %rbx,%rdi
    cad1:	e8 c8 b8 ff ff       	call   839e <_ZN2vk12UnknownErrorC1EPKc>
    cad6:	48 8d 05 97 f5 ff ff 	lea    -0xa69(%rip),%rax        # c074 <_ZN2vk12UnknownErrorD1Ev>
    cadd:	48 89 c2             	mov    %rax,%rdx
    cae0:	48 8d 05 e1 60 02 00 	lea    0x260e1(%rip),%rax        # 32bc8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cae7:	48 89 c6             	mov    %rax,%rsi
    caea:	48 89 df             	mov    %rbx,%rdi
    caed:	e8 8e 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    caf2:	bf 28 00 00 00       	mov    $0x28,%edi
    caf7:	e8 d4 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cafc:	48 89 c3             	mov    %rax,%rbx
    caff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb03:	48 89 c6             	mov    %rax,%rsi
    cb06:	48 89 df             	mov    %rbx,%rdi
    cb09:	e8 62 b9 ff ff       	call   8470 <_ZN2vk20OutOfPoolMemoryErrorC1EPKc>
    cb0e:	48 8d 05 ef f4 ff ff 	lea    -0xb11(%rip),%rax        # c004 <_ZN2vk20OutOfPoolMemoryErrorD1Ev>
    cb15:	48 89 c2             	mov    %rax,%rdx
    cb18:	48 8d 05 91 60 02 00 	lea    0x26091(%rip),%rax        # 32bb0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb1f:	48 89 c6             	mov    %rax,%rsi
    cb22:	48 89 df             	mov    %rbx,%rdi
    cb25:	e8 56 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    cb2a:	bf 28 00 00 00       	mov    $0x28,%edi
    cb2f:	e8 9c 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cb34:	48 89 c3             	mov    %rax,%rbx
    cb37:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb3b:	48 89 c6             	mov    %rax,%rsi
    cb3e:	48 89 df             	mov    %rbx,%rdi
    cb41:	e8 fc b9 ff ff       	call   8542 <_ZN2vk26InvalidExternalHandleErrorC1EPKc>
    cb46:	48 8d 05 47 f4 ff ff 	lea    -0xbb9(%rip),%rax        # bf94 <_ZN2vk26InvalidExternalHandleErrorD1Ev>
    cb4d:	48 89 c2             	mov    %rax,%rdx
    cb50:	48 8d 05 41 60 02 00 	lea    0x26041(%rip),%rax        # 32b98 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb57:	48 89 c6             	mov    %rax,%rsi
    cb5a:	48 89 df             	mov    %rbx,%rdi
    cb5d:	e8 1e 88 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    cb62:	bf 28 00 00 00       	mov    $0x28,%edi
    cb67:	e8 64 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cb6c:	48 89 c3             	mov    %rax,%rbx
    cb6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cb73:	48 89 c6             	mov    %rax,%rsi
    cb76:	48 89 df             	mov    %rbx,%rdi
    cb79:	e8 96 ba ff ff       	call   8614 <_ZN2vk18FragmentationErrorC1EPKc>
    cb7e:	48 8d 05 9f f3 ff ff 	lea    -0xc61(%rip),%rax        # bf24 <_ZN2vk18FragmentationErrorD1Ev>
    cb85:	48 89 c2             	mov    %rax,%rdx
    cb88:	48 8d 05 f1 5f 02 00 	lea    0x25ff1(%rip),%rax        # 32b80 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cb8f:	48 89 c6             	mov    %rax,%rsi
    cb92:	48 89 df             	mov    %rbx,%rdi
    cb95:	e8 e6 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    cb9a:	bf 28 00 00 00       	mov    $0x28,%edi
    cb9f:	e8 2c 85 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cba4:	48 89 c3             	mov    %rax,%rbx
    cba7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cbab:	48 89 c6             	mov    %rax,%rsi
    cbae:	48 89 df             	mov    %rbx,%rdi
    cbb1:	e8 30 bb ff ff       	call   86e6 <_ZN2vk32InvalidOpaqueCaptureAddressErrorC1EPKc>
    cbb6:	48 8d 05 f7 f2 ff ff 	lea    -0xd09(%rip),%rax        # beb4 <_ZN2vk32InvalidOpaqueCaptureAddressErrorD1Ev>
    cbbd:	48 89 c2             	mov    %rax,%rdx
    cbc0:	48 8d 05 a1 5f 02 00 	lea    0x25fa1(%rip),%rax        # 32b68 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cbc7:	48 89 c6             	mov    %rax,%rsi
    cbca:	48 89 df             	mov    %rbx,%rdi
    cbcd:	e8 ae 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    cbd2:	bf 28 00 00 00       	mov    $0x28,%edi
    cbd7:	e8 f4 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cbdc:	48 89 c3             	mov    %rax,%rbx
    cbdf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cbe3:	48 89 c6             	mov    %rax,%rsi
    cbe6:	48 89 df             	mov    %rbx,%rdi
    cbe9:	e8 ca bb ff ff       	call   87b8 <_ZN2vk19SurfaceLostKHRErrorC1EPKc>
    cbee:	48 8d 05 4f f2 ff ff 	lea    -0xdb1(%rip),%rax        # be44 <_ZN2vk19SurfaceLostKHRErrorD1Ev>
    cbf5:	48 89 c2             	mov    %rax,%rdx
    cbf8:	48 8d 05 51 5f 02 00 	lea    0x25f51(%rip),%rax        # 32b50 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cbff:	48 89 c6             	mov    %rax,%rsi
    cc02:	48 89 df             	mov    %rbx,%rdi
    cc05:	e8 76 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    cc0a:	bf 28 00 00 00       	mov    $0x28,%edi
    cc0f:	e8 bc 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc14:	48 89 c3             	mov    %rax,%rbx
    cc17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc1b:	48 89 c6             	mov    %rax,%rsi
    cc1e:	48 89 df             	mov    %rbx,%rdi
    cc21:	e8 64 bc ff ff       	call   888a <_ZN2vk25NativeWindowInUseKHRErrorC1EPKc>
    cc26:	48 8d 05 a7 f1 ff ff 	lea    -0xe59(%rip),%rax        # bdd4 <_ZN2vk25NativeWindowInUseKHRErrorD1Ev>
    cc2d:	48 89 c2             	mov    %rax,%rdx
    cc30:	48 8d 05 01 5f 02 00 	lea    0x25f01(%rip),%rax        # 32b38 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cc37:	48 89 c6             	mov    %rax,%rsi
    cc3a:	48 89 df             	mov    %rbx,%rdi
    cc3d:	e8 3e 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    cc42:	bf 28 00 00 00       	mov    $0x28,%edi
    cc47:	e8 84 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc4c:	48 89 c3             	mov    %rax,%rbx
    cc4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc53:	48 89 c6             	mov    %rax,%rsi
    cc56:	48 89 df             	mov    %rbx,%rdi
    cc59:	e8 fe bc ff ff       	call   895c <_ZN2vk17OutOfDateKHRErrorC1EPKc>
    cc5e:	48 8d 05 ff f0 ff ff 	lea    -0xf01(%rip),%rax        # bd64 <_ZN2vk17OutOfDateKHRErrorD1Ev>
    cc65:	48 89 c2             	mov    %rax,%rdx
    cc68:	48 8d 05 b1 5e 02 00 	lea    0x25eb1(%rip),%rax        # 32b20 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cc6f:	48 89 c6             	mov    %rax,%rsi
    cc72:	48 89 df             	mov    %rbx,%rdi
    cc75:	e8 06 87 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    cc7a:	bf 28 00 00 00       	mov    $0x28,%edi
    cc7f:	e8 4c 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cc84:	48 89 c3             	mov    %rax,%rbx
    cc87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cc8b:	48 89 c6             	mov    %rax,%rsi
    cc8e:	48 89 df             	mov    %rbx,%rdi
    cc91:	e8 98 bd ff ff       	call   8a2e <_ZN2vk27IncompatibleDisplayKHRErrorC1EPKc>
    cc96:	48 8d 05 57 f0 ff ff 	lea    -0xfa9(%rip),%rax        # bcf4 <_ZN2vk27IncompatibleDisplayKHRErrorD1Ev>
    cc9d:	48 89 c2             	mov    %rax,%rdx
    cca0:	48 8d 05 61 5e 02 00 	lea    0x25e61(%rip),%rax        # 32b08 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cca7:	48 89 c6             	mov    %rax,%rsi
    ccaa:	48 89 df             	mov    %rbx,%rdi
    ccad:	e8 ce 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    ccb2:	bf 28 00 00 00       	mov    $0x28,%edi
    ccb7:	e8 14 84 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ccbc:	48 89 c3             	mov    %rax,%rbx
    ccbf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ccc3:	48 89 c6             	mov    %rax,%rsi
    ccc6:	48 89 df             	mov    %rbx,%rdi
    ccc9:	e8 32 be ff ff       	call   8b00 <_ZN2vk24ValidationFailedEXTErrorC1EPKc>
    ccce:	48 8d 05 af ef ff ff 	lea    -0x1051(%rip),%rax        # bc84 <_ZN2vk24ValidationFailedEXTErrorD1Ev>
    ccd5:	48 89 c2             	mov    %rax,%rdx
    ccd8:	48 8d 05 11 5e 02 00 	lea    0x25e11(%rip),%rax        # 32af0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    ccdf:	48 89 c6             	mov    %rax,%rsi
    cce2:	48 89 df             	mov    %rbx,%rdi
    cce5:	e8 96 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    ccea:	bf 28 00 00 00       	mov    $0x28,%edi
    ccef:	e8 dc 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ccf4:	48 89 c3             	mov    %rax,%rbx
    ccf7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ccfb:	48 89 c6             	mov    %rax,%rsi
    ccfe:	48 89 df             	mov    %rbx,%rdi
    cd01:	e8 cc be ff ff       	call   8bd2 <_ZN2vk20InvalidShaderNVErrorC1EPKc>
    cd06:	48 8d 05 07 ef ff ff 	lea    -0x10f9(%rip),%rax        # bc14 <_ZN2vk20InvalidShaderNVErrorD1Ev>
    cd0d:	48 89 c2             	mov    %rax,%rdx
    cd10:	48 8d 05 c1 5d 02 00 	lea    0x25dc1(%rip),%rax        # 32ad8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd17:	48 89 c6             	mov    %rax,%rsi
    cd1a:	48 89 df             	mov    %rbx,%rdi
    cd1d:	e8 5e 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    cd22:	bf 28 00 00 00       	mov    $0x28,%edi
    cd27:	e8 a4 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd2c:	48 89 c3             	mov    %rax,%rbx
    cd2f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cd33:	48 89 c6             	mov    %rax,%rsi
    cd36:	48 89 df             	mov    %rbx,%rdi
    cd39:	e8 66 bf ff ff       	call   8ca4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorC1EPKc>
    cd3e:	48 8d 05 5f ee ff ff 	lea    -0x11a1(%rip),%rax        # bba4 <_ZN2vk43InvalidDrmFormatModifierPlaneLayoutEXTErrorD1Ev>
    cd45:	48 89 c2             	mov    %rax,%rdx
    cd48:	48 8d 05 71 5d 02 00 	lea    0x25d71(%rip),%rax        # 32ac0 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd4f:	48 89 c6             	mov    %rax,%rsi
    cd52:	48 89 df             	mov    %rbx,%rdi
    cd55:	e8 26 86 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    cd5a:	bf 28 00 00 00       	mov    $0x28,%edi
    cd5f:	e8 6c 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd64:	48 89 c3             	mov    %rax,%rbx
    cd67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cd6b:	48 89 c6             	mov    %rax,%rsi
    cd6e:	48 89 df             	mov    %rbx,%rdi
    cd71:	e8 00 c0 ff ff       	call   8d76 <_ZN2vk20NotPermittedKHRErrorC1EPKc>
    cd76:	48 8d 05 b7 ed ff ff 	lea    -0x1249(%rip),%rax        # bb34 <_ZN2vk20NotPermittedKHRErrorD1Ev>
    cd7d:	48 89 c2             	mov    %rax,%rdx
    cd80:	48 8d 05 21 5d 02 00 	lea    0x25d21(%rip),%rax        # 32aa8 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cd87:	48 89 c6             	mov    %rax,%rsi
    cd8a:	48 89 df             	mov    %rbx,%rdi
    cd8d:	e8 ee 85 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    cd92:	bf 28 00 00 00       	mov    $0x28,%edi
    cd97:	e8 34 83 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cd9c:	48 89 c3             	mov    %rax,%rbx
    cd9f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    cda3:	48 89 c6             	mov    %rax,%rsi
    cda6:	48 89 df             	mov    %rbx,%rdi
    cda9:	e8 9a c0 ff ff       	call   8e48 <_ZN2vk28CompressionExhaustedEXTErrorC1EPKc>
    cdae:	48 8d 05 0f ed ff ff 	lea    -0x12f1(%rip),%rax        # bac4 <_ZN2vk28CompressionExhaustedEXTErrorD1Ev>
    cdb5:	48 89 c2             	mov    %rax,%rdx
    cdb8:	48 8d 05 d1 5c 02 00 	lea    0x25cd1(%rip),%rax        # 32a90 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
    cdbf:	48 89 c6             	mov    %rax,%rsi
    cdc2:	48 89 df             	mov    %rbx,%rdi
    cdc5:	e8 b6 85 ff ff       	call   5380 <__cxa_throw@plt>
        default: throw SystemError( make_error_code( result ) );
    cdca:	bf 28 00 00 00       	mov    $0x28,%edi
    cdcf:	e8 fc 82 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    cdd4:	48 89 c3             	mov    %rax,%rbx
    cdd7:	8b 45 cc             	mov    -0x34(%rbp),%eax
    cdda:	89 45 ec             	mov    %eax,-0x14(%rbp)
    static ErrorCategoryImpl instance;
    cddd:	0f b6 05 74 65 02 00 	movzbl 0x26574(%rip),%eax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    cde4:	84 c0                	test   %al,%al
    cde6:	0f 94 c0             	sete   %al
    cde9:	84 c0                	test   %al,%al
    cdeb:	74 4a                	je     ce37 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    cded:	48 8d 05 64 65 02 00 	lea    0x26564(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    cdf4:	48 89 c7             	mov    %rax,%rdi
    cdf7:	e8 c4 85 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    cdfc:	85 c0                	test   %eax,%eax
    cdfe:	0f 95 c0             	setne  %al
    ce01:	84 c0                	test   %al,%al
    ce03:	74 32                	je     ce37 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc+0x7b1>
    ce05:	48 8d 05 ec 63 02 00 	lea    0x263ec(%rip),%rax        # 331f8 <__dso_handle>
    ce0c:	48 89 c2             	mov    %rax,%rdx
    ce0f:	48 8d 05 ea 63 02 00 	lea    0x263ea(%rip),%rax        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    ce16:	48 89 c6             	mov    %rax,%rsi
    ce19:	48 8d 05 04 f8 ff ff 	lea    -0x7fc(%rip),%rax        # c624 <_ZN2vk17ErrorCategoryImplD1Ev>
    ce20:	48 89 c7             	mov    %rax,%rdi
    ce23:	e8 a8 83 ff ff       	call   51d0 <__cxa_atexit@plt>
    ce28:	48 8d 05 29 65 02 00 	lea    0x26529(%rip),%rax        # 33358 <_ZGVZN2vk13errorCategoryEvE8instance>
    ce2f:	48 89 c7             	mov    %rax,%rdi
    ce32:	e8 c9 82 ff ff       	call   5100 <__cxa_guard_release@plt>
    return instance;
    ce37:	48 8d 15 c2 63 02 00 	lea    0x263c2(%rip),%rdx        # 33200 <_ZZN2vk13errorCategoryEvE8instance>
    return std::error_code( static_cast<int>( e ), errorCategory() );
    ce3e:	8b 4d ec             	mov    -0x14(%rbp),%ecx
    ce41:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ce45:	89 ce                	mov    %ecx,%esi
    ce47:	48 89 c7             	mov    %rax,%rdi
    ce4a:	e8 b9 94 ff ff       	call   6308 <_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE>
    ce4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ce53:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        default: throw SystemError( make_error_code( result ) );
    ce57:	48 89 c6             	mov    %rax,%rsi
    ce5a:	48 89 d7             	mov    %rdx,%rdi
    ce5d:	89 f1                	mov    %esi,%ecx
    ce5f:	48 89 d0             	mov    %rdx,%rax
    ce62:	89 ce                	mov    %ecx,%esi
    ce64:	48 89 c2             	mov    %rax,%rdx
    ce67:	48 89 df             	mov    %rbx,%rdi
    ce6a:	e8 a1 a9 ff ff       	call   7810 <_ZN2vk11SystemErrorC1ESt10error_code>
    ce6f:	48 8d 05 d0 aa ff ff 	lea    -0x5530(%rip),%rax        # 7946 <_ZN2vk11SystemErrorD1Ev>
    ce76:	48 89 c2             	mov    %rax,%rdx
    ce79:	48 8d 05 80 5e 02 00 	lea    0x25e80(%rip),%rax        # 32d00 <_ZTVN10__cxxabiv121__vmi_class_type_infoE@CXXABI_1.3>
    ce80:	48 89 c6             	mov    %rax,%rsi
    ce83:	48 89 df             	mov    %rbx,%rdi
    ce86:	e8 f5 84 ff ff       	call   5380 <__cxa_throw@plt>
        case Result::eErrorOutOfHostMemory: throw OutOfHostMemoryError( message );
    ce8b:	49 89 c4             	mov    %rax,%r12
    ce8e:	48 89 df             	mov    %rbx,%rdi
    ce91:	e8 ba 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ce96:	4c 89 e0             	mov    %r12,%rax
    ce99:	48 89 c7             	mov    %rax,%rdi
    ce9c:	e8 ff 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDeviceMemory: throw OutOfDeviceMemoryError( message );
    cea1:	49 89 c4             	mov    %rax,%r12
    cea4:	48 89 df             	mov    %rbx,%rdi
    cea7:	e8 a4 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ceac:	4c 89 e0             	mov    %r12,%rax
    ceaf:	48 89 c7             	mov    %rax,%rdi
    ceb2:	e8 e9 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInitializationFailed: throw InitializationFailedError( message );
    ceb7:	49 89 c4             	mov    %rax,%r12
    ceba:	48 89 df             	mov    %rbx,%rdi
    cebd:	e8 8e 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cec2:	4c 89 e0             	mov    %r12,%rax
    cec5:	48 89 c7             	mov    %rax,%rdi
    cec8:	e8 d3 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorDeviceLost: throw DeviceLostError( message );
    cecd:	49 89 c4             	mov    %rax,%r12
    ced0:	48 89 df             	mov    %rbx,%rdi
    ced3:	e8 78 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ced8:	4c 89 e0             	mov    %r12,%rax
    cedb:	48 89 c7             	mov    %rax,%rdi
    cede:	e8 bd 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorMemoryMapFailed: throw MemoryMapFailedError( message );
    cee3:	49 89 c4             	mov    %rax,%r12
    cee6:	48 89 df             	mov    %rbx,%rdi
    cee9:	e8 62 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    ceee:	4c 89 e0             	mov    %r12,%rax
    cef1:	48 89 c7             	mov    %rax,%rdi
    cef4:	e8 a7 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorLayerNotPresent: throw LayerNotPresentError( message );
    cef9:	49 89 c4             	mov    %rax,%r12
    cefc:	48 89 df             	mov    %rbx,%rdi
    ceff:	e8 4c 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf04:	4c 89 e0             	mov    %r12,%rax
    cf07:	48 89 c7             	mov    %rax,%rdi
    cf0a:	e8 91 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorExtensionNotPresent: throw ExtensionNotPresentError( message );
    cf0f:	49 89 c4             	mov    %rax,%r12
    cf12:	48 89 df             	mov    %rbx,%rdi
    cf15:	e8 36 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf1a:	4c 89 e0             	mov    %r12,%rax
    cf1d:	48 89 c7             	mov    %rax,%rdi
    cf20:	e8 7b 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFeatureNotPresent: throw FeatureNotPresentError( message );
    cf25:	49 89 c4             	mov    %rax,%r12
    cf28:	48 89 df             	mov    %rbx,%rdi
    cf2b:	e8 20 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf30:	4c 89 e0             	mov    %r12,%rax
    cf33:	48 89 c7             	mov    %rax,%rdi
    cf36:	e8 65 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDriver: throw IncompatibleDriverError( message );
    cf3b:	49 89 c4             	mov    %rax,%r12
    cf3e:	48 89 df             	mov    %rbx,%rdi
    cf41:	e8 0a 82 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf46:	4c 89 e0             	mov    %r12,%rax
    cf49:	48 89 c7             	mov    %rax,%rdi
    cf4c:	e8 4f 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorTooManyObjects: throw TooManyObjectsError( message );
    cf51:	49 89 c4             	mov    %rax,%r12
    cf54:	48 89 df             	mov    %rbx,%rdi
    cf57:	e8 f4 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf5c:	4c 89 e0             	mov    %r12,%rax
    cf5f:	48 89 c7             	mov    %rax,%rdi
    cf62:	e8 39 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFormatNotSupported: throw FormatNotSupportedError( message );
    cf67:	49 89 c4             	mov    %rax,%r12
    cf6a:	48 89 df             	mov    %rbx,%rdi
    cf6d:	e8 de 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf72:	4c 89 e0             	mov    %r12,%rax
    cf75:	48 89 c7             	mov    %rax,%rdi
    cf78:	e8 23 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentedPool: throw FragmentedPoolError( message );
    cf7d:	49 89 c4             	mov    %rax,%r12
    cf80:	48 89 df             	mov    %rbx,%rdi
    cf83:	e8 c8 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf88:	4c 89 e0             	mov    %r12,%rax
    cf8b:	48 89 c7             	mov    %rax,%rdi
    cf8e:	e8 0d 84 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorUnknown: throw UnknownError( message );
    cf93:	49 89 c4             	mov    %rax,%r12
    cf96:	48 89 df             	mov    %rbx,%rdi
    cf99:	e8 b2 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cf9e:	4c 89 e0             	mov    %r12,%rax
    cfa1:	48 89 c7             	mov    %rax,%rdi
    cfa4:	e8 f7 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfPoolMemory: throw OutOfPoolMemoryError( message );
    cfa9:	49 89 c4             	mov    %rax,%r12
    cfac:	48 89 df             	mov    %rbx,%rdi
    cfaf:	e8 9c 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfb4:	4c 89 e0             	mov    %r12,%rax
    cfb7:	48 89 c7             	mov    %rax,%rdi
    cfba:	e8 e1 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidExternalHandle: throw InvalidExternalHandleError( message );
    cfbf:	49 89 c4             	mov    %rax,%r12
    cfc2:	48 89 df             	mov    %rbx,%rdi
    cfc5:	e8 86 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfca:	4c 89 e0             	mov    %r12,%rax
    cfcd:	48 89 c7             	mov    %rax,%rdi
    cfd0:	e8 cb 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorFragmentation: throw FragmentationError( message );
    cfd5:	49 89 c4             	mov    %rax,%r12
    cfd8:	48 89 df             	mov    %rbx,%rdi
    cfdb:	e8 70 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cfe0:	4c 89 e0             	mov    %r12,%rax
    cfe3:	48 89 c7             	mov    %rax,%rdi
    cfe6:	e8 b5 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidOpaqueCaptureAddress: throw InvalidOpaqueCaptureAddressError( message );
    cfeb:	49 89 c4             	mov    %rax,%r12
    cfee:	48 89 df             	mov    %rbx,%rdi
    cff1:	e8 5a 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    cff6:	4c 89 e0             	mov    %r12,%rax
    cff9:	48 89 c7             	mov    %rax,%rdi
    cffc:	e8 9f 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorSurfaceLostKHR: throw SurfaceLostKHRError( message );
    d001:	49 89 c4             	mov    %rax,%r12
    d004:	48 89 df             	mov    %rbx,%rdi
    d007:	e8 44 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d00c:	4c 89 e0             	mov    %r12,%rax
    d00f:	48 89 c7             	mov    %rax,%rdi
    d012:	e8 89 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNativeWindowInUseKHR: throw NativeWindowInUseKHRError( message );
    d017:	49 89 c4             	mov    %rax,%r12
    d01a:	48 89 df             	mov    %rbx,%rdi
    d01d:	e8 2e 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d022:	4c 89 e0             	mov    %r12,%rax
    d025:	48 89 c7             	mov    %rax,%rdi
    d028:	e8 73 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorOutOfDateKHR: throw OutOfDateKHRError( message );
    d02d:	49 89 c4             	mov    %rax,%r12
    d030:	48 89 df             	mov    %rbx,%rdi
    d033:	e8 18 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d038:	4c 89 e0             	mov    %r12,%rax
    d03b:	48 89 c7             	mov    %rax,%rdi
    d03e:	e8 5d 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorIncompatibleDisplayKHR: throw IncompatibleDisplayKHRError( message );
    d043:	49 89 c4             	mov    %rax,%r12
    d046:	48 89 df             	mov    %rbx,%rdi
    d049:	e8 02 81 ff ff       	call   5150 <__cxa_free_exception@plt>
    d04e:	4c 89 e0             	mov    %r12,%rax
    d051:	48 89 c7             	mov    %rax,%rdi
    d054:	e8 47 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorValidationFailedEXT: throw ValidationFailedEXTError( message );
    d059:	49 89 c4             	mov    %rax,%r12
    d05c:	48 89 df             	mov    %rbx,%rdi
    d05f:	e8 ec 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d064:	4c 89 e0             	mov    %r12,%rax
    d067:	48 89 c7             	mov    %rax,%rdi
    d06a:	e8 31 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidShaderNV: throw InvalidShaderNVError( message );
    d06f:	49 89 c4             	mov    %rax,%r12
    d072:	48 89 df             	mov    %rbx,%rdi
    d075:	e8 d6 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d07a:	4c 89 e0             	mov    %r12,%rax
    d07d:	48 89 c7             	mov    %rax,%rdi
    d080:	e8 1b 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorInvalidDrmFormatModifierPlaneLayoutEXT: throw InvalidDrmFormatModifierPlaneLayoutEXTError( message );
    d085:	49 89 c4             	mov    %rax,%r12
    d088:	48 89 df             	mov    %rbx,%rdi
    d08b:	e8 c0 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d090:	4c 89 e0             	mov    %r12,%rax
    d093:	48 89 c7             	mov    %rax,%rdi
    d096:	e8 05 83 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorNotPermittedKHR: throw NotPermittedKHRError( message );
    d09b:	49 89 c4             	mov    %rax,%r12
    d09e:	48 89 df             	mov    %rbx,%rdi
    d0a1:	e8 aa 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d0a6:	4c 89 e0             	mov    %r12,%rax
    d0a9:	48 89 c7             	mov    %rax,%rdi
    d0ac:	e8 ef 82 ff ff       	call   53a0 <_Unwind_Resume@plt>
        case Result::eErrorCompressionExhaustedEXT: throw CompressionExhaustedEXTError( message );
    d0b1:	49 89 c4             	mov    %rax,%r12
    d0b4:	48 89 df             	mov    %rbx,%rdi
    d0b7:	e8 94 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d0bc:	4c 89 e0             	mov    %r12,%rax
    d0bf:	48 89 c7             	mov    %rax,%rdi
    d0c2:	e8 d9 82 ff ff       	call   53a0 <_Unwind_Resume@plt>
        default: throw SystemError( make_error_code( result ) );
    d0c7:	49 89 c4             	mov    %rax,%r12
    d0ca:	48 89 df             	mov    %rbx,%rdi
    d0cd:	e8 7e 80 ff ff       	call   5150 <__cxa_free_exception@plt>
    d0d2:	4c 89 e0             	mov    %r12,%rax
    d0d5:	48 89 c7             	mov    %rax,%rdi
    d0d8:	e8 c3 82 ff ff       	call   53a0 <_Unwind_Resume@plt>

000000000000d0dd <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:

VKAPI_ATTR VkBool32 VKAPI_CALL
debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
              [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
              [[maybe_unused]] void *pUserData) {
    d0dd:	55                   	push   %rbp
    d0de:	48 89 e5             	mov    %rsp,%rbp
    d0e1:	48 83 ec 20          	sub    $0x20,%rsp
    d0e5:	89 7d fc             	mov    %edi,-0x4(%rbp)
    d0e8:	89 75 f8             	mov    %esi,-0x8(%rbp)
    d0eb:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    d0ef:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  if (messageSeverity > VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) {
    d0f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    d0f6:	83 f8 01             	cmp    $0x1,%eax
    d0f9:	7e 3c                	jle    d137 <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv+0x5a>
    std::cerr << '\n' << pCallbackData->pMessage << std::endl;
    d0fb:	be 0a 00 00 00       	mov    $0xa,%esi
    d100:	48 8d 05 39 61 02 00 	lea    0x26139(%rip),%rax        # 33240 <_ZSt4cerr@GLIBCXX_3.4>
    d107:	48 89 c7             	mov    %rax,%rdi
    d10a:	e8 91 81 ff ff       	call   52a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
    d10f:	48 89 c2             	mov    %rax,%rdx
    d112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d116:	48 8b 40 28          	mov    0x28(%rax),%rax
    d11a:	48 89 c6             	mov    %rax,%rsi
    d11d:	48 89 d7             	mov    %rdx,%rdi
    d120:	e8 eb 80 ff ff       	call   5210 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    d125:	48 8b 15 74 5e 02 00 	mov    0x25e74(%rip),%rdx        # 32fa0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
    d12c:	48 89 d6             	mov    %rdx,%rsi
    d12f:	48 89 c7             	mov    %rax,%rdi
    d132:	e8 29 81 ff ff       	call   5260 <_ZNSolsEPFRSoS_E@plt>
  }
  return VK_FALSE;
    d137:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d13c:	c9                   	leave
    d13d:	c3                   	ret

000000000000d13e <_ZN4rtvc24validationLayerSupportedEv>:

bool validationLayerSupported() {
    d13e:	55                   	push   %rbp
    d13f:	48 89 e5             	mov    %rsp,%rbp
    d142:	41 54                	push   %r12
    d144:	53                   	push   %rbx
    d145:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  auto supportedLayers = vk::enumerateInstanceLayerProperties();
    d149:	e8 2b f5 ff ff       	call   c679 <_ZN2vkL23getDispatchLoaderStaticEv>
    d14e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    d152:	48 8d 5d b0          	lea    -0x50(%rbp),%rbx
#ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE
  template <typename LayerPropertiesAllocator, typename Dispatch>
  VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE typename ResultValueType<std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator>>::type
                       enumerateInstanceLayerProperties( Dispatch const & d )
  {
    VULKAN_HPP_ASSERT( d.getVkHeaderVersion() == VK_HEADER_VERSION );
    d156:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d15a:	48 89 c7             	mov    %rax,%rdi
    d15d:	e8 f0 93 ff ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
    d162:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
    d168:	74 28                	je     d192 <_ZN4rtvc24validationLayerSupportedEv+0x54>
    d16a:	48 8d 05 cf 9b 01 00 	lea    0x19bcf(%rip),%rax        # 26d40 <_ZNSt8__detailL19__atomic_spin_countE+0x4084>
    d171:	48 89 c1             	mov    %rax,%rcx
    d174:	ba 68 02 00 00       	mov    $0x268,%edx
    d179:	48 8d 05 38 9d 01 00 	lea    0x19d38(%rip),%rax        # 26eb8 <_ZNSt8__detailL19__atomic_spin_countE+0x41fc>
    d180:	48 89 c6             	mov    %rax,%rsi
    d183:	48 8d 05 56 9d 01 00 	lea    0x19d56(%rip),%rax        # 26ee0 <_ZNSt8__detailL19__atomic_spin_countE+0x4224>
    d18a:	48 89 c7             	mov    %rax,%rdi
    d18d:	e8 7e 7f ff ff       	call   5110 <__assert_fail@plt>

    std::vector<VULKAN_HPP_NAMESPACE::LayerProperties, LayerPropertiesAllocator> properties;
    d192:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d196:	0f 29 45 90          	movaps %xmm0,-0x70(%rbp)
    d19a:	66 0f d6 45 a0       	movq   %xmm0,-0x60(%rbp)
    uint32_t                                                                     propertyCount;
    VkResult                                                                     result;
    do
    {
      result = d.vkEnumerateInstanceLayerProperties( &propertyCount, nullptr );
    d19f:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
    d1a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1a7:	ba 00 00 00 00       	mov    $0x0,%edx
    d1ac:	48 89 ce             	mov    %rcx,%rsi
    d1af:	48 89 c7             	mov    %rax,%rdi
    d1b2:	e8 89 1e 00 00       	call   f040 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
    d1b7:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      if ( ( result == VK_SUCCESS ) && propertyCount )
    d1ba:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    d1be:	75 40                	jne    d200 <_ZN4rtvc24validationLayerSupportedEv+0xc2>
    d1c0:	8b 45 8c             	mov    -0x74(%rbp),%eax
    d1c3:	85 c0                	test   %eax,%eax
    d1c5:	74 39                	je     d200 <_ZN4rtvc24validationLayerSupportedEv+0xc2>
      {
        properties.resize( propertyCount );
    d1c7:	8b 45 8c             	mov    -0x74(%rbp),%eax
    d1ca:	89 c2                	mov    %eax,%edx
    d1cc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d1d0:	48 89 d6             	mov    %rdx,%rsi
    d1d3:	48 89 c7             	mov    %rax,%rdi
    d1d6:	e8 91 bf 00 00       	call   1916c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
        result = d.vkEnumerateInstanceLayerProperties( &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
    d1db:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d1df:	48 89 c7             	mov    %rax,%rdi
    d1e2:	e8 17 c0 00 00       	call   191fe <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
    d1e7:	48 89 c2             	mov    %rax,%rdx
    d1ea:	48 8d 4d 8c          	lea    -0x74(%rbp),%rcx
    d1ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1f2:	48 89 ce             	mov    %rcx,%rsi
    d1f5:	48 89 c7             	mov    %rax,%rdi
    d1f8:	e8 43 1e 00 00       	call   f040 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>
    d1fd:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      }
    } while ( result == VK_INCOMPLETE );
    d200:	83 7d d4 05          	cmpl   $0x5,-0x2c(%rbp)
    d204:	74 99                	je     d19f <_ZN4rtvc24validationLayerSupportedEv+0x61>
    d206:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    d209:	89 45 d0             	mov    %eax,-0x30(%rbp)
    d20c:	48 8d 05 fd 9c 01 00 	lea    0x19cfd(%rip),%rax        # 26f10 <_ZNSt8__detailL19__atomic_spin_countE+0x4254>
    d213:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if ( result != Result::eSuccess )
    d217:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
    d21b:	74 11                	je     d22e <_ZN4rtvc24validationLayerSupportedEv+0xf0>
      throwResultException( result, message );
    d21d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    d221:	8b 45 d0             	mov    -0x30(%rbp),%eax
    d224:	48 89 d6             	mov    %rdx,%rsi
    d227:	89 c7                	mov    %eax,%edi
    d229:	e8 58 f4 ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    d22e:	90                   	nop
    resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::enumerateInstanceLayerProperties" );
    VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    d22f:	8b 45 8c             	mov    -0x74(%rbp),%eax
    d232:	41 89 c4             	mov    %eax,%r12d
    d235:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d239:	48 89 c7             	mov    %rax,%rdi
    d23c:	e8 e1 bf 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    d241:	4c 39 e0             	cmp    %r12,%rax
    d244:	73 28                	jae    d26e <_ZN4rtvc24validationLayerSupportedEv+0x130>
    d246:	48 8d 05 f3 9a 01 00 	lea    0x19af3(%rip),%rax        # 26d40 <_ZNSt8__detailL19__atomic_spin_countE+0x4084>
    d24d:	48 89 c1             	mov    %rax,%rcx
    d250:	ba 77 02 00 00       	mov    $0x277,%edx
    d255:	48 8d 05 5c 9c 01 00 	lea    0x19c5c(%rip),%rax        # 26eb8 <_ZNSt8__detailL19__atomic_spin_countE+0x41fc>
    d25c:	48 89 c6             	mov    %rax,%rsi
    d25f:	48 8d 05 d2 9c 01 00 	lea    0x19cd2(%rip),%rax        # 26f38 <_ZNSt8__detailL19__atomic_spin_countE+0x427c>
    d266:	48 89 c7             	mov    %rax,%rdi
    d269:	e8 a2 7e ff ff       	call   5110 <__assert_fail@plt>
    if ( propertyCount < properties.size() )
    d26e:	8b 45 8c             	mov    -0x74(%rbp),%eax
    d271:	41 89 c4             	mov    %eax,%r12d
    d274:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d278:	48 89 c7             	mov    %rax,%rdi
    d27b:	e8 a2 bf 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    d280:	49 39 c4             	cmp    %rax,%r12
    d283:	0f 92 c0             	setb   %al
    d286:	84 c0                	test   %al,%al
    d288:	74 14                	je     d29e <_ZN4rtvc24validationLayerSupportedEv+0x160>
    {
      properties.resize( propertyCount );
    d28a:	8b 45 8c             	mov    -0x74(%rbp),%eax
    d28d:	89 c2                	mov    %eax,%edx
    d28f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d293:	48 89 d6             	mov    %rdx,%rsi
    d296:	48 89 c7             	mov    %rax,%rdi
    d299:	e8 ce be 00 00       	call   1916c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
    d29e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    d2a1:	89 45 88             	mov    %eax,-0x78(%rbp)
    ignore( result );
    d2a4:	48 8d 45 88          	lea    -0x78(%rbp),%rax
    d2a8:	48 89 c7             	mov    %rax,%rdi
    d2ab:	e8 b1 b4 00 00       	call   18761 <_ZN2vk6ignoreINS_6ResultEEEvRKT_>
    return data;
    d2b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d2b4:	48 89 c6             	mov    %rax,%rsi
    d2b7:	48 89 df             	mov    %rbx,%rdi
    d2ba:	e8 39 ec 00 00       	call   1bef8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>
    d2bf:	90                   	nop
    }
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
  }
    d2c0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d2c4:	48 89 c7             	mov    %rax,%rdi
    d2c7:	e8 5c be 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    return createResultValueType( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), properties );
    d2cc:	90                   	nop
  for (const auto &supportedLayer : supportedLayers) {
    d2cd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d2d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d2d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2d9:	48 89 c7             	mov    %rax,%rdi
    d2dc:	e8 9b bf 00 00       	call   1927c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
    d2e1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    d2e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2e9:	48 89 c7             	mov    %rax,%rdi
    d2ec:	e8 b1 bf 00 00       	call   192a2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
    d2f1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    d2f8:	eb 66                	jmp    d360 <_ZN4rtvc24validationLayerSupportedEv+0x222>
  }
    d2fa:	48 89 c3             	mov    %rax,%rbx
    d2fd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    d301:	48 89 c7             	mov    %rax,%rdi
    d304:	e8 1f be 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    d309:	48 89 d8             	mov    %rbx,%rax
    d30c:	48 89 c7             	mov    %rax,%rdi
    d30f:	e8 8c 80 ff ff       	call   53a0 <_Unwind_Resume@plt>
    d314:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d318:	48 89 c7             	mov    %rax,%rdi
    d31b:	e8 9a aa 00 00       	call   17dba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    d320:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (supportedLayer.layerName == validationLayerName) {
    d324:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d328:	48 89 c7             	mov    %rax,%rdi
    d32b:	e8 c0 bf 00 00       	call   192f0 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>
    d330:	48 8b 3d 19 56 02 00 	mov    0x25619(%rip),%rdi        # 32950 <_ZN4rtvc19validationLayerNameE>
    d337:	48 8b 35 1a 56 02 00 	mov    0x2561a(%rip),%rsi        # 32958 <_ZN4rtvc19validationLayerNameE+0x8>
    d33e:	48 89 d1             	mov    %rdx,%rcx
    d341:	48 89 c2             	mov    %rax,%rdx
    d344:	e8 ec bf 00 00       	call   19335 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>
    d349:	84 c0                	test   %al,%al
    d34b:	74 07                	je     d354 <_ZN4rtvc24validationLayerSupportedEv+0x216>
      return true;
    d34d:	bb 01 00 00 00       	mov    $0x1,%ebx
    d352:	eb 2e                	jmp    d382 <_ZN4rtvc24validationLayerSupportedEv+0x244>
  for (const auto &supportedLayer : supportedLayers) {
    d354:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d358:	48 89 c7             	mov    %rax,%rdi
    d35b:	e8 6c bf 00 00       	call   192cc <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    d360:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
    d367:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    d36b:	48 89 d6             	mov    %rdx,%rsi
    d36e:	48 89 c7             	mov    %rax,%rdi
    d371:	e8 fa a9 00 00       	call   17d70 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    d376:	83 f0 01             	xor    $0x1,%eax
    d379:	84 c0                	test   %al,%al
    d37b:	75 97                	jne    d314 <_ZN4rtvc24validationLayerSupportedEv+0x1d6>
    }
  }
  return false;
    d37d:	bb 00 00 00 00       	mov    $0x0,%ebx
}
    d382:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    d386:	48 89 c7             	mov    %rax,%rdi
    d389:	e8 9a bd 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    d38e:	89 d8                	mov    %ebx,%eax
    d390:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
    d394:	5b                   	pop    %rbx
    d395:	41 5c                	pop    %r12
    d397:	5d                   	pop    %rbp
    d398:	c3                   	ret

000000000000d399 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE>:

vk::raii::Instance makeInstance(const vk::raii::Context &context) {
    d399:	55                   	push   %rbp
    d39a:	48 89 e5             	mov    %rsp,%rbp
    d39d:	41 55                	push   %r13
    d39f:	41 54                	push   %r12
    d3a1:	53                   	push   %rbx
    d3a2:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    d3a9:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
    d3b0:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  vk::ApplicationInfo applicationInfo{
    d3b7:	c7 85 60 ff ff ff 00 	movl   $0x0,-0xa0(%rbp)
    d3be:	00 00 00 
    d3c1:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    d3c8:	00 00 00 00 
    d3cc:	48 8d 05 be 9b 01 00 	lea    0x19bbe(%rip),%rax        # 26f91 <_ZNSt8__detailL19__atomic_spin_countE+0x42d5>
    d3d3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    d3da:	c7 85 78 ff ff ff 00 	movl   $0x400000,-0x88(%rbp)
    d3e1:	00 40 00 
    d3e4:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
    d3eb:	00 
    d3ec:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
    d3f3:	c7 45 8c 00 00 40 00 	movl   $0x400000,-0x74(%rbp)
      .applicationVersion{VK_MAKE_VERSION(1, 0, 0)},
      .apiVersion{VK_API_VERSION_1_0},
  };

  // Required extensions
  uint32_t requiredExtensionCount = 0;
    d3fa:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
    d401:	00 00 00 
  auto ppRequiredExtensions =
      glfwGetRequiredInstanceExtensions(&requiredExtensionCount);
    d404:	48 8d 85 5c ff ff ff 	lea    -0xa4(%rbp),%rax
    d40b:	48 89 c7             	mov    %rax,%rdi
    d40e:	e8 5d 7d ff ff       	call   5170 <glfwGetRequiredInstanceExtensions@plt>
    d413:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
    d417:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    d41d:	89 c3                	mov    %eax,%ebx
    d41f:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    d423:	48 89 c7             	mov    %rax,%rdi
    d426:	e8 b3 a9 00 00       	call   17dde <_ZNSaIPKcEC1Ev>
    d42b:	48 8d 55 9f          	lea    -0x61(%rbp),%rdx
    d42f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d436:	48 89 de             	mov    %rbx,%rsi
    d439:	48 89 c7             	mov    %rax,%rdi
    d43c:	e8 69 bf 00 00       	call   193aa <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>
    d441:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    d445:	48 89 c7             	mov    %rax,%rdi
    d448:	e8 6f ad 00 00       	call   181bc <_ZNSaIPKcED1Ev>
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
    d44d:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    d454:	00 
    d455:	eb 34                	jmp    d48b <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xf2>
    requiredExtensions[i] = ppRequiredExtensions[i];
    d457:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d45b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    d462:	00 
    d463:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d467:	48 01 d0             	add    %rdx,%rax
    d46a:	48 8b 18             	mov    (%rax),%rbx
    d46d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    d471:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d478:	48 89 d6             	mov    %rdx,%rsi
    d47b:	48 89 c7             	mov    %rax,%rdi
    d47e:	e8 e1 bf 00 00       	call   19464 <_ZNSt6vectorIPKcSaIS1_EEixEm>
    d483:	48 89 18             	mov    %rbx,(%rax)
  for (size_t i = 0; i < requiredExtensionCount; ++i) {
    d486:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    d48b:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    d491:	89 c0                	mov    %eax,%eax
    d493:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    d497:	72 be                	jb     d457 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0xbe>
  }

  // Requested layers
  std::vector<const char *> requestedLayers = {
      mangohudLayerName.data(),
  };
    d499:	48 8d 05 04 9b 01 00 	lea    0x19b04(%rip),%rax        # 26fa4 <_ZNSt8__detailL19__atomic_spin_countE+0x42e8>
    d4a0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    d4a4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    d4a8:	49 89 c4             	mov    %rax,%r12
    d4ab:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    d4b1:	48 8d 45 af          	lea    -0x51(%rbp),%rax
    d4b5:	48 89 c7             	mov    %rax,%rdi
    d4b8:	e8 21 a9 00 00       	call   17dde <_ZNSaIPKcEC1Ev>
    d4bd:	48 8d 55 af          	lea    -0x51(%rbp),%rdx
    d4c1:	4c 89 e6             	mov    %r12,%rsi
    d4c4:	4c 89 ef             	mov    %r13,%rdi
    d4c7:	4c 89 e1             	mov    %r12,%rcx
    d4ca:	4c 89 eb             	mov    %r13,%rbx
    d4cd:	48 89 df             	mov    %rbx,%rdi
    d4d0:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d4d7:	48 89 d1             	mov    %rdx,%rcx
    d4da:	48 89 fa             	mov    %rdi,%rdx
    d4dd:	48 89 c7             	mov    %rax,%rdi
    d4e0:	e8 21 a9 00 00       	call   17e06 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    d4e5:	48 8d 45 af          	lea    -0x51(%rbp),%rax
    d4e9:	48 89 c7             	mov    %rax,%rdi
    d4ec:	e8 cb ac 00 00       	call   181bc <_ZNSaIPKcED1Ev>

  // Enable validation layers if the application is running in debug mode
  vk::DebugUtilsMessengerCreateInfoEXT *pDebugInfo = nullptr;
    d4f1:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    d4f8:	00 
  vk::DebugUtilsMessengerCreateInfoEXT debugInfo{};
    d4f9:	c7 85 f0 fe ff ff 04 	movl   $0x3b9cbe04,-0x110(%rbp)
    d500:	be 9c 3b 
    d503:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
    d50a:	00 00 00 00 
    d50e:	c7 85 00 ff ff ff 00 	movl   $0x0,-0x100(%rbp)
    d515:	00 00 00 
    d518:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    d51f:	00 00 00 
    d522:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    d529:	00 00 00 
    d52c:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
    d533:	00 00 00 00 
    d537:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
    d53e:	00 00 00 00 
  if constexpr (debugMode) {
    if (validationLayerSupported()) {
    d542:	e8 f7 fb ff ff       	call   d13e <_ZN4rtvc24validationLayerSupportedEv>
    d547:	84 c0                	test   %al,%al
    d549:	0f 84 b8 00 00 00    	je     d607 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x26e>
      requiredExtensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
    d54f:	48 8d 05 68 9a 01 00 	lea    0x19a68(%rip),%rax        # 26fbe <_ZNSt8__detailL19__atomic_spin_countE+0x4302>
    d556:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    d55a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    d55e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d565:	48 89 d6             	mov    %rdx,%rsi
    d568:	48 89 c7             	mov    %rax,%rdi
    d56b:	e8 c4 bf 00 00       	call   19534 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>
      requestedLayers.push_back(validationLayerName.data());
    d570:	48 8d 05 d9 53 02 00 	lea    0x253d9(%rip),%rax        # 32950 <_ZN4rtvc19validationLayerNameE>
    d577:	48 89 c7             	mov    %rax,%rdi
    d57a:	e8 4d a8 00 00       	call   17dcc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
    d57f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    d583:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    d587:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d58e:	48 89 d6             	mov    %rdx,%rsi
    d591:	48 89 c7             	mov    %rax,%rdi
    d594:	e8 9b bf 00 00       	call   19534 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>

      debugInfo = makeDebugMessengerInfo();
    d599:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    d5a0:	48 89 c7             	mov    %rax,%rdi
    d5a3:	e8 c9 01 00 00       	call   d771 <_ZN4rtvc22makeDebugMessengerInfoEv>
    d5a8:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
    d5af:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
    d5b6:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    d5bd:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
    d5c4:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
    d5cb:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
    d5d2:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    d5d9:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
    d5e0:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    d5e7:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
    d5ee:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    d5f5:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
      pDebugInfo = &debugInfo;
    d5fc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    d603:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    }
  }

  vk::InstanceCreateInfo instanceInfo{
    d607:	66 0f ef c0          	pxor   %xmm0,%xmm0
    d60b:	0f 29 85 b0 fe ff ff 	movaps %xmm0,-0x150(%rbp)
    d612:	0f 29 85 c0 fe ff ff 	movaps %xmm0,-0x140(%rbp)
    d619:	0f 29 85 d0 fe ff ff 	movaps %xmm0,-0x130(%rbp)
    d620:	0f 29 85 e0 fe ff ff 	movaps %xmm0,-0x120(%rbp)
    d627:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    d62e:	00 00 00 
      .pApplicationInfo{&applicationInfo},
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
      .ppEnabledLayerNames{requestedLayers.data()},
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
      .ppEnabledExtensionNames{requiredExtensions.data()},
  };
    d631:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d635:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    d63c:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    d643:	48 83 c0 10          	add    $0x10,%rax
    d647:	48 89 c7             	mov    %rax,%rdi
    d64a:	e8 33 b1 00 00       	call   18782 <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>
    d64f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    d656:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
      .enabledLayerCount{static_cast<uint32_t>(requestedLayers.size())},
    d65d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d664:	48 89 c7             	mov    %rax,%rdi
    d667:	e8 2c ac 00 00       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
    d66c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
      .ppEnabledLayerNames{requestedLayers.data()},
    d672:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d679:	48 89 c7             	mov    %rax,%rdi
    d67c:	e8 3b ac 00 00       	call   182bc <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
    d681:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
      .enabledExtensionCount{static_cast<uint32_t>(requiredExtensions.size())},
    d688:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d68f:	48 89 c7             	mov    %rax,%rdi
    d692:	e8 01 ac 00 00       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
  };
    d697:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%rbp)
      .ppEnabledExtensionNames{requiredExtensions.data()},
    d69d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d6a4:	48 89 c7             	mov    %rax,%rdi
    d6a7:	e8 10 ac 00 00       	call   182bc <_ZNSt6vectorIPKcSaIS1_EE4dataEv>
  };
    d6ac:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  return {context, instanceInfo};
    d6b3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    d6b7:	be 00 00 00 00       	mov    $0x0,%esi
    d6bc:	48 89 c7             	mov    %rax,%rdi
    d6bf:	e8 b4 be 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    d6c4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    d6c8:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    d6cf:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
    d6d6:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    d6dd:	48 89 c7             	mov    %rax,%rdi
    d6e0:	e8 d7 99 00 00       	call   170bc <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
    d6e5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d6ec:	48 89 c7             	mov    %rax,%rdi
    d6ef:	e8 2c bd 00 00       	call   19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d6f4:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d6fb:	48 89 c7             	mov    %rax,%rdi
    d6fe:	e8 1d bd 00 00       	call   19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
  return {context, instanceInfo};
    d703:	eb 57                	jmp    d75c <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3c3>
  std::vector<const char *> requiredExtensions{requiredExtensionCount};
    d705:	48 89 c3             	mov    %rax,%rbx
    d708:	48 8d 45 9f          	lea    -0x61(%rbp),%rax
    d70c:	48 89 c7             	mov    %rax,%rdi
    d70f:	e8 a8 aa 00 00       	call   181bc <_ZNSaIPKcED1Ev>
    d714:	48 89 d8             	mov    %rbx,%rax
    d717:	48 89 c7             	mov    %rax,%rdi
    d71a:	e8 81 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
  };
    d71f:	48 89 c3             	mov    %rax,%rbx
    d722:	48 8d 45 af          	lea    -0x51(%rbp),%rax
    d726:	48 89 c7             	mov    %rax,%rdi
    d729:	e8 8e aa 00 00       	call   181bc <_ZNSaIPKcED1Ev>
    d72e:	eb 12                	jmp    d742 <_ZN4rtvc12makeInstanceERKN2vk4raii7ContextE+0x3a9>
}
    d730:	48 89 c3             	mov    %rax,%rbx
    d733:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    d73a:	48 89 c7             	mov    %rax,%rdi
    d73d:	e8 de bc 00 00       	call   19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d742:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    d749:	48 89 c7             	mov    %rax,%rdi
    d74c:	e8 cf bc 00 00       	call   19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d751:	48 89 d8             	mov    %rbx,%rax
    d754:	48 89 c7             	mov    %rax,%rdi
    d757:	e8 44 7c ff ff       	call   53a0 <_Unwind_Resume@plt>
    d75c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    d763:	48 81 c4 78 01 00 00 	add    $0x178,%rsp
    d76a:	5b                   	pop    %rbx
    d76b:	41 5c                	pop    %r12
    d76d:	41 5d                	pop    %r13
    d76f:	5d                   	pop    %rbp
    d770:	c3                   	ret

000000000000d771 <_ZN4rtvc22makeDebugMessengerInfoEv>:

[[nodiscard]] vk::DebugUtilsMessengerCreateInfoEXT makeDebugMessengerInfo() {
    d771:	55                   	push   %rbp
    d772:	48 89 e5             	mov    %rsp,%rbp
    d775:	48 83 ec 10          	sub    $0x10,%rsp
    d779:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          vk::DebugUtilsMessageTypeFlagBitsEXT::eGeneral |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eValidation |
          vk::DebugUtilsMessageTypeFlagBitsEXT::ePerformance |
          vk::DebugUtilsMessageTypeFlagBitsEXT::eDeviceAddressBinding,
      .pfnUserCallback = debugCallback,
  };
    d77d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d781:	c7 00 04 be 9c 3b    	movl   $0x3b9cbe04,(%rax)
    d787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d78b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    d792:	00 
    d793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d797:	48 83 c0 10          	add    $0x10,%rax
    d79b:	48 89 c7             	mov    %rax,%rdi
    d79e:	e8 df aa 00 00       	call   18282 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>
    d7a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7a7:	c7 40 14 11 11 00 00 	movl   $0x1111,0x14(%rax)
    d7ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7b2:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%rax)
    d7b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7bd:	48 8d 15 19 f9 ff ff 	lea    -0x6e7(%rip),%rdx        # d0dd <_ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>
    d7c4:	48 89 50 20          	mov    %rdx,0x20(%rax)
    d7c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7cc:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    d7d3:	00 
}
    d7d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d7d8:	c9                   	leave
    d7d9:	c3                   	ret

000000000000d7da <_ZN4rtvc18makeDebugMessengerERKN2vk4raii8InstanceE>:

vk::raii::DebugUtilsMessengerEXT
makeDebugMessenger(const vk::raii::Instance &instance) {
    d7da:	55                   	push   %rbp
    d7db:	48 89 e5             	mov    %rsp,%rbp
    d7de:	48 83 ec 50          	sub    $0x50,%rsp
    d7e2:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    d7e6:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  if constexpr (debugMode) {
    return {instance, makeDebugMessengerInfo()};
    d7ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    d7ee:	48 89 c7             	mov    %rax,%rdi
    d7f1:	e8 7b ff ff ff       	call   d771 <_ZN4rtvc22makeDebugMessengerInfoEv>
    d7f6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    d7fa:	be 00 00 00 00       	mov    $0x0,%esi
    d7ff:	48 89 c7             	mov    %rax,%rdi
    d802:	e8 71 bd 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    d807:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    d80b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    d80f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    d813:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d817:	48 89 c7             	mov    %rax,%rdi
    d81a:	e8 9f a0 00 00       	call   178be <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>
  }
  return {VK_NULL_HANDLE};
}
    d81f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d823:	c9                   	leave
    d824:	c3                   	ret

000000000000d825 <_ZN4rtvc11makeSurfaceERKN2vk4raii8InstanceERKNS_6WindowE>:

vk::raii::SurfaceKHR makeSurface(const vk::raii::Instance &instance,
                                 const Window &window) {
    d825:	55                   	push   %rbp
    d826:	48 89 e5             	mov    %rsp,%rbp
    d829:	53                   	push   %rbx
    d82a:	48 83 ec 38          	sub    $0x38,%rsp
    d82e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    d832:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    d836:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  VkSurfaceKHR surface;
  glfwCreateWindowSurface(static_cast<VkInstance>(*instance), window.ref(),
    d83a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d83e:	48 89 c7             	mov    %rax,%rdi
    d841:	e8 52 c2 ff ff       	call   9a98 <_ZNK4rtvc6Window3refEv>
    d846:	48 8b 18             	mov    (%rax),%rbx
    d849:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d84d:	48 89 c7             	mov    %rax,%rdi
    d850:	e8 9f 99 00 00       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
    d855:	48 89 c7             	mov    %rax,%rdi
    d858:	e8 37 b8 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
    d85d:	48 89 c7             	mov    %rax,%rdi
    d860:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    d864:	48 89 c1             	mov    %rax,%rcx
    d867:	ba 00 00 00 00       	mov    $0x0,%edx
    d86c:	48 89 de             	mov    %rbx,%rsi
    d86f:	e8 cc 7a ff ff       	call   5340 <glfwCreateWindowSurface@plt>
                          nullptr, &surface);
  return {instance, surface};
    d874:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
    d878:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    d87c:	be 00 00 00 00       	mov    $0x0,%esi
    d881:	48 89 c7             	mov    %rax,%rdi
    d884:	e8 ef bc 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    d889:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d88d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    d891:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d895:	48 89 d1             	mov    %rdx,%rcx
    d898:	48 89 da             	mov    %rbx,%rdx
    d89b:	48 89 c7             	mov    %rax,%rdi
    d89e:	e8 27 a2 00 00       	call   17aca <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>
}
    d8a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d8a7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    d8ab:	c9                   	leave
    d8ac:	c3                   	ret

000000000000d8ad <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE>:

DeviceWrapper makeLogicalDevice(const vk::raii::Instance &instance,
                                const vk::raii::SurfaceKHR &surface) {
    d8ad:	55                   	push   %rbp
    d8ae:	48 89 e5             	mov    %rsp,%rbp
    d8b1:	41 57                	push   %r15
    d8b3:	41 56                	push   %r14
    d8b5:	41 55                	push   %r13
    d8b7:	41 54                	push   %r12
    d8b9:	53                   	push   %rbx
    d8ba:	48 81 ec b8 07 00 00 	sub    $0x7b8,%rsp
    d8c1:	48 89 bd 38 f8 ff ff 	mov    %rdi,-0x7c8(%rbp)
    d8c8:	48 89 b5 30 f8 ff ff 	mov    %rsi,-0x7d0(%rbp)
    d8cf:	48 89 95 28 f8 ff ff 	mov    %rdx,-0x7d8(%rbp)
  static const std::vector<const char *> requiredExtensions = {
      VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  };
    d8d6:	0f b6 05 ab 5a 02 00 	movzbl 0x25aab(%rip),%eax        # 33388 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    d8dd:	84 c0                	test   %al,%al
    d8df:	0f 94 c0             	sete   %al
    d8e2:	84 c0                	test   %al,%al
    d8e4:	0f 84 b9 00 00 00    	je     d9a3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    d8ea:	48 8d 05 97 5a 02 00 	lea    0x25a97(%rip),%rax        # 33388 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    d8f1:	48 89 c7             	mov    %rax,%rdi
    d8f4:	e8 c7 7a ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    d8f9:	85 c0                	test   %eax,%eax
    d8fb:	0f 95 c0             	setne  %al
    d8fe:	84 c0                	test   %al,%al
    d900:	0f 84 9d 00 00 00    	je     d9a3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf6>
    d906:	c6 85 27 f8 ff ff 00 	movb   $0x0,-0x7d9(%rbp)
    d90d:	48 8d 05 bd 96 01 00 	lea    0x196bd(%rip),%rax        # 26fd1 <_ZNSt8__detailL19__atomic_spin_countE+0x4315>
    d914:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
    d91b:	48 8d 85 a0 fd ff ff 	lea    -0x260(%rbp),%rax
    d922:	49 89 c6             	mov    %rax,%r14
    d925:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    d92b:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    d932:	48 89 c7             	mov    %rax,%rdi
    d935:	e8 a4 a4 00 00       	call   17dde <_ZNSaIPKcEC1Ev>
    d93a:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    d941:	4c 89 f6             	mov    %r14,%rsi
    d944:	4c 89 ff             	mov    %r15,%rdi
    d947:	4c 89 f1             	mov    %r14,%rcx
    d94a:	4c 89 fb             	mov    %r15,%rbx
    d94d:	48 89 da             	mov    %rbx,%rdx
    d950:	48 89 c1             	mov    %rax,%rcx
    d953:	48 8d 05 16 5a 02 00 	lea    0x25a16(%rip),%rax        # 33370 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    d95a:	48 89 c7             	mov    %rax,%rdi
    d95d:	e8 a4 a4 00 00       	call   17e06 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    d962:	48 8d 05 8f 58 02 00 	lea    0x2588f(%rip),%rax        # 331f8 <__dso_handle>
    d969:	48 89 c2             	mov    %rax,%rdx
    d96c:	48 8d 05 fd 59 02 00 	lea    0x259fd(%rip),%rax        # 33370 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    d973:	48 89 c6             	mov    %rax,%rsi
    d976:	48 8d 05 a3 ba 00 00 	lea    0xbaa3(%rip),%rax        # 19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    d97d:	48 89 c7             	mov    %rax,%rdi
    d980:	e8 4b 78 ff ff       	call   51d0 <__cxa_atexit@plt>
    d985:	48 8d 05 fc 59 02 00 	lea    0x259fc(%rip),%rax        # 33388 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    d98c:	48 89 c7             	mov    %rax,%rdi
    d98f:	e8 6c 77 ff ff       	call   5100 <__cxa_guard_release@plt>
    d994:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    d99b:	48 89 c7             	mov    %rax,%rdi
    d99e:	e8 19 a8 00 00       	call   181bc <_ZNSaIPKcED1Ev>
  static const std::vector<const char *> instanceLayers = {
      validationLayerName.data(),
      mangohudLayerName.data(),
  };
    d9a3:	0f b6 05 fe 59 02 00 	movzbl 0x259fe(%rip),%eax        # 333a8 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    d9aa:	84 c0                	test   %al,%al
    d9ac:	0f 94 c0             	sete   %al
    d9af:	84 c0                	test   %al,%al
    d9b1:	0f 84 c6 00 00 00    	je     da7d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    d9b7:	48 8d 05 ea 59 02 00 	lea    0x259ea(%rip),%rax        # 333a8 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    d9be:	48 89 c7             	mov    %rax,%rdi
    d9c1:	e8 fa 79 ff ff       	call   53c0 <__cxa_guard_acquire@plt>
    d9c6:	85 c0                	test   %eax,%eax
    d9c8:	0f 95 c0             	setne  %al
    d9cb:	84 c0                	test   %al,%al
    d9cd:	0f 84 aa 00 00 00    	je     da7d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1d0>
    d9d3:	41 be 00 00 00 00    	mov    $0x0,%r14d
    d9d9:	48 8d 05 29 93 01 00 	lea    0x19329(%rip),%rax        # 26d09 <_ZNSt8__detailL19__atomic_spin_countE+0x404d>
    d9e0:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    d9e7:	48 8d 05 b6 95 01 00 	lea    0x195b6(%rip),%rax        # 26fa4 <_ZNSt8__detailL19__atomic_spin_countE+0x42e8>
    d9ee:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    d9f5:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
    d9fc:	49 89 c4             	mov    %rax,%r12
    d9ff:	41 bd 02 00 00 00    	mov    $0x2,%r13d
    da05:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    da0c:	48 89 c7             	mov    %rax,%rdi
    da0f:	e8 ca a3 00 00       	call   17dde <_ZNSaIPKcEC1Ev>
    da14:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    da1b:	4c 89 e6             	mov    %r12,%rsi
    da1e:	4c 89 ef             	mov    %r13,%rdi
    da21:	4c 89 e1             	mov    %r12,%rcx
    da24:	4c 89 eb             	mov    %r13,%rbx
    da27:	48 89 da             	mov    %rbx,%rdx
    da2a:	48 89 c1             	mov    %rax,%rcx
    da2d:	48 8d 05 5c 59 02 00 	lea    0x2595c(%rip),%rax        # 33390 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    da34:	48 89 c7             	mov    %rax,%rdi
    da37:	e8 ca a3 00 00       	call   17e06 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
    da3c:	48 8d 05 b5 57 02 00 	lea    0x257b5(%rip),%rax        # 331f8 <__dso_handle>
    da43:	48 89 c2             	mov    %rax,%rdx
    da46:	48 8d 05 43 59 02 00 	lea    0x25943(%rip),%rax        # 33390 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    da4d:	48 89 c6             	mov    %rax,%rsi
    da50:	48 8d 05 c9 b9 00 00 	lea    0xb9c9(%rip),%rax        # 19420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>
    da57:	48 89 c7             	mov    %rax,%rdi
    da5a:	e8 71 77 ff ff       	call   51d0 <__cxa_atexit@plt>
    da5f:	48 8d 05 42 59 02 00 	lea    0x25942(%rip),%rax        # 333a8 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    da66:	48 89 c7             	mov    %rax,%rdi
    da69:	e8 92 76 ff ff       	call   5100 <__cxa_guard_release@plt>
    da6e:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    da75:	48 89 c7             	mov    %rax,%rdi
    da78:	e8 3f a7 00 00       	call   181bc <_ZNSaIPKcED1Ev>

  vk::raii::PhysicalDevices physicalDevices{instance};
    da7d:	48 8b 95 30 f8 ff ff 	mov    -0x7d0(%rbp),%rdx
    da84:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    da8b:	48 89 d6             	mov    %rdx,%rsi
    da8e:	48 89 c7             	mov    %rax,%rdi
    da91:	e8 b0 99 00 00       	call   17446 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>
  for (const auto &physicalDevice : physicalDevices) {
    da96:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    da9d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    daa1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    daa5:	48 89 c7             	mov    %rax,%rdi
    daa8:	e8 5d bb 00 00       	call   1960a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
    daad:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
    dab4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    dab8:	48 89 c7             	mov    %rax,%rdi
    dabb:	e8 70 bb 00 00       	call   19630 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
    dac0:	48 89 85 70 fd ff ff 	mov    %rax,-0x290(%rbp)
    dac7:	e9 b3 10 00 00       	jmp    eb7f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
    dacc:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    dad3:	48 89 c7             	mov    %rax,%rdi
    dad6:	e8 bb a9 00 00       	call   18496 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
    dadb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    dadf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dae3:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
      return imageFormatProperties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties PhysicalDevice::getProperties() const VULKAN_HPP_NOEXCEPT
    {
      VULKAN_HPP_NAMESPACE::PhysicalDeviceProperties properties;
    daea:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    daf1:	b8 00 00 00 00       	mov    $0x0,%eax
    daf6:	b9 67 00 00 00       	mov    $0x67,%ecx
    dafb:	48 89 d7             	mov    %rdx,%rdi
    dafe:	f3 48 ab             	rep stos %rax,%es:(%rdi)
      getDispatcher()->vkGetPhysicalDeviceProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    db01:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    db08:	48 89 c7             	mov    %rax,%rdi
    db0b:	e8 16 98 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    db10:	48 8b 58 38          	mov    0x38(%rax),%rbx
    db14:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    db1b:	48 89 c7             	mov    %rax,%rdi
    db1e:	e8 7b 15 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    db23:	48 89 c2             	mov    %rax,%rdx
    db26:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    db2d:	48 89 c6             	mov    %rax,%rsi
    db30:	48 89 d7             	mov    %rdx,%rdi
    db33:	ff d3                	call   *%rbx
                                                      reinterpret_cast<VkPhysicalDeviceProperties *>( &properties ) );

      return properties;
    db35:	90                   	nop
    if (auto properties = physicalDevice.getProperties();
        properties.deviceType != vk::PhysicalDeviceType::eDiscreteGpu) {
    db36:	8b 85 30 f9 ff ff    	mov    -0x6d0(%rbp),%eax
    if (auto properties = physicalDevice.getProperties();
    db3c:	83 f8 02             	cmp    $0x2,%eax
    db3f:	0f 85 14 10 00 00    	jne    eb59 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ac>
      continue;
    }

    bool extensionsSupported = true;
    db45:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
    auto supportedExtensions =
        physicalDevice.enumerateDeviceExtensionProperties();
    db49:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
    db50:	be 00 00 00 00       	mov    $0x0,%esi
    db55:	48 89 c7             	mov    %rax,%rdi
    db58:	e8 1d bb 00 00       	call   1967a <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>
    db5d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    db61:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    db68:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
    db6f:	48 89 85 b0 fc ff ff 	mov    %rax,-0x350(%rbp)
    db76:	48 8d 9d 50 fd ff ff 	lea    -0x2b0(%rbp),%rbx
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties>
                                           PhysicalDevice::enumerateDeviceExtensionProperties( Optional<const std::string> layerName ) const
    {
      std::vector<VULKAN_HPP_NAMESPACE::ExtensionProperties> properties;
    db7d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    db81:	0f 11 03             	movups %xmm0,(%rbx)
    db84:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                               propertyCount;
      VkResult                                               result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    db89:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    db90:	48 89 c7             	mov    %rax,%rdi
    db93:	e8 8e 97 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    db98:	4c 8b 60 60          	mov    0x60(%rax),%r12
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    db9c:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dba3:	48 89 c7             	mov    %rax,%rdi
    dba6:	e8 1d b4 00 00       	call   18fc8 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    dbab:	84 c0                	test   %al,%al
    dbad:	74 1c                	je     dbcb <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x31e>
          static_cast<VkPhysicalDevice>( m_physicalDevice ), layerName ? layerName->c_str() : nullptr, &propertyCount, nullptr );
    dbaf:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dbb6:	48 89 c7             	mov    %rax,%rdi
    dbb9:	e8 f8 b3 00 00       	call   18fb6 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    dbbe:	48 89 c7             	mov    %rax,%rdi
    dbc1:	e8 f8 c2 ff ff       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    dbc6:	49 89 c5             	mov    %rax,%r13
    dbc9:	eb 06                	jmp    dbd1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x324>
        result = getDispatcher()->vkEnumerateDeviceExtensionProperties(
    dbcb:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    dbd1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dbd8:	48 89 c7             	mov    %rax,%rdi
    dbdb:	e8 be 14 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    dbe0:	48 89 c7             	mov    %rax,%rdi
    dbe3:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    dbea:	b9 00 00 00 00       	mov    $0x0,%ecx
    dbef:	48 89 c2             	mov    %rax,%rdx
    dbf2:	4c 89 ee             	mov    %r13,%rsi
    dbf5:	41 ff d4             	call   *%r12
    dbf8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    dbfe:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
    dc05:	0f 85 9f 00 00 00    	jne    dcaa <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
    dc0b:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dc11:	85 c0                	test   %eax,%eax
    dc13:	0f 84 91 00 00 00    	je     dcaa <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3fd>
        {
          properties.resize( propertyCount );
    dc19:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dc1f:	89 c0                	mov    %eax,%eax
    dc21:	48 89 c6             	mov    %rax,%rsi
    dc24:	48 89 df             	mov    %rbx,%rdi
    dc27:	e8 b4 b3 00 00       	call   18fe0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    dc2c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dc33:	48 89 c7             	mov    %rax,%rdi
    dc36:	e8 eb 96 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    dc3b:	4c 8b 60 60          	mov    0x60(%rax),%r12
                                                                          layerName ? layerName->c_str() : nullptr,
                                                                          &propertyCount,
                                                                          reinterpret_cast<VkExtensionProperties *>( properties.data() ) );
    dc3f:	48 89 df             	mov    %rbx,%rdi
    dc42:	e8 2b b4 00 00       	call   19072 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>
    dc47:	49 89 c6             	mov    %rax,%r14
                                                                          layerName ? layerName->c_str() : nullptr,
    dc4a:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dc51:	48 89 c7             	mov    %rax,%rdi
    dc54:	e8 6f b3 00 00       	call   18fc8 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    dc59:	84 c0                	test   %al,%al
    dc5b:	74 1c                	je     dc79 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3cc>
                                                                          layerName ? layerName->c_str() : nullptr,
    dc5d:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
    dc64:	48 89 c7             	mov    %rax,%rdi
    dc67:	e8 4a b3 00 00       	call   18fb6 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>
    dc6c:	48 89 c7             	mov    %rax,%rdi
    dc6f:	e8 4a c2 ff ff       	call   9ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
    dc74:	49 89 c5             	mov    %rax,%r13
    dc77:	eb 06                	jmp    dc7f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x3d2>
          result = getDispatcher()->vkEnumerateDeviceExtensionProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    dc79:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    dc7f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dc86:	48 89 c7             	mov    %rax,%rdi
    dc89:	e8 10 14 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    dc8e:	48 89 c7             	mov    %rax,%rdi
    dc91:	48 8d 85 ac fc ff ff 	lea    -0x354(%rbp),%rax
    dc98:	4c 89 f1             	mov    %r14,%rcx
    dc9b:	48 89 c2             	mov    %rax,%rdx
    dc9e:	4c 89 ee             	mov    %r13,%rsi
    dca1:	41 ff d4             	call   *%r12
    dca4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    dcaa:	83 bd 5c ff ff ff 05 	cmpl   $0x5,-0xa4(%rbp)
    dcb1:	0f 84 d2 fe ff ff    	je     db89 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x2dc>
    dcb7:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    dcbd:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    dcc3:	48 8d 05 1e 93 01 00 	lea    0x1931e(%rip),%rax        # 26fe8 <_ZNSt8__detailL19__atomic_spin_countE+0x432c>
    dcca:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    if ( result != Result::eSuccess )
    dcd1:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
    dcd8:	74 17                	je     dcf1 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x444>
      throwResultException( result, message );
    dcda:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    dce1:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
    dce7:	48 89 d6             	mov    %rdx,%rsi
    dcea:	89 c7                	mov    %eax,%edi
    dcec:	e8 95 e9 ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    dcf1:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceExtensionProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    dcf2:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dcf8:	41 89 c4             	mov    %eax,%r12d
    dcfb:	48 89 df             	mov    %rbx,%rdi
    dcfe:	e8 93 b3 00 00       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    dd03:	4c 39 e0             	cmp    %r12,%rax
    dd06:	73 28                	jae    dd30 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x483>
    dd08:	48 8d 05 11 93 01 00 	lea    0x19311(%rip),%rax        # 27020 <_ZNSt8__detailL19__atomic_spin_countE+0x4364>
    dd0f:	48 89 c1             	mov    %rax,%rcx
    dd12:	ba a0 2a 00 00       	mov    $0x2aa0,%edx
    dd17:	48 8d 05 ba 8d 01 00 	lea    0x18dba(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
    dd1e:	48 89 c6             	mov    %rax,%rsi
    dd21:	48 8d 05 10 92 01 00 	lea    0x19210(%rip),%rax        # 26f38 <_ZNSt8__detailL19__atomic_spin_countE+0x427c>
    dd28:	48 89 c7             	mov    %rax,%rdi
    dd2b:	e8 e0 73 ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    dd30:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dd36:	41 89 c4             	mov    %eax,%r12d
    dd39:	48 89 df             	mov    %rbx,%rdi
    dd3c:	e8 55 b3 00 00       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
    dd41:	49 39 c4             	cmp    %rax,%r12
    dd44:	0f 92 c0             	setb   %al
    dd47:	84 c0                	test   %al,%al
    dd49:	74 28                	je     dd73 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
      {
        properties.resize( propertyCount );
    dd4b:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
    dd51:	89 c0                	mov    %eax,%eax
    dd53:	48 89 c6             	mov    %rax,%rsi
    dd56:	48 89 df             	mov    %rbx,%rdi
    dd59:	e8 82 b2 00 00       	call   18fe0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    dd5e:	eb 13                	jmp    dd73 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x4c6>
    }
    dd60:	49 89 c4             	mov    %rax,%r12
    dd63:	48 89 df             	mov    %rbx,%rdi
    dd66:	e8 07 b2 00 00       	call   18f72 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    dd6b:	4c 89 e3             	mov    %r12,%rbx
    dd6e:	e9 85 10 00 00       	jmp    edf8 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
      return properties;
    dd73:	90                   	nop
    std::map<std::string, uint32_t> extensionsMap{};
    dd74:	66 0f ef c0          	pxor   %xmm0,%xmm0
    dd78:	0f 29 85 70 f8 ff ff 	movaps %xmm0,-0x790(%rbp)
    dd7f:	0f 29 85 80 f8 ff ff 	movaps %xmm0,-0x780(%rbp)
    dd86:	0f 29 85 90 f8 ff ff 	movaps %xmm0,-0x770(%rbp)
    dd8d:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    dd94:	48 89 c7             	mov    %rax,%rdi
    dd97:	e8 44 a7 00 00       	call   184e0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &extension : supportedExtensions) {
    dd9c:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    dda3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    dda7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    ddab:	48 89 c7             	mov    %rax,%rdi
    ddae:	e8 5f b9 00 00       	call   19712 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>
    ddb3:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    ddba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    ddbe:	48 89 c7             	mov    %rax,%rdi
    ddc1:	e8 72 b9 00 00       	call   19738 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>
    ddc6:	48 89 85 98 fc ff ff 	mov    %rax,-0x368(%rbp)
    ddcd:	eb 6d                	jmp    de3c <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x58f>
    ddcf:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    ddd6:	48 89 c7             	mov    %rax,%rdi
    ddd9:	e8 82 a7 00 00       	call   18560 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    ddde:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
      extensionsMap[extension.extensionName]++;
    dde5:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    ddec:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    ddf3:	48 89 d6             	mov    %rdx,%rsi
    ddf6:	48 89 c7             	mov    %rax,%rdi
    ddf9:	e8 88 b9 00 00       	call   19786 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    ddfe:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
    de05:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    de0c:	48 89 d6             	mov    %rdx,%rsi
    de0f:	48 89 c7             	mov    %rax,%rdi
    de12:	e8 e1 b9 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    de17:	8b 10                	mov    (%rax),%edx
    de19:	83 c2 01             	add    $0x1,%edx
    de1c:	89 10                	mov    %edx,(%rax)
    de1e:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    de25:	48 89 c7             	mov    %rax,%rdi
    de28:	e8 ab c0 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &extension : supportedExtensions) {
    de2d:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    de34:	48 89 c7             	mov    %rax,%rdi
    de37:	e8 26 b9 00 00       	call   19762 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    de3c:	48 8d 95 98 fc ff ff 	lea    -0x368(%rbp),%rdx
    de43:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
    de4a:	48 89 d6             	mov    %rdx,%rsi
    de4d:	48 89 c7             	mov    %rax,%rdi
    de50:	e8 c2 a6 00 00       	call   18517 <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    de55:	83 f0 01             	xor    $0x1,%eax
    de58:	84 c0                	test   %al,%al
    de5a:	0f 85 6f ff ff ff    	jne    ddcf <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x522>
    }
    for (const auto &extension : requiredExtensions) {
    de60:	48 8d 05 09 55 02 00 	lea    0x25509(%rip),%rax        # 33370 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    de67:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    de6b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    de6f:	48 89 c7             	mov    %rax,%rdi
    de72:	e8 fb a6 00 00       	call   18572 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    de77:	48 89 85 90 fc ff ff 	mov    %rax,-0x370(%rbp)
    de7e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    de82:	48 89 c7             	mov    %rax,%rdi
    de85:	e8 2c a7 00 00       	call   185b6 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    de8a:	48 89 85 88 fc ff ff 	mov    %rax,-0x378(%rbp)
    de91:	e9 0e 01 00 00       	jmp    dfa4 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6f7>
    de96:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    de9d:	48 89 c7             	mov    %rax,%rdi
    dea0:	e8 83 a7 00 00       	call   18628 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    dea5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      extensionsMap[extension]++;
    deac:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    deb3:	48 89 c7             	mov    %rax,%rdi
    deb6:	e8 f5 74 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    debb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    dec2:	48 8b 08             	mov    (%rax),%rcx
    dec5:	48 8d 95 1f fe ff ff 	lea    -0x1e1(%rbp),%rdx
    decc:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    ded3:	48 89 ce             	mov    %rcx,%rsi
    ded6:	48 89 c7             	mov    %rax,%rdi
    ded9:	e8 90 c1 ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    dede:	48 8d 95 f0 fd ff ff 	lea    -0x210(%rbp),%rdx
    dee5:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    deec:	48 89 d6             	mov    %rdx,%rsi
    deef:	48 89 c7             	mov    %rax,%rdi
    def2:	e8 01 b9 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    def7:	8b 10                	mov    (%rax),%edx
    def9:	83 c2 01             	add    $0x1,%edx
    defc:	89 10                	mov    %edx,(%rax)
    defe:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    df05:	48 89 c7             	mov    %rax,%rdi
    df08:	e8 cb bf ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    df0d:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    df14:	48 89 c7             	mov    %rax,%rdi
    df17:	e8 54 73 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (extensionsMap[extension] < 2) {
    df1c:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    df23:	48 89 c7             	mov    %rax,%rdi
    df26:	e8 85 74 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    df2b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    df32:	48 8b 08             	mov    (%rax),%rcx
    df35:	48 8d 95 4f fe ff ff 	lea    -0x1b1(%rbp),%rdx
    df3c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    df43:	48 89 ce             	mov    %rcx,%rsi
    df46:	48 89 c7             	mov    %rax,%rdi
    df49:	e8 20 c1 ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    df4e:	48 8d 95 20 fe ff ff 	lea    -0x1e0(%rbp),%rdx
    df55:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    df5c:	48 89 d6             	mov    %rdx,%rsi
    df5f:	48 89 c7             	mov    %rax,%rdi
    df62:	e8 91 b8 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    df67:	8b 00                	mov    (%rax),%eax
    df69:	83 f8 01             	cmp    $0x1,%eax
    df6c:	0f 96 c3             	setbe  %bl
    df6f:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    df76:	48 89 c7             	mov    %rax,%rdi
    df79:	e8 5a bf ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    df7e:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    df85:	48 89 c7             	mov    %rax,%rdi
    df88:	e8 e3 72 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    df8d:	84 db                	test   %bl,%bl
    df8f:	74 04                	je     df95 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x6e8>
        extensionsSupported = false;
    df91:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
    for (const auto &extension : requiredExtensions) {
    df95:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    df9c:	48 89 c7             	mov    %rax,%rdi
    df9f:	e8 58 b9 00 00       	call   198fc <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    dfa4:	48 8d 95 88 fc ff ff 	lea    -0x378(%rbp),%rdx
    dfab:	48 8d 85 90 fc ff ff 	lea    -0x370(%rbp),%rax
    dfb2:	48 89 d6             	mov    %rdx,%rsi
    dfb5:	48 89 c7             	mov    %rax,%rdi
    dfb8:	e8 22 a6 00 00       	call   185df <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    dfbd:	83 f0 01             	xor    $0x1,%eax
    dfc0:	84 c0                	test   %al,%al
    dfc2:	0f 85 ce fe ff ff    	jne    de96 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x5e9>
      }
    }
    if (!extensionsSupported) {
    dfc8:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    dfcc:	83 f0 01             	xor    $0x1,%eax
    dfcf:	84 c0                	test   %al,%al
    dfd1:	74 0a                	je     dfdd <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x730>
      continue;
    dfd3:	bb 00 00 00 00       	mov    $0x0,%ebx
    dfd8:	e9 48 0b 00 00       	jmp    eb25 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    }

    bool layerSupported = true;
    dfdd:	c6 45 ce 01          	movb   $0x1,-0x32(%rbp)
    dfe1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    dfe5:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    dfec:	48 8d 9d 30 fd ff ff 	lea    -0x2d0(%rbp),%rbx
      return properties;
    }

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> PhysicalDevice::enumerateDeviceLayerProperties() const
    {
      std::vector<VULKAN_HPP_NAMESPACE::LayerProperties> properties;
    dff3:	66 0f ef c0          	pxor   %xmm0,%xmm0
    dff7:	0f 11 03             	movups %xmm0,(%rbx)
    dffa:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      uint32_t                                           propertyCount;
      VkResult                                           result;
      do
      {
        result = getDispatcher()->vkEnumerateDeviceLayerProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, nullptr );
    dfff:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e006:	48 89 c7             	mov    %rax,%rdi
    e009:	e8 18 93 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e00e:	4c 8b 60 68          	mov    0x68(%rax),%r12
    e012:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e019:	48 89 c7             	mov    %rax,%rdi
    e01c:	e8 7d 10 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e021:	48 89 c1             	mov    %rax,%rcx
    e024:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e02b:	ba 00 00 00 00       	mov    $0x0,%edx
    e030:	48 89 c6             	mov    %rax,%rsi
    e033:	48 89 cf             	mov    %rcx,%rdi
    e036:	41 ff d4             	call   *%r12
    e039:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if ( ( result == VK_SUCCESS ) && propertyCount )
    e03f:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    e046:	75 66                	jne    e0ae <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
    e048:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e04e:	85 c0                	test   %eax,%eax
    e050:	74 5c                	je     e0ae <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x801>
        {
          properties.resize( propertyCount );
    e052:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e058:	89 c0                	mov    %eax,%eax
    e05a:	48 89 c6             	mov    %rax,%rsi
    e05d:	48 89 df             	mov    %rbx,%rdi
    e060:	e8 07 b1 00 00       	call   1916c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e065:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e06c:	48 89 c7             	mov    %rax,%rdi
    e06f:	e8 b2 92 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e074:	4c 8b 60 68          	mov    0x68(%rax),%r12
            static_cast<VkPhysicalDevice>( m_physicalDevice ), &propertyCount, reinterpret_cast<VkLayerProperties *>( properties.data() ) );
    e078:	48 89 df             	mov    %rbx,%rdi
    e07b:	e8 7e b1 00 00       	call   191fe <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>
    e080:	49 89 c5             	mov    %rax,%r13
          result = getDispatcher()->vkEnumerateDeviceLayerProperties(
    e083:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    e08a:	48 89 c7             	mov    %rax,%rdi
    e08d:	e8 0c 10 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e092:	48 89 c1             	mov    %rax,%rcx
    e095:	48 8d 85 b8 fc ff ff 	lea    -0x348(%rbp),%rax
    e09c:	4c 89 ea             	mov    %r13,%rdx
    e09f:	48 89 c6             	mov    %rax,%rsi
    e0a2:	48 89 cf             	mov    %rcx,%rdi
    e0a5:	41 ff d4             	call   *%r12
    e0a8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        }
      } while ( result == VK_INCOMPLETE );
    e0ae:	83 bd 44 ff ff ff 05 	cmpl   $0x5,-0xbc(%rbp)
    e0b5:	0f 84 44 ff ff ff    	je     dfff <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x752>
    e0bb:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    e0c1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    e0c7:	48 8d 05 f2 8f 01 00 	lea    0x18ff2(%rip),%rax        # 270c0 <_ZNSt8__detailL19__atomic_spin_countE+0x4404>
    e0ce:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    if ( result != Result::eSuccess )
    e0d5:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
    e0dc:	74 17                	je     e0f5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x848>
      throwResultException( result, message );
    e0de:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    e0e5:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    e0eb:	48 89 d6             	mov    %rdx,%rsi
    e0ee:	89 c7                	mov    %eax,%edi
    e0f0:	e8 91 e5 ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e0f5:	90                   	nop
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::enumerateDeviceLayerProperties" );
      VULKAN_HPP_ASSERT( propertyCount <= properties.size() );
    e0f6:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e0fc:	41 89 c4             	mov    %eax,%r12d
    e0ff:	48 89 df             	mov    %rbx,%rdi
    e102:	e8 1b b1 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    e107:	4c 39 e0             	cmp    %r12,%rax
    e10a:	73 28                	jae    e134 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x887>
    e10c:	48 8d 05 e5 8f 01 00 	lea    0x18fe5(%rip),%rax        # 270f8 <_ZNSt8__detailL19__atomic_spin_countE+0x443c>
    e113:	48 89 c1             	mov    %rax,%rcx
    e116:	ba cf 2a 00 00       	mov    $0x2acf,%edx
    e11b:	48 8d 05 b6 89 01 00 	lea    0x189b6(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
    e122:	48 89 c6             	mov    %rax,%rsi
    e125:	48 8d 05 0c 8e 01 00 	lea    0x18e0c(%rip),%rax        # 26f38 <_ZNSt8__detailL19__atomic_spin_countE+0x427c>
    e12c:	48 89 c7             	mov    %rax,%rdi
    e12f:	e8 dc 6f ff ff       	call   5110 <__assert_fail@plt>
      if ( propertyCount < properties.size() )
    e134:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e13a:	41 89 c4             	mov    %eax,%r12d
    e13d:	48 89 df             	mov    %rbx,%rdi
    e140:	e8 dd b0 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
    e145:	49 39 c4             	cmp    %rax,%r12
    e148:	0f 92 c0             	setb   %al
    e14b:	84 c0                	test   %al,%al
    e14d:	74 28                	je     e177 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
      {
        properties.resize( propertyCount );
    e14f:	8b 85 b8 fc ff ff    	mov    -0x348(%rbp),%eax
    e155:	89 c0                	mov    %eax,%eax
    e157:	48 89 c6             	mov    %rax,%rsi
    e15a:	48 89 df             	mov    %rbx,%rdi
    e15d:	e8 0a b0 00 00       	call   1916c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>
      }
      return properties;
    e162:	eb 13                	jmp    e177 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x8ca>
    }
    e164:	49 89 c4             	mov    %rax,%r12
    e167:	48 89 df             	mov    %rbx,%rdi
    e16a:	e8 b9 af 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    e16f:	4c 89 e3             	mov    %r12,%rbx
    e172:	e9 4e 0c 00 00       	jmp    edc5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      return properties;
    e177:	90                   	nop
    auto supportedLayers = physicalDevice.enumerateDeviceLayerProperties();
    std::map<std::string, uint32_t> layerMap{};
    e178:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e17c:	0f 29 85 a0 f8 ff ff 	movaps %xmm0,-0x760(%rbp)
    e183:	0f 29 85 b0 f8 ff ff 	movaps %xmm0,-0x750(%rbp)
    e18a:	0f 29 85 c0 f8 ff ff 	movaps %xmm0,-0x740(%rbp)
    e191:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e198:	48 89 c7             	mov    %rax,%rdi
    e19b:	e8 40 a3 00 00       	call   184e0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>
    for (const auto &layer : supportedLayers) {
    e1a0:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    e1a7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    e1ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e1af:	48 89 c7             	mov    %rax,%rdi
    e1b2:	e8 c5 b0 00 00       	call   1927c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
    e1b7:	48 89 85 80 fc ff ff 	mov    %rax,-0x380(%rbp)
    e1be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e1c2:	48 89 c7             	mov    %rax,%rdi
    e1c5:	e8 d8 b0 00 00       	call   192a2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
    e1ca:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    e1d1:	eb 67                	jmp    e23a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x98d>
    e1d3:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e1da:	48 89 c7             	mov    %rax,%rdi
    e1dd:	e8 d8 9b 00 00       	call   17dba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
    e1e2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      layerMap[layer.layerName]++;
    e1e6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    e1ea:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    e1f1:	48 89 d6             	mov    %rdx,%rsi
    e1f4:	48 89 c7             	mov    %rax,%rdi
    e1f7:	e8 8a b5 00 00       	call   19786 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>
    e1fc:	48 8d 95 50 fe ff ff 	lea    -0x1b0(%rbp),%rdx
    e203:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e20a:	48 89 d6             	mov    %rdx,%rsi
    e20d:	48 89 c7             	mov    %rax,%rdi
    e210:	e8 e3 b5 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e215:	8b 10                	mov    (%rax),%edx
    e217:	83 c2 01             	add    $0x1,%edx
    e21a:	89 10                	mov    %edx,(%rax)
    e21c:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    e223:	48 89 c7             	mov    %rax,%rdi
    e226:	e8 ad bc ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    for (const auto &layer : supportedLayers) {
    e22b:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e232:	48 89 c7             	mov    %rax,%rdi
    e235:	e8 92 b0 00 00       	call   192cc <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
    e23a:	48 8d 95 78 fc ff ff 	lea    -0x388(%rbp),%rdx
    e241:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
    e248:	48 89 d6             	mov    %rdx,%rsi
    e24b:	48 89 c7             	mov    %rax,%rdi
    e24e:	e8 1d 9b 00 00       	call   17d70 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    e253:	83 f0 01             	xor    $0x1,%eax
    e256:	84 c0                	test   %al,%al
    e258:	0f 85 75 ff ff ff    	jne    e1d3 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x926>
    }
    for (const auto &layer : instanceLayers) {
    e25e:	48 8d 05 2b 51 02 00 	lea    0x2512b(%rip),%rax        # 33390 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e265:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    e269:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    e26d:	48 89 c7             	mov    %rax,%rdi
    e270:	e8 fd a2 00 00       	call   18572 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>
    e275:	48 89 85 70 fc ff ff 	mov    %rax,-0x390(%rbp)
    e27c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    e280:	48 89 c7             	mov    %rax,%rdi
    e283:	e8 2e a3 00 00       	call   185b6 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>
    e288:	48 89 85 68 fc ff ff 	mov    %rax,-0x398(%rbp)
    e28f:	e9 05 01 00 00       	jmp    e399 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xaec>
    e294:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e29b:	48 89 c7             	mov    %rax,%rdi
    e29e:	e8 85 a3 00 00       	call   18628 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>
    e2a3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      layerMap[layer]++;
    e2a7:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    e2ae:	48 89 c7             	mov    %rax,%rdi
    e2b1:	e8 fa 70 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e2b6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e2ba:	48 8b 08             	mov    (%rax),%rcx
    e2bd:	48 8d 95 9f fe ff ff 	lea    -0x161(%rbp),%rdx
    e2c4:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    e2cb:	48 89 ce             	mov    %rcx,%rsi
    e2ce:	48 89 c7             	mov    %rax,%rdi
    e2d1:	e8 98 bd ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e2d6:	48 8d 95 70 fe ff ff 	lea    -0x190(%rbp),%rdx
    e2dd:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e2e4:	48 89 d6             	mov    %rdx,%rsi
    e2e7:	48 89 c7             	mov    %rax,%rdi
    e2ea:	e8 09 b5 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e2ef:	8b 10                	mov    (%rax),%edx
    e2f1:	83 c2 01             	add    $0x1,%edx
    e2f4:	89 10                	mov    %edx,(%rax)
    e2f6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    e2fd:	48 89 c7             	mov    %rax,%rdi
    e300:	e8 d3 bb ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e305:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    e30c:	48 89 c7             	mov    %rax,%rdi
    e30f:	e8 5c 6f ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
      if (layerMap[layer] < 2) {
    e314:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    e31b:	48 89 c7             	mov    %rax,%rdi
    e31e:	e8 8d 70 ff ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
    e323:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e327:	48 8b 08             	mov    (%rax),%rcx
    e32a:	48 8d 95 c3 fe ff ff 	lea    -0x13d(%rbp),%rdx
    e331:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    e338:	48 89 ce             	mov    %rcx,%rsi
    e33b:	48 89 c7             	mov    %rax,%rdi
    e33e:	e8 2b bd ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    e343:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    e34a:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    e351:	48 89 d6             	mov    %rdx,%rsi
    e354:	48 89 c7             	mov    %rax,%rdi
    e357:	e8 9c b4 00 00       	call   197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>
    e35c:	8b 00                	mov    (%rax),%eax
    e35e:	83 f8 01             	cmp    $0x1,%eax
    e361:	0f 96 c3             	setbe  %bl
    e364:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    e36b:	48 89 c7             	mov    %rax,%rdi
    e36e:	e8 65 bb ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    e373:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    e37a:	48 89 c7             	mov    %rax,%rdi
    e37d:	e8 ee 6e ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    e382:	84 db                	test   %bl,%bl
    e384:	74 04                	je     e38a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xadd>
        layerSupported = false;
    e386:	c6 45 ce 00          	movb   $0x0,-0x32(%rbp)
    for (const auto &layer : instanceLayers) {
    e38a:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e391:	48 89 c7             	mov    %rax,%rdi
    e394:	e8 63 b5 00 00       	call   198fc <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>
    e399:	48 8d 95 68 fc ff ff 	lea    -0x398(%rbp),%rdx
    e3a0:	48 8d 85 70 fc ff ff 	lea    -0x390(%rbp),%rax
    e3a7:	48 89 d6             	mov    %rdx,%rsi
    e3aa:	48 89 c7             	mov    %rax,%rdi
    e3ad:	e8 2d a2 00 00       	call   185df <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    e3b2:	83 f0 01             	xor    $0x1,%eax
    e3b5:	84 c0                	test   %al,%al
    e3b7:	0f 85 d7 fe ff ff    	jne    e294 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x9e7>
      }
    }
    if (!layerSupported) {
    e3bd:	0f b6 45 ce          	movzbl -0x32(%rbp),%eax
    e3c1:	83 f0 01             	xor    $0x1,%eax
    e3c4:	84 c0                	test   %al,%al
    e3c6:	74 0a                	je     e3d2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb25>
      continue;
    e3c8:	bb 00 00 00 00       	mov    $0x0,%ebx
    e3cd:	e9 15 07 00 00       	jmp    eae7 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    e3d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e3d6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
      VULKAN_HPP_NAMESPACE::PhysicalDeviceFeatures features;
    e3dd:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    e3e4:	b8 00 00 00 00       	mov    $0x0,%eax
    e3e9:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    e3ee:	48 89 d7             	mov    %rdx,%rdi
    e3f1:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    e3f4:	48 89 fa             	mov    %rdi,%rdx
    e3f7:	89 02                	mov    %eax,(%rdx)
    e3f9:	48 83 c2 04          	add    $0x4,%rdx
      getDispatcher()->vkGetPhysicalDeviceFeatures( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e3fd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    e404:	48 89 c7             	mov    %rax,%rdi
    e407:	e8 1a 8f 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e40c:	48 8b 58 20          	mov    0x20(%rax),%rbx
    e410:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    e417:	48 89 c7             	mov    %rax,%rdi
    e41a:	e8 7f 0c 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e41f:	48 89 c2             	mov    %rax,%rdx
    e422:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    e429:	48 89 c6             	mov    %rax,%rsi
    e42c:	48 89 d7             	mov    %rdx,%rdi
    e42f:	ff d3                	call   *%rbx
      return features;
    e431:	90                   	nop
    }

    if (auto features = physicalDevice.getFeatures();
        !features.samplerAnisotropy) {
    e432:	8b 85 6c f9 ff ff    	mov    -0x694(%rbp),%eax
    if (auto features = physicalDevice.getFeatures();
    e438:	85 c0                	test   %eax,%eax
    e43a:	75 0a                	jne    e446 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xb99>
    e43c:	bb 00 00 00 00       	mov    $0x0,%ebx
    e441:	e9 a1 06 00 00       	jmp    eae7 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x123a>
    e446:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e44a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    e451:	48 8d 9d 10 fd ff ff 	lea    -0x2f0(%rbp),%rbx
      std::vector<VULKAN_HPP_NAMESPACE::QueueFamilyProperties> queueFamilyProperties;
    e458:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e45c:	0f 11 03             	movups %xmm0,(%rbx)
    e45f:	66 0f d6 43 10       	movq   %xmm0,0x10(%rbx)
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ), &queueFamilyPropertyCount, nullptr );
    e464:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e46b:	48 89 c7             	mov    %rax,%rdi
    e46e:	e8 b3 8e 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e473:	4c 8b 60 40          	mov    0x40(%rax),%r12
    e477:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e47e:	48 89 c7             	mov    %rax,%rdi
    e481:	e8 18 0c 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e486:	48 89 c1             	mov    %rax,%rcx
    e489:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    e490:	ba 00 00 00 00       	mov    $0x0,%edx
    e495:	48 89 c6             	mov    %rax,%rsi
    e498:	48 89 cf             	mov    %rcx,%rdi
    e49b:	41 ff d4             	call   *%r12
      queueFamilyProperties.resize( queueFamilyPropertyCount );
    e49e:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e4a4:	89 c0                	mov    %eax,%eax
    e4a6:	48 89 c6             	mov    %rax,%rsi
    e4a9:	48 89 df             	mov    %rbx,%rdi
    e4ac:	e8 7b a9 00 00       	call   18e2c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e4b1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e4b8:	48 89 c7             	mov    %rax,%rdi
    e4bb:	e8 66 8e 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e4c0:	4c 8b 60 40          	mov    0x40(%rax),%r12
                                                                 reinterpret_cast<VkQueueFamilyProperties *>( queueFamilyProperties.data() ) );
    e4c4:	48 89 df             	mov    %rbx,%rdi
    e4c7:	e8 f0 a9 00 00       	call   18ebc <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>
    e4cc:	49 89 c5             	mov    %rax,%r13
      getDispatcher()->vkGetPhysicalDeviceQueueFamilyProperties( static_cast<VkPhysicalDevice>( m_physicalDevice ),
    e4cf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    e4d6:	48 89 c7             	mov    %rax,%rdi
    e4d9:	e8 c0 0b 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e4de:	48 89 c1             	mov    %rax,%rcx
    e4e1:	48 8d 85 bc fc ff ff 	lea    -0x344(%rbp),%rax
    e4e8:	4c 89 ea             	mov    %r13,%rdx
    e4eb:	48 89 c6             	mov    %rax,%rsi
    e4ee:	48 89 cf             	mov    %rcx,%rdi
    e4f1:	41 ff d4             	call   *%r12
      VULKAN_HPP_ASSERT( queueFamilyPropertyCount <= queueFamilyProperties.size() );
    e4f4:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e4fa:	41 89 c4             	mov    %eax,%r12d
    e4fd:	48 89 df             	mov    %rbx,%rdi
    e500:	e8 db a9 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    e505:	4c 39 e0             	cmp    %r12,%rax
    e508:	73 28                	jae    e532 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xc85>
    e50a:	48 8d 05 4f 8c 01 00 	lea    0x18c4f(%rip),%rax        # 27160 <_ZNSt8__detailL19__atomic_spin_countE+0x44a4>
    e511:	48 89 c1             	mov    %rax,%rcx
    e514:	ba 4d 2a 00 00       	mov    $0x2a4d,%edx
    e519:	48 8d 05 b8 85 01 00 	lea    0x185b8(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
    e520:	48 89 c6             	mov    %rax,%rsi
    e523:	48 8d 05 9e 8c 01 00 	lea    0x18c9e(%rip),%rax        # 271c8 <_ZNSt8__detailL19__atomic_spin_countE+0x450c>
    e52a:	48 89 c7             	mov    %rax,%rdi
    e52d:	e8 de 6b ff ff       	call   5110 <__assert_fail@plt>
      if ( queueFamilyPropertyCount < queueFamilyProperties.size() )
    e532:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e538:	41 89 c4             	mov    %eax,%r12d
    e53b:	48 89 df             	mov    %rbx,%rdi
    e53e:	e8 9d a9 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    e543:	49 39 c4             	cmp    %rax,%r12
    e546:	0f 92 c0             	setb   %al
    e549:	84 c0                	test   %al,%al
    e54b:	74 28                	je     e575 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
        queueFamilyProperties.resize( queueFamilyPropertyCount );
    e54d:	8b 85 bc fc ff ff    	mov    -0x344(%rbp),%eax
    e553:	89 c0                	mov    %eax,%eax
    e555:	48 89 c6             	mov    %rax,%rsi
    e558:	48 89 df             	mov    %rbx,%rdi
    e55b:	e8 cc a8 00 00       	call   18e2c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>
      return queueFamilyProperties;
    e560:	eb 13                	jmp    e575 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xcc8>
    }
    e562:	49 89 c4             	mov    %rax,%r12
    e565:	48 89 df             	mov    %rbx,%rdi
    e568:	e8 7b a8 00 00       	call   18de8 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    e56d:	4c 89 e3             	mov    %r12,%rbx
    e570:	e9 2d 08 00 00       	jmp    eda2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      return queueFamilyProperties;
    e575:	90                   	nop
      continue;
    }

    auto queueFamilies = physicalDevice.getQueueFamilyProperties();
    std::optional<uint32_t> selectedQueueFamilyIndex;
    e576:	48 c7 85 08 fd ff ff 	movq   $0x0,-0x2f8(%rbp)
    e57d:	00 00 00 00 
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    e581:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    e588:	00 
    e589:	e9 17 02 00 00       	jmp    e7a5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef8>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e58e:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    e595:	be 01 00 00 00       	mov    $0x1,%esi
    e59a:	48 89 c7             	mov    %rax,%rdi
    e59d:	e8 60 a1 00 00       	call   18702 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    e5a2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e5a6:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e5ad:	48 89 d6             	mov    %rdx,%rsi
    e5b0:	48 89 c7             	mov    %rax,%rdi
    e5b3:	e8 64 b3 00 00       	call   1991c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    e5b8:	48 89 c2             	mov    %rax,%rdx
    e5bb:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    e5c2:	48 89 c6             	mov    %rax,%rsi
    e5c5:	48 89 d7             	mov    %rdx,%rdi
    e5c8:	e8 4d a1 00 00       	call   1871a <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    e5cd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    e5d3:	48 8d 85 c4 fe ff ff 	lea    -0x13c(%rbp),%rax
    e5da:	48 89 c7             	mov    %rax,%rdi
    e5dd:	e8 6a a1 00 00       	call   1874c <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
    e5e2:	84 c0                	test   %al,%al
    e5e4:	0f 84 7c 01 00 00    	je     e766 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    e5ea:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    e5f1:	be 02 00 00 00       	mov    $0x2,%esi
    e5f6:	48 89 c7             	mov    %rax,%rdi
    e5f9:	e8 04 a1 00 00       	call   18702 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>
    e5fe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e602:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e609:	48 89 d6             	mov    %rdx,%rsi
    e60c:	48 89 c7             	mov    %rax,%rdi
    e60f:	e8 08 b3 00 00       	call   1991c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>
    e614:	48 89 c2             	mov    %rax,%rdx
    e617:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    e61e:	48 89 c6             	mov    %rax,%rsi
    e621:	48 89 d7             	mov    %rdx,%rdi
    e624:	e8 f1 a0 00 00       	call   1871a <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>
    e629:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    e62f:	48 8d 85 cc fe ff ff 	lea    -0x134(%rbp),%rax
    e636:	48 89 c7             	mov    %rax,%rdi
    e639:	e8 0e a1 00 00       	call   1874c <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e63e:	84 c0                	test   %al,%al
    e640:	0f 84 20 01 00 00    	je     e766 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
                                               *surface))) {
    e646:	48 8b 85 28 f8 ff ff 	mov    -0x7d8(%rbp),%rax
    e64d:	48 89 c7             	mov    %rax,%rdi
    e650:	e8 e5 94 00 00       	call   17b3a <_ZNK2vk4raii10SurfaceKHRdeEv>
          (physicalDevice.getSurfaceSupportKHR(static_cast<uint32_t>(i),
    e655:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e659:	89 d1                	mov    %edx,%ecx
    e65b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    e65f:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
    e666:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%rbp)
    e66c:	48 8b 00             	mov    (%rax),%rax
    e66f:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
    //=== VK_KHR_surface ===

    VULKAN_HPP_NODISCARD VULKAN_HPP_INLINE VULKAN_HPP_NAMESPACE::Bool32 PhysicalDevice::getSurfaceSupportKHR( uint32_t                         queueFamilyIndex,
                                                                                                              VULKAN_HPP_NAMESPACE::SurfaceKHR surface ) const
    {
      VULKAN_HPP_ASSERT( getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR &&
    e676:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e67d:	48 89 c7             	mov    %rax,%rdi
    e680:	e8 a1 8c 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e685:	48 8b 80 78 02 00 00 	mov    0x278(%rax),%rax
    e68c:	48 85 c0             	test   %rax,%rax
    e68f:	75 28                	jne    e6b9 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe0c>
    e691:	48 8d 05 70 8b 01 00 	lea    0x18b70(%rip),%rax        # 27208 <_ZNSt8__detailL19__atomic_spin_countE+0x454c>
    e698:	48 89 c1             	mov    %rax,%rcx
    e69b:	ba 0b 32 00 00       	mov    $0x320b,%edx
    e6a0:	48 8d 05 31 84 01 00 	lea    0x18431(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
    e6a7:	48 89 c6             	mov    %rax,%rsi
    e6aa:	48 8d 05 b7 8b 01 00 	lea    0x18bb7(%rip),%rax        # 27268 <_ZNSt8__detailL19__atomic_spin_countE+0x45ac>
    e6b1:	48 89 c7             	mov    %rax,%rdi
    e6b4:	e8 57 6a ff ff       	call   5110 <__assert_fail@plt>
                         "Function <vkGetPhysicalDeviceSurfaceSupportKHR> needs extension <VK_KHR_surface> enabled!" );

      VULKAN_HPP_NAMESPACE::Bool32 supported;
      VkResult                     result = getDispatcher()->vkGetPhysicalDeviceSurfaceSupportKHR(
    e6b9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e6c0:	48 89 c7             	mov    %rax,%rdi
    e6c3:	e8 5e 8c 00 00       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
    e6c8:	48 8b 98 78 02 00 00 	mov    0x278(%rax),%rbx
    e6cf:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
    e6d6:	48 89 c7             	mov    %rax,%rdi
    e6d9:	e8 5a a8 ff ff       	call   8f38 <_ZNK2vk10SurfaceKHRcvP14VkSurfaceKHR_TEv>
    e6de:	49 89 c4             	mov    %rax,%r12
    e6e1:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    e6e8:	48 89 c7             	mov    %rax,%rdi
    e6eb:	e8 ae 09 00 00       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
    e6f0:	48 89 c7             	mov    %rax,%rdi
    e6f3:	48 8d 95 5c fc ff ff 	lea    -0x3a4(%rbp),%rdx
    e6fa:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    e700:	48 89 d1             	mov    %rdx,%rcx
    e703:	4c 89 e2             	mov    %r12,%rdx
    e706:	89 c6                	mov    %eax,%esi
    e708:	ff d3                	call   *%rbx
    e70a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    e710:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    e716:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    e71c:	48 8d 05 dd 8b 01 00 	lea    0x18bdd(%rip),%rax        # 27300 <_ZNSt8__detailL19__atomic_spin_countE+0x4644>
    e723:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    if ( result != Result::eSuccess )
    e72a:	83 bd 14 ff ff ff 00 	cmpl   $0x0,-0xec(%rbp)
    e731:	74 17                	je     e74a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xe9d>
      throwResultException( result, message );
    e733:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    e73a:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    e740:	48 89 d6             	mov    %rdx,%rsi
    e743:	89 c7                	mov    %eax,%edi
    e745:	e8 3c df ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
  }
    e74a:	90                   	nop
        static_cast<VkPhysicalDevice>( m_physicalDevice ), queueFamilyIndex, static_cast<VkSurfaceKHR>( surface ), reinterpret_cast<VkBool32 *>( &supported ) );
      resultCheck( static_cast<VULKAN_HPP_NAMESPACE::Result>( result ), VULKAN_HPP_NAMESPACE_STRING "::PhysicalDevice::getSurfaceSupportKHR" );

      return supported;
    e74b:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
          (queueFamilies[i].queueFlags & vk::QueueFlagBits::eCompute) &&
    e751:	85 c0                	test   %eax,%eax
    e753:	74 11                	je     e766 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb9>
    e755:	eb 08                	jmp    e75f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xeb2>
    e757:	48 89 c3             	mov    %rax,%rbx
    e75a:	e9 2f 06 00 00       	jmp    ed8e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    e75f:	b8 01 00 00 00       	mov    $0x1,%eax
    e764:	eb 05                	jmp    e76b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xebe>
    e766:	b8 00 00 00 00       	mov    $0x0,%eax
      if ((queueFamilies[i].queueFlags & vk::QueueFlagBits::eGraphics) &&
    e76b:	84 c0                	test   %al,%al
    e76d:	74 31                	je     e7a0 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xef3>
        selectedQueueFamilyIndex = static_cast<uint32_t>(i);
    e76f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e773:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
    e779:	48 8d 95 dc fe ff ff 	lea    -0x124(%rbp),%rdx
    e780:	48 8d 85 d4 fe ff ff 	lea    -0x12c(%rbp),%rax
    e787:	48 89 d6             	mov    %rdx,%rsi
    e78a:	48 89 c7             	mov    %rax,%rdi
    e78d:	e8 b4 b1 00 00       	call   19946 <_ZNSt8optionalIjEC1IjLb1EEEOT_>
    e792:	48 8b 85 d4 fe ff ff 	mov    -0x12c(%rbp),%rax
    e799:	48 89 85 08 fd ff ff 	mov    %rax,-0x2f8(%rbp)
    for (size_t i = 0; i < queueFamilies.size(); ++i) {
    e7a0:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
    e7a5:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    e7ac:	48 89 c7             	mov    %rax,%rdi
    e7af:	e8 2c a7 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
    e7b4:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    e7b8:	0f 92 c0             	setb   %al
    e7bb:	84 c0                	test   %al,%al
    e7bd:	0f 85 cb fd ff ff    	jne    e58e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xce1>
      }
    }
    if (!selectedQueueFamilyIndex.has_value()) {
    e7c3:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    e7ca:	48 89 c7             	mov    %rax,%rdi
    e7cd:	e8 68 9e 00 00       	call   1863a <_ZNKSt8optionalIjE9has_valueEv>
    e7d2:	83 f0 01             	xor    $0x1,%eax
    e7d5:	84 c0                	test   %al,%al
    e7d7:	74 3b                	je     e814 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0xf67>
      throw std::runtime_error("Failed to select queue families");
    e7d9:	bf 10 00 00 00       	mov    $0x10,%edi
    e7de:	e8 ed 68 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    e7e3:	48 89 c3             	mov    %rax,%rbx
    e7e6:	48 8d 05 43 8b 01 00 	lea    0x18b43(%rip),%rax        # 27330 <_ZNSt8__detailL19__atomic_spin_countE+0x4674>
    e7ed:	48 89 c6             	mov    %rax,%rsi
    e7f0:	48 89 df             	mov    %rbx,%rdi
    e7f3:	e8 98 68 ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    e7f8:	48 8b 05 b1 47 02 00 	mov    0x247b1(%rip),%rax        # 32fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    e7ff:	48 89 c2             	mov    %rax,%rdx
    e802:	48 8d 05 f7 41 02 00 	lea    0x241f7(%rip),%rax        # 32a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    e809:	48 89 c6             	mov    %rax,%rsi
    e80c:	48 89 df             	mov    %rbx,%rdi
    e80f:	e8 6c 6b ff ff       	call   5380 <__cxa_throw@plt>
    }

    const float queuePriorities = 1.0f;
    e814:	f3 0f 10 05 68 8c 01 	movss  0x18c68(%rip),%xmm0        # 27484 <_ZNSt8__detailL19__atomic_spin_countE+0x47c8>
    e81b:	00 
    e81c:	f3 0f 11 85 04 fd ff 	movss  %xmm0,-0x2fc(%rbp)
    e823:	ff 
    vk::DeviceQueueCreateInfo queueInfo{
    e824:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e828:	0f 29 85 40 f8 ff ff 	movaps %xmm0,-0x7c0(%rbp)
    e82f:	0f 29 85 50 f8 ff ff 	movaps %xmm0,-0x7b0(%rbp)
    e836:	66 0f d6 85 60 f8 ff 	movq   %xmm0,-0x7a0(%rbp)
    e83d:	ff 
    e83e:	c7 85 40 f8 ff ff 02 	movl   $0x2,-0x7c0(%rbp)
    e845:	00 00 00 
    e848:	c7 85 58 f8 ff ff 01 	movl   $0x1,-0x7a8(%rbp)
    e84f:	00 00 00 
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
        .queueCount{1},
        .pQueuePriorities{&queuePriorities},
    }; // namespace rtvc
    e852:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    e859:	48 83 c0 10          	add    $0x10,%rax
    e85d:	48 89 c7             	mov    %rax,%rdi
    e860:	e8 33 9e 00 00       	call   18698 <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>
        .queueFamilyIndex{selectedQueueFamilyIndex.value()},
    e865:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    e86c:	48 89 c7             	mov    %rax,%rdi
    e86f:	e8 f2 9d 00 00       	call   18666 <_ZNRSt8optionalIjE5valueEv>
    e874:	8b 00                	mov    (%rax),%eax
    }; // namespace rtvc
    e876:	89 85 54 f8 ff ff    	mov    %eax,-0x7ac(%rbp)
    e87c:	48 8d 85 04 fd ff ff 	lea    -0x2fc(%rbp),%rax
    e883:	48 89 85 60 f8 ff ff 	mov    %rax,-0x7a0(%rbp)

    vk::PhysicalDeviceFeatures features{};
    e88a:	48 8d 95 20 f9 ff ff 	lea    -0x6e0(%rbp),%rdx
    e891:	b8 00 00 00 00       	mov    $0x0,%eax
    e896:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    e89b:	48 89 d7             	mov    %rdx,%rdi
    e89e:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    e8a1:	48 89 fa             	mov    %rdi,%rdx
    e8a4:	89 02                	mov    %eax,(%rdx)
    e8a6:	48 83 c2 04          	add    $0x4,%rdx
    // features.samplerAnisotropy = VK_TRUE;
    // features.sample

    vk::DeviceCreateInfo deviceInfo{
    e8aa:	66 0f ef c0          	pxor   %xmm0,%xmm0
    e8ae:	0f 29 85 d0 f8 ff ff 	movaps %xmm0,-0x730(%rbp)
    e8b5:	0f 29 85 e0 f8 ff ff 	movaps %xmm0,-0x720(%rbp)
    e8bc:	0f 29 85 f0 f8 ff ff 	movaps %xmm0,-0x710(%rbp)
    e8c3:	0f 29 85 00 f9 ff ff 	movaps %xmm0,-0x700(%rbp)
    e8ca:	66 0f d6 85 10 f9 ff 	movq   %xmm0,-0x6f0(%rbp)
    e8d1:	ff 
    e8d2:	c7 85 d0 f8 ff ff 03 	movl   $0x3,-0x730(%rbp)
    e8d9:	00 00 00 
    e8dc:	c7 85 e4 f8 ff ff 01 	movl   $0x1,-0x71c(%rbp)
    e8e3:	00 00 00 
        .ppEnabledLayerNames{instanceLayers.data()},
        .enabledExtensionCount{
            static_cast<uint32_t>(requiredExtensions.size())},
        .ppEnabledExtensionNames{requiredExtensions.data()},
        .pEnabledFeatures{&features},
    };
    e8e6:	48 8d 85 d0 f8 ff ff 	lea    -0x730(%rbp),%rax
    e8ed:	48 83 c0 10          	add    $0x10,%rax
    e8f1:	48 89 c7             	mov    %rax,%rdi
    e8f4:	e8 d9 9d 00 00       	call   186d2 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>
    e8f9:	48 8d 85 40 f8 ff ff 	lea    -0x7c0(%rbp),%rax
    e900:	48 89 85 e8 f8 ff ff 	mov    %rax,-0x718(%rbp)
        .enabledLayerCount{static_cast<uint32_t>(instanceLayers.size())},
    e907:	48 8d 05 82 4a 02 00 	lea    0x24a82(%rip),%rax        # 33390 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e90e:	48 89 c7             	mov    %rax,%rdi
    e911:	e8 82 99 00 00       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    e916:	89 85 f0 f8 ff ff    	mov    %eax,-0x710(%rbp)
        .ppEnabledLayerNames{instanceLayers.data()},
    e91c:	48 8d 05 6d 4a 02 00 	lea    0x24a6d(%rip),%rax        # 33390 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    e923:	48 89 c7             	mov    %rax,%rdi
    e926:	e8 83 9d 00 00       	call   186ae <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    e92b:	48 89 85 f8 f8 ff ff 	mov    %rax,-0x708(%rbp)
            static_cast<uint32_t>(requiredExtensions.size())},
    e932:	48 8d 05 37 4a 02 00 	lea    0x24a37(%rip),%rax        # 33370 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e939:	48 89 c7             	mov    %rax,%rdi
    e93c:	e8 57 99 00 00       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
    };
    e941:	89 85 00 f9 ff ff    	mov    %eax,-0x700(%rbp)
        .ppEnabledExtensionNames{requiredExtensions.data()},
    e947:	48 8d 05 22 4a 02 00 	lea    0x24a22(%rip),%rax        # 33370 <_ZZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    e94e:	48 89 c7             	mov    %rax,%rdi
    e951:	e8 58 9d 00 00       	call   186ae <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>
    };
    e956:	48 89 85 08 f9 ff ff 	mov    %rax,-0x6f8(%rbp)
    e95d:	48 8d 85 20 f9 ff ff 	lea    -0x6e0(%rbp),%rax
    e964:	48 89 85 10 f9 ff ff 	mov    %rax,-0x6f0(%rbp)

    auto device = physicalDevice.createDevice(deviceInfo);
    e96b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    e972:	be 00 00 00 00       	mov    $0x0,%esi
    e977:	48 89 c7             	mov    %rax,%rdi
    e97a:	e8 f9 ab 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    e97f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e983:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    e98a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    e991:	48 89 85 c0 fc ff ff 	mov    %rax,-0x340(%rbp)
    e998:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    e99f:	48 8b 8d c0 fc ff ff 	mov    -0x340(%rbp),%rcx
    e9a6:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    e9ad:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    e9b4:	48 89 c7             	mov    %rax,%rdi
    e9b7:	e8 a0 8c 00 00       	call   1765c <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    e9bc:	90                   	nop
    auto queue = device.getQueue(selectedQueueFamilyIndex.value(), 0);
    e9bd:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    e9c4:	48 89 c7             	mov    %rax,%rdi
    e9c7:	e8 9a 9c 00 00       	call   18666 <_ZNRSt8optionalIjE5valueEv>
    e9cc:	8b 00                	mov    (%rax),%eax
    e9ce:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
    e9d4:	c7 85 f8 fe ff ff 00 	movl   $0x0,-0x108(%rbp)
    e9db:	00 00 00 
    e9de:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
      return VULKAN_HPP_RAII_NAMESPACE::Queue( *this, queueFamilyIndex, queueIndex );
    e9e5:	8b 8d f8 fe ff ff    	mov    -0x108(%rbp),%ecx
    e9eb:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
    e9f1:	48 8d b5 e0 fc ff ff 	lea    -0x320(%rbp),%rsi
    e9f8:	48 89 c7             	mov    %rax,%rdi
    e9fb:	e8 be 8f 00 00       	call   179be <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>
    ea00:	90                   	nop

    return {
        selectedQueueFamilyIndex.value(),
    ea01:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
    ea08:	48 89 c7             	mov    %rax,%rdi
    ea0b:	e8 56 9c 00 00       	call   18666 <_ZNRSt8optionalIjE5valueEv>
    ea10:	8b 10                	mov    (%rax),%edx
        physicalDevice,
        physicalDevice.createDevice(deviceInfo),
    };
  }
  throw std::runtime_error("Failed to create a logical device");
}
    ea12:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ea19:	89 10                	mov    %edx,(%rax)
    ea1b:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ea22:	48 8d 50 08          	lea    0x8(%rax),%rdx
    ea26:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    ea2d:	48 89 c6             	mov    %rax,%rsi
    ea30:	48 89 d7             	mov    %rdx,%rdi
    ea33:	e8 0e 90 00 00       	call   17a46 <_ZN2vk4raii5QueueC1ERKS1_>
    ea38:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    ea3e:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ea45:	48 8d 50 18          	lea    0x18(%rax),%rdx
    ea49:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ea4d:	48 89 c6             	mov    %rax,%rsi
    ea50:	48 89 d7             	mov    %rdx,%rdi
    ea53:	e8 fe 87 00 00       	call   17256 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>
    ea58:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    ea5e:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    ea65:	be 00 00 00 00       	mov    $0x0,%esi
    ea6a:	48 89 c7             	mov    %rax,%rdi
    ea6d:	e8 06 ab 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    ea72:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ea76:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    ea7d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    ea84:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    ea8b:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ea92:	48 8d 78 28          	lea    0x28(%rax),%rdi
      return VULKAN_HPP_RAII_NAMESPACE::Device( *this, createInfo, allocator );
    ea96:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
    ea9d:	48 8d 95 d0 f8 ff ff 	lea    -0x730(%rbp),%rdx
    eaa4:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    eaab:	48 89 c6             	mov    %rax,%rsi
    eaae:	e8 a9 8b 00 00       	call   1765c <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
    eab3:	90                   	nop
    };
    eab4:	90                   	nop
  }
    eab5:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    eabc:	48 89 c7             	mov    %rax,%rdi
    eabf:	e8 5e ad ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    eac4:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    eacb:	48 89 c7             	mov    %rax,%rdi
    eace:	e8 e5 a9 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    ead3:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    eada:	48 89 c7             	mov    %rax,%rdi
    eadd:	e8 06 a3 00 00       	call   18de8 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    eae2:	bb 01 00 00 00       	mov    $0x1,%ebx
    eae7:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    eaee:	48 89 c7             	mov    %rax,%rdi
    eaf1:	e8 06 9a 00 00       	call   184fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    eaf6:	85 db                	test   %ebx,%ebx
    eaf8:	75 07                	jne    eb01 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1254>
    eafa:	bb 00 00 00 00       	mov    $0x0,%ebx
    eaff:	eb 05                	jmp    eb06 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1259>
    eb01:	bb 01 00 00 00       	mov    $0x1,%ebx
    eb06:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    eb0d:	48 89 c7             	mov    %rax,%rdi
    eb10:	e8 13 a6 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    eb15:	85 db                	test   %ebx,%ebx
    eb17:	75 07                	jne    eb20 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1273>
    eb19:	bb 00 00 00 00       	mov    $0x0,%ebx
    eb1e:	eb 05                	jmp    eb25 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1278>
    eb20:	bb 01 00 00 00       	mov    $0x1,%ebx
    eb25:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    eb2c:	48 89 c7             	mov    %rax,%rdi
    eb2f:	e8 c8 99 00 00       	call   184fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    eb34:	85 db                	test   %ebx,%ebx
    eb36:	75 07                	jne    eb3f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1292>
    eb38:	bb 00 00 00 00       	mov    $0x0,%ebx
    eb3d:	eb 05                	jmp    eb44 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1297>
    eb3f:	bb 01 00 00 00       	mov    $0x1,%ebx
    eb44:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    eb4b:	48 89 c7             	mov    %rax,%rdi
    eb4e:	e8 1f a4 00 00       	call   18f72 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    eb53:	85 db                	test   %ebx,%ebx
    eb55:	75 14                	jne    eb6b <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12be>
    eb57:	eb 01                	jmp    eb5a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12ad>
      continue;
    eb59:	90                   	nop
  for (const auto &physicalDevice : physicalDevices) {
    eb5a:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    eb61:	48 89 c7             	mov    %rax,%rdi
    eb64:	e8 f1 aa 00 00       	call   1965a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>
    eb69:	eb 14                	jmp    eb7f <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x12d2>
}
    eb6b:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    eb72:	48 89 c7             	mov    %rax,%rdi
    eb75:	e8 d2 8f 00 00       	call   17b4c <_ZN2vk4raii15PhysicalDevicesD1Ev>
    };
    eb7a:	e9 93 02 00 00       	jmp    ee12 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1565>
  for (const auto &physicalDevice : physicalDevices) {
    eb7f:	48 8d 95 70 fd ff ff 	lea    -0x290(%rbp),%rdx
    eb86:	48 8d 85 78 fd ff ff 	lea    -0x288(%rbp),%rax
    eb8d:	48 89 d6             	mov    %rdx,%rsi
    eb90:	48 89 c7             	mov    %rax,%rdi
    eb93:	e8 b4 98 00 00       	call   1844c <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
    eb98:	83 f0 01             	xor    $0x1,%eax
    eb9b:	84 c0                	test   %al,%al
    eb9d:	0f 85 29 ef ff ff    	jne    dacc <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x21f>
  throw std::runtime_error("Failed to create a logical device");
    eba3:	bf 10 00 00 00       	mov    $0x10,%edi
    eba8:	e8 23 65 ff ff       	call   50d0 <__cxa_allocate_exception@plt>
    ebad:	48 89 c3             	mov    %rax,%rbx
    ebb0:	48 8d 05 99 87 01 00 	lea    0x18799(%rip),%rax        # 27350 <_ZNSt8__detailL19__atomic_spin_countE+0x4694>
    ebb7:	48 89 c6             	mov    %rax,%rsi
    ebba:	48 89 df             	mov    %rbx,%rdi
    ebbd:	e8 ce 64 ff ff       	call   5090 <_ZNSt13runtime_errorC1EPKc@plt>
    ebc2:	48 8b 05 e7 43 02 00 	mov    0x243e7(%rip),%rax        # 32fb0 <_ZNSt13runtime_errorD1Ev@GLIBCXX_3.4>
    ebc9:	48 89 c2             	mov    %rax,%rdx
    ebcc:	48 8d 05 2d 3e 02 00 	lea    0x23e2d(%rip),%rax        # 32a00 <_ZTISt13runtime_error@GLIBCXX_3.4>
    ebd3:	48 89 c6             	mov    %rax,%rsi
    ebd6:	48 89 df             	mov    %rbx,%rdi
    ebd9:	e8 a2 67 ff ff       	call   5380 <__cxa_throw@plt>
  };
    ebde:	48 89 c3             	mov    %rax,%rbx
    ebe1:	48 8d 85 af fd ff ff 	lea    -0x251(%rbp),%rax
    ebe8:	48 89 c7             	mov    %rax,%rdi
    ebeb:	e8 cc 95 00 00       	call   181bc <_ZNSaIPKcED1Ev>
    ebf0:	80 bd 27 f8 ff ff 00 	cmpb   $0x0,-0x7d9(%rbp)
    ebf7:	75 0f                	jne    ec08 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x135b>
    ebf9:	48 8d 05 88 47 02 00 	lea    0x24788(%rip),%rax        # 33388 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE18requiredExtensions>
    ec00:	48 89 c7             	mov    %rax,%rdi
    ec03:	e8 e8 64 ff ff       	call   50f0 <__cxa_guard_abort@plt>
    ec08:	48 89 d8             	mov    %rbx,%rax
    ec0b:	48 89 c7             	mov    %rax,%rdi
    ec0e:	e8 8d 67 ff ff       	call   53a0 <_Unwind_Resume@plt>
  };
    ec13:	48 89 c3             	mov    %rax,%rbx
    ec16:	48 8d 85 c7 fd ff ff 	lea    -0x239(%rbp),%rax
    ec1d:	48 89 c7             	mov    %rax,%rdi
    ec20:	e8 97 95 00 00       	call   181bc <_ZNSaIPKcED1Ev>
    ec25:	45 84 f6             	test   %r14b,%r14b
    ec28:	75 0f                	jne    ec39 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x138c>
    ec2a:	48 8d 05 77 47 02 00 	lea    0x24777(%rip),%rax        # 333a8 <_ZGVZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHREE14instanceLayers>
    ec31:	48 89 c7             	mov    %rax,%rdi
    ec34:	e8 b7 64 ff ff       	call   50f0 <__cxa_guard_abort@plt>
    ec39:	48 89 d8             	mov    %rbx,%rax
    ec3c:	48 89 c7             	mov    %rax,%rdi
    ec3f:	e8 5c 67 ff ff       	call   53a0 <_Unwind_Resume@plt>
      extensionsMap[extension.extensionName]++;
    ec44:	48 89 c3             	mov    %rax,%rbx
    ec47:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
    ec4e:	48 89 c7             	mov    %rax,%rdi
    ec51:	e8 82 b2 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ec56:	e9 6a 01 00 00       	jmp    edc5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      extensionsMap[extension]++;
    ec5b:	48 89 c3             	mov    %rax,%rbx
    ec5e:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    ec65:	48 89 c7             	mov    %rax,%rdi
    ec68:	e8 6b b2 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ec6d:	eb 03                	jmp    ec72 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13c5>
    ec6f:	48 89 c3             	mov    %rax,%rbx
    ec72:	48 8d 85 1f fe ff ff 	lea    -0x1e1(%rbp),%rax
    ec79:	48 89 c7             	mov    %rax,%rdi
    ec7c:	e8 ef 65 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ec81:	e9 3f 01 00 00       	jmp    edc5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      if (extensionsMap[extension] < 2) {
    ec86:	48 89 c3             	mov    %rax,%rbx
    ec89:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    ec90:	48 89 c7             	mov    %rax,%rdi
    ec93:	e8 40 b2 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ec98:	eb 03                	jmp    ec9d <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x13f0>
    ec9a:	48 89 c3             	mov    %rax,%rbx
    ec9d:	48 8d 85 4f fe ff ff 	lea    -0x1b1(%rbp),%rax
    eca4:	48 89 c7             	mov    %rax,%rdi
    eca7:	e8 c4 65 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ecac:	e9 14 01 00 00       	jmp    edc5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
      layerMap[layer.layerName]++;
    ecb1:	48 89 c3             	mov    %rax,%rbx
    ecb4:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    ecbb:	48 89 c7             	mov    %rax,%rdi
    ecbe:	e8 15 b2 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ecc3:	e9 da 00 00 00       	jmp    eda2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      layerMap[layer]++;
    ecc8:	48 89 c3             	mov    %rax,%rbx
    eccb:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    ecd2:	48 89 c7             	mov    %rax,%rdi
    ecd5:	e8 fe b1 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ecda:	eb 03                	jmp    ecdf <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1432>
    ecdc:	48 89 c3             	mov    %rax,%rbx
    ecdf:	48 8d 85 9f fe ff ff 	lea    -0x161(%rbp),%rax
    ece6:	48 89 c7             	mov    %rax,%rdi
    ece9:	e8 82 65 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ecee:	e9 af 00 00 00       	jmp    eda2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      if (layerMap[layer] < 2) {
    ecf3:	48 89 c3             	mov    %rax,%rbx
    ecf6:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    ecfd:	48 89 c7             	mov    %rax,%rdi
    ed00:	e8 d3 b1 ff ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    ed05:	eb 03                	jmp    ed0a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x145d>
    ed07:	48 89 c3             	mov    %rax,%rbx
    ed0a:	48 8d 85 c3 fe ff ff 	lea    -0x13d(%rbp),%rax
    ed11:	48 89 c7             	mov    %rax,%rdi
    ed14:	e8 57 65 ff ff       	call   5270 <_ZNSaIcED1Ev@plt>
    ed19:	e9 84 00 00 00       	jmp    eda2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
      throw std::runtime_error("Failed to select queue families");
    ed1e:	49 89 c4             	mov    %rax,%r12
    ed21:	48 89 df             	mov    %rbx,%rdi
    ed24:	e8 27 64 ff ff       	call   5150 <__cxa_free_exception@plt>
    ed29:	4c 89 e3             	mov    %r12,%rbx
    ed2c:	eb 60                	jmp    ed8e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
}
    ed2e:	48 89 c3             	mov    %rax,%rbx
    ed31:	45 84 ed             	test   %r13b,%r13b
    ed34:	74 13                	je     ed49 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x149c>
    ed36:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ed3d:	48 83 c0 18          	add    $0x18,%rax
    ed41:	48 89 c7             	mov    %rax,%rdi
    ed44:	e8 27 a7 ff ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    ed49:	45 84 e4             	test   %r12b,%r12b
    ed4c:	74 18                	je     ed66 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
    ed4e:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ed55:	48 83 c0 08          	add    $0x8,%rax
    ed59:	48 89 c7             	mov    %rax,%rdi
    ed5c:	e8 c1 aa ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    ed61:	eb 03                	jmp    ed66 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14b9>
  }
    ed63:	48 89 c3             	mov    %rax,%rbx
    ed66:	48 8d 85 d0 fc ff ff 	lea    -0x330(%rbp),%rax
    ed6d:	48 89 c7             	mov    %rax,%rdi
    ed70:	e8 ad aa ff ff       	call   9822 <_ZN2vk4raii5QueueD1Ev>
    ed75:	eb 03                	jmp    ed7a <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14cd>
    ed77:	48 89 c3             	mov    %rax,%rbx
    ed7a:	48 8d 85 e0 fc ff ff 	lea    -0x320(%rbp),%rax
    ed81:	48 89 c7             	mov    %rax,%rdi
    ed84:	e8 2f a7 ff ff       	call   94b8 <_ZN2vk4raii6DeviceD1Ev>
    ed89:	eb 03                	jmp    ed8e <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14e1>
    ed8b:	48 89 c3             	mov    %rax,%rbx
    ed8e:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
    ed95:	48 89 c7             	mov    %rax,%rdi
    ed98:	e8 4b a0 00 00       	call   18de8 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
    ed9d:	eb 03                	jmp    eda2 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x14f5>
    ed9f:	48 89 c3             	mov    %rax,%rbx
    eda2:	48 8d 85 a0 f8 ff ff 	lea    -0x760(%rbp),%rax
    eda9:	48 89 c7             	mov    %rax,%rdi
    edac:	e8 4b 97 00 00       	call   184fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    edb1:	48 8d 85 30 fd ff ff 	lea    -0x2d0(%rbp),%rax
    edb8:	48 89 c7             	mov    %rax,%rdi
    edbb:	e8 68 a3 00 00       	call   19128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>
    edc0:	eb 03                	jmp    edc5 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x1518>
    edc2:	48 89 c3             	mov    %rax,%rbx
    edc5:	48 8d 85 70 f8 ff ff 	lea    -0x790(%rbp),%rax
    edcc:	48 89 c7             	mov    %rax,%rdi
    edcf:	e8 28 97 00 00       	call   184fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>
    edd4:	48 8d 85 50 fd ff ff 	lea    -0x2b0(%rbp),%rax
    eddb:	48 89 c7             	mov    %rax,%rdi
    edde:	e8 8f a1 00 00       	call   18f72 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
    ede3:	eb 13                	jmp    edf8 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
  throw std::runtime_error("Failed to create a logical device");
    ede5:	49 89 c4             	mov    %rax,%r12
    ede8:	48 89 df             	mov    %rbx,%rdi
    edeb:	e8 60 63 ff ff       	call   5150 <__cxa_free_exception@plt>
    edf0:	4c 89 e3             	mov    %r12,%rbx
    edf3:	eb 03                	jmp    edf8 <_ZN4rtvc17makeLogicalDeviceERKN2vk4raii8InstanceERKNS1_10SurfaceKHRE+0x154b>
}
    edf5:	48 89 c3             	mov    %rax,%rbx
    edf8:	48 8d 85 80 fd ff ff 	lea    -0x280(%rbp),%rax
    edff:	48 89 c7             	mov    %rax,%rdi
    ee02:	e8 45 8d 00 00       	call   17b4c <_ZN2vk4raii15PhysicalDevicesD1Ev>
    ee07:	48 89 d8             	mov    %rbx,%rax
    ee0a:	48 89 c7             	mov    %rax,%rdi
    ee0d:	e8 8e 65 ff ff       	call   53a0 <_Unwind_Resume@plt>
    ee12:	48 8b 85 38 f8 ff ff 	mov    -0x7c8(%rbp),%rax
    ee19:	48 81 c4 b8 07 00 00 	add    $0x7b8,%rsp
    ee20:	5b                   	pop    %rbx
    ee21:	41 5c                	pop    %r12
    ee23:	41 5d                	pop    %r13
    ee25:	41 5e                	pop    %r14
    ee27:	41 5f                	pop    %r15
    ee29:	5d                   	pop    %rbp
    ee2a:	c3                   	ret

000000000000ee2b <_ZN4rtvc15makeCommandPoolERKNS_13DeviceWrapperE>:

vk::raii::CommandPool makeCommandPool(const DeviceWrapper &device) {
    ee2b:	55                   	push   %rbp
    ee2c:	48 89 e5             	mov    %rsp,%rbp
    ee2f:	53                   	push   %rbx
    ee30:	48 83 ec 38          	sub    $0x38,%rsp
    ee34:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    ee38:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  return {
      device.logical,
    ee3c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ee40:	48 8d 58 28          	lea    0x28(%rax),%rbx
      {
          .queueFamilyIndex{device.queueFamilyIndex},
      },
  };
    ee44:	c7 45 d0 27 00 00 00 	movl   $0x27,-0x30(%rbp)
    ee4b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    ee52:	00 
    ee53:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    ee57:	48 83 c0 10          	add    $0x10,%rax
    ee5b:	48 89 c7             	mov    %rax,%rdi
    ee5e:	e8 09 99 00 00       	call   1876c <_ZN2vk5FlagsINS_25CommandPoolCreateFlagBitsEEC1Ev>
          .queueFamilyIndex{device.queueFamilyIndex},
    ee63:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ee67:	8b 00                	mov    (%rax),%eax
  };
    ee69:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    ee6c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    ee70:	be 00 00 00 00       	mov    $0x0,%esi
    ee75:	48 89 c7             	mov    %rax,%rdi
    ee78:	e8 fb a6 00 00       	call   19578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>
    ee7d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    ee81:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    ee85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ee89:	48 89 de             	mov    %rbx,%rsi
    ee8c:	48 89 c7             	mov    %rax,%rdi
    ee8f:	e8 2a 89 00 00       	call   177be <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>
}
    ee94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ee98:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    ee9c:	c9                   	leave
    ee9d:	c3                   	ret

000000000000ee9e <_Z41__static_initialization_and_destruction_0ii>:
} /* namespace rtvc */
    ee9e:	55                   	push   %rbp
    ee9f:	48 89 e5             	mov    %rsp,%rbp
    eea2:	48 83 ec 10          	sub    $0x10,%rsp
    eea6:	89 7d fc             	mov    %edi,-0x4(%rbp)
    eea9:	89 75 f8             	mov    %esi,-0x8(%rbp)
    eeac:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    eeb0:	75 3b                	jne    eeed <_Z41__static_initialization_and_destruction_0ii+0x4f>
    eeb2:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    eeb9:	75 32                	jne    eeed <_Z41__static_initialization_and_destruction_0ii+0x4f>
    eebb:	48 8d 05 9e 44 02 00 	lea    0x2449e(%rip),%rax        # 33360 <_ZStL8__ioinit>
    eec2:	48 89 c7             	mov    %rax,%rdi
    eec5:	e8 66 64 ff ff       	call   5330 <_ZNSt8ios_base4InitC1Ev@plt>
    eeca:	48 8d 05 27 43 02 00 	lea    0x24327(%rip),%rax        # 331f8 <__dso_handle>
    eed1:	48 89 c2             	mov    %rax,%rdx
    eed4:	48 8d 05 85 44 02 00 	lea    0x24485(%rip),%rax        # 33360 <_ZStL8__ioinit>
    eedb:	48 89 c6             	mov    %rax,%rsi
    eede:	48 8b 05 eb 40 02 00 	mov    0x240eb(%rip),%rax        # 32fd0 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    eee5:	48 89 c7             	mov    %rax,%rdi
    eee8:	e8 e3 62 ff ff       	call   51d0 <__cxa_atexit@plt>
    eeed:	90                   	nop
    eeee:	c9                   	leave
    eeef:	c3                   	ret

000000000000eef0 <_GLOBAL__sub_I__ZN4rtvc13debugCallbackE38VkDebugUtilsMessageSeverityFlagBitsEXTjPK36VkDebugUtilsMessengerCallbackDataEXTPv>:
    eef0:	55                   	push   %rbp
    eef1:	48 89 e5             	mov    %rsp,%rbp
    eef4:	be ff ff 00 00       	mov    $0xffff,%esi
    eef9:	bf 01 00 00 00       	mov    $0x1,%edi
    eefe:	e8 9b ff ff ff       	call   ee9e <_Z41__static_initialization_and_destruction_0ii>
    ef03:	5d                   	pop    %rbp
    ef04:	c3                   	ret
    ef05:	90                   	nop

000000000000ef06 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
    ef06:	55                   	push   %rbp
    ef07:	48 89 e5             	mov    %rsp,%rbp
    ef0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef0e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ef12:	90                   	nop
    ef13:	5d                   	pop    %rbp
    ef14:	c3                   	ret

000000000000ef15 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    [[nodiscard]]
    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
    ef15:	55                   	push   %rbp
    ef16:	48 89 e5             	mov    %rsp,%rbp
    ef19:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
    { return __v._M_value < 0; }
    ef1d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
    ef21:	c0 e8 07             	shr    $0x7,%al
    ef24:	5d                   	pop    %rbp
    ef25:	c3                   	ret

000000000000ef26 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
    ef26:	55                   	push   %rbp
    ef27:	48 89 e5             	mov    %rsp,%rbp
    ef2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef2e:	48 8d 15 7b 3a 02 00 	lea    0x23a7b(%rip),%rdx        # 329b0 <_ZTVSt9exception@GLIBCXX_3.4+0x10>
    ef35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef39:	48 89 10             	mov    %rdx,(%rax)
    ef3c:	90                   	nop
    ef3d:	5d                   	pop    %rbp
    ef3e:	c3                   	ret

000000000000ef3f <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
    ef3f:	55                   	push   %rbp
    ef40:	48 89 e5             	mov    %rsp,%rbp
    ef43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef47:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    ef4b:	90                   	nop
    ef4c:	5d                   	pop    %rbp
    ef4d:	c3                   	ret

000000000000ef4e <_ZSt17__size_to_integerm>:
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR long
  __size_to_integer(long __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
    ef4e:	55                   	push   %rbp
    ef4f:	48 89 e5             	mov    %rsp,%rbp
    ef52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef5a:	5d                   	pop    %rbp
    ef5b:	c3                   	ret

000000000000ef5c <_ZNSt11char_traitsIcE2ltERKcS2_>:
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
    ef5c:	55                   	push   %rbp
    ef5d:	48 89 e5             	mov    %rsp,%rbp
    ef60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return (static_cast<unsigned char>(__c1)
    ef68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef6c:	0f b6 00             	movzbl (%rax),%eax
    ef6f:	89 c2                	mov    %eax,%edx
		< static_cast<unsigned char>(__c2));
    ef71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ef75:	0f b6 00             	movzbl (%rax),%eax
    ef78:	38 c2                	cmp    %al,%dl
    ef7a:	0f 92 c0             	setb   %al
      }
    ef7d:	5d                   	pop    %rbp
    ef7e:	c3                   	ret

000000000000ef7f <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
    ef7f:	55                   	push   %rbp
    ef80:	48 89 e5             	mov    %rsp,%rbp
    ef83:	48 83 ec 30          	sub    $0x30,%rsp
    ef87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ef8b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ef8f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (__n == 0)
    ef93:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    ef98:	75 0a                	jne    efa4 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x25>
	  return 0;
    ef9a:	b8 00 00 00 00       	mov    $0x0,%eax
    ef9f:	e9 99 00 00 00       	jmp    f03d <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	if (std::__is_constant_evaluated())
    efa4:	e8 f5 71 ff ff       	call   619e <_ZSt23__is_constant_evaluatedv>
    efa9:	84 c0                	test   %al,%al
    efab:	74 78                	je     f025 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xa6>
	    for (size_t __i = 0; __i < __n; ++__i)
    efad:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    efb4:	00 
    efb5:	eb 5d                	jmp    f014 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x95>
	      if (lt(__s1[__i], __s2[__i]))
    efb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    efbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efbf:	48 01 c2             	add    %rax,%rdx
    efc2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    efc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efca:	48 01 c8             	add    %rcx,%rax
    efcd:	48 89 d6             	mov    %rdx,%rsi
    efd0:	48 89 c7             	mov    %rax,%rdi
    efd3:	e8 84 ff ff ff       	call   ef5c <_ZNSt11char_traitsIcE2ltERKcS2_>
    efd8:	84 c0                	test   %al,%al
    efda:	74 07                	je     efe3 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x64>
		return -1;
    efdc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    efe1:	eb 5a                	jmp    f03d <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	      else if (lt(__s2[__i], __s1[__i]))
    efe3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    efe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    efeb:	48 01 c2             	add    %rax,%rdx
    efee:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    eff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eff6:	48 01 c8             	add    %rcx,%rax
    eff9:	48 89 d6             	mov    %rdx,%rsi
    effc:	48 89 c7             	mov    %rax,%rdi
    efff:	e8 58 ff ff ff       	call   ef5c <_ZNSt11char_traitsIcE2ltERKcS2_>
    f004:	84 c0                	test   %al,%al
    f006:	74 07                	je     f00f <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x90>
		return 1;
    f008:	b8 01 00 00 00       	mov    $0x1,%eax
    f00d:	eb 2e                	jmp    f03d <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	    for (size_t __i = 0; __i < __n; ++__i)
    f00f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    f014:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f018:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    f01c:	72 99                	jb     efb7 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x38>
	    return 0;
    f01e:	b8 00 00 00 00       	mov    $0x0,%eax
    f023:	eb 18                	jmp    f03d <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xbe>
	return __builtin_memcmp(__s1, __s2, __n);
    f025:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f029:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    f02d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f031:	48 89 ce             	mov    %rcx,%rsi
    f034:	48 89 c7             	mov    %rax,%rdi
    f037:	e8 84 60 ff ff       	call   50c0 <memcmp@plt>
    f03c:	90                   	nop
      }
    f03d:	c9                   	leave
    f03e:	c3                   	ret
    f03f:	90                   	nop

000000000000f040 <_ZNK2vk20DispatchLoaderStatic34vkEnumerateInstanceLayerPropertiesEPjP17VkLayerProperties>:
    VkResult vkEnumerateInstanceLayerProperties( uint32_t * pPropertyCount, VkLayerProperties * pProperties ) const VULKAN_HPP_NOEXCEPT
    f040:	55                   	push   %rbp
    f041:	48 89 e5             	mov    %rsp,%rbp
    f044:	48 83 ec 20          	sub    $0x20,%rsp
    f048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f04c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f050:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      return ::vkEnumerateInstanceLayerProperties( pPropertyCount, pProperties );
    f054:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f058:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f05c:	48 89 d6             	mov    %rdx,%rsi
    f05f:	48 89 c7             	mov    %rax,%rdi
    f062:	e8 19 62 ff ff       	call   5280 <vkEnumerateInstanceLayerProperties@plt>
    }
    f067:	c9                   	leave
    f068:	c3                   	ret
    f069:	90                   	nop

000000000000f06a <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>:
    VULKAN_HPP_TYPESAFE_EXPLICIT SurfaceKHR( VkSurfaceKHR surfaceKHR ) VULKAN_HPP_NOEXCEPT : m_surfaceKHR( surfaceKHR ) {}
    f06a:	55                   	push   %rbp
    f06b:	48 89 e5             	mov    %rsp,%rbp
    f06e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f072:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f07a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f07e:	48 89 10             	mov    %rdx,(%rax)
    f081:	90                   	nop
    f082:	5d                   	pop    %rbp
    f083:	c3                   	ret

000000000000f084 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>:
    PhysicalDevice( VkPhysicalDevice physicalDevice ) VULKAN_HPP_NOEXCEPT : m_physicalDevice( physicalDevice ) {}
    f084:	55                   	push   %rbp
    f085:	48 89 e5             	mov    %rsp,%rbp
    f088:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f08c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f094:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f098:	48 89 10             	mov    %rdx,(%rax)
    f09b:	90                   	nop
    f09c:	5d                   	pop    %rbp
    f09d:	c3                   	ret

000000000000f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>:
    operator VkPhysicalDevice() const VULKAN_HPP_NOEXCEPT
    f09e:	55                   	push   %rbp
    f09f:	48 89 e5             	mov    %rsp,%rbp
    f0a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_physicalDevice;
    f0a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0aa:	48 8b 00             	mov    (%rax),%rax
    }
    f0ad:	5d                   	pop    %rbp
    f0ae:	c3                   	ret
    f0af:	90                   	nop

000000000000f0b0 <_ZN2vk11CommandPoolC1Ev>:
    VULKAN_HPP_CONSTEXPR         CommandPool() = default;
    f0b0:	55                   	push   %rbp
    f0b1:	48 89 e5             	mov    %rsp,%rbp
    f0b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0bc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    f0c3:	90                   	nop
    f0c4:	5d                   	pop    %rbp
    f0c5:	c3                   	ret

000000000000f0c6 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>:
      InstanceDispatcher( PFN_vkGetInstanceProcAddr getProcAddr, VkInstance instance ) : vkGetInstanceProcAddr( getProcAddr )
    f0c6:	55                   	push   %rbp
    f0c7:	48 89 e5             	mov    %rsp,%rbp
    f0ca:	48 83 ec 20          	sub    $0x20,%rsp
    f0ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f0d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    f0d6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    f0da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0de:	48 89 c7             	mov    %rax,%rdi
    f0e1:	e8 b6 74 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
    f0e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0ea:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    f0f1:	00 
    f0f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f0f6:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    f0fd:	00 
    f0fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f102:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    f109:	00 
    f10a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f10e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    f115:	00 
    f116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f11a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    f121:	00 
    f122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f126:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
    f12d:	00 
    f12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f132:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
    f139:	00 
    f13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f13e:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
    f145:	00 
    f146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f14a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f14e:	48 89 50 50          	mov    %rdx,0x50(%rax)
    f152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f156:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
    f15d:	00 
    f15e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f162:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    f169:	00 
    f16a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f16e:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
    f175:	00 
    f176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f17a:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
    f181:	00 
    f182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f186:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
    f18d:	00 
    f18e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f192:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
    f199:	00 00 00 00 
    f19d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1a1:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
    f1a8:	00 00 00 00 
    f1ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1b0:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    f1b7:	00 00 00 00 
    f1bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1bf:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
    f1c6:	00 00 00 00 
    f1ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1ce:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
    f1d5:	00 00 00 00 
    f1d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1dd:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
    f1e4:	00 00 00 00 
    f1e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1ec:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
    f1f3:	00 00 00 00 
    f1f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f1fb:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
    f202:	00 00 00 00 
    f206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f20a:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
    f211:	00 00 00 00 
    f215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f219:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
    f220:	00 00 00 00 
    f224:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f228:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
    f22f:	00 00 00 00 
    f233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f237:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
    f23e:	00 00 00 00 
    f242:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f246:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
    f24d:	00 00 00 00 
    f251:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f255:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
    f25c:	00 00 00 00 
    f260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f264:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
    f26b:	00 00 00 00 
    f26f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f273:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
    f27a:	00 00 00 00 
    f27e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f282:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
    f289:	00 00 00 00 
    f28d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f291:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
    f298:	00 00 00 00 
    f29c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2a0:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
    f2a7:	00 00 00 00 
    f2ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2af:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
    f2b6:	00 00 00 00 
    f2ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2be:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
    f2c5:	00 00 00 00 
    f2c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2cd:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
    f2d4:	00 00 00 00 
    f2d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2dc:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
    f2e3:	00 00 00 00 
    f2e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2eb:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
    f2f2:	00 00 00 00 
    f2f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2fa:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
    f301:	00 00 00 00 
    f305:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f309:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
    f310:	00 00 00 00 
    f314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f318:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
    f31f:	00 00 00 00 
    f323:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f327:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
    f32e:	00 00 00 00 
    f332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f336:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
    f33d:	00 00 00 00 
    f341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f345:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
    f34c:	00 00 00 00 
    f350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f354:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
    f35b:	00 00 00 00 
    f35f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f363:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
    f36a:	00 00 00 00 
    f36e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f372:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
    f379:	00 00 00 00 
    f37d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f381:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
    f388:	00 00 00 00 
    f38c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f390:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
    f397:	00 00 00 00 
    f39b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f39f:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
    f3a6:	00 00 00 00 
    f3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3ae:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
    f3b5:	00 00 00 00 
    f3b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3bd:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
    f3c4:	00 00 00 00 
    f3c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3cc:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
    f3d3:	00 00 00 00 
    f3d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3db:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
    f3e2:	00 00 00 00 
    f3e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3ea:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
    f3f1:	00 00 00 00 
    f3f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3f9:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
    f400:	00 00 00 00 
    f404:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f408:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
    f40f:	00 00 00 00 
    f413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f417:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
    f41e:	00 00 00 00 
    f422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f426:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
    f42d:	00 00 00 00 
    f431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f435:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
    f43c:	00 00 00 00 
    f440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f444:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
    f44b:	00 00 00 00 
    f44f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f453:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
    f45a:	00 00 00 00 
    f45e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f462:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
    f469:	00 00 00 00 
    f46d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f471:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
    f478:	00 00 00 00 
    f47c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f480:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
    f487:	00 00 00 00 
    f48b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f48f:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
    f496:	00 00 00 00 
    f49a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f49e:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
    f4a5:	00 00 00 00 
    f4a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4ad:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
    f4b4:	00 00 00 00 
    f4b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4bc:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
    f4c3:	00 00 00 00 
    f4c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4cb:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
    f4d2:	00 00 00 00 
    f4d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4da:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
    f4e1:	00 00 00 00 
    f4e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4e9:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
    f4f0:	00 00 00 00 
    f4f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4f8:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
    f4ff:	00 00 00 00 
    f503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f507:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
    f50e:	00 00 00 00 
    f512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f516:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
    f51d:	00 00 00 00 
    f521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f525:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
    f52c:	00 00 00 00 
    f530:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f534:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
    f53b:	00 00 00 00 
    f53f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f543:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
    f54a:	00 00 00 00 
    f54e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f552:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
    f559:	00 00 00 00 
    f55d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f561:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
    f568:	00 00 00 00 
    f56c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f570:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
    f577:	00 00 00 00 
    f57b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f57f:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
    f586:	00 00 00 00 
    f58a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f58e:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
    f595:	00 00 00 00 
    f599:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f59d:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
    f5a4:	00 00 00 00 
    f5a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5ac:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
    f5b3:	00 00 00 00 
    f5b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5bb:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
    f5c2:	00 00 00 00 
    f5c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5ca:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
    f5d1:	00 00 00 00 
    f5d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5d9:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
    f5e0:	00 00 00 00 
    f5e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5e8:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
    f5ef:	00 00 00 00 
    f5f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5f7:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
    f5fe:	00 00 00 00 
    f602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f606:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
    f60d:	00 00 00 00 
    f611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f615:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
    f61c:	00 00 00 00 
    f620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f624:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
    f62b:	00 00 00 00 
    f62f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f633:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
    f63a:	00 00 00 00 
    f63e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f642:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
    f649:	00 00 00 00 
    f64d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f651:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
    f658:	00 00 00 00 
    f65c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f660:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
    f667:	00 00 00 00 
    f66b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f66f:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
    f676:	00 00 00 00 
    f67a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f67e:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
    f685:	00 00 00 00 
    f689:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f68d:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
    f694:	00 00 00 00 
    f698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f69c:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
    f6a3:	00 00 00 00 
    f6a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6ab:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
    f6b2:	00 00 00 00 
    f6b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6ba:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
    f6c1:	00 00 00 00 
        vkDestroyInstance           = PFN_vkDestroyInstance( vkGetInstanceProcAddr( instance, "vkDestroyInstance" ) );
    f6c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6c9:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f6cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f6d1:	48 8d 0d e8 35 01 00 	lea    0x135e8(%rip),%rcx        # 22cc0 <_ZNSt8__detailL19__atomic_spin_countE+0x4>
    f6d8:	48 89 ce             	mov    %rcx,%rsi
    f6db:	48 89 c7             	mov    %rax,%rdi
    f6de:	ff d2                	call   *%rdx
    f6e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f6e4:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkEnumeratePhysicalDevices  = PFN_vkEnumeratePhysicalDevices( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDevices" ) );
    f6e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6ec:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f6f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f6f4:	48 8d 0d d7 35 01 00 	lea    0x135d7(%rip),%rcx        # 22cd2 <_ZNSt8__detailL19__atomic_spin_countE+0x16>
    f6fb:	48 89 ce             	mov    %rcx,%rsi
    f6fe:	48 89 c7             	mov    %rax,%rdi
    f701:	ff d2                	call   *%rdx
    f703:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f707:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetPhysicalDeviceFeatures = PFN_vkGetPhysicalDeviceFeatures( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures" ) );
    f70b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f70f:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f713:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f717:	48 8d 0d cf 35 01 00 	lea    0x135cf(%rip),%rcx        # 22ced <_ZNSt8__detailL19__atomic_spin_countE+0x31>
    f71e:	48 89 ce             	mov    %rcx,%rsi
    f721:	48 89 c7             	mov    %rax,%rdi
    f724:	ff d2                	call   *%rdx
    f726:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f72a:	48 89 42 20          	mov    %rax,0x20(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties" ) );
    f72e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f732:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f736:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f73a:	48 8d 0d cf 35 01 00 	lea    0x135cf(%rip),%rcx        # 22d10 <_ZNSt8__detailL19__atomic_spin_countE+0x54>
    f741:	48 89 ce             	mov    %rcx,%rsi
    f744:	48 89 c7             	mov    %rax,%rdi
    f747:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties =
    f749:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f74d:	48 89 42 28          	mov    %rax,0x28(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties" ) );
    f751:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f755:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f759:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f75d:	48 8d 0d d4 35 01 00 	lea    0x135d4(%rip),%rcx        # 22d38 <_ZNSt8__detailL19__atomic_spin_countE+0x7c>
    f764:	48 89 ce             	mov    %rcx,%rsi
    f767:	48 89 c7             	mov    %rax,%rdi
    f76a:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties =
    f76c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f770:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkGetPhysicalDeviceProperties = PFN_vkGetPhysicalDeviceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties" ) );
    f774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f778:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f77c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f780:	48 8d 0d da 35 01 00 	lea    0x135da(%rip),%rcx        # 22d61 <_ZNSt8__detailL19__atomic_spin_countE+0xa5>
    f787:	48 89 ce             	mov    %rcx,%rsi
    f78a:	48 89 c7             	mov    %rax,%rdi
    f78d:	ff d2                	call   *%rdx
    f78f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f793:	48 89 42 38          	mov    %rax,0x38(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties" ) );
    f797:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f79b:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f79f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f7a3:	48 8d 0d d6 35 01 00 	lea    0x135d6(%rip),%rcx        # 22d80 <_ZNSt8__detailL19__atomic_spin_countE+0xc4>
    f7aa:	48 89 ce             	mov    %rcx,%rsi
    f7ad:	48 89 c7             	mov    %rax,%rdi
    f7b0:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties =
    f7b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f7b6:	48 89 42 40          	mov    %rax,0x40(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties" ) );
    f7ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7be:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f7c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f7c6:	48 8d 0d e3 35 01 00 	lea    0x135e3(%rip),%rcx        # 22db0 <_ZNSt8__detailL19__atomic_spin_countE+0xf4>
    f7cd:	48 89 ce             	mov    %rcx,%rsi
    f7d0:	48 89 c7             	mov    %rax,%rdi
    f7d3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties =
    f7d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f7d9:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkCreateDevice = PFN_vkCreateDevice( vkGetInstanceProcAddr( instance, "vkCreateDevice" ) );
    f7dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f7e1:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f7e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f7e9:	48 8d 0d e4 35 01 00 	lea    0x135e4(%rip),%rcx        # 22dd4 <_ZNSt8__detailL19__atomic_spin_countE+0x118>
    f7f0:	48 89 ce             	mov    %rcx,%rsi
    f7f3:	48 89 c7             	mov    %rax,%rdi
    f7f6:	ff d2                	call   *%rdx
    f7f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f7fc:	48 89 42 58          	mov    %rax,0x58(%rdx)
          PFN_vkEnumerateDeviceExtensionProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceExtensionProperties" ) );
    f800:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f804:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f808:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f80c:	48 8d 0d d5 35 01 00 	lea    0x135d5(%rip),%rcx        # 22de8 <_ZNSt8__detailL19__atomic_spin_countE+0x12c>
    f813:	48 89 ce             	mov    %rcx,%rsi
    f816:	48 89 c7             	mov    %rax,%rdi
    f819:	ff d2                	call   *%rdx
        vkEnumerateDeviceExtensionProperties =
    f81b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f81f:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkEnumerateDeviceLayerProperties = PFN_vkEnumerateDeviceLayerProperties( vkGetInstanceProcAddr( instance, "vkEnumerateDeviceLayerProperties" ) );
    f823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f827:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f82b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f82f:	48 8d 0d da 35 01 00 	lea    0x135da(%rip),%rcx        # 22e10 <_ZNSt8__detailL19__atomic_spin_countE+0x154>
    f836:	48 89 ce             	mov    %rcx,%rsi
    f839:	48 89 c7             	mov    %rax,%rdi
    f83c:	ff d2                	call   *%rdx
    f83e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f842:	48 89 42 68          	mov    %rax,0x68(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties" ) );
    f846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f84a:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f84e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f852:	48 8d 0d df 35 01 00 	lea    0x135df(%rip),%rcx        # 22e38 <_ZNSt8__detailL19__atomic_spin_countE+0x17c>
    f859:	48 89 ce             	mov    %rcx,%rsi
    f85c:	48 89 c7             	mov    %rax,%rdi
    f85f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties =
    f861:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f865:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkEnumeratePhysicalDeviceGroups = PFN_vkEnumeratePhysicalDeviceGroups( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroups" ) );
    f869:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f86d:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f871:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f875:	48 8d 0d ec 35 01 00 	lea    0x135ec(%rip),%rcx        # 22e68 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac>
    f87c:	48 89 ce             	mov    %rcx,%rsi
    f87f:	48 89 c7             	mov    %rax,%rdi
    f882:	ff d2                	call   *%rdx
    f884:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f888:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkGetPhysicalDeviceFeatures2    = PFN_vkGetPhysicalDeviceFeatures2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2" ) );
    f88c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f890:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f894:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f898:	48 8d 0d e9 35 01 00 	lea    0x135e9(%rip),%rcx        # 22e88 <_ZNSt8__detailL19__atomic_spin_countE+0x1cc>
    f89f:	48 89 ce             	mov    %rcx,%rsi
    f8a2:	48 89 c7             	mov    %rax,%rdi
    f8a5:	ff d2                	call   *%rdx
    f8a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f8ab:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetPhysicalDeviceProperties2  = PFN_vkGetPhysicalDeviceProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2" ) );
    f8b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8b6:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f8ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f8be:	48 8d 0d e3 35 01 00 	lea    0x135e3(%rip),%rcx        # 22ea8 <_ZNSt8__detailL19__atomic_spin_countE+0x1ec>
    f8c5:	48 89 ce             	mov    %rcx,%rsi
    f8c8:	48 89 c7             	mov    %rax,%rdi
    f8cb:	ff d2                	call   *%rdx
    f8cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f8d1:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
          PFN_vkGetPhysicalDeviceFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2" ) );
    f8d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f8dc:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f8e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f8e4:	48 8d 0d dd 35 01 00 	lea    0x135dd(%rip),%rcx        # 22ec8 <_ZNSt8__detailL19__atomic_spin_countE+0x20c>
    f8eb:	48 89 ce             	mov    %rcx,%rsi
    f8ee:	48 89 c7             	mov    %rax,%rdi
    f8f1:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2 =
    f8f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f8f7:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
          PFN_vkGetPhysicalDeviceImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2" ) );
    f8fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f902:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f906:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f90a:	48 8d 0d df 35 01 00 	lea    0x135df(%rip),%rcx        # 22ef0 <_ZNSt8__detailL19__atomic_spin_countE+0x234>
    f911:	48 89 ce             	mov    %rcx,%rsi
    f914:	48 89 c7             	mov    %rax,%rdi
    f917:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2 =
    f919:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f91d:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2" ) );
    f924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f928:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f92c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f930:	48 8d 0d e9 35 01 00 	lea    0x135e9(%rip),%rcx        # 22f20 <_ZNSt8__detailL19__atomic_spin_countE+0x264>
    f937:	48 89 ce             	mov    %rcx,%rsi
    f93a:	48 89 c7             	mov    %rax,%rdi
    f93d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2 =
    f93f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f943:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
          PFN_vkGetPhysicalDeviceMemoryProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2" ) );
    f94a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f94e:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f952:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f956:	48 8d 0d f3 35 01 00 	lea    0x135f3(%rip),%rcx        # 22f50 <_ZNSt8__detailL19__atomic_spin_countE+0x294>
    f95d:	48 89 ce             	mov    %rcx,%rsi
    f960:	48 89 c7             	mov    %rax,%rdi
    f963:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2 =
    f965:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f969:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2" ) );
    f970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f974:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f978:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f97c:	48 8d 0d f5 35 01 00 	lea    0x135f5(%rip),%rcx        # 22f78 <_ZNSt8__detailL19__atomic_spin_countE+0x2bc>
    f983:	48 89 ce             	mov    %rcx,%rsi
    f986:	48 89 c7             	mov    %rax,%rdi
    f989:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2 =
    f98b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f98f:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
          PFN_vkGetPhysicalDeviceExternalBufferProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferProperties" ) );
    f996:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f99a:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f99e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9a2:	48 8d 0d ff 35 01 00 	lea    0x135ff(%rip),%rcx        # 22fa8 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec>
    f9a9:	48 89 ce             	mov    %rcx,%rsi
    f9ac:	48 89 c7             	mov    %rax,%rdi
    f9af:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferProperties =
    f9b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f9b5:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
          PFN_vkGetPhysicalDeviceExternalFenceProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFenceProperties" ) );
    f9bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9c0:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f9c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9c8:	48 8d 0d 09 36 01 00 	lea    0x13609(%rip),%rcx        # 22fd8 <_ZNSt8__detailL19__atomic_spin_countE+0x31c>
    f9cf:	48 89 ce             	mov    %rcx,%rsi
    f9d2:	48 89 c7             	mov    %rax,%rdi
    f9d5:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFenceProperties =
    f9d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f9db:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
          PFN_vkGetPhysicalDeviceExternalSemaphoreProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphoreProperties" ) );
    f9e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f9e6:	48 8b 50 50          	mov    0x50(%rax),%rdx
    f9ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f9ee:	48 8d 0d 13 36 01 00 	lea    0x13613(%rip),%rcx        # 23008 <_ZNSt8__detailL19__atomic_spin_countE+0x34c>
    f9f5:	48 89 ce             	mov    %rcx,%rsi
    f9f8:	48 89 c7             	mov    %rax,%rdi
    f9fb:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphoreProperties =
    f9fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fa01:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkGetPhysicalDeviceToolProperties = PFN_vkGetPhysicalDeviceToolProperties( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolProperties" ) );
    fa08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa0c:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fa10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fa14:	48 8d 0d 1d 36 01 00 	lea    0x1361d(%rip),%rcx        # 23038 <_ZNSt8__detailL19__atomic_spin_countE+0x37c>
    fa1b:	48 89 ce             	mov    %rcx,%rsi
    fa1e:	48 89 c7             	mov    %rax,%rdi
    fa21:	ff d2                	call   *%rdx
    fa23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fa27:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkAcquireDrmDisplayEXT = PFN_vkAcquireDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkAcquireDrmDisplayEXT" ) );
    fa2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa32:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fa36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fa3a:	48 8d 0d 19 36 01 00 	lea    0x13619(%rip),%rcx        # 2305a <_ZNSt8__detailL19__atomic_spin_countE+0x39e>
    fa41:	48 89 ce             	mov    %rcx,%rsi
    fa44:	48 89 c7             	mov    %rax,%rdi
    fa47:	ff d2                	call   *%rdx
    fa49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fa4d:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkGetDrmDisplayEXT     = PFN_vkGetDrmDisplayEXT( vkGetInstanceProcAddr( instance, "vkGetDrmDisplayEXT" ) );
    fa54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa58:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fa5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fa60:	48 8d 0d 0a 36 01 00 	lea    0x1360a(%rip),%rcx        # 23071 <_ZNSt8__detailL19__atomic_spin_countE+0x3b5>
    fa67:	48 89 ce             	mov    %rcx,%rsi
    fa6a:	48 89 c7             	mov    %rax,%rdi
    fa6d:	ff d2                	call   *%rdx
    fa6f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fa73:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
          PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" ) );
    fa7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fa7e:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fa82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fa86:	48 8d 0d fb 35 01 00 	lea    0x135fb(%rip),%rcx        # 23088 <_ZNSt8__detailL19__atomic_spin_countE+0x3cc>
    fa8d:	48 89 ce             	mov    %rcx,%rsi
    fa90:	48 89 c7             	mov    %rax,%rdi
    fa93:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
    fa95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fa99:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkCreateDebugReportCallbackEXT  = PFN_vkCreateDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugReportCallbackEXT" ) );
    faa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faa4:	48 8b 50 50          	mov    0x50(%rax),%rdx
    faa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    faac:	48 8d 0d 05 36 01 00 	lea    0x13605(%rip),%rcx        # 230b8 <_ZNSt8__detailL19__atomic_spin_countE+0x3fc>
    fab3:	48 89 ce             	mov    %rcx,%rsi
    fab6:	48 89 c7             	mov    %rax,%rdi
    fab9:	ff d2                	call   *%rdx
    fabb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fabf:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkDestroyDebugReportCallbackEXT = PFN_vkDestroyDebugReportCallbackEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugReportCallbackEXT" ) );
    fac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faca:	48 8b 50 50          	mov    0x50(%rax),%rdx
    face:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fad2:	48 8d 0d ff 35 01 00 	lea    0x135ff(%rip),%rcx        # 230d8 <_ZNSt8__detailL19__atomic_spin_countE+0x41c>
    fad9:	48 89 ce             	mov    %rcx,%rsi
    fadc:	48 89 c7             	mov    %rax,%rdi
    fadf:	ff d2                	call   *%rdx
    fae1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fae5:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDebugReportMessageEXT         = PFN_vkDebugReportMessageEXT( vkGetInstanceProcAddr( instance, "vkDebugReportMessageEXT" ) );
    faec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    faf0:	48 8b 50 50          	mov    0x50(%rax),%rdx
    faf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    faf8:	48 8d 0d f9 35 01 00 	lea    0x135f9(%rip),%rcx        # 230f8 <_ZNSt8__detailL19__atomic_spin_countE+0x43c>
    faff:	48 89 ce             	mov    %rcx,%rsi
    fb02:	48 89 c7             	mov    %rax,%rdi
    fb05:	ff d2                	call   *%rdx
    fb07:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fb0b:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkCreateDebugUtilsMessengerEXT  = PFN_vkCreateDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkCreateDebugUtilsMessengerEXT" ) );
    fb12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb16:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fb1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fb1e:	48 8d 0d eb 35 01 00 	lea    0x135eb(%rip),%rcx        # 23110 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
    fb25:	48 89 ce             	mov    %rcx,%rsi
    fb28:	48 89 c7             	mov    %rax,%rdi
    fb2b:	ff d2                	call   *%rdx
    fb2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fb31:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkDestroyDebugUtilsMessengerEXT = PFN_vkDestroyDebugUtilsMessengerEXT( vkGetInstanceProcAddr( instance, "vkDestroyDebugUtilsMessengerEXT" ) );
    fb38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb3c:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fb40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fb44:	48 8d 0d e5 35 01 00 	lea    0x135e5(%rip),%rcx        # 23130 <_ZNSt8__detailL19__atomic_spin_countE+0x474>
    fb4b:	48 89 ce             	mov    %rcx,%rsi
    fb4e:	48 89 c7             	mov    %rax,%rdi
    fb51:	ff d2                	call   *%rdx
    fb53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fb57:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkSubmitDebugUtilsMessageEXT    = PFN_vkSubmitDebugUtilsMessageEXT( vkGetInstanceProcAddr( instance, "vkSubmitDebugUtilsMessageEXT" ) );
    fb5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb62:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fb66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fb6a:	48 8d 0d df 35 01 00 	lea    0x135df(%rip),%rcx        # 23150 <_ZNSt8__detailL19__atomic_spin_countE+0x494>
    fb71:	48 89 ce             	mov    %rcx,%rsi
    fb74:	48 89 c7             	mov    %rax,%rdi
    fb77:	ff d2                	call   *%rdx
    fb79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fb7d:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkReleaseDisplayEXT = PFN_vkReleaseDisplayEXT( vkGetInstanceProcAddr( instance, "vkReleaseDisplayEXT" ) );
    fb84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fb88:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fb8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fb90:	48 8d 0d d6 35 01 00 	lea    0x135d6(%rip),%rcx        # 2316d <_ZNSt8__detailL19__atomic_spin_countE+0x4b1>
    fb97:	48 89 ce             	mov    %rcx,%rsi
    fb9a:	48 89 c7             	mov    %rax,%rdi
    fb9d:	ff d2                	call   *%rdx
    fb9f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fba3:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT" ) );
    fbaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbae:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fbb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fbb6:	48 8d 0d cb 35 01 00 	lea    0x135cb(%rip),%rcx        # 23188 <_ZNSt8__detailL19__atomic_spin_countE+0x4cc>
    fbbd:	48 89 ce             	mov    %rcx,%rsi
    fbc0:	48 89 c7             	mov    %rax,%rdi
    fbc3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2EXT =
    fbc5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fbc9:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkCreateHeadlessSurfaceEXT = PFN_vkCreateHeadlessSurfaceEXT( vkGetInstanceProcAddr( instance, "vkCreateHeadlessSurfaceEXT" ) );
    fbd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbd4:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fbd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fbdc:	48 8d 0d d0 35 01 00 	lea    0x135d0(%rip),%rcx        # 231b3 <_ZNSt8__detailL19__atomic_spin_countE+0x4f7>
    fbe3:	48 89 ce             	mov    %rcx,%rsi
    fbe6:	48 89 c7             	mov    %rax,%rdi
    fbe9:	ff d2                	call   *%rdx
    fbeb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fbef:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
          PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT" ) );
    fbf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fbfa:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fbfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fc02:	48 8d 0d c7 35 01 00 	lea    0x135c7(%rip),%rcx        # 231d0 <_ZNSt8__detailL19__atomic_spin_countE+0x514>
    fc09:	48 89 ce             	mov    %rcx,%rsi
    fc0c:	48 89 c7             	mov    %rax,%rdi
    fc0f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMultisamplePropertiesEXT =
    fc11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fc15:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
          PFN_vkGetPhysicalDeviceToolPropertiesEXT( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceToolPropertiesEXT" ) );
    fc1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc20:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fc24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fc28:	48 8d 0d d1 35 01 00 	lea    0x135d1(%rip),%rcx        # 23200 <_ZNSt8__detailL19__atomic_spin_countE+0x544>
    fc2f:	48 89 ce             	mov    %rcx,%rsi
    fc32:	48 89 c7             	mov    %rax,%rdi
    fc35:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceToolPropertiesEXT =
    fc37:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fc3b:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        if ( !vkGetPhysicalDeviceToolProperties )
    fc42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc46:	48 8b 80 d0 00 00 00 	mov    0xd0(%rax),%rax
    fc4d:	48 85 c0             	test   %rax,%rax
    fc50:	75 16                	jne    fc68 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xba2>
          vkGetPhysicalDeviceToolProperties = vkGetPhysicalDeviceToolPropertiesEXT;
    fc52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc56:	48 8b 90 70 01 00 00 	mov    0x170(%rax),%rdx
    fc5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc61:	48 89 90 d0 00 00 00 	mov    %rdx,0xd0(%rax)
          PFN_vkGetPhysicalDevicePresentRectanglesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDevicePresentRectanglesKHR" ) );
    fc68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc6c:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fc70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fc74:	48 8d 0d ad 35 01 00 	lea    0x135ad(%rip),%rcx        # 23228 <_ZNSt8__detailL19__atomic_spin_countE+0x56c>
    fc7b:	48 89 ce             	mov    %rcx,%rsi
    fc7e:	48 89 c7             	mov    %rax,%rdi
    fc81:	ff d2                	call   *%rdx
        vkGetPhysicalDevicePresentRectanglesKHR =
    fc83:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fc87:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkEnumeratePhysicalDeviceGroupsKHR = PFN_vkEnumeratePhysicalDeviceGroupsKHR( vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceGroupsKHR" ) );
    fc8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fc92:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fc96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fc9a:	48 8d 0d af 35 01 00 	lea    0x135af(%rip),%rcx        # 23250 <_ZNSt8__detailL19__atomic_spin_countE+0x594>
    fca1:	48 89 ce             	mov    %rcx,%rsi
    fca4:	48 89 c7             	mov    %rax,%rdi
    fca7:	ff d2                	call   *%rdx
    fca9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fcad:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        if ( !vkEnumeratePhysicalDeviceGroups )
    fcb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcb8:	48 8b 40 78          	mov    0x78(%rax),%rax
    fcbc:	48 85 c0             	test   %rax,%rax
    fcbf:	75 13                	jne    fcd4 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xc0e>
          vkEnumeratePhysicalDeviceGroups = vkEnumeratePhysicalDeviceGroupsKHR;
    fcc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcc5:	48 8b 90 98 01 00 00 	mov    0x198(%rax),%rdx
    fccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcd0:	48 89 50 78          	mov    %rdx,0x78(%rax)
          PFN_vkGetPhysicalDeviceDisplayPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPropertiesKHR" ) );
    fcd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcd8:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fcdc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fce0:	48 8d 0d 91 35 01 00 	lea    0x13591(%rip),%rcx        # 23278 <_ZNSt8__detailL19__atomic_spin_countE+0x5bc>
    fce7:	48 89 ce             	mov    %rcx,%rsi
    fcea:	48 89 c7             	mov    %rax,%rdi
    fced:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPropertiesKHR =
    fcef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fcf3:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR" ) );
    fcfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fcfe:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fd02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fd06:	48 8d 0d 93 35 01 00 	lea    0x13593(%rip),%rcx        # 232a0 <_ZNSt8__detailL19__atomic_spin_countE+0x5e4>
    fd0d:	48 89 ce             	mov    %rcx,%rsi
    fd10:	48 89 c7             	mov    %rax,%rdi
    fd13:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
    fd15:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fd19:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
          PFN_vkGetDisplayPlaneSupportedDisplaysKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneSupportedDisplaysKHR" ) );
    fd20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd24:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fd28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fd2c:	48 8d 0d 9d 35 01 00 	lea    0x1359d(%rip),%rcx        # 232d0 <_ZNSt8__detailL19__atomic_spin_countE+0x614>
    fd33:	48 89 ce             	mov    %rcx,%rsi
    fd36:	48 89 c7             	mov    %rax,%rdi
    fd39:	ff d2                	call   *%rdx
        vkGetDisplayPlaneSupportedDisplaysKHR =
    fd3b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fd3f:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkGetDisplayModePropertiesKHR    = PFN_vkGetDisplayModePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModePropertiesKHR" ) );
    fd46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd4a:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fd4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fd52:	48 8d 0d 9d 35 01 00 	lea    0x1359d(%rip),%rcx        # 232f6 <_ZNSt8__detailL19__atomic_spin_countE+0x63a>
    fd59:	48 89 ce             	mov    %rcx,%rsi
    fd5c:	48 89 c7             	mov    %rax,%rdi
    fd5f:	ff d2                	call   *%rdx
    fd61:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fd65:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateDisplayModeKHR           = PFN_vkCreateDisplayModeKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayModeKHR" ) );
    fd6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd70:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fd74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fd78:	48 8d 0d 95 35 01 00 	lea    0x13595(%rip),%rcx        # 23314 <_ZNSt8__detailL19__atomic_spin_countE+0x658>
    fd7f:	48 89 ce             	mov    %rcx,%rsi
    fd82:	48 89 c7             	mov    %rax,%rdi
    fd85:	ff d2                	call   *%rdx
    fd87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fd8b:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkGetDisplayPlaneCapabilitiesKHR = PFN_vkGetDisplayPlaneCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilitiesKHR" ) );
    fd92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fd96:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fd9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fd9e:	48 8d 0d 8b 35 01 00 	lea    0x1358b(%rip),%rcx        # 23330 <_ZNSt8__detailL19__atomic_spin_countE+0x674>
    fda5:	48 89 ce             	mov    %rcx,%rsi
    fda8:	48 89 c7             	mov    %rax,%rdi
    fdab:	ff d2                	call   *%rdx
    fdad:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fdb1:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDisplayPlaneSurfaceKHR   = PFN_vkCreateDisplayPlaneSurfaceKHR( vkGetInstanceProcAddr( instance, "vkCreateDisplayPlaneSurfaceKHR" ) );
    fdb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fdbc:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fdc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fdc4:	48 8d 0d 8d 35 01 00 	lea    0x1358d(%rip),%rcx        # 23358 <_ZNSt8__detailL19__atomic_spin_countE+0x69c>
    fdcb:	48 89 ce             	mov    %rcx,%rsi
    fdce:	48 89 c7             	mov    %rax,%rdi
    fdd1:	ff d2                	call   *%rdx
    fdd3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fdd7:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
          PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR" ) );
    fdde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fde2:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fde6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fdea:	48 8d 0d 87 35 01 00 	lea    0x13587(%rip),%rcx        # 23378 <_ZNSt8__detailL19__atomic_spin_countE+0x6bc>
    fdf1:	48 89 ce             	mov    %rcx,%rsi
    fdf4:	48 89 c7             	mov    %rax,%rdi
    fdf7:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalFencePropertiesKHR =
    fdf9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fdfd:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        if ( !vkGetPhysicalDeviceExternalFenceProperties )
    fe04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe08:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
    fe0f:	48 85 c0             	test   %rax,%rax
    fe12:	75 16                	jne    fe2a <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xd64>
          vkGetPhysicalDeviceExternalFenceProperties = vkGetPhysicalDeviceExternalFencePropertiesKHR;
    fe14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe18:	48 8b 90 d8 01 00 00 	mov    0x1d8(%rax),%rdx
    fe1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe23:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
          PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR" ) );
    fe2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe2e:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fe32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fe36:	48 8d 0d 6b 35 01 00 	lea    0x1356b(%rip),%rcx        # 233a8 <_ZNSt8__detailL19__atomic_spin_countE+0x6ec>
    fe3d:	48 89 ce             	mov    %rcx,%rsi
    fe40:	48 89 c7             	mov    %rax,%rdi
    fe43:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalBufferPropertiesKHR =
    fe45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fe49:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        if ( !vkGetPhysicalDeviceExternalBufferProperties )
    fe50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe54:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
    fe5b:	48 85 c0             	test   %rax,%rax
    fe5e:	75 16                	jne    fe76 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdb0>
          vkGetPhysicalDeviceExternalBufferProperties = vkGetPhysicalDeviceExternalBufferPropertiesKHR;
    fe60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe64:	48 8b 90 e0 01 00 00 	mov    0x1e0(%rax),%rdx
    fe6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe6f:	48 89 90 b8 00 00 00 	mov    %rdx,0xb8(%rax)
          PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" ) );
    fe76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fe7a:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fe7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fe82:	48 8d 0d 4f 35 01 00 	lea    0x1354f(%rip),%rcx        # 233d8 <_ZNSt8__detailL19__atomic_spin_countE+0x71c>
    fe89:	48 89 ce             	mov    %rcx,%rsi
    fe8c:	48 89 c7             	mov    %rax,%rdi
    fe8f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
    fe91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fe95:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        if ( !vkGetPhysicalDeviceExternalSemaphoreProperties )
    fe9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fea0:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax
    fea7:	48 85 c0             	test   %rax,%rax
    feaa:	75 16                	jne    fec2 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xdfc>
          vkGetPhysicalDeviceExternalSemaphoreProperties = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
    feac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feb0:	48 8b 90 e8 01 00 00 	mov    0x1e8(%rax),%rdx
    feb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    febb:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
          PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR" ) );
    fec2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fec6:	48 8b 50 50          	mov    0x50(%rax),%rdx
    feca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fece:	48 8d 0d 3b 35 01 00 	lea    0x1353b(%rip),%rcx        # 23410 <_ZNSt8__detailL19__atomic_spin_countE+0x754>
    fed5:	48 89 ce             	mov    %rcx,%rsi
    fed8:	48 89 c7             	mov    %rax,%rdi
    fedb:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFragmentShadingRatesKHR =
    fedd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    fee1:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
          PFN_vkGetPhysicalDeviceDisplayProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayProperties2KHR" ) );
    fee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    feec:	48 8b 50 50          	mov    0x50(%rax),%rdx
    fef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fef4:	48 8d 0d 45 35 01 00 	lea    0x13545(%rip),%rcx        # 23440 <_ZNSt8__detailL19__atomic_spin_countE+0x784>
    fefb:	48 89 ce             	mov    %rcx,%rsi
    fefe:	48 89 c7             	mov    %rax,%rdi
    ff01:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayProperties2KHR =
    ff03:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ff07:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
          PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR" ) );
    ff0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff12:	48 8b 50 50          	mov    0x50(%rax),%rdx
    ff16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff1a:	48 8d 0d 4f 35 01 00 	lea    0x1354f(%rip),%rcx        # 23470 <_ZNSt8__detailL19__atomic_spin_countE+0x7b4>
    ff21:	48 89 ce             	mov    %rcx,%rsi
    ff24:	48 89 c7             	mov    %rax,%rdi
    ff27:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
    ff29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ff2d:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkGetDisplayModeProperties2KHR    = PFN_vkGetDisplayModeProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayModeProperties2KHR" ) );
    ff34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff38:	48 8b 50 50          	mov    0x50(%rax),%rdx
    ff3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff40:	48 8d 0d 59 35 01 00 	lea    0x13559(%rip),%rcx        # 234a0 <_ZNSt8__detailL19__atomic_spin_countE+0x7e4>
    ff47:	48 89 ce             	mov    %rcx,%rsi
    ff4a:	48 89 c7             	mov    %rax,%rdi
    ff4d:	ff d2                	call   *%rdx
    ff4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ff53:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkGetDisplayPlaneCapabilities2KHR = PFN_vkGetDisplayPlaneCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetDisplayPlaneCapabilities2KHR" ) );
    ff5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff5e:	48 8b 50 50          	mov    0x50(%rax),%rdx
    ff62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff66:	48 8d 0d 53 35 01 00 	lea    0x13553(%rip),%rcx        # 234c0 <_ZNSt8__detailL19__atomic_spin_countE+0x804>
    ff6d:	48 89 ce             	mov    %rcx,%rsi
    ff70:	48 89 c7             	mov    %rax,%rdi
    ff73:	ff d2                	call   *%rdx
    ff75:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ff79:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkGetPhysicalDeviceFeatures2KHR = PFN_vkGetPhysicalDeviceFeatures2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFeatures2KHR" ) );
    ff80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff84:	48 8b 50 50          	mov    0x50(%rax),%rdx
    ff88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ff8c:	48 8d 0d 55 35 01 00 	lea    0x13555(%rip),%rcx        # 234e8 <_ZNSt8__detailL19__atomic_spin_countE+0x82c>
    ff93:	48 89 ce             	mov    %rcx,%rsi
    ff96:	48 89 c7             	mov    %rax,%rdi
    ff99:	ff d2                	call   *%rdx
    ff9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ff9f:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        if ( !vkGetPhysicalDeviceFeatures2 )
    ffa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffaa:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    ffb1:	48 85 c0             	test   %rax,%rax
    ffb4:	75 16                	jne    ffcc <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf06>
          vkGetPhysicalDeviceFeatures2 = vkGetPhysicalDeviceFeatures2KHR;
    ffb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffba:	48 8b 90 18 02 00 00 	mov    0x218(%rax),%rdx
    ffc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffc5:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
        vkGetPhysicalDeviceProperties2KHR = PFN_vkGetPhysicalDeviceProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceProperties2KHR" ) );
    ffcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ffd0:	48 8b 50 50          	mov    0x50(%rax),%rdx
    ffd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ffd8:	48 8d 0d 29 35 01 00 	lea    0x13529(%rip),%rcx        # 23508 <_ZNSt8__detailL19__atomic_spin_countE+0x84c>
    ffdf:	48 89 ce             	mov    %rcx,%rsi
    ffe2:	48 89 c7             	mov    %rax,%rdi
    ffe5:	ff d2                	call   *%rdx
    ffe7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ffeb:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        if ( !vkGetPhysicalDeviceProperties2 )
    fff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    fff6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    fffd:	48 85 c0             	test   %rax,%rax
   10000:	75 16                	jne    10018 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf52>
          vkGetPhysicalDeviceProperties2 = vkGetPhysicalDeviceProperties2KHR;
   10002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10006:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
   1000d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10011:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
          PFN_vkGetPhysicalDeviceFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceFormatProperties2KHR" ) );
   10018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1001c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10020:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10024:	48 8d 0d 05 35 01 00 	lea    0x13505(%rip),%rcx        # 23530 <_ZNSt8__detailL19__atomic_spin_countE+0x874>
   1002b:	48 89 ce             	mov    %rcx,%rsi
   1002e:	48 89 c7             	mov    %rax,%rdi
   10031:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceFormatProperties2KHR =
   10033:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10037:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        if ( !vkGetPhysicalDeviceFormatProperties2 )
   1003e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10042:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
   10049:	48 85 c0             	test   %rax,%rax
   1004c:	75 16                	jne    10064 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xf9e>
          vkGetPhysicalDeviceFormatProperties2 = vkGetPhysicalDeviceFormatProperties2KHR;
   1004e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10052:	48 8b 90 28 02 00 00 	mov    0x228(%rax),%rdx
   10059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1005d:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
          PFN_vkGetPhysicalDeviceImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceImageFormatProperties2KHR" ) );
   10064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10068:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1006c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10070:	48 8d 0d e1 34 01 00 	lea    0x134e1(%rip),%rcx        # 23558 <_ZNSt8__detailL19__atomic_spin_countE+0x89c>
   10077:	48 89 ce             	mov    %rcx,%rsi
   1007a:	48 89 c7             	mov    %rax,%rdi
   1007d:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceImageFormatProperties2KHR =
   1007f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10083:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        if ( !vkGetPhysicalDeviceImageFormatProperties2 )
   1008a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1008e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
   10095:	48 85 c0             	test   %rax,%rax
   10098:	75 16                	jne    100b0 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0xfea>
          vkGetPhysicalDeviceImageFormatProperties2 = vkGetPhysicalDeviceImageFormatProperties2KHR;
   1009a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1009e:	48 8b 90 30 02 00 00 	mov    0x230(%rax),%rdx
   100a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100a9:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
          PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR" ) );
   100b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100b4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   100b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   100bc:	48 8d 0d c5 34 01 00 	lea    0x134c5(%rip),%rcx        # 23588 <_ZNSt8__detailL19__atomic_spin_countE+0x8cc>
   100c3:	48 89 ce             	mov    %rcx,%rsi
   100c6:	48 89 c7             	mov    %rax,%rdi
   100c9:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyProperties2KHR =
   100cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   100cf:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        if ( !vkGetPhysicalDeviceQueueFamilyProperties2 )
   100d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100da:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
   100e1:	48 85 c0             	test   %rax,%rax
   100e4:	75 16                	jne    100fc <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1036>
          vkGetPhysicalDeviceQueueFamilyProperties2 = vkGetPhysicalDeviceQueueFamilyProperties2KHR;
   100e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100ea:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
   100f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   100f5:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
          PFN_vkGetPhysicalDeviceMemoryProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceMemoryProperties2KHR" ) );
   100fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10100:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10108:	48 8d 0d a9 34 01 00 	lea    0x134a9(%rip),%rcx        # 235b8 <_ZNSt8__detailL19__atomic_spin_countE+0x8fc>
   1010f:	48 89 ce             	mov    %rcx,%rsi
   10112:	48 89 c7             	mov    %rax,%rdi
   10115:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceMemoryProperties2KHR =
   10117:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1011b:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        if ( !vkGetPhysicalDeviceMemoryProperties2 )
   10122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10126:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
   1012d:	48 85 c0             	test   %rax,%rax
   10130:	75 16                	jne    10148 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x1082>
          vkGetPhysicalDeviceMemoryProperties2 = vkGetPhysicalDeviceMemoryProperties2KHR;
   10132:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10136:	48 8b 90 40 02 00 00 	mov    0x240(%rax),%rdx
   1013d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10141:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
          PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR" ) );
   10148:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1014c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10150:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10154:	48 8d 0d 85 34 01 00 	lea    0x13485(%rip),%rcx        # 235e0 <_ZNSt8__detailL19__atomic_spin_countE+0x924>
   1015b:	48 89 ce             	mov    %rcx,%rsi
   1015e:	48 89 c7             	mov    %rax,%rdi
   10161:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
   10163:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10167:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        if ( !vkGetPhysicalDeviceSparseImageFormatProperties2 )
   1016e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10172:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
   10179:	48 85 c0             	test   %rax,%rax
   1017c:	75 16                	jne    10194 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_+0x10ce>
          vkGetPhysicalDeviceSparseImageFormatProperties2 = vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
   1017e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10182:	48 8b 90 48 02 00 00 	mov    0x248(%rax),%rdx
   10189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1018d:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
          PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR" ) );
   10194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10198:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1019c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   101a0:	48 8d 0d 71 34 01 00 	lea    0x13471(%rip),%rcx        # 23618 <_ZNSt8__detailL19__atomic_spin_countE+0x95c>
   101a7:	48 89 ce             	mov    %rcx,%rsi
   101aa:	48 89 c7             	mov    %rax,%rdi
   101ad:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilities2KHR =
   101af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   101b3:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormats2KHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormats2KHR" ) );
   101ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101be:	48 8b 50 50          	mov    0x50(%rax),%rdx
   101c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   101c6:	48 8d 0d 7b 34 01 00 	lea    0x1347b(%rip),%rcx        # 23648 <_ZNSt8__detailL19__atomic_spin_countE+0x98c>
   101cd:	48 89 ce             	mov    %rcx,%rsi
   101d0:	48 89 c7             	mov    %rax,%rdi
   101d3:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormats2KHR =
   101d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   101d9:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
          vkGetInstanceProcAddr( instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" ) );
   101e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   101e4:	48 8b 50 50          	mov    0x50(%rax),%rdx
   101e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   101ec:	48 8d 0d 7d 34 01 00 	lea    0x1347d(%rip),%rcx        # 23670 <_ZNSt8__detailL19__atomic_spin_countE+0x9b4>
   101f3:	48 89 ce             	mov    %rcx,%rsi
   101f6:	48 89 c7             	mov    %rax,%rdi
   101f9:	ff d2                	call   *%rdx
        vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
   101fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   101ff:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" ) );
   10206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1020a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1020e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10212:	48 8d 0d 97 34 01 00 	lea    0x13497(%rip),%rcx        # 236b0 <_ZNSt8__detailL19__atomic_spin_countE+0x9f4>
   10219:	48 89 ce             	mov    %rcx,%rsi
   1021c:	48 89 c7             	mov    %rax,%rdi
   1021f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
   10221:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10225:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkDestroySurfaceKHR = PFN_vkDestroySurfaceKHR( vkGetInstanceProcAddr( instance, "vkDestroySurfaceKHR" ) );
   1022c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10230:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10234:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10238:	48 8d 0d a9 34 01 00 	lea    0x134a9(%rip),%rcx        # 236e8 <_ZNSt8__detailL19__atomic_spin_countE+0xa2c>
   1023f:	48 89 ce             	mov    %rcx,%rsi
   10242:	48 89 c7             	mov    %rax,%rdi
   10245:	ff d2                	call   *%rdx
   10247:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1024b:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceSupportKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceSupportKHR" ) );
   10252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10256:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1025a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1025e:	48 8d 0d 9b 34 01 00 	lea    0x1349b(%rip),%rcx        # 23700 <_ZNSt8__detailL19__atomic_spin_countE+0xa44>
   10265:	48 89 ce             	mov    %rcx,%rsi
   10268:	48 89 c7             	mov    %rax,%rdi
   1026b:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceSupportKHR =
   1026d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10271:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" ) );
   10278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1027c:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10284:	48 8d 0d 9d 34 01 00 	lea    0x1349d(%rip),%rcx        # 23728 <_ZNSt8__detailL19__atomic_spin_countE+0xa6c>
   1028b:	48 89 ce             	mov    %rcx,%rsi
   1028e:	48 89 c7             	mov    %rax,%rdi
   10291:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
   10293:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10297:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
          PFN_vkGetPhysicalDeviceSurfaceFormatsKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfaceFormatsKHR" ) );
   1029e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102a2:	48 8b 50 50          	mov    0x50(%rax),%rdx
   102a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   102aa:	48 8d 0d a7 34 01 00 	lea    0x134a7(%rip),%rcx        # 23758 <_ZNSt8__detailL19__atomic_spin_countE+0xa9c>
   102b1:	48 89 ce             	mov    %rcx,%rsi
   102b4:	48 89 c7             	mov    %rax,%rdi
   102b7:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfaceFormatsKHR =
   102b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   102bd:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
          PFN_vkGetPhysicalDeviceSurfacePresentModesKHR( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSurfacePresentModesKHR" ) );
   102c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102c8:	48 8b 50 50          	mov    0x50(%rax),%rdx
   102cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   102d0:	48 8d 0d a9 34 01 00 	lea    0x134a9(%rip),%rcx        # 23780 <_ZNSt8__detailL19__atomic_spin_countE+0xac4>
   102d7:	48 89 ce             	mov    %rcx,%rsi
   102da:	48 89 c7             	mov    %rax,%rdi
   102dd:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSurfacePresentModesKHR =
   102df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   102e3:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
          PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" ) );
   102ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   102ee:	48 8b 50 50          	mov    0x50(%rax),%rdx
   102f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   102f6:	48 8d 0d b3 34 01 00 	lea    0x134b3(%rip),%rcx        # 237b0 <_ZNSt8__detailL19__atomic_spin_countE+0xaf4>
   102fd:	48 89 ce             	mov    %rcx,%rsi
   10300:	48 89 c7             	mov    %rax,%rdi
   10303:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
   10305:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10309:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
          vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" ) );
   10310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10314:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1031c:	48 8d 0d c5 34 01 00 	lea    0x134c5(%rip),%rcx        # 237e8 <_ZNSt8__detailL19__atomic_spin_countE+0xb2c>
   10323:	48 89 ce             	mov    %rcx,%rsi
   10326:	48 89 c7             	mov    %rax,%rdi
   10329:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
   1032b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1032f:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
          PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV" ) );
   10336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1033a:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1033e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10342:	48 8d 0d e7 34 01 00 	lea    0x134e7(%rip),%rcx        # 23830 <_ZNSt8__detailL19__atomic_spin_countE+0xb74>
   10349:	48 89 ce             	mov    %rcx,%rsi
   1034c:	48 89 c7             	mov    %rax,%rdi
   1034f:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
   10351:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10355:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
          PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV( vkGetInstanceProcAddr( instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV" ) );
   1035c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10360:	48 8b 50 50          	mov    0x50(%rax),%rdx
   10364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10368:	48 8d 0d f9 34 01 00 	lea    0x134f9(%rip),%rcx        # 23868 <_ZNSt8__detailL19__atomic_spin_countE+0xbac>
   1036f:	48 89 ce             	mov    %rcx,%rsi
   10372:	48 89 c7             	mov    %rax,%rdi
   10375:	ff d2                	call   *%rdx
        vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
   10377:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1037b:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkGetDeviceProcAddr = PFN_vkGetDeviceProcAddr( vkGetInstanceProcAddr( instance, "vkGetDeviceProcAddr" ) );
   10382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10386:	48 8b 50 50          	mov    0x50(%rax),%rdx
   1038a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1038e:	48 8d 0d 00 35 01 00 	lea    0x13500(%rip),%rcx        # 23895 <_ZNSt8__detailL19__atomic_spin_countE+0xbd9>
   10395:	48 89 ce             	mov    %rcx,%rsi
   10398:	48 89 c7             	mov    %rax,%rdi
   1039b:	ff d2                	call   *%rdx
   1039d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   103a1:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
      }
   103a8:	90                   	nop
   103a9:	c9                   	leave
   103aa:	c3                   	ret
   103ab:	90                   	nop

00000000000103ac <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>:
      DeviceDispatcher( PFN_vkGetDeviceProcAddr getProcAddr, VkDevice device ) : vkGetDeviceProcAddr( getProcAddr )
   103ac:	55                   	push   %rbp
   103ad:	48 89 e5             	mov    %rsp,%rbp
   103b0:	48 83 ec 20          	sub    $0x20,%rsp
   103b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   103b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   103bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   103c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103c4:	48 89 c7             	mov    %rax,%rdi
   103c7:	e8 d0 61 ff ff       	call   659c <_ZN2vk18DispatchLoaderBaseC1Ev>
   103cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103d0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   103d4:	48 89 50 10          	mov    %rdx,0x10(%rax)
   103d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103dc:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   103e3:	00 
   103e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103e8:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   103ef:	00 
   103f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   103f4:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   103fb:	00 
   103fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10400:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
   10407:	00 
   10408:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1040c:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
   10413:	00 
   10414:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10418:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
   1041f:	00 
   10420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10424:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
   1042b:	00 
   1042c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10430:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
   10437:	00 
   10438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1043c:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
   10443:	00 
   10444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10448:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
   1044f:	00 
   10450:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10454:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
   1045b:	00 
   1045c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10460:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
   10467:	00 
   10468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1046c:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
   10473:	00 
   10474:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10478:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
   1047f:	00 00 00 00 
   10483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10487:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
   1048e:	00 00 00 00 
   10492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10496:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
   1049d:	00 00 00 00 
   104a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104a5:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
   104ac:	00 00 00 00 
   104b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104b4:	48 c7 80 a0 00 00 00 	movq   $0x0,0xa0(%rax)
   104bb:	00 00 00 00 
   104bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104c3:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
   104ca:	00 00 00 00 
   104ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104d2:	48 c7 80 b0 00 00 00 	movq   $0x0,0xb0(%rax)
   104d9:	00 00 00 00 
   104dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104e1:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
   104e8:	00 00 00 00 
   104ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104f0:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
   104f7:	00 00 00 00 
   104fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   104ff:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)
   10506:	00 00 00 00 
   1050a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1050e:	48 c7 80 d0 00 00 00 	movq   $0x0,0xd0(%rax)
   10515:	00 00 00 00 
   10519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1051d:	48 c7 80 d8 00 00 00 	movq   $0x0,0xd8(%rax)
   10524:	00 00 00 00 
   10528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1052c:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
   10533:	00 00 00 00 
   10537:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1053b:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
   10542:	00 00 00 00 
   10546:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1054a:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
   10551:	00 00 00 00 
   10555:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10559:	48 c7 80 f8 00 00 00 	movq   $0x0,0xf8(%rax)
   10560:	00 00 00 00 
   10564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10568:	48 c7 80 00 01 00 00 	movq   $0x0,0x100(%rax)
   1056f:	00 00 00 00 
   10573:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10577:	48 c7 80 08 01 00 00 	movq   $0x0,0x108(%rax)
   1057e:	00 00 00 00 
   10582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10586:	48 c7 80 10 01 00 00 	movq   $0x0,0x110(%rax)
   1058d:	00 00 00 00 
   10591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10595:	48 c7 80 18 01 00 00 	movq   $0x0,0x118(%rax)
   1059c:	00 00 00 00 
   105a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105a4:	48 c7 80 20 01 00 00 	movq   $0x0,0x120(%rax)
   105ab:	00 00 00 00 
   105af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105b3:	48 c7 80 28 01 00 00 	movq   $0x0,0x128(%rax)
   105ba:	00 00 00 00 
   105be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105c2:	48 c7 80 30 01 00 00 	movq   $0x0,0x130(%rax)
   105c9:	00 00 00 00 
   105cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105d1:	48 c7 80 38 01 00 00 	movq   $0x0,0x138(%rax)
   105d8:	00 00 00 00 
   105dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105e0:	48 c7 80 40 01 00 00 	movq   $0x0,0x140(%rax)
   105e7:	00 00 00 00 
   105eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105ef:	48 c7 80 48 01 00 00 	movq   $0x0,0x148(%rax)
   105f6:	00 00 00 00 
   105fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   105fe:	48 c7 80 50 01 00 00 	movq   $0x0,0x150(%rax)
   10605:	00 00 00 00 
   10609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1060d:	48 c7 80 58 01 00 00 	movq   $0x0,0x158(%rax)
   10614:	00 00 00 00 
   10618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1061c:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
   10623:	00 00 00 00 
   10627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1062b:	48 c7 80 68 01 00 00 	movq   $0x0,0x168(%rax)
   10632:	00 00 00 00 
   10636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1063a:	48 c7 80 70 01 00 00 	movq   $0x0,0x170(%rax)
   10641:	00 00 00 00 
   10645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10649:	48 c7 80 78 01 00 00 	movq   $0x0,0x178(%rax)
   10650:	00 00 00 00 
   10654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10658:	48 c7 80 80 01 00 00 	movq   $0x0,0x180(%rax)
   1065f:	00 00 00 00 
   10663:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10667:	48 c7 80 88 01 00 00 	movq   $0x0,0x188(%rax)
   1066e:	00 00 00 00 
   10672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10676:	48 c7 80 90 01 00 00 	movq   $0x0,0x190(%rax)
   1067d:	00 00 00 00 
   10681:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10685:	48 c7 80 98 01 00 00 	movq   $0x0,0x198(%rax)
   1068c:	00 00 00 00 
   10690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10694:	48 c7 80 a0 01 00 00 	movq   $0x0,0x1a0(%rax)
   1069b:	00 00 00 00 
   1069f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106a3:	48 c7 80 a8 01 00 00 	movq   $0x0,0x1a8(%rax)
   106aa:	00 00 00 00 
   106ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106b2:	48 c7 80 b0 01 00 00 	movq   $0x0,0x1b0(%rax)
   106b9:	00 00 00 00 
   106bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106c1:	48 c7 80 b8 01 00 00 	movq   $0x0,0x1b8(%rax)
   106c8:	00 00 00 00 
   106cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106d0:	48 c7 80 c0 01 00 00 	movq   $0x0,0x1c0(%rax)
   106d7:	00 00 00 00 
   106db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106df:	48 c7 80 c8 01 00 00 	movq   $0x0,0x1c8(%rax)
   106e6:	00 00 00 00 
   106ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106ee:	48 c7 80 d0 01 00 00 	movq   $0x0,0x1d0(%rax)
   106f5:	00 00 00 00 
   106f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   106fd:	48 c7 80 d8 01 00 00 	movq   $0x0,0x1d8(%rax)
   10704:	00 00 00 00 
   10708:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1070c:	48 c7 80 e0 01 00 00 	movq   $0x0,0x1e0(%rax)
   10713:	00 00 00 00 
   10717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1071b:	48 c7 80 e8 01 00 00 	movq   $0x0,0x1e8(%rax)
   10722:	00 00 00 00 
   10726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1072a:	48 c7 80 f0 01 00 00 	movq   $0x0,0x1f0(%rax)
   10731:	00 00 00 00 
   10735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10739:	48 c7 80 f8 01 00 00 	movq   $0x0,0x1f8(%rax)
   10740:	00 00 00 00 
   10744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10748:	48 c7 80 00 02 00 00 	movq   $0x0,0x200(%rax)
   1074f:	00 00 00 00 
   10753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10757:	48 c7 80 08 02 00 00 	movq   $0x0,0x208(%rax)
   1075e:	00 00 00 00 
   10762:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10766:	48 c7 80 10 02 00 00 	movq   $0x0,0x210(%rax)
   1076d:	00 00 00 00 
   10771:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10775:	48 c7 80 18 02 00 00 	movq   $0x0,0x218(%rax)
   1077c:	00 00 00 00 
   10780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10784:	48 c7 80 20 02 00 00 	movq   $0x0,0x220(%rax)
   1078b:	00 00 00 00 
   1078f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10793:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
   1079a:	00 00 00 00 
   1079e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107a2:	48 c7 80 30 02 00 00 	movq   $0x0,0x230(%rax)
   107a9:	00 00 00 00 
   107ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107b1:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
   107b8:	00 00 00 00 
   107bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107c0:	48 c7 80 40 02 00 00 	movq   $0x0,0x240(%rax)
   107c7:	00 00 00 00 
   107cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107cf:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
   107d6:	00 00 00 00 
   107da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107de:	48 c7 80 50 02 00 00 	movq   $0x0,0x250(%rax)
   107e5:	00 00 00 00 
   107e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107ed:	48 c7 80 58 02 00 00 	movq   $0x0,0x258(%rax)
   107f4:	00 00 00 00 
   107f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107fc:	48 c7 80 60 02 00 00 	movq   $0x0,0x260(%rax)
   10803:	00 00 00 00 
   10807:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1080b:	48 c7 80 68 02 00 00 	movq   $0x0,0x268(%rax)
   10812:	00 00 00 00 
   10816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1081a:	48 c7 80 70 02 00 00 	movq   $0x0,0x270(%rax)
   10821:	00 00 00 00 
   10825:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10829:	48 c7 80 78 02 00 00 	movq   $0x0,0x278(%rax)
   10830:	00 00 00 00 
   10834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10838:	48 c7 80 80 02 00 00 	movq   $0x0,0x280(%rax)
   1083f:	00 00 00 00 
   10843:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10847:	48 c7 80 88 02 00 00 	movq   $0x0,0x288(%rax)
   1084e:	00 00 00 00 
   10852:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10856:	48 c7 80 90 02 00 00 	movq   $0x0,0x290(%rax)
   1085d:	00 00 00 00 
   10861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10865:	48 c7 80 98 02 00 00 	movq   $0x0,0x298(%rax)
   1086c:	00 00 00 00 
   10870:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10874:	48 c7 80 a0 02 00 00 	movq   $0x0,0x2a0(%rax)
   1087b:	00 00 00 00 
   1087f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10883:	48 c7 80 a8 02 00 00 	movq   $0x0,0x2a8(%rax)
   1088a:	00 00 00 00 
   1088e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10892:	48 c7 80 b0 02 00 00 	movq   $0x0,0x2b0(%rax)
   10899:	00 00 00 00 
   1089d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108a1:	48 c7 80 b8 02 00 00 	movq   $0x0,0x2b8(%rax)
   108a8:	00 00 00 00 
   108ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108b0:	48 c7 80 c0 02 00 00 	movq   $0x0,0x2c0(%rax)
   108b7:	00 00 00 00 
   108bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108bf:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
   108c6:	00 00 00 00 
   108ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108ce:	48 c7 80 d0 02 00 00 	movq   $0x0,0x2d0(%rax)
   108d5:	00 00 00 00 
   108d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108dd:	48 c7 80 d8 02 00 00 	movq   $0x0,0x2d8(%rax)
   108e4:	00 00 00 00 
   108e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108ec:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
   108f3:	00 00 00 00 
   108f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   108fb:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
   10902:	00 00 00 00 
   10906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1090a:	48 c7 80 f0 02 00 00 	movq   $0x0,0x2f0(%rax)
   10911:	00 00 00 00 
   10915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10919:	48 c7 80 f8 02 00 00 	movq   $0x0,0x2f8(%rax)
   10920:	00 00 00 00 
   10924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10928:	48 c7 80 00 03 00 00 	movq   $0x0,0x300(%rax)
   1092f:	00 00 00 00 
   10933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10937:	48 c7 80 08 03 00 00 	movq   $0x0,0x308(%rax)
   1093e:	00 00 00 00 
   10942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10946:	48 c7 80 10 03 00 00 	movq   $0x0,0x310(%rax)
   1094d:	00 00 00 00 
   10951:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10955:	48 c7 80 18 03 00 00 	movq   $0x0,0x318(%rax)
   1095c:	00 00 00 00 
   10960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10964:	48 c7 80 20 03 00 00 	movq   $0x0,0x320(%rax)
   1096b:	00 00 00 00 
   1096f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10973:	48 c7 80 28 03 00 00 	movq   $0x0,0x328(%rax)
   1097a:	00 00 00 00 
   1097e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10982:	48 c7 80 30 03 00 00 	movq   $0x0,0x330(%rax)
   10989:	00 00 00 00 
   1098d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10991:	48 c7 80 38 03 00 00 	movq   $0x0,0x338(%rax)
   10998:	00 00 00 00 
   1099c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109a0:	48 c7 80 40 03 00 00 	movq   $0x0,0x340(%rax)
   109a7:	00 00 00 00 
   109ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109af:	48 c7 80 48 03 00 00 	movq   $0x0,0x348(%rax)
   109b6:	00 00 00 00 
   109ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109be:	48 c7 80 50 03 00 00 	movq   $0x0,0x350(%rax)
   109c5:	00 00 00 00 
   109c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109cd:	48 c7 80 58 03 00 00 	movq   $0x0,0x358(%rax)
   109d4:	00 00 00 00 
   109d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109dc:	48 c7 80 60 03 00 00 	movq   $0x0,0x360(%rax)
   109e3:	00 00 00 00 
   109e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109eb:	48 c7 80 68 03 00 00 	movq   $0x0,0x368(%rax)
   109f2:	00 00 00 00 
   109f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   109fa:	48 c7 80 70 03 00 00 	movq   $0x0,0x370(%rax)
   10a01:	00 00 00 00 
   10a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a09:	48 c7 80 78 03 00 00 	movq   $0x0,0x378(%rax)
   10a10:	00 00 00 00 
   10a14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a18:	48 c7 80 80 03 00 00 	movq   $0x0,0x380(%rax)
   10a1f:	00 00 00 00 
   10a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a27:	48 c7 80 88 03 00 00 	movq   $0x0,0x388(%rax)
   10a2e:	00 00 00 00 
   10a32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a36:	48 c7 80 90 03 00 00 	movq   $0x0,0x390(%rax)
   10a3d:	00 00 00 00 
   10a41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a45:	48 c7 80 98 03 00 00 	movq   $0x0,0x398(%rax)
   10a4c:	00 00 00 00 
   10a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a54:	48 c7 80 a0 03 00 00 	movq   $0x0,0x3a0(%rax)
   10a5b:	00 00 00 00 
   10a5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a63:	48 c7 80 a8 03 00 00 	movq   $0x0,0x3a8(%rax)
   10a6a:	00 00 00 00 
   10a6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a72:	48 c7 80 b0 03 00 00 	movq   $0x0,0x3b0(%rax)
   10a79:	00 00 00 00 
   10a7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a81:	48 c7 80 b8 03 00 00 	movq   $0x0,0x3b8(%rax)
   10a88:	00 00 00 00 
   10a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a90:	48 c7 80 c0 03 00 00 	movq   $0x0,0x3c0(%rax)
   10a97:	00 00 00 00 
   10a9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10a9f:	48 c7 80 c8 03 00 00 	movq   $0x0,0x3c8(%rax)
   10aa6:	00 00 00 00 
   10aaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aae:	48 c7 80 d0 03 00 00 	movq   $0x0,0x3d0(%rax)
   10ab5:	00 00 00 00 
   10ab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10abd:	48 c7 80 d8 03 00 00 	movq   $0x0,0x3d8(%rax)
   10ac4:	00 00 00 00 
   10ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10acc:	48 c7 80 e0 03 00 00 	movq   $0x0,0x3e0(%rax)
   10ad3:	00 00 00 00 
   10ad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10adb:	48 c7 80 e8 03 00 00 	movq   $0x0,0x3e8(%rax)
   10ae2:	00 00 00 00 
   10ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10aea:	48 c7 80 f0 03 00 00 	movq   $0x0,0x3f0(%rax)
   10af1:	00 00 00 00 
   10af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10af9:	48 c7 80 f8 03 00 00 	movq   $0x0,0x3f8(%rax)
   10b00:	00 00 00 00 
   10b04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b08:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
   10b0f:	00 00 00 00 
   10b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b17:	48 c7 80 08 04 00 00 	movq   $0x0,0x408(%rax)
   10b1e:	00 00 00 00 
   10b22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b26:	48 c7 80 10 04 00 00 	movq   $0x0,0x410(%rax)
   10b2d:	00 00 00 00 
   10b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b35:	48 c7 80 18 04 00 00 	movq   $0x0,0x418(%rax)
   10b3c:	00 00 00 00 
   10b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b44:	48 c7 80 20 04 00 00 	movq   $0x0,0x420(%rax)
   10b4b:	00 00 00 00 
   10b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b53:	48 c7 80 28 04 00 00 	movq   $0x0,0x428(%rax)
   10b5a:	00 00 00 00 
   10b5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b62:	48 c7 80 30 04 00 00 	movq   $0x0,0x430(%rax)
   10b69:	00 00 00 00 
   10b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b71:	48 c7 80 38 04 00 00 	movq   $0x0,0x438(%rax)
   10b78:	00 00 00 00 
   10b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b80:	48 c7 80 40 04 00 00 	movq   $0x0,0x440(%rax)
   10b87:	00 00 00 00 
   10b8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b8f:	48 c7 80 48 04 00 00 	movq   $0x0,0x448(%rax)
   10b96:	00 00 00 00 
   10b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b9e:	48 c7 80 50 04 00 00 	movq   $0x0,0x450(%rax)
   10ba5:	00 00 00 00 
   10ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bad:	48 c7 80 58 04 00 00 	movq   $0x0,0x458(%rax)
   10bb4:	00 00 00 00 
   10bb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bbc:	48 c7 80 60 04 00 00 	movq   $0x0,0x460(%rax)
   10bc3:	00 00 00 00 
   10bc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bcb:	48 c7 80 68 04 00 00 	movq   $0x0,0x468(%rax)
   10bd2:	00 00 00 00 
   10bd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bda:	48 c7 80 70 04 00 00 	movq   $0x0,0x470(%rax)
   10be1:	00 00 00 00 
   10be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10be9:	48 c7 80 78 04 00 00 	movq   $0x0,0x478(%rax)
   10bf0:	00 00 00 00 
   10bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10bf8:	48 c7 80 80 04 00 00 	movq   $0x0,0x480(%rax)
   10bff:	00 00 00 00 
   10c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c07:	48 c7 80 88 04 00 00 	movq   $0x0,0x488(%rax)
   10c0e:	00 00 00 00 
   10c12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c16:	48 c7 80 90 04 00 00 	movq   $0x0,0x490(%rax)
   10c1d:	00 00 00 00 
   10c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c25:	48 c7 80 98 04 00 00 	movq   $0x0,0x498(%rax)
   10c2c:	00 00 00 00 
   10c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c34:	48 c7 80 a0 04 00 00 	movq   $0x0,0x4a0(%rax)
   10c3b:	00 00 00 00 
   10c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c43:	48 c7 80 a8 04 00 00 	movq   $0x0,0x4a8(%rax)
   10c4a:	00 00 00 00 
   10c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c52:	48 c7 80 b0 04 00 00 	movq   $0x0,0x4b0(%rax)
   10c59:	00 00 00 00 
   10c5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c61:	48 c7 80 b8 04 00 00 	movq   $0x0,0x4b8(%rax)
   10c68:	00 00 00 00 
   10c6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c70:	48 c7 80 c0 04 00 00 	movq   $0x0,0x4c0(%rax)
   10c77:	00 00 00 00 
   10c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c7f:	48 c7 80 c8 04 00 00 	movq   $0x0,0x4c8(%rax)
   10c86:	00 00 00 00 
   10c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c8e:	48 c7 80 d0 04 00 00 	movq   $0x0,0x4d0(%rax)
   10c95:	00 00 00 00 
   10c99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10c9d:	48 c7 80 d8 04 00 00 	movq   $0x0,0x4d8(%rax)
   10ca4:	00 00 00 00 
   10ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cac:	48 c7 80 e0 04 00 00 	movq   $0x0,0x4e0(%rax)
   10cb3:	00 00 00 00 
   10cb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cbb:	48 c7 80 e8 04 00 00 	movq   $0x0,0x4e8(%rax)
   10cc2:	00 00 00 00 
   10cc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cca:	48 c7 80 f0 04 00 00 	movq   $0x0,0x4f0(%rax)
   10cd1:	00 00 00 00 
   10cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cd9:	48 c7 80 f8 04 00 00 	movq   $0x0,0x4f8(%rax)
   10ce0:	00 00 00 00 
   10ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ce8:	48 c7 80 00 05 00 00 	movq   $0x0,0x500(%rax)
   10cef:	00 00 00 00 
   10cf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10cf7:	48 c7 80 08 05 00 00 	movq   $0x0,0x508(%rax)
   10cfe:	00 00 00 00 
   10d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d06:	48 c7 80 10 05 00 00 	movq   $0x0,0x510(%rax)
   10d0d:	00 00 00 00 
   10d11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d15:	48 c7 80 18 05 00 00 	movq   $0x0,0x518(%rax)
   10d1c:	00 00 00 00 
   10d20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d24:	48 c7 80 20 05 00 00 	movq   $0x0,0x520(%rax)
   10d2b:	00 00 00 00 
   10d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d33:	48 c7 80 28 05 00 00 	movq   $0x0,0x528(%rax)
   10d3a:	00 00 00 00 
   10d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d42:	48 c7 80 30 05 00 00 	movq   $0x0,0x530(%rax)
   10d49:	00 00 00 00 
   10d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d51:	48 c7 80 38 05 00 00 	movq   $0x0,0x538(%rax)
   10d58:	00 00 00 00 
   10d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d60:	48 c7 80 40 05 00 00 	movq   $0x0,0x540(%rax)
   10d67:	00 00 00 00 
   10d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d6f:	48 c7 80 48 05 00 00 	movq   $0x0,0x548(%rax)
   10d76:	00 00 00 00 
   10d7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d7e:	48 c7 80 50 05 00 00 	movq   $0x0,0x550(%rax)
   10d85:	00 00 00 00 
   10d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d8d:	48 c7 80 58 05 00 00 	movq   $0x0,0x558(%rax)
   10d94:	00 00 00 00 
   10d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10d9c:	48 c7 80 60 05 00 00 	movq   $0x0,0x560(%rax)
   10da3:	00 00 00 00 
   10da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dab:	48 c7 80 68 05 00 00 	movq   $0x0,0x568(%rax)
   10db2:	00 00 00 00 
   10db6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dba:	48 c7 80 70 05 00 00 	movq   $0x0,0x570(%rax)
   10dc1:	00 00 00 00 
   10dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dc9:	48 c7 80 78 05 00 00 	movq   $0x0,0x578(%rax)
   10dd0:	00 00 00 00 
   10dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10dd8:	48 c7 80 80 05 00 00 	movq   $0x0,0x580(%rax)
   10ddf:	00 00 00 00 
   10de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10de7:	48 c7 80 88 05 00 00 	movq   $0x0,0x588(%rax)
   10dee:	00 00 00 00 
   10df2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10df6:	48 c7 80 90 05 00 00 	movq   $0x0,0x590(%rax)
   10dfd:	00 00 00 00 
   10e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e05:	48 c7 80 98 05 00 00 	movq   $0x0,0x598(%rax)
   10e0c:	00 00 00 00 
   10e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e14:	48 c7 80 a0 05 00 00 	movq   $0x0,0x5a0(%rax)
   10e1b:	00 00 00 00 
   10e1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e23:	48 c7 80 a8 05 00 00 	movq   $0x0,0x5a8(%rax)
   10e2a:	00 00 00 00 
   10e2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e32:	48 c7 80 b0 05 00 00 	movq   $0x0,0x5b0(%rax)
   10e39:	00 00 00 00 
   10e3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e41:	48 c7 80 b8 05 00 00 	movq   $0x0,0x5b8(%rax)
   10e48:	00 00 00 00 
   10e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e50:	48 c7 80 c0 05 00 00 	movq   $0x0,0x5c0(%rax)
   10e57:	00 00 00 00 
   10e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e5f:	48 c7 80 c8 05 00 00 	movq   $0x0,0x5c8(%rax)
   10e66:	00 00 00 00 
   10e6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e6e:	48 c7 80 d0 05 00 00 	movq   $0x0,0x5d0(%rax)
   10e75:	00 00 00 00 
   10e79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e7d:	48 c7 80 d8 05 00 00 	movq   $0x0,0x5d8(%rax)
   10e84:	00 00 00 00 
   10e88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e8c:	48 c7 80 e0 05 00 00 	movq   $0x0,0x5e0(%rax)
   10e93:	00 00 00 00 
   10e97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10e9b:	48 c7 80 e8 05 00 00 	movq   $0x0,0x5e8(%rax)
   10ea2:	00 00 00 00 
   10ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10eaa:	48 c7 80 f0 05 00 00 	movq   $0x0,0x5f0(%rax)
   10eb1:	00 00 00 00 
   10eb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10eb9:	48 c7 80 f8 05 00 00 	movq   $0x0,0x5f8(%rax)
   10ec0:	00 00 00 00 
   10ec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ec8:	48 c7 80 00 06 00 00 	movq   $0x0,0x600(%rax)
   10ecf:	00 00 00 00 
   10ed3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ed7:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
   10ede:	00 00 00 00 
   10ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ee6:	48 c7 80 10 06 00 00 	movq   $0x0,0x610(%rax)
   10eed:	00 00 00 00 
   10ef1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ef5:	48 c7 80 18 06 00 00 	movq   $0x0,0x618(%rax)
   10efc:	00 00 00 00 
   10f00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f04:	48 c7 80 20 06 00 00 	movq   $0x0,0x620(%rax)
   10f0b:	00 00 00 00 
   10f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f13:	48 c7 80 28 06 00 00 	movq   $0x0,0x628(%rax)
   10f1a:	00 00 00 00 
   10f1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f22:	48 c7 80 30 06 00 00 	movq   $0x0,0x630(%rax)
   10f29:	00 00 00 00 
   10f2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f31:	48 c7 80 38 06 00 00 	movq   $0x0,0x638(%rax)
   10f38:	00 00 00 00 
   10f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f40:	48 c7 80 40 06 00 00 	movq   $0x0,0x640(%rax)
   10f47:	00 00 00 00 
   10f4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f4f:	48 c7 80 48 06 00 00 	movq   $0x0,0x648(%rax)
   10f56:	00 00 00 00 
   10f5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f5e:	48 c7 80 50 06 00 00 	movq   $0x0,0x650(%rax)
   10f65:	00 00 00 00 
   10f69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f6d:	48 c7 80 58 06 00 00 	movq   $0x0,0x658(%rax)
   10f74:	00 00 00 00 
   10f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f7c:	48 c7 80 60 06 00 00 	movq   $0x0,0x660(%rax)
   10f83:	00 00 00 00 
   10f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f8b:	48 c7 80 68 06 00 00 	movq   $0x0,0x668(%rax)
   10f92:	00 00 00 00 
   10f96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10f9a:	48 c7 80 70 06 00 00 	movq   $0x0,0x670(%rax)
   10fa1:	00 00 00 00 
   10fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fa9:	48 c7 80 78 06 00 00 	movq   $0x0,0x678(%rax)
   10fb0:	00 00 00 00 
   10fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fb8:	48 c7 80 80 06 00 00 	movq   $0x0,0x680(%rax)
   10fbf:	00 00 00 00 
   10fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fc7:	48 c7 80 88 06 00 00 	movq   $0x0,0x688(%rax)
   10fce:	00 00 00 00 
   10fd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fd6:	48 c7 80 90 06 00 00 	movq   $0x0,0x690(%rax)
   10fdd:	00 00 00 00 
   10fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10fe5:	48 c7 80 98 06 00 00 	movq   $0x0,0x698(%rax)
   10fec:	00 00 00 00 
   10ff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ff4:	48 c7 80 a0 06 00 00 	movq   $0x0,0x6a0(%rax)
   10ffb:	00 00 00 00 
   10fff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11003:	48 c7 80 a8 06 00 00 	movq   $0x0,0x6a8(%rax)
   1100a:	00 00 00 00 
   1100e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11012:	48 c7 80 b0 06 00 00 	movq   $0x0,0x6b0(%rax)
   11019:	00 00 00 00 
   1101d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11021:	48 c7 80 b8 06 00 00 	movq   $0x0,0x6b8(%rax)
   11028:	00 00 00 00 
   1102c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11030:	48 c7 80 c0 06 00 00 	movq   $0x0,0x6c0(%rax)
   11037:	00 00 00 00 
   1103b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1103f:	48 c7 80 c8 06 00 00 	movq   $0x0,0x6c8(%rax)
   11046:	00 00 00 00 
   1104a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1104e:	48 c7 80 d0 06 00 00 	movq   $0x0,0x6d0(%rax)
   11055:	00 00 00 00 
   11059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1105d:	48 c7 80 d8 06 00 00 	movq   $0x0,0x6d8(%rax)
   11064:	00 00 00 00 
   11068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1106c:	48 c7 80 e0 06 00 00 	movq   $0x0,0x6e0(%rax)
   11073:	00 00 00 00 
   11077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1107b:	48 c7 80 e8 06 00 00 	movq   $0x0,0x6e8(%rax)
   11082:	00 00 00 00 
   11086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1108a:	48 c7 80 f0 06 00 00 	movq   $0x0,0x6f0(%rax)
   11091:	00 00 00 00 
   11095:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11099:	48 c7 80 f8 06 00 00 	movq   $0x0,0x6f8(%rax)
   110a0:	00 00 00 00 
   110a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110a8:	48 c7 80 00 07 00 00 	movq   $0x0,0x700(%rax)
   110af:	00 00 00 00 
   110b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110b7:	48 c7 80 08 07 00 00 	movq   $0x0,0x708(%rax)
   110be:	00 00 00 00 
   110c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110c6:	48 c7 80 10 07 00 00 	movq   $0x0,0x710(%rax)
   110cd:	00 00 00 00 
   110d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110d5:	48 c7 80 18 07 00 00 	movq   $0x0,0x718(%rax)
   110dc:	00 00 00 00 
   110e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110e4:	48 c7 80 20 07 00 00 	movq   $0x0,0x720(%rax)
   110eb:	00 00 00 00 
   110ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110f3:	48 c7 80 28 07 00 00 	movq   $0x0,0x728(%rax)
   110fa:	00 00 00 00 
   110fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11102:	48 c7 80 30 07 00 00 	movq   $0x0,0x730(%rax)
   11109:	00 00 00 00 
   1110d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11111:	48 c7 80 38 07 00 00 	movq   $0x0,0x738(%rax)
   11118:	00 00 00 00 
   1111c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11120:	48 c7 80 40 07 00 00 	movq   $0x0,0x740(%rax)
   11127:	00 00 00 00 
   1112b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1112f:	48 c7 80 48 07 00 00 	movq   $0x0,0x748(%rax)
   11136:	00 00 00 00 
   1113a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1113e:	48 c7 80 50 07 00 00 	movq   $0x0,0x750(%rax)
   11145:	00 00 00 00 
   11149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1114d:	48 c7 80 58 07 00 00 	movq   $0x0,0x758(%rax)
   11154:	00 00 00 00 
   11158:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1115c:	48 c7 80 60 07 00 00 	movq   $0x0,0x760(%rax)
   11163:	00 00 00 00 
   11167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1116b:	48 c7 80 68 07 00 00 	movq   $0x0,0x768(%rax)
   11172:	00 00 00 00 
   11176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1117a:	48 c7 80 70 07 00 00 	movq   $0x0,0x770(%rax)
   11181:	00 00 00 00 
   11185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11189:	48 c7 80 78 07 00 00 	movq   $0x0,0x778(%rax)
   11190:	00 00 00 00 
   11194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11198:	48 c7 80 80 07 00 00 	movq   $0x0,0x780(%rax)
   1119f:	00 00 00 00 
   111a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111a7:	48 c7 80 88 07 00 00 	movq   $0x0,0x788(%rax)
   111ae:	00 00 00 00 
   111b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111b6:	48 c7 80 90 07 00 00 	movq   $0x0,0x790(%rax)
   111bd:	00 00 00 00 
   111c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111c5:	48 c7 80 98 07 00 00 	movq   $0x0,0x798(%rax)
   111cc:	00 00 00 00 
   111d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111d4:	48 c7 80 a0 07 00 00 	movq   $0x0,0x7a0(%rax)
   111db:	00 00 00 00 
   111df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111e3:	48 c7 80 a8 07 00 00 	movq   $0x0,0x7a8(%rax)
   111ea:	00 00 00 00 
   111ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   111f2:	48 c7 80 b0 07 00 00 	movq   $0x0,0x7b0(%rax)
   111f9:	00 00 00 00 
   111fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11201:	48 c7 80 b8 07 00 00 	movq   $0x0,0x7b8(%rax)
   11208:	00 00 00 00 
   1120c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11210:	48 c7 80 c0 07 00 00 	movq   $0x0,0x7c0(%rax)
   11217:	00 00 00 00 
   1121b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1121f:	48 c7 80 c8 07 00 00 	movq   $0x0,0x7c8(%rax)
   11226:	00 00 00 00 
   1122a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1122e:	48 c7 80 d0 07 00 00 	movq   $0x0,0x7d0(%rax)
   11235:	00 00 00 00 
   11239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1123d:	48 c7 80 d8 07 00 00 	movq   $0x0,0x7d8(%rax)
   11244:	00 00 00 00 
   11248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1124c:	48 c7 80 e0 07 00 00 	movq   $0x0,0x7e0(%rax)
   11253:	00 00 00 00 
   11257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1125b:	48 c7 80 e8 07 00 00 	movq   $0x0,0x7e8(%rax)
   11262:	00 00 00 00 
   11266:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1126a:	48 c7 80 f0 07 00 00 	movq   $0x0,0x7f0(%rax)
   11271:	00 00 00 00 
   11275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11279:	48 c7 80 f8 07 00 00 	movq   $0x0,0x7f8(%rax)
   11280:	00 00 00 00 
   11284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11288:	48 c7 80 00 08 00 00 	movq   $0x0,0x800(%rax)
   1128f:	00 00 00 00 
   11293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11297:	48 c7 80 08 08 00 00 	movq   $0x0,0x808(%rax)
   1129e:	00 00 00 00 
   112a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112a6:	48 c7 80 10 08 00 00 	movq   $0x0,0x810(%rax)
   112ad:	00 00 00 00 
   112b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112b5:	48 c7 80 18 08 00 00 	movq   $0x0,0x818(%rax)
   112bc:	00 00 00 00 
   112c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112c4:	48 c7 80 20 08 00 00 	movq   $0x0,0x820(%rax)
   112cb:	00 00 00 00 
   112cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112d3:	48 c7 80 28 08 00 00 	movq   $0x0,0x828(%rax)
   112da:	00 00 00 00 
   112de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112e2:	48 c7 80 30 08 00 00 	movq   $0x0,0x830(%rax)
   112e9:	00 00 00 00 
   112ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112f1:	48 c7 80 38 08 00 00 	movq   $0x0,0x838(%rax)
   112f8:	00 00 00 00 
   112fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11300:	48 c7 80 40 08 00 00 	movq   $0x0,0x840(%rax)
   11307:	00 00 00 00 
   1130b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1130f:	48 c7 80 48 08 00 00 	movq   $0x0,0x848(%rax)
   11316:	00 00 00 00 
   1131a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1131e:	48 c7 80 50 08 00 00 	movq   $0x0,0x850(%rax)
   11325:	00 00 00 00 
   11329:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1132d:	48 c7 80 58 08 00 00 	movq   $0x0,0x858(%rax)
   11334:	00 00 00 00 
   11338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1133c:	48 c7 80 60 08 00 00 	movq   $0x0,0x860(%rax)
   11343:	00 00 00 00 
   11347:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1134b:	48 c7 80 68 08 00 00 	movq   $0x0,0x868(%rax)
   11352:	00 00 00 00 
   11356:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1135a:	48 c7 80 70 08 00 00 	movq   $0x0,0x870(%rax)
   11361:	00 00 00 00 
   11365:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11369:	48 c7 80 78 08 00 00 	movq   $0x0,0x878(%rax)
   11370:	00 00 00 00 
   11374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11378:	48 c7 80 80 08 00 00 	movq   $0x0,0x880(%rax)
   1137f:	00 00 00 00 
   11383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11387:	48 c7 80 88 08 00 00 	movq   $0x0,0x888(%rax)
   1138e:	00 00 00 00 
   11392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11396:	48 c7 80 90 08 00 00 	movq   $0x0,0x890(%rax)
   1139d:	00 00 00 00 
   113a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113a5:	48 c7 80 98 08 00 00 	movq   $0x0,0x898(%rax)
   113ac:	00 00 00 00 
   113b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113b4:	48 c7 80 a0 08 00 00 	movq   $0x0,0x8a0(%rax)
   113bb:	00 00 00 00 
   113bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113c3:	48 c7 80 a8 08 00 00 	movq   $0x0,0x8a8(%rax)
   113ca:	00 00 00 00 
   113ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113d2:	48 c7 80 b0 08 00 00 	movq   $0x0,0x8b0(%rax)
   113d9:	00 00 00 00 
   113dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113e1:	48 c7 80 b8 08 00 00 	movq   $0x0,0x8b8(%rax)
   113e8:	00 00 00 00 
   113ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113f0:	48 c7 80 c0 08 00 00 	movq   $0x0,0x8c0(%rax)
   113f7:	00 00 00 00 
   113fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113ff:	48 c7 80 c8 08 00 00 	movq   $0x0,0x8c8(%rax)
   11406:	00 00 00 00 
   1140a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1140e:	48 c7 80 d0 08 00 00 	movq   $0x0,0x8d0(%rax)
   11415:	00 00 00 00 
   11419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1141d:	48 c7 80 d8 08 00 00 	movq   $0x0,0x8d8(%rax)
   11424:	00 00 00 00 
   11428:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1142c:	48 c7 80 e0 08 00 00 	movq   $0x0,0x8e0(%rax)
   11433:	00 00 00 00 
   11437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1143b:	48 c7 80 e8 08 00 00 	movq   $0x0,0x8e8(%rax)
   11442:	00 00 00 00 
   11446:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1144a:	48 c7 80 f0 08 00 00 	movq   $0x0,0x8f0(%rax)
   11451:	00 00 00 00 
   11455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11459:	48 c7 80 f8 08 00 00 	movq   $0x0,0x8f8(%rax)
   11460:	00 00 00 00 
   11464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11468:	48 c7 80 00 09 00 00 	movq   $0x0,0x900(%rax)
   1146f:	00 00 00 00 
   11473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11477:	48 c7 80 08 09 00 00 	movq   $0x0,0x908(%rax)
   1147e:	00 00 00 00 
   11482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11486:	48 c7 80 10 09 00 00 	movq   $0x0,0x910(%rax)
   1148d:	00 00 00 00 
   11491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11495:	48 c7 80 18 09 00 00 	movq   $0x0,0x918(%rax)
   1149c:	00 00 00 00 
   114a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114a4:	48 c7 80 20 09 00 00 	movq   $0x0,0x920(%rax)
   114ab:	00 00 00 00 
   114af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114b3:	48 c7 80 28 09 00 00 	movq   $0x0,0x928(%rax)
   114ba:	00 00 00 00 
   114be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114c2:	48 c7 80 30 09 00 00 	movq   $0x0,0x930(%rax)
   114c9:	00 00 00 00 
   114cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114d1:	48 c7 80 38 09 00 00 	movq   $0x0,0x938(%rax)
   114d8:	00 00 00 00 
   114dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114e0:	48 c7 80 40 09 00 00 	movq   $0x0,0x940(%rax)
   114e7:	00 00 00 00 
   114eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114ef:	48 c7 80 48 09 00 00 	movq   $0x0,0x948(%rax)
   114f6:	00 00 00 00 
   114fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114fe:	48 c7 80 50 09 00 00 	movq   $0x0,0x950(%rax)
   11505:	00 00 00 00 
   11509:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1150d:	48 c7 80 58 09 00 00 	movq   $0x0,0x958(%rax)
   11514:	00 00 00 00 
   11518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1151c:	48 c7 80 60 09 00 00 	movq   $0x0,0x960(%rax)
   11523:	00 00 00 00 
   11527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1152b:	48 c7 80 68 09 00 00 	movq   $0x0,0x968(%rax)
   11532:	00 00 00 00 
   11536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1153a:	48 c7 80 70 09 00 00 	movq   $0x0,0x970(%rax)
   11541:	00 00 00 00 
   11545:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11549:	48 c7 80 78 09 00 00 	movq   $0x0,0x978(%rax)
   11550:	00 00 00 00 
   11554:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11558:	48 c7 80 80 09 00 00 	movq   $0x0,0x980(%rax)
   1155f:	00 00 00 00 
   11563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11567:	48 c7 80 88 09 00 00 	movq   $0x0,0x988(%rax)
   1156e:	00 00 00 00 
   11572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11576:	48 c7 80 90 09 00 00 	movq   $0x0,0x990(%rax)
   1157d:	00 00 00 00 
   11581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11585:	48 c7 80 98 09 00 00 	movq   $0x0,0x998(%rax)
   1158c:	00 00 00 00 
   11590:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11594:	48 c7 80 a0 09 00 00 	movq   $0x0,0x9a0(%rax)
   1159b:	00 00 00 00 
   1159f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115a3:	48 c7 80 a8 09 00 00 	movq   $0x0,0x9a8(%rax)
   115aa:	00 00 00 00 
   115ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115b2:	48 c7 80 b0 09 00 00 	movq   $0x0,0x9b0(%rax)
   115b9:	00 00 00 00 
   115bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115c1:	48 c7 80 b8 09 00 00 	movq   $0x0,0x9b8(%rax)
   115c8:	00 00 00 00 
   115cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115d0:	48 c7 80 c0 09 00 00 	movq   $0x0,0x9c0(%rax)
   115d7:	00 00 00 00 
   115db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115df:	48 c7 80 c8 09 00 00 	movq   $0x0,0x9c8(%rax)
   115e6:	00 00 00 00 
   115ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115ee:	48 c7 80 d0 09 00 00 	movq   $0x0,0x9d0(%rax)
   115f5:	00 00 00 00 
   115f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   115fd:	48 c7 80 d8 09 00 00 	movq   $0x0,0x9d8(%rax)
   11604:	00 00 00 00 
   11608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1160c:	48 c7 80 e0 09 00 00 	movq   $0x0,0x9e0(%rax)
   11613:	00 00 00 00 
   11617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1161b:	48 c7 80 e8 09 00 00 	movq   $0x0,0x9e8(%rax)
   11622:	00 00 00 00 
   11626:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1162a:	48 c7 80 f0 09 00 00 	movq   $0x0,0x9f0(%rax)
   11631:	00 00 00 00 
   11635:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11639:	48 c7 80 f8 09 00 00 	movq   $0x0,0x9f8(%rax)
   11640:	00 00 00 00 
   11644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11648:	48 c7 80 00 0a 00 00 	movq   $0x0,0xa00(%rax)
   1164f:	00 00 00 00 
   11653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11657:	48 c7 80 08 0a 00 00 	movq   $0x0,0xa08(%rax)
   1165e:	00 00 00 00 
   11662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11666:	48 c7 80 10 0a 00 00 	movq   $0x0,0xa10(%rax)
   1166d:	00 00 00 00 
   11671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11675:	48 c7 80 18 0a 00 00 	movq   $0x0,0xa18(%rax)
   1167c:	00 00 00 00 
   11680:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11684:	48 c7 80 20 0a 00 00 	movq   $0x0,0xa20(%rax)
   1168b:	00 00 00 00 
   1168f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11693:	48 c7 80 28 0a 00 00 	movq   $0x0,0xa28(%rax)
   1169a:	00 00 00 00 
   1169e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116a2:	48 c7 80 30 0a 00 00 	movq   $0x0,0xa30(%rax)
   116a9:	00 00 00 00 
   116ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116b1:	48 c7 80 38 0a 00 00 	movq   $0x0,0xa38(%rax)
   116b8:	00 00 00 00 
   116bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116c0:	48 c7 80 40 0a 00 00 	movq   $0x0,0xa40(%rax)
   116c7:	00 00 00 00 
   116cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116cf:	48 c7 80 48 0a 00 00 	movq   $0x0,0xa48(%rax)
   116d6:	00 00 00 00 
   116da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116de:	48 c7 80 50 0a 00 00 	movq   $0x0,0xa50(%rax)
   116e5:	00 00 00 00 
   116e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116ed:	48 c7 80 58 0a 00 00 	movq   $0x0,0xa58(%rax)
   116f4:	00 00 00 00 
   116f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   116fc:	48 c7 80 60 0a 00 00 	movq   $0x0,0xa60(%rax)
   11703:	00 00 00 00 
   11707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1170b:	48 c7 80 68 0a 00 00 	movq   $0x0,0xa68(%rax)
   11712:	00 00 00 00 
   11716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1171a:	48 c7 80 70 0a 00 00 	movq   $0x0,0xa70(%rax)
   11721:	00 00 00 00 
   11725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11729:	48 c7 80 78 0a 00 00 	movq   $0x0,0xa78(%rax)
   11730:	00 00 00 00 
   11734:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11738:	48 c7 80 80 0a 00 00 	movq   $0x0,0xa80(%rax)
   1173f:	00 00 00 00 
   11743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11747:	48 c7 80 88 0a 00 00 	movq   $0x0,0xa88(%rax)
   1174e:	00 00 00 00 
   11752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11756:	48 c7 80 90 0a 00 00 	movq   $0x0,0xa90(%rax)
   1175d:	00 00 00 00 
   11761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11765:	48 c7 80 98 0a 00 00 	movq   $0x0,0xa98(%rax)
   1176c:	00 00 00 00 
   11770:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11774:	48 c7 80 a0 0a 00 00 	movq   $0x0,0xaa0(%rax)
   1177b:	00 00 00 00 
   1177f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11783:	48 c7 80 a8 0a 00 00 	movq   $0x0,0xaa8(%rax)
   1178a:	00 00 00 00 
   1178e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11792:	48 c7 80 b0 0a 00 00 	movq   $0x0,0xab0(%rax)
   11799:	00 00 00 00 
   1179d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117a1:	48 c7 80 b8 0a 00 00 	movq   $0x0,0xab8(%rax)
   117a8:	00 00 00 00 
   117ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117b0:	48 c7 80 c0 0a 00 00 	movq   $0x0,0xac0(%rax)
   117b7:	00 00 00 00 
   117bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117bf:	48 c7 80 c8 0a 00 00 	movq   $0x0,0xac8(%rax)
   117c6:	00 00 00 00 
   117ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117ce:	48 c7 80 d0 0a 00 00 	movq   $0x0,0xad0(%rax)
   117d5:	00 00 00 00 
   117d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117dd:	48 c7 80 d8 0a 00 00 	movq   $0x0,0xad8(%rax)
   117e4:	00 00 00 00 
   117e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117ec:	48 c7 80 e0 0a 00 00 	movq   $0x0,0xae0(%rax)
   117f3:	00 00 00 00 
   117f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   117fb:	48 c7 80 e8 0a 00 00 	movq   $0x0,0xae8(%rax)
   11802:	00 00 00 00 
   11806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1180a:	48 c7 80 f0 0a 00 00 	movq   $0x0,0xaf0(%rax)
   11811:	00 00 00 00 
   11815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11819:	48 c7 80 f8 0a 00 00 	movq   $0x0,0xaf8(%rax)
   11820:	00 00 00 00 
   11824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11828:	48 c7 80 00 0b 00 00 	movq   $0x0,0xb00(%rax)
   1182f:	00 00 00 00 
   11833:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11837:	48 c7 80 08 0b 00 00 	movq   $0x0,0xb08(%rax)
   1183e:	00 00 00 00 
   11842:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11846:	48 c7 80 10 0b 00 00 	movq   $0x0,0xb10(%rax)
   1184d:	00 00 00 00 
   11851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11855:	48 c7 80 18 0b 00 00 	movq   $0x0,0xb18(%rax)
   1185c:	00 00 00 00 
   11860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11864:	48 c7 80 20 0b 00 00 	movq   $0x0,0xb20(%rax)
   1186b:	00 00 00 00 
   1186f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11873:	48 c7 80 28 0b 00 00 	movq   $0x0,0xb28(%rax)
   1187a:	00 00 00 00 
   1187e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11882:	48 c7 80 30 0b 00 00 	movq   $0x0,0xb30(%rax)
   11889:	00 00 00 00 
   1188d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11891:	48 c7 80 38 0b 00 00 	movq   $0x0,0xb38(%rax)
   11898:	00 00 00 00 
   1189c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118a0:	48 c7 80 40 0b 00 00 	movq   $0x0,0xb40(%rax)
   118a7:	00 00 00 00 
   118ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118af:	48 c7 80 48 0b 00 00 	movq   $0x0,0xb48(%rax)
   118b6:	00 00 00 00 
   118ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118be:	48 c7 80 50 0b 00 00 	movq   $0x0,0xb50(%rax)
   118c5:	00 00 00 00 
   118c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118cd:	48 c7 80 58 0b 00 00 	movq   $0x0,0xb58(%rax)
   118d4:	00 00 00 00 
   118d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118dc:	48 c7 80 60 0b 00 00 	movq   $0x0,0xb60(%rax)
   118e3:	00 00 00 00 
   118e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118eb:	48 c7 80 68 0b 00 00 	movq   $0x0,0xb68(%rax)
   118f2:	00 00 00 00 
   118f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   118fa:	48 c7 80 70 0b 00 00 	movq   $0x0,0xb70(%rax)
   11901:	00 00 00 00 
   11905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11909:	48 c7 80 78 0b 00 00 	movq   $0x0,0xb78(%rax)
   11910:	00 00 00 00 
   11914:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11918:	48 c7 80 80 0b 00 00 	movq   $0x0,0xb80(%rax)
   1191f:	00 00 00 00 
   11923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11927:	48 c7 80 88 0b 00 00 	movq   $0x0,0xb88(%rax)
   1192e:	00 00 00 00 
   11932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11936:	48 c7 80 90 0b 00 00 	movq   $0x0,0xb90(%rax)
   1193d:	00 00 00 00 
   11941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11945:	48 c7 80 98 0b 00 00 	movq   $0x0,0xb98(%rax)
   1194c:	00 00 00 00 
   11950:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11954:	48 c7 80 a0 0b 00 00 	movq   $0x0,0xba0(%rax)
   1195b:	00 00 00 00 
   1195f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11963:	48 c7 80 a8 0b 00 00 	movq   $0x0,0xba8(%rax)
   1196a:	00 00 00 00 
   1196e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11972:	48 c7 80 b0 0b 00 00 	movq   $0x0,0xbb0(%rax)
   11979:	00 00 00 00 
   1197d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11981:	48 c7 80 b8 0b 00 00 	movq   $0x0,0xbb8(%rax)
   11988:	00 00 00 00 
   1198c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11990:	48 c7 80 c0 0b 00 00 	movq   $0x0,0xbc0(%rax)
   11997:	00 00 00 00 
   1199b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1199f:	48 c7 80 c8 0b 00 00 	movq   $0x0,0xbc8(%rax)
   119a6:	00 00 00 00 
   119aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119ae:	48 c7 80 d0 0b 00 00 	movq   $0x0,0xbd0(%rax)
   119b5:	00 00 00 00 
   119b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119bd:	48 c7 80 d8 0b 00 00 	movq   $0x0,0xbd8(%rax)
   119c4:	00 00 00 00 
   119c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119cc:	48 c7 80 e0 0b 00 00 	movq   $0x0,0xbe0(%rax)
   119d3:	00 00 00 00 
   119d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119db:	48 c7 80 e8 0b 00 00 	movq   $0x0,0xbe8(%rax)
   119e2:	00 00 00 00 
   119e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119ea:	48 c7 80 f0 0b 00 00 	movq   $0x0,0xbf0(%rax)
   119f1:	00 00 00 00 
   119f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119f9:	48 c7 80 f8 0b 00 00 	movq   $0x0,0xbf8(%rax)
   11a00:	00 00 00 00 
   11a04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a08:	48 c7 80 00 0c 00 00 	movq   $0x0,0xc00(%rax)
   11a0f:	00 00 00 00 
   11a13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a17:	48 c7 80 08 0c 00 00 	movq   $0x0,0xc08(%rax)
   11a1e:	00 00 00 00 
   11a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a26:	48 c7 80 10 0c 00 00 	movq   $0x0,0xc10(%rax)
   11a2d:	00 00 00 00 
   11a31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a35:	48 c7 80 18 0c 00 00 	movq   $0x0,0xc18(%rax)
   11a3c:	00 00 00 00 
   11a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a44:	48 c7 80 20 0c 00 00 	movq   $0x0,0xc20(%rax)
   11a4b:	00 00 00 00 
   11a4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a53:	48 c7 80 28 0c 00 00 	movq   $0x0,0xc28(%rax)
   11a5a:	00 00 00 00 
   11a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a62:	48 c7 80 30 0c 00 00 	movq   $0x0,0xc30(%rax)
   11a69:	00 00 00 00 
   11a6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a71:	48 c7 80 38 0c 00 00 	movq   $0x0,0xc38(%rax)
   11a78:	00 00 00 00 
   11a7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a80:	48 c7 80 40 0c 00 00 	movq   $0x0,0xc40(%rax)
   11a87:	00 00 00 00 
   11a8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a8f:	48 c7 80 48 0c 00 00 	movq   $0x0,0xc48(%rax)
   11a96:	00 00 00 00 
   11a9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a9e:	48 c7 80 50 0c 00 00 	movq   $0x0,0xc50(%rax)
   11aa5:	00 00 00 00 
   11aa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11aad:	48 c7 80 58 0c 00 00 	movq   $0x0,0xc58(%rax)
   11ab4:	00 00 00 00 
   11ab8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11abc:	48 c7 80 60 0c 00 00 	movq   $0x0,0xc60(%rax)
   11ac3:	00 00 00 00 
   11ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11acb:	48 c7 80 68 0c 00 00 	movq   $0x0,0xc68(%rax)
   11ad2:	00 00 00 00 
   11ad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ada:	48 c7 80 70 0c 00 00 	movq   $0x0,0xc70(%rax)
   11ae1:	00 00 00 00 
   11ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ae9:	48 c7 80 78 0c 00 00 	movq   $0x0,0xc78(%rax)
   11af0:	00 00 00 00 
   11af4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11af8:	48 c7 80 80 0c 00 00 	movq   $0x0,0xc80(%rax)
   11aff:	00 00 00 00 
   11b03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b07:	48 c7 80 88 0c 00 00 	movq   $0x0,0xc88(%rax)
   11b0e:	00 00 00 00 
   11b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b16:	48 c7 80 90 0c 00 00 	movq   $0x0,0xc90(%rax)
   11b1d:	00 00 00 00 
   11b21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b25:	48 c7 80 98 0c 00 00 	movq   $0x0,0xc98(%rax)
   11b2c:	00 00 00 00 
   11b30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b34:	48 c7 80 a0 0c 00 00 	movq   $0x0,0xca0(%rax)
   11b3b:	00 00 00 00 
   11b3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b43:	48 c7 80 a8 0c 00 00 	movq   $0x0,0xca8(%rax)
   11b4a:	00 00 00 00 
   11b4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b52:	48 c7 80 b0 0c 00 00 	movq   $0x0,0xcb0(%rax)
   11b59:	00 00 00 00 
   11b5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b61:	48 c7 80 b8 0c 00 00 	movq   $0x0,0xcb8(%rax)
   11b68:	00 00 00 00 
   11b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b70:	48 c7 80 c0 0c 00 00 	movq   $0x0,0xcc0(%rax)
   11b77:	00 00 00 00 
   11b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b7f:	48 c7 80 c8 0c 00 00 	movq   $0x0,0xcc8(%rax)
   11b86:	00 00 00 00 
   11b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b8e:	48 c7 80 d0 0c 00 00 	movq   $0x0,0xcd0(%rax)
   11b95:	00 00 00 00 
   11b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b9d:	48 c7 80 d8 0c 00 00 	movq   $0x0,0xcd8(%rax)
   11ba4:	00 00 00 00 
   11ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bac:	48 c7 80 e0 0c 00 00 	movq   $0x0,0xce0(%rax)
   11bb3:	00 00 00 00 
   11bb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bbb:	48 c7 80 e8 0c 00 00 	movq   $0x0,0xce8(%rax)
   11bc2:	00 00 00 00 
   11bc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bca:	48 c7 80 f0 0c 00 00 	movq   $0x0,0xcf0(%rax)
   11bd1:	00 00 00 00 
   11bd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bd9:	48 c7 80 f8 0c 00 00 	movq   $0x0,0xcf8(%rax)
   11be0:	00 00 00 00 
   11be4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11be8:	48 c7 80 00 0d 00 00 	movq   $0x0,0xd00(%rax)
   11bef:	00 00 00 00 
   11bf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bf7:	48 c7 80 08 0d 00 00 	movq   $0x0,0xd08(%rax)
   11bfe:	00 00 00 00 
   11c02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c06:	48 c7 80 10 0d 00 00 	movq   $0x0,0xd10(%rax)
   11c0d:	00 00 00 00 
   11c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c15:	48 c7 80 18 0d 00 00 	movq   $0x0,0xd18(%rax)
   11c1c:	00 00 00 00 
   11c20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c24:	48 c7 80 20 0d 00 00 	movq   $0x0,0xd20(%rax)
   11c2b:	00 00 00 00 
   11c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c33:	48 c7 80 28 0d 00 00 	movq   $0x0,0xd28(%rax)
   11c3a:	00 00 00 00 
   11c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c42:	48 c7 80 30 0d 00 00 	movq   $0x0,0xd30(%rax)
   11c49:	00 00 00 00 
   11c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c51:	48 c7 80 38 0d 00 00 	movq   $0x0,0xd38(%rax)
   11c58:	00 00 00 00 
   11c5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c60:	48 c7 80 40 0d 00 00 	movq   $0x0,0xd40(%rax)
   11c67:	00 00 00 00 
   11c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c6f:	48 c7 80 48 0d 00 00 	movq   $0x0,0xd48(%rax)
   11c76:	00 00 00 00 
   11c7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c7e:	48 c7 80 50 0d 00 00 	movq   $0x0,0xd50(%rax)
   11c85:	00 00 00 00 
   11c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c8d:	48 c7 80 58 0d 00 00 	movq   $0x0,0xd58(%rax)
   11c94:	00 00 00 00 
   11c98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c9c:	48 c7 80 60 0d 00 00 	movq   $0x0,0xd60(%rax)
   11ca3:	00 00 00 00 
   11ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cab:	48 c7 80 68 0d 00 00 	movq   $0x0,0xd68(%rax)
   11cb2:	00 00 00 00 
   11cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cba:	48 c7 80 70 0d 00 00 	movq   $0x0,0xd70(%rax)
   11cc1:	00 00 00 00 
   11cc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cc9:	48 c7 80 78 0d 00 00 	movq   $0x0,0xd78(%rax)
   11cd0:	00 00 00 00 
   11cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cd8:	48 c7 80 80 0d 00 00 	movq   $0x0,0xd80(%rax)
   11cdf:	00 00 00 00 
   11ce3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ce7:	48 c7 80 88 0d 00 00 	movq   $0x0,0xd88(%rax)
   11cee:	00 00 00 00 
   11cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cf6:	48 c7 80 90 0d 00 00 	movq   $0x0,0xd90(%rax)
   11cfd:	00 00 00 00 
   11d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d05:	48 c7 80 98 0d 00 00 	movq   $0x0,0xd98(%rax)
   11d0c:	00 00 00 00 
   11d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d14:	48 c7 80 a0 0d 00 00 	movq   $0x0,0xda0(%rax)
   11d1b:	00 00 00 00 
   11d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d23:	48 c7 80 a8 0d 00 00 	movq   $0x0,0xda8(%rax)
   11d2a:	00 00 00 00 
   11d2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d32:	48 c7 80 b0 0d 00 00 	movq   $0x0,0xdb0(%rax)
   11d39:	00 00 00 00 
   11d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d41:	48 c7 80 b8 0d 00 00 	movq   $0x0,0xdb8(%rax)
   11d48:	00 00 00 00 
   11d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d50:	48 c7 80 c0 0d 00 00 	movq   $0x0,0xdc0(%rax)
   11d57:	00 00 00 00 
   11d5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d5f:	48 c7 80 c8 0d 00 00 	movq   $0x0,0xdc8(%rax)
   11d66:	00 00 00 00 
   11d6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d6e:	48 c7 80 d0 0d 00 00 	movq   $0x0,0xdd0(%rax)
   11d75:	00 00 00 00 
   11d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d7d:	48 c7 80 d8 0d 00 00 	movq   $0x0,0xdd8(%rax)
   11d84:	00 00 00 00 
   11d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d8c:	48 c7 80 e0 0d 00 00 	movq   $0x0,0xde0(%rax)
   11d93:	00 00 00 00 
   11d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11d9b:	48 c7 80 e8 0d 00 00 	movq   $0x0,0xde8(%rax)
   11da2:	00 00 00 00 
   11da6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11daa:	48 c7 80 f0 0d 00 00 	movq   $0x0,0xdf0(%rax)
   11db1:	00 00 00 00 
   11db5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11db9:	48 c7 80 f8 0d 00 00 	movq   $0x0,0xdf8(%rax)
   11dc0:	00 00 00 00 
   11dc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11dc8:	48 c7 80 00 0e 00 00 	movq   $0x0,0xe00(%rax)
   11dcf:	00 00 00 00 
   11dd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11dd7:	48 c7 80 08 0e 00 00 	movq   $0x0,0xe08(%rax)
   11dde:	00 00 00 00 
   11de2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11de6:	48 c7 80 10 0e 00 00 	movq   $0x0,0xe10(%rax)
   11ded:	00 00 00 00 
   11df1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11df5:	48 c7 80 18 0e 00 00 	movq   $0x0,0xe18(%rax)
   11dfc:	00 00 00 00 
   11e00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e04:	48 c7 80 20 0e 00 00 	movq   $0x0,0xe20(%rax)
   11e0b:	00 00 00 00 
   11e0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e13:	48 c7 80 28 0e 00 00 	movq   $0x0,0xe28(%rax)
   11e1a:	00 00 00 00 
   11e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e22:	48 c7 80 30 0e 00 00 	movq   $0x0,0xe30(%rax)
   11e29:	00 00 00 00 
   11e2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e31:	48 c7 80 38 0e 00 00 	movq   $0x0,0xe38(%rax)
   11e38:	00 00 00 00 
   11e3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e40:	48 c7 80 40 0e 00 00 	movq   $0x0,0xe40(%rax)
   11e47:	00 00 00 00 
   11e4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e4f:	48 c7 80 48 0e 00 00 	movq   $0x0,0xe48(%rax)
   11e56:	00 00 00 00 
   11e5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e5e:	48 c7 80 50 0e 00 00 	movq   $0x0,0xe50(%rax)
   11e65:	00 00 00 00 
   11e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e6d:	48 c7 80 58 0e 00 00 	movq   $0x0,0xe58(%rax)
   11e74:	00 00 00 00 
   11e78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e7c:	48 c7 80 60 0e 00 00 	movq   $0x0,0xe60(%rax)
   11e83:	00 00 00 00 
   11e87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e8b:	48 c7 80 68 0e 00 00 	movq   $0x0,0xe68(%rax)
   11e92:	00 00 00 00 
   11e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e9a:	48 c7 80 70 0e 00 00 	movq   $0x0,0xe70(%rax)
   11ea1:	00 00 00 00 
   11ea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ea9:	48 c7 80 78 0e 00 00 	movq   $0x0,0xe78(%rax)
   11eb0:	00 00 00 00 
   11eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11eb8:	48 c7 80 80 0e 00 00 	movq   $0x0,0xe80(%rax)
   11ebf:	00 00 00 00 
   11ec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ec7:	48 c7 80 88 0e 00 00 	movq   $0x0,0xe88(%rax)
   11ece:	00 00 00 00 
   11ed2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ed6:	48 c7 80 90 0e 00 00 	movq   $0x0,0xe90(%rax)
   11edd:	00 00 00 00 
   11ee1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ee5:	48 c7 80 98 0e 00 00 	movq   $0x0,0xe98(%rax)
   11eec:	00 00 00 00 
   11ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ef4:	48 c7 80 a0 0e 00 00 	movq   $0x0,0xea0(%rax)
   11efb:	00 00 00 00 
   11eff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f03:	48 c7 80 a8 0e 00 00 	movq   $0x0,0xea8(%rax)
   11f0a:	00 00 00 00 
   11f0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f12:	48 c7 80 b0 0e 00 00 	movq   $0x0,0xeb0(%rax)
   11f19:	00 00 00 00 
   11f1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f21:	48 c7 80 b8 0e 00 00 	movq   $0x0,0xeb8(%rax)
   11f28:	00 00 00 00 
   11f2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f30:	48 c7 80 c0 0e 00 00 	movq   $0x0,0xec0(%rax)
   11f37:	00 00 00 00 
   11f3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f3f:	48 c7 80 c8 0e 00 00 	movq   $0x0,0xec8(%rax)
   11f46:	00 00 00 00 
   11f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f4e:	48 c7 80 d0 0e 00 00 	movq   $0x0,0xed0(%rax)
   11f55:	00 00 00 00 
   11f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f5d:	48 c7 80 d8 0e 00 00 	movq   $0x0,0xed8(%rax)
   11f64:	00 00 00 00 
   11f68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f6c:	48 c7 80 e0 0e 00 00 	movq   $0x0,0xee0(%rax)
   11f73:	00 00 00 00 
   11f77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f7b:	48 c7 80 e8 0e 00 00 	movq   $0x0,0xee8(%rax)
   11f82:	00 00 00 00 
   11f86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f8a:	48 c7 80 f0 0e 00 00 	movq   $0x0,0xef0(%rax)
   11f91:	00 00 00 00 
   11f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f99:	48 c7 80 f8 0e 00 00 	movq   $0x0,0xef8(%rax)
   11fa0:	00 00 00 00 
   11fa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fa8:	48 c7 80 00 0f 00 00 	movq   $0x0,0xf00(%rax)
   11faf:	00 00 00 00 
   11fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fb7:	48 c7 80 08 0f 00 00 	movq   $0x0,0xf08(%rax)
   11fbe:	00 00 00 00 
   11fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fc6:	48 c7 80 10 0f 00 00 	movq   $0x0,0xf10(%rax)
   11fcd:	00 00 00 00 
   11fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fd5:	48 c7 80 18 0f 00 00 	movq   $0x0,0xf18(%rax)
   11fdc:	00 00 00 00 
   11fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11fe4:	48 c7 80 20 0f 00 00 	movq   $0x0,0xf20(%rax)
   11feb:	00 00 00 00 
   11fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11ff3:	48 c7 80 28 0f 00 00 	movq   $0x0,0xf28(%rax)
   11ffa:	00 00 00 00 
   11ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12002:	48 c7 80 30 0f 00 00 	movq   $0x0,0xf30(%rax)
   12009:	00 00 00 00 
   1200d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12011:	48 c7 80 38 0f 00 00 	movq   $0x0,0xf38(%rax)
   12018:	00 00 00 00 
   1201c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12020:	48 c7 80 40 0f 00 00 	movq   $0x0,0xf40(%rax)
   12027:	00 00 00 00 
   1202b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1202f:	48 c7 80 48 0f 00 00 	movq   $0x0,0xf48(%rax)
   12036:	00 00 00 00 
   1203a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1203e:	48 c7 80 50 0f 00 00 	movq   $0x0,0xf50(%rax)
   12045:	00 00 00 00 
   12049:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1204d:	48 c7 80 58 0f 00 00 	movq   $0x0,0xf58(%rax)
   12054:	00 00 00 00 
   12058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1205c:	48 c7 80 60 0f 00 00 	movq   $0x0,0xf60(%rax)
   12063:	00 00 00 00 
   12067:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1206b:	48 c7 80 68 0f 00 00 	movq   $0x0,0xf68(%rax)
   12072:	00 00 00 00 
   12076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1207a:	48 c7 80 70 0f 00 00 	movq   $0x0,0xf70(%rax)
   12081:	00 00 00 00 
   12085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12089:	48 c7 80 78 0f 00 00 	movq   $0x0,0xf78(%rax)
   12090:	00 00 00 00 
   12094:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12098:	48 c7 80 80 0f 00 00 	movq   $0x0,0xf80(%rax)
   1209f:	00 00 00 00 
   120a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120a7:	48 c7 80 88 0f 00 00 	movq   $0x0,0xf88(%rax)
   120ae:	00 00 00 00 
   120b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120b6:	48 c7 80 90 0f 00 00 	movq   $0x0,0xf90(%rax)
   120bd:	00 00 00 00 
   120c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120c5:	48 c7 80 98 0f 00 00 	movq   $0x0,0xf98(%rax)
   120cc:	00 00 00 00 
   120d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120d4:	48 c7 80 a0 0f 00 00 	movq   $0x0,0xfa0(%rax)
   120db:	00 00 00 00 
   120df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120e3:	48 c7 80 a8 0f 00 00 	movq   $0x0,0xfa8(%rax)
   120ea:	00 00 00 00 
   120ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   120f2:	48 c7 80 b0 0f 00 00 	movq   $0x0,0xfb0(%rax)
   120f9:	00 00 00 00 
        vkGetDeviceProcAddr                = PFN_vkGetDeviceProcAddr( vkGetDeviceProcAddr( device, "vkGetDeviceProcAddr" ) );
   120fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12101:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12105:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12109:	48 8d 0d 85 17 01 00 	lea    0x11785(%rip),%rcx        # 23895 <_ZNSt8__detailL19__atomic_spin_countE+0xbd9>
   12110:	48 89 ce             	mov    %rcx,%rsi
   12113:	48 89 c7             	mov    %rax,%rdi
   12116:	ff d2                	call   *%rdx
   12118:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1211c:	48 89 42 10          	mov    %rax,0x10(%rdx)
        vkDestroyDevice                    = PFN_vkDestroyDevice( vkGetDeviceProcAddr( device, "vkDestroyDevice" ) );
   12120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12124:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1212c:	48 8d 0d 76 17 01 00 	lea    0x11776(%rip),%rcx        # 238a9 <_ZNSt8__detailL19__atomic_spin_countE+0xbed>
   12133:	48 89 ce             	mov    %rcx,%rsi
   12136:	48 89 c7             	mov    %rax,%rdi
   12139:	ff d2                	call   *%rdx
   1213b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1213f:	48 89 42 18          	mov    %rax,0x18(%rdx)
        vkGetDeviceQueue                   = PFN_vkGetDeviceQueue( vkGetDeviceProcAddr( device, "vkGetDeviceQueue" ) );
   12143:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12147:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1214b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1214f:	48 8d 0d 63 17 01 00 	lea    0x11763(%rip),%rcx        # 238b9 <_ZNSt8__detailL19__atomic_spin_countE+0xbfd>
   12156:	48 89 ce             	mov    %rcx,%rsi
   12159:	48 89 c7             	mov    %rax,%rdi
   1215c:	ff d2                	call   *%rdx
   1215e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12162:	48 89 42 20          	mov    %rax,0x20(%rdx)
        vkQueueSubmit                      = PFN_vkQueueSubmit( vkGetDeviceProcAddr( device, "vkQueueSubmit" ) );
   12166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1216a:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1216e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12172:	48 8d 0d 51 17 01 00 	lea    0x11751(%rip),%rcx        # 238ca <_ZNSt8__detailL19__atomic_spin_countE+0xc0e>
   12179:	48 89 ce             	mov    %rcx,%rsi
   1217c:	48 89 c7             	mov    %rax,%rdi
   1217f:	ff d2                	call   *%rdx
   12181:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12185:	48 89 42 28          	mov    %rax,0x28(%rdx)
        vkQueueWaitIdle                    = PFN_vkQueueWaitIdle( vkGetDeviceProcAddr( device, "vkQueueWaitIdle" ) );
   12189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1218d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12191:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12195:	48 8d 0d 3c 17 01 00 	lea    0x1173c(%rip),%rcx        # 238d8 <_ZNSt8__detailL19__atomic_spin_countE+0xc1c>
   1219c:	48 89 ce             	mov    %rcx,%rsi
   1219f:	48 89 c7             	mov    %rax,%rdi
   121a2:	ff d2                	call   *%rdx
   121a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121a8:	48 89 42 30          	mov    %rax,0x30(%rdx)
        vkDeviceWaitIdle                   = PFN_vkDeviceWaitIdle( vkGetDeviceProcAddr( device, "vkDeviceWaitIdle" ) );
   121ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121b0:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121b8:	48 8d 0d 29 17 01 00 	lea    0x11729(%rip),%rcx        # 238e8 <_ZNSt8__detailL19__atomic_spin_countE+0xc2c>
   121bf:	48 89 ce             	mov    %rcx,%rsi
   121c2:	48 89 c7             	mov    %rax,%rdi
   121c5:	ff d2                	call   *%rdx
   121c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121cb:	48 89 42 38          	mov    %rax,0x38(%rdx)
        vkAllocateMemory                   = PFN_vkAllocateMemory( vkGetDeviceProcAddr( device, "vkAllocateMemory" ) );
   121cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121db:	48 8d 0d 17 17 01 00 	lea    0x11717(%rip),%rcx        # 238f9 <_ZNSt8__detailL19__atomic_spin_countE+0xc3d>
   121e2:	48 89 ce             	mov    %rcx,%rsi
   121e5:	48 89 c7             	mov    %rax,%rdi
   121e8:	ff d2                	call   *%rdx
   121ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   121ee:	48 89 42 40          	mov    %rax,0x40(%rdx)
        vkFreeMemory                       = PFN_vkFreeMemory( vkGetDeviceProcAddr( device, "vkFreeMemory" ) );
   121f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   121f6:	48 8b 50 10          	mov    0x10(%rax),%rdx
   121fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   121fe:	48 8d 0d 05 17 01 00 	lea    0x11705(%rip),%rcx        # 2390a <_ZNSt8__detailL19__atomic_spin_countE+0xc4e>
   12205:	48 89 ce             	mov    %rcx,%rsi
   12208:	48 89 c7             	mov    %rax,%rdi
   1220b:	ff d2                	call   *%rdx
   1220d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12211:	48 89 42 48          	mov    %rax,0x48(%rdx)
        vkMapMemory                        = PFN_vkMapMemory( vkGetDeviceProcAddr( device, "vkMapMemory" ) );
   12215:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12219:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1221d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12221:	48 8d 0d ef 16 01 00 	lea    0x116ef(%rip),%rcx        # 23917 <_ZNSt8__detailL19__atomic_spin_countE+0xc5b>
   12228:	48 89 ce             	mov    %rcx,%rsi
   1222b:	48 89 c7             	mov    %rax,%rdi
   1222e:	ff d2                	call   *%rdx
   12230:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12234:	48 89 42 50          	mov    %rax,0x50(%rdx)
        vkUnmapMemory                      = PFN_vkUnmapMemory( vkGetDeviceProcAddr( device, "vkUnmapMemory" ) );
   12238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1223c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12244:	48 8d 0d d8 16 01 00 	lea    0x116d8(%rip),%rcx        # 23923 <_ZNSt8__detailL19__atomic_spin_countE+0xc67>
   1224b:	48 89 ce             	mov    %rcx,%rsi
   1224e:	48 89 c7             	mov    %rax,%rdi
   12251:	ff d2                	call   *%rdx
   12253:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12257:	48 89 42 58          	mov    %rax,0x58(%rdx)
        vkFlushMappedMemoryRanges          = PFN_vkFlushMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkFlushMappedMemoryRanges" ) );
   1225b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1225f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12267:	48 8d 0d c3 16 01 00 	lea    0x116c3(%rip),%rcx        # 23931 <_ZNSt8__detailL19__atomic_spin_countE+0xc75>
   1226e:	48 89 ce             	mov    %rcx,%rsi
   12271:	48 89 c7             	mov    %rax,%rdi
   12274:	ff d2                	call   *%rdx
   12276:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1227a:	48 89 42 60          	mov    %rax,0x60(%rdx)
        vkInvalidateMappedMemoryRanges     = PFN_vkInvalidateMappedMemoryRanges( vkGetDeviceProcAddr( device, "vkInvalidateMappedMemoryRanges" ) );
   1227e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12282:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12286:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1228a:	48 8d 0d bf 16 01 00 	lea    0x116bf(%rip),%rcx        # 23950 <_ZNSt8__detailL19__atomic_spin_countE+0xc94>
   12291:	48 89 ce             	mov    %rcx,%rsi
   12294:	48 89 c7             	mov    %rax,%rdi
   12297:	ff d2                	call   *%rdx
   12299:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1229d:	48 89 42 68          	mov    %rax,0x68(%rdx)
        vkGetDeviceMemoryCommitment        = PFN_vkGetDeviceMemoryCommitment( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryCommitment" ) );
   122a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122ad:	48 8d 0d bb 16 01 00 	lea    0x116bb(%rip),%rcx        # 2396f <_ZNSt8__detailL19__atomic_spin_countE+0xcb3>
   122b4:	48 89 ce             	mov    %rcx,%rsi
   122b7:	48 89 c7             	mov    %rax,%rdi
   122ba:	ff d2                	call   *%rdx
   122bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122c0:	48 89 42 70          	mov    %rax,0x70(%rdx)
        vkBindBufferMemory                 = PFN_vkBindBufferMemory( vkGetDeviceProcAddr( device, "vkBindBufferMemory" ) );
   122c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122c8:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122d0:	48 8d 0d b4 16 01 00 	lea    0x116b4(%rip),%rcx        # 2398b <_ZNSt8__detailL19__atomic_spin_countE+0xccf>
   122d7:	48 89 ce             	mov    %rcx,%rsi
   122da:	48 89 c7             	mov    %rax,%rdi
   122dd:	ff d2                	call   *%rdx
   122df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   122e3:	48 89 42 78          	mov    %rax,0x78(%rdx)
        vkBindImageMemory                  = PFN_vkBindImageMemory( vkGetDeviceProcAddr( device, "vkBindImageMemory" ) );
   122e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   122eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   122ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   122f3:	48 8d 0d a4 16 01 00 	lea    0x116a4(%rip),%rcx        # 2399e <_ZNSt8__detailL19__atomic_spin_countE+0xce2>
   122fa:	48 89 ce             	mov    %rcx,%rsi
   122fd:	48 89 c7             	mov    %rax,%rdi
   12300:	ff d2                	call   *%rdx
   12302:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12306:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        vkGetBufferMemoryRequirements      = PFN_vkGetBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements" ) );
   1230d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12311:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12315:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12319:	48 8d 0d 90 16 01 00 	lea    0x11690(%rip),%rcx        # 239b0 <_ZNSt8__detailL19__atomic_spin_countE+0xcf4>
   12320:	48 89 ce             	mov    %rcx,%rsi
   12323:	48 89 c7             	mov    %rax,%rdi
   12326:	ff d2                	call   *%rdx
   12328:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1232c:	48 89 82 88 00 00 00 	mov    %rax,0x88(%rdx)
        vkGetImageMemoryRequirements       = PFN_vkGetImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements" ) );
   12333:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12337:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1233b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1233f:	48 8d 0d 88 16 01 00 	lea    0x11688(%rip),%rcx        # 239ce <_ZNSt8__detailL19__atomic_spin_countE+0xd12>
   12346:	48 89 ce             	mov    %rcx,%rsi
   12349:	48 89 c7             	mov    %rax,%rdi
   1234c:	ff d2                	call   *%rdx
   1234e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12352:	48 89 82 90 00 00 00 	mov    %rax,0x90(%rdx)
        vkGetImageSparseMemoryRequirements = PFN_vkGetImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements" ) );
   12359:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1235d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12361:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12365:	48 8d 0d 84 16 01 00 	lea    0x11684(%rip),%rcx        # 239f0 <_ZNSt8__detailL19__atomic_spin_countE+0xd34>
   1236c:	48 89 ce             	mov    %rcx,%rsi
   1236f:	48 89 c7             	mov    %rax,%rdi
   12372:	ff d2                	call   *%rdx
   12374:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12378:	48 89 82 98 00 00 00 	mov    %rax,0x98(%rdx)
        vkQueueBindSparse                  = PFN_vkQueueBindSparse( vkGetDeviceProcAddr( device, "vkQueueBindSparse" ) );
   1237f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12383:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12387:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1238b:	48 8d 0d 81 16 01 00 	lea    0x11681(%rip),%rcx        # 23a13 <_ZNSt8__detailL19__atomic_spin_countE+0xd57>
   12392:	48 89 ce             	mov    %rcx,%rsi
   12395:	48 89 c7             	mov    %rax,%rdi
   12398:	ff d2                	call   *%rdx
   1239a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1239e:	48 89 82 a0 00 00 00 	mov    %rax,0xa0(%rdx)
        vkCreateFence                      = PFN_vkCreateFence( vkGetDeviceProcAddr( device, "vkCreateFence" ) );
   123a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123b1:	48 8d 0d 6d 16 01 00 	lea    0x1166d(%rip),%rcx        # 23a25 <_ZNSt8__detailL19__atomic_spin_countE+0xd69>
   123b8:	48 89 ce             	mov    %rcx,%rsi
   123bb:	48 89 c7             	mov    %rax,%rdi
   123be:	ff d2                	call   *%rdx
   123c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123c4:	48 89 82 a8 00 00 00 	mov    %rax,0xa8(%rdx)
        vkDestroyFence                     = PFN_vkDestroyFence( vkGetDeviceProcAddr( device, "vkDestroyFence" ) );
   123cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123d7:	48 8d 0d 55 16 01 00 	lea    0x11655(%rip),%rcx        # 23a33 <_ZNSt8__detailL19__atomic_spin_countE+0xd77>
   123de:	48 89 ce             	mov    %rcx,%rsi
   123e1:	48 89 c7             	mov    %rax,%rdi
   123e4:	ff d2                	call   *%rdx
   123e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   123ea:	48 89 82 b0 00 00 00 	mov    %rax,0xb0(%rdx)
        vkResetFences                      = PFN_vkResetFences( vkGetDeviceProcAddr( device, "vkResetFences" ) );
   123f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   123f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123fd:	48 8d 0d 3e 16 01 00 	lea    0x1163e(%rip),%rcx        # 23a42 <_ZNSt8__detailL19__atomic_spin_countE+0xd86>
   12404:	48 89 ce             	mov    %rcx,%rsi
   12407:	48 89 c7             	mov    %rax,%rdi
   1240a:	ff d2                	call   *%rdx
   1240c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12410:	48 89 82 b8 00 00 00 	mov    %rax,0xb8(%rdx)
        vkGetFenceStatus                   = PFN_vkGetFenceStatus( vkGetDeviceProcAddr( device, "vkGetFenceStatus" ) );
   12417:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1241b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1241f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12423:	48 8d 0d 26 16 01 00 	lea    0x11626(%rip),%rcx        # 23a50 <_ZNSt8__detailL19__atomic_spin_countE+0xd94>
   1242a:	48 89 ce             	mov    %rcx,%rsi
   1242d:	48 89 c7             	mov    %rax,%rdi
   12430:	ff d2                	call   *%rdx
   12432:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12436:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
        vkWaitForFences                    = PFN_vkWaitForFences( vkGetDeviceProcAddr( device, "vkWaitForFences" ) );
   1243d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12441:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12445:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12449:	48 8d 0d 11 16 01 00 	lea    0x11611(%rip),%rcx        # 23a61 <_ZNSt8__detailL19__atomic_spin_countE+0xda5>
   12450:	48 89 ce             	mov    %rcx,%rsi
   12453:	48 89 c7             	mov    %rax,%rdi
   12456:	ff d2                	call   *%rdx
   12458:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1245c:	48 89 82 c8 00 00 00 	mov    %rax,0xc8(%rdx)
        vkCreateSemaphore                  = PFN_vkCreateSemaphore( vkGetDeviceProcAddr( device, "vkCreateSemaphore" ) );
   12463:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12467:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1246b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1246f:	48 8d 0d fb 15 01 00 	lea    0x115fb(%rip),%rcx        # 23a71 <_ZNSt8__detailL19__atomic_spin_countE+0xdb5>
   12476:	48 89 ce             	mov    %rcx,%rsi
   12479:	48 89 c7             	mov    %rax,%rdi
   1247c:	ff d2                	call   *%rdx
   1247e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12482:	48 89 82 d0 00 00 00 	mov    %rax,0xd0(%rdx)
        vkDestroySemaphore                 = PFN_vkDestroySemaphore( vkGetDeviceProcAddr( device, "vkDestroySemaphore" ) );
   12489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1248d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12491:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12495:	48 8d 0d e7 15 01 00 	lea    0x115e7(%rip),%rcx        # 23a83 <_ZNSt8__detailL19__atomic_spin_countE+0xdc7>
   1249c:	48 89 ce             	mov    %rcx,%rsi
   1249f:	48 89 c7             	mov    %rax,%rdi
   124a2:	ff d2                	call   *%rdx
   124a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124a8:	48 89 82 d8 00 00 00 	mov    %rax,0xd8(%rdx)
        vkCreateEvent                      = PFN_vkCreateEvent( vkGetDeviceProcAddr( device, "vkCreateEvent" ) );
   124af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124bb:	48 8d 0d d4 15 01 00 	lea    0x115d4(%rip),%rcx        # 23a96 <_ZNSt8__detailL19__atomic_spin_countE+0xdda>
   124c2:	48 89 ce             	mov    %rcx,%rsi
   124c5:	48 89 c7             	mov    %rax,%rdi
   124c8:	ff d2                	call   *%rdx
   124ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124ce:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
        vkDestroyEvent                     = PFN_vkDestroyEvent( vkGetDeviceProcAddr( device, "vkDestroyEvent" ) );
   124d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   124dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   124e1:	48 8d 0d bc 15 01 00 	lea    0x115bc(%rip),%rcx        # 23aa4 <_ZNSt8__detailL19__atomic_spin_countE+0xde8>
   124e8:	48 89 ce             	mov    %rcx,%rsi
   124eb:	48 89 c7             	mov    %rax,%rdi
   124ee:	ff d2                	call   *%rdx
   124f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   124f4:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)
        vkGetEventStatus                   = PFN_vkGetEventStatus( vkGetDeviceProcAddr( device, "vkGetEventStatus" ) );
   124fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   124ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12507:	48 8d 0d a5 15 01 00 	lea    0x115a5(%rip),%rcx        # 23ab3 <_ZNSt8__detailL19__atomic_spin_countE+0xdf7>
   1250e:	48 89 ce             	mov    %rcx,%rsi
   12511:	48 89 c7             	mov    %rax,%rdi
   12514:	ff d2                	call   *%rdx
   12516:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1251a:	48 89 82 f0 00 00 00 	mov    %rax,0xf0(%rdx)
        vkSetEvent                         = PFN_vkSetEvent( vkGetDeviceProcAddr( device, "vkSetEvent" ) );
   12521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12525:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12529:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1252d:	48 8d 0d 90 15 01 00 	lea    0x11590(%rip),%rcx        # 23ac4 <_ZNSt8__detailL19__atomic_spin_countE+0xe08>
   12534:	48 89 ce             	mov    %rcx,%rsi
   12537:	48 89 c7             	mov    %rax,%rdi
   1253a:	ff d2                	call   *%rdx
   1253c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12540:	48 89 82 f8 00 00 00 	mov    %rax,0xf8(%rdx)
        vkResetEvent                       = PFN_vkResetEvent( vkGetDeviceProcAddr( device, "vkResetEvent" ) );
   12547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1254b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1254f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12553:	48 8d 0d 75 15 01 00 	lea    0x11575(%rip),%rcx        # 23acf <_ZNSt8__detailL19__atomic_spin_countE+0xe13>
   1255a:	48 89 ce             	mov    %rcx,%rsi
   1255d:	48 89 c7             	mov    %rax,%rdi
   12560:	ff d2                	call   *%rdx
   12562:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12566:	48 89 82 00 01 00 00 	mov    %rax,0x100(%rdx)
        vkCreateQueryPool                  = PFN_vkCreateQueryPool( vkGetDeviceProcAddr( device, "vkCreateQueryPool" ) );
   1256d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12571:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12575:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12579:	48 8d 0d 5c 15 01 00 	lea    0x1155c(%rip),%rcx        # 23adc <_ZNSt8__detailL19__atomic_spin_countE+0xe20>
   12580:	48 89 ce             	mov    %rcx,%rsi
   12583:	48 89 c7             	mov    %rax,%rdi
   12586:	ff d2                	call   *%rdx
   12588:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1258c:	48 89 82 08 01 00 00 	mov    %rax,0x108(%rdx)
        vkDestroyQueryPool                 = PFN_vkDestroyQueryPool( vkGetDeviceProcAddr( device, "vkDestroyQueryPool" ) );
   12593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12597:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1259b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1259f:	48 8d 0d 48 15 01 00 	lea    0x11548(%rip),%rcx        # 23aee <_ZNSt8__detailL19__atomic_spin_countE+0xe32>
   125a6:	48 89 ce             	mov    %rcx,%rsi
   125a9:	48 89 c7             	mov    %rax,%rdi
   125ac:	ff d2                	call   *%rdx
   125ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125b2:	48 89 82 10 01 00 00 	mov    %rax,0x110(%rdx)
        vkGetQueryPoolResults              = PFN_vkGetQueryPoolResults( vkGetDeviceProcAddr( device, "vkGetQueryPoolResults" ) );
   125b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125c5:	48 8d 0d 35 15 01 00 	lea    0x11535(%rip),%rcx        # 23b01 <_ZNSt8__detailL19__atomic_spin_countE+0xe45>
   125cc:	48 89 ce             	mov    %rcx,%rsi
   125cf:	48 89 c7             	mov    %rax,%rdi
   125d2:	ff d2                	call   *%rdx
   125d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125d8:	48 89 82 18 01 00 00 	mov    %rax,0x118(%rdx)
        vkCreateBuffer                     = PFN_vkCreateBuffer( vkGetDeviceProcAddr( device, "vkCreateBuffer" ) );
   125df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   125e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   125e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   125eb:	48 8d 0d 25 15 01 00 	lea    0x11525(%rip),%rcx        # 23b17 <_ZNSt8__detailL19__atomic_spin_countE+0xe5b>
   125f2:	48 89 ce             	mov    %rcx,%rsi
   125f5:	48 89 c7             	mov    %rax,%rdi
   125f8:	ff d2                	call   *%rdx
   125fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   125fe:	48 89 82 20 01 00 00 	mov    %rax,0x120(%rdx)
        vkDestroyBuffer                    = PFN_vkDestroyBuffer( vkGetDeviceProcAddr( device, "vkDestroyBuffer" ) );
   12605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12609:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1260d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12611:	48 8d 0d 0e 15 01 00 	lea    0x1150e(%rip),%rcx        # 23b26 <_ZNSt8__detailL19__atomic_spin_countE+0xe6a>
   12618:	48 89 ce             	mov    %rcx,%rsi
   1261b:	48 89 c7             	mov    %rax,%rdi
   1261e:	ff d2                	call   *%rdx
   12620:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12624:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)
        vkCreateBufferView                 = PFN_vkCreateBufferView( vkGetDeviceProcAddr( device, "vkCreateBufferView" ) );
   1262b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1262f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12637:	48 8d 0d f8 14 01 00 	lea    0x114f8(%rip),%rcx        # 23b36 <_ZNSt8__detailL19__atomic_spin_countE+0xe7a>
   1263e:	48 89 ce             	mov    %rcx,%rsi
   12641:	48 89 c7             	mov    %rax,%rdi
   12644:	ff d2                	call   *%rdx
   12646:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1264a:	48 89 82 30 01 00 00 	mov    %rax,0x130(%rdx)
        vkDestroyBufferView                = PFN_vkDestroyBufferView( vkGetDeviceProcAddr( device, "vkDestroyBufferView" ) );
   12651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12655:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12659:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1265d:	48 8d 0d e5 14 01 00 	lea    0x114e5(%rip),%rcx        # 23b49 <_ZNSt8__detailL19__atomic_spin_countE+0xe8d>
   12664:	48 89 ce             	mov    %rcx,%rsi
   12667:	48 89 c7             	mov    %rax,%rdi
   1266a:	ff d2                	call   *%rdx
   1266c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12670:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)
        vkCreateImage                      = PFN_vkCreateImage( vkGetDeviceProcAddr( device, "vkCreateImage" ) );
   12677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1267b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1267f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12683:	48 8d 0d d3 14 01 00 	lea    0x114d3(%rip),%rcx        # 23b5d <_ZNSt8__detailL19__atomic_spin_countE+0xea1>
   1268a:	48 89 ce             	mov    %rcx,%rsi
   1268d:	48 89 c7             	mov    %rax,%rdi
   12690:	ff d2                	call   *%rdx
   12692:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12696:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)
        vkDestroyImage                     = PFN_vkDestroyImage( vkGetDeviceProcAddr( device, "vkDestroyImage" ) );
   1269d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126a9:	48 8d 0d bb 14 01 00 	lea    0x114bb(%rip),%rcx        # 23b6b <_ZNSt8__detailL19__atomic_spin_countE+0xeaf>
   126b0:	48 89 ce             	mov    %rcx,%rsi
   126b3:	48 89 c7             	mov    %rax,%rdi
   126b6:	ff d2                	call   *%rdx
   126b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126bc:	48 89 82 48 01 00 00 	mov    %rax,0x148(%rdx)
        vkGetImageSubresourceLayout        = PFN_vkGetImageSubresourceLayout( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout" ) );
   126c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126cf:	48 8d 0d a4 14 01 00 	lea    0x114a4(%rip),%rcx        # 23b7a <_ZNSt8__detailL19__atomic_spin_countE+0xebe>
   126d6:	48 89 ce             	mov    %rcx,%rsi
   126d9:	48 89 c7             	mov    %rax,%rdi
   126dc:	ff d2                	call   *%rdx
   126de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   126e2:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
        vkCreateImageView                  = PFN_vkCreateImageView( vkGetDeviceProcAddr( device, "vkCreateImageView" ) );
   126e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   126ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   126f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126f5:	48 8d 0d 9a 14 01 00 	lea    0x1149a(%rip),%rcx        # 23b96 <_ZNSt8__detailL19__atomic_spin_countE+0xeda>
   126fc:	48 89 ce             	mov    %rcx,%rsi
   126ff:	48 89 c7             	mov    %rax,%rdi
   12702:	ff d2                	call   *%rdx
   12704:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12708:	48 89 82 58 01 00 00 	mov    %rax,0x158(%rdx)
        vkDestroyImageView                 = PFN_vkDestroyImageView( vkGetDeviceProcAddr( device, "vkDestroyImageView" ) );
   1270f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12713:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12717:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1271b:	48 8d 0d 86 14 01 00 	lea    0x11486(%rip),%rcx        # 23ba8 <_ZNSt8__detailL19__atomic_spin_countE+0xeec>
   12722:	48 89 ce             	mov    %rcx,%rsi
   12725:	48 89 c7             	mov    %rax,%rdi
   12728:	ff d2                	call   *%rdx
   1272a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1272e:	48 89 82 60 01 00 00 	mov    %rax,0x160(%rdx)
        vkCreateShaderModule               = PFN_vkCreateShaderModule( vkGetDeviceProcAddr( device, "vkCreateShaderModule" ) );
   12735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12739:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1273d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12741:	48 8d 0d 73 14 01 00 	lea    0x11473(%rip),%rcx        # 23bbb <_ZNSt8__detailL19__atomic_spin_countE+0xeff>
   12748:	48 89 ce             	mov    %rcx,%rsi
   1274b:	48 89 c7             	mov    %rax,%rdi
   1274e:	ff d2                	call   *%rdx
   12750:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12754:	48 89 82 68 01 00 00 	mov    %rax,0x168(%rdx)
        vkDestroyShaderModule              = PFN_vkDestroyShaderModule( vkGetDeviceProcAddr( device, "vkDestroyShaderModule" ) );
   1275b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1275f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12763:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12767:	48 8d 0d 62 14 01 00 	lea    0x11462(%rip),%rcx        # 23bd0 <_ZNSt8__detailL19__atomic_spin_countE+0xf14>
   1276e:	48 89 ce             	mov    %rcx,%rsi
   12771:	48 89 c7             	mov    %rax,%rdi
   12774:	ff d2                	call   *%rdx
   12776:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1277a:	48 89 82 70 01 00 00 	mov    %rax,0x170(%rdx)
        vkCreatePipelineCache              = PFN_vkCreatePipelineCache( vkGetDeviceProcAddr( device, "vkCreatePipelineCache" ) );
   12781:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12785:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12789:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1278d:	48 8d 0d 52 14 01 00 	lea    0x11452(%rip),%rcx        # 23be6 <_ZNSt8__detailL19__atomic_spin_countE+0xf2a>
   12794:	48 89 ce             	mov    %rcx,%rsi
   12797:	48 89 c7             	mov    %rax,%rdi
   1279a:	ff d2                	call   *%rdx
   1279c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127a0:	48 89 82 78 01 00 00 	mov    %rax,0x178(%rdx)
        vkDestroyPipelineCache             = PFN_vkDestroyPipelineCache( vkGetDeviceProcAddr( device, "vkDestroyPipelineCache" ) );
   127a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127b3:	48 8d 0d 42 14 01 00 	lea    0x11442(%rip),%rcx        # 23bfc <_ZNSt8__detailL19__atomic_spin_countE+0xf40>
   127ba:	48 89 ce             	mov    %rcx,%rsi
   127bd:	48 89 c7             	mov    %rax,%rdi
   127c0:	ff d2                	call   *%rdx
   127c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127c6:	48 89 82 80 01 00 00 	mov    %rax,0x180(%rdx)
        vkGetPipelineCacheData             = PFN_vkGetPipelineCacheData( vkGetDeviceProcAddr( device, "vkGetPipelineCacheData" ) );
   127cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127d9:	48 8d 0d 33 14 01 00 	lea    0x11433(%rip),%rcx        # 23c13 <_ZNSt8__detailL19__atomic_spin_countE+0xf57>
   127e0:	48 89 ce             	mov    %rcx,%rsi
   127e3:	48 89 c7             	mov    %rax,%rdi
   127e6:	ff d2                	call   *%rdx
   127e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   127ec:	48 89 82 88 01 00 00 	mov    %rax,0x188(%rdx)
        vkMergePipelineCaches              = PFN_vkMergePipelineCaches( vkGetDeviceProcAddr( device, "vkMergePipelineCaches" ) );
   127f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   127f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   127fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   127ff:	48 8d 0d 24 14 01 00 	lea    0x11424(%rip),%rcx        # 23c2a <_ZNSt8__detailL19__atomic_spin_countE+0xf6e>
   12806:	48 89 ce             	mov    %rcx,%rsi
   12809:	48 89 c7             	mov    %rax,%rdi
   1280c:	ff d2                	call   *%rdx
   1280e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12812:	48 89 82 90 01 00 00 	mov    %rax,0x190(%rdx)
        vkCreateGraphicsPipelines          = PFN_vkCreateGraphicsPipelines( vkGetDeviceProcAddr( device, "vkCreateGraphicsPipelines" ) );
   12819:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1281d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12821:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12825:	48 8d 0d 14 14 01 00 	lea    0x11414(%rip),%rcx        # 23c40 <_ZNSt8__detailL19__atomic_spin_countE+0xf84>
   1282c:	48 89 ce             	mov    %rcx,%rsi
   1282f:	48 89 c7             	mov    %rax,%rdi
   12832:	ff d2                	call   *%rdx
   12834:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12838:	48 89 82 98 01 00 00 	mov    %rax,0x198(%rdx)
        vkCreateComputePipelines           = PFN_vkCreateComputePipelines( vkGetDeviceProcAddr( device, "vkCreateComputePipelines" ) );
   1283f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12843:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12847:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1284b:	48 8d 0d 08 14 01 00 	lea    0x11408(%rip),%rcx        # 23c5a <_ZNSt8__detailL19__atomic_spin_countE+0xf9e>
   12852:	48 89 ce             	mov    %rcx,%rsi
   12855:	48 89 c7             	mov    %rax,%rdi
   12858:	ff d2                	call   *%rdx
   1285a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1285e:	48 89 82 a0 01 00 00 	mov    %rax,0x1a0(%rdx)
        vkDestroyPipeline                  = PFN_vkDestroyPipeline( vkGetDeviceProcAddr( device, "vkDestroyPipeline" ) );
   12865:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12869:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1286d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12871:	48 8d 0d fb 13 01 00 	lea    0x113fb(%rip),%rcx        # 23c73 <_ZNSt8__detailL19__atomic_spin_countE+0xfb7>
   12878:	48 89 ce             	mov    %rcx,%rsi
   1287b:	48 89 c7             	mov    %rax,%rdi
   1287e:	ff d2                	call   *%rdx
   12880:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12884:	48 89 82 a8 01 00 00 	mov    %rax,0x1a8(%rdx)
        vkCreatePipelineLayout             = PFN_vkCreatePipelineLayout( vkGetDeviceProcAddr( device, "vkCreatePipelineLayout" ) );
   1288b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1288f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12893:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12897:	48 8d 0d e7 13 01 00 	lea    0x113e7(%rip),%rcx        # 23c85 <_ZNSt8__detailL19__atomic_spin_countE+0xfc9>
   1289e:	48 89 ce             	mov    %rcx,%rsi
   128a1:	48 89 c7             	mov    %rax,%rdi
   128a4:	ff d2                	call   *%rdx
   128a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128aa:	48 89 82 b0 01 00 00 	mov    %rax,0x1b0(%rdx)
        vkDestroyPipelineLayout            = PFN_vkDestroyPipelineLayout( vkGetDeviceProcAddr( device, "vkDestroyPipelineLayout" ) );
   128b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128bd:	48 8d 0d d8 13 01 00 	lea    0x113d8(%rip),%rcx        # 23c9c <_ZNSt8__detailL19__atomic_spin_countE+0xfe0>
   128c4:	48 89 ce             	mov    %rcx,%rsi
   128c7:	48 89 c7             	mov    %rax,%rdi
   128ca:	ff d2                	call   *%rdx
   128cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128d0:	48 89 82 b8 01 00 00 	mov    %rax,0x1b8(%rdx)
        vkCreateSampler                    = PFN_vkCreateSampler( vkGetDeviceProcAddr( device, "vkCreateSampler" ) );
   128d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   128df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   128e3:	48 8d 0d ca 13 01 00 	lea    0x113ca(%rip),%rcx        # 23cb4 <_ZNSt8__detailL19__atomic_spin_countE+0xff8>
   128ea:	48 89 ce             	mov    %rcx,%rsi
   128ed:	48 89 c7             	mov    %rax,%rdi
   128f0:	ff d2                	call   *%rdx
   128f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128f6:	48 89 82 c0 01 00 00 	mov    %rax,0x1c0(%rdx)
        vkDestroySampler                   = PFN_vkDestroySampler( vkGetDeviceProcAddr( device, "vkDestroySampler" ) );
   128fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12901:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12905:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12909:	48 8d 0d b4 13 01 00 	lea    0x113b4(%rip),%rcx        # 23cc4 <_ZNSt8__detailL19__atomic_spin_countE+0x1008>
   12910:	48 89 ce             	mov    %rcx,%rsi
   12913:	48 89 c7             	mov    %rax,%rdi
   12916:	ff d2                	call   *%rdx
   12918:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1291c:	48 89 82 c8 01 00 00 	mov    %rax,0x1c8(%rdx)
        vkCreateDescriptorSetLayout        = PFN_vkCreateDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkCreateDescriptorSetLayout" ) );
   12923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12927:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1292b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1292f:	48 8d 0d 9f 13 01 00 	lea    0x1139f(%rip),%rcx        # 23cd5 <_ZNSt8__detailL19__atomic_spin_countE+0x1019>
   12936:	48 89 ce             	mov    %rcx,%rsi
   12939:	48 89 c7             	mov    %rax,%rdi
   1293c:	ff d2                	call   *%rdx
   1293e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12942:	48 89 82 d0 01 00 00 	mov    %rax,0x1d0(%rdx)
        vkDestroyDescriptorSetLayout       = PFN_vkDestroyDescriptorSetLayout( vkGetDeviceProcAddr( device, "vkDestroyDescriptorSetLayout" ) );
   12949:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1294d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12951:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12955:	48 8d 0d 95 13 01 00 	lea    0x11395(%rip),%rcx        # 23cf1 <_ZNSt8__detailL19__atomic_spin_countE+0x1035>
   1295c:	48 89 ce             	mov    %rcx,%rsi
   1295f:	48 89 c7             	mov    %rax,%rdi
   12962:	ff d2                	call   *%rdx
   12964:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12968:	48 89 82 d8 01 00 00 	mov    %rax,0x1d8(%rdx)
        vkCreateDescriptorPool             = PFN_vkCreateDescriptorPool( vkGetDeviceProcAddr( device, "vkCreateDescriptorPool" ) );
   1296f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12973:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12977:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1297b:	48 8d 0d 8c 13 01 00 	lea    0x1138c(%rip),%rcx        # 23d0e <_ZNSt8__detailL19__atomic_spin_countE+0x1052>
   12982:	48 89 ce             	mov    %rcx,%rsi
   12985:	48 89 c7             	mov    %rax,%rdi
   12988:	ff d2                	call   *%rdx
   1298a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1298e:	48 89 82 e0 01 00 00 	mov    %rax,0x1e0(%rdx)
        vkDestroyDescriptorPool            = PFN_vkDestroyDescriptorPool( vkGetDeviceProcAddr( device, "vkDestroyDescriptorPool" ) );
   12995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12999:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1299d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129a1:	48 8d 0d 7d 13 01 00 	lea    0x1137d(%rip),%rcx        # 23d25 <_ZNSt8__detailL19__atomic_spin_countE+0x1069>
   129a8:	48 89 ce             	mov    %rcx,%rsi
   129ab:	48 89 c7             	mov    %rax,%rdi
   129ae:	ff d2                	call   *%rdx
   129b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129b4:	48 89 82 e8 01 00 00 	mov    %rax,0x1e8(%rdx)
        vkResetDescriptorPool              = PFN_vkResetDescriptorPool( vkGetDeviceProcAddr( device, "vkResetDescriptorPool" ) );
   129bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129c7:	48 8d 0d 6f 13 01 00 	lea    0x1136f(%rip),%rcx        # 23d3d <_ZNSt8__detailL19__atomic_spin_countE+0x1081>
   129ce:	48 89 ce             	mov    %rcx,%rsi
   129d1:	48 89 c7             	mov    %rax,%rdi
   129d4:	ff d2                	call   *%rdx
   129d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   129da:	48 89 82 f0 01 00 00 	mov    %rax,0x1f0(%rdx)
        vkAllocateDescriptorSets           = PFN_vkAllocateDescriptorSets( vkGetDeviceProcAddr( device, "vkAllocateDescriptorSets" ) );
   129e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   129e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   129e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   129ed:	48 8d 0d 5f 13 01 00 	lea    0x1135f(%rip),%rcx        # 23d53 <_ZNSt8__detailL19__atomic_spin_countE+0x1097>
   129f4:	48 89 ce             	mov    %rcx,%rsi
   129f7:	48 89 c7             	mov    %rax,%rdi
   129fa:	ff d2                	call   *%rdx
   129fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a00:	48 89 82 f8 01 00 00 	mov    %rax,0x1f8(%rdx)
        vkFreeDescriptorSets               = PFN_vkFreeDescriptorSets( vkGetDeviceProcAddr( device, "vkFreeDescriptorSets" ) );
   12a07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a13:	48 8d 0d 52 13 01 00 	lea    0x11352(%rip),%rcx        # 23d6c <_ZNSt8__detailL19__atomic_spin_countE+0x10b0>
   12a1a:	48 89 ce             	mov    %rcx,%rsi
   12a1d:	48 89 c7             	mov    %rax,%rdi
   12a20:	ff d2                	call   *%rdx
   12a22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a26:	48 89 82 00 02 00 00 	mov    %rax,0x200(%rdx)
        vkUpdateDescriptorSets             = PFN_vkUpdateDescriptorSets( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSets" ) );
   12a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a31:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a39:	48 8d 0d 41 13 01 00 	lea    0x11341(%rip),%rcx        # 23d81 <_ZNSt8__detailL19__atomic_spin_countE+0x10c5>
   12a40:	48 89 ce             	mov    %rcx,%rsi
   12a43:	48 89 c7             	mov    %rax,%rdi
   12a46:	ff d2                	call   *%rdx
   12a48:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a4c:	48 89 82 08 02 00 00 	mov    %rax,0x208(%rdx)
        vkCreateFramebuffer                = PFN_vkCreateFramebuffer( vkGetDeviceProcAddr( device, "vkCreateFramebuffer" ) );
   12a53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a57:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a5f:	48 8d 0d 32 13 01 00 	lea    0x11332(%rip),%rcx        # 23d98 <_ZNSt8__detailL19__atomic_spin_countE+0x10dc>
   12a66:	48 89 ce             	mov    %rcx,%rsi
   12a69:	48 89 c7             	mov    %rax,%rdi
   12a6c:	ff d2                	call   *%rdx
   12a6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a72:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
        vkDestroyFramebuffer               = PFN_vkDestroyFramebuffer( vkGetDeviceProcAddr( device, "vkDestroyFramebuffer" ) );
   12a79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a85:	48 8d 0d 20 13 01 00 	lea    0x11320(%rip),%rcx        # 23dac <_ZNSt8__detailL19__atomic_spin_countE+0x10f0>
   12a8c:	48 89 ce             	mov    %rcx,%rsi
   12a8f:	48 89 c7             	mov    %rax,%rdi
   12a92:	ff d2                	call   *%rdx
   12a94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12a98:	48 89 82 18 02 00 00 	mov    %rax,0x218(%rdx)
        vkCreateRenderPass                 = PFN_vkCreateRenderPass( vkGetDeviceProcAddr( device, "vkCreateRenderPass" ) );
   12a9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12aa3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12aa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12aab:	48 8d 0d 0f 13 01 00 	lea    0x1130f(%rip),%rcx        # 23dc1 <_ZNSt8__detailL19__atomic_spin_countE+0x1105>
   12ab2:	48 89 ce             	mov    %rcx,%rsi
   12ab5:	48 89 c7             	mov    %rax,%rdi
   12ab8:	ff d2                	call   *%rdx
   12aba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12abe:	48 89 82 20 02 00 00 	mov    %rax,0x220(%rdx)
        vkDestroyRenderPass                = PFN_vkDestroyRenderPass( vkGetDeviceProcAddr( device, "vkDestroyRenderPass" ) );
   12ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ac9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ad1:	48 8d 0d fc 12 01 00 	lea    0x112fc(%rip),%rcx        # 23dd4 <_ZNSt8__detailL19__atomic_spin_countE+0x1118>
   12ad8:	48 89 ce             	mov    %rcx,%rsi
   12adb:	48 89 c7             	mov    %rax,%rdi
   12ade:	ff d2                	call   *%rdx
   12ae0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ae4:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        vkGetRenderAreaGranularity         = PFN_vkGetRenderAreaGranularity( vkGetDeviceProcAddr( device, "vkGetRenderAreaGranularity" ) );
   12aeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12aef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12af7:	48 8d 0d ea 12 01 00 	lea    0x112ea(%rip),%rcx        # 23de8 <_ZNSt8__detailL19__atomic_spin_countE+0x112c>
   12afe:	48 89 ce             	mov    %rcx,%rsi
   12b01:	48 89 c7             	mov    %rax,%rdi
   12b04:	ff d2                	call   *%rdx
   12b06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b0a:	48 89 82 30 02 00 00 	mov    %rax,0x230(%rdx)
        vkCreateCommandPool                = PFN_vkCreateCommandPool( vkGetDeviceProcAddr( device, "vkCreateCommandPool" ) );
   12b11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b15:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b1d:	48 8d 0d df 12 01 00 	lea    0x112df(%rip),%rcx        # 23e03 <_ZNSt8__detailL19__atomic_spin_countE+0x1147>
   12b24:	48 89 ce             	mov    %rcx,%rsi
   12b27:	48 89 c7             	mov    %rax,%rdi
   12b2a:	ff d2                	call   *%rdx
   12b2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b30:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
        vkDestroyCommandPool               = PFN_vkDestroyCommandPool( vkGetDeviceProcAddr( device, "vkDestroyCommandPool" ) );
   12b37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b3b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b43:	48 8d 0d cd 12 01 00 	lea    0x112cd(%rip),%rcx        # 23e17 <_ZNSt8__detailL19__atomic_spin_countE+0x115b>
   12b4a:	48 89 ce             	mov    %rcx,%rsi
   12b4d:	48 89 c7             	mov    %rax,%rdi
   12b50:	ff d2                	call   *%rdx
   12b52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b56:	48 89 82 40 02 00 00 	mov    %rax,0x240(%rdx)
        vkResetCommandPool                 = PFN_vkResetCommandPool( vkGetDeviceProcAddr( device, "vkResetCommandPool" ) );
   12b5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b69:	48 8d 0d bc 12 01 00 	lea    0x112bc(%rip),%rcx        # 23e2c <_ZNSt8__detailL19__atomic_spin_countE+0x1170>
   12b70:	48 89 ce             	mov    %rcx,%rsi
   12b73:	48 89 c7             	mov    %rax,%rdi
   12b76:	ff d2                	call   *%rdx
   12b78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12b7c:	48 89 82 48 02 00 00 	mov    %rax,0x248(%rdx)
        vkAllocateCommandBuffers           = PFN_vkAllocateCommandBuffers( vkGetDeviceProcAddr( device, "vkAllocateCommandBuffers" ) );
   12b83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12b87:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12b8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12b8f:	48 8d 0d a9 12 01 00 	lea    0x112a9(%rip),%rcx        # 23e3f <_ZNSt8__detailL19__atomic_spin_countE+0x1183>
   12b96:	48 89 ce             	mov    %rcx,%rsi
   12b99:	48 89 c7             	mov    %rax,%rdi
   12b9c:	ff d2                	call   *%rdx
   12b9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ba2:	48 89 82 50 02 00 00 	mov    %rax,0x250(%rdx)
        vkFreeCommandBuffers               = PFN_vkFreeCommandBuffers( vkGetDeviceProcAddr( device, "vkFreeCommandBuffers" ) );
   12ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12bb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bb5:	48 8d 0d 9c 12 01 00 	lea    0x1129c(%rip),%rcx        # 23e58 <_ZNSt8__detailL19__atomic_spin_countE+0x119c>
   12bbc:	48 89 ce             	mov    %rcx,%rsi
   12bbf:	48 89 c7             	mov    %rax,%rdi
   12bc2:	ff d2                	call   *%rdx
   12bc4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bc8:	48 89 82 58 02 00 00 	mov    %rax,0x258(%rdx)
        vkBeginCommandBuffer               = PFN_vkBeginCommandBuffer( vkGetDeviceProcAddr( device, "vkBeginCommandBuffer" ) );
   12bcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bd3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12bd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12bdb:	48 8d 0d 8b 12 01 00 	lea    0x1128b(%rip),%rcx        # 23e6d <_ZNSt8__detailL19__atomic_spin_countE+0x11b1>
   12be2:	48 89 ce             	mov    %rcx,%rsi
   12be5:	48 89 c7             	mov    %rax,%rdi
   12be8:	ff d2                	call   *%rdx
   12bea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12bee:	48 89 82 60 02 00 00 	mov    %rax,0x260(%rdx)
        vkEndCommandBuffer                 = PFN_vkEndCommandBuffer( vkGetDeviceProcAddr( device, "vkEndCommandBuffer" ) );
   12bf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12bf9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12bfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c01:	48 8d 0d 7a 12 01 00 	lea    0x1127a(%rip),%rcx        # 23e82 <_ZNSt8__detailL19__atomic_spin_countE+0x11c6>
   12c08:	48 89 ce             	mov    %rcx,%rsi
   12c0b:	48 89 c7             	mov    %rax,%rdi
   12c0e:	ff d2                	call   *%rdx
   12c10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c14:	48 89 82 68 02 00 00 	mov    %rax,0x268(%rdx)
        vkResetCommandBuffer               = PFN_vkResetCommandBuffer( vkGetDeviceProcAddr( device, "vkResetCommandBuffer" ) );
   12c1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c1f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c27:	48 8d 0d 67 12 01 00 	lea    0x11267(%rip),%rcx        # 23e95 <_ZNSt8__detailL19__atomic_spin_countE+0x11d9>
   12c2e:	48 89 ce             	mov    %rcx,%rsi
   12c31:	48 89 c7             	mov    %rax,%rdi
   12c34:	ff d2                	call   *%rdx
   12c36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c3a:	48 89 82 70 02 00 00 	mov    %rax,0x270(%rdx)
        vkCmdBindPipeline                  = PFN_vkCmdBindPipeline( vkGetDeviceProcAddr( device, "vkCmdBindPipeline" ) );
   12c41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c45:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c4d:	48 8d 0d 56 12 01 00 	lea    0x11256(%rip),%rcx        # 23eaa <_ZNSt8__detailL19__atomic_spin_countE+0x11ee>
   12c54:	48 89 ce             	mov    %rcx,%rsi
   12c57:	48 89 c7             	mov    %rax,%rdi
   12c5a:	ff d2                	call   *%rdx
   12c5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c60:	48 89 82 78 02 00 00 	mov    %rax,0x278(%rdx)
        vkCmdSetViewport                   = PFN_vkCmdSetViewport( vkGetDeviceProcAddr( device, "vkCmdSetViewport" ) );
   12c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c73:	48 8d 0d 42 12 01 00 	lea    0x11242(%rip),%rcx        # 23ebc <_ZNSt8__detailL19__atomic_spin_countE+0x1200>
   12c7a:	48 89 ce             	mov    %rcx,%rsi
   12c7d:	48 89 c7             	mov    %rax,%rdi
   12c80:	ff d2                	call   *%rdx
   12c82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12c86:	48 89 82 80 02 00 00 	mov    %rax,0x280(%rdx)
        vkCmdSetScissor                    = PFN_vkCmdSetScissor( vkGetDeviceProcAddr( device, "vkCmdSetScissor" ) );
   12c8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c91:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12c95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12c99:	48 8d 0d 2d 12 01 00 	lea    0x1122d(%rip),%rcx        # 23ecd <_ZNSt8__detailL19__atomic_spin_countE+0x1211>
   12ca0:	48 89 ce             	mov    %rcx,%rsi
   12ca3:	48 89 c7             	mov    %rax,%rdi
   12ca6:	ff d2                	call   *%rdx
   12ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cac:	48 89 82 88 02 00 00 	mov    %rax,0x288(%rdx)
        vkCmdSetLineWidth                  = PFN_vkCmdSetLineWidth( vkGetDeviceProcAddr( device, "vkCmdSetLineWidth" ) );
   12cb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12cb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12cbf:	48 8d 0d 17 12 01 00 	lea    0x11217(%rip),%rcx        # 23edd <_ZNSt8__detailL19__atomic_spin_countE+0x1221>
   12cc6:	48 89 ce             	mov    %rcx,%rsi
   12cc9:	48 89 c7             	mov    %rax,%rdi
   12ccc:	ff d2                	call   *%rdx
   12cce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cd2:	48 89 82 90 02 00 00 	mov    %rax,0x290(%rdx)
        vkCmdSetDepthBias                  = PFN_vkCmdSetDepthBias( vkGetDeviceProcAddr( device, "vkCmdSetDepthBias" ) );
   12cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12cdd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ce5:	48 8d 0d 03 12 01 00 	lea    0x11203(%rip),%rcx        # 23eef <_ZNSt8__detailL19__atomic_spin_countE+0x1233>
   12cec:	48 89 ce             	mov    %rcx,%rsi
   12cef:	48 89 c7             	mov    %rax,%rdi
   12cf2:	ff d2                	call   *%rdx
   12cf4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12cf8:	48 89 82 98 02 00 00 	mov    %rax,0x298(%rdx)
        vkCmdSetBlendConstants             = PFN_vkCmdSetBlendConstants( vkGetDeviceProcAddr( device, "vkCmdSetBlendConstants" ) );
   12cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d03:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d0b:	48 8d 0d ef 11 01 00 	lea    0x111ef(%rip),%rcx        # 23f01 <_ZNSt8__detailL19__atomic_spin_countE+0x1245>
   12d12:	48 89 ce             	mov    %rcx,%rsi
   12d15:	48 89 c7             	mov    %rax,%rdi
   12d18:	ff d2                	call   *%rdx
   12d1a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d1e:	48 89 82 a0 02 00 00 	mov    %rax,0x2a0(%rdx)
        vkCmdSetDepthBounds                = PFN_vkCmdSetDepthBounds( vkGetDeviceProcAddr( device, "vkCmdSetDepthBounds" ) );
   12d25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d29:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d31:	48 8d 0d e0 11 01 00 	lea    0x111e0(%rip),%rcx        # 23f18 <_ZNSt8__detailL19__atomic_spin_countE+0x125c>
   12d38:	48 89 ce             	mov    %rcx,%rsi
   12d3b:	48 89 c7             	mov    %rax,%rdi
   12d3e:	ff d2                	call   *%rdx
   12d40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d44:	48 89 82 a8 02 00 00 	mov    %rax,0x2a8(%rdx)
        vkCmdSetStencilCompareMask         = PFN_vkCmdSetStencilCompareMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilCompareMask" ) );
   12d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d4f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d57:	48 8d 0d ce 11 01 00 	lea    0x111ce(%rip),%rcx        # 23f2c <_ZNSt8__detailL19__atomic_spin_countE+0x1270>
   12d5e:	48 89 ce             	mov    %rcx,%rsi
   12d61:	48 89 c7             	mov    %rax,%rdi
   12d64:	ff d2                	call   *%rdx
   12d66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d6a:	48 89 82 b0 02 00 00 	mov    %rax,0x2b0(%rdx)
        vkCmdSetStencilWriteMask           = PFN_vkCmdSetStencilWriteMask( vkGetDeviceProcAddr( device, "vkCmdSetStencilWriteMask" ) );
   12d71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d75:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12d7d:	48 8d 0d c3 11 01 00 	lea    0x111c3(%rip),%rcx        # 23f47 <_ZNSt8__detailL19__atomic_spin_countE+0x128b>
   12d84:	48 89 ce             	mov    %rcx,%rsi
   12d87:	48 89 c7             	mov    %rax,%rdi
   12d8a:	ff d2                	call   *%rdx
   12d8c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12d90:	48 89 82 b8 02 00 00 	mov    %rax,0x2b8(%rdx)
        vkCmdSetStencilReference           = PFN_vkCmdSetStencilReference( vkGetDeviceProcAddr( device, "vkCmdSetStencilReference" ) );
   12d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12d9b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12d9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12da3:	48 8d 0d b6 11 01 00 	lea    0x111b6(%rip),%rcx        # 23f60 <_ZNSt8__detailL19__atomic_spin_countE+0x12a4>
   12daa:	48 89 ce             	mov    %rcx,%rsi
   12dad:	48 89 c7             	mov    %rax,%rdi
   12db0:	ff d2                	call   *%rdx
   12db2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12db6:	48 89 82 c0 02 00 00 	mov    %rax,0x2c0(%rdx)
        vkCmdBindDescriptorSets            = PFN_vkCmdBindDescriptorSets( vkGetDeviceProcAddr( device, "vkCmdBindDescriptorSets" ) );
   12dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dc1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12dc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12dc9:	48 8d 0d a9 11 01 00 	lea    0x111a9(%rip),%rcx        # 23f79 <_ZNSt8__detailL19__atomic_spin_countE+0x12bd>
   12dd0:	48 89 ce             	mov    %rcx,%rsi
   12dd3:	48 89 c7             	mov    %rax,%rdi
   12dd6:	ff d2                	call   *%rdx
   12dd8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ddc:	48 89 82 c8 02 00 00 	mov    %rax,0x2c8(%rdx)
        vkCmdBindIndexBuffer               = PFN_vkCmdBindIndexBuffer( vkGetDeviceProcAddr( device, "vkCmdBindIndexBuffer" ) );
   12de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12de7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12deb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12def:	48 8d 0d 9b 11 01 00 	lea    0x1119b(%rip),%rcx        # 23f91 <_ZNSt8__detailL19__atomic_spin_countE+0x12d5>
   12df6:	48 89 ce             	mov    %rcx,%rsi
   12df9:	48 89 c7             	mov    %rax,%rdi
   12dfc:	ff d2                	call   *%rdx
   12dfe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e02:	48 89 82 d0 02 00 00 	mov    %rax,0x2d0(%rdx)
        vkCmdBindVertexBuffers             = PFN_vkCmdBindVertexBuffers( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers" ) );
   12e09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e0d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e15:	48 8d 0d 8a 11 01 00 	lea    0x1118a(%rip),%rcx        # 23fa6 <_ZNSt8__detailL19__atomic_spin_countE+0x12ea>
   12e1c:	48 89 ce             	mov    %rcx,%rsi
   12e1f:	48 89 c7             	mov    %rax,%rdi
   12e22:	ff d2                	call   *%rdx
   12e24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e28:	48 89 82 d8 02 00 00 	mov    %rax,0x2d8(%rdx)
        vkCmdDraw                          = PFN_vkCmdDraw( vkGetDeviceProcAddr( device, "vkCmdDraw" ) );
   12e2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e33:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e3b:	48 8d 0d 7b 11 01 00 	lea    0x1117b(%rip),%rcx        # 23fbd <_ZNSt8__detailL19__atomic_spin_countE+0x1301>
   12e42:	48 89 ce             	mov    %rcx,%rsi
   12e45:	48 89 c7             	mov    %rax,%rdi
   12e48:	ff d2                	call   *%rdx
   12e4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e4e:	48 89 82 e0 02 00 00 	mov    %rax,0x2e0(%rdx)
        vkCmdDrawIndexed                   = PFN_vkCmdDrawIndexed( vkGetDeviceProcAddr( device, "vkCmdDrawIndexed" ) );
   12e55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e59:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e61:	48 8d 0d 5f 11 01 00 	lea    0x1115f(%rip),%rcx        # 23fc7 <_ZNSt8__detailL19__atomic_spin_countE+0x130b>
   12e68:	48 89 ce             	mov    %rcx,%rsi
   12e6b:	48 89 c7             	mov    %rax,%rdi
   12e6e:	ff d2                	call   *%rdx
   12e70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e74:	48 89 82 e8 02 00 00 	mov    %rax,0x2e8(%rdx)
        vkCmdDrawIndirect                  = PFN_vkCmdDrawIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndirect" ) );
   12e7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e7f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12e83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12e87:	48 8d 0d 4a 11 01 00 	lea    0x1114a(%rip),%rcx        # 23fd8 <_ZNSt8__detailL19__atomic_spin_countE+0x131c>
   12e8e:	48 89 ce             	mov    %rcx,%rsi
   12e91:	48 89 c7             	mov    %rax,%rdi
   12e94:	ff d2                	call   *%rdx
   12e96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12e9a:	48 89 82 f0 02 00 00 	mov    %rax,0x2f0(%rdx)
        vkCmdDrawIndexedIndirect           = PFN_vkCmdDrawIndexedIndirect( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirect" ) );
   12ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ea5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ea9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ead:	48 8d 0d 36 11 01 00 	lea    0x11136(%rip),%rcx        # 23fea <_ZNSt8__detailL19__atomic_spin_countE+0x132e>
   12eb4:	48 89 ce             	mov    %rcx,%rsi
   12eb7:	48 89 c7             	mov    %rax,%rdi
   12eba:	ff d2                	call   *%rdx
   12ebc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ec0:	48 89 82 f8 02 00 00 	mov    %rax,0x2f8(%rdx)
        vkCmdDispatch                      = PFN_vkCmdDispatch( vkGetDeviceProcAddr( device, "vkCmdDispatch" ) );
   12ec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ecb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ecf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ed3:	48 8d 0d 29 11 01 00 	lea    0x11129(%rip),%rcx        # 24003 <_ZNSt8__detailL19__atomic_spin_countE+0x1347>
   12eda:	48 89 ce             	mov    %rcx,%rsi
   12edd:	48 89 c7             	mov    %rax,%rdi
   12ee0:	ff d2                	call   *%rdx
   12ee2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ee6:	48 89 82 00 03 00 00 	mov    %rax,0x300(%rdx)
        vkCmdDispatchIndirect              = PFN_vkCmdDispatchIndirect( vkGetDeviceProcAddr( device, "vkCmdDispatchIndirect" ) );
   12eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ef1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12ef5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12ef9:	48 8d 0d 11 11 01 00 	lea    0x11111(%rip),%rcx        # 24011 <_ZNSt8__detailL19__atomic_spin_countE+0x1355>
   12f00:	48 89 ce             	mov    %rcx,%rsi
   12f03:	48 89 c7             	mov    %rax,%rdi
   12f06:	ff d2                	call   *%rdx
   12f08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f0c:	48 89 82 08 03 00 00 	mov    %rax,0x308(%rdx)
        vkCmdCopyBuffer                    = PFN_vkCmdCopyBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer" ) );
   12f13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f17:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f1f:	48 8d 0d 01 11 01 00 	lea    0x11101(%rip),%rcx        # 24027 <_ZNSt8__detailL19__atomic_spin_countE+0x136b>
   12f26:	48 89 ce             	mov    %rcx,%rsi
   12f29:	48 89 c7             	mov    %rax,%rdi
   12f2c:	ff d2                	call   *%rdx
   12f2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f32:	48 89 82 10 03 00 00 	mov    %rax,0x310(%rdx)
        vkCmdCopyImage                     = PFN_vkCmdCopyImage( vkGetDeviceProcAddr( device, "vkCmdCopyImage" ) );
   12f39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f3d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f45:	48 8d 0d eb 10 01 00 	lea    0x110eb(%rip),%rcx        # 24037 <_ZNSt8__detailL19__atomic_spin_countE+0x137b>
   12f4c:	48 89 ce             	mov    %rcx,%rsi
   12f4f:	48 89 c7             	mov    %rax,%rdi
   12f52:	ff d2                	call   *%rdx
   12f54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f58:	48 89 82 18 03 00 00 	mov    %rax,0x318(%rdx)
        vkCmdBlitImage                     = PFN_vkCmdBlitImage( vkGetDeviceProcAddr( device, "vkCmdBlitImage" ) );
   12f5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f63:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f6b:	48 8d 0d d4 10 01 00 	lea    0x110d4(%rip),%rcx        # 24046 <_ZNSt8__detailL19__atomic_spin_countE+0x138a>
   12f72:	48 89 ce             	mov    %rcx,%rsi
   12f75:	48 89 c7             	mov    %rax,%rdi
   12f78:	ff d2                	call   *%rdx
   12f7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12f7e:	48 89 82 20 03 00 00 	mov    %rax,0x320(%rdx)
        vkCmdCopyBufferToImage             = PFN_vkCmdCopyBufferToImage( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage" ) );
   12f85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12f89:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12f8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12f91:	48 8d 0d bd 10 01 00 	lea    0x110bd(%rip),%rcx        # 24055 <_ZNSt8__detailL19__atomic_spin_countE+0x1399>
   12f98:	48 89 ce             	mov    %rcx,%rsi
   12f9b:	48 89 c7             	mov    %rax,%rdi
   12f9e:	ff d2                	call   *%rdx
   12fa0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12fa4:	48 89 82 28 03 00 00 	mov    %rax,0x328(%rdx)
        vkCmdCopyImageToBuffer             = PFN_vkCmdCopyImageToBuffer( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer" ) );
   12fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12faf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fb7:	48 8d 0d ae 10 01 00 	lea    0x110ae(%rip),%rcx        # 2406c <_ZNSt8__detailL19__atomic_spin_countE+0x13b0>
   12fbe:	48 89 ce             	mov    %rcx,%rsi
   12fc1:	48 89 c7             	mov    %rax,%rdi
   12fc4:	ff d2                	call   *%rdx
   12fc6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12fca:	48 89 82 30 03 00 00 	mov    %rax,0x330(%rdx)
        vkCmdUpdateBuffer                  = PFN_vkCmdUpdateBuffer( vkGetDeviceProcAddr( device, "vkCmdUpdateBuffer" ) );
   12fd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12fd5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12fdd:	48 8d 0d 9f 10 01 00 	lea    0x1109f(%rip),%rcx        # 24083 <_ZNSt8__detailL19__atomic_spin_countE+0x13c7>
   12fe4:	48 89 ce             	mov    %rcx,%rsi
   12fe7:	48 89 c7             	mov    %rax,%rdi
   12fea:	ff d2                	call   *%rdx
   12fec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12ff0:	48 89 82 38 03 00 00 	mov    %rax,0x338(%rdx)
        vkCmdFillBuffer                    = PFN_vkCmdFillBuffer( vkGetDeviceProcAddr( device, "vkCmdFillBuffer" ) );
   12ff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ffb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   12fff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13003:	48 8d 0d 8b 10 01 00 	lea    0x1108b(%rip),%rcx        # 24095 <_ZNSt8__detailL19__atomic_spin_countE+0x13d9>
   1300a:	48 89 ce             	mov    %rcx,%rsi
   1300d:	48 89 c7             	mov    %rax,%rdi
   13010:	ff d2                	call   *%rdx
   13012:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13016:	48 89 82 40 03 00 00 	mov    %rax,0x340(%rdx)
        vkCmdClearColorImage               = PFN_vkCmdClearColorImage( vkGetDeviceProcAddr( device, "vkCmdClearColorImage" ) );
   1301d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13021:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13025:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13029:	48 8d 0d 75 10 01 00 	lea    0x11075(%rip),%rcx        # 240a5 <_ZNSt8__detailL19__atomic_spin_countE+0x13e9>
   13030:	48 89 ce             	mov    %rcx,%rsi
   13033:	48 89 c7             	mov    %rax,%rdi
   13036:	ff d2                	call   *%rdx
   13038:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1303c:	48 89 82 48 03 00 00 	mov    %rax,0x348(%rdx)
        vkCmdClearDepthStencilImage        = PFN_vkCmdClearDepthStencilImage( vkGetDeviceProcAddr( device, "vkCmdClearDepthStencilImage" ) );
   13043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13047:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1304b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1304f:	48 8d 0d 64 10 01 00 	lea    0x11064(%rip),%rcx        # 240ba <_ZNSt8__detailL19__atomic_spin_countE+0x13fe>
   13056:	48 89 ce             	mov    %rcx,%rsi
   13059:	48 89 c7             	mov    %rax,%rdi
   1305c:	ff d2                	call   *%rdx
   1305e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13062:	48 89 82 50 03 00 00 	mov    %rax,0x350(%rdx)
        vkCmdClearAttachments              = PFN_vkCmdClearAttachments( vkGetDeviceProcAddr( device, "vkCmdClearAttachments" ) );
   13069:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1306d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13071:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13075:	48 8d 0d 5a 10 01 00 	lea    0x1105a(%rip),%rcx        # 240d6 <_ZNSt8__detailL19__atomic_spin_countE+0x141a>
   1307c:	48 89 ce             	mov    %rcx,%rsi
   1307f:	48 89 c7             	mov    %rax,%rdi
   13082:	ff d2                	call   *%rdx
   13084:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13088:	48 89 82 58 03 00 00 	mov    %rax,0x358(%rdx)
        vkCmdResolveImage                  = PFN_vkCmdResolveImage( vkGetDeviceProcAddr( device, "vkCmdResolveImage" ) );
   1308f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13093:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13097:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1309b:	48 8d 0d 4a 10 01 00 	lea    0x1104a(%rip),%rcx        # 240ec <_ZNSt8__detailL19__atomic_spin_countE+0x1430>
   130a2:	48 89 ce             	mov    %rcx,%rsi
   130a5:	48 89 c7             	mov    %rax,%rdi
   130a8:	ff d2                	call   *%rdx
   130aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130ae:	48 89 82 60 03 00 00 	mov    %rax,0x360(%rdx)
        vkCmdSetEvent                      = PFN_vkCmdSetEvent( vkGetDeviceProcAddr( device, "vkCmdSetEvent" ) );
   130b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130c1:	48 8d 0d 36 10 01 00 	lea    0x11036(%rip),%rcx        # 240fe <_ZNSt8__detailL19__atomic_spin_countE+0x1442>
   130c8:	48 89 ce             	mov    %rcx,%rsi
   130cb:	48 89 c7             	mov    %rax,%rdi
   130ce:	ff d2                	call   *%rdx
   130d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130d4:	48 89 82 68 03 00 00 	mov    %rax,0x368(%rdx)
        vkCmdResetEvent                    = PFN_vkCmdResetEvent( vkGetDeviceProcAddr( device, "vkCmdResetEvent" ) );
   130db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   130e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130e7:	48 8d 0d 1e 10 01 00 	lea    0x1101e(%rip),%rcx        # 2410c <_ZNSt8__detailL19__atomic_spin_countE+0x1450>
   130ee:	48 89 ce             	mov    %rcx,%rsi
   130f1:	48 89 c7             	mov    %rax,%rdi
   130f4:	ff d2                	call   *%rdx
   130f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   130fa:	48 89 82 70 03 00 00 	mov    %rax,0x370(%rdx)
        vkCmdWaitEvents                    = PFN_vkCmdWaitEvents( vkGetDeviceProcAddr( device, "vkCmdWaitEvents" ) );
   13101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13105:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1310d:	48 8d 0d 08 10 01 00 	lea    0x11008(%rip),%rcx        # 2411c <_ZNSt8__detailL19__atomic_spin_countE+0x1460>
   13114:	48 89 ce             	mov    %rcx,%rsi
   13117:	48 89 c7             	mov    %rax,%rdi
   1311a:	ff d2                	call   *%rdx
   1311c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13120:	48 89 82 78 03 00 00 	mov    %rax,0x378(%rdx)
        vkCmdPipelineBarrier               = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier" ) );
   13127:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1312b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1312f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13133:	48 8d 0d f2 0f 01 00 	lea    0x10ff2(%rip),%rcx        # 2412c <_ZNSt8__detailL19__atomic_spin_countE+0x1470>
   1313a:	48 89 ce             	mov    %rcx,%rsi
   1313d:	48 89 c7             	mov    %rax,%rdi
   13140:	ff d2                	call   *%rdx
   13142:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13146:	48 89 82 80 03 00 00 	mov    %rax,0x380(%rdx)
        vkCmdBeginQuery                    = PFN_vkCmdBeginQuery( vkGetDeviceProcAddr( device, "vkCmdBeginQuery" ) );
   1314d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13151:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13159:	48 8d 0d e1 0f 01 00 	lea    0x10fe1(%rip),%rcx        # 24141 <_ZNSt8__detailL19__atomic_spin_countE+0x1485>
   13160:	48 89 ce             	mov    %rcx,%rsi
   13163:	48 89 c7             	mov    %rax,%rdi
   13166:	ff d2                	call   *%rdx
   13168:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1316c:	48 89 82 88 03 00 00 	mov    %rax,0x388(%rdx)
        vkCmdEndQuery                      = PFN_vkCmdEndQuery( vkGetDeviceProcAddr( device, "vkCmdEndQuery" ) );
   13173:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13177:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1317b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1317f:	48 8d 0d cb 0f 01 00 	lea    0x10fcb(%rip),%rcx        # 24151 <_ZNSt8__detailL19__atomic_spin_countE+0x1495>
   13186:	48 89 ce             	mov    %rcx,%rsi
   13189:	48 89 c7             	mov    %rax,%rdi
   1318c:	ff d2                	call   *%rdx
   1318e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13192:	48 89 82 90 03 00 00 	mov    %rax,0x390(%rdx)
        vkCmdResetQueryPool                = PFN_vkCmdResetQueryPool( vkGetDeviceProcAddr( device, "vkCmdResetQueryPool" ) );
   13199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1319d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131a5:	48 8d 0d b3 0f 01 00 	lea    0x10fb3(%rip),%rcx        # 2415f <_ZNSt8__detailL19__atomic_spin_countE+0x14a3>
   131ac:	48 89 ce             	mov    %rcx,%rsi
   131af:	48 89 c7             	mov    %rax,%rdi
   131b2:	ff d2                	call   *%rdx
   131b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   131b8:	48 89 82 98 03 00 00 	mov    %rax,0x398(%rdx)
        vkCmdWriteTimestamp                = PFN_vkCmdWriteTimestamp( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp" ) );
   131bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131cb:	48 8d 0d a1 0f 01 00 	lea    0x10fa1(%rip),%rcx        # 24173 <_ZNSt8__detailL19__atomic_spin_countE+0x14b7>
   131d2:	48 89 ce             	mov    %rcx,%rsi
   131d5:	48 89 c7             	mov    %rax,%rdi
   131d8:	ff d2                	call   *%rdx
   131da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   131de:	48 89 82 a0 03 00 00 	mov    %rax,0x3a0(%rdx)
        vkCmdCopyQueryPoolResults          = PFN_vkCmdCopyQueryPoolResults( vkGetDeviceProcAddr( device, "vkCmdCopyQueryPoolResults" ) );
   131e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   131ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   131f1:	48 8d 0d 8f 0f 01 00 	lea    0x10f8f(%rip),%rcx        # 24187 <_ZNSt8__detailL19__atomic_spin_countE+0x14cb>
   131f8:	48 89 ce             	mov    %rcx,%rsi
   131fb:	48 89 c7             	mov    %rax,%rdi
   131fe:	ff d2                	call   *%rdx
   13200:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13204:	48 89 82 a8 03 00 00 	mov    %rax,0x3a8(%rdx)
        vkCmdPushConstants                 = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, "vkCmdPushConstants" ) );
   1320b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1320f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13213:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13217:	48 8d 0d 83 0f 01 00 	lea    0x10f83(%rip),%rcx        # 241a1 <_ZNSt8__detailL19__atomic_spin_countE+0x14e5>
   1321e:	48 89 ce             	mov    %rcx,%rsi
   13221:	48 89 c7             	mov    %rax,%rdi
   13224:	ff d2                	call   *%rdx
   13226:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1322a:	48 89 82 b0 03 00 00 	mov    %rax,0x3b0(%rdx)
        vkCmdBeginRenderPass               = PFN_vkCmdBeginRenderPass( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass" ) );
   13231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13235:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13239:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1323d:	48 8d 0d 70 0f 01 00 	lea    0x10f70(%rip),%rcx        # 241b4 <_ZNSt8__detailL19__atomic_spin_countE+0x14f8>
   13244:	48 89 ce             	mov    %rcx,%rsi
   13247:	48 89 c7             	mov    %rax,%rdi
   1324a:	ff d2                	call   *%rdx
   1324c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13250:	48 89 82 b8 03 00 00 	mov    %rax,0x3b8(%rdx)
        vkCmdNextSubpass                   = PFN_vkCmdNextSubpass( vkGetDeviceProcAddr( device, "vkCmdNextSubpass" ) );
   13257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1325b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1325f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13263:	48 8d 0d 5f 0f 01 00 	lea    0x10f5f(%rip),%rcx        # 241c9 <_ZNSt8__detailL19__atomic_spin_countE+0x150d>
   1326a:	48 89 ce             	mov    %rcx,%rsi
   1326d:	48 89 c7             	mov    %rax,%rdi
   13270:	ff d2                	call   *%rdx
   13272:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13276:	48 89 82 c0 03 00 00 	mov    %rax,0x3c0(%rdx)
        vkCmdEndRenderPass                 = PFN_vkCmdEndRenderPass( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass" ) );
   1327d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13281:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13285:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13289:	48 8d 0d 4a 0f 01 00 	lea    0x10f4a(%rip),%rcx        # 241da <_ZNSt8__detailL19__atomic_spin_countE+0x151e>
   13290:	48 89 ce             	mov    %rcx,%rsi
   13293:	48 89 c7             	mov    %rax,%rdi
   13296:	ff d2                	call   *%rdx
   13298:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1329c:	48 89 82 c8 03 00 00 	mov    %rax,0x3c8(%rdx)
        vkCmdExecuteCommands               = PFN_vkCmdExecuteCommands( vkGetDeviceProcAddr( device, "vkCmdExecuteCommands" ) );
   132a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132a7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132af:	48 8d 0d 37 0f 01 00 	lea    0x10f37(%rip),%rcx        # 241ed <_ZNSt8__detailL19__atomic_spin_countE+0x1531>
   132b6:	48 89 ce             	mov    %rcx,%rsi
   132b9:	48 89 c7             	mov    %rax,%rdi
   132bc:	ff d2                	call   *%rdx
   132be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132c2:	48 89 82 d0 03 00 00 	mov    %rax,0x3d0(%rdx)
        vkBindBufferMemory2                 = PFN_vkBindBufferMemory2( vkGetDeviceProcAddr( device, "vkBindBufferMemory2" ) );
   132c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132d5:	48 8d 0d 26 0f 01 00 	lea    0x10f26(%rip),%rcx        # 24202 <_ZNSt8__detailL19__atomic_spin_countE+0x1546>
   132dc:	48 89 ce             	mov    %rcx,%rsi
   132df:	48 89 c7             	mov    %rax,%rdi
   132e2:	ff d2                	call   *%rdx
   132e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   132e8:	48 89 82 d8 03 00 00 	mov    %rax,0x3d8(%rdx)
        vkBindImageMemory2                  = PFN_vkBindImageMemory2( vkGetDeviceProcAddr( device, "vkBindImageMemory2" ) );
   132ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   132f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   132f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   132fb:	48 8d 0d 14 0f 01 00 	lea    0x10f14(%rip),%rcx        # 24216 <_ZNSt8__detailL19__atomic_spin_countE+0x155a>
   13302:	48 89 ce             	mov    %rcx,%rsi
   13305:	48 89 c7             	mov    %rax,%rdi
   13308:	ff d2                	call   *%rdx
   1330a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1330e:	48 89 82 e0 03 00 00 	mov    %rax,0x3e0(%rdx)
        vkGetDeviceGroupPeerMemoryFeatures  = PFN_vkGetDeviceGroupPeerMemoryFeatures( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeatures" ) );
   13315:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13319:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1331d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13321:	48 8d 0d 08 0f 01 00 	lea    0x10f08(%rip),%rcx        # 24230 <_ZNSt8__detailL19__atomic_spin_countE+0x1574>
   13328:	48 89 ce             	mov    %rcx,%rsi
   1332b:	48 89 c7             	mov    %rax,%rdi
   1332e:	ff d2                	call   *%rdx
   13330:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13334:	48 89 82 e8 03 00 00 	mov    %rax,0x3e8(%rdx)
        vkCmdSetDeviceMask                  = PFN_vkCmdSetDeviceMask( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMask" ) );
   1333b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1333f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13343:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13347:	48 8d 0d 05 0f 01 00 	lea    0x10f05(%rip),%rcx        # 24253 <_ZNSt8__detailL19__atomic_spin_countE+0x1597>
   1334e:	48 89 ce             	mov    %rcx,%rsi
   13351:	48 89 c7             	mov    %rax,%rdi
   13354:	ff d2                	call   *%rdx
   13356:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1335a:	48 89 82 f0 03 00 00 	mov    %rax,0x3f0(%rdx)
        vkCmdDispatchBase                   = PFN_vkCmdDispatchBase( vkGetDeviceProcAddr( device, "vkCmdDispatchBase" ) );
   13361:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13365:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13369:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1336d:	48 8d 0d f2 0e 01 00 	lea    0x10ef2(%rip),%rcx        # 24266 <_ZNSt8__detailL19__atomic_spin_countE+0x15aa>
   13374:	48 89 ce             	mov    %rcx,%rsi
   13377:	48 89 c7             	mov    %rax,%rdi
   1337a:	ff d2                	call   *%rdx
   1337c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13380:	48 89 82 f8 03 00 00 	mov    %rax,0x3f8(%rdx)
        vkGetImageMemoryRequirements2       = PFN_vkGetImageMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2" ) );
   13387:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1338b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1338f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13393:	48 8d 0d de 0e 01 00 	lea    0x10ede(%rip),%rcx        # 24278 <_ZNSt8__detailL19__atomic_spin_countE+0x15bc>
   1339a:	48 89 ce             	mov    %rcx,%rsi
   1339d:	48 89 c7             	mov    %rax,%rdi
   133a0:	ff d2                	call   *%rdx
   133a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133a6:	48 89 82 00 04 00 00 	mov    %rax,0x400(%rdx)
        vkGetBufferMemoryRequirements2      = PFN_vkGetBufferMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2" ) );
   133ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   133b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133b9:	48 8d 0d d8 0e 01 00 	lea    0x10ed8(%rip),%rcx        # 24298 <_ZNSt8__detailL19__atomic_spin_countE+0x15dc>
   133c0:	48 89 ce             	mov    %rcx,%rsi
   133c3:	48 89 c7             	mov    %rax,%rdi
   133c6:	ff d2                	call   *%rdx
   133c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133cc:	48 89 82 08 04 00 00 	mov    %rax,0x408(%rdx)
        vkGetImageSparseMemoryRequirements2 = PFN_vkGetImageSparseMemoryRequirements2( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2" ) );
   133d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   133db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   133df:	48 8d 0d d2 0e 01 00 	lea    0x10ed2(%rip),%rcx        # 242b8 <_ZNSt8__detailL19__atomic_spin_countE+0x15fc>
   133e6:	48 89 ce             	mov    %rcx,%rsi
   133e9:	48 89 c7             	mov    %rax,%rdi
   133ec:	ff d2                	call   *%rdx
   133ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133f2:	48 89 82 10 04 00 00 	mov    %rax,0x410(%rdx)
        vkTrimCommandPool                   = PFN_vkTrimCommandPool( vkGetDeviceProcAddr( device, "vkTrimCommandPool" ) );
   133f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   133fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13401:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13405:	48 8d 0d d0 0e 01 00 	lea    0x10ed0(%rip),%rcx        # 242dc <_ZNSt8__detailL19__atomic_spin_countE+0x1620>
   1340c:	48 89 ce             	mov    %rcx,%rsi
   1340f:	48 89 c7             	mov    %rax,%rdi
   13412:	ff d2                	call   *%rdx
   13414:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13418:	48 89 82 18 04 00 00 	mov    %rax,0x418(%rdx)
        vkGetDeviceQueue2                   = PFN_vkGetDeviceQueue2( vkGetDeviceProcAddr( device, "vkGetDeviceQueue2" ) );
   1341f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13423:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1342b:	48 8d 0d bc 0e 01 00 	lea    0x10ebc(%rip),%rcx        # 242ee <_ZNSt8__detailL19__atomic_spin_countE+0x1632>
   13432:	48 89 ce             	mov    %rcx,%rsi
   13435:	48 89 c7             	mov    %rax,%rdi
   13438:	ff d2                	call   *%rdx
   1343a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1343e:	48 89 82 20 04 00 00 	mov    %rax,0x420(%rdx)
        vkCreateSamplerYcbcrConversion      = PFN_vkCreateSamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversion" ) );
   13445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13449:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1344d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13451:	48 8d 0d a8 0e 01 00 	lea    0x10ea8(%rip),%rcx        # 24300 <_ZNSt8__detailL19__atomic_spin_countE+0x1644>
   13458:	48 89 ce             	mov    %rcx,%rsi
   1345b:	48 89 c7             	mov    %rax,%rdi
   1345e:	ff d2                	call   *%rdx
   13460:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13464:	48 89 82 28 04 00 00 	mov    %rax,0x428(%rdx)
        vkDestroySamplerYcbcrConversion     = PFN_vkDestroySamplerYcbcrConversion( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversion" ) );
   1346b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1346f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13473:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13477:	48 8d 0d a2 0e 01 00 	lea    0x10ea2(%rip),%rcx        # 24320 <_ZNSt8__detailL19__atomic_spin_countE+0x1664>
   1347e:	48 89 ce             	mov    %rcx,%rsi
   13481:	48 89 c7             	mov    %rax,%rdi
   13484:	ff d2                	call   *%rdx
   13486:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1348a:	48 89 82 30 04 00 00 	mov    %rax,0x430(%rdx)
        vkCreateDescriptorUpdateTemplate    = PFN_vkCreateDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplate" ) );
   13491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13495:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13499:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1349d:	48 8d 0d 9c 0e 01 00 	lea    0x10e9c(%rip),%rcx        # 24340 <_ZNSt8__detailL19__atomic_spin_countE+0x1684>
   134a4:	48 89 ce             	mov    %rcx,%rsi
   134a7:	48 89 c7             	mov    %rax,%rdi
   134aa:	ff d2                	call   *%rdx
   134ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134b0:	48 89 82 38 04 00 00 	mov    %rax,0x438(%rdx)
        vkDestroyDescriptorUpdateTemplate   = PFN_vkDestroyDescriptorUpdateTemplate( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplate" ) );
   134b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134c3:	48 8d 0d 9e 0e 01 00 	lea    0x10e9e(%rip),%rcx        # 24368 <_ZNSt8__detailL19__atomic_spin_countE+0x16ac>
   134ca:	48 89 ce             	mov    %rcx,%rsi
   134cd:	48 89 c7             	mov    %rax,%rdi
   134d0:	ff d2                	call   *%rdx
   134d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134d6:	48 89 82 40 04 00 00 	mov    %rax,0x440(%rdx)
        vkUpdateDescriptorSetWithTemplate   = PFN_vkUpdateDescriptorSetWithTemplate( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplate" ) );
   134dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   134e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   134e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134e9:	48 8d 0d a0 0e 01 00 	lea    0x10ea0(%rip),%rcx        # 24390 <_ZNSt8__detailL19__atomic_spin_countE+0x16d4>
   134f0:	48 89 ce             	mov    %rcx,%rsi
   134f3:	48 89 c7             	mov    %rax,%rdi
   134f6:	ff d2                	call   *%rdx
   134f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   134fc:	48 89 82 48 04 00 00 	mov    %rax,0x448(%rdx)
        vkGetDescriptorSetLayoutSupport     = PFN_vkGetDescriptorSetLayoutSupport( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupport" ) );
   13503:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13507:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1350b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1350f:	48 8d 0d a2 0e 01 00 	lea    0x10ea2(%rip),%rcx        # 243b8 <_ZNSt8__detailL19__atomic_spin_countE+0x16fc>
   13516:	48 89 ce             	mov    %rcx,%rsi
   13519:	48 89 c7             	mov    %rax,%rdi
   1351c:	ff d2                	call   *%rdx
   1351e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13522:	48 89 82 50 04 00 00 	mov    %rax,0x450(%rdx)
        vkCmdDrawIndirectCount          = PFN_vkCmdDrawIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCount" ) );
   13529:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1352d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13531:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13535:	48 8d 0d 9c 0e 01 00 	lea    0x10e9c(%rip),%rcx        # 243d8 <_ZNSt8__detailL19__atomic_spin_countE+0x171c>
   1353c:	48 89 ce             	mov    %rcx,%rsi
   1353f:	48 89 c7             	mov    %rax,%rdi
   13542:	ff d2                	call   *%rdx
   13544:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13548:	48 89 82 58 04 00 00 	mov    %rax,0x458(%rdx)
        vkCmdDrawIndexedIndirectCount   = PFN_vkCmdDrawIndexedIndirectCount( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCount" ) );
   1354f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13553:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13557:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1355b:	48 8d 0d 8d 0e 01 00 	lea    0x10e8d(%rip),%rcx        # 243ef <_ZNSt8__detailL19__atomic_spin_countE+0x1733>
   13562:	48 89 ce             	mov    %rcx,%rsi
   13565:	48 89 c7             	mov    %rax,%rdi
   13568:	ff d2                	call   *%rdx
   1356a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1356e:	48 89 82 60 04 00 00 	mov    %rax,0x460(%rdx)
        vkCreateRenderPass2             = PFN_vkCreateRenderPass2( vkGetDeviceProcAddr( device, "vkCreateRenderPass2" ) );
   13575:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13579:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1357d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13581:	48 8d 0d 85 0e 01 00 	lea    0x10e85(%rip),%rcx        # 2440d <_ZNSt8__detailL19__atomic_spin_countE+0x1751>
   13588:	48 89 ce             	mov    %rcx,%rsi
   1358b:	48 89 c7             	mov    %rax,%rdi
   1358e:	ff d2                	call   *%rdx
   13590:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13594:	48 89 82 68 04 00 00 	mov    %rax,0x468(%rdx)
        vkCmdBeginRenderPass2           = PFN_vkCmdBeginRenderPass2( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2" ) );
   1359b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1359f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135a7:	48 8d 0d 73 0e 01 00 	lea    0x10e73(%rip),%rcx        # 24421 <_ZNSt8__detailL19__atomic_spin_countE+0x1765>
   135ae:	48 89 ce             	mov    %rcx,%rsi
   135b1:	48 89 c7             	mov    %rax,%rdi
   135b4:	ff d2                	call   *%rdx
   135b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135ba:	48 89 82 70 04 00 00 	mov    %rax,0x470(%rdx)
        vkCmdNextSubpass2               = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2" ) );
   135c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135cd:	48 8d 0d 63 0e 01 00 	lea    0x10e63(%rip),%rcx        # 24437 <_ZNSt8__detailL19__atomic_spin_countE+0x177b>
   135d4:	48 89 ce             	mov    %rcx,%rsi
   135d7:	48 89 c7             	mov    %rax,%rdi
   135da:	ff d2                	call   *%rdx
   135dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   135e0:	48 89 82 78 04 00 00 	mov    %rax,0x478(%rdx)
        vkCmdEndRenderPass2             = PFN_vkCmdEndRenderPass2( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2" ) );
   135e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   135eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   135ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   135f3:	48 8d 0d 4f 0e 01 00 	lea    0x10e4f(%rip),%rcx        # 24449 <_ZNSt8__detailL19__atomic_spin_countE+0x178d>
   135fa:	48 89 ce             	mov    %rcx,%rsi
   135fd:	48 89 c7             	mov    %rax,%rdi
   13600:	ff d2                	call   *%rdx
   13602:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13606:	48 89 82 80 04 00 00 	mov    %rax,0x480(%rdx)
        vkResetQueryPool                = PFN_vkResetQueryPool( vkGetDeviceProcAddr( device, "vkResetQueryPool" ) );
   1360d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13611:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13615:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13619:	48 8d 0d 3d 0e 01 00 	lea    0x10e3d(%rip),%rcx        # 2445d <_ZNSt8__detailL19__atomic_spin_countE+0x17a1>
   13620:	48 89 ce             	mov    %rcx,%rsi
   13623:	48 89 c7             	mov    %rax,%rdi
   13626:	ff d2                	call   *%rdx
   13628:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1362c:	48 89 82 88 04 00 00 	mov    %rax,0x488(%rdx)
        vkGetSemaphoreCounterValue      = PFN_vkGetSemaphoreCounterValue( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValue" ) );
   13633:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13637:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1363b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1363f:	48 8d 0d 28 0e 01 00 	lea    0x10e28(%rip),%rcx        # 2446e <_ZNSt8__detailL19__atomic_spin_countE+0x17b2>
   13646:	48 89 ce             	mov    %rcx,%rsi
   13649:	48 89 c7             	mov    %rax,%rdi
   1364c:	ff d2                	call   *%rdx
   1364e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13652:	48 89 82 90 04 00 00 	mov    %rax,0x490(%rdx)
        vkWaitSemaphores                = PFN_vkWaitSemaphores( vkGetDeviceProcAddr( device, "vkWaitSemaphores" ) );
   13659:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1365d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13661:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13665:	48 8d 0d 1d 0e 01 00 	lea    0x10e1d(%rip),%rcx        # 24489 <_ZNSt8__detailL19__atomic_spin_countE+0x17cd>
   1366c:	48 89 ce             	mov    %rcx,%rsi
   1366f:	48 89 c7             	mov    %rax,%rdi
   13672:	ff d2                	call   *%rdx
   13674:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13678:	48 89 82 98 04 00 00 	mov    %rax,0x498(%rdx)
        vkSignalSemaphore               = PFN_vkSignalSemaphore( vkGetDeviceProcAddr( device, "vkSignalSemaphore" ) );
   1367f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13683:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13687:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1368b:	48 8d 0d 08 0e 01 00 	lea    0x10e08(%rip),%rcx        # 2449a <_ZNSt8__detailL19__atomic_spin_countE+0x17de>
   13692:	48 89 ce             	mov    %rcx,%rsi
   13695:	48 89 c7             	mov    %rax,%rdi
   13698:	ff d2                	call   *%rdx
   1369a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1369e:	48 89 82 a0 04 00 00 	mov    %rax,0x4a0(%rdx)
        vkGetBufferDeviceAddress        = PFN_vkGetBufferDeviceAddress( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddress" ) );
   136a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136b1:	48 8d 0d f4 0d 01 00 	lea    0x10df4(%rip),%rcx        # 244ac <_ZNSt8__detailL19__atomic_spin_countE+0x17f0>
   136b8:	48 89 ce             	mov    %rcx,%rsi
   136bb:	48 89 c7             	mov    %rax,%rdi
   136be:	ff d2                	call   *%rdx
   136c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136c4:	48 89 82 a8 04 00 00 	mov    %rax,0x4a8(%rdx)
        vkGetBufferOpaqueCaptureAddress = PFN_vkGetBufferOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddress" ) );
   136cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136d7:	48 8d 0d ea 0d 01 00 	lea    0x10dea(%rip),%rcx        # 244c8 <_ZNSt8__detailL19__atomic_spin_countE+0x180c>
   136de:	48 89 ce             	mov    %rcx,%rsi
   136e1:	48 89 c7             	mov    %rax,%rdi
   136e4:	ff d2                	call   *%rdx
   136e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   136ea:	48 89 82 b0 04 00 00 	mov    %rax,0x4b0(%rdx)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddress( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddress" ) );
   136f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   136f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   136f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136fd:	48 8d 0d e4 0d 01 00 	lea    0x10de4(%rip),%rcx        # 244e8 <_ZNSt8__detailL19__atomic_spin_countE+0x182c>
   13704:	48 89 ce             	mov    %rcx,%rsi
   13707:	48 89 c7             	mov    %rax,%rdi
   1370a:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddress =
   1370c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13710:	48 89 82 b8 04 00 00 	mov    %rax,0x4b8(%rdx)
        vkCreatePrivateDataSlot             = PFN_vkCreatePrivateDataSlot( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlot" ) );
   13717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1371b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1371f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13723:	48 8d 0d e4 0d 01 00 	lea    0x10de4(%rip),%rcx        # 2450e <_ZNSt8__detailL19__atomic_spin_countE+0x1852>
   1372a:	48 89 ce             	mov    %rcx,%rsi
   1372d:	48 89 c7             	mov    %rax,%rdi
   13730:	ff d2                	call   *%rdx
   13732:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13736:	48 89 82 c0 04 00 00 	mov    %rax,0x4c0(%rdx)
        vkDestroyPrivateDataSlot            = PFN_vkDestroyPrivateDataSlot( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlot" ) );
   1373d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13741:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13745:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13749:	48 8d 0d d6 0d 01 00 	lea    0x10dd6(%rip),%rcx        # 24526 <_ZNSt8__detailL19__atomic_spin_countE+0x186a>
   13750:	48 89 ce             	mov    %rcx,%rsi
   13753:	48 89 c7             	mov    %rax,%rdi
   13756:	ff d2                	call   *%rdx
   13758:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1375c:	48 89 82 c8 04 00 00 	mov    %rax,0x4c8(%rdx)
        vkSetPrivateData                    = PFN_vkSetPrivateData( vkGetDeviceProcAddr( device, "vkSetPrivateData" ) );
   13763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13767:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1376b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1376f:	48 8d 0d c9 0d 01 00 	lea    0x10dc9(%rip),%rcx        # 2453f <_ZNSt8__detailL19__atomic_spin_countE+0x1883>
   13776:	48 89 ce             	mov    %rcx,%rsi
   13779:	48 89 c7             	mov    %rax,%rdi
   1377c:	ff d2                	call   *%rdx
   1377e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13782:	48 89 82 d0 04 00 00 	mov    %rax,0x4d0(%rdx)
        vkGetPrivateData                    = PFN_vkGetPrivateData( vkGetDeviceProcAddr( device, "vkGetPrivateData" ) );
   13789:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1378d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13791:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13795:	48 8d 0d b4 0d 01 00 	lea    0x10db4(%rip),%rcx        # 24550 <_ZNSt8__detailL19__atomic_spin_countE+0x1894>
   1379c:	48 89 ce             	mov    %rcx,%rsi
   1379f:	48 89 c7             	mov    %rax,%rdi
   137a2:	ff d2                	call   *%rdx
   137a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137a8:	48 89 82 d8 04 00 00 	mov    %rax,0x4d8(%rdx)
        vkCmdSetEvent2                      = PFN_vkCmdSetEvent2( vkGetDeviceProcAddr( device, "vkCmdSetEvent2" ) );
   137af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137bb:	48 8d 0d 9f 0d 01 00 	lea    0x10d9f(%rip),%rcx        # 24561 <_ZNSt8__detailL19__atomic_spin_countE+0x18a5>
   137c2:	48 89 ce             	mov    %rcx,%rsi
   137c5:	48 89 c7             	mov    %rax,%rdi
   137c8:	ff d2                	call   *%rdx
   137ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137ce:	48 89 82 e0 04 00 00 	mov    %rax,0x4e0(%rdx)
        vkCmdResetEvent2                    = PFN_vkCmdResetEvent2( vkGetDeviceProcAddr( device, "vkCmdResetEvent2" ) );
   137d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   137dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   137e1:	48 8d 0d 88 0d 01 00 	lea    0x10d88(%rip),%rcx        # 24570 <_ZNSt8__detailL19__atomic_spin_countE+0x18b4>
   137e8:	48 89 ce             	mov    %rcx,%rsi
   137eb:	48 89 c7             	mov    %rax,%rdi
   137ee:	ff d2                	call   *%rdx
   137f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   137f4:	48 89 82 e8 04 00 00 	mov    %rax,0x4e8(%rdx)
        vkCmdWaitEvents2                    = PFN_vkCmdWaitEvents2( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2" ) );
   137fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13803:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13807:	48 8d 0d 73 0d 01 00 	lea    0x10d73(%rip),%rcx        # 24581 <_ZNSt8__detailL19__atomic_spin_countE+0x18c5>
   1380e:	48 89 ce             	mov    %rcx,%rsi
   13811:	48 89 c7             	mov    %rax,%rdi
   13814:	ff d2                	call   *%rdx
   13816:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1381a:	48 89 82 f0 04 00 00 	mov    %rax,0x4f0(%rdx)
        vkCmdPipelineBarrier2               = PFN_vkCmdPipelineBarrier2( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2" ) );
   13821:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13825:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1382d:	48 8d 0d 5e 0d 01 00 	lea    0x10d5e(%rip),%rcx        # 24592 <_ZNSt8__detailL19__atomic_spin_countE+0x18d6>
   13834:	48 89 ce             	mov    %rcx,%rsi
   13837:	48 89 c7             	mov    %rax,%rdi
   1383a:	ff d2                	call   *%rdx
   1383c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13840:	48 89 82 f8 04 00 00 	mov    %rax,0x4f8(%rdx)
        vkCmdWriteTimestamp2                = PFN_vkCmdWriteTimestamp2( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2" ) );
   13847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1384b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1384f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13853:	48 8d 0d 4e 0d 01 00 	lea    0x10d4e(%rip),%rcx        # 245a8 <_ZNSt8__detailL19__atomic_spin_countE+0x18ec>
   1385a:	48 89 ce             	mov    %rcx,%rsi
   1385d:	48 89 c7             	mov    %rax,%rdi
   13860:	ff d2                	call   *%rdx
   13862:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13866:	48 89 82 00 05 00 00 	mov    %rax,0x500(%rdx)
        vkQueueSubmit2                      = PFN_vkQueueSubmit2( vkGetDeviceProcAddr( device, "vkQueueSubmit2" ) );
   1386d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13871:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13875:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13879:	48 8d 0d 3d 0d 01 00 	lea    0x10d3d(%rip),%rcx        # 245bd <_ZNSt8__detailL19__atomic_spin_countE+0x1901>
   13880:	48 89 ce             	mov    %rcx,%rsi
   13883:	48 89 c7             	mov    %rax,%rdi
   13886:	ff d2                	call   *%rdx
   13888:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1388c:	48 89 82 08 05 00 00 	mov    %rax,0x508(%rdx)
        vkCmdCopyBuffer2                    = PFN_vkCmdCopyBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2" ) );
   13893:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13897:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1389b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1389f:	48 8d 0d 26 0d 01 00 	lea    0x10d26(%rip),%rcx        # 245cc <_ZNSt8__detailL19__atomic_spin_countE+0x1910>
   138a6:	48 89 ce             	mov    %rcx,%rsi
   138a9:	48 89 c7             	mov    %rax,%rdi
   138ac:	ff d2                	call   *%rdx
   138ae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138b2:	48 89 82 10 05 00 00 	mov    %rax,0x510(%rdx)
        vkCmdCopyImage2                     = PFN_vkCmdCopyImage2( vkGetDeviceProcAddr( device, "vkCmdCopyImage2" ) );
   138b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138bd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138c5:	48 8d 0d 11 0d 01 00 	lea    0x10d11(%rip),%rcx        # 245dd <_ZNSt8__detailL19__atomic_spin_countE+0x1921>
   138cc:	48 89 ce             	mov    %rcx,%rsi
   138cf:	48 89 c7             	mov    %rax,%rdi
   138d2:	ff d2                	call   *%rdx
   138d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138d8:	48 89 82 18 05 00 00 	mov    %rax,0x518(%rdx)
        vkCmdCopyBufferToImage2             = PFN_vkCmdCopyBufferToImage2( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2" ) );
   138df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138e3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   138e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   138eb:	48 8d 0d fb 0c 01 00 	lea    0x10cfb(%rip),%rcx        # 245ed <_ZNSt8__detailL19__atomic_spin_countE+0x1931>
   138f2:	48 89 ce             	mov    %rcx,%rsi
   138f5:	48 89 c7             	mov    %rax,%rdi
   138f8:	ff d2                	call   *%rdx
   138fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   138fe:	48 89 82 20 05 00 00 	mov    %rax,0x520(%rdx)
        vkCmdCopyImageToBuffer2             = PFN_vkCmdCopyImageToBuffer2( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2" ) );
   13905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13909:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1390d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13911:	48 8d 0d ed 0c 01 00 	lea    0x10ced(%rip),%rcx        # 24605 <_ZNSt8__detailL19__atomic_spin_countE+0x1949>
   13918:	48 89 ce             	mov    %rcx,%rsi
   1391b:	48 89 c7             	mov    %rax,%rdi
   1391e:	ff d2                	call   *%rdx
   13920:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13924:	48 89 82 28 05 00 00 	mov    %rax,0x528(%rdx)
        vkCmdBlitImage2                     = PFN_vkCmdBlitImage2( vkGetDeviceProcAddr( device, "vkCmdBlitImage2" ) );
   1392b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1392f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13933:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13937:	48 8d 0d df 0c 01 00 	lea    0x10cdf(%rip),%rcx        # 2461d <_ZNSt8__detailL19__atomic_spin_countE+0x1961>
   1393e:	48 89 ce             	mov    %rcx,%rsi
   13941:	48 89 c7             	mov    %rax,%rdi
   13944:	ff d2                	call   *%rdx
   13946:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1394a:	48 89 82 30 05 00 00 	mov    %rax,0x530(%rdx)
        vkCmdResolveImage2                  = PFN_vkCmdResolveImage2( vkGetDeviceProcAddr( device, "vkCmdResolveImage2" ) );
   13951:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13955:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1395d:	48 8d 0d c9 0c 01 00 	lea    0x10cc9(%rip),%rcx        # 2462d <_ZNSt8__detailL19__atomic_spin_countE+0x1971>
   13964:	48 89 ce             	mov    %rcx,%rsi
   13967:	48 89 c7             	mov    %rax,%rdi
   1396a:	ff d2                	call   *%rdx
   1396c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13970:	48 89 82 38 05 00 00 	mov    %rax,0x538(%rdx)
        vkCmdBeginRendering                 = PFN_vkCmdBeginRendering( vkGetDeviceProcAddr( device, "vkCmdBeginRendering" ) );
   13977:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1397b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1397f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13983:	48 8d 0d b6 0c 01 00 	lea    0x10cb6(%rip),%rcx        # 24640 <_ZNSt8__detailL19__atomic_spin_countE+0x1984>
   1398a:	48 89 ce             	mov    %rcx,%rsi
   1398d:	48 89 c7             	mov    %rax,%rdi
   13990:	ff d2                	call   *%rdx
   13992:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13996:	48 89 82 40 05 00 00 	mov    %rax,0x540(%rdx)
        vkCmdEndRendering                   = PFN_vkCmdEndRendering( vkGetDeviceProcAddr( device, "vkCmdEndRendering" ) );
   1399d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139a9:	48 8d 0d a4 0c 01 00 	lea    0x10ca4(%rip),%rcx        # 24654 <_ZNSt8__detailL19__atomic_spin_countE+0x1998>
   139b0:	48 89 ce             	mov    %rcx,%rsi
   139b3:	48 89 c7             	mov    %rax,%rdi
   139b6:	ff d2                	call   *%rdx
   139b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139bc:	48 89 82 48 05 00 00 	mov    %rax,0x548(%rdx)
        vkCmdSetCullMode                    = PFN_vkCmdSetCullMode( vkGetDeviceProcAddr( device, "vkCmdSetCullMode" ) );
   139c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139c7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139cf:	48 8d 0d 90 0c 01 00 	lea    0x10c90(%rip),%rcx        # 24666 <_ZNSt8__detailL19__atomic_spin_countE+0x19aa>
   139d6:	48 89 ce             	mov    %rcx,%rsi
   139d9:	48 89 c7             	mov    %rax,%rdi
   139dc:	ff d2                	call   *%rdx
   139de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   139e2:	48 89 82 50 05 00 00 	mov    %rax,0x550(%rdx)
        vkCmdSetFrontFace                   = PFN_vkCmdSetFrontFace( vkGetDeviceProcAddr( device, "vkCmdSetFrontFace" ) );
   139e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   139ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   139f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139f5:	48 8d 0d 7b 0c 01 00 	lea    0x10c7b(%rip),%rcx        # 24677 <_ZNSt8__detailL19__atomic_spin_countE+0x19bb>
   139fc:	48 89 ce             	mov    %rcx,%rsi
   139ff:	48 89 c7             	mov    %rax,%rdi
   13a02:	ff d2                	call   *%rdx
   13a04:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a08:	48 89 82 58 05 00 00 	mov    %rax,0x558(%rdx)
        vkCmdSetPrimitiveTopology           = PFN_vkCmdSetPrimitiveTopology( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopology" ) );
   13a0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a13:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a1b:	48 8d 0d 67 0c 01 00 	lea    0x10c67(%rip),%rcx        # 24689 <_ZNSt8__detailL19__atomic_spin_countE+0x19cd>
   13a22:	48 89 ce             	mov    %rcx,%rsi
   13a25:	48 89 c7             	mov    %rax,%rdi
   13a28:	ff d2                	call   *%rdx
   13a2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a2e:	48 89 82 60 05 00 00 	mov    %rax,0x560(%rdx)
        vkCmdSetViewportWithCount           = PFN_vkCmdSetViewportWithCount( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCount" ) );
   13a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a39:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a41:	48 8d 0d 5b 0c 01 00 	lea    0x10c5b(%rip),%rcx        # 246a3 <_ZNSt8__detailL19__atomic_spin_countE+0x19e7>
   13a48:	48 89 ce             	mov    %rcx,%rsi
   13a4b:	48 89 c7             	mov    %rax,%rdi
   13a4e:	ff d2                	call   *%rdx
   13a50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a54:	48 89 82 68 05 00 00 	mov    %rax,0x568(%rdx)
        vkCmdSetScissorWithCount            = PFN_vkCmdSetScissorWithCount( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCount" ) );
   13a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a5f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a67:	48 8d 0d 4f 0c 01 00 	lea    0x10c4f(%rip),%rcx        # 246bd <_ZNSt8__detailL19__atomic_spin_countE+0x1a01>
   13a6e:	48 89 ce             	mov    %rcx,%rsi
   13a71:	48 89 c7             	mov    %rax,%rdi
   13a74:	ff d2                	call   *%rdx
   13a76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13a7a:	48 89 82 70 05 00 00 	mov    %rax,0x570(%rdx)
        vkCmdBindVertexBuffers2             = PFN_vkCmdBindVertexBuffers2( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2" ) );
   13a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13a85:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13a89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a8d:	48 8d 0d 42 0c 01 00 	lea    0x10c42(%rip),%rcx        # 246d6 <_ZNSt8__detailL19__atomic_spin_countE+0x1a1a>
   13a94:	48 89 ce             	mov    %rcx,%rsi
   13a97:	48 89 c7             	mov    %rax,%rdi
   13a9a:	ff d2                	call   *%rdx
   13a9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13aa0:	48 89 82 78 05 00 00 	mov    %rax,0x578(%rdx)
        vkCmdSetDepthTestEnable             = PFN_vkCmdSetDepthTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnable" ) );
   13aa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13aab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ab3:	48 8d 0d 34 0c 01 00 	lea    0x10c34(%rip),%rcx        # 246ee <_ZNSt8__detailL19__atomic_spin_countE+0x1a32>
   13aba:	48 89 ce             	mov    %rcx,%rsi
   13abd:	48 89 c7             	mov    %rax,%rdi
   13ac0:	ff d2                	call   *%rdx
   13ac2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ac6:	48 89 82 80 05 00 00 	mov    %rax,0x580(%rdx)
        vkCmdSetDepthWriteEnable            = PFN_vkCmdSetDepthWriteEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnable" ) );
   13acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ad1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ad9:	48 8d 0d 26 0c 01 00 	lea    0x10c26(%rip),%rcx        # 24706 <_ZNSt8__detailL19__atomic_spin_countE+0x1a4a>
   13ae0:	48 89 ce             	mov    %rcx,%rsi
   13ae3:	48 89 c7             	mov    %rax,%rdi
   13ae6:	ff d2                	call   *%rdx
   13ae8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13aec:	48 89 82 88 05 00 00 	mov    %rax,0x588(%rdx)
        vkCmdSetDepthCompareOp              = PFN_vkCmdSetDepthCompareOp( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOp" ) );
   13af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13af7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13aff:	48 8d 0d 19 0c 01 00 	lea    0x10c19(%rip),%rcx        # 2471f <_ZNSt8__detailL19__atomic_spin_countE+0x1a63>
   13b06:	48 89 ce             	mov    %rcx,%rsi
   13b09:	48 89 c7             	mov    %rax,%rdi
   13b0c:	ff d2                	call   *%rdx
   13b0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b12:	48 89 82 90 05 00 00 	mov    %rax,0x590(%rdx)
        vkCmdSetDepthBoundsTestEnable       = PFN_vkCmdSetDepthBoundsTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnable" ) );
   13b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b25:	48 8d 0d 0a 0c 01 00 	lea    0x10c0a(%rip),%rcx        # 24736 <_ZNSt8__detailL19__atomic_spin_countE+0x1a7a>
   13b2c:	48 89 ce             	mov    %rcx,%rsi
   13b2f:	48 89 c7             	mov    %rax,%rdi
   13b32:	ff d2                	call   *%rdx
   13b34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b38:	48 89 82 98 05 00 00 	mov    %rax,0x598(%rdx)
        vkCmdSetStencilTestEnable           = PFN_vkCmdSetStencilTestEnable( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnable" ) );
   13b3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b43:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b4b:	48 8d 0d 02 0c 01 00 	lea    0x10c02(%rip),%rcx        # 24754 <_ZNSt8__detailL19__atomic_spin_countE+0x1a98>
   13b52:	48 89 ce             	mov    %rcx,%rsi
   13b55:	48 89 c7             	mov    %rax,%rdi
   13b58:	ff d2                	call   *%rdx
   13b5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b5e:	48 89 82 a0 05 00 00 	mov    %rax,0x5a0(%rdx)
        vkCmdSetStencilOp                   = PFN_vkCmdSetStencilOp( vkGetDeviceProcAddr( device, "vkCmdSetStencilOp" ) );
   13b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b71:	48 8d 0d f6 0b 01 00 	lea    0x10bf6(%rip),%rcx        # 2476e <_ZNSt8__detailL19__atomic_spin_countE+0x1ab2>
   13b78:	48 89 ce             	mov    %rcx,%rsi
   13b7b:	48 89 c7             	mov    %rax,%rdi
   13b7e:	ff d2                	call   *%rdx
   13b80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13b84:	48 89 82 a8 05 00 00 	mov    %rax,0x5a8(%rdx)
        vkCmdSetRasterizerDiscardEnable     = PFN_vkCmdSetRasterizerDiscardEnable( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnable" ) );
   13b8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13b93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13b97:	48 8d 0d e2 0b 01 00 	lea    0x10be2(%rip),%rcx        # 24780 <_ZNSt8__detailL19__atomic_spin_countE+0x1ac4>
   13b9e:	48 89 ce             	mov    %rcx,%rsi
   13ba1:	48 89 c7             	mov    %rax,%rdi
   13ba4:	ff d2                	call   *%rdx
   13ba6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13baa:	48 89 82 b0 05 00 00 	mov    %rax,0x5b0(%rdx)
        vkCmdSetDepthBiasEnable             = PFN_vkCmdSetDepthBiasEnable( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnable" ) );
   13bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13bb5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13bb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13bbd:	48 8d 0d dc 0b 01 00 	lea    0x10bdc(%rip),%rcx        # 247a0 <_ZNSt8__detailL19__atomic_spin_countE+0x1ae4>
   13bc4:	48 89 ce             	mov    %rcx,%rsi
   13bc7:	48 89 c7             	mov    %rax,%rdi
   13bca:	ff d2                	call   *%rdx
   13bcc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13bd0:	48 89 82 b8 05 00 00 	mov    %rax,0x5b8(%rdx)
        vkCmdSetPrimitiveRestartEnable      = PFN_vkCmdSetPrimitiveRestartEnable( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnable" ) );
   13bd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13bdb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13bdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13be3:	48 8d 0d ce 0b 01 00 	lea    0x10bce(%rip),%rcx        # 247b8 <_ZNSt8__detailL19__atomic_spin_countE+0x1afc>
   13bea:	48 89 ce             	mov    %rcx,%rsi
   13bed:	48 89 c7             	mov    %rax,%rdi
   13bf0:	ff d2                	call   *%rdx
   13bf2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13bf6:	48 89 82 c0 05 00 00 	mov    %rax,0x5c0(%rdx)
        vkGetDeviceBufferMemoryRequirements = PFN_vkGetDeviceBufferMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirements" ) );
   13bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c09:	48 8d 0d c8 0b 01 00 	lea    0x10bc8(%rip),%rcx        # 247d8 <_ZNSt8__detailL19__atomic_spin_countE+0x1b1c>
   13c10:	48 89 ce             	mov    %rcx,%rsi
   13c13:	48 89 c7             	mov    %rax,%rdi
   13c16:	ff d2                	call   *%rdx
   13c18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c1c:	48 89 82 c8 05 00 00 	mov    %rax,0x5c8(%rdx)
        vkGetDeviceImageMemoryRequirements  = PFN_vkGetDeviceImageMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirements" ) );
   13c23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c2f:	48 8d 0d ca 0b 01 00 	lea    0x10bca(%rip),%rcx        # 24800 <_ZNSt8__detailL19__atomic_spin_countE+0x1b44>
   13c36:	48 89 ce             	mov    %rcx,%rsi
   13c39:	48 89 c7             	mov    %rax,%rdi
   13c3c:	ff d2                	call   *%rdx
   13c3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c42:	48 89 82 d0 05 00 00 	mov    %rax,0x5d0(%rdx)
          PFN_vkGetDeviceImageSparseMemoryRequirements( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirements" ) );
   13c49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c55:	48 8d 0d cc 0b 01 00 	lea    0x10bcc(%rip),%rcx        # 24828 <_ZNSt8__detailL19__atomic_spin_countE+0x1b6c>
   13c5c:	48 89 ce             	mov    %rcx,%rsi
   13c5f:	48 89 c7             	mov    %rax,%rdi
   13c62:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirements =
   13c64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c68:	48 89 82 d8 05 00 00 	mov    %rax,0x5d8(%rdx)
        vkCmdWriteBufferMarkerAMD = PFN_vkCmdWriteBufferMarkerAMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarkerAMD" ) );
   13c6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c73:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13c7b:	48 8d 0d cf 0b 01 00 	lea    0x10bcf(%rip),%rcx        # 24851 <_ZNSt8__detailL19__atomic_spin_countE+0x1b95>
   13c82:	48 89 ce             	mov    %rcx,%rsi
   13c85:	48 89 c7             	mov    %rax,%rdi
   13c88:	ff d2                	call   *%rdx
   13c8a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13c8e:	48 89 82 e0 05 00 00 	mov    %rax,0x5e0(%rdx)
        vkSetLocalDimmingAMD = PFN_vkSetLocalDimmingAMD( vkGetDeviceProcAddr( device, "vkSetLocalDimmingAMD" ) );
   13c95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13c99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13c9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13ca1:	48 8d 0d c3 0b 01 00 	lea    0x10bc3(%rip),%rcx        # 2486b <_ZNSt8__detailL19__atomic_spin_countE+0x1baf>
   13ca8:	48 89 ce             	mov    %rcx,%rsi
   13cab:	48 89 c7             	mov    %rax,%rdi
   13cae:	ff d2                	call   *%rdx
   13cb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13cb4:	48 89 82 e8 05 00 00 	mov    %rax,0x5e8(%rdx)
        vkCmdDrawIndirectCountAMD = PFN_vkCmdDrawIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountAMD" ) );
   13cbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13cbf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13cc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13cc7:	48 8d 0d b2 0b 01 00 	lea    0x10bb2(%rip),%rcx        # 24880 <_ZNSt8__detailL19__atomic_spin_countE+0x1bc4>
   13cce:	48 89 ce             	mov    %rcx,%rsi
   13cd1:	48 89 c7             	mov    %rax,%rdi
   13cd4:	ff d2                	call   *%rdx
   13cd6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13cda:	48 89 82 f0 05 00 00 	mov    %rax,0x5f0(%rdx)
        if ( !vkCmdDrawIndirectCount )
   13ce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ce5:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   13cec:	48 85 c0             	test   %rax,%rax
   13cef:	75 16                	jne    13d07 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x395b>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountAMD;
   13cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13cf5:	48 8b 90 f0 05 00 00 	mov    0x5f0(%rax),%rdx
   13cfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d00:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountAMD = PFN_vkCmdDrawIndexedIndirectCountAMD( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountAMD" ) );
   13d07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d13:	48 8d 0d 86 0b 01 00 	lea    0x10b86(%rip),%rcx        # 248a0 <_ZNSt8__detailL19__atomic_spin_countE+0x1be4>
   13d1a:	48 89 ce             	mov    %rcx,%rsi
   13d1d:	48 89 c7             	mov    %rax,%rdi
   13d20:	ff d2                	call   *%rdx
   13d22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d26:	48 89 82 f8 05 00 00 	mov    %rax,0x5f8(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   13d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d31:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   13d38:	48 85 c0             	test   %rax,%rax
   13d3b:	75 16                	jne    13d53 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x39a7>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountAMD;
   13d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d41:	48 8b 90 f8 05 00 00 	mov    0x5f8(%rax),%rdx
   13d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d4c:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkGetShaderInfoAMD = PFN_vkGetShaderInfoAMD( vkGetDeviceProcAddr( device, "vkGetShaderInfoAMD" ) );
   13d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d57:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d5f:	48 8d 0d 5b 0b 01 00 	lea    0x10b5b(%rip),%rcx        # 248c1 <_ZNSt8__detailL19__atomic_spin_countE+0x1c05>
   13d66:	48 89 ce             	mov    %rcx,%rsi
   13d69:	48 89 c7             	mov    %rax,%rdi
   13d6c:	ff d2                	call   *%rdx
   13d6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d72:	48 89 82 00 06 00 00 	mov    %rax,0x600(%rdx)
        vkGetBufferDeviceAddressEXT = PFN_vkGetBufferDeviceAddressEXT( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressEXT" ) );
   13d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d85:	48 8d 0d 48 0b 01 00 	lea    0x10b48(%rip),%rcx        # 248d4 <_ZNSt8__detailL19__atomic_spin_countE+0x1c18>
   13d8c:	48 89 ce             	mov    %rcx,%rsi
   13d8f:	48 89 c7             	mov    %rax,%rdi
   13d92:	ff d2                	call   *%rdx
   13d94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13d98:	48 89 82 18 06 00 00 	mov    %rax,0x618(%rdx)
        if ( !vkGetBufferDeviceAddress )
   13d9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13da3:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   13daa:	48 85 c0             	test   %rax,%rax
   13dad:	75 16                	jne    13dc5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3a19>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressEXT;
   13daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13db3:	48 8b 90 18 06 00 00 	mov    0x618(%rax),%rdx
   13dba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dbe:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetCalibratedTimestampsEXT = PFN_vkGetCalibratedTimestampsEXT( vkGetDeviceProcAddr( device, "vkGetCalibratedTimestampsEXT" ) );
   13dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13dc9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13dcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13dd1:	48 8d 0d 18 0b 01 00 	lea    0x10b18(%rip),%rcx        # 248f0 <_ZNSt8__detailL19__atomic_spin_countE+0x1c34>
   13dd8:	48 89 ce             	mov    %rcx,%rsi
   13ddb:	48 89 c7             	mov    %rax,%rdi
   13dde:	ff d2                	call   *%rdx
   13de0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13de4:	48 89 82 20 06 00 00 	mov    %rax,0x620(%rdx)
        vkCmdSetColorWriteEnableEXT = PFN_vkCmdSetColorWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteEnableEXT" ) );
   13deb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13def:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13df3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13df7:	48 8d 0d 0f 0b 01 00 	lea    0x10b0f(%rip),%rcx        # 2490d <_ZNSt8__detailL19__atomic_spin_countE+0x1c51>
   13dfe:	48 89 ce             	mov    %rcx,%rsi
   13e01:	48 89 c7             	mov    %rax,%rdi
   13e04:	ff d2                	call   *%rdx
   13e06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e0a:	48 89 82 28 06 00 00 	mov    %rax,0x628(%rdx)
        vkCmdBeginConditionalRenderingEXT = PFN_vkCmdBeginConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdBeginConditionalRenderingEXT" ) );
   13e11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e15:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e1d:	48 8d 0d 0c 0b 01 00 	lea    0x10b0c(%rip),%rcx        # 24930 <_ZNSt8__detailL19__atomic_spin_countE+0x1c74>
   13e24:	48 89 ce             	mov    %rcx,%rsi
   13e27:	48 89 c7             	mov    %rax,%rdi
   13e2a:	ff d2                	call   *%rdx
   13e2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e30:	48 89 82 30 06 00 00 	mov    %rax,0x630(%rdx)
        vkCmdEndConditionalRenderingEXT   = PFN_vkCmdEndConditionalRenderingEXT( vkGetDeviceProcAddr( device, "vkCmdEndConditionalRenderingEXT" ) );
   13e37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e3b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e43:	48 8d 0d 0e 0b 01 00 	lea    0x10b0e(%rip),%rcx        # 24958 <_ZNSt8__detailL19__atomic_spin_countE+0x1c9c>
   13e4a:	48 89 ce             	mov    %rcx,%rsi
   13e4d:	48 89 c7             	mov    %rax,%rdi
   13e50:	ff d2                	call   *%rdx
   13e52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e56:	48 89 82 38 06 00 00 	mov    %rax,0x638(%rdx)
        vkDebugMarkerSetObjectTagEXT  = PFN_vkDebugMarkerSetObjectTagEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectTagEXT" ) );
   13e5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e69:	48 8d 0d 08 0b 01 00 	lea    0x10b08(%rip),%rcx        # 24978 <_ZNSt8__detailL19__atomic_spin_countE+0x1cbc>
   13e70:	48 89 ce             	mov    %rcx,%rsi
   13e73:	48 89 c7             	mov    %rax,%rdi
   13e76:	ff d2                	call   *%rdx
   13e78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13e7c:	48 89 82 40 06 00 00 	mov    %rax,0x640(%rdx)
        vkDebugMarkerSetObjectNameEXT = PFN_vkDebugMarkerSetObjectNameEXT( vkGetDeviceProcAddr( device, "vkDebugMarkerSetObjectNameEXT" ) );
   13e83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13e87:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13e8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e8f:	48 8d 0d ff 0a 01 00 	lea    0x10aff(%rip),%rcx        # 24995 <_ZNSt8__detailL19__atomic_spin_countE+0x1cd9>
   13e96:	48 89 ce             	mov    %rcx,%rsi
   13e99:	48 89 c7             	mov    %rax,%rdi
   13e9c:	ff d2                	call   *%rdx
   13e9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ea2:	48 89 82 48 06 00 00 	mov    %rax,0x648(%rdx)
        vkCmdDebugMarkerBeginEXT      = PFN_vkCmdDebugMarkerBeginEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerBeginEXT" ) );
   13ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ead:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13eb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13eb5:	48 8d 0d f7 0a 01 00 	lea    0x10af7(%rip),%rcx        # 249b3 <_ZNSt8__detailL19__atomic_spin_countE+0x1cf7>
   13ebc:	48 89 ce             	mov    %rcx,%rsi
   13ebf:	48 89 c7             	mov    %rax,%rdi
   13ec2:	ff d2                	call   *%rdx
   13ec4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ec8:	48 89 82 50 06 00 00 	mov    %rax,0x650(%rdx)
        vkCmdDebugMarkerEndEXT        = PFN_vkCmdDebugMarkerEndEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerEndEXT" ) );
   13ecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ed3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13ed7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13edb:	48 8d 0d ea 0a 01 00 	lea    0x10aea(%rip),%rcx        # 249cc <_ZNSt8__detailL19__atomic_spin_countE+0x1d10>
   13ee2:	48 89 ce             	mov    %rcx,%rsi
   13ee5:	48 89 c7             	mov    %rax,%rdi
   13ee8:	ff d2                	call   *%rdx
   13eea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13eee:	48 89 82 58 06 00 00 	mov    %rax,0x658(%rdx)
        vkCmdDebugMarkerInsertEXT     = PFN_vkCmdDebugMarkerInsertEXT( vkGetDeviceProcAddr( device, "vkCmdDebugMarkerInsertEXT" ) );
   13ef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13ef9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13efd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f01:	48 8d 0d db 0a 01 00 	lea    0x10adb(%rip),%rcx        # 249e3 <_ZNSt8__detailL19__atomic_spin_countE+0x1d27>
   13f08:	48 89 ce             	mov    %rcx,%rsi
   13f0b:	48 89 c7             	mov    %rax,%rdi
   13f0e:	ff d2                	call   *%rdx
   13f10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f14:	48 89 82 60 06 00 00 	mov    %rax,0x660(%rdx)
        vkSetDebugUtilsObjectNameEXT    = PFN_vkSetDebugUtilsObjectNameEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectNameEXT" ) );
   13f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f1f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f27:	48 8d 0d cf 0a 01 00 	lea    0x10acf(%rip),%rcx        # 249fd <_ZNSt8__detailL19__atomic_spin_countE+0x1d41>
   13f2e:	48 89 ce             	mov    %rcx,%rsi
   13f31:	48 89 c7             	mov    %rax,%rdi
   13f34:	ff d2                	call   *%rdx
   13f36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f3a:	48 89 82 68 06 00 00 	mov    %rax,0x668(%rdx)
        vkSetDebugUtilsObjectTagEXT     = PFN_vkSetDebugUtilsObjectTagEXT( vkGetDeviceProcAddr( device, "vkSetDebugUtilsObjectTagEXT" ) );
   13f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f45:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f4d:	48 8d 0d c6 0a 01 00 	lea    0x10ac6(%rip),%rcx        # 24a1a <_ZNSt8__detailL19__atomic_spin_countE+0x1d5e>
   13f54:	48 89 ce             	mov    %rcx,%rsi
   13f57:	48 89 c7             	mov    %rax,%rdi
   13f5a:	ff d2                	call   *%rdx
   13f5c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f60:	48 89 82 70 06 00 00 	mov    %rax,0x670(%rdx)
        vkQueueBeginDebugUtilsLabelEXT  = PFN_vkQueueBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueBeginDebugUtilsLabelEXT" ) );
   13f67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f6b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f73:	48 8d 0d be 0a 01 00 	lea    0x10abe(%rip),%rcx        # 24a38 <_ZNSt8__detailL19__atomic_spin_countE+0x1d7c>
   13f7a:	48 89 ce             	mov    %rcx,%rsi
   13f7d:	48 89 c7             	mov    %rax,%rdi
   13f80:	ff d2                	call   *%rdx
   13f82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13f86:	48 89 82 78 06 00 00 	mov    %rax,0x678(%rdx)
        vkQueueEndDebugUtilsLabelEXT    = PFN_vkQueueEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueEndDebugUtilsLabelEXT" ) );
   13f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f91:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13f99:	48 8d 0d b7 0a 01 00 	lea    0x10ab7(%rip),%rcx        # 24a57 <_ZNSt8__detailL19__atomic_spin_countE+0x1d9b>
   13fa0:	48 89 ce             	mov    %rcx,%rsi
   13fa3:	48 89 c7             	mov    %rax,%rdi
   13fa6:	ff d2                	call   *%rdx
   13fa8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13fac:	48 89 82 80 06 00 00 	mov    %rax,0x680(%rdx)
        vkQueueInsertDebugUtilsLabelEXT = PFN_vkQueueInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkQueueInsertDebugUtilsLabelEXT" ) );
   13fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fb7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13fbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fbf:	48 8d 0d b2 0a 01 00 	lea    0x10ab2(%rip),%rcx        # 24a78 <_ZNSt8__detailL19__atomic_spin_countE+0x1dbc>
   13fc6:	48 89 ce             	mov    %rcx,%rsi
   13fc9:	48 89 c7             	mov    %rax,%rdi
   13fcc:	ff d2                	call   *%rdx
   13fce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13fd2:	48 89 82 88 06 00 00 	mov    %rax,0x688(%rdx)
        vkCmdBeginDebugUtilsLabelEXT    = PFN_vkCmdBeginDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdBeginDebugUtilsLabelEXT" ) );
   13fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13fdd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   13fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13fe5:	48 8d 0d ac 0a 01 00 	lea    0x10aac(%rip),%rcx        # 24a98 <_ZNSt8__detailL19__atomic_spin_countE+0x1ddc>
   13fec:	48 89 ce             	mov    %rcx,%rsi
   13fef:	48 89 c7             	mov    %rax,%rdi
   13ff2:	ff d2                	call   *%rdx
   13ff4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13ff8:	48 89 82 90 06 00 00 	mov    %rax,0x690(%rdx)
        vkCmdEndDebugUtilsLabelEXT      = PFN_vkCmdEndDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdEndDebugUtilsLabelEXT" ) );
   13fff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14003:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1400b:	48 8d 0d a3 0a 01 00 	lea    0x10aa3(%rip),%rcx        # 24ab5 <_ZNSt8__detailL19__atomic_spin_countE+0x1df9>
   14012:	48 89 ce             	mov    %rcx,%rsi
   14015:	48 89 c7             	mov    %rax,%rdi
   14018:	ff d2                	call   *%rdx
   1401a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1401e:	48 89 82 98 06 00 00 	mov    %rax,0x698(%rdx)
        vkCmdInsertDebugUtilsLabelEXT   = PFN_vkCmdInsertDebugUtilsLabelEXT( vkGetDeviceProcAddr( device, "vkCmdInsertDebugUtilsLabelEXT" ) );
   14025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14029:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1402d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14031:	48 8d 0d 98 0a 01 00 	lea    0x10a98(%rip),%rcx        # 24ad0 <_ZNSt8__detailL19__atomic_spin_countE+0x1e14>
   14038:	48 89 ce             	mov    %rcx,%rsi
   1403b:	48 89 c7             	mov    %rax,%rdi
   1403e:	ff d2                	call   *%rdx
   14040:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14044:	48 89 82 a0 06 00 00 	mov    %rax,0x6a0(%rdx)
        vkGetDeviceFaultInfoEXT = PFN_vkGetDeviceFaultInfoEXT( vkGetDeviceProcAddr( device, "vkGetDeviceFaultInfoEXT" ) );
   1404b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1404f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14053:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14057:	48 8d 0d 90 0a 01 00 	lea    0x10a90(%rip),%rcx        # 24aee <_ZNSt8__detailL19__atomic_spin_countE+0x1e32>
   1405e:	48 89 ce             	mov    %rcx,%rsi
   14061:	48 89 c7             	mov    %rax,%rdi
   14064:	ff d2                	call   *%rdx
   14066:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1406a:	48 89 82 a8 06 00 00 	mov    %rax,0x6a8(%rdx)
        vkCmdSetDiscardRectangleEXT = PFN_vkCmdSetDiscardRectangleEXT( vkGetDeviceProcAddr( device, "vkCmdSetDiscardRectangleEXT" ) );
   14071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14075:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14079:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1407d:	48 8d 0d 82 0a 01 00 	lea    0x10a82(%rip),%rcx        # 24b06 <_ZNSt8__detailL19__atomic_spin_countE+0x1e4a>
   14084:	48 89 ce             	mov    %rcx,%rsi
   14087:	48 89 c7             	mov    %rax,%rdi
   1408a:	ff d2                	call   *%rdx
   1408c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14090:	48 89 82 b0 06 00 00 	mov    %rax,0x6b0(%rdx)
        vkDisplayPowerControlEXT  = PFN_vkDisplayPowerControlEXT( vkGetDeviceProcAddr( device, "vkDisplayPowerControlEXT" ) );
   14097:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1409b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1409f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140a3:	48 8d 0d 78 0a 01 00 	lea    0x10a78(%rip),%rcx        # 24b22 <_ZNSt8__detailL19__atomic_spin_countE+0x1e66>
   140aa:	48 89 ce             	mov    %rcx,%rsi
   140ad:	48 89 c7             	mov    %rax,%rdi
   140b0:	ff d2                	call   *%rdx
   140b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140b6:	48 89 82 b8 06 00 00 	mov    %rax,0x6b8(%rdx)
        vkRegisterDeviceEventEXT  = PFN_vkRegisterDeviceEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDeviceEventEXT" ) );
   140bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140c9:	48 8d 0d 6b 0a 01 00 	lea    0x10a6b(%rip),%rcx        # 24b3b <_ZNSt8__detailL19__atomic_spin_countE+0x1e7f>
   140d0:	48 89 ce             	mov    %rcx,%rsi
   140d3:	48 89 c7             	mov    %rax,%rdi
   140d6:	ff d2                	call   *%rdx
   140d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   140dc:	48 89 82 c0 06 00 00 	mov    %rax,0x6c0(%rdx)
        vkRegisterDisplayEventEXT = PFN_vkRegisterDisplayEventEXT( vkGetDeviceProcAddr( device, "vkRegisterDisplayEventEXT" ) );
   140e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   140e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   140eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   140ef:	48 8d 0d 5e 0a 01 00 	lea    0x10a5e(%rip),%rcx        # 24b54 <_ZNSt8__detailL19__atomic_spin_countE+0x1e98>
   140f6:	48 89 ce             	mov    %rcx,%rsi
   140f9:	48 89 c7             	mov    %rax,%rdi
   140fc:	ff d2                	call   *%rdx
   140fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14102:	48 89 82 c8 06 00 00 	mov    %rax,0x6c8(%rdx)
        vkGetSwapchainCounterEXT  = PFN_vkGetSwapchainCounterEXT( vkGetDeviceProcAddr( device, "vkGetSwapchainCounterEXT" ) );
   14109:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1410d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14115:	48 8d 0d 52 0a 01 00 	lea    0x10a52(%rip),%rcx        # 24b6e <_ZNSt8__detailL19__atomic_spin_countE+0x1eb2>
   1411c:	48 89 ce             	mov    %rcx,%rsi
   1411f:	48 89 c7             	mov    %rax,%rdi
   14122:	ff d2                	call   *%rdx
   14124:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14128:	48 89 82 d0 06 00 00 	mov    %rax,0x6d0(%rdx)
        vkCmdSetCullModeEXT = PFN_vkCmdSetCullModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetCullModeEXT" ) );
   1412f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14133:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1413b:	48 8d 0d 45 0a 01 00 	lea    0x10a45(%rip),%rcx        # 24b87 <_ZNSt8__detailL19__atomic_spin_countE+0x1ecb>
   14142:	48 89 ce             	mov    %rcx,%rsi
   14145:	48 89 c7             	mov    %rax,%rdi
   14148:	ff d2                	call   *%rdx
   1414a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1414e:	48 89 82 d8 06 00 00 	mov    %rax,0x6d8(%rdx)
        if ( !vkCmdSetCullMode )
   14155:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14159:	48 8b 80 50 05 00 00 	mov    0x550(%rax),%rax
   14160:	48 85 c0             	test   %rax,%rax
   14163:	75 16                	jne    1417b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3dcf>
          vkCmdSetCullMode = vkCmdSetCullModeEXT;
   14165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14169:	48 8b 90 d8 06 00 00 	mov    0x6d8(%rax),%rdx
   14170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14174:	48 89 90 50 05 00 00 	mov    %rdx,0x550(%rax)
        vkCmdSetFrontFaceEXT = PFN_vkCmdSetFrontFaceEXT( vkGetDeviceProcAddr( device, "vkCmdSetFrontFaceEXT" ) );
   1417b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1417f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14187:	48 8d 0d 0d 0a 01 00 	lea    0x10a0d(%rip),%rcx        # 24b9b <_ZNSt8__detailL19__atomic_spin_countE+0x1edf>
   1418e:	48 89 ce             	mov    %rcx,%rsi
   14191:	48 89 c7             	mov    %rax,%rdi
   14194:	ff d2                	call   *%rdx
   14196:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1419a:	48 89 82 e0 06 00 00 	mov    %rax,0x6e0(%rdx)
        if ( !vkCmdSetFrontFace )
   141a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141a5:	48 8b 80 58 05 00 00 	mov    0x558(%rax),%rax
   141ac:	48 85 c0             	test   %rax,%rax
   141af:	75 16                	jne    141c7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e1b>
          vkCmdSetFrontFace = vkCmdSetFrontFaceEXT;
   141b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141b5:	48 8b 90 e0 06 00 00 	mov    0x6e0(%rax),%rdx
   141bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141c0:	48 89 90 58 05 00 00 	mov    %rdx,0x558(%rax)
        vkCmdSetPrimitiveTopologyEXT = PFN_vkCmdSetPrimitiveTopologyEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveTopologyEXT" ) );
   141c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   141cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141d3:	48 8d 0d d6 09 01 00 	lea    0x109d6(%rip),%rcx        # 24bb0 <_ZNSt8__detailL19__atomic_spin_countE+0x1ef4>
   141da:	48 89 ce             	mov    %rcx,%rsi
   141dd:	48 89 c7             	mov    %rax,%rdi
   141e0:	ff d2                	call   *%rdx
   141e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   141e6:	48 89 82 e8 06 00 00 	mov    %rax,0x6e8(%rdx)
        if ( !vkCmdSetPrimitiveTopology )
   141ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   141f1:	48 8b 80 60 05 00 00 	mov    0x560(%rax),%rax
   141f8:	48 85 c0             	test   %rax,%rax
   141fb:	75 16                	jne    14213 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3e67>
          vkCmdSetPrimitiveTopology = vkCmdSetPrimitiveTopologyEXT;
   141fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14201:	48 8b 90 e8 06 00 00 	mov    0x6e8(%rax),%rdx
   14208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1420c:	48 89 90 60 05 00 00 	mov    %rdx,0x560(%rax)
        vkCmdSetViewportWithCountEXT = PFN_vkCmdSetViewportWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetViewportWithCountEXT" ) );
   14213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14217:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1421b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1421f:	48 8d 0d a7 09 01 00 	lea    0x109a7(%rip),%rcx        # 24bcd <_ZNSt8__detailL19__atomic_spin_countE+0x1f11>
   14226:	48 89 ce             	mov    %rcx,%rsi
   14229:	48 89 c7             	mov    %rax,%rdi
   1422c:	ff d2                	call   *%rdx
   1422e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14232:	48 89 82 f0 06 00 00 	mov    %rax,0x6f0(%rdx)
        if ( !vkCmdSetViewportWithCount )
   14239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1423d:	48 8b 80 68 05 00 00 	mov    0x568(%rax),%rax
   14244:	48 85 c0             	test   %rax,%rax
   14247:	75 16                	jne    1425f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eb3>
          vkCmdSetViewportWithCount = vkCmdSetViewportWithCountEXT;
   14249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1424d:	48 8b 90 f0 06 00 00 	mov    0x6f0(%rax),%rdx
   14254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14258:	48 89 90 68 05 00 00 	mov    %rdx,0x568(%rax)
        vkCmdSetScissorWithCountEXT = PFN_vkCmdSetScissorWithCountEXT( vkGetDeviceProcAddr( device, "vkCmdSetScissorWithCountEXT" ) );
   1425f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14263:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1426b:	48 8d 0d 78 09 01 00 	lea    0x10978(%rip),%rcx        # 24bea <_ZNSt8__detailL19__atomic_spin_countE+0x1f2e>
   14272:	48 89 ce             	mov    %rcx,%rsi
   14275:	48 89 c7             	mov    %rax,%rdi
   14278:	ff d2                	call   *%rdx
   1427a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1427e:	48 89 82 f8 06 00 00 	mov    %rax,0x6f8(%rdx)
        if ( !vkCmdSetScissorWithCount )
   14285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14289:	48 8b 80 70 05 00 00 	mov    0x570(%rax),%rax
   14290:	48 85 c0             	test   %rax,%rax
   14293:	75 16                	jne    142ab <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3eff>
          vkCmdSetScissorWithCount = vkCmdSetScissorWithCountEXT;
   14295:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14299:	48 8b 90 f8 06 00 00 	mov    0x6f8(%rax),%rdx
   142a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142a4:	48 89 90 70 05 00 00 	mov    %rdx,0x570(%rax)
        vkCmdBindVertexBuffers2EXT = PFN_vkCmdBindVertexBuffers2EXT( vkGetDeviceProcAddr( device, "vkCmdBindVertexBuffers2EXT" ) );
   142ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   142b7:	48 8d 0d 48 09 01 00 	lea    0x10948(%rip),%rcx        # 24c06 <_ZNSt8__detailL19__atomic_spin_countE+0x1f4a>
   142be:	48 89 ce             	mov    %rcx,%rsi
   142c1:	48 89 c7             	mov    %rax,%rdi
   142c4:	ff d2                	call   *%rdx
   142c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   142ca:	48 89 82 00 07 00 00 	mov    %rax,0x700(%rdx)
        if ( !vkCmdBindVertexBuffers2 )
   142d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142d5:	48 8b 80 78 05 00 00 	mov    0x578(%rax),%rax
   142dc:	48 85 c0             	test   %rax,%rax
   142df:	75 16                	jne    142f7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f4b>
          vkCmdBindVertexBuffers2 = vkCmdBindVertexBuffers2EXT;
   142e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142e5:	48 8b 90 00 07 00 00 	mov    0x700(%rax),%rdx
   142ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142f0:	48 89 90 78 05 00 00 	mov    %rdx,0x578(%rax)
        vkCmdSetDepthTestEnableEXT = PFN_vkCmdSetDepthTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthTestEnableEXT" ) );
   142f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142fb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   142ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14303:	48 8d 0d 17 09 01 00 	lea    0x10917(%rip),%rcx        # 24c21 <_ZNSt8__detailL19__atomic_spin_countE+0x1f65>
   1430a:	48 89 ce             	mov    %rcx,%rsi
   1430d:	48 89 c7             	mov    %rax,%rdi
   14310:	ff d2                	call   *%rdx
   14312:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14316:	48 89 82 08 07 00 00 	mov    %rax,0x708(%rdx)
        if ( !vkCmdSetDepthTestEnable )
   1431d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14321:	48 8b 80 80 05 00 00 	mov    0x580(%rax),%rax
   14328:	48 85 c0             	test   %rax,%rax
   1432b:	75 16                	jne    14343 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3f97>
          vkCmdSetDepthTestEnable = vkCmdSetDepthTestEnableEXT;
   1432d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14331:	48 8b 90 08 07 00 00 	mov    0x708(%rax),%rdx
   14338:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1433c:	48 89 90 80 05 00 00 	mov    %rdx,0x580(%rax)
        vkCmdSetDepthWriteEnableEXT = PFN_vkCmdSetDepthWriteEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthWriteEnableEXT" ) );
   14343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14347:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1434b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1434f:	48 8d 0d e6 08 01 00 	lea    0x108e6(%rip),%rcx        # 24c3c <_ZNSt8__detailL19__atomic_spin_countE+0x1f80>
   14356:	48 89 ce             	mov    %rcx,%rsi
   14359:	48 89 c7             	mov    %rax,%rdi
   1435c:	ff d2                	call   *%rdx
   1435e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14362:	48 89 82 10 07 00 00 	mov    %rax,0x710(%rdx)
        if ( !vkCmdSetDepthWriteEnable )
   14369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1436d:	48 8b 80 88 05 00 00 	mov    0x588(%rax),%rax
   14374:	48 85 c0             	test   %rax,%rax
   14377:	75 16                	jne    1438f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x3fe3>
          vkCmdSetDepthWriteEnable = vkCmdSetDepthWriteEnableEXT;
   14379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1437d:	48 8b 90 10 07 00 00 	mov    0x710(%rax),%rdx
   14384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14388:	48 89 90 88 05 00 00 	mov    %rdx,0x588(%rax)
        vkCmdSetDepthCompareOpEXT = PFN_vkCmdSetDepthCompareOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthCompareOpEXT" ) );
   1438f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14393:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1439b:	48 8d 0d b6 08 01 00 	lea    0x108b6(%rip),%rcx        # 24c58 <_ZNSt8__detailL19__atomic_spin_countE+0x1f9c>
   143a2:	48 89 ce             	mov    %rcx,%rsi
   143a5:	48 89 c7             	mov    %rax,%rdi
   143a8:	ff d2                	call   *%rdx
   143aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   143ae:	48 89 82 18 07 00 00 	mov    %rax,0x718(%rdx)
        if ( !vkCmdSetDepthCompareOp )
   143b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143b9:	48 8b 80 90 05 00 00 	mov    0x590(%rax),%rax
   143c0:	48 85 c0             	test   %rax,%rax
   143c3:	75 16                	jne    143db <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x402f>
          vkCmdSetDepthCompareOp = vkCmdSetDepthCompareOpEXT;
   143c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143c9:	48 8b 90 18 07 00 00 	mov    0x718(%rax),%rdx
   143d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143d4:	48 89 90 90 05 00 00 	mov    %rdx,0x590(%rax)
        vkCmdSetDepthBoundsTestEnableEXT = PFN_vkCmdSetDepthBoundsTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBoundsTestEnableEXT" ) );
   143db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   143df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   143e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   143e7:	48 8d 0d 8a 08 01 00 	lea    0x1088a(%rip),%rcx        # 24c78 <_ZNSt8__detailL19__atomic_spin_countE+0x1fbc>
   143ee:	48 89 ce             	mov    %rcx,%rsi
   143f1:	48 89 c7             	mov    %rax,%rdi
   143f4:	ff d2                	call   *%rdx
   143f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   143fa:	48 89 82 20 07 00 00 	mov    %rax,0x720(%rdx)
        if ( !vkCmdSetDepthBoundsTestEnable )
   14401:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14405:	48 8b 80 98 05 00 00 	mov    0x598(%rax),%rax
   1440c:	48 85 c0             	test   %rax,%rax
   1440f:	75 16                	jne    14427 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x407b>
          vkCmdSetDepthBoundsTestEnable = vkCmdSetDepthBoundsTestEnableEXT;
   14411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14415:	48 8b 90 20 07 00 00 	mov    0x720(%rax),%rdx
   1441c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14420:	48 89 90 98 05 00 00 	mov    %rdx,0x598(%rax)
        vkCmdSetStencilTestEnableEXT = PFN_vkCmdSetStencilTestEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilTestEnableEXT" ) );
   14427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1442b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1442f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14433:	48 8d 0d 5f 08 01 00 	lea    0x1085f(%rip),%rcx        # 24c99 <_ZNSt8__detailL19__atomic_spin_countE+0x1fdd>
   1443a:	48 89 ce             	mov    %rcx,%rsi
   1443d:	48 89 c7             	mov    %rax,%rdi
   14440:	ff d2                	call   *%rdx
   14442:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14446:	48 89 82 28 07 00 00 	mov    %rax,0x728(%rdx)
        if ( !vkCmdSetStencilTestEnable )
   1444d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14451:	48 8b 80 a0 05 00 00 	mov    0x5a0(%rax),%rax
   14458:	48 85 c0             	test   %rax,%rax
   1445b:	75 16                	jne    14473 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x40c7>
          vkCmdSetStencilTestEnable = vkCmdSetStencilTestEnableEXT;
   1445d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14461:	48 8b 90 28 07 00 00 	mov    0x728(%rax),%rdx
   14468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1446c:	48 89 90 a0 05 00 00 	mov    %rdx,0x5a0(%rax)
        vkCmdSetStencilOpEXT = PFN_vkCmdSetStencilOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetStencilOpEXT" ) );
   14473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14477:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1447b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1447f:	48 8d 0d 30 08 01 00 	lea    0x10830(%rip),%rcx        # 24cb6 <_ZNSt8__detailL19__atomic_spin_countE+0x1ffa>
   14486:	48 89 ce             	mov    %rcx,%rsi
   14489:	48 89 c7             	mov    %rax,%rdi
   1448c:	ff d2                	call   *%rdx
   1448e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14492:	48 89 82 30 07 00 00 	mov    %rax,0x730(%rdx)
        if ( !vkCmdSetStencilOp )
   14499:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1449d:	48 8b 80 a8 05 00 00 	mov    0x5a8(%rax),%rax
   144a4:	48 85 c0             	test   %rax,%rax
   144a7:	75 16                	jne    144bf <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4113>
          vkCmdSetStencilOp = vkCmdSetStencilOpEXT;
   144a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144ad:	48 8b 90 30 07 00 00 	mov    0x730(%rax),%rdx
   144b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144b8:	48 89 90 a8 05 00 00 	mov    %rdx,0x5a8(%rax)
        vkCmdSetPatchControlPointsEXT      = PFN_vkCmdSetPatchControlPointsEXT( vkGetDeviceProcAddr( device, "vkCmdSetPatchControlPointsEXT" ) );
   144bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144c3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144cb:	48 8d 0d f9 07 01 00 	lea    0x107f9(%rip),%rcx        # 24ccb <_ZNSt8__detailL19__atomic_spin_countE+0x200f>
   144d2:	48 89 ce             	mov    %rcx,%rsi
   144d5:	48 89 c7             	mov    %rax,%rdi
   144d8:	ff d2                	call   *%rdx
   144da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144de:	48 89 82 38 07 00 00 	mov    %rax,0x738(%rdx)
        vkCmdSetRasterizerDiscardEnableEXT = PFN_vkCmdSetRasterizerDiscardEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizerDiscardEnableEXT" ) );
   144e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   144e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   144ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   144f1:	48 8d 0d f8 07 01 00 	lea    0x107f8(%rip),%rcx        # 24cf0 <_ZNSt8__detailL19__atomic_spin_countE+0x2034>
   144f8:	48 89 ce             	mov    %rcx,%rsi
   144fb:	48 89 c7             	mov    %rax,%rdi
   144fe:	ff d2                	call   *%rdx
   14500:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14504:	48 89 82 40 07 00 00 	mov    %rax,0x740(%rdx)
        if ( !vkCmdSetRasterizerDiscardEnable )
   1450b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1450f:	48 8b 80 b0 05 00 00 	mov    0x5b0(%rax),%rax
   14516:	48 85 c0             	test   %rax,%rax
   14519:	75 16                	jne    14531 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4185>
          vkCmdSetRasterizerDiscardEnable = vkCmdSetRasterizerDiscardEnableEXT;
   1451b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1451f:	48 8b 90 40 07 00 00 	mov    0x740(%rax),%rdx
   14526:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1452a:	48 89 90 b0 05 00 00 	mov    %rdx,0x5b0(%rax)
        vkCmdSetDepthBiasEnableEXT = PFN_vkCmdSetDepthBiasEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthBiasEnableEXT" ) );
   14531:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14535:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14539:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1453d:	48 8d 0d cf 07 01 00 	lea    0x107cf(%rip),%rcx        # 24d13 <_ZNSt8__detailL19__atomic_spin_countE+0x2057>
   14544:	48 89 ce             	mov    %rcx,%rsi
   14547:	48 89 c7             	mov    %rax,%rdi
   1454a:	ff d2                	call   *%rdx
   1454c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14550:	48 89 82 48 07 00 00 	mov    %rax,0x748(%rdx)
        if ( !vkCmdSetDepthBiasEnable )
   14557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1455b:	48 8b 80 b8 05 00 00 	mov    0x5b8(%rax),%rax
   14562:	48 85 c0             	test   %rax,%rax
   14565:	75 16                	jne    1457d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x41d1>
          vkCmdSetDepthBiasEnable = vkCmdSetDepthBiasEnableEXT;
   14567:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1456b:	48 8b 90 48 07 00 00 	mov    0x748(%rax),%rdx
   14572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14576:	48 89 90 b8 05 00 00 	mov    %rdx,0x5b8(%rax)
        vkCmdSetLogicOpEXT                = PFN_vkCmdSetLogicOpEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEXT" ) );
   1457d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14581:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14585:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14589:	48 8d 0d 9e 07 01 00 	lea    0x1079e(%rip),%rcx        # 24d2e <_ZNSt8__detailL19__atomic_spin_countE+0x2072>
   14590:	48 89 ce             	mov    %rcx,%rsi
   14593:	48 89 c7             	mov    %rax,%rdi
   14596:	ff d2                	call   *%rdx
   14598:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1459c:	48 89 82 50 07 00 00 	mov    %rax,0x750(%rdx)
        vkCmdSetPrimitiveRestartEnableEXT = PFN_vkCmdSetPrimitiveRestartEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetPrimitiveRestartEnableEXT" ) );
   145a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145a7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   145ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145af:	48 8d 0d 92 07 01 00 	lea    0x10792(%rip),%rcx        # 24d48 <_ZNSt8__detailL19__atomic_spin_countE+0x208c>
   145b6:	48 89 ce             	mov    %rcx,%rsi
   145b9:	48 89 c7             	mov    %rax,%rdi
   145bc:	ff d2                	call   *%rdx
   145be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   145c2:	48 89 82 58 07 00 00 	mov    %rax,0x758(%rdx)
        if ( !vkCmdSetPrimitiveRestartEnable )
   145c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145cd:	48 8b 80 c0 05 00 00 	mov    0x5c0(%rax),%rax
   145d4:	48 85 c0             	test   %rax,%rax
   145d7:	75 16                	jne    145ef <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4243>
          vkCmdSetPrimitiveRestartEnable = vkCmdSetPrimitiveRestartEnableEXT;
   145d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145dd:	48 8b 90 58 07 00 00 	mov    0x758(%rax),%rdx
   145e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145e8:	48 89 90 c0 05 00 00 	mov    %rdx,0x5c0(%rax)
        vkCmdSetTessellationDomainOriginEXT = PFN_vkCmdSetTessellationDomainOriginEXT( vkGetDeviceProcAddr( device, "vkCmdSetTessellationDomainOriginEXT" ) );
   145ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   145f3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   145f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   145fb:	48 8d 0d 6e 07 01 00 	lea    0x1076e(%rip),%rcx        # 24d70 <_ZNSt8__detailL19__atomic_spin_countE+0x20b4>
   14602:	48 89 ce             	mov    %rcx,%rsi
   14605:	48 89 c7             	mov    %rax,%rdi
   14608:	ff d2                	call   *%rdx
   1460a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1460e:	48 89 82 60 07 00 00 	mov    %rax,0x760(%rdx)
        vkCmdSetDepthClampEnableEXT         = PFN_vkCmdSetDepthClampEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClampEnableEXT" ) );
   14615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14619:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1461d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14621:	48 8d 0d 6c 07 01 00 	lea    0x1076c(%rip),%rcx        # 24d94 <_ZNSt8__detailL19__atomic_spin_countE+0x20d8>
   14628:	48 89 ce             	mov    %rcx,%rsi
   1462b:	48 89 c7             	mov    %rax,%rdi
   1462e:	ff d2                	call   *%rdx
   14630:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14634:	48 89 82 68 07 00 00 	mov    %rax,0x768(%rdx)
        vkCmdSetPolygonModeEXT              = PFN_vkCmdSetPolygonModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetPolygonModeEXT" ) );
   1463b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1463f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14647:	48 8d 0d 62 07 01 00 	lea    0x10762(%rip),%rcx        # 24db0 <_ZNSt8__detailL19__atomic_spin_countE+0x20f4>
   1464e:	48 89 ce             	mov    %rcx,%rsi
   14651:	48 89 c7             	mov    %rax,%rdi
   14654:	ff d2                	call   *%rdx
   14656:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1465a:	48 89 82 70 07 00 00 	mov    %rax,0x770(%rdx)
        vkCmdSetRasterizationSamplesEXT     = PFN_vkCmdSetRasterizationSamplesEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationSamplesEXT" ) );
   14661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14665:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14669:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1466d:	48 8d 0d 54 07 01 00 	lea    0x10754(%rip),%rcx        # 24dc8 <_ZNSt8__detailL19__atomic_spin_countE+0x210c>
   14674:	48 89 ce             	mov    %rcx,%rsi
   14677:	48 89 c7             	mov    %rax,%rdi
   1467a:	ff d2                	call   *%rdx
   1467c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14680:	48 89 82 78 07 00 00 	mov    %rax,0x778(%rdx)
        vkCmdSetSampleMaskEXT               = PFN_vkCmdSetSampleMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleMaskEXT" ) );
   14687:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1468b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1468f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14693:	48 8d 0d 4e 07 01 00 	lea    0x1074e(%rip),%rcx        # 24de8 <_ZNSt8__detailL19__atomic_spin_countE+0x212c>
   1469a:	48 89 ce             	mov    %rcx,%rsi
   1469d:	48 89 c7             	mov    %rax,%rdi
   146a0:	ff d2                	call   *%rdx
   146a2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146a6:	48 89 82 80 07 00 00 	mov    %rax,0x780(%rdx)
        vkCmdSetAlphaToCoverageEnableEXT    = PFN_vkCmdSetAlphaToCoverageEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToCoverageEnableEXT" ) );
   146ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   146b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146b9:	48 8d 0d 40 07 01 00 	lea    0x10740(%rip),%rcx        # 24e00 <_ZNSt8__detailL19__atomic_spin_countE+0x2144>
   146c0:	48 89 ce             	mov    %rcx,%rsi
   146c3:	48 89 c7             	mov    %rax,%rdi
   146c6:	ff d2                	call   *%rdx
   146c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146cc:	48 89 82 88 07 00 00 	mov    %rax,0x788(%rdx)
        vkCmdSetAlphaToOneEnableEXT         = PFN_vkCmdSetAlphaToOneEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetAlphaToOneEnableEXT" ) );
   146d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146d7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   146db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   146df:	48 8d 0d 3b 07 01 00 	lea    0x1073b(%rip),%rcx        # 24e21 <_ZNSt8__detailL19__atomic_spin_countE+0x2165>
   146e6:	48 89 ce             	mov    %rcx,%rsi
   146e9:	48 89 c7             	mov    %rax,%rdi
   146ec:	ff d2                	call   *%rdx
   146ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   146f2:	48 89 82 90 07 00 00 	mov    %rax,0x790(%rdx)
        vkCmdSetLogicOpEnableEXT            = PFN_vkCmdSetLogicOpEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLogicOpEnableEXT" ) );
   146f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   146fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14701:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14705:	48 8d 0d 31 07 01 00 	lea    0x10731(%rip),%rcx        # 24e3d <_ZNSt8__detailL19__atomic_spin_countE+0x2181>
   1470c:	48 89 ce             	mov    %rcx,%rsi
   1470f:	48 89 c7             	mov    %rax,%rdi
   14712:	ff d2                	call   *%rdx
   14714:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14718:	48 89 82 98 07 00 00 	mov    %rax,0x798(%rdx)
        vkCmdSetColorBlendEnableEXT         = PFN_vkCmdSetColorBlendEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEnableEXT" ) );
   1471f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14723:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14727:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1472b:	48 8d 0d 24 07 01 00 	lea    0x10724(%rip),%rcx        # 24e56 <_ZNSt8__detailL19__atomic_spin_countE+0x219a>
   14732:	48 89 ce             	mov    %rcx,%rsi
   14735:	48 89 c7             	mov    %rax,%rdi
   14738:	ff d2                	call   *%rdx
   1473a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1473e:	48 89 82 a0 07 00 00 	mov    %rax,0x7a0(%rdx)
        vkCmdSetColorBlendEquationEXT       = PFN_vkCmdSetColorBlendEquationEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendEquationEXT" ) );
   14745:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14749:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1474d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14751:	48 8d 0d 1a 07 01 00 	lea    0x1071a(%rip),%rcx        # 24e72 <_ZNSt8__detailL19__atomic_spin_countE+0x21b6>
   14758:	48 89 ce             	mov    %rcx,%rsi
   1475b:	48 89 c7             	mov    %rax,%rdi
   1475e:	ff d2                	call   *%rdx
   14760:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14764:	48 89 82 a8 07 00 00 	mov    %rax,0x7a8(%rdx)
        vkCmdSetColorWriteMaskEXT           = PFN_vkCmdSetColorWriteMaskEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorWriteMaskEXT" ) );
   1476b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1476f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14777:	48 8d 0d 12 07 01 00 	lea    0x10712(%rip),%rcx        # 24e90 <_ZNSt8__detailL19__atomic_spin_countE+0x21d4>
   1477e:	48 89 ce             	mov    %rcx,%rsi
   14781:	48 89 c7             	mov    %rax,%rdi
   14784:	ff d2                	call   *%rdx
   14786:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1478a:	48 89 82 b0 07 00 00 	mov    %rax,0x7b0(%rdx)
        vkCmdSetRasterizationStreamEXT      = PFN_vkCmdSetRasterizationStreamEXT( vkGetDeviceProcAddr( device, "vkCmdSetRasterizationStreamEXT" ) );
   14791:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14795:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14799:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1479d:	48 8d 0d 0c 07 01 00 	lea    0x1070c(%rip),%rcx        # 24eb0 <_ZNSt8__detailL19__atomic_spin_countE+0x21f4>
   147a4:	48 89 ce             	mov    %rcx,%rsi
   147a7:	48 89 c7             	mov    %rax,%rdi
   147aa:	ff d2                	call   *%rdx
   147ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147b0:	48 89 82 b8 07 00 00 	mov    %rax,0x7b8(%rdx)
          PFN_vkCmdSetConservativeRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetConservativeRasterizationModeEXT" ) );
   147b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147c3:	48 8d 0d 06 07 01 00 	lea    0x10706(%rip),%rcx        # 24ed0 <_ZNSt8__detailL19__atomic_spin_countE+0x2214>
   147ca:	48 89 ce             	mov    %rcx,%rsi
   147cd:	48 89 c7             	mov    %rax,%rdi
   147d0:	ff d2                	call   *%rdx
        vkCmdSetConservativeRasterizationModeEXT =
   147d2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147d6:	48 89 82 c0 07 00 00 	mov    %rax,0x7c0(%rdx)
          PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT( vkGetDeviceProcAddr( device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT" ) );
   147dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   147e1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   147e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   147e9:	48 8d 0d 10 07 01 00 	lea    0x10710(%rip),%rcx        # 24f00 <_ZNSt8__detailL19__atomic_spin_countE+0x2244>
   147f0:	48 89 ce             	mov    %rcx,%rsi
   147f3:	48 89 c7             	mov    %rax,%rdi
   147f6:	ff d2                	call   *%rdx
        vkCmdSetExtraPrimitiveOverestimationSizeEXT =
   147f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   147fc:	48 89 82 c8 07 00 00 	mov    %rax,0x7c8(%rdx)
        vkCmdSetDepthClipEnableEXT       = PFN_vkCmdSetDepthClipEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipEnableEXT" ) );
   14803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14807:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1480b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1480f:	48 8d 0d 16 07 01 00 	lea    0x10716(%rip),%rcx        # 24f2c <_ZNSt8__detailL19__atomic_spin_countE+0x2270>
   14816:	48 89 ce             	mov    %rcx,%rsi
   14819:	48 89 c7             	mov    %rax,%rdi
   1481c:	ff d2                	call   *%rdx
   1481e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14822:	48 89 82 d0 07 00 00 	mov    %rax,0x7d0(%rdx)
        vkCmdSetSampleLocationsEnableEXT = PFN_vkCmdSetSampleLocationsEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEnableEXT" ) );
   14829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1482d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14831:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14835:	48 8d 0d 0c 07 01 00 	lea    0x1070c(%rip),%rcx        # 24f48 <_ZNSt8__detailL19__atomic_spin_countE+0x228c>
   1483c:	48 89 ce             	mov    %rcx,%rsi
   1483f:	48 89 c7             	mov    %rax,%rdi
   14842:	ff d2                	call   *%rdx
   14844:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14848:	48 89 82 d8 07 00 00 	mov    %rax,0x7d8(%rdx)
        vkCmdSetColorBlendAdvancedEXT    = PFN_vkCmdSetColorBlendAdvancedEXT( vkGetDeviceProcAddr( device, "vkCmdSetColorBlendAdvancedEXT" ) );
   1484f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14853:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1485b:	48 8d 0d 07 07 01 00 	lea    0x10707(%rip),%rcx        # 24f69 <_ZNSt8__detailL19__atomic_spin_countE+0x22ad>
   14862:	48 89 ce             	mov    %rcx,%rsi
   14865:	48 89 c7             	mov    %rax,%rdi
   14868:	ff d2                	call   *%rdx
   1486a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1486e:	48 89 82 e0 07 00 00 	mov    %rax,0x7e0(%rdx)
        vkCmdSetProvokingVertexModeEXT   = PFN_vkCmdSetProvokingVertexModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetProvokingVertexModeEXT" ) );
   14875:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14879:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1487d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14881:	48 8d 0d 00 07 01 00 	lea    0x10700(%rip),%rcx        # 24f88 <_ZNSt8__detailL19__atomic_spin_countE+0x22cc>
   14888:	48 89 ce             	mov    %rcx,%rsi
   1488b:	48 89 c7             	mov    %rax,%rdi
   1488e:	ff d2                	call   *%rdx
   14890:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14894:	48 89 82 e8 07 00 00 	mov    %rax,0x7e8(%rdx)
        vkCmdSetLineRasterizationModeEXT = PFN_vkCmdSetLineRasterizationModeEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineRasterizationModeEXT" ) );
   1489b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1489f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148a7:	48 8d 0d fa 06 01 00 	lea    0x106fa(%rip),%rcx        # 24fa8 <_ZNSt8__detailL19__atomic_spin_countE+0x22ec>
   148ae:	48 89 ce             	mov    %rcx,%rsi
   148b1:	48 89 c7             	mov    %rax,%rdi
   148b4:	ff d2                	call   *%rdx
   148b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148ba:	48 89 82 f0 07 00 00 	mov    %rax,0x7f0(%rdx)
        vkCmdSetLineStippleEnableEXT     = PFN_vkCmdSetLineStippleEnableEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEnableEXT" ) );
   148c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148c5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148cd:	48 8d 0d f5 06 01 00 	lea    0x106f5(%rip),%rcx        # 24fc9 <_ZNSt8__detailL19__atomic_spin_countE+0x230d>
   148d4:	48 89 ce             	mov    %rcx,%rsi
   148d7:	48 89 c7             	mov    %rax,%rdi
   148da:	ff d2                	call   *%rdx
   148dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   148e0:	48 89 82 f8 07 00 00 	mov    %rax,0x7f8(%rdx)
          PFN_vkCmdSetDepthClipNegativeOneToOneEXT( vkGetDeviceProcAddr( device, "vkCmdSetDepthClipNegativeOneToOneEXT" ) );
   148e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   148eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   148ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   148f3:	48 8d 0d ee 06 01 00 	lea    0x106ee(%rip),%rcx        # 24fe8 <_ZNSt8__detailL19__atomic_spin_countE+0x232c>
   148fa:	48 89 ce             	mov    %rcx,%rsi
   148fd:	48 89 c7             	mov    %rax,%rdi
   14900:	ff d2                	call   *%rdx
        vkCmdSetDepthClipNegativeOneToOneEXT =
   14902:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14906:	48 89 82 00 08 00 00 	mov    %rax,0x800(%rdx)
        vkCmdSetViewportWScalingEnableNV  = PFN_vkCmdSetViewportWScalingEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingEnableNV" ) );
   1490d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14911:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14919:	48 8d 0d f0 06 01 00 	lea    0x106f0(%rip),%rcx        # 25010 <_ZNSt8__detailL19__atomic_spin_countE+0x2354>
   14920:	48 89 ce             	mov    %rcx,%rsi
   14923:	48 89 c7             	mov    %rax,%rdi
   14926:	ff d2                	call   *%rdx
   14928:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1492c:	48 89 82 08 08 00 00 	mov    %rax,0x808(%rdx)
        vkCmdSetViewportSwizzleNV         = PFN_vkCmdSetViewportSwizzleNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportSwizzleNV" ) );
   14933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14937:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1493b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1493f:	48 8d 0d eb 06 01 00 	lea    0x106eb(%rip),%rcx        # 25031 <_ZNSt8__detailL19__atomic_spin_countE+0x2375>
   14946:	48 89 ce             	mov    %rcx,%rsi
   14949:	48 89 c7             	mov    %rax,%rdi
   1494c:	ff d2                	call   *%rdx
   1494e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14952:	48 89 82 10 08 00 00 	mov    %rax,0x810(%rdx)
        vkCmdSetCoverageToColorEnableNV   = PFN_vkCmdSetCoverageToColorEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorEnableNV" ) );
   14959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1495d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14965:	48 8d 0d e4 06 01 00 	lea    0x106e4(%rip),%rcx        # 25050 <_ZNSt8__detailL19__atomic_spin_countE+0x2394>
   1496c:	48 89 ce             	mov    %rcx,%rsi
   1496f:	48 89 c7             	mov    %rax,%rdi
   14972:	ff d2                	call   *%rdx
   14974:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14978:	48 89 82 18 08 00 00 	mov    %rax,0x818(%rdx)
        vkCmdSetCoverageToColorLocationNV = PFN_vkCmdSetCoverageToColorLocationNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageToColorLocationNV" ) );
   1497f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14983:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14987:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1498b:	48 8d 0d de 06 01 00 	lea    0x106de(%rip),%rcx        # 25070 <_ZNSt8__detailL19__atomic_spin_countE+0x23b4>
   14992:	48 89 ce             	mov    %rcx,%rsi
   14995:	48 89 c7             	mov    %rax,%rdi
   14998:	ff d2                	call   *%rdx
   1499a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1499e:	48 89 82 20 08 00 00 	mov    %rax,0x820(%rdx)
        vkCmdSetCoverageModulationModeNV  = PFN_vkCmdSetCoverageModulationModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationModeNV" ) );
   149a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149a9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149b1:	48 8d 0d e0 06 01 00 	lea    0x106e0(%rip),%rcx        # 25098 <_ZNSt8__detailL19__atomic_spin_countE+0x23dc>
   149b8:	48 89 ce             	mov    %rcx,%rsi
   149bb:	48 89 c7             	mov    %rax,%rdi
   149be:	ff d2                	call   *%rdx
   149c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149c4:	48 89 82 28 08 00 00 	mov    %rax,0x828(%rdx)
          PFN_vkCmdSetCoverageModulationTableEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableEnableNV" ) );
   149cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149cf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149d7:	48 8d 0d e2 06 01 00 	lea    0x106e2(%rip),%rcx        # 250c0 <_ZNSt8__detailL19__atomic_spin_countE+0x2404>
   149de:	48 89 ce             	mov    %rcx,%rsi
   149e1:	48 89 c7             	mov    %rax,%rdi
   149e4:	ff d2                	call   *%rdx
        vkCmdSetCoverageModulationTableEnableNV =
   149e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   149ea:	48 89 82 30 08 00 00 	mov    %rax,0x830(%rdx)
        vkCmdSetCoverageModulationTableNV = PFN_vkCmdSetCoverageModulationTableNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageModulationTableNV" ) );
   149f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   149f5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   149f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   149fd:	48 8d 0d e4 06 01 00 	lea    0x106e4(%rip),%rcx        # 250e8 <_ZNSt8__detailL19__atomic_spin_countE+0x242c>
   14a04:	48 89 ce             	mov    %rcx,%rsi
   14a07:	48 89 c7             	mov    %rax,%rdi
   14a0a:	ff d2                	call   *%rdx
   14a0c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a10:	48 89 82 38 08 00 00 	mov    %rax,0x838(%rdx)
        vkCmdSetShadingRateImageEnableNV  = PFN_vkCmdSetShadingRateImageEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetShadingRateImageEnableNV" ) );
   14a17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a1b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a23:	48 8d 0d e6 06 01 00 	lea    0x106e6(%rip),%rcx        # 25110 <_ZNSt8__detailL19__atomic_spin_countE+0x2454>
   14a2a:	48 89 ce             	mov    %rcx,%rsi
   14a2d:	48 89 c7             	mov    %rax,%rdi
   14a30:	ff d2                	call   *%rdx
   14a32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a36:	48 89 82 40 08 00 00 	mov    %rax,0x840(%rdx)
          PFN_vkCmdSetRepresentativeFragmentTestEnableNV( vkGetDeviceProcAddr( device, "vkCmdSetRepresentativeFragmentTestEnableNV" ) );
   14a3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a41:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a49:	48 8d 0d e8 06 01 00 	lea    0x106e8(%rip),%rcx        # 25138 <_ZNSt8__detailL19__atomic_spin_countE+0x247c>
   14a50:	48 89 ce             	mov    %rcx,%rsi
   14a53:	48 89 c7             	mov    %rax,%rdi
   14a56:	ff d2                	call   *%rdx
        vkCmdSetRepresentativeFragmentTestEnableNV =
   14a58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a5c:	48 89 82 48 08 00 00 	mov    %rax,0x848(%rdx)
        vkCmdSetCoverageReductionModeNV = PFN_vkCmdSetCoverageReductionModeNV( vkGetDeviceProcAddr( device, "vkCmdSetCoverageReductionModeNV" ) );
   14a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a67:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a6f:	48 8d 0d f2 06 01 00 	lea    0x106f2(%rip),%rcx        # 25168 <_ZNSt8__detailL19__atomic_spin_countE+0x24ac>
   14a76:	48 89 ce             	mov    %rcx,%rsi
   14a79:	48 89 c7             	mov    %rax,%rdi
   14a7c:	ff d2                	call   *%rdx
   14a7e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14a82:	48 89 82 50 08 00 00 	mov    %rax,0x850(%rdx)
        vkGetMemoryHostPointerPropertiesEXT = PFN_vkGetMemoryHostPointerPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetMemoryHostPointerPropertiesEXT" ) );
   14a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14a8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14a91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14a95:	48 8d 0d ec 06 01 00 	lea    0x106ec(%rip),%rcx        # 25188 <_ZNSt8__detailL19__atomic_spin_countE+0x24cc>
   14a9c:	48 89 ce             	mov    %rcx,%rsi
   14a9f:	48 89 c7             	mov    %rax,%rdi
   14aa2:	ff d2                	call   *%rdx
   14aa4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14aa8:	48 89 82 58 08 00 00 	mov    %rax,0x858(%rdx)
        vkSetHdrMetadataEXT = PFN_vkSetHdrMetadataEXT( vkGetDeviceProcAddr( device, "vkSetHdrMetadataEXT" ) );
   14aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ab3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ab7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14abb:	48 8d 0d ea 06 01 00 	lea    0x106ea(%rip),%rcx        # 251ac <_ZNSt8__detailL19__atomic_spin_countE+0x24f0>
   14ac2:	48 89 ce             	mov    %rcx,%rsi
   14ac5:	48 89 c7             	mov    %rax,%rdi
   14ac8:	ff d2                	call   *%rdx
   14aca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ace:	48 89 82 78 08 00 00 	mov    %rax,0x878(%rdx)
        vkResetQueryPoolEXT = PFN_vkResetQueryPoolEXT( vkGetDeviceProcAddr( device, "vkResetQueryPoolEXT" ) );
   14ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ad9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ae1:	48 8d 0d d8 06 01 00 	lea    0x106d8(%rip),%rcx        # 251c0 <_ZNSt8__detailL19__atomic_spin_countE+0x2504>
   14ae8:	48 89 ce             	mov    %rcx,%rsi
   14aeb:	48 89 c7             	mov    %rax,%rdi
   14aee:	ff d2                	call   *%rdx
   14af0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14af4:	48 89 82 80 08 00 00 	mov    %rax,0x880(%rdx)
        if ( !vkResetQueryPool )
   14afb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14aff:	48 8b 80 88 04 00 00 	mov    0x488(%rax),%rax
   14b06:	48 85 c0             	test   %rax,%rax
   14b09:	75 16                	jne    14b21 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4775>
          vkResetQueryPool = vkResetQueryPoolEXT;
   14b0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b0f:	48 8b 90 80 08 00 00 	mov    0x880(%rax),%rdx
   14b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b1a:	48 89 90 88 04 00 00 	mov    %rdx,0x488(%rax)
        vkGetImageSubresourceLayout2EXT = PFN_vkGetImageSubresourceLayout2EXT( vkGetDeviceProcAddr( device, "vkGetImageSubresourceLayout2EXT" ) );
   14b21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b25:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b2d:	48 8d 0d a4 06 01 00 	lea    0x106a4(%rip),%rcx        # 251d8 <_ZNSt8__detailL19__atomic_spin_countE+0x251c>
   14b34:	48 89 ce             	mov    %rcx,%rsi
   14b37:	48 89 c7             	mov    %rax,%rdi
   14b3a:	ff d2                	call   *%rdx
   14b3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b40:	48 89 82 88 08 00 00 	mov    %rax,0x888(%rdx)
          PFN_vkGetImageDrmFormatModifierPropertiesEXT( vkGetDeviceProcAddr( device, "vkGetImageDrmFormatModifierPropertiesEXT" ) );
   14b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b53:	48 8d 0d 9e 06 01 00 	lea    0x1069e(%rip),%rcx        # 251f8 <_ZNSt8__detailL19__atomic_spin_countE+0x253c>
   14b5a:	48 89 ce             	mov    %rcx,%rsi
   14b5d:	48 89 c7             	mov    %rax,%rdi
   14b60:	ff d2                	call   *%rdx
        vkGetImageDrmFormatModifierPropertiesEXT =
   14b62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b66:	48 89 82 90 08 00 00 	mov    %rax,0x890(%rdx)
        vkCmdSetLineStippleEXT = PFN_vkCmdSetLineStippleEXT( vkGetDeviceProcAddr( device, "vkCmdSetLineStippleEXT" ) );
   14b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b71:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b79:	48 8d 0d a1 06 01 00 	lea    0x106a1(%rip),%rcx        # 25221 <_ZNSt8__detailL19__atomic_spin_countE+0x2565>
   14b80:	48 89 ce             	mov    %rcx,%rsi
   14b83:	48 89 c7             	mov    %rax,%rdi
   14b86:	ff d2                	call   *%rdx
   14b88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14b8c:	48 89 82 98 08 00 00 	mov    %rax,0x898(%rdx)
        vkCmdDrawMeshTasksEXT              = PFN_vkCmdDrawMeshTasksEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksEXT" ) );
   14b93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14b97:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14b9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14b9f:	48 8d 0d 92 06 01 00 	lea    0x10692(%rip),%rcx        # 25238 <_ZNSt8__detailL19__atomic_spin_countE+0x257c>
   14ba6:	48 89 ce             	mov    %rcx,%rsi
   14ba9:	48 89 c7             	mov    %rax,%rdi
   14bac:	ff d2                	call   *%rdx
   14bae:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14bb2:	48 89 82 a0 08 00 00 	mov    %rax,0x8a0(%rdx)
        vkCmdDrawMeshTasksIndirectEXT      = PFN_vkCmdDrawMeshTasksIndirectEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectEXT" ) );
   14bb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14bbd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14bc5:	48 8d 0d 82 06 01 00 	lea    0x10682(%rip),%rcx        # 2524e <_ZNSt8__detailL19__atomic_spin_countE+0x2592>
   14bcc:	48 89 ce             	mov    %rcx,%rsi
   14bcf:	48 89 c7             	mov    %rax,%rdi
   14bd2:	ff d2                	call   *%rdx
   14bd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14bd8:	48 89 82 a8 08 00 00 	mov    %rax,0x8a8(%rdx)
        vkCmdDrawMeshTasksIndirectCountEXT = PFN_vkCmdDrawMeshTasksIndirectCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountEXT" ) );
   14bdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14be3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14be7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14beb:	48 8d 0d 7e 06 01 00 	lea    0x1067e(%rip),%rcx        # 25270 <_ZNSt8__detailL19__atomic_spin_countE+0x25b4>
   14bf2:	48 89 ce             	mov    %rcx,%rsi
   14bf5:	48 89 c7             	mov    %rax,%rdi
   14bf8:	ff d2                	call   *%rdx
   14bfa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14bfe:	48 89 82 b0 08 00 00 	mov    %rax,0x8b0(%rdx)
        vkCmdDrawMultiEXT        = PFN_vkCmdDrawMultiEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiEXT" ) );
   14c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c11:	48 8d 0d 7b 06 01 00 	lea    0x1067b(%rip),%rcx        # 25293 <_ZNSt8__detailL19__atomic_spin_countE+0x25d7>
   14c18:	48 89 ce             	mov    %rcx,%rsi
   14c1b:	48 89 c7             	mov    %rax,%rdi
   14c1e:	ff d2                	call   *%rdx
   14c20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c24:	48 89 82 c0 08 00 00 	mov    %rax,0x8c0(%rdx)
        vkCmdDrawMultiIndexedEXT = PFN_vkCmdDrawMultiIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdDrawMultiIndexedEXT" ) );
   14c2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c37:	48 8d 0d 67 06 01 00 	lea    0x10667(%rip),%rcx        # 252a5 <_ZNSt8__detailL19__atomic_spin_countE+0x25e9>
   14c3e:	48 89 ce             	mov    %rcx,%rsi
   14c41:	48 89 c7             	mov    %rax,%rdi
   14c44:	ff d2                	call   *%rdx
   14c46:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c4a:	48 89 82 c8 08 00 00 	mov    %rax,0x8c8(%rdx)
        vkCreateMicromapEXT                 = PFN_vkCreateMicromapEXT( vkGetDeviceProcAddr( device, "vkCreateMicromapEXT" ) );
   14c51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c5d:	48 8d 0d 5a 06 01 00 	lea    0x1065a(%rip),%rcx        # 252be <_ZNSt8__detailL19__atomic_spin_countE+0x2602>
   14c64:	48 89 ce             	mov    %rcx,%rsi
   14c67:	48 89 c7             	mov    %rax,%rdi
   14c6a:	ff d2                	call   *%rdx
   14c6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c70:	48 89 82 d0 08 00 00 	mov    %rax,0x8d0(%rdx)
        vkDestroyMicromapEXT                = PFN_vkDestroyMicromapEXT( vkGetDeviceProcAddr( device, "vkDestroyMicromapEXT" ) );
   14c77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14c7b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14c7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14c83:	48 8d 0d 48 06 01 00 	lea    0x10648(%rip),%rcx        # 252d2 <_ZNSt8__detailL19__atomic_spin_countE+0x2616>
   14c8a:	48 89 ce             	mov    %rcx,%rsi
   14c8d:	48 89 c7             	mov    %rax,%rdi
   14c90:	ff d2                	call   *%rdx
   14c92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14c96:	48 89 82 d8 08 00 00 	mov    %rax,0x8d8(%rdx)
        vkCmdBuildMicromapsEXT              = PFN_vkCmdBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkCmdBuildMicromapsEXT" ) );
   14c9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ca1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ca5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ca9:	48 8d 0d 37 06 01 00 	lea    0x10637(%rip),%rcx        # 252e7 <_ZNSt8__detailL19__atomic_spin_countE+0x262b>
   14cb0:	48 89 ce             	mov    %rcx,%rsi
   14cb3:	48 89 c7             	mov    %rax,%rdi
   14cb6:	ff d2                	call   *%rdx
   14cb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14cbc:	48 89 82 e0 08 00 00 	mov    %rax,0x8e0(%rdx)
        vkBuildMicromapsEXT                 = PFN_vkBuildMicromapsEXT( vkGetDeviceProcAddr( device, "vkBuildMicromapsEXT" ) );
   14cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14cc7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ccf:	48 8d 0d 28 06 01 00 	lea    0x10628(%rip),%rcx        # 252fe <_ZNSt8__detailL19__atomic_spin_countE+0x2642>
   14cd6:	48 89 ce             	mov    %rcx,%rsi
   14cd9:	48 89 c7             	mov    %rax,%rdi
   14cdc:	ff d2                	call   *%rdx
   14cde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ce2:	48 89 82 e8 08 00 00 	mov    %rax,0x8e8(%rdx)
        vkCopyMicromapEXT                   = PFN_vkCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapEXT" ) );
   14ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ced:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14cf5:	48 8d 0d 16 06 01 00 	lea    0x10616(%rip),%rcx        # 25312 <_ZNSt8__detailL19__atomic_spin_countE+0x2656>
   14cfc:	48 89 ce             	mov    %rcx,%rsi
   14cff:	48 89 c7             	mov    %rax,%rdi
   14d02:	ff d2                	call   *%rdx
   14d04:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d08:	48 89 82 f0 08 00 00 	mov    %rax,0x8f0(%rdx)
        vkCopyMicromapToMemoryEXT           = PFN_vkCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCopyMicromapToMemoryEXT" ) );
   14d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d13:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d1b:	48 8d 0d 02 06 01 00 	lea    0x10602(%rip),%rcx        # 25324 <_ZNSt8__detailL19__atomic_spin_countE+0x2668>
   14d22:	48 89 ce             	mov    %rcx,%rsi
   14d25:	48 89 c7             	mov    %rax,%rdi
   14d28:	ff d2                	call   *%rdx
   14d2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d2e:	48 89 82 f8 08 00 00 	mov    %rax,0x8f8(%rdx)
        vkCopyMemoryToMicromapEXT           = PFN_vkCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCopyMemoryToMicromapEXT" ) );
   14d35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d39:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d41:	48 8d 0d f6 05 01 00 	lea    0x105f6(%rip),%rcx        # 2533e <_ZNSt8__detailL19__atomic_spin_countE+0x2682>
   14d48:	48 89 ce             	mov    %rcx,%rsi
   14d4b:	48 89 c7             	mov    %rax,%rdi
   14d4e:	ff d2                	call   *%rdx
   14d50:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d54:	48 89 82 00 09 00 00 	mov    %rax,0x900(%rdx)
        vkWriteMicromapsPropertiesEXT       = PFN_vkWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkWriteMicromapsPropertiesEXT" ) );
   14d5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d5f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d67:	48 8d 0d ea 05 01 00 	lea    0x105ea(%rip),%rcx        # 25358 <_ZNSt8__detailL19__atomic_spin_countE+0x269c>
   14d6e:	48 89 ce             	mov    %rcx,%rsi
   14d71:	48 89 c7             	mov    %rax,%rdi
   14d74:	ff d2                	call   *%rdx
   14d76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14d7a:	48 89 82 08 09 00 00 	mov    %rax,0x908(%rdx)
        vkCmdCopyMicromapEXT                = PFN_vkCmdCopyMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapEXT" ) );
   14d81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d85:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14d8d:	48 8d 0d e2 05 01 00 	lea    0x105e2(%rip),%rcx        # 25376 <_ZNSt8__detailL19__atomic_spin_countE+0x26ba>
   14d94:	48 89 ce             	mov    %rcx,%rsi
   14d97:	48 89 c7             	mov    %rax,%rdi
   14d9a:	ff d2                	call   *%rdx
   14d9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14da0:	48 89 82 10 09 00 00 	mov    %rax,0x910(%rdx)
        vkCmdCopyMicromapToMemoryEXT        = PFN_vkCmdCopyMicromapToMemoryEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMicromapToMemoryEXT" ) );
   14da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14dab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14db3:	48 8d 0d d1 05 01 00 	lea    0x105d1(%rip),%rcx        # 2538b <_ZNSt8__detailL19__atomic_spin_countE+0x26cf>
   14dba:	48 89 ce             	mov    %rcx,%rsi
   14dbd:	48 89 c7             	mov    %rax,%rdi
   14dc0:	ff d2                	call   *%rdx
   14dc2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14dc6:	48 89 82 18 09 00 00 	mov    %rax,0x918(%rdx)
        vkCmdCopyMemoryToMicromapEXT        = PFN_vkCmdCopyMemoryToMicromapEXT( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToMicromapEXT" ) );
   14dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14dd1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14dd9:	48 8d 0d c8 05 01 00 	lea    0x105c8(%rip),%rcx        # 253a8 <_ZNSt8__detailL19__atomic_spin_countE+0x26ec>
   14de0:	48 89 ce             	mov    %rcx,%rsi
   14de3:	48 89 c7             	mov    %rax,%rdi
   14de6:	ff d2                	call   *%rdx
   14de8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14dec:	48 89 82 20 09 00 00 	mov    %rax,0x920(%rdx)
        vkCmdWriteMicromapsPropertiesEXT    = PFN_vkCmdWriteMicromapsPropertiesEXT( vkGetDeviceProcAddr( device, "vkCmdWriteMicromapsPropertiesEXT" ) );
   14df3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14df7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14dfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14dff:	48 8d 0d c2 05 01 00 	lea    0x105c2(%rip),%rcx        # 253c8 <_ZNSt8__detailL19__atomic_spin_countE+0x270c>
   14e06:	48 89 ce             	mov    %rcx,%rsi
   14e09:	48 89 c7             	mov    %rax,%rdi
   14e0c:	ff d2                	call   *%rdx
   14e0e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e12:	48 89 82 28 09 00 00 	mov    %rax,0x928(%rdx)
        vkGetDeviceMicromapCompatibilityEXT = PFN_vkGetDeviceMicromapCompatibilityEXT( vkGetDeviceProcAddr( device, "vkGetDeviceMicromapCompatibilityEXT" ) );
   14e19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e25:	48 8d 0d c4 05 01 00 	lea    0x105c4(%rip),%rcx        # 253f0 <_ZNSt8__detailL19__atomic_spin_countE+0x2734>
   14e2c:	48 89 ce             	mov    %rcx,%rsi
   14e2f:	48 89 c7             	mov    %rax,%rdi
   14e32:	ff d2                	call   *%rdx
   14e34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e38:	48 89 82 30 09 00 00 	mov    %rax,0x930(%rdx)
        vkGetMicromapBuildSizesEXT          = PFN_vkGetMicromapBuildSizesEXT( vkGetDeviceProcAddr( device, "vkGetMicromapBuildSizesEXT" ) );
   14e3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e43:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e4b:	48 8d 0d c2 05 01 00 	lea    0x105c2(%rip),%rcx        # 25414 <_ZNSt8__detailL19__atomic_spin_countE+0x2758>
   14e52:	48 89 ce             	mov    %rcx,%rsi
   14e55:	48 89 c7             	mov    %rax,%rdi
   14e58:	ff d2                	call   *%rdx
   14e5a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e5e:	48 89 82 38 09 00 00 	mov    %rax,0x938(%rdx)
        vkSetDeviceMemoryPriorityEXT = PFN_vkSetDeviceMemoryPriorityEXT( vkGetDeviceProcAddr( device, "vkSetDeviceMemoryPriorityEXT" ) );
   14e65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e69:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e71:	48 8d 0d b7 05 01 00 	lea    0x105b7(%rip),%rcx        # 2542f <_ZNSt8__detailL19__atomic_spin_countE+0x2773>
   14e78:	48 89 ce             	mov    %rcx,%rsi
   14e7b:	48 89 c7             	mov    %rax,%rdi
   14e7e:	ff d2                	call   *%rdx
   14e80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14e84:	48 89 82 40 09 00 00 	mov    %rax,0x940(%rdx)
        vkGetPipelinePropertiesEXT = PFN_vkGetPipelinePropertiesEXT( vkGetDeviceProcAddr( device, "vkGetPipelinePropertiesEXT" ) );
   14e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14e97:	48 8d 0d ae 05 01 00 	lea    0x105ae(%rip),%rcx        # 2544c <_ZNSt8__detailL19__atomic_spin_countE+0x2790>
   14e9e:	48 89 ce             	mov    %rcx,%rsi
   14ea1:	48 89 c7             	mov    %rax,%rdi
   14ea4:	ff d2                	call   *%rdx
   14ea6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14eaa:	48 89 82 48 09 00 00 	mov    %rax,0x948(%rdx)
        vkCreatePrivateDataSlotEXT = PFN_vkCreatePrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkCreatePrivateDataSlotEXT" ) );
   14eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14eb5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14eb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14ebd:	48 8d 0d a3 05 01 00 	lea    0x105a3(%rip),%rcx        # 25467 <_ZNSt8__detailL19__atomic_spin_countE+0x27ab>
   14ec4:	48 89 ce             	mov    %rcx,%rsi
   14ec7:	48 89 c7             	mov    %rax,%rdi
   14eca:	ff d2                	call   *%rdx
   14ecc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14ed0:	48 89 82 50 09 00 00 	mov    %rax,0x950(%rdx)
        if ( !vkCreatePrivateDataSlot )
   14ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14edb:	48 8b 80 c0 04 00 00 	mov    0x4c0(%rax),%rax
   14ee2:	48 85 c0             	test   %rax,%rax
   14ee5:	75 16                	jne    14efd <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b51>
          vkCreatePrivateDataSlot = vkCreatePrivateDataSlotEXT;
   14ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14eeb:	48 8b 90 50 09 00 00 	mov    0x950(%rax),%rdx
   14ef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14ef6:	48 89 90 c0 04 00 00 	mov    %rdx,0x4c0(%rax)
        vkDestroyPrivateDataSlotEXT = PFN_vkDestroyPrivateDataSlotEXT( vkGetDeviceProcAddr( device, "vkDestroyPrivateDataSlotEXT" ) );
   14efd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f01:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f09:	48 8d 0d 72 05 01 00 	lea    0x10572(%rip),%rcx        # 25482 <_ZNSt8__detailL19__atomic_spin_countE+0x27c6>
   14f10:	48 89 ce             	mov    %rcx,%rsi
   14f13:	48 89 c7             	mov    %rax,%rdi
   14f16:	ff d2                	call   *%rdx
   14f18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f1c:	48 89 82 58 09 00 00 	mov    %rax,0x958(%rdx)
        if ( !vkDestroyPrivateDataSlot )
   14f23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f27:	48 8b 80 c8 04 00 00 	mov    0x4c8(%rax),%rax
   14f2e:	48 85 c0             	test   %rax,%rax
   14f31:	75 16                	jne    14f49 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4b9d>
          vkDestroyPrivateDataSlot = vkDestroyPrivateDataSlotEXT;
   14f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f37:	48 8b 90 58 09 00 00 	mov    0x958(%rax),%rdx
   14f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f42:	48 89 90 c8 04 00 00 	mov    %rdx,0x4c8(%rax)
        vkSetPrivateDataEXT = PFN_vkSetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkSetPrivateDataEXT" ) );
   14f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f4d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f55:	48 8d 0d 42 05 01 00 	lea    0x10542(%rip),%rcx        # 2549e <_ZNSt8__detailL19__atomic_spin_countE+0x27e2>
   14f5c:	48 89 ce             	mov    %rcx,%rsi
   14f5f:	48 89 c7             	mov    %rax,%rdi
   14f62:	ff d2                	call   *%rdx
   14f64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14f68:	48 89 82 60 09 00 00 	mov    %rax,0x960(%rdx)
        if ( !vkSetPrivateData )
   14f6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f73:	48 8b 80 d0 04 00 00 	mov    0x4d0(%rax),%rax
   14f7a:	48 85 c0             	test   %rax,%rax
   14f7d:	75 16                	jne    14f95 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4be9>
          vkSetPrivateData = vkSetPrivateDataEXT;
   14f7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f83:	48 8b 90 60 09 00 00 	mov    0x960(%rax),%rdx
   14f8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f8e:	48 89 90 d0 04 00 00 	mov    %rdx,0x4d0(%rax)
        vkGetPrivateDataEXT = PFN_vkGetPrivateDataEXT( vkGetDeviceProcAddr( device, "vkGetPrivateDataEXT" ) );
   14f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14f99:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14f9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fa1:	48 8d 0d 0a 05 01 00 	lea    0x1050a(%rip),%rcx        # 254b2 <_ZNSt8__detailL19__atomic_spin_countE+0x27f6>
   14fa8:	48 89 ce             	mov    %rcx,%rsi
   14fab:	48 89 c7             	mov    %rax,%rdi
   14fae:	ff d2                	call   *%rdx
   14fb0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14fb4:	48 89 82 68 09 00 00 	mov    %rax,0x968(%rdx)
        if ( !vkGetPrivateData )
   14fbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fbf:	48 8b 80 d8 04 00 00 	mov    0x4d8(%rax),%rax
   14fc6:	48 85 c0             	test   %rax,%rax
   14fc9:	75 16                	jne    14fe1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x4c35>
          vkGetPrivateData = vkGetPrivateDataEXT;
   14fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fcf:	48 8b 90 68 09 00 00 	mov    0x968(%rax),%rdx
   14fd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fda:	48 89 90 d8 04 00 00 	mov    %rdx,0x4d8(%rax)
        vkCmdSetSampleLocationsEXT = PFN_vkCmdSetSampleLocationsEXT( vkGetDeviceProcAddr( device, "vkCmdSetSampleLocationsEXT" ) );
   14fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14fe5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   14fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fed:	48 8d 0d d2 04 01 00 	lea    0x104d2(%rip),%rcx        # 254c6 <_ZNSt8__detailL19__atomic_spin_countE+0x280a>
   14ff4:	48 89 ce             	mov    %rcx,%rsi
   14ff7:	48 89 c7             	mov    %rax,%rdi
   14ffa:	ff d2                	call   *%rdx
   14ffc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15000:	48 89 82 70 09 00 00 	mov    %rax,0x970(%rdx)
        vkGetShaderModuleIdentifierEXT = PFN_vkGetShaderModuleIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleIdentifierEXT" ) );
   15007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1500b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1500f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15013:	48 8d 0d ce 04 01 00 	lea    0x104ce(%rip),%rcx        # 254e8 <_ZNSt8__detailL19__atomic_spin_countE+0x282c>
   1501a:	48 89 ce             	mov    %rcx,%rsi
   1501d:	48 89 c7             	mov    %rax,%rdi
   15020:	ff d2                	call   *%rdx
   15022:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15026:	48 89 82 78 09 00 00 	mov    %rax,0x978(%rdx)
          PFN_vkGetShaderModuleCreateInfoIdentifierEXT( vkGetDeviceProcAddr( device, "vkGetShaderModuleCreateInfoIdentifierEXT" ) );
   1502d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15031:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15039:	48 8d 0d c8 04 01 00 	lea    0x104c8(%rip),%rcx        # 25508 <_ZNSt8__detailL19__atomic_spin_countE+0x284c>
   15040:	48 89 ce             	mov    %rcx,%rsi
   15043:	48 89 c7             	mov    %rax,%rdi
   15046:	ff d2                	call   *%rdx
        vkGetShaderModuleCreateInfoIdentifierEXT =
   15048:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1504c:	48 89 82 80 09 00 00 	mov    %rax,0x980(%rdx)
          PFN_vkCmdBindTransformFeedbackBuffersEXT( vkGetDeviceProcAddr( device, "vkCmdBindTransformFeedbackBuffersEXT" ) );
   15053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15057:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1505b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1505f:	48 8d 0d d2 04 01 00 	lea    0x104d2(%rip),%rcx        # 25538 <_ZNSt8__detailL19__atomic_spin_countE+0x287c>
   15066:	48 89 ce             	mov    %rcx,%rsi
   15069:	48 89 c7             	mov    %rax,%rdi
   1506c:	ff d2                	call   *%rdx
        vkCmdBindTransformFeedbackBuffersEXT =
   1506e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15072:	48 89 82 88 09 00 00 	mov    %rax,0x988(%rdx)
        vkCmdBeginTransformFeedbackEXT = PFN_vkCmdBeginTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdBeginTransformFeedbackEXT" ) );
   15079:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1507d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15085:	48 8d 0d d4 04 01 00 	lea    0x104d4(%rip),%rcx        # 25560 <_ZNSt8__detailL19__atomic_spin_countE+0x28a4>
   1508c:	48 89 ce             	mov    %rcx,%rsi
   1508f:	48 89 c7             	mov    %rax,%rdi
   15092:	ff d2                	call   *%rdx
   15094:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15098:	48 89 82 90 09 00 00 	mov    %rax,0x990(%rdx)
        vkCmdEndTransformFeedbackEXT   = PFN_vkCmdEndTransformFeedbackEXT( vkGetDeviceProcAddr( device, "vkCmdEndTransformFeedbackEXT" ) );
   1509f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   150a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150ab:	48 8d 0d cd 04 01 00 	lea    0x104cd(%rip),%rcx        # 2557f <_ZNSt8__detailL19__atomic_spin_countE+0x28c3>
   150b2:	48 89 ce             	mov    %rcx,%rsi
   150b5:	48 89 c7             	mov    %rax,%rdi
   150b8:	ff d2                	call   *%rdx
   150ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150be:	48 89 82 98 09 00 00 	mov    %rax,0x998(%rdx)
        vkCmdBeginQueryIndexedEXT      = PFN_vkCmdBeginQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdBeginQueryIndexedEXT" ) );
   150c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   150cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150d1:	48 8d 0d c4 04 01 00 	lea    0x104c4(%rip),%rcx        # 2559c <_ZNSt8__detailL19__atomic_spin_countE+0x28e0>
   150d8:	48 89 ce             	mov    %rcx,%rsi
   150db:	48 89 c7             	mov    %rax,%rdi
   150de:	ff d2                	call   *%rdx
   150e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   150e4:	48 89 82 a0 09 00 00 	mov    %rax,0x9a0(%rdx)
        vkCmdEndQueryIndexedEXT        = PFN_vkCmdEndQueryIndexedEXT( vkGetDeviceProcAddr( device, "vkCmdEndQueryIndexedEXT" ) );
   150eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   150ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   150f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150f7:	48 8d 0d b8 04 01 00 	lea    0x104b8(%rip),%rcx        # 255b6 <_ZNSt8__detailL19__atomic_spin_countE+0x28fa>
   150fe:	48 89 ce             	mov    %rcx,%rsi
   15101:	48 89 c7             	mov    %rax,%rdi
   15104:	ff d2                	call   *%rdx
   15106:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1510a:	48 89 82 a8 09 00 00 	mov    %rax,0x9a8(%rdx)
        vkCmdDrawIndirectByteCountEXT  = PFN_vkCmdDrawIndirectByteCountEXT( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectByteCountEXT" ) );
   15111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15115:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1511d:	48 8d 0d aa 04 01 00 	lea    0x104aa(%rip),%rcx        # 255ce <_ZNSt8__detailL19__atomic_spin_countE+0x2912>
   15124:	48 89 ce             	mov    %rcx,%rsi
   15127:	48 89 c7             	mov    %rax,%rdi
   1512a:	ff d2                	call   *%rdx
   1512c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15130:	48 89 82 b0 09 00 00 	mov    %rax,0x9b0(%rdx)
        vkCreateValidationCacheEXT  = PFN_vkCreateValidationCacheEXT( vkGetDeviceProcAddr( device, "vkCreateValidationCacheEXT" ) );
   15137:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1513b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1513f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15143:	48 8d 0d a2 04 01 00 	lea    0x104a2(%rip),%rcx        # 255ec <_ZNSt8__detailL19__atomic_spin_countE+0x2930>
   1514a:	48 89 ce             	mov    %rcx,%rsi
   1514d:	48 89 c7             	mov    %rax,%rdi
   15150:	ff d2                	call   *%rdx
   15152:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15156:	48 89 82 b8 09 00 00 	mov    %rax,0x9b8(%rdx)
        vkDestroyValidationCacheEXT = PFN_vkDestroyValidationCacheEXT( vkGetDeviceProcAddr( device, "vkDestroyValidationCacheEXT" ) );
   1515d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15161:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15169:	48 8d 0d 97 04 01 00 	lea    0x10497(%rip),%rcx        # 25607 <_ZNSt8__detailL19__atomic_spin_countE+0x294b>
   15170:	48 89 ce             	mov    %rcx,%rsi
   15173:	48 89 c7             	mov    %rax,%rdi
   15176:	ff d2                	call   *%rdx
   15178:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1517c:	48 89 82 c0 09 00 00 	mov    %rax,0x9c0(%rdx)
        vkMergeValidationCachesEXT  = PFN_vkMergeValidationCachesEXT( vkGetDeviceProcAddr( device, "vkMergeValidationCachesEXT" ) );
   15183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15187:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1518b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1518f:	48 8d 0d 8d 04 01 00 	lea    0x1048d(%rip),%rcx        # 25623 <_ZNSt8__detailL19__atomic_spin_countE+0x2967>
   15196:	48 89 ce             	mov    %rcx,%rsi
   15199:	48 89 c7             	mov    %rax,%rdi
   1519c:	ff d2                	call   *%rdx
   1519e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151a2:	48 89 82 c8 09 00 00 	mov    %rax,0x9c8(%rdx)
        vkGetValidationCacheDataEXT = PFN_vkGetValidationCacheDataEXT( vkGetDeviceProcAddr( device, "vkGetValidationCacheDataEXT" ) );
   151a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   151b5:	48 8d 0d 82 04 01 00 	lea    0x10482(%rip),%rcx        # 2563e <_ZNSt8__detailL19__atomic_spin_countE+0x2982>
   151bc:	48 89 ce             	mov    %rcx,%rsi
   151bf:	48 89 c7             	mov    %rax,%rdi
   151c2:	ff d2                	call   *%rdx
   151c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151c8:	48 89 82 d0 09 00 00 	mov    %rax,0x9d0(%rdx)
        vkCmdSetVertexInputEXT = PFN_vkCmdSetVertexInputEXT( vkGetDeviceProcAddr( device, "vkCmdSetVertexInputEXT" ) );
   151cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   151db:	48 8d 0d 78 04 01 00 	lea    0x10478(%rip),%rcx        # 2565a <_ZNSt8__detailL19__atomic_spin_countE+0x299e>
   151e2:	48 89 ce             	mov    %rcx,%rsi
   151e5:	48 89 c7             	mov    %rax,%rdi
   151e8:	ff d2                	call   *%rdx
   151ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   151ee:	48 89 82 d8 09 00 00 	mov    %rax,0x9d8(%rdx)
        vkGetRefreshCycleDurationGOOGLE   = PFN_vkGetRefreshCycleDurationGOOGLE( vkGetDeviceProcAddr( device, "vkGetRefreshCycleDurationGOOGLE" ) );
   151f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   151f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   151fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15201:	48 8d 0d 70 04 01 00 	lea    0x10470(%rip),%rcx        # 25678 <_ZNSt8__detailL19__atomic_spin_countE+0x29bc>
   15208:	48 89 ce             	mov    %rcx,%rsi
   1520b:	48 89 c7             	mov    %rax,%rdi
   1520e:	ff d2                	call   *%rdx
   15210:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15214:	48 89 82 28 0a 00 00 	mov    %rax,0xa28(%rdx)
        vkGetPastPresentationTimingGOOGLE = PFN_vkGetPastPresentationTimingGOOGLE( vkGetDeviceProcAddr( device, "vkGetPastPresentationTimingGOOGLE" ) );
   1521b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1521f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15223:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15227:	48 8d 0d 6a 04 01 00 	lea    0x1046a(%rip),%rcx        # 25698 <_ZNSt8__detailL19__atomic_spin_countE+0x29dc>
   1522e:	48 89 ce             	mov    %rcx,%rsi
   15231:	48 89 c7             	mov    %rax,%rdi
   15234:	ff d2                	call   *%rdx
   15236:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1523a:	48 89 82 30 0a 00 00 	mov    %rax,0xa30(%rdx)
        vkCmdBindInvocationMaskHUAWEI = PFN_vkCmdBindInvocationMaskHUAWEI( vkGetDeviceProcAddr( device, "vkCmdBindInvocationMaskHUAWEI" ) );
   15241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15245:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1524d:	48 8d 0d 66 04 01 00 	lea    0x10466(%rip),%rcx        # 256ba <_ZNSt8__detailL19__atomic_spin_countE+0x29fe>
   15254:	48 89 ce             	mov    %rcx,%rsi
   15257:	48 89 c7             	mov    %rax,%rdi
   1525a:	ff d2                	call   *%rdx
   1525c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15260:	48 89 82 38 0a 00 00 	mov    %rax,0xa38(%rdx)
          PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI( vkGetDeviceProcAddr( device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" ) );
   15267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1526b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1526f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15273:	48 8d 0d 5e 04 01 00 	lea    0x1045e(%rip),%rcx        # 256d8 <_ZNSt8__detailL19__atomic_spin_countE+0x2a1c>
   1527a:	48 89 ce             	mov    %rcx,%rsi
   1527d:	48 89 c7             	mov    %rax,%rdi
   15280:	ff d2                	call   *%rdx
        vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
   15282:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15286:	48 89 82 40 0a 00 00 	mov    %rax,0xa40(%rdx)
        vkCmdSubpassShadingHUAWEI = PFN_vkCmdSubpassShadingHUAWEI( vkGetDeviceProcAddr( device, "vkCmdSubpassShadingHUAWEI" ) );
   1528d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15291:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15299:	48 8d 0d 68 04 01 00 	lea    0x10468(%rip),%rcx        # 25708 <_ZNSt8__detailL19__atomic_spin_countE+0x2a4c>
   152a0:	48 89 ce             	mov    %rcx,%rsi
   152a3:	48 89 c7             	mov    %rax,%rdi
   152a6:	ff d2                	call   *%rdx
   152a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152ac:	48 89 82 48 0a 00 00 	mov    %rax,0xa48(%rdx)
        vkInitializePerformanceApiINTEL   = PFN_vkInitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkInitializePerformanceApiINTEL" ) );
   152b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152bf:	48 8d 0d 62 04 01 00 	lea    0x10462(%rip),%rcx        # 25728 <_ZNSt8__detailL19__atomic_spin_countE+0x2a6c>
   152c6:	48 89 ce             	mov    %rcx,%rsi
   152c9:	48 89 c7             	mov    %rax,%rdi
   152cc:	ff d2                	call   *%rdx
   152ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152d2:	48 89 82 50 0a 00 00 	mov    %rax,0xa50(%rdx)
        vkUninitializePerformanceApiINTEL = PFN_vkUninitializePerformanceApiINTEL( vkGetDeviceProcAddr( device, "vkUninitializePerformanceApiINTEL" ) );
   152d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   152e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152e5:	48 8d 0d 5c 04 01 00 	lea    0x1045c(%rip),%rcx        # 25748 <_ZNSt8__detailL19__atomic_spin_countE+0x2a8c>
   152ec:	48 89 ce             	mov    %rcx,%rsi
   152ef:	48 89 c7             	mov    %rax,%rdi
   152f2:	ff d2                	call   *%rdx
   152f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   152f8:	48 89 82 58 0a 00 00 	mov    %rax,0xa58(%rdx)
        vkCmdSetPerformanceMarkerINTEL    = PFN_vkCmdSetPerformanceMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceMarkerINTEL" ) );
   152ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15303:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15307:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1530b:	48 8d 0d 5e 04 01 00 	lea    0x1045e(%rip),%rcx        # 25770 <_ZNSt8__detailL19__atomic_spin_countE+0x2ab4>
   15312:	48 89 ce             	mov    %rcx,%rsi
   15315:	48 89 c7             	mov    %rax,%rdi
   15318:	ff d2                	call   *%rdx
   1531a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1531e:	48 89 82 60 0a 00 00 	mov    %rax,0xa60(%rdx)
          PFN_vkCmdSetPerformanceStreamMarkerINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceStreamMarkerINTEL" ) );
   15325:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15329:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1532d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15331:	48 8d 0d 58 04 01 00 	lea    0x10458(%rip),%rcx        # 25790 <_ZNSt8__detailL19__atomic_spin_countE+0x2ad4>
   15338:	48 89 ce             	mov    %rcx,%rsi
   1533b:	48 89 c7             	mov    %rax,%rdi
   1533e:	ff d2                	call   *%rdx
        vkCmdSetPerformanceStreamMarkerINTEL =
   15340:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15344:	48 89 82 68 0a 00 00 	mov    %rax,0xa68(%rdx)
        vkCmdSetPerformanceOverrideINTEL = PFN_vkCmdSetPerformanceOverrideINTEL( vkGetDeviceProcAddr( device, "vkCmdSetPerformanceOverrideINTEL" ) );
   1534b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1534f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15357:	48 8d 0d 5a 04 01 00 	lea    0x1045a(%rip),%rcx        # 257b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2afc>
   1535e:	48 89 ce             	mov    %rcx,%rsi
   15361:	48 89 c7             	mov    %rax,%rdi
   15364:	ff d2                	call   *%rdx
   15366:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1536a:	48 89 82 70 0a 00 00 	mov    %rax,0xa70(%rdx)
          PFN_vkAcquirePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkAcquirePerformanceConfigurationINTEL" ) );
   15371:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15375:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15379:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1537d:	48 8d 0d 5c 04 01 00 	lea    0x1045c(%rip),%rcx        # 257e0 <_ZNSt8__detailL19__atomic_spin_countE+0x2b24>
   15384:	48 89 ce             	mov    %rcx,%rsi
   15387:	48 89 c7             	mov    %rax,%rdi
   1538a:	ff d2                	call   *%rdx
        vkAcquirePerformanceConfigurationINTEL =
   1538c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15390:	48 89 82 78 0a 00 00 	mov    %rax,0xa78(%rdx)
          PFN_vkReleasePerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkReleasePerformanceConfigurationINTEL" ) );
   15397:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1539b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1539f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153a3:	48 8d 0d 5e 04 01 00 	lea    0x1045e(%rip),%rcx        # 25808 <_ZNSt8__detailL19__atomic_spin_countE+0x2b4c>
   153aa:	48 89 ce             	mov    %rcx,%rsi
   153ad:	48 89 c7             	mov    %rax,%rdi
   153b0:	ff d2                	call   *%rdx
        vkReleasePerformanceConfigurationINTEL =
   153b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   153b6:	48 89 82 80 0a 00 00 	mov    %rax,0xa80(%rdx)
          PFN_vkQueueSetPerformanceConfigurationINTEL( vkGetDeviceProcAddr( device, "vkQueueSetPerformanceConfigurationINTEL" ) );
   153bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153c9:	48 8d 0d 60 04 01 00 	lea    0x10460(%rip),%rcx        # 25830 <_ZNSt8__detailL19__atomic_spin_countE+0x2b74>
   153d0:	48 89 ce             	mov    %rcx,%rsi
   153d3:	48 89 c7             	mov    %rax,%rdi
   153d6:	ff d2                	call   *%rdx
        vkQueueSetPerformanceConfigurationINTEL =
   153d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   153dc:	48 89 82 88 0a 00 00 	mov    %rax,0xa88(%rdx)
        vkGetPerformanceParameterINTEL = PFN_vkGetPerformanceParameterINTEL( vkGetDeviceProcAddr( device, "vkGetPerformanceParameterINTEL" ) );
   153e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   153e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   153eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   153ef:	48 8d 0d 62 04 01 00 	lea    0x10462(%rip),%rcx        # 25858 <_ZNSt8__detailL19__atomic_spin_countE+0x2b9c>
   153f6:	48 89 ce             	mov    %rcx,%rsi
   153f9:	48 89 c7             	mov    %rax,%rdi
   153fc:	ff d2                	call   *%rdx
   153fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15402:	48 89 82 90 0a 00 00 	mov    %rax,0xa90(%rdx)
        vkCreateAccelerationStructureKHR    = PFN_vkCreateAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureKHR" ) );
   15409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1540d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15415:	48 8d 0d 5c 04 01 00 	lea    0x1045c(%rip),%rcx        # 25878 <_ZNSt8__detailL19__atomic_spin_countE+0x2bbc>
   1541c:	48 89 ce             	mov    %rcx,%rsi
   1541f:	48 89 c7             	mov    %rax,%rdi
   15422:	ff d2                	call   *%rdx
   15424:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15428:	48 89 82 98 0a 00 00 	mov    %rax,0xa98(%rdx)
        vkDestroyAccelerationStructureKHR   = PFN_vkDestroyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureKHR" ) );
   1542f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15433:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15437:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1543b:	48 8d 0d 5e 04 01 00 	lea    0x1045e(%rip),%rcx        # 258a0 <_ZNSt8__detailL19__atomic_spin_countE+0x2be4>
   15442:	48 89 ce             	mov    %rcx,%rsi
   15445:	48 89 c7             	mov    %rax,%rdi
   15448:	ff d2                	call   *%rdx
   1544a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1544e:	48 89 82 a0 0a 00 00 	mov    %rax,0xaa0(%rdx)
        vkCmdBuildAccelerationStructuresKHR = PFN_vkCmdBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresKHR" ) );
   15455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15459:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1545d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15461:	48 8d 0d 60 04 01 00 	lea    0x10460(%rip),%rcx        # 258c8 <_ZNSt8__detailL19__atomic_spin_countE+0x2c0c>
   15468:	48 89 ce             	mov    %rcx,%rsi
   1546b:	48 89 c7             	mov    %rax,%rdi
   1546e:	ff d2                	call   *%rdx
   15470:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15474:	48 89 82 a8 0a 00 00 	mov    %rax,0xaa8(%rdx)
          PFN_vkCmdBuildAccelerationStructuresIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructuresIndirectKHR" ) );
   1547b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1547f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15487:	48 8d 0d 62 04 01 00 	lea    0x10462(%rip),%rcx        # 258f0 <_ZNSt8__detailL19__atomic_spin_countE+0x2c34>
   1548e:	48 89 ce             	mov    %rcx,%rsi
   15491:	48 89 c7             	mov    %rax,%rdi
   15494:	ff d2                	call   *%rdx
        vkCmdBuildAccelerationStructuresIndirectKHR =
   15496:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1549a:	48 89 82 b0 0a 00 00 	mov    %rax,0xab0(%rdx)
        vkBuildAccelerationStructuresKHR = PFN_vkBuildAccelerationStructuresKHR( vkGetDeviceProcAddr( device, "vkBuildAccelerationStructuresKHR" ) );
   154a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154ad:	48 8d 0d 6c 04 01 00 	lea    0x1046c(%rip),%rcx        # 25920 <_ZNSt8__detailL19__atomic_spin_countE+0x2c64>
   154b4:	48 89 ce             	mov    %rcx,%rsi
   154b7:	48 89 c7             	mov    %rax,%rdi
   154ba:	ff d2                	call   *%rdx
   154bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154c0:	48 89 82 b8 0a 00 00 	mov    %rax,0xab8(%rdx)
        vkCopyAccelerationStructureKHR   = PFN_vkCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureKHR" ) );
   154c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154d3:	48 8d 0d 6e 04 01 00 	lea    0x1046e(%rip),%rcx        # 25948 <_ZNSt8__detailL19__atomic_spin_countE+0x2c8c>
   154da:	48 89 ce             	mov    %rcx,%rsi
   154dd:	48 89 c7             	mov    %rax,%rdi
   154e0:	ff d2                	call   *%rdx
   154e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   154e6:	48 89 82 c0 0a 00 00 	mov    %rax,0xac0(%rdx)
          PFN_vkCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCopyAccelerationStructureToMemoryKHR" ) );
   154ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   154f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   154f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   154f9:	48 8d 0d 68 04 01 00 	lea    0x10468(%rip),%rcx        # 25968 <_ZNSt8__detailL19__atomic_spin_countE+0x2cac>
   15500:	48 89 ce             	mov    %rcx,%rsi
   15503:	48 89 c7             	mov    %rax,%rdi
   15506:	ff d2                	call   *%rdx
        vkCopyAccelerationStructureToMemoryKHR =
   15508:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1550c:	48 89 82 c8 0a 00 00 	mov    %rax,0xac8(%rdx)
          PFN_vkCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCopyMemoryToAccelerationStructureKHR" ) );
   15513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15517:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1551b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1551f:	48 8d 0d 6a 04 01 00 	lea    0x1046a(%rip),%rcx        # 25990 <_ZNSt8__detailL19__atomic_spin_countE+0x2cd4>
   15526:	48 89 ce             	mov    %rcx,%rsi
   15529:	48 89 c7             	mov    %rax,%rdi
   1552c:	ff d2                	call   *%rdx
        vkCopyMemoryToAccelerationStructureKHR =
   1552e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15532:	48 89 82 d0 0a 00 00 	mov    %rax,0xad0(%rdx)
          PFN_vkWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkWriteAccelerationStructuresPropertiesKHR" ) );
   15539:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1553d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15541:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15545:	48 8d 0d 6c 04 01 00 	lea    0x1046c(%rip),%rcx        # 259b8 <_ZNSt8__detailL19__atomic_spin_countE+0x2cfc>
   1554c:	48 89 ce             	mov    %rcx,%rsi
   1554f:	48 89 c7             	mov    %rax,%rdi
   15552:	ff d2                	call   *%rdx
        vkWriteAccelerationStructuresPropertiesKHR =
   15554:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15558:	48 89 82 d8 0a 00 00 	mov    %rax,0xad8(%rdx)
        vkCmdCopyAccelerationStructureKHR = PFN_vkCmdCopyAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureKHR" ) );
   1555f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15563:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1556b:	48 8d 0d 76 04 01 00 	lea    0x10476(%rip),%rcx        # 259e8 <_ZNSt8__detailL19__atomic_spin_countE+0x2d2c>
   15572:	48 89 ce             	mov    %rcx,%rsi
   15575:	48 89 c7             	mov    %rax,%rdi
   15578:	ff d2                	call   *%rdx
   1557a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1557e:	48 89 82 e0 0a 00 00 	mov    %rax,0xae0(%rdx)
          PFN_vkCmdCopyAccelerationStructureToMemoryKHR( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureToMemoryKHR" ) );
   15585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15589:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1558d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15591:	48 8d 0d 78 04 01 00 	lea    0x10478(%rip),%rcx        # 25a10 <_ZNSt8__detailL19__atomic_spin_countE+0x2d54>
   15598:	48 89 ce             	mov    %rcx,%rsi
   1559b:	48 89 c7             	mov    %rax,%rdi
   1559e:	ff d2                	call   *%rdx
        vkCmdCopyAccelerationStructureToMemoryKHR =
   155a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155a4:	48 89 82 e8 0a 00 00 	mov    %rax,0xae8(%rdx)
          PFN_vkCmdCopyMemoryToAccelerationStructureKHR( vkGetDeviceProcAddr( device, "vkCmdCopyMemoryToAccelerationStructureKHR" ) );
   155ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155af:	48 8b 50 10          	mov    0x10(%rax),%rdx
   155b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155b7:	48 8d 0d 82 04 01 00 	lea    0x10482(%rip),%rcx        # 25a40 <_ZNSt8__detailL19__atomic_spin_countE+0x2d84>
   155be:	48 89 ce             	mov    %rcx,%rsi
   155c1:	48 89 c7             	mov    %rax,%rdi
   155c4:	ff d2                	call   *%rdx
        vkCmdCopyMemoryToAccelerationStructureKHR =
   155c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155ca:	48 89 82 f0 0a 00 00 	mov    %rax,0xaf0(%rdx)
          PFN_vkGetAccelerationStructureDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureDeviceAddressKHR" ) );
   155d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   155d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155dd:	48 8d 0d 8c 04 01 00 	lea    0x1048c(%rip),%rcx        # 25a70 <_ZNSt8__detailL19__atomic_spin_countE+0x2db4>
   155e4:	48 89 ce             	mov    %rcx,%rsi
   155e7:	48 89 c7             	mov    %rax,%rdi
   155ea:	ff d2                	call   *%rdx
        vkGetAccelerationStructureDeviceAddressKHR =
   155ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155f0:	48 89 82 f8 0a 00 00 	mov    %rax,0xaf8(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesKHR( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesKHR" ) );
   155f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155fb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   155ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15603:	48 8d 0d 96 04 01 00 	lea    0x10496(%rip),%rcx        # 25aa0 <_ZNSt8__detailL19__atomic_spin_countE+0x2de4>
   1560a:	48 89 ce             	mov    %rcx,%rsi
   1560d:	48 89 c7             	mov    %rax,%rdi
   15610:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesKHR =
   15612:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15616:	48 89 82 00 0b 00 00 	mov    %rax,0xb00(%rdx)
          PFN_vkGetDeviceAccelerationStructureCompatibilityKHR( vkGetDeviceProcAddr( device, "vkGetDeviceAccelerationStructureCompatibilityKHR" ) );
   1561d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15621:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15625:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15629:	48 8d 0d a0 04 01 00 	lea    0x104a0(%rip),%rcx        # 25ad0 <_ZNSt8__detailL19__atomic_spin_countE+0x2e14>
   15630:	48 89 ce             	mov    %rcx,%rsi
   15633:	48 89 c7             	mov    %rax,%rdi
   15636:	ff d2                	call   *%rdx
        vkGetDeviceAccelerationStructureCompatibilityKHR =
   15638:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1563c:	48 89 82 08 0b 00 00 	mov    %rax,0xb08(%rdx)
          PFN_vkGetAccelerationStructureBuildSizesKHR( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureBuildSizesKHR" ) );
   15643:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15647:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1564b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1564f:	48 8d 0d b2 04 01 00 	lea    0x104b2(%rip),%rcx        # 25b08 <_ZNSt8__detailL19__atomic_spin_countE+0x2e4c>
   15656:	48 89 ce             	mov    %rcx,%rsi
   15659:	48 89 c7             	mov    %rax,%rdi
   1565c:	ff d2                	call   *%rdx
        vkGetAccelerationStructureBuildSizesKHR =
   1565e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15662:	48 89 82 10 0b 00 00 	mov    %rax,0xb10(%rdx)
        vkBindBufferMemory2KHR = PFN_vkBindBufferMemory2KHR( vkGetDeviceProcAddr( device, "vkBindBufferMemory2KHR" ) );
   15669:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1566d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15671:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15675:	48 8d 0d b4 04 01 00 	lea    0x104b4(%rip),%rcx        # 25b30 <_ZNSt8__detailL19__atomic_spin_countE+0x2e74>
   1567c:	48 89 ce             	mov    %rcx,%rsi
   1567f:	48 89 c7             	mov    %rax,%rdi
   15682:	ff d2                	call   *%rdx
   15684:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15688:	48 89 82 18 0b 00 00 	mov    %rax,0xb18(%rdx)
        if ( !vkBindBufferMemory2 )
   1568f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15693:	48 8b 80 d8 03 00 00 	mov    0x3d8(%rax),%rax
   1569a:	48 85 c0             	test   %rax,%rax
   1569d:	75 16                	jne    156b5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5309>
          vkBindBufferMemory2 = vkBindBufferMemory2KHR;
   1569f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156a3:	48 8b 90 18 0b 00 00 	mov    0xb18(%rax),%rdx
   156aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156ae:	48 89 90 d8 03 00 00 	mov    %rdx,0x3d8(%rax)
        vkBindImageMemory2KHR = PFN_vkBindImageMemory2KHR( vkGetDeviceProcAddr( device, "vkBindImageMemory2KHR" ) );
   156b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   156bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   156c1:	48 8d 0d 7f 04 01 00 	lea    0x1047f(%rip),%rcx        # 25b47 <_ZNSt8__detailL19__atomic_spin_countE+0x2e8b>
   156c8:	48 89 ce             	mov    %rcx,%rsi
   156cb:	48 89 c7             	mov    %rax,%rdi
   156ce:	ff d2                	call   *%rdx
   156d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   156d4:	48 89 82 20 0b 00 00 	mov    %rax,0xb20(%rdx)
        if ( !vkBindImageMemory2 )
   156db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156df:	48 8b 80 e0 03 00 00 	mov    0x3e0(%rax),%rax
   156e6:	48 85 c0             	test   %rax,%rax
   156e9:	75 16                	jne    15701 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5355>
          vkBindImageMemory2 = vkBindImageMemory2KHR;
   156eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156ef:	48 8b 90 20 0b 00 00 	mov    0xb20(%rax),%rdx
   156f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   156fa:	48 89 90 e0 03 00 00 	mov    %rdx,0x3e0(%rax)
        vkGetBufferDeviceAddressKHR = PFN_vkGetBufferDeviceAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferDeviceAddressKHR" ) );
   15701:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15705:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1570d:	48 8d 0d 49 04 01 00 	lea    0x10449(%rip),%rcx        # 25b5d <_ZNSt8__detailL19__atomic_spin_countE+0x2ea1>
   15714:	48 89 ce             	mov    %rcx,%rsi
   15717:	48 89 c7             	mov    %rax,%rdi
   1571a:	ff d2                	call   *%rdx
   1571c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15720:	48 89 82 28 0b 00 00 	mov    %rax,0xb28(%rdx)
        if ( !vkGetBufferDeviceAddress )
   15727:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1572b:	48 8b 80 a8 04 00 00 	mov    0x4a8(%rax),%rax
   15732:	48 85 c0             	test   %rax,%rax
   15735:	75 16                	jne    1574d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53a1>
          vkGetBufferDeviceAddress = vkGetBufferDeviceAddressKHR;
   15737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1573b:	48 8b 90 28 0b 00 00 	mov    0xb28(%rax),%rdx
   15742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15746:	48 89 90 a8 04 00 00 	mov    %rdx,0x4a8(%rax)
        vkGetBufferOpaqueCaptureAddressKHR = PFN_vkGetBufferOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetBufferOpaqueCaptureAddressKHR" ) );
   1574d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15751:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15759:	48 8d 0d 20 04 01 00 	lea    0x10420(%rip),%rcx        # 25b80 <_ZNSt8__detailL19__atomic_spin_countE+0x2ec4>
   15760:	48 89 ce             	mov    %rcx,%rsi
   15763:	48 89 c7             	mov    %rax,%rdi
   15766:	ff d2                	call   *%rdx
   15768:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1576c:	48 89 82 30 0b 00 00 	mov    %rax,0xb30(%rdx)
        if ( !vkGetBufferOpaqueCaptureAddress )
   15773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15777:	48 8b 80 b0 04 00 00 	mov    0x4b0(%rax),%rax
   1577e:	48 85 c0             	test   %rax,%rax
   15781:	75 16                	jne    15799 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x53ed>
          vkGetBufferOpaqueCaptureAddress = vkGetBufferOpaqueCaptureAddressKHR;
   15783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15787:	48 8b 90 30 0b 00 00 	mov    0xb30(%rax),%rdx
   1578e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15792:	48 89 90 b0 04 00 00 	mov    %rdx,0x4b0(%rax)
          PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR( vkGetDeviceProcAddr( device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR" ) );
   15799:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1579d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157a5:	48 8d 0d fc 03 01 00 	lea    0x103fc(%rip),%rcx        # 25ba8 <_ZNSt8__detailL19__atomic_spin_countE+0x2eec>
   157ac:	48 89 ce             	mov    %rcx,%rsi
   157af:	48 89 c7             	mov    %rax,%rdi
   157b2:	ff d2                	call   *%rdx
        vkGetDeviceMemoryOpaqueCaptureAddressKHR =
   157b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   157b8:	48 89 82 38 0b 00 00 	mov    %rax,0xb38(%rdx)
        if ( !vkGetDeviceMemoryOpaqueCaptureAddress )
   157bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157c3:	48 8b 80 b8 04 00 00 	mov    0x4b8(%rax),%rax
   157ca:	48 85 c0             	test   %rax,%rax
   157cd:	75 16                	jne    157e5 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5439>
          vkGetDeviceMemoryOpaqueCaptureAddress = vkGetDeviceMemoryOpaqueCaptureAddressKHR;
   157cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157d3:	48 8b 90 38 0b 00 00 	mov    0xb38(%rax),%rdx
   157da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157de:	48 89 90 b8 04 00 00 	mov    %rdx,0x4b8(%rax)
        vkCmdCopyBuffer2KHR = PFN_vkCmdCopyBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBuffer2KHR" ) );
   157e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   157e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   157ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   157f1:	48 8d 0d d9 03 01 00 	lea    0x103d9(%rip),%rcx        # 25bd1 <_ZNSt8__detailL19__atomic_spin_countE+0x2f15>
   157f8:	48 89 ce             	mov    %rcx,%rsi
   157fb:	48 89 c7             	mov    %rax,%rdi
   157fe:	ff d2                	call   *%rdx
   15800:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15804:	48 89 82 40 0b 00 00 	mov    %rax,0xb40(%rdx)
        if ( !vkCmdCopyBuffer2 )
   1580b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1580f:	48 8b 80 10 05 00 00 	mov    0x510(%rax),%rax
   15816:	48 85 c0             	test   %rax,%rax
   15819:	75 16                	jne    15831 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5485>
          vkCmdCopyBuffer2 = vkCmdCopyBuffer2KHR;
   1581b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1581f:	48 8b 90 40 0b 00 00 	mov    0xb40(%rax),%rdx
   15826:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1582a:	48 89 90 10 05 00 00 	mov    %rdx,0x510(%rax)
        vkCmdCopyImage2KHR = PFN_vkCmdCopyImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImage2KHR" ) );
   15831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15835:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1583d:	48 8d 0d a1 03 01 00 	lea    0x103a1(%rip),%rcx        # 25be5 <_ZNSt8__detailL19__atomic_spin_countE+0x2f29>
   15844:	48 89 ce             	mov    %rcx,%rsi
   15847:	48 89 c7             	mov    %rax,%rdi
   1584a:	ff d2                	call   *%rdx
   1584c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15850:	48 89 82 48 0b 00 00 	mov    %rax,0xb48(%rdx)
        if ( !vkCmdCopyImage2 )
   15857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1585b:	48 8b 80 18 05 00 00 	mov    0x518(%rax),%rax
   15862:	48 85 c0             	test   %rax,%rax
   15865:	75 16                	jne    1587d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x54d1>
          vkCmdCopyImage2 = vkCmdCopyImage2KHR;
   15867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1586b:	48 8b 90 48 0b 00 00 	mov    0xb48(%rax),%rdx
   15872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15876:	48 89 90 18 05 00 00 	mov    %rdx,0x518(%rax)
        vkCmdCopyBufferToImage2KHR = PFN_vkCmdCopyBufferToImage2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyBufferToImage2KHR" ) );
   1587d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15881:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15889:	48 8d 0d 68 03 01 00 	lea    0x10368(%rip),%rcx        # 25bf8 <_ZNSt8__detailL19__atomic_spin_countE+0x2f3c>
   15890:	48 89 ce             	mov    %rcx,%rsi
   15893:	48 89 c7             	mov    %rax,%rdi
   15896:	ff d2                	call   *%rdx
   15898:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1589c:	48 89 82 50 0b 00 00 	mov    %rax,0xb50(%rdx)
        if ( !vkCmdCopyBufferToImage2 )
   158a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158a7:	48 8b 80 20 05 00 00 	mov    0x520(%rax),%rax
   158ae:	48 85 c0             	test   %rax,%rax
   158b1:	75 16                	jne    158c9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x551d>
          vkCmdCopyBufferToImage2 = vkCmdCopyBufferToImage2KHR;
   158b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158b7:	48 8b 90 50 0b 00 00 	mov    0xb50(%rax),%rdx
   158be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158c2:	48 89 90 20 05 00 00 	mov    %rdx,0x520(%rax)
        vkCmdCopyImageToBuffer2KHR = PFN_vkCmdCopyImageToBuffer2KHR( vkGetDeviceProcAddr( device, "vkCmdCopyImageToBuffer2KHR" ) );
   158c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   158d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   158d5:	48 8d 0d 37 03 01 00 	lea    0x10337(%rip),%rcx        # 25c13 <_ZNSt8__detailL19__atomic_spin_countE+0x2f57>
   158dc:	48 89 ce             	mov    %rcx,%rsi
   158df:	48 89 c7             	mov    %rax,%rdi
   158e2:	ff d2                	call   *%rdx
   158e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   158e8:	48 89 82 58 0b 00 00 	mov    %rax,0xb58(%rdx)
        if ( !vkCmdCopyImageToBuffer2 )
   158ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   158f3:	48 8b 80 28 05 00 00 	mov    0x528(%rax),%rax
   158fa:	48 85 c0             	test   %rax,%rax
   158fd:	75 16                	jne    15915 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5569>
          vkCmdCopyImageToBuffer2 = vkCmdCopyImageToBuffer2KHR;
   158ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15903:	48 8b 90 58 0b 00 00 	mov    0xb58(%rax),%rdx
   1590a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1590e:	48 89 90 28 05 00 00 	mov    %rdx,0x528(%rax)
        vkCmdBlitImage2KHR = PFN_vkCmdBlitImage2KHR( vkGetDeviceProcAddr( device, "vkCmdBlitImage2KHR" ) );
   15915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15919:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1591d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15921:	48 8d 0d 06 03 01 00 	lea    0x10306(%rip),%rcx        # 25c2e <_ZNSt8__detailL19__atomic_spin_countE+0x2f72>
   15928:	48 89 ce             	mov    %rcx,%rsi
   1592b:	48 89 c7             	mov    %rax,%rdi
   1592e:	ff d2                	call   *%rdx
   15930:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15934:	48 89 82 60 0b 00 00 	mov    %rax,0xb60(%rdx)
        if ( !vkCmdBlitImage2 )
   1593b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1593f:	48 8b 80 30 05 00 00 	mov    0x530(%rax),%rax
   15946:	48 85 c0             	test   %rax,%rax
   15949:	75 16                	jne    15961 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x55b5>
          vkCmdBlitImage2 = vkCmdBlitImage2KHR;
   1594b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1594f:	48 8b 90 60 0b 00 00 	mov    0xb60(%rax),%rdx
   15956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1595a:	48 89 90 30 05 00 00 	mov    %rdx,0x530(%rax)
        vkCmdResolveImage2KHR = PFN_vkCmdResolveImage2KHR( vkGetDeviceProcAddr( device, "vkCmdResolveImage2KHR" ) );
   15961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15965:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15969:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1596d:	48 8d 0d cd 02 01 00 	lea    0x102cd(%rip),%rcx        # 25c41 <_ZNSt8__detailL19__atomic_spin_countE+0x2f85>
   15974:	48 89 ce             	mov    %rcx,%rsi
   15977:	48 89 c7             	mov    %rax,%rdi
   1597a:	ff d2                	call   *%rdx
   1597c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15980:	48 89 82 68 0b 00 00 	mov    %rax,0xb68(%rdx)
        if ( !vkCmdResolveImage2 )
   15987:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1598b:	48 8b 80 38 05 00 00 	mov    0x538(%rax),%rax
   15992:	48 85 c0             	test   %rax,%rax
   15995:	75 16                	jne    159ad <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5601>
          vkCmdResolveImage2 = vkCmdResolveImage2KHR;
   15997:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1599b:	48 8b 90 68 0b 00 00 	mov    0xb68(%rax),%rdx
   159a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159a6:	48 89 90 38 05 00 00 	mov    %rdx,0x538(%rax)
        vkCreateRenderPass2KHR = PFN_vkCreateRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCreateRenderPass2KHR" ) );
   159ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159b1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   159b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   159b9:	48 8d 0d 97 02 01 00 	lea    0x10297(%rip),%rcx        # 25c57 <_ZNSt8__detailL19__atomic_spin_countE+0x2f9b>
   159c0:	48 89 ce             	mov    %rcx,%rsi
   159c3:	48 89 c7             	mov    %rax,%rdi
   159c6:	ff d2                	call   *%rdx
   159c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   159cc:	48 89 82 70 0b 00 00 	mov    %rax,0xb70(%rdx)
        if ( !vkCreateRenderPass2 )
   159d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159d7:	48 8b 80 68 04 00 00 	mov    0x468(%rax),%rax
   159de:	48 85 c0             	test   %rax,%rax
   159e1:	75 16                	jne    159f9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x564d>
          vkCreateRenderPass2 = vkCreateRenderPass2KHR;
   159e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159e7:	48 8b 90 70 0b 00 00 	mov    0xb70(%rax),%rdx
   159ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159f2:	48 89 90 68 04 00 00 	mov    %rdx,0x468(%rax)
        vkCmdBeginRenderPass2KHR = PFN_vkCmdBeginRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderPass2KHR" ) );
   159f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   159fd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a05:	48 8d 0d 62 02 01 00 	lea    0x10262(%rip),%rcx        # 25c6e <_ZNSt8__detailL19__atomic_spin_countE+0x2fb2>
   15a0c:	48 89 ce             	mov    %rcx,%rsi
   15a0f:	48 89 c7             	mov    %rax,%rdi
   15a12:	ff d2                	call   *%rdx
   15a14:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a18:	48 89 82 78 0b 00 00 	mov    %rax,0xb78(%rdx)
        if ( !vkCmdBeginRenderPass2 )
   15a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a23:	48 8b 80 70 04 00 00 	mov    0x470(%rax),%rax
   15a2a:	48 85 c0             	test   %rax,%rax
   15a2d:	75 16                	jne    15a45 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5699>
          vkCmdBeginRenderPass2 = vkCmdBeginRenderPass2KHR;
   15a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a33:	48 8b 90 78 0b 00 00 	mov    0xb78(%rax),%rdx
   15a3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a3e:	48 89 90 70 04 00 00 	mov    %rdx,0x470(%rax)
        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, "vkCmdNextSubpass2KHR" ) );
   15a45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a49:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a51:	48 8d 0d 2f 02 01 00 	lea    0x1022f(%rip),%rcx        # 25c87 <_ZNSt8__detailL19__atomic_spin_countE+0x2fcb>
   15a58:	48 89 ce             	mov    %rcx,%rsi
   15a5b:	48 89 c7             	mov    %rax,%rdi
   15a5e:	ff d2                	call   *%rdx
   15a60:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15a64:	48 89 82 80 0b 00 00 	mov    %rax,0xb80(%rdx)
        if ( !vkCmdNextSubpass2 )
   15a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a6f:	48 8b 80 78 04 00 00 	mov    0x478(%rax),%rax
   15a76:	48 85 c0             	test   %rax,%rax
   15a79:	75 16                	jne    15a91 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x56e5>
          vkCmdNextSubpass2 = vkCmdNextSubpass2KHR;
   15a7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a7f:	48 8b 90 80 0b 00 00 	mov    0xb80(%rax),%rdx
   15a86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a8a:	48 89 90 78 04 00 00 	mov    %rdx,0x478(%rax)
        vkCmdEndRenderPass2KHR = PFN_vkCmdEndRenderPass2KHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderPass2KHR" ) );
   15a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a95:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15a99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15a9d:	48 8d 0d f8 01 01 00 	lea    0x101f8(%rip),%rcx        # 25c9c <_ZNSt8__detailL19__atomic_spin_countE+0x2fe0>
   15aa4:	48 89 ce             	mov    %rcx,%rsi
   15aa7:	48 89 c7             	mov    %rax,%rdi
   15aaa:	ff d2                	call   *%rdx
   15aac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ab0:	48 89 82 88 0b 00 00 	mov    %rax,0xb88(%rdx)
        if ( !vkCmdEndRenderPass2 )
   15ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15abb:	48 8b 80 80 04 00 00 	mov    0x480(%rax),%rax
   15ac2:	48 85 c0             	test   %rax,%rax
   15ac5:	75 16                	jne    15add <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5731>
          vkCmdEndRenderPass2 = vkCmdEndRenderPass2KHR;
   15ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15acb:	48 8b 90 88 0b 00 00 	mov    0xb88(%rax),%rdx
   15ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ad6:	48 89 90 80 04 00 00 	mov    %rdx,0x480(%rax)
        vkCreateDeferredOperationKHR  = PFN_vkCreateDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkCreateDeferredOperationKHR" ) );
   15add:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ae1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ae9:	48 8d 0d c3 01 01 00 	lea    0x101c3(%rip),%rcx        # 25cb3 <_ZNSt8__detailL19__atomic_spin_countE+0x2ff7>
   15af0:	48 89 ce             	mov    %rcx,%rsi
   15af3:	48 89 c7             	mov    %rax,%rdi
   15af6:	ff d2                	call   *%rdx
   15af8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15afc:	48 89 82 90 0b 00 00 	mov    %rax,0xb90(%rdx)
        vkDestroyDeferredOperationKHR = PFN_vkDestroyDeferredOperationKHR( vkGetDeviceProcAddr( device, "vkDestroyDeferredOperationKHR" ) );
   15b03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b07:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b0f:	48 8d 0d ba 01 01 00 	lea    0x101ba(%rip),%rcx        # 25cd0 <_ZNSt8__detailL19__atomic_spin_countE+0x3014>
   15b16:	48 89 ce             	mov    %rcx,%rsi
   15b19:	48 89 c7             	mov    %rax,%rdi
   15b1c:	ff d2                	call   *%rdx
   15b1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b22:	48 89 82 98 0b 00 00 	mov    %rax,0xb98(%rdx)
          PFN_vkGetDeferredOperationMaxConcurrencyKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationMaxConcurrencyKHR" ) );
   15b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b2d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b35:	48 8d 0d b4 01 01 00 	lea    0x101b4(%rip),%rcx        # 25cf0 <_ZNSt8__detailL19__atomic_spin_countE+0x3034>
   15b3c:	48 89 ce             	mov    %rcx,%rsi
   15b3f:	48 89 c7             	mov    %rax,%rdi
   15b42:	ff d2                	call   *%rdx
        vkGetDeferredOperationMaxConcurrencyKHR =
   15b44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b48:	48 89 82 a0 0b 00 00 	mov    %rax,0xba0(%rdx)
        vkGetDeferredOperationResultKHR = PFN_vkGetDeferredOperationResultKHR( vkGetDeviceProcAddr( device, "vkGetDeferredOperationResultKHR" ) );
   15b4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b53:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b5b:	48 8d 0d b6 01 01 00 	lea    0x101b6(%rip),%rcx        # 25d18 <_ZNSt8__detailL19__atomic_spin_countE+0x305c>
   15b62:	48 89 ce             	mov    %rcx,%rsi
   15b65:	48 89 c7             	mov    %rax,%rdi
   15b68:	ff d2                	call   *%rdx
   15b6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b6e:	48 89 82 a8 0b 00 00 	mov    %rax,0xba8(%rdx)
        vkDeferredOperationJoinKHR      = PFN_vkDeferredOperationJoinKHR( vkGetDeviceProcAddr( device, "vkDeferredOperationJoinKHR" ) );
   15b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b79:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15b7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15b81:	48 8d 0d b0 01 01 00 	lea    0x101b0(%rip),%rcx        # 25d38 <_ZNSt8__detailL19__atomic_spin_countE+0x307c>
   15b88:	48 89 ce             	mov    %rcx,%rsi
   15b8b:	48 89 c7             	mov    %rax,%rdi
   15b8e:	ff d2                	call   *%rdx
   15b90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b94:	48 89 82 b0 0b 00 00 	mov    %rax,0xbb0(%rdx)
        vkCreateDescriptorUpdateTemplateKHR = PFN_vkCreateDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkCreateDescriptorUpdateTemplateKHR" ) );
   15b9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ba7:	48 8d 0d aa 01 01 00 	lea    0x101aa(%rip),%rcx        # 25d58 <_ZNSt8__detailL19__atomic_spin_countE+0x309c>
   15bae:	48 89 ce             	mov    %rcx,%rsi
   15bb1:	48 89 c7             	mov    %rax,%rdi
   15bb4:	ff d2                	call   *%rdx
   15bb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15bba:	48 89 82 b8 0b 00 00 	mov    %rax,0xbb8(%rdx)
        if ( !vkCreateDescriptorUpdateTemplate )
   15bc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bc5:	48 8b 80 38 04 00 00 	mov    0x438(%rax),%rax
   15bcc:	48 85 c0             	test   %rax,%rax
   15bcf:	75 16                	jne    15be7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x583b>
          vkCreateDescriptorUpdateTemplate = vkCreateDescriptorUpdateTemplateKHR;
   15bd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15bd5:	48 8b 90 b8 0b 00 00 	mov    0xbb8(%rax),%rdx
   15bdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15be0:	48 89 90 38 04 00 00 	mov    %rdx,0x438(%rax)
          PFN_vkDestroyDescriptorUpdateTemplateKHR( vkGetDeviceProcAddr( device, "vkDestroyDescriptorUpdateTemplateKHR" ) );
   15be7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15beb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15bef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15bf3:	48 8d 0d 86 01 01 00 	lea    0x10186(%rip),%rcx        # 25d80 <_ZNSt8__detailL19__atomic_spin_countE+0x30c4>
   15bfa:	48 89 ce             	mov    %rcx,%rsi
   15bfd:	48 89 c7             	mov    %rax,%rdi
   15c00:	ff d2                	call   *%rdx
        vkDestroyDescriptorUpdateTemplateKHR =
   15c02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c06:	48 89 82 c0 0b 00 00 	mov    %rax,0xbc0(%rdx)
        if ( !vkDestroyDescriptorUpdateTemplate )
   15c0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c11:	48 8b 80 40 04 00 00 	mov    0x440(%rax),%rax
   15c18:	48 85 c0             	test   %rax,%rax
   15c1b:	75 16                	jne    15c33 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5887>
          vkDestroyDescriptorUpdateTemplate = vkDestroyDescriptorUpdateTemplateKHR;
   15c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c21:	48 8b 90 c0 0b 00 00 	mov    0xbc0(%rax),%rdx
   15c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c2c:	48 89 90 40 04 00 00 	mov    %rdx,0x440(%rax)
          PFN_vkUpdateDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkUpdateDescriptorSetWithTemplateKHR" ) );
   15c33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c37:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c3f:	48 8d 0d 62 01 01 00 	lea    0x10162(%rip),%rcx        # 25da8 <_ZNSt8__detailL19__atomic_spin_countE+0x30ec>
   15c46:	48 89 ce             	mov    %rcx,%rsi
   15c49:	48 89 c7             	mov    %rax,%rdi
   15c4c:	ff d2                	call   *%rdx
        vkUpdateDescriptorSetWithTemplateKHR =
   15c4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c52:	48 89 82 c8 0b 00 00 	mov    %rax,0xbc8(%rdx)
        if ( !vkUpdateDescriptorSetWithTemplate )
   15c59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c5d:	48 8b 80 48 04 00 00 	mov    0x448(%rax),%rax
   15c64:	48 85 c0             	test   %rax,%rax
   15c67:	75 16                	jne    15c7f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x58d3>
          vkUpdateDescriptorSetWithTemplate = vkUpdateDescriptorSetWithTemplateKHR;
   15c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c6d:	48 8b 90 c8 0b 00 00 	mov    0xbc8(%rax),%rdx
   15c74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c78:	48 89 90 48 04 00 00 	mov    %rdx,0x448(%rax)
          PFN_vkCmdPushDescriptorSetWithTemplateKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetWithTemplateKHR" ) );
   15c7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c83:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15c87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15c8b:	48 8d 0d 3e 01 01 00 	lea    0x1013e(%rip),%rcx        # 25dd0 <_ZNSt8__detailL19__atomic_spin_countE+0x3114>
   15c92:	48 89 ce             	mov    %rcx,%rsi
   15c95:	48 89 c7             	mov    %rax,%rdi
   15c98:	ff d2                	call   *%rdx
        vkCmdPushDescriptorSetWithTemplateKHR =
   15c9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15c9e:	48 89 82 d0 0b 00 00 	mov    %rax,0xbd0(%rdx)
          PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPeerMemoryFeaturesKHR" ) );
   15ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ca9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15cad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15cb1:	48 8d 0d 40 01 01 00 	lea    0x10140(%rip),%rcx        # 25df8 <_ZNSt8__detailL19__atomic_spin_countE+0x313c>
   15cb8:	48 89 ce             	mov    %rcx,%rsi
   15cbb:	48 89 c7             	mov    %rax,%rdi
   15cbe:	ff d2                	call   *%rdx
        vkGetDeviceGroupPeerMemoryFeaturesKHR =
   15cc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15cc4:	48 89 82 d8 0b 00 00 	mov    %rax,0xbd8(%rdx)
        if ( !vkGetDeviceGroupPeerMemoryFeatures )
   15ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ccf:	48 8b 80 e8 03 00 00 	mov    0x3e8(%rax),%rax
   15cd6:	48 85 c0             	test   %rax,%rax
   15cd9:	75 16                	jne    15cf1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5945>
          vkGetDeviceGroupPeerMemoryFeatures = vkGetDeviceGroupPeerMemoryFeaturesKHR;
   15cdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cdf:	48 8b 90 d8 0b 00 00 	mov    0xbd8(%rax),%rdx
   15ce6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cea:	48 89 90 e8 03 00 00 	mov    %rdx,0x3e8(%rax)
        vkCmdSetDeviceMaskKHR = PFN_vkCmdSetDeviceMaskKHR( vkGetDeviceProcAddr( device, "vkCmdSetDeviceMaskKHR" ) );
   15cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15cf5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15cf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15cfd:	48 8d 0d 1a 01 01 00 	lea    0x1011a(%rip),%rcx        # 25e1e <_ZNSt8__detailL19__atomic_spin_countE+0x3162>
   15d04:	48 89 ce             	mov    %rcx,%rsi
   15d07:	48 89 c7             	mov    %rax,%rdi
   15d0a:	ff d2                	call   *%rdx
   15d0c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d10:	48 89 82 e0 0b 00 00 	mov    %rax,0xbe0(%rdx)
        if ( !vkCmdSetDeviceMask )
   15d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d1b:	48 8b 80 f0 03 00 00 	mov    0x3f0(%rax),%rax
   15d22:	48 85 c0             	test   %rax,%rax
   15d25:	75 16                	jne    15d3d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5991>
          vkCmdSetDeviceMask = vkCmdSetDeviceMaskKHR;
   15d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d2b:	48 8b 90 e0 0b 00 00 	mov    0xbe0(%rax),%rdx
   15d32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d36:	48 89 90 f0 03 00 00 	mov    %rdx,0x3f0(%rax)
        vkCmdDispatchBaseKHR = PFN_vkCmdDispatchBaseKHR( vkGetDeviceProcAddr( device, "vkCmdDispatchBaseKHR" ) );
   15d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d41:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d49:	48 8d 0d e4 00 01 00 	lea    0x100e4(%rip),%rcx        # 25e34 <_ZNSt8__detailL19__atomic_spin_countE+0x3178>
   15d50:	48 89 ce             	mov    %rcx,%rsi
   15d53:	48 89 c7             	mov    %rax,%rdi
   15d56:	ff d2                	call   *%rdx
   15d58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15d5c:	48 89 82 e8 0b 00 00 	mov    %rax,0xbe8(%rdx)
        if ( !vkCmdDispatchBase )
   15d63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d67:	48 8b 80 f8 03 00 00 	mov    0x3f8(%rax),%rax
   15d6e:	48 85 c0             	test   %rax,%rax
   15d71:	75 16                	jne    15d89 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x59dd>
          vkCmdDispatchBase = vkCmdDispatchBaseKHR;
   15d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d77:	48 8b 90 e8 0b 00 00 	mov    0xbe8(%rax),%rdx
   15d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d82:	48 89 90 f8 03 00 00 	mov    %rdx,0x3f8(%rax)
          PFN_vkGetDeviceGroupPresentCapabilitiesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupPresentCapabilitiesKHR" ) );
   15d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15d91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15d95:	48 8d 0d b4 00 01 00 	lea    0x100b4(%rip),%rcx        # 25e50 <_ZNSt8__detailL19__atomic_spin_countE+0x3194>
   15d9c:	48 89 ce             	mov    %rcx,%rsi
   15d9f:	48 89 c7             	mov    %rax,%rdi
   15da2:	ff d2                	call   *%rdx
        vkGetDeviceGroupPresentCapabilitiesKHR =
   15da4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15da8:	48 89 82 f0 0b 00 00 	mov    %rax,0xbf0(%rdx)
          PFN_vkGetDeviceGroupSurfacePresentModesKHR( vkGetDeviceProcAddr( device, "vkGetDeviceGroupSurfacePresentModesKHR" ) );
   15daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15db3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15db7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15dbb:	48 8d 0d b6 00 01 00 	lea    0x100b6(%rip),%rcx        # 25e78 <_ZNSt8__detailL19__atomic_spin_countE+0x31bc>
   15dc2:	48 89 ce             	mov    %rcx,%rsi
   15dc5:	48 89 c7             	mov    %rax,%rdi
   15dc8:	ff d2                	call   *%rdx
        vkGetDeviceGroupSurfacePresentModesKHR =
   15dca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15dce:	48 89 82 f8 0b 00 00 	mov    %rax,0xbf8(%rdx)
        vkAcquireNextImage2KHR = PFN_vkAcquireNextImage2KHR( vkGetDeviceProcAddr( device, "vkAcquireNextImage2KHR" ) );
   15dd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15dd9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15de1:	48 8d 0d b7 00 01 00 	lea    0x100b7(%rip),%rcx        # 25e9f <_ZNSt8__detailL19__atomic_spin_countE+0x31e3>
   15de8:	48 89 ce             	mov    %rcx,%rsi
   15deb:	48 89 c7             	mov    %rax,%rdi
   15dee:	ff d2                	call   *%rdx
   15df0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15df4:	48 89 82 00 0c 00 00 	mov    %rax,0xc00(%rdx)
        vkCreateSharedSwapchainsKHR = PFN_vkCreateSharedSwapchainsKHR( vkGetDeviceProcAddr( device, "vkCreateSharedSwapchainsKHR" ) );
   15dfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15dff:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e07:	48 8d 0d a8 00 01 00 	lea    0x100a8(%rip),%rcx        # 25eb6 <_ZNSt8__detailL19__atomic_spin_countE+0x31fa>
   15e0e:	48 89 ce             	mov    %rcx,%rsi
   15e11:	48 89 c7             	mov    %rax,%rdi
   15e14:	ff d2                	call   *%rdx
   15e16:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e1a:	48 89 82 08 0c 00 00 	mov    %rax,0xc08(%rdx)
        vkCmdDrawIndirectCountKHR = PFN_vkCmdDrawIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndirectCountKHR" ) );
   15e21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e25:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e2d:	48 8d 0d 9e 00 01 00 	lea    0x1009e(%rip),%rcx        # 25ed2 <_ZNSt8__detailL19__atomic_spin_countE+0x3216>
   15e34:	48 89 ce             	mov    %rcx,%rsi
   15e37:	48 89 c7             	mov    %rax,%rdi
   15e3a:	ff d2                	call   *%rdx
   15e3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e40:	48 89 82 10 0c 00 00 	mov    %rax,0xc10(%rdx)
        if ( !vkCmdDrawIndirectCount )
   15e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e4b:	48 8b 80 58 04 00 00 	mov    0x458(%rax),%rax
   15e52:	48 85 c0             	test   %rax,%rax
   15e55:	75 16                	jne    15e6d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ac1>
          vkCmdDrawIndirectCount = vkCmdDrawIndirectCountKHR;
   15e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e5b:	48 8b 90 10 0c 00 00 	mov    0xc10(%rax),%rdx
   15e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e66:	48 89 90 58 04 00 00 	mov    %rdx,0x458(%rax)
        vkCmdDrawIndexedIndirectCountKHR = PFN_vkCmdDrawIndexedIndirectCountKHR( vkGetDeviceProcAddr( device, "vkCmdDrawIndexedIndirectCountKHR" ) );
   15e6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e71:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15e79:	48 8d 0d 70 00 01 00 	lea    0x10070(%rip),%rcx        # 25ef0 <_ZNSt8__detailL19__atomic_spin_countE+0x3234>
   15e80:	48 89 ce             	mov    %rcx,%rsi
   15e83:	48 89 c7             	mov    %rax,%rdi
   15e86:	ff d2                	call   *%rdx
   15e88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15e8c:	48 89 82 18 0c 00 00 	mov    %rax,0xc18(%rdx)
        if ( !vkCmdDrawIndexedIndirectCount )
   15e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e97:	48 8b 80 60 04 00 00 	mov    0x460(%rax),%rax
   15e9e:	48 85 c0             	test   %rax,%rax
   15ea1:	75 16                	jne    15eb9 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b0d>
          vkCmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCountKHR;
   15ea3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ea7:	48 8b 90 18 0c 00 00 	mov    0xc18(%rax),%rdx
   15eae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15eb2:	48 89 90 60 04 00 00 	mov    %rdx,0x460(%rax)
        vkCmdBeginRenderingKHR = PFN_vkCmdBeginRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdBeginRenderingKHR" ) );
   15eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ebd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ec5:	48 8d 0d 45 00 01 00 	lea    0x10045(%rip),%rcx        # 25f11 <_ZNSt8__detailL19__atomic_spin_countE+0x3255>
   15ecc:	48 89 ce             	mov    %rcx,%rsi
   15ecf:	48 89 c7             	mov    %rax,%rdi
   15ed2:	ff d2                	call   *%rdx
   15ed4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15ed8:	48 89 82 20 0c 00 00 	mov    %rax,0xc20(%rdx)
        if ( !vkCmdBeginRendering )
   15edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ee3:	48 8b 80 40 05 00 00 	mov    0x540(%rax),%rax
   15eea:	48 85 c0             	test   %rax,%rax
   15eed:	75 16                	jne    15f05 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5b59>
          vkCmdBeginRendering = vkCmdBeginRenderingKHR;
   15eef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ef3:	48 8b 90 20 0c 00 00 	mov    0xc20(%rax),%rdx
   15efa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15efe:	48 89 90 40 05 00 00 	mov    %rdx,0x540(%rax)
        vkCmdEndRenderingKHR = PFN_vkCmdEndRenderingKHR( vkGetDeviceProcAddr( device, "vkCmdEndRenderingKHR" ) );
   15f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f09:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f11:	48 8d 0d 10 00 01 00 	lea    0x10010(%rip),%rcx        # 25f28 <_ZNSt8__detailL19__atomic_spin_countE+0x326c>
   15f18:	48 89 ce             	mov    %rcx,%rsi
   15f1b:	48 89 c7             	mov    %rax,%rdi
   15f1e:	ff d2                	call   *%rdx
   15f20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f24:	48 89 82 28 0c 00 00 	mov    %rax,0xc28(%rdx)
        if ( !vkCmdEndRendering )
   15f2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f2f:	48 8b 80 48 05 00 00 	mov    0x548(%rax),%rax
   15f36:	48 85 c0             	test   %rax,%rax
   15f39:	75 16                	jne    15f51 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ba5>
          vkCmdEndRendering = vkCmdEndRenderingKHR;
   15f3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f3f:	48 8b 90 28 0c 00 00 	mov    0xc28(%rax),%rdx
   15f46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f4a:	48 89 90 48 05 00 00 	mov    %rdx,0x548(%rax)
        vkImportFenceFdKHR = PFN_vkImportFenceFdKHR( vkGetDeviceProcAddr( device, "vkImportFenceFdKHR" ) );
   15f51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f55:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f5d:	48 8d 0d d9 ff 00 00 	lea    0xffd9(%rip),%rcx        # 25f3d <_ZNSt8__detailL19__atomic_spin_countE+0x3281>
   15f64:	48 89 ce             	mov    %rcx,%rsi
   15f67:	48 89 c7             	mov    %rax,%rdi
   15f6a:	ff d2                	call   *%rdx
   15f6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f70:	48 89 82 30 0c 00 00 	mov    %rax,0xc30(%rdx)
        vkGetFenceFdKHR    = PFN_vkGetFenceFdKHR( vkGetDeviceProcAddr( device, "vkGetFenceFdKHR" ) );
   15f77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15f7b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15f83:	48 8d 0d c6 ff 00 00 	lea    0xffc6(%rip),%rcx        # 25f50 <_ZNSt8__detailL19__atomic_spin_countE+0x3294>
   15f8a:	48 89 ce             	mov    %rcx,%rsi
   15f8d:	48 89 c7             	mov    %rax,%rdi
   15f90:	ff d2                	call   *%rdx
   15f92:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15f96:	48 89 82 38 0c 00 00 	mov    %rax,0xc38(%rdx)
        vkGetMemoryFdKHR           = PFN_vkGetMemoryFdKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdKHR" ) );
   15f9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fa1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15fa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15fa9:	48 8d 0d b0 ff 00 00 	lea    0xffb0(%rip),%rcx        # 25f60 <_ZNSt8__detailL19__atomic_spin_countE+0x32a4>
   15fb0:	48 89 ce             	mov    %rcx,%rsi
   15fb3:	48 89 c7             	mov    %rax,%rdi
   15fb6:	ff d2                	call   *%rdx
   15fb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15fbc:	48 89 82 50 0c 00 00 	mov    %rax,0xc50(%rdx)
        vkGetMemoryFdPropertiesKHR = PFN_vkGetMemoryFdPropertiesKHR( vkGetDeviceProcAddr( device, "vkGetMemoryFdPropertiesKHR" ) );
   15fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fc7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15fcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15fcf:	48 8d 0d 9b ff 00 00 	lea    0xff9b(%rip),%rcx        # 25f71 <_ZNSt8__detailL19__atomic_spin_countE+0x32b5>
   15fd6:	48 89 ce             	mov    %rcx,%rsi
   15fd9:	48 89 c7             	mov    %rax,%rdi
   15fdc:	ff d2                	call   *%rdx
   15fde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15fe2:	48 89 82 58 0c 00 00 	mov    %rax,0xc58(%rdx)
        vkImportSemaphoreFdKHR = PFN_vkImportSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkImportSemaphoreFdKHR" ) );
   15fe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15fed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   15ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15ff5:	48 8d 0d 90 ff 00 00 	lea    0xff90(%rip),%rcx        # 25f8c <_ZNSt8__detailL19__atomic_spin_countE+0x32d0>
   15ffc:	48 89 ce             	mov    %rcx,%rsi
   15fff:	48 89 c7             	mov    %rax,%rdi
   16002:	ff d2                	call   *%rdx
   16004:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16008:	48 89 82 70 0c 00 00 	mov    %rax,0xc70(%rdx)
        vkGetSemaphoreFdKHR    = PFN_vkGetSemaphoreFdKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreFdKHR" ) );
   1600f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16013:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16017:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1601b:	48 8d 0d 81 ff 00 00 	lea    0xff81(%rip),%rcx        # 25fa3 <_ZNSt8__detailL19__atomic_spin_countE+0x32e7>
   16022:	48 89 ce             	mov    %rcx,%rsi
   16025:	48 89 c7             	mov    %rax,%rdi
   16028:	ff d2                	call   *%rdx
   1602a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1602e:	48 89 82 78 0c 00 00 	mov    %rax,0xc78(%rdx)
        vkCmdSetFragmentShadingRateKHR = PFN_vkCmdSetFragmentShadingRateKHR( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateKHR" ) );
   16035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16039:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1603d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16041:	48 8d 0d 70 ff 00 00 	lea    0xff70(%rip),%rcx        # 25fb8 <_ZNSt8__detailL19__atomic_spin_countE+0x32fc>
   16048:	48 89 ce             	mov    %rcx,%rsi
   1604b:	48 89 c7             	mov    %rax,%rdi
   1604e:	ff d2                	call   *%rdx
   16050:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16054:	48 89 82 90 0c 00 00 	mov    %rax,0xc90(%rdx)
        vkGetImageMemoryRequirements2KHR = PFN_vkGetImageMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageMemoryRequirements2KHR" ) );
   1605b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1605f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16067:	48 8d 0d 6a ff 00 00 	lea    0xff6a(%rip),%rcx        # 25fd8 <_ZNSt8__detailL19__atomic_spin_countE+0x331c>
   1606e:	48 89 ce             	mov    %rcx,%rsi
   16071:	48 89 c7             	mov    %rax,%rdi
   16074:	ff d2                	call   *%rdx
   16076:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1607a:	48 89 82 98 0c 00 00 	mov    %rax,0xc98(%rdx)
        if ( !vkGetImageMemoryRequirements2 )
   16081:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16085:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
   1608c:	48 85 c0             	test   %rax,%rax
   1608f:	75 16                	jne    160a7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5cfb>
          vkGetImageMemoryRequirements2 = vkGetImageMemoryRequirements2KHR;
   16091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16095:	48 8b 90 98 0c 00 00 	mov    0xc98(%rax),%rdx
   1609c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160a0:	48 89 90 00 04 00 00 	mov    %rdx,0x400(%rax)
        vkGetBufferMemoryRequirements2KHR = PFN_vkGetBufferMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetBufferMemoryRequirements2KHR" ) );
   160a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
   160af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   160b3:	48 8d 0d 46 ff 00 00 	lea    0xff46(%rip),%rcx        # 26000 <_ZNSt8__detailL19__atomic_spin_countE+0x3344>
   160ba:	48 89 ce             	mov    %rcx,%rsi
   160bd:	48 89 c7             	mov    %rax,%rdi
   160c0:	ff d2                	call   *%rdx
   160c2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   160c6:	48 89 82 a0 0c 00 00 	mov    %rax,0xca0(%rdx)
        if ( !vkGetBufferMemoryRequirements2 )
   160cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160d1:	48 8b 80 08 04 00 00 	mov    0x408(%rax),%rax
   160d8:	48 85 c0             	test   %rax,%rax
   160db:	75 16                	jne    160f3 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d47>
          vkGetBufferMemoryRequirements2 = vkGetBufferMemoryRequirements2KHR;
   160dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160e1:	48 8b 90 a0 0c 00 00 	mov    0xca0(%rax),%rdx
   160e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160ec:	48 89 90 08 04 00 00 	mov    %rdx,0x408(%rax)
          PFN_vkGetImageSparseMemoryRequirements2KHR( vkGetDeviceProcAddr( device, "vkGetImageSparseMemoryRequirements2KHR" ) );
   160f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   160f7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   160fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   160ff:	48 8d 0d 22 ff 00 00 	lea    0xff22(%rip),%rcx        # 26028 <_ZNSt8__detailL19__atomic_spin_countE+0x336c>
   16106:	48 89 ce             	mov    %rcx,%rsi
   16109:	48 89 c7             	mov    %rax,%rdi
   1610c:	ff d2                	call   *%rdx
        vkGetImageSparseMemoryRequirements2KHR =
   1610e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16112:	48 89 82 a8 0c 00 00 	mov    %rax,0xca8(%rdx)
        if ( !vkGetImageSparseMemoryRequirements2 )
   16119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1611d:	48 8b 80 10 04 00 00 	mov    0x410(%rax),%rax
   16124:	48 85 c0             	test   %rax,%rax
   16127:	75 16                	jne    1613f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5d93>
          vkGetImageSparseMemoryRequirements2 = vkGetImageSparseMemoryRequirements2KHR;
   16129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1612d:	48 8b 90 a8 0c 00 00 	mov    0xca8(%rax),%rdx
   16134:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16138:	48 89 90 10 04 00 00 	mov    %rdx,0x410(%rax)
        vkTrimCommandPoolKHR = PFN_vkTrimCommandPoolKHR( vkGetDeviceProcAddr( device, "vkTrimCommandPoolKHR" ) );
   1613f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16143:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1614b:	48 8d 0d fd fe 00 00 	lea    0xfefd(%rip),%rcx        # 2604f <_ZNSt8__detailL19__atomic_spin_countE+0x3393>
   16152:	48 89 ce             	mov    %rcx,%rsi
   16155:	48 89 c7             	mov    %rax,%rdi
   16158:	ff d2                	call   *%rdx
   1615a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1615e:	48 89 82 b0 0c 00 00 	mov    %rax,0xcb0(%rdx)
        if ( !vkTrimCommandPool )
   16165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16169:	48 8b 80 18 04 00 00 	mov    0x418(%rax),%rax
   16170:	48 85 c0             	test   %rax,%rax
   16173:	75 16                	jne    1618b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ddf>
          vkTrimCommandPool = vkTrimCommandPoolKHR;
   16175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16179:	48 8b 90 b0 0c 00 00 	mov    0xcb0(%rax),%rdx
   16180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16184:	48 89 90 18 04 00 00 	mov    %rdx,0x418(%rax)
        vkGetDescriptorSetLayoutSupportKHR = PFN_vkGetDescriptorSetLayoutSupportKHR( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutSupportKHR" ) );
   1618b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1618f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16197:	48 8d 0d ca fe 00 00 	lea    0xfeca(%rip),%rcx        # 26068 <_ZNSt8__detailL19__atomic_spin_countE+0x33ac>
   1619e:	48 89 ce             	mov    %rcx,%rsi
   161a1:	48 89 c7             	mov    %rax,%rdi
   161a4:	ff d2                	call   *%rdx
   161a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   161aa:	48 89 82 b8 0c 00 00 	mov    %rax,0xcb8(%rdx)
        if ( !vkGetDescriptorSetLayoutSupport )
   161b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161b5:	48 8b 80 50 04 00 00 	mov    0x450(%rax),%rax
   161bc:	48 85 c0             	test   %rax,%rax
   161bf:	75 16                	jne    161d7 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e2b>
          vkGetDescriptorSetLayoutSupport = vkGetDescriptorSetLayoutSupportKHR;
   161c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161c5:	48 8b 90 b8 0c 00 00 	mov    0xcb8(%rax),%rdx
   161cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161d0:	48 89 90 50 04 00 00 	mov    %rdx,0x450(%rax)
          PFN_vkGetDeviceBufferMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceBufferMemoryRequirementsKHR" ) );
   161d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   161db:	48 8b 50 10          	mov    0x10(%rax),%rdx
   161df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   161e3:	48 8d 0d a6 fe 00 00 	lea    0xfea6(%rip),%rcx        # 26090 <_ZNSt8__detailL19__atomic_spin_countE+0x33d4>
   161ea:	48 89 ce             	mov    %rcx,%rsi
   161ed:	48 89 c7             	mov    %rax,%rdi
   161f0:	ff d2                	call   *%rdx
        vkGetDeviceBufferMemoryRequirementsKHR =
   161f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   161f6:	48 89 82 c0 0c 00 00 	mov    %rax,0xcc0(%rdx)
        if ( !vkGetDeviceBufferMemoryRequirements )
   161fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16201:	48 8b 80 c8 05 00 00 	mov    0x5c8(%rax),%rax
   16208:	48 85 c0             	test   %rax,%rax
   1620b:	75 16                	jne    16223 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5e77>
          vkGetDeviceBufferMemoryRequirements = vkGetDeviceBufferMemoryRequirementsKHR;
   1620d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16211:	48 8b 90 c0 0c 00 00 	mov    0xcc0(%rax),%rdx
   16218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1621c:	48 89 90 c8 05 00 00 	mov    %rdx,0x5c8(%rax)
          PFN_vkGetDeviceImageMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageMemoryRequirementsKHR" ) );
   16223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16227:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1622b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1622f:	48 8d 0d 82 fe 00 00 	lea    0xfe82(%rip),%rcx        # 260b8 <_ZNSt8__detailL19__atomic_spin_countE+0x33fc>
   16236:	48 89 ce             	mov    %rcx,%rsi
   16239:	48 89 c7             	mov    %rax,%rdi
   1623c:	ff d2                	call   *%rdx
        vkGetDeviceImageMemoryRequirementsKHR =
   1623e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16242:	48 89 82 c8 0c 00 00 	mov    %rax,0xcc8(%rdx)
        if ( !vkGetDeviceImageMemoryRequirements )
   16249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1624d:	48 8b 80 d0 05 00 00 	mov    0x5d0(%rax),%rax
   16254:	48 85 c0             	test   %rax,%rax
   16257:	75 16                	jne    1626f <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5ec3>
          vkGetDeviceImageMemoryRequirements = vkGetDeviceImageMemoryRequirementsKHR;
   16259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1625d:	48 8b 90 c8 0c 00 00 	mov    0xcc8(%rax),%rdx
   16264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16268:	48 89 90 d0 05 00 00 	mov    %rdx,0x5d0(%rax)
          PFN_vkGetDeviceImageSparseMemoryRequirementsKHR( vkGetDeviceProcAddr( device, "vkGetDeviceImageSparseMemoryRequirementsKHR" ) );
   1626f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16273:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16277:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1627b:	48 8d 0d 5e fe 00 00 	lea    0xfe5e(%rip),%rcx        # 260e0 <_ZNSt8__detailL19__atomic_spin_countE+0x3424>
   16282:	48 89 ce             	mov    %rcx,%rsi
   16285:	48 89 c7             	mov    %rax,%rdi
   16288:	ff d2                	call   *%rdx
        vkGetDeviceImageSparseMemoryRequirementsKHR =
   1628a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1628e:	48 89 82 d0 0c 00 00 	mov    %rax,0xcd0(%rdx)
        if ( !vkGetDeviceImageSparseMemoryRequirements )
   16295:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16299:	48 8b 80 d8 05 00 00 	mov    0x5d8(%rax),%rax
   162a0:	48 85 c0             	test   %rax,%rax
   162a3:	75 16                	jne    162bb <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x5f0f>
          vkGetDeviceImageSparseMemoryRequirements = vkGetDeviceImageSparseMemoryRequirementsKHR;
   162a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162a9:	48 8b 90 d0 0c 00 00 	mov    0xcd0(%rax),%rdx
   162b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162b4:	48 89 90 d8 05 00 00 	mov    %rdx,0x5d8(%rax)
        vkAcquireProfilingLockKHR = PFN_vkAcquireProfilingLockKHR( vkGetDeviceProcAddr( device, "vkAcquireProfilingLockKHR" ) );
   162bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162bf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   162c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162c7:	48 8d 0d 3e fe 00 00 	lea    0xfe3e(%rip),%rcx        # 2610c <_ZNSt8__detailL19__atomic_spin_countE+0x3450>
   162ce:	48 89 ce             	mov    %rcx,%rsi
   162d1:	48 89 c7             	mov    %rax,%rdi
   162d4:	ff d2                	call   *%rdx
   162d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   162da:	48 89 82 d8 0c 00 00 	mov    %rax,0xcd8(%rdx)
        vkReleaseProfilingLockKHR = PFN_vkReleaseProfilingLockKHR( vkGetDeviceProcAddr( device, "vkReleaseProfilingLockKHR" ) );
   162e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   162e5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   162e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   162ed:	48 8d 0d 32 fe 00 00 	lea    0xfe32(%rip),%rcx        # 26126 <_ZNSt8__detailL19__atomic_spin_countE+0x346a>
   162f4:	48 89 ce             	mov    %rcx,%rsi
   162f7:	48 89 c7             	mov    %rax,%rdi
   162fa:	ff d2                	call   *%rdx
   162fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16300:	48 89 82 e0 0c 00 00 	mov    %rax,0xce0(%rdx)
          PFN_vkGetPipelineExecutablePropertiesKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutablePropertiesKHR" ) );
   16307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1630b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1630f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16313:	48 8d 0d 26 fe 00 00 	lea    0xfe26(%rip),%rcx        # 26140 <_ZNSt8__detailL19__atomic_spin_countE+0x3484>
   1631a:	48 89 ce             	mov    %rcx,%rsi
   1631d:	48 89 c7             	mov    %rax,%rdi
   16320:	ff d2                	call   *%rdx
        vkGetPipelineExecutablePropertiesKHR =
   16322:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16326:	48 89 82 e8 0c 00 00 	mov    %rax,0xce8(%rdx)
          PFN_vkGetPipelineExecutableStatisticsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableStatisticsKHR" ) );
   1632d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16331:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16339:	48 8d 0d 28 fe 00 00 	lea    0xfe28(%rip),%rcx        # 26168 <_ZNSt8__detailL19__atomic_spin_countE+0x34ac>
   16340:	48 89 ce             	mov    %rcx,%rsi
   16343:	48 89 c7             	mov    %rax,%rdi
   16346:	ff d2                	call   *%rdx
        vkGetPipelineExecutableStatisticsKHR =
   16348:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1634c:	48 89 82 f0 0c 00 00 	mov    %rax,0xcf0(%rdx)
          PFN_vkGetPipelineExecutableInternalRepresentationsKHR( vkGetDeviceProcAddr( device, "vkGetPipelineExecutableInternalRepresentationsKHR" ) );
   16353:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16357:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1635b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1635f:	48 8d 0d 2a fe 00 00 	lea    0xfe2a(%rip),%rcx        # 26190 <_ZNSt8__detailL19__atomic_spin_countE+0x34d4>
   16366:	48 89 ce             	mov    %rcx,%rsi
   16369:	48 89 c7             	mov    %rax,%rdi
   1636c:	ff d2                	call   *%rdx
        vkGetPipelineExecutableInternalRepresentationsKHR =
   1636e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16372:	48 89 82 f8 0c 00 00 	mov    %rax,0xcf8(%rdx)
        vkWaitForPresentKHR = PFN_vkWaitForPresentKHR( vkGetDeviceProcAddr( device, "vkWaitForPresentKHR" ) );
   16379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1637d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16381:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16385:	48 8d 0d 36 fe 00 00 	lea    0xfe36(%rip),%rcx        # 261c2 <_ZNSt8__detailL19__atomic_spin_countE+0x3506>
   1638c:	48 89 ce             	mov    %rcx,%rsi
   1638f:	48 89 c7             	mov    %rax,%rdi
   16392:	ff d2                	call   *%rdx
   16394:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16398:	48 89 82 00 0d 00 00 	mov    %rax,0xd00(%rdx)
        vkCmdPushDescriptorSetKHR = PFN_vkCmdPushDescriptorSetKHR( vkGetDeviceProcAddr( device, "vkCmdPushDescriptorSetKHR" ) );
   1639f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   163a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163ab:	48 8d 0d 24 fe 00 00 	lea    0xfe24(%rip),%rcx        # 261d6 <_ZNSt8__detailL19__atomic_spin_countE+0x351a>
   163b2:	48 89 ce             	mov    %rcx,%rsi
   163b5:	48 89 c7             	mov    %rax,%rdi
   163b8:	ff d2                	call   *%rdx
   163ba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   163be:	48 89 82 08 0d 00 00 	mov    %rax,0xd08(%rdx)
        vkCmdTraceRaysIndirect2KHR = PFN_vkCmdTraceRaysIndirect2KHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirect2KHR" ) );
   163c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163c9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   163cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163d1:	48 8d 0d 18 fe 00 00 	lea    0xfe18(%rip),%rcx        # 261f0 <_ZNSt8__detailL19__atomic_spin_countE+0x3534>
   163d8:	48 89 ce             	mov    %rcx,%rsi
   163db:	48 89 c7             	mov    %rax,%rdi
   163de:	ff d2                	call   *%rdx
   163e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   163e4:	48 89 82 10 0d 00 00 	mov    %rax,0xd10(%rdx)
        vkCmdTraceRaysKHR              = PFN_vkCmdTraceRaysKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysKHR" ) );
   163eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   163ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
   163f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   163f7:	48 8d 0d 0d fe 00 00 	lea    0xfe0d(%rip),%rcx        # 2620b <_ZNSt8__detailL19__atomic_spin_countE+0x354f>
   163fe:	48 89 ce             	mov    %rcx,%rsi
   16401:	48 89 c7             	mov    %rax,%rdi
   16404:	ff d2                	call   *%rdx
   16406:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1640a:	48 89 82 18 0d 00 00 	mov    %rax,0xd18(%rdx)
        vkCreateRayTracingPipelinesKHR = PFN_vkCreateRayTracingPipelinesKHR( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesKHR" ) );
   16411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16415:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16419:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1641d:	48 8d 0d fc fd 00 00 	lea    0xfdfc(%rip),%rcx        # 26220 <_ZNSt8__detailL19__atomic_spin_countE+0x3564>
   16424:	48 89 ce             	mov    %rcx,%rsi
   16427:	48 89 c7             	mov    %rax,%rdi
   1642a:	ff d2                	call   *%rdx
   1642c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16430:	48 89 82 20 0d 00 00 	mov    %rax,0xd20(%rdx)
          PFN_vkGetRayTracingShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesKHR" ) );
   16437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1643b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1643f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16443:	48 8d 0d f6 fd 00 00 	lea    0xfdf6(%rip),%rcx        # 26240 <_ZNSt8__detailL19__atomic_spin_countE+0x3584>
   1644a:	48 89 ce             	mov    %rcx,%rsi
   1644d:	48 89 c7             	mov    %rax,%rdi
   16450:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupHandlesKHR =
   16452:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16456:	48 89 82 28 0d 00 00 	mov    %rax,0xd28(%rdx)
          PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" ) );
   1645d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16461:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16469:	48 8d 0d f8 fd 00 00 	lea    0xfdf8(%rip),%rcx        # 26268 <_ZNSt8__detailL19__atomic_spin_countE+0x35ac>
   16470:	48 89 ce             	mov    %rcx,%rsi
   16473:	48 89 c7             	mov    %rax,%rdi
   16476:	ff d2                	call   *%rdx
        vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
   16478:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1647c:	48 89 82 30 0d 00 00 	mov    %rax,0xd30(%rdx)
        vkCmdTraceRaysIndirectKHR = PFN_vkCmdTraceRaysIndirectKHR( vkGetDeviceProcAddr( device, "vkCmdTraceRaysIndirectKHR" ) );
   16483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16487:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1648b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1648f:	48 8d 0d 04 fe 00 00 	lea    0xfe04(%rip),%rcx        # 2629a <_ZNSt8__detailL19__atomic_spin_countE+0x35de>
   16496:	48 89 ce             	mov    %rcx,%rsi
   16499:	48 89 c7             	mov    %rax,%rdi
   1649c:	ff d2                	call   *%rdx
   1649e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   164a2:	48 89 82 38 0d 00 00 	mov    %rax,0xd38(%rdx)
          PFN_vkGetRayTracingShaderGroupStackSizeKHR( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupStackSizeKHR" ) );
   164a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   164ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
   164b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164b5:	48 8d 0d fc fd 00 00 	lea    0xfdfc(%rip),%rcx        # 262b8 <_ZNSt8__detailL19__atomic_spin_countE+0x35fc>
   164bc:	48 89 ce             	mov    %rcx,%rsi
   164bf:	48 89 c7             	mov    %rax,%rdi
   164c2:	ff d2                	call   *%rdx
        vkGetRayTracingShaderGroupStackSizeKHR =
   164c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   164c8:	48 89 82 40 0d 00 00 	mov    %rax,0xd40(%rdx)
          PFN_vkCmdSetRayTracingPipelineStackSizeKHR( vkGetDeviceProcAddr( device, "vkCmdSetRayTracingPipelineStackSizeKHR" ) );
   164cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   164d3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   164d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   164db:	48 8d 0d fe fd 00 00 	lea    0xfdfe(%rip),%rcx        # 262e0 <_ZNSt8__detailL19__atomic_spin_countE+0x3624>
   164e2:	48 89 ce             	mov    %rcx,%rsi
   164e5:	48 89 c7             	mov    %rax,%rdi
   164e8:	ff d2                	call   *%rdx
        vkCmdSetRayTracingPipelineStackSizeKHR =
   164ea:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   164ee:	48 89 82 48 0d 00 00 	mov    %rax,0xd48(%rdx)
        vkCreateSamplerYcbcrConversionKHR = PFN_vkCreateSamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkCreateSamplerYcbcrConversionKHR" ) );
   164f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   164f9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   164fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16501:	48 8d 0d 00 fe 00 00 	lea    0xfe00(%rip),%rcx        # 26308 <_ZNSt8__detailL19__atomic_spin_countE+0x364c>
   16508:	48 89 ce             	mov    %rcx,%rsi
   1650b:	48 89 c7             	mov    %rax,%rdi
   1650e:	ff d2                	call   *%rdx
   16510:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16514:	48 89 82 50 0d 00 00 	mov    %rax,0xd50(%rdx)
        if ( !vkCreateSamplerYcbcrConversion )
   1651b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1651f:	48 8b 80 28 04 00 00 	mov    0x428(%rax),%rax
   16526:	48 85 c0             	test   %rax,%rax
   16529:	75 16                	jne    16541 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6195>
          vkCreateSamplerYcbcrConversion = vkCreateSamplerYcbcrConversionKHR;
   1652b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1652f:	48 8b 90 50 0d 00 00 	mov    0xd50(%rax),%rdx
   16536:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1653a:	48 89 90 28 04 00 00 	mov    %rdx,0x428(%rax)
        vkDestroySamplerYcbcrConversionKHR = PFN_vkDestroySamplerYcbcrConversionKHR( vkGetDeviceProcAddr( device, "vkDestroySamplerYcbcrConversionKHR" ) );
   16541:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16545:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16549:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1654d:	48 8d 0d dc fd 00 00 	lea    0xfddc(%rip),%rcx        # 26330 <_ZNSt8__detailL19__atomic_spin_countE+0x3674>
   16554:	48 89 ce             	mov    %rcx,%rsi
   16557:	48 89 c7             	mov    %rax,%rdi
   1655a:	ff d2                	call   *%rdx
   1655c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16560:	48 89 82 58 0d 00 00 	mov    %rax,0xd58(%rdx)
        if ( !vkDestroySamplerYcbcrConversion )
   16567:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1656b:	48 8b 80 30 04 00 00 	mov    0x430(%rax),%rax
   16572:	48 85 c0             	test   %rax,%rax
   16575:	75 16                	jne    1658d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x61e1>
          vkDestroySamplerYcbcrConversion = vkDestroySamplerYcbcrConversionKHR;
   16577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1657b:	48 8b 90 58 0d 00 00 	mov    0xd58(%rax),%rdx
   16582:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16586:	48 89 90 30 04 00 00 	mov    %rdx,0x430(%rax)
        vkGetSwapchainStatusKHR = PFN_vkGetSwapchainStatusKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainStatusKHR" ) );
   1658d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16591:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16595:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16599:	48 8d 0d b3 fd 00 00 	lea    0xfdb3(%rip),%rcx        # 26353 <_ZNSt8__detailL19__atomic_spin_countE+0x3697>
   165a0:	48 89 ce             	mov    %rcx,%rsi
   165a3:	48 89 c7             	mov    %rax,%rdi
   165a6:	ff d2                	call   *%rdx
   165a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   165ac:	48 89 82 60 0d 00 00 	mov    %rax,0xd60(%rdx)
        vkCreateSwapchainKHR    = PFN_vkCreateSwapchainKHR( vkGetDeviceProcAddr( device, "vkCreateSwapchainKHR" ) );
   165b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165b7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   165bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   165bf:	48 8d 0d a5 fd 00 00 	lea    0xfda5(%rip),%rcx        # 2636b <_ZNSt8__detailL19__atomic_spin_countE+0x36af>
   165c6:	48 89 ce             	mov    %rcx,%rsi
   165c9:	48 89 c7             	mov    %rax,%rdi
   165cc:	ff d2                	call   *%rdx
   165ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   165d2:	48 89 82 68 0d 00 00 	mov    %rax,0xd68(%rdx)
        vkDestroySwapchainKHR   = PFN_vkDestroySwapchainKHR( vkGetDeviceProcAddr( device, "vkDestroySwapchainKHR" ) );
   165d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   165dd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   165e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   165e5:	48 8d 0d 94 fd 00 00 	lea    0xfd94(%rip),%rcx        # 26380 <_ZNSt8__detailL19__atomic_spin_countE+0x36c4>
   165ec:	48 89 ce             	mov    %rcx,%rsi
   165ef:	48 89 c7             	mov    %rax,%rdi
   165f2:	ff d2                	call   *%rdx
   165f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   165f8:	48 89 82 70 0d 00 00 	mov    %rax,0xd70(%rdx)
        vkGetSwapchainImagesKHR = PFN_vkGetSwapchainImagesKHR( vkGetDeviceProcAddr( device, "vkGetSwapchainImagesKHR" ) );
   165ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16603:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1660b:	48 8d 0d 84 fd 00 00 	lea    0xfd84(%rip),%rcx        # 26396 <_ZNSt8__detailL19__atomic_spin_countE+0x36da>
   16612:	48 89 ce             	mov    %rcx,%rsi
   16615:	48 89 c7             	mov    %rax,%rdi
   16618:	ff d2                	call   *%rdx
   1661a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1661e:	48 89 82 78 0d 00 00 	mov    %rax,0xd78(%rdx)
        vkAcquireNextImageKHR   = PFN_vkAcquireNextImageKHR( vkGetDeviceProcAddr( device, "vkAcquireNextImageKHR" ) );
   16625:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16629:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1662d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16631:	48 8d 0d 76 fd 00 00 	lea    0xfd76(%rip),%rcx        # 263ae <_ZNSt8__detailL19__atomic_spin_countE+0x36f2>
   16638:	48 89 ce             	mov    %rcx,%rsi
   1663b:	48 89 c7             	mov    %rax,%rdi
   1663e:	ff d2                	call   *%rdx
   16640:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16644:	48 89 82 80 0d 00 00 	mov    %rax,0xd80(%rdx)
        vkQueuePresentKHR       = PFN_vkQueuePresentKHR( vkGetDeviceProcAddr( device, "vkQueuePresentKHR" ) );
   1664b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1664f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16653:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16657:	48 8d 0d 66 fd 00 00 	lea    0xfd66(%rip),%rcx        # 263c4 <_ZNSt8__detailL19__atomic_spin_countE+0x3708>
   1665e:	48 89 ce             	mov    %rcx,%rsi
   16661:	48 89 c7             	mov    %rax,%rdi
   16664:	ff d2                	call   *%rdx
   16666:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1666a:	48 89 82 88 0d 00 00 	mov    %rax,0xd88(%rdx)
        vkCmdSetEvent2KHR = PFN_vkCmdSetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdSetEvent2KHR" ) );
   16671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16675:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1667d:	48 8d 0d 52 fd 00 00 	lea    0xfd52(%rip),%rcx        # 263d6 <_ZNSt8__detailL19__atomic_spin_countE+0x371a>
   16684:	48 89 ce             	mov    %rcx,%rsi
   16687:	48 89 c7             	mov    %rax,%rdi
   1668a:	ff d2                	call   *%rdx
   1668c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16690:	48 89 82 90 0d 00 00 	mov    %rax,0xd90(%rdx)
        if ( !vkCmdSetEvent2 )
   16697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1669b:	48 8b 80 e0 04 00 00 	mov    0x4e0(%rax),%rax
   166a2:	48 85 c0             	test   %rax,%rax
   166a5:	75 16                	jne    166bd <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6311>
          vkCmdSetEvent2 = vkCmdSetEvent2KHR;
   166a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166ab:	48 8b 90 90 0d 00 00 	mov    0xd90(%rax),%rdx
   166b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166b6:	48 89 90 e0 04 00 00 	mov    %rdx,0x4e0(%rax)
        vkCmdResetEvent2KHR = PFN_vkCmdResetEvent2KHR( vkGetDeviceProcAddr( device, "vkCmdResetEvent2KHR" ) );
   166bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   166c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   166c9:	48 8d 0d 18 fd 00 00 	lea    0xfd18(%rip),%rcx        # 263e8 <_ZNSt8__detailL19__atomic_spin_countE+0x372c>
   166d0:	48 89 ce             	mov    %rcx,%rsi
   166d3:	48 89 c7             	mov    %rax,%rdi
   166d6:	ff d2                	call   *%rdx
   166d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   166dc:	48 89 82 98 0d 00 00 	mov    %rax,0xd98(%rdx)
        if ( !vkCmdResetEvent2 )
   166e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166e7:	48 8b 80 e8 04 00 00 	mov    0x4e8(%rax),%rax
   166ee:	48 85 c0             	test   %rax,%rax
   166f1:	75 16                	jne    16709 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x635d>
          vkCmdResetEvent2 = vkCmdResetEvent2KHR;
   166f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166f7:	48 8b 90 98 0d 00 00 	mov    0xd98(%rax),%rdx
   166fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16702:	48 89 90 e8 04 00 00 	mov    %rdx,0x4e8(%rax)
        vkCmdWaitEvents2KHR = PFN_vkCmdWaitEvents2KHR( vkGetDeviceProcAddr( device, "vkCmdWaitEvents2KHR" ) );
   16709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1670d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16715:	48 8d 0d e0 fc 00 00 	lea    0xfce0(%rip),%rcx        # 263fc <_ZNSt8__detailL19__atomic_spin_countE+0x3740>
   1671c:	48 89 ce             	mov    %rcx,%rsi
   1671f:	48 89 c7             	mov    %rax,%rdi
   16722:	ff d2                	call   *%rdx
   16724:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16728:	48 89 82 a0 0d 00 00 	mov    %rax,0xda0(%rdx)
        if ( !vkCmdWaitEvents2 )
   1672f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16733:	48 8b 80 f0 04 00 00 	mov    0x4f0(%rax),%rax
   1673a:	48 85 c0             	test   %rax,%rax
   1673d:	75 16                	jne    16755 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63a9>
          vkCmdWaitEvents2 = vkCmdWaitEvents2KHR;
   1673f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16743:	48 8b 90 a0 0d 00 00 	mov    0xda0(%rax),%rdx
   1674a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1674e:	48 89 90 f0 04 00 00 	mov    %rdx,0x4f0(%rax)
        vkCmdPipelineBarrier2KHR = PFN_vkCmdPipelineBarrier2KHR( vkGetDeviceProcAddr( device, "vkCmdPipelineBarrier2KHR" ) );
   16755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16759:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1675d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16761:	48 8d 0d a8 fc 00 00 	lea    0xfca8(%rip),%rcx        # 26410 <_ZNSt8__detailL19__atomic_spin_countE+0x3754>
   16768:	48 89 ce             	mov    %rcx,%rsi
   1676b:	48 89 c7             	mov    %rax,%rdi
   1676e:	ff d2                	call   *%rdx
   16770:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16774:	48 89 82 a8 0d 00 00 	mov    %rax,0xda8(%rdx)
        if ( !vkCmdPipelineBarrier2 )
   1677b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1677f:	48 8b 80 f8 04 00 00 	mov    0x4f8(%rax),%rax
   16786:	48 85 c0             	test   %rax,%rax
   16789:	75 16                	jne    167a1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x63f5>
          vkCmdPipelineBarrier2 = vkCmdPipelineBarrier2KHR;
   1678b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1678f:	48 8b 90 a8 0d 00 00 	mov    0xda8(%rax),%rdx
   16796:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1679a:	48 89 90 f8 04 00 00 	mov    %rdx,0x4f8(%rax)
        vkCmdWriteTimestamp2KHR = PFN_vkCmdWriteTimestamp2KHR( vkGetDeviceProcAddr( device, "vkCmdWriteTimestamp2KHR" ) );
   167a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167a5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   167a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   167ad:	48 8d 0d 75 fc 00 00 	lea    0xfc75(%rip),%rcx        # 26429 <_ZNSt8__detailL19__atomic_spin_countE+0x376d>
   167b4:	48 89 ce             	mov    %rcx,%rsi
   167b7:	48 89 c7             	mov    %rax,%rdi
   167ba:	ff d2                	call   *%rdx
   167bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   167c0:	48 89 82 b0 0d 00 00 	mov    %rax,0xdb0(%rdx)
        if ( !vkCmdWriteTimestamp2 )
   167c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167cb:	48 8b 80 00 05 00 00 	mov    0x500(%rax),%rax
   167d2:	48 85 c0             	test   %rax,%rax
   167d5:	75 16                	jne    167ed <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6441>
          vkCmdWriteTimestamp2 = vkCmdWriteTimestamp2KHR;
   167d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167db:	48 8b 90 b0 0d 00 00 	mov    0xdb0(%rax),%rdx
   167e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167e6:	48 89 90 00 05 00 00 	mov    %rdx,0x500(%rax)
        vkQueueSubmit2KHR = PFN_vkQueueSubmit2KHR( vkGetDeviceProcAddr( device, "vkQueueSubmit2KHR" ) );
   167ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   167f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   167f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   167f9:	48 8d 0d 41 fc 00 00 	lea    0xfc41(%rip),%rcx        # 26441 <_ZNSt8__detailL19__atomic_spin_countE+0x3785>
   16800:	48 89 ce             	mov    %rcx,%rsi
   16803:	48 89 c7             	mov    %rax,%rdi
   16806:	ff d2                	call   *%rdx
   16808:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1680c:	48 89 82 b8 0d 00 00 	mov    %rax,0xdb8(%rdx)
        if ( !vkQueueSubmit2 )
   16813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16817:	48 8b 80 08 05 00 00 	mov    0x508(%rax),%rax
   1681e:	48 85 c0             	test   %rax,%rax
   16821:	75 16                	jne    16839 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x648d>
          vkQueueSubmit2 = vkQueueSubmit2KHR;
   16823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16827:	48 8b 90 b8 0d 00 00 	mov    0xdb8(%rax),%rdx
   1682e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16832:	48 89 90 08 05 00 00 	mov    %rdx,0x508(%rax)
        vkCmdWriteBufferMarker2AMD  = PFN_vkCmdWriteBufferMarker2AMD( vkGetDeviceProcAddr( device, "vkCmdWriteBufferMarker2AMD" ) );
   16839:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1683d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16841:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16845:	48 8d 0d 07 fc 00 00 	lea    0xfc07(%rip),%rcx        # 26453 <_ZNSt8__detailL19__atomic_spin_countE+0x3797>
   1684c:	48 89 ce             	mov    %rcx,%rsi
   1684f:	48 89 c7             	mov    %rax,%rdi
   16852:	ff d2                	call   *%rdx
   16854:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16858:	48 89 82 c0 0d 00 00 	mov    %rax,0xdc0(%rdx)
        vkGetQueueCheckpointData2NV = PFN_vkGetQueueCheckpointData2NV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointData2NV" ) );
   1685f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16863:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16867:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1686b:	48 8d 0d fc fb 00 00 	lea    0xfbfc(%rip),%rcx        # 2646e <_ZNSt8__detailL19__atomic_spin_countE+0x37b2>
   16872:	48 89 ce             	mov    %rcx,%rsi
   16875:	48 89 c7             	mov    %rax,%rdi
   16878:	ff d2                	call   *%rdx
   1687a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1687e:	48 89 82 c8 0d 00 00 	mov    %rax,0xdc8(%rdx)
        vkGetSemaphoreCounterValueKHR = PFN_vkGetSemaphoreCounterValueKHR( vkGetDeviceProcAddr( device, "vkGetSemaphoreCounterValueKHR" ) );
   16885:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16889:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1688d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16891:	48 8d 0d f2 fb 00 00 	lea    0xfbf2(%rip),%rcx        # 2648a <_ZNSt8__detailL19__atomic_spin_countE+0x37ce>
   16898:	48 89 ce             	mov    %rcx,%rsi
   1689b:	48 89 c7             	mov    %rax,%rdi
   1689e:	ff d2                	call   *%rdx
   168a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   168a4:	48 89 82 d0 0d 00 00 	mov    %rax,0xdd0(%rdx)
        if ( !vkGetSemaphoreCounterValue )
   168ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168af:	48 8b 80 90 04 00 00 	mov    0x490(%rax),%rax
   168b6:	48 85 c0             	test   %rax,%rax
   168b9:	75 16                	jne    168d1 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6525>
          vkGetSemaphoreCounterValue = vkGetSemaphoreCounterValueKHR;
   168bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168bf:	48 8b 90 d0 0d 00 00 	mov    0xdd0(%rax),%rdx
   168c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168ca:	48 89 90 90 04 00 00 	mov    %rdx,0x490(%rax)
        vkWaitSemaphoresKHR = PFN_vkWaitSemaphoresKHR( vkGetDeviceProcAddr( device, "vkWaitSemaphoresKHR" ) );
   168d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   168d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   168dd:	48 8d 0d c4 fb 00 00 	lea    0xfbc4(%rip),%rcx        # 264a8 <_ZNSt8__detailL19__atomic_spin_countE+0x37ec>
   168e4:	48 89 ce             	mov    %rcx,%rsi
   168e7:	48 89 c7             	mov    %rax,%rdi
   168ea:	ff d2                	call   *%rdx
   168ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   168f0:	48 89 82 d8 0d 00 00 	mov    %rax,0xdd8(%rdx)
        if ( !vkWaitSemaphores )
   168f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   168fb:	48 8b 80 98 04 00 00 	mov    0x498(%rax),%rax
   16902:	48 85 c0             	test   %rax,%rax
   16905:	75 16                	jne    1691d <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6571>
          vkWaitSemaphores = vkWaitSemaphoresKHR;
   16907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1690b:	48 8b 90 d8 0d 00 00 	mov    0xdd8(%rax),%rdx
   16912:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16916:	48 89 90 98 04 00 00 	mov    %rdx,0x498(%rax)
        vkSignalSemaphoreKHR = PFN_vkSignalSemaphoreKHR( vkGetDeviceProcAddr( device, "vkSignalSemaphoreKHR" ) );
   1691d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16921:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16929:	48 8d 0d 8c fb 00 00 	lea    0xfb8c(%rip),%rcx        # 264bc <_ZNSt8__detailL19__atomic_spin_countE+0x3800>
   16930:	48 89 ce             	mov    %rcx,%rsi
   16933:	48 89 c7             	mov    %rax,%rdi
   16936:	ff d2                	call   *%rdx
   16938:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1693c:	48 89 82 e0 0d 00 00 	mov    %rax,0xde0(%rdx)
        if ( !vkSignalSemaphore )
   16943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16947:	48 8b 80 a0 04 00 00 	mov    0x4a0(%rax),%rax
   1694e:	48 85 c0             	test   %rax,%rax
   16951:	75 16                	jne    16969 <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x65bd>
          vkSignalSemaphore = vkSignalSemaphoreKHR;
   16953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16957:	48 8b 90 e0 0d 00 00 	mov    0xde0(%rax),%rdx
   1695e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16962:	48 89 90 a0 04 00 00 	mov    %rdx,0x4a0(%rax)
        vkCreateCuModuleNVX    = PFN_vkCreateCuModuleNVX( vkGetDeviceProcAddr( device, "vkCreateCuModuleNVX" ) );
   16969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1696d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16971:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16975:	48 8d 0d 55 fb 00 00 	lea    0xfb55(%rip),%rcx        # 264d1 <_ZNSt8__detailL19__atomic_spin_countE+0x3815>
   1697c:	48 89 ce             	mov    %rcx,%rsi
   1697f:	48 89 c7             	mov    %rax,%rdi
   16982:	ff d2                	call   *%rdx
   16984:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16988:	48 89 82 48 0e 00 00 	mov    %rax,0xe48(%rdx)
        vkCreateCuFunctionNVX  = PFN_vkCreateCuFunctionNVX( vkGetDeviceProcAddr( device, "vkCreateCuFunctionNVX" ) );
   1698f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16993:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16997:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1699b:	48 8d 0d 43 fb 00 00 	lea    0xfb43(%rip),%rcx        # 264e5 <_ZNSt8__detailL19__atomic_spin_countE+0x3829>
   169a2:	48 89 ce             	mov    %rcx,%rsi
   169a5:	48 89 c7             	mov    %rax,%rdi
   169a8:	ff d2                	call   *%rdx
   169aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   169ae:	48 89 82 50 0e 00 00 	mov    %rax,0xe50(%rdx)
        vkDestroyCuModuleNVX   = PFN_vkDestroyCuModuleNVX( vkGetDeviceProcAddr( device, "vkDestroyCuModuleNVX" ) );
   169b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   169bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169c1:	48 8d 0d 33 fb 00 00 	lea    0xfb33(%rip),%rcx        # 264fb <_ZNSt8__detailL19__atomic_spin_countE+0x383f>
   169c8:	48 89 ce             	mov    %rcx,%rsi
   169cb:	48 89 c7             	mov    %rax,%rdi
   169ce:	ff d2                	call   *%rdx
   169d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   169d4:	48 89 82 58 0e 00 00 	mov    %rax,0xe58(%rdx)
        vkDestroyCuFunctionNVX = PFN_vkDestroyCuFunctionNVX( vkGetDeviceProcAddr( device, "vkDestroyCuFunctionNVX" ) );
   169db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169df:	48 8b 50 10          	mov    0x10(%rax),%rdx
   169e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   169e7:	48 8d 0d 22 fb 00 00 	lea    0xfb22(%rip),%rcx        # 26510 <_ZNSt8__detailL19__atomic_spin_countE+0x3854>
   169ee:	48 89 ce             	mov    %rcx,%rsi
   169f1:	48 89 c7             	mov    %rax,%rdi
   169f4:	ff d2                	call   *%rdx
   169f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   169fa:	48 89 82 60 0e 00 00 	mov    %rax,0xe60(%rdx)
        vkCmdCuLaunchKernelNVX = PFN_vkCmdCuLaunchKernelNVX( vkGetDeviceProcAddr( device, "vkCmdCuLaunchKernelNVX" ) );
   16a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a05:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16a09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16a0d:	48 8d 0d 13 fb 00 00 	lea    0xfb13(%rip),%rcx        # 26527 <_ZNSt8__detailL19__atomic_spin_countE+0x386b>
   16a14:	48 89 ce             	mov    %rcx,%rsi
   16a17:	48 89 c7             	mov    %rax,%rdi
   16a1a:	ff d2                	call   *%rdx
   16a1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16a20:	48 89 82 68 0e 00 00 	mov    %rax,0xe68(%rdx)
        vkGetImageViewHandleNVX  = PFN_vkGetImageViewHandleNVX( vkGetDeviceProcAddr( device, "vkGetImageViewHandleNVX" ) );
   16a27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a2b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16a33:	48 8d 0d 04 fb 00 00 	lea    0xfb04(%rip),%rcx        # 2653e <_ZNSt8__detailL19__atomic_spin_countE+0x3882>
   16a3a:	48 89 ce             	mov    %rcx,%rsi
   16a3d:	48 89 c7             	mov    %rax,%rdi
   16a40:	ff d2                	call   *%rdx
   16a42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16a46:	48 89 82 70 0e 00 00 	mov    %rax,0xe70(%rdx)
        vkGetImageViewAddressNVX = PFN_vkGetImageViewAddressNVX( vkGetDeviceProcAddr( device, "vkGetImageViewAddressNVX" ) );
   16a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a51:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16a55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16a59:	48 8d 0d f6 fa 00 00 	lea    0xfaf6(%rip),%rcx        # 26556 <_ZNSt8__detailL19__atomic_spin_countE+0x389a>
   16a60:	48 89 ce             	mov    %rcx,%rsi
   16a63:	48 89 c7             	mov    %rax,%rdi
   16a66:	ff d2                	call   *%rdx
   16a68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16a6c:	48 89 82 78 0e 00 00 	mov    %rax,0xe78(%rdx)
        vkCmdSetViewportWScalingNV = PFN_vkCmdSetViewportWScalingNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportWScalingNV" ) );
   16a73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a77:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16a7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16a7f:	48 8d 0d e9 fa 00 00 	lea    0xfae9(%rip),%rcx        # 2656f <_ZNSt8__detailL19__atomic_spin_countE+0x38b3>
   16a86:	48 89 ce             	mov    %rcx,%rsi
   16a89:	48 89 c7             	mov    %rax,%rdi
   16a8c:	ff d2                	call   *%rdx
   16a8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16a92:	48 89 82 80 0e 00 00 	mov    %rax,0xe80(%rdx)
        vkCmdSetCheckpointNV       = PFN_vkCmdSetCheckpointNV( vkGetDeviceProcAddr( device, "vkCmdSetCheckpointNV" ) );
   16a99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16a9d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16aa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16aa5:	48 8d 0d de fa 00 00 	lea    0xfade(%rip),%rcx        # 2658a <_ZNSt8__detailL19__atomic_spin_countE+0x38ce>
   16aac:	48 89 ce             	mov    %rcx,%rsi
   16aaf:	48 89 c7             	mov    %rax,%rdi
   16ab2:	ff d2                	call   *%rdx
   16ab4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ab8:	48 89 82 88 0e 00 00 	mov    %rax,0xe88(%rdx)
        vkGetQueueCheckpointDataNV = PFN_vkGetQueueCheckpointDataNV( vkGetDeviceProcAddr( device, "vkGetQueueCheckpointDataNV" ) );
   16abf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ac3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16acb:	48 8d 0d cd fa 00 00 	lea    0xfacd(%rip),%rcx        # 2659f <_ZNSt8__detailL19__atomic_spin_countE+0x38e3>
   16ad2:	48 89 ce             	mov    %rcx,%rsi
   16ad5:	48 89 c7             	mov    %rax,%rdi
   16ad8:	ff d2                	call   *%rdx
   16ada:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ade:	48 89 82 90 0e 00 00 	mov    %rax,0xe90(%rdx)
          PFN_vkGetGeneratedCommandsMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetGeneratedCommandsMemoryRequirementsNV" ) );
   16ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ae9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16aed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16af1:	48 8d 0d c8 fa 00 00 	lea    0xfac8(%rip),%rcx        # 265c0 <_ZNSt8__detailL19__atomic_spin_countE+0x3904>
   16af8:	48 89 ce             	mov    %rcx,%rsi
   16afb:	48 89 c7             	mov    %rax,%rdi
   16afe:	ff d2                	call   *%rdx
        vkGetGeneratedCommandsMemoryRequirementsNV =
   16b00:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16b04:	48 89 82 98 0e 00 00 	mov    %rax,0xe98(%rdx)
        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdPreprocessGeneratedCommandsNV" ) );
   16b0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16b13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b17:	48 8d 0d d2 fa 00 00 	lea    0xfad2(%rip),%rcx        # 265f0 <_ZNSt8__detailL19__atomic_spin_countE+0x3934>
   16b1e:	48 89 ce             	mov    %rcx,%rsi
   16b21:	48 89 c7             	mov    %rax,%rdi
   16b24:	ff d2                	call   *%rdx
   16b26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16b2a:	48 89 82 a0 0e 00 00 	mov    %rax,0xea0(%rdx)
        vkCmdExecuteGeneratedCommandsNV    = PFN_vkCmdExecuteGeneratedCommandsNV( vkGetDeviceProcAddr( device, "vkCmdExecuteGeneratedCommandsNV" ) );
   16b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b35:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16b39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b3d:	48 8d 0d d4 fa 00 00 	lea    0xfad4(%rip),%rcx        # 26618 <_ZNSt8__detailL19__atomic_spin_countE+0x395c>
   16b44:	48 89 ce             	mov    %rcx,%rsi
   16b47:	48 89 c7             	mov    %rax,%rdi
   16b4a:	ff d2                	call   *%rdx
   16b4c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16b50:	48 89 82 a8 0e 00 00 	mov    %rax,0xea8(%rdx)
        vkCmdBindPipelineShaderGroupNV     = PFN_vkCmdBindPipelineShaderGroupNV( vkGetDeviceProcAddr( device, "vkCmdBindPipelineShaderGroupNV" ) );
   16b57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b5b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b63:	48 8d 0d ce fa 00 00 	lea    0xface(%rip),%rcx        # 26638 <_ZNSt8__detailL19__atomic_spin_countE+0x397c>
   16b6a:	48 89 ce             	mov    %rcx,%rsi
   16b6d:	48 89 c7             	mov    %rax,%rdi
   16b70:	ff d2                	call   *%rdx
   16b72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16b76:	48 89 82 b0 0e 00 00 	mov    %rax,0xeb0(%rdx)
        vkCreateIndirectCommandsLayoutNV   = PFN_vkCreateIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkCreateIndirectCommandsLayoutNV" ) );
   16b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16b81:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16b85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16b89:	48 8d 0d c8 fa 00 00 	lea    0xfac8(%rip),%rcx        # 26658 <_ZNSt8__detailL19__atomic_spin_countE+0x399c>
   16b90:	48 89 ce             	mov    %rcx,%rsi
   16b93:	48 89 c7             	mov    %rax,%rdi
   16b96:	ff d2                	call   *%rdx
   16b98:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16b9c:	48 89 82 b8 0e 00 00 	mov    %rax,0xeb8(%rdx)
        vkDestroyIndirectCommandsLayoutNV  = PFN_vkDestroyIndirectCommandsLayoutNV( vkGetDeviceProcAddr( device, "vkDestroyIndirectCommandsLayoutNV" ) );
   16ba3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ba7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16baf:	48 8d 0d ca fa 00 00 	lea    0xfaca(%rip),%rcx        # 26680 <_ZNSt8__detailL19__atomic_spin_countE+0x39c4>
   16bb6:	48 89 ce             	mov    %rcx,%rsi
   16bb9:	48 89 c7             	mov    %rax,%rdi
   16bbc:	ff d2                	call   *%rdx
   16bbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16bc2:	48 89 82 c0 0e 00 00 	mov    %rax,0xec0(%rdx)
        vkGetMemoryRemoteAddressNV = PFN_vkGetMemoryRemoteAddressNV( vkGetDeviceProcAddr( device, "vkGetMemoryRemoteAddressNV" ) );
   16bc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bcd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16bd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bd5:	48 8d 0d c6 fa 00 00 	lea    0xfac6(%rip),%rcx        # 266a2 <_ZNSt8__detailL19__atomic_spin_countE+0x39e6>
   16bdc:	48 89 ce             	mov    %rcx,%rsi
   16bdf:	48 89 c7             	mov    %rax,%rdi
   16be2:	ff d2                	call   *%rdx
   16be4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16be8:	48 89 82 c8 0e 00 00 	mov    %rax,0xec8(%rdx)
        vkCmdSetFragmentShadingRateEnumNV = PFN_vkCmdSetFragmentShadingRateEnumNV( vkGetDeviceProcAddr( device, "vkCmdSetFragmentShadingRateEnumNV" ) );
   16bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bf3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16bf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16bfb:	48 8d 0d be fa 00 00 	lea    0xfabe(%rip),%rcx        # 266c0 <_ZNSt8__detailL19__atomic_spin_countE+0x3a04>
   16c02:	48 89 ce             	mov    %rcx,%rsi
   16c05:	48 89 c7             	mov    %rax,%rdi
   16c08:	ff d2                	call   *%rdx
   16c0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16c0e:	48 89 82 d8 0e 00 00 	mov    %rax,0xed8(%rdx)
        vkCmdDrawMeshTasksNV              = PFN_vkCmdDrawMeshTasksNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksNV" ) );
   16c15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c19:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c21:	48 8d 0d ba fa 00 00 	lea    0xfaba(%rip),%rcx        # 266e2 <_ZNSt8__detailL19__atomic_spin_countE+0x3a26>
   16c28:	48 89 ce             	mov    %rcx,%rsi
   16c2b:	48 89 c7             	mov    %rax,%rdi
   16c2e:	ff d2                	call   *%rdx
   16c30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16c34:	48 89 82 e0 0e 00 00 	mov    %rax,0xee0(%rdx)
        vkCmdDrawMeshTasksIndirectNV      = PFN_vkCmdDrawMeshTasksIndirectNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectNV" ) );
   16c3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c3f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c47:	48 8d 0d a9 fa 00 00 	lea    0xfaa9(%rip),%rcx        # 266f7 <_ZNSt8__detailL19__atomic_spin_countE+0x3a3b>
   16c4e:	48 89 ce             	mov    %rcx,%rsi
   16c51:	48 89 c7             	mov    %rax,%rdi
   16c54:	ff d2                	call   *%rdx
   16c56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16c5a:	48 89 82 e8 0e 00 00 	mov    %rax,0xee8(%rdx)
        vkCmdDrawMeshTasksIndirectCountNV = PFN_vkCmdDrawMeshTasksIndirectCountNV( vkGetDeviceProcAddr( device, "vkCmdDrawMeshTasksIndirectCountNV" ) );
   16c61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c65:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c6d:	48 8d 0d a4 fa 00 00 	lea    0xfaa4(%rip),%rcx        # 26718 <_ZNSt8__detailL19__atomic_spin_countE+0x3a5c>
   16c74:	48 89 ce             	mov    %rcx,%rsi
   16c77:	48 89 c7             	mov    %rax,%rdi
   16c7a:	ff d2                	call   *%rdx
   16c7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16c80:	48 89 82 f0 0e 00 00 	mov    %rax,0xef0(%rdx)
        vkCreateOpticalFlowSessionNV    = PFN_vkCreateOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkCreateOpticalFlowSessionNV" ) );
   16c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c8b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16c8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c93:	48 8d 0d a0 fa 00 00 	lea    0xfaa0(%rip),%rcx        # 2673a <_ZNSt8__detailL19__atomic_spin_countE+0x3a7e>
   16c9a:	48 89 ce             	mov    %rcx,%rsi
   16c9d:	48 89 c7             	mov    %rax,%rdi
   16ca0:	ff d2                	call   *%rdx
   16ca2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ca6:	48 89 82 f8 0e 00 00 	mov    %rax,0xef8(%rdx)
        vkDestroyOpticalFlowSessionNV   = PFN_vkDestroyOpticalFlowSessionNV( vkGetDeviceProcAddr( device, "vkDestroyOpticalFlowSessionNV" ) );
   16cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cb1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16cb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16cb9:	48 8d 0d 97 fa 00 00 	lea    0xfa97(%rip),%rcx        # 26757 <_ZNSt8__detailL19__atomic_spin_countE+0x3a9b>
   16cc0:	48 89 ce             	mov    %rcx,%rsi
   16cc3:	48 89 c7             	mov    %rax,%rdi
   16cc6:	ff d2                	call   *%rdx
   16cc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ccc:	48 89 82 00 0f 00 00 	mov    %rax,0xf00(%rdx)
        vkBindOpticalFlowSessionImageNV = PFN_vkBindOpticalFlowSessionImageNV( vkGetDeviceProcAddr( device, "vkBindOpticalFlowSessionImageNV" ) );
   16cd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16cdf:	48 8d 0d 92 fa 00 00 	lea    0xfa92(%rip),%rcx        # 26778 <_ZNSt8__detailL19__atomic_spin_countE+0x3abc>
   16ce6:	48 89 ce             	mov    %rcx,%rsi
   16ce9:	48 89 c7             	mov    %rax,%rdi
   16cec:	ff d2                	call   *%rdx
   16cee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16cf2:	48 89 82 08 0f 00 00 	mov    %rax,0xf08(%rdx)
        vkCmdOpticalFlowExecuteNV       = PFN_vkCmdOpticalFlowExecuteNV( vkGetDeviceProcAddr( device, "vkCmdOpticalFlowExecuteNV" ) );
   16cf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cfd:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d05:	48 8d 0d 8c fa 00 00 	lea    0xfa8c(%rip),%rcx        # 26798 <_ZNSt8__detailL19__atomic_spin_countE+0x3adc>
   16d0c:	48 89 ce             	mov    %rcx,%rsi
   16d0f:	48 89 c7             	mov    %rax,%rdi
   16d12:	ff d2                	call   *%rdx
   16d14:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16d18:	48 89 82 10 0f 00 00 	mov    %rax,0xf10(%rdx)
        vkCreateAccelerationStructureNV  = PFN_vkCreateAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCreateAccelerationStructureNV" ) );
   16d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d23:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d2b:	48 8d 0d 86 fa 00 00 	lea    0xfa86(%rip),%rcx        # 267b8 <_ZNSt8__detailL19__atomic_spin_countE+0x3afc>
   16d32:	48 89 ce             	mov    %rcx,%rsi
   16d35:	48 89 c7             	mov    %rax,%rdi
   16d38:	ff d2                	call   *%rdx
   16d3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16d3e:	48 89 82 18 0f 00 00 	mov    %rax,0xf18(%rdx)
        vkDestroyAccelerationStructureNV = PFN_vkDestroyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkDestroyAccelerationStructureNV" ) );
   16d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d49:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d51:	48 8d 0d 80 fa 00 00 	lea    0xfa80(%rip),%rcx        # 267d8 <_ZNSt8__detailL19__atomic_spin_countE+0x3b1c>
   16d58:	48 89 ce             	mov    %rcx,%rsi
   16d5b:	48 89 c7             	mov    %rax,%rdi
   16d5e:	ff d2                	call   *%rdx
   16d60:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16d64:	48 89 82 20 0f 00 00 	mov    %rax,0xf20(%rdx)
          PFN_vkGetAccelerationStructureMemoryRequirementsNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureMemoryRequirementsNV" ) );
   16d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d6f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d77:	48 8d 0d 82 fa 00 00 	lea    0xfa82(%rip),%rcx        # 26800 <_ZNSt8__detailL19__atomic_spin_countE+0x3b44>
   16d7e:	48 89 ce             	mov    %rcx,%rsi
   16d81:	48 89 c7             	mov    %rax,%rdi
   16d84:	ff d2                	call   *%rdx
        vkGetAccelerationStructureMemoryRequirementsNV =
   16d86:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16d8a:	48 89 82 28 0f 00 00 	mov    %rax,0xf28(%rdx)
        vkBindAccelerationStructureMemoryNV = PFN_vkBindAccelerationStructureMemoryNV( vkGetDeviceProcAddr( device, "vkBindAccelerationStructureMemoryNV" ) );
   16d91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16d95:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16d99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d9d:	48 8d 0d 8c fa 00 00 	lea    0xfa8c(%rip),%rcx        # 26830 <_ZNSt8__detailL19__atomic_spin_countE+0x3b74>
   16da4:	48 89 ce             	mov    %rcx,%rsi
   16da7:	48 89 c7             	mov    %rax,%rdi
   16daa:	ff d2                	call   *%rdx
   16dac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16db0:	48 89 82 30 0f 00 00 	mov    %rax,0xf30(%rdx)
        vkCmdBuildAccelerationStructureNV   = PFN_vkCmdBuildAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdBuildAccelerationStructureNV" ) );
   16db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16dbb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16dc3:	48 8d 0d 8e fa 00 00 	lea    0xfa8e(%rip),%rcx        # 26858 <_ZNSt8__detailL19__atomic_spin_countE+0x3b9c>
   16dca:	48 89 ce             	mov    %rcx,%rsi
   16dcd:	48 89 c7             	mov    %rax,%rdi
   16dd0:	ff d2                	call   *%rdx
   16dd2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16dd6:	48 89 82 38 0f 00 00 	mov    %rax,0xf38(%rdx)
        vkCmdCopyAccelerationStructureNV    = PFN_vkCmdCopyAccelerationStructureNV( vkGetDeviceProcAddr( device, "vkCmdCopyAccelerationStructureNV" ) );
   16ddd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16de1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16de9:	48 8d 0d 90 fa 00 00 	lea    0xfa90(%rip),%rcx        # 26880 <_ZNSt8__detailL19__atomic_spin_countE+0x3bc4>
   16df0:	48 89 ce             	mov    %rcx,%rsi
   16df3:	48 89 c7             	mov    %rax,%rdi
   16df6:	ff d2                	call   *%rdx
   16df8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16dfc:	48 89 82 40 0f 00 00 	mov    %rax,0xf40(%rdx)
        vkCmdTraceRaysNV                    = PFN_vkCmdTraceRaysNV( vkGetDeviceProcAddr( device, "vkCmdTraceRaysNV" ) );
   16e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e07:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e0f:	48 8d 0d 8b fa 00 00 	lea    0xfa8b(%rip),%rcx        # 268a1 <_ZNSt8__detailL19__atomic_spin_countE+0x3be5>
   16e16:	48 89 ce             	mov    %rcx,%rsi
   16e19:	48 89 c7             	mov    %rax,%rdi
   16e1c:	ff d2                	call   *%rdx
   16e1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16e22:	48 89 82 48 0f 00 00 	mov    %rax,0xf48(%rdx)
        vkCreateRayTracingPipelinesNV       = PFN_vkCreateRayTracingPipelinesNV( vkGetDeviceProcAddr( device, "vkCreateRayTracingPipelinesNV" ) );
   16e29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e2d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16e31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e35:	48 8d 0d 76 fa 00 00 	lea    0xfa76(%rip),%rcx        # 268b2 <_ZNSt8__detailL19__atomic_spin_countE+0x3bf6>
   16e3c:	48 89 ce             	mov    %rcx,%rsi
   16e3f:	48 89 c7             	mov    %rax,%rdi
   16e42:	ff d2                	call   *%rdx
   16e44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16e48:	48 89 82 50 0f 00 00 	mov    %rax,0xf50(%rdx)
        vkGetRayTracingShaderGroupHandlesNV = PFN_vkGetRayTracingShaderGroupHandlesNV( vkGetDeviceProcAddr( device, "vkGetRayTracingShaderGroupHandlesNV" ) );
   16e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e53:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16e57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16e5b:	48 8d 0d 6e fa 00 00 	lea    0xfa6e(%rip),%rcx        # 268d0 <_ZNSt8__detailL19__atomic_spin_countE+0x3c14>
   16e62:	48 89 ce             	mov    %rcx,%rsi
   16e65:	48 89 c7             	mov    %rax,%rdi
   16e68:	ff d2                	call   *%rdx
   16e6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16e6e:	48 89 82 58 0f 00 00 	mov    %rax,0xf58(%rdx)
        if ( !vkGetRayTracingShaderGroupHandlesKHR )
   16e75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e79:	48 8b 80 28 0d 00 00 	mov    0xd28(%rax),%rax
   16e80:	48 85 c0             	test   %rax,%rax
   16e83:	75 16                	jne    16e9b <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_+0x6aef>
          vkGetRayTracingShaderGroupHandlesKHR = vkGetRayTracingShaderGroupHandlesNV;
   16e85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e89:	48 8b 90 58 0f 00 00 	mov    0xf58(%rax),%rdx
   16e90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e94:	48 89 90 28 0d 00 00 	mov    %rdx,0xd28(%rax)
        vkGetAccelerationStructureHandleNV = PFN_vkGetAccelerationStructureHandleNV( vkGetDeviceProcAddr( device, "vkGetAccelerationStructureHandleNV" ) );
   16e9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16ea3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ea7:	48 8d 0d 4a fa 00 00 	lea    0xfa4a(%rip),%rcx        # 268f8 <_ZNSt8__detailL19__atomic_spin_countE+0x3c3c>
   16eae:	48 89 ce             	mov    %rcx,%rsi
   16eb1:	48 89 c7             	mov    %rax,%rdi
   16eb4:	ff d2                	call   *%rdx
   16eb6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16eba:	48 89 82 60 0f 00 00 	mov    %rax,0xf60(%rdx)
          PFN_vkCmdWriteAccelerationStructuresPropertiesNV( vkGetDeviceProcAddr( device, "vkCmdWriteAccelerationStructuresPropertiesNV" ) );
   16ec1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ec5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16ec9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ecd:	48 8d 0d 4c fa 00 00 	lea    0xfa4c(%rip),%rcx        # 26920 <_ZNSt8__detailL19__atomic_spin_countE+0x3c64>
   16ed4:	48 89 ce             	mov    %rcx,%rsi
   16ed7:	48 89 c7             	mov    %rax,%rdi
   16eda:	ff d2                	call   *%rdx
        vkCmdWriteAccelerationStructuresPropertiesNV =
   16edc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16ee0:	48 89 82 68 0f 00 00 	mov    %rax,0xf68(%rdx)
        vkCompileDeferredNV = PFN_vkCompileDeferredNV( vkGetDeviceProcAddr( device, "vkCompileDeferredNV" ) );
   16ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16eeb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16eef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ef3:	48 8d 0d 53 fa 00 00 	lea    0xfa53(%rip),%rcx        # 2694d <_ZNSt8__detailL19__atomic_spin_countE+0x3c91>
   16efa:	48 89 ce             	mov    %rcx,%rsi
   16efd:	48 89 c7             	mov    %rax,%rdi
   16f00:	ff d2                	call   *%rdx
   16f02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f06:	48 89 82 70 0f 00 00 	mov    %rax,0xf70(%rdx)
        vkCmdSetExclusiveScissorNV = PFN_vkCmdSetExclusiveScissorNV( vkGetDeviceProcAddr( device, "vkCmdSetExclusiveScissorNV" ) );
   16f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f11:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16f15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f19:	48 8d 0d 41 fa 00 00 	lea    0xfa41(%rip),%rcx        # 26961 <_ZNSt8__detailL19__atomic_spin_countE+0x3ca5>
   16f20:	48 89 ce             	mov    %rcx,%rsi
   16f23:	48 89 c7             	mov    %rax,%rdi
   16f26:	ff d2                	call   *%rdx
   16f28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f2c:	48 89 82 78 0f 00 00 	mov    %rax,0xf78(%rdx)
        vkCmdBindShadingRateImageNV = PFN_vkCmdBindShadingRateImageNV( vkGetDeviceProcAddr( device, "vkCmdBindShadingRateImageNV" ) );
   16f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f37:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f3f:	48 8d 0d 36 fa 00 00 	lea    0xfa36(%rip),%rcx        # 2697c <_ZNSt8__detailL19__atomic_spin_countE+0x3cc0>
   16f46:	48 89 ce             	mov    %rcx,%rsi
   16f49:	48 89 c7             	mov    %rax,%rdi
   16f4c:	ff d2                	call   *%rdx
   16f4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f52:	48 89 82 80 0f 00 00 	mov    %rax,0xf80(%rdx)
          PFN_vkCmdSetViewportShadingRatePaletteNV( vkGetDeviceProcAddr( device, "vkCmdSetViewportShadingRatePaletteNV" ) );
   16f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f5d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16f61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f65:	48 8d 0d 2c fa 00 00 	lea    0xfa2c(%rip),%rcx        # 26998 <_ZNSt8__detailL19__atomic_spin_countE+0x3cdc>
   16f6c:	48 89 ce             	mov    %rcx,%rsi
   16f6f:	48 89 c7             	mov    %rax,%rdi
   16f72:	ff d2                	call   *%rdx
        vkCmdSetViewportShadingRatePaletteNV =
   16f74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f78:	48 89 82 88 0f 00 00 	mov    %rax,0xf88(%rdx)
        vkCmdSetCoarseSampleOrderNV = PFN_vkCmdSetCoarseSampleOrderNV( vkGetDeviceProcAddr( device, "vkCmdSetCoarseSampleOrderNV" ) );
   16f7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f83:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16f8b:	48 8d 0d 2b fa 00 00 	lea    0xfa2b(%rip),%rcx        # 269bd <_ZNSt8__detailL19__atomic_spin_countE+0x3d01>
   16f92:	48 89 ce             	mov    %rcx,%rsi
   16f95:	48 89 c7             	mov    %rax,%rdi
   16f98:	ff d2                	call   *%rdx
   16f9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16f9e:	48 89 82 90 0f 00 00 	mov    %rax,0xf90(%rdx)
        vkGetFramebufferTilePropertiesQCOM = PFN_vkGetFramebufferTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetFramebufferTilePropertiesQCOM" ) );
   16fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fa9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16fad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16fb1:	48 8d 0d 28 fa 00 00 	lea    0xfa28(%rip),%rcx        # 269e0 <_ZNSt8__detailL19__atomic_spin_countE+0x3d24>
   16fb8:	48 89 ce             	mov    %rcx,%rsi
   16fbb:	48 89 c7             	mov    %rax,%rdi
   16fbe:	ff d2                	call   *%rdx
   16fc0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16fc4:	48 89 82 98 0f 00 00 	mov    %rax,0xf98(%rdx)
          PFN_vkGetDynamicRenderingTilePropertiesQCOM( vkGetDeviceProcAddr( device, "vkGetDynamicRenderingTilePropertiesQCOM" ) );
   16fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fcf:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16fd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16fd7:	48 8d 0d 2a fa 00 00 	lea    0xfa2a(%rip),%rcx        # 26a08 <_ZNSt8__detailL19__atomic_spin_countE+0x3d4c>
   16fde:	48 89 ce             	mov    %rcx,%rsi
   16fe1:	48 89 c7             	mov    %rax,%rdi
   16fe4:	ff d2                	call   *%rdx
        vkGetDynamicRenderingTilePropertiesQCOM =
   16fe6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   16fea:	48 89 82 a0 0f 00 00 	mov    %rax,0xfa0(%rdx)
          PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE" ) );
   16ff1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16ff5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   16ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16ffd:	48 8d 0d 2c fa 00 00 	lea    0xfa2c(%rip),%rcx        # 26a30 <_ZNSt8__detailL19__atomic_spin_countE+0x3d74>
   17004:	48 89 ce             	mov    %rcx,%rsi
   17007:	48 89 c7             	mov    %rax,%rdi
   1700a:	ff d2                	call   *%rdx
        vkGetDescriptorSetLayoutHostMappingInfoVALVE =
   1700c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17010:	48 89 82 a8 0f 00 00 	mov    %rax,0xfa8(%rdx)
        vkGetDescriptorSetHostMappingVALVE = PFN_vkGetDescriptorSetHostMappingVALVE( vkGetDeviceProcAddr( device, "vkGetDescriptorSetHostMappingVALVE" ) );
   17017:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1701b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1701f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17023:	48 8d 0d 36 fa 00 00 	lea    0xfa36(%rip),%rcx        # 26a60 <_ZNSt8__detailL19__atomic_spin_countE+0x3da4>
   1702a:	48 89 ce             	mov    %rcx,%rsi
   1702d:	48 89 c7             	mov    %rax,%rdi
   17030:	ff d2                	call   *%rdx
   17032:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17036:	48 89 82 b0 0f 00 00 	mov    %rax,0xfb0(%rdx)
      }
   1703d:	90                   	nop
   1703e:	c9                   	leave
   1703f:	c3                   	ret

0000000000017040 <_ZNK2vk4raii7Context13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::ContextDispatcher const * getDispatcher() const
   17040:	55                   	push   %rbp
   17041:	48 89 e5             	mov    %rsp,%rbp
   17044:	48 83 ec 10          	sub    $0x10,%rsp
   17048:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   1704c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17050:	48 83 c0 08          	add    $0x8,%rax
   17054:	48 89 c7             	mov    %rax,%rdi
   17057:	e8 52 17 00 00       	call   187ae <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>
   1705c:	48 89 c7             	mov    %rax,%rdi
   1705f:	e8 ee f4 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   17064:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   1706a:	74 28                	je     17094 <_ZNK2vk4raii7Context13getDispatcherEv+0x54>
   1706c:	48 8d 05 15 fa 00 00 	lea    0xfa15(%rip),%rax        # 26a88 <_ZNSt8__detailL19__atomic_spin_countE+0x3dcc>
   17073:	48 89 c1             	mov    %rax,%rcx
   17076:	ba b1 09 00 00       	mov    $0x9b1,%edx
   1707b:	48 8d 05 56 fa 00 00 	lea    0xfa56(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
   17082:	48 89 c6             	mov    %rax,%rsi
   17085:	48 8d 05 74 fa 00 00 	lea    0xfa74(%rip),%rax        # 26b00 <_ZNSt8__detailL19__atomic_spin_countE+0x3e44>
   1708c:	48 89 c7             	mov    %rax,%rdi
   1708f:	e8 7c e0 fe ff       	call   5110 <__assert_fail@plt>
        return &*m_dispatcher;
   17094:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17098:	48 83 c0 08          	add    $0x8,%rax
   1709c:	48 89 c7             	mov    %rax,%rdi
   1709f:	e8 24 17 00 00       	call   187c8 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>
      }
   170a4:	c9                   	leave
   170a5:	c3                   	ret

00000000000170a6 <_ZN2vk8InstanceC1Ev>:
    VULKAN_HPP_CONSTEXPR Instance() = default;
   170a6:	55                   	push   %rbp
   170a7:	48 89 e5             	mov    %rsp,%rbp
   170aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   170ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   170b2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   170b9:	90                   	nop
   170ba:	5d                   	pop    %rbp
   170bb:	c3                   	ret

00000000000170bc <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Instance( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Context const &                context,
   170bc:	55                   	push   %rbp
   170bd:	48 89 e5             	mov    %rsp,%rbp
   170c0:	41 55                	push   %r13
   170c2:	41 54                	push   %r12
   170c4:	53                   	push   %rbx
   170c5:	48 83 ec 48          	sub    $0x48,%rsp
   170c9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   170cd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   170d1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   170d5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   170d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   170dd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   170e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   170e8:	48 89 c7             	mov    %rax,%rdi
   170eb:	e8 b6 ff ff ff       	call   170a6 <_ZN2vk8InstanceC1Ev>
   170f0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   170f4:	48 89 c7             	mov    %rax,%rdi
   170f7:	e8 0e 17 00 00       	call   1880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   170fc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17100:	48 89 42 08          	mov    %rax,0x8(%rdx)
   17104:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17108:	48 83 c0 10          	add    $0x10,%rax
   1710c:	48 89 c7             	mov    %rax,%rdi
   1710f:	e8 40 17 00 00       	call   18854 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   17114:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17118:	48 89 c7             	mov    %rax,%rdi
   1711b:	e8 20 ff ff ff       	call   17040 <_ZNK2vk4raii7Context13getDispatcherEv>
   17120:	4c 8b 40 18          	mov    0x18(%rax),%r8
                                                                                                reinterpret_cast<VkInstance *>( &m_instance ) ) );
   17124:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                                                                                reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   17128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1712c:	48 8b 48 08          	mov    0x8(%rax),%rcx
          static_cast<VULKAN_HPP_NAMESPACE::Result>( context.getDispatcher()->vkCreateInstance( reinterpret_cast<const VkInstanceCreateInfo *>( &createInfo ),
   17130:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17134:	48 89 ce             	mov    %rcx,%rsi
   17137:	48 89 c7             	mov    %rax,%rdi
   1713a:	41 ff d0             	call   *%r8
   1713d:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   17140:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   17144:	74 14                	je     1715a <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x9e>
          throwResultException( result, "vkCreateInstance" );
   17146:	8b 45 dc             	mov    -0x24(%rbp),%eax
   17149:	48 8d 15 e8 f9 00 00 	lea    0xf9e8(%rip),%rdx        # 26b38 <_ZNSt8__detailL19__atomic_spin_countE+0x3e7c>
   17150:	48 89 d6             	mov    %rdx,%rsi
   17153:	89 c7                	mov    %eax,%edi
   17155:	e8 2c 55 ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   1715a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1715e:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   17162:	bf 48 03 00 00       	mov    $0x348,%edi
   17167:	e8 b4 e0 fe ff       	call   5220 <_Znwm@plt>
   1716c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   17170:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   17176:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1717a:	48 89 c7             	mov    %rax,%rdi
   1717d:	e8 12 1f ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   17182:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   17185:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17189:	48 89 c7             	mov    %rax,%rdi
   1718c:	e8 af fe ff ff       	call   17040 <_ZNK2vk4raii7Context13getDispatcherEv>
   17191:	48 8b 40 10          	mov    0x10(%rax),%rax
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   17195:	4c 89 e2             	mov    %r12,%rdx
   17198:	48 89 c6             	mov    %rax,%rsi
   1719b:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1719f:	e8 22 7f ff ff       	call   f0c6 <_ZN2vk4raii18InstanceDispatcherC1EPFPFvvEP12VkInstance_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   171a4:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   171a8:	48 89 df             	mov    %rbx,%rdi
   171ab:	e8 4e 31 ff ff       	call   a2fe <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   171b0:	eb 36                	jmp    171e8 <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12c>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher( context.getDispatcher()->vkGetInstanceProcAddr,
   171b2:	48 89 c3             	mov    %rax,%rbx
   171b5:	45 84 ed             	test   %r13b,%r13b
   171b8:	74 13                	je     171cd <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
                                                                                                     static_cast<VkInstance>( m_instance ) ) );
   171ba:	be 48 03 00 00       	mov    $0x348,%esi
   171bf:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   171c3:	e8 68 e0 fe ff       	call   5230 <_ZdlPvm@plt>
   171c8:	eb 03                	jmp    171cd <_ZN2vk4raii8InstanceC1ERKNS0_7ContextERKNS_18InstanceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x111>
      }
   171ca:	48 89 c3             	mov    %rax,%rbx
   171cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   171d1:	48 83 c0 10          	add    $0x10,%rax
   171d5:	48 89 c7             	mov    %rax,%rdi
   171d8:	e8 bd 30 ff ff       	call   a29a <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EED1Ev>
   171dd:	48 89 d8             	mov    %rbx,%rax
   171e0:	48 89 c7             	mov    %rax,%rdi
   171e3:	e8 b8 e1 fe ff       	call   53a0 <_Unwind_Resume@plt>
   171e8:	48 83 c4 48          	add    $0x48,%rsp
   171ec:	5b                   	pop    %rbx
   171ed:	41 5c                	pop    %r12
   171ef:	41 5d                	pop    %r13
   171f1:	5d                   	pop    %rbp
   171f2:	c3                   	ret
   171f3:	90                   	nop

00000000000171f4 <_ZNK2vk4raii8InstancedeEv>:
      VULKAN_HPP_NAMESPACE::Instance const & operator*() const VULKAN_HPP_NOEXCEPT
   171f4:	55                   	push   %rbp
   171f5:	48 89 e5             	mov    %rsp,%rbp
   171f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_instance;
   171fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17200:	5d                   	pop    %rbp
   17201:	c3                   	ret

0000000000017202 <_ZN2vk14PhysicalDeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR PhysicalDevice() = default;
   17202:	55                   	push   %rbp
   17203:	48 89 e5             	mov    %rsp,%rbp
   17206:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1720a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1720e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17215:	90                   	nop
   17216:	5d                   	pop    %rbp
   17217:	c3                   	ret

0000000000017218 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>:
      PhysicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance, VkPhysicalDevice physicalDevice )
   17218:	55                   	push   %rbp
   17219:	48 89 e5             	mov    %rsp,%rbp
   1721c:	48 83 ec 20          	sub    $0x20,%rsp
   17220:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17224:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17228:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        : m_physicalDevice( physicalDevice ), m_dispatcher( instance.getDispatcher() )
   1722c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17230:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17234:	48 89 d6             	mov    %rdx,%rsi
   17237:	48 89 c7             	mov    %rax,%rdi
   1723a:	e8 45 7e ff ff       	call   f084 <_ZN2vk14PhysicalDeviceC1EP18VkPhysicalDevice_T>
   1723f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17243:	48 89 c7             	mov    %rax,%rdi
   17246:	e8 bf 21 ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   1724b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1724f:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   17253:	90                   	nop
   17254:	c9                   	leave
   17255:	c3                   	ret

0000000000017256 <_ZN2vk4raii14PhysicalDeviceC1ERKS1_>:
      PhysicalDevice( PhysicalDevice const & rhs ) : m_physicalDevice( rhs.m_physicalDevice ), m_dispatcher( rhs.m_dispatcher ) {}
   17256:	55                   	push   %rbp
   17257:	48 89 e5             	mov    %rsp,%rbp
   1725a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1725e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17266:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1726a:	48 8b 12             	mov    (%rdx),%rdx
   1726d:	48 89 10             	mov    %rdx,(%rax)
   17270:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17274:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1727c:	48 89 50 08          	mov    %rdx,0x8(%rax)
   17280:	90                   	nop
   17281:	5d                   	pop    %rbp
   17282:	c3                   	ret
   17283:	90                   	nop

0000000000017284 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>:
      PhysicalDevice( PhysicalDevice && rhs ) VULKAN_HPP_NOEXCEPT
   17284:	55                   	push   %rbp
   17285:	48 89 e5             	mov    %rsp,%rbp
   17288:	48 83 ec 30          	sub    $0x30,%rsp
   1728c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   17290:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   17294:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1729b:	00 
   1729c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   172a0:	48 89 c7             	mov    %rax,%rdi
   172a3:	e8 5a ff ff ff       	call   17202 <_ZN2vk14PhysicalDeviceC1Ev>
   172a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   172ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   172b0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   172b4:	48 89 c7             	mov    %rax,%rdi
   172b7:	e8 4f 27 00 00       	call   19a0b <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   172bc:	48 89 c2             	mov    %rax,%rdx
   172bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   172c3:	48 89 d6             	mov    %rdx,%rsi
   172c6:	48 89 c7             	mov    %rax,%rdi
   172c9:	e8 4b 27 00 00       	call   19a19 <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   172ce:	90                   	nop
   172cf:	48 89 c2             	mov    %rax,%rdx
        : m_physicalDevice( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_physicalDevice, {} ) )
   172d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   172d6:	48 89 10             	mov    %rdx,(%rax)
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   172d9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   172e0:	00 
   172e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   172e5:	48 83 c0 08          	add    $0x8,%rax
   172e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      return std::exchange<T>( obj, std::forward<U>( newValue ) );
   172ed:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   172f1:	48 89 c7             	mov    %rax,%rdi
   172f4:	e8 50 27 00 00       	call   19a49 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   172f9:	48 89 c2             	mov    %rax,%rdx
   172fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17300:	48 89 d6             	mov    %rdx,%rsi
   17303:	48 89 c7             	mov    %rax,%rdi
   17306:	e8 4c 27 00 00       	call   19a57 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   1730b:	90                   	nop
        , m_dispatcher( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::exchange( rhs.m_dispatcher, nullptr ) )
   1730c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   17310:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   17314:	90                   	nop
   17315:	c9                   	leave
   17316:	c3                   	ret
   17317:	90                   	nop

0000000000017318 <_ZNK2vk4raii14PhysicalDevicedeEv>:
      VULKAN_HPP_NAMESPACE::PhysicalDevice const & operator*() const VULKAN_HPP_NOEXCEPT
   17318:	55                   	push   %rbp
   17319:	48 89 e5             	mov    %rsp,%rbp
   1731c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_physicalDevice;
   17320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   17324:	5d                   	pop    %rbp
   17325:	c3                   	ret

0000000000017326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * getDispatcher() const
   17326:	55                   	push   %rbp
   17327:	48 89 e5             	mov    %rsp,%rbp
   1732a:	48 83 ec 10          	sub    $0x10,%rsp
   1732e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   17332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17336:	48 8b 40 08          	mov    0x8(%rax),%rax
   1733a:	48 89 c7             	mov    %rax,%rdi
   1733d:	e8 10 f2 fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   17342:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   17348:	74 28                	je     17372 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv+0x4c>
   1734a:	48 8d 05 4f f8 00 00 	lea    0xf84f(%rip),%rax        # 26ba0 <_ZNSt8__detailL19__atomic_spin_countE+0x3ee4>
   17351:	48 89 c1             	mov    %rax,%rcx
   17354:	ba 0a 0b 00 00       	mov    $0xb0a,%edx
   17359:	48 8d 05 78 f7 00 00 	lea    0xf778(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
   17360:	48 89 c6             	mov    %rax,%rsi
   17363:	48 8d 05 96 f7 00 00 	lea    0xf796(%rip),%rax        # 26b00 <_ZNSt8__detailL19__atomic_spin_countE+0x3e44>
   1736a:	48 89 c7             	mov    %rax,%rdi
   1736d:	e8 9e dd fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   17372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17376:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   1737a:	c9                   	leave
   1737b:	c3                   	ret

000000000001737c <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
   1737c:	55                   	push   %rbp
   1737d:	48 89 e5             	mov    %rsp,%rbp
   17380:	48 83 ec 10          	sub    $0x10,%rsp
   17384:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1738c:	48 89 c7             	mov    %rax,%rdi
   1738f:	e8 0e 15 00 00       	call   188a2 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>
   17394:	90                   	nop
   17395:	c9                   	leave
   17396:	c3                   	ret
   17397:	90                   	nop

0000000000017398 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
   17398:	55                   	push   %rbp
   17399:	48 89 e5             	mov    %rsp,%rbp
   1739c:	48 83 ec 10          	sub    $0x10,%rsp
   173a0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   173a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   173a8:	48 89 c7             	mov    %rax,%rdi
   173ab:	e8 ca 14 00 00       	call   1887a <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>
   173b0:	90                   	nop
   173b1:	c9                   	leave
   173b2:	c3                   	ret
   173b3:	90                   	nop

00000000000173b4 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
   173b4:	55                   	push   %rbp
   173b5:	48 89 e5             	mov    %rsp,%rbp
   173b8:	48 83 ec 10          	sub    $0x10,%rsp
   173bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   173c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   173c4:	48 89 c7             	mov    %rax,%rdi
   173c7:	e8 cc ff ff ff       	call   17398 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
   173cc:	90                   	nop
   173cd:	c9                   	leave
   173ce:	c3                   	ret
   173cf:	90                   	nop

00000000000173d0 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   173d0:	55                   	push   %rbp
   173d1:	48 89 e5             	mov    %rsp,%rbp
   173d4:	48 83 ec 10          	sub    $0x10,%rsp
   173d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   173dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   173e0:	48 89 c7             	mov    %rax,%rdi
   173e3:	e8 58 15 00 00       	call   18940 <_ZNSaIP18VkPhysicalDevice_TED1Ev>
   173e8:	90                   	nop
   173e9:	c9                   	leave
   173ea:	c3                   	ret

00000000000173eb <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   173eb:	55                   	push   %rbp
   173ec:	48 89 e5             	mov    %rsp,%rbp
   173ef:	53                   	push   %rbx
   173f0:	48 83 ec 18          	sub    $0x18,%rsp
   173f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   173f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
   173fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17400:	48 89 c7             	mov    %rax,%rdi
   17403:	e8 1e 00 00 00       	call   17426 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   17408:	48 8b 18             	mov    (%rax),%rbx
   1740b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1740f:	48 89 c7             	mov    %rax,%rdi
   17412:	e8 0f 00 00 00       	call   17426 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>
   17417:	48 8b 00             	mov    (%rax),%rax
   1741a:	48 39 c3             	cmp    %rax,%rbx
   1741d:	0f 94 c0             	sete   %al
   17420:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17424:	c9                   	leave
   17425:	c3                   	ret

0000000000017426 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   17426:	55                   	push   %rbp
   17427:	48 89 e5             	mov    %rsp,%rbp
   1742a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1742e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17432:	5d                   	pop    %rbp
   17433:	c3                   	ret

0000000000017434 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   17434:	55                   	push   %rbp
   17435:	48 89 e5             	mov    %rsp,%rbp
   17438:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1743c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17440:	48 8b 00             	mov    (%rax),%rax
   17443:	5d                   	pop    %rbp
   17444:	c3                   	ret
   17445:	90                   	nop

0000000000017446 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE>:
      PhysicalDevices( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const & instance )
   17446:	55                   	push   %rbp
   17447:	48 89 e5             	mov    %rsp,%rbp
   1744a:	41 54                	push   %r12
   1744c:	53                   	push   %rbx
   1744d:	48 83 ec 70          	sub    $0x70,%rsp
   17451:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   17455:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      {
   17459:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1745d:	48 89 c7             	mov    %rax,%rdi
   17460:	e8 4f ff ff ff       	call   173b4 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EEC1Ev>
        VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::InstanceDispatcher const * dispatcher = instance.getDispatcher();
   17465:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   17469:	48 89 c7             	mov    %rax,%rdi
   1746c:	e8 99 1f ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   17471:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        std::vector<VkPhysicalDevice>                                               physicalDevices;
   17475:	66 0f ef c0          	pxor   %xmm0,%xmm0
   17479:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
   1747d:	66 0f d6 45 c0       	movq   %xmm0,-0x40(%rbp)
            dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, nullptr ) );
   17482:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17486:	48 8b 58 18          	mov    0x18(%rax),%rbx
   1748a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1748e:	48 89 c7             	mov    %rax,%rdi
   17491:	e8 5e fd ff ff       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
   17496:	48 89 c7             	mov    %rax,%rdi
   17499:	e8 f6 1b ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   1749e:	48 89 c1             	mov    %rax,%rcx
   174a1:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   174a5:	ba 00 00 00 00       	mov    $0x0,%edx
   174aa:	48 89 c6             	mov    %rax,%rsi
   174ad:	48 89 cf             	mov    %rcx,%rdi
   174b0:	ff d3                	call   *%rbx
   174b2:	89 45 ec             	mov    %eax,-0x14(%rbp)
          if ( ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess ) && physicalDeviceCount )
   174b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   174b9:	75 5b                	jne    17516 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
   174bb:	8b 45 ac             	mov    -0x54(%rbp),%eax
   174be:	85 c0                	test   %eax,%eax
   174c0:	74 54                	je     17516 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0xd0>
            physicalDevices.resize( physicalDeviceCount );
   174c2:	8b 45 ac             	mov    -0x54(%rbp),%eax
   174c5:	89 c2                	mov    %eax,%edx
   174c7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   174cb:	48 89 d6             	mov    %rdx,%rsi
   174ce:	48 89 c7             	mov    %rax,%rdi
   174d1:	e8 08 15 00 00       	call   189de <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>
              dispatcher->vkEnumeratePhysicalDevices( static_cast<VkInstance>( *instance ), &physicalDeviceCount, physicalDevices.data() ) );
   174d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   174da:	48 8b 58 18          	mov    0x18(%rax),%rbx
   174de:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   174e2:	48 89 c7             	mov    %rax,%rdi
   174e5:	e8 7a 15 00 00       	call   18a64 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>
   174ea:	49 89 c4             	mov    %rax,%r12
   174ed:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   174f1:	48 89 c7             	mov    %rax,%rdi
   174f4:	e8 fb fc ff ff       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
   174f9:	48 89 c7             	mov    %rax,%rdi
   174fc:	e8 93 1b ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   17501:	48 89 c1             	mov    %rax,%rcx
   17504:	48 8d 45 ac          	lea    -0x54(%rbp),%rax
   17508:	4c 89 e2             	mov    %r12,%rdx
   1750b:	48 89 c6             	mov    %rax,%rsi
   1750e:	48 89 cf             	mov    %rcx,%rdi
   17511:	ff d3                	call   *%rbx
   17513:	89 45 ec             	mov    %eax,-0x14(%rbp)
        } while ( result == VULKAN_HPP_NAMESPACE::Result::eIncomplete );
   17516:	83 7d ec 05          	cmpl   $0x5,-0x14(%rbp)
   1751a:	0f 84 62 ff ff ff    	je     17482 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x3c>
        if ( result == VULKAN_HPP_NAMESPACE::Result::eSuccess )
   17520:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   17524:	0f 85 cb 00 00 00    	jne    175f5 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1af>
          VULKAN_HPP_ASSERT( physicalDeviceCount <= physicalDevices.size() );
   1752a:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1752d:	89 c3                	mov    %eax,%ebx
   1752f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   17533:	48 89 c7             	mov    %rax,%rdi
   17536:	e8 4d 15 00 00       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   1753b:	48 39 d8             	cmp    %rbx,%rax
   1753e:	73 28                	jae    17568 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x122>
   17540:	48 8d 05 b1 f6 00 00 	lea    0xf6b1(%rip),%rax        # 26bf8 <_ZNSt8__detailL19__atomic_spin_countE+0x3f3c>
   17547:	48 89 c1             	mov    %rax,%rcx
   1754a:	ba 6e 0c 00 00       	mov    $0xc6e,%edx
   1754f:	48 8d 05 82 f5 00 00 	lea    0xf582(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
   17556:	48 89 c6             	mov    %rax,%rsi
   17559:	48 8d 05 e0 f6 00 00 	lea    0xf6e0(%rip),%rax        # 26c40 <_ZNSt8__detailL19__atomic_spin_countE+0x3f84>
   17560:	48 89 c7             	mov    %rax,%rdi
   17563:	e8 a8 db fe ff       	call   5110 <__assert_fail@plt>
          this->reserve( physicalDeviceCount );
   17568:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1756c:	8b 55 ac             	mov    -0x54(%rbp),%edx
   1756f:	89 d2                	mov    %edx,%edx
   17571:	48 89 d6             	mov    %rdx,%rsi
   17574:	48 89 c7             	mov    %rax,%rdi
   17577:	e8 54 15 00 00       	call   18ad0 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>
          for ( auto const & physicalDevice : physicalDevices )
   1757c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   17580:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   17584:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17588:	48 89 c7             	mov    %rax,%rdi
   1758b:	e8 5a 16 00 00       	call   18bea <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>
   17590:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   17594:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17598:	48 89 c7             	mov    %rax,%rdi
   1759b:	e8 70 16 00 00       	call   18c10 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>
   175a0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   175a4:	eb 33                	jmp    175d9 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x193>
   175a6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   175aa:	48 89 c7             	mov    %rax,%rdi
   175ad:	e8 82 fe ff ff       	call   17434 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEdeEv>
   175b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            this->emplace_back( instance, physicalDevice );
   175b6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   175ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   175be:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
   175c2:	48 89 ce             	mov    %rcx,%rsi
   175c5:	48 89 c7             	mov    %rax,%rdi
   175c8:	e8 8d 16 00 00       	call   18c5a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>
          for ( auto const & physicalDevice : physicalDevices )
   175cd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   175d1:	48 89 c7             	mov    %rax,%rdi
   175d4:	e8 61 16 00 00       	call   18c3a <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>
   175d9:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   175dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   175e1:	48 89 d6             	mov    %rdx,%rsi
   175e4:	48 89 c7             	mov    %rax,%rdi
   175e7:	e8 ff fd ff ff       	call   173eb <_ZN9__gnu_cxxeqIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
   175ec:	83 f0 01             	xor    $0x1,%eax
   175ef:	84 c0                	test   %al,%al
   175f1:	75 b3                	jne    175a6 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x160>
   175f3:	eb 14                	jmp    17609 <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1c3>
          throwResultException( result, "vkEnumeratePhysicalDevices" );
   175f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
   175f8:	48 8d 15 d3 b6 00 00 	lea    0xb6d3(%rip),%rdx        # 22cd2 <_ZNSt8__detailL19__atomic_spin_countE+0x16>
   175ff:	48 89 d6             	mov    %rdx,%rsi
   17602:	89 c7                	mov    %eax,%edi
   17604:	e8 7d 50 ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   17609:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1760d:	48 89 c7             	mov    %rax,%rdi
   17610:	e8 85 13 00 00       	call   1899a <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   17615:	eb 26                	jmp    1763d <_ZN2vk4raii15PhysicalDevicesC1ERKNS0_8InstanceE+0x1f7>
   17617:	48 89 c3             	mov    %rax,%rbx
   1761a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1761e:	48 89 c7             	mov    %rax,%rdi
   17621:	e8 74 13 00 00       	call   1899a <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   17626:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1762a:	48 89 c7             	mov    %rax,%rdi
   1762d:	e8 ca 12 00 00       	call   188fc <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   17632:	48 89 d8             	mov    %rbx,%rax
   17635:	48 89 c7             	mov    %rax,%rdi
   17638:	e8 63 dd fe ff       	call   53a0 <_Unwind_Resume@plt>
   1763d:	48 83 c4 70          	add    $0x70,%rsp
   17641:	5b                   	pop    %rbx
   17642:	41 5c                	pop    %r12
   17644:	5d                   	pop    %rbp
   17645:	c3                   	ret

0000000000017646 <_ZN2vk6DeviceC1Ev>:
    VULKAN_HPP_CONSTEXPR Device() = default;
   17646:	55                   	push   %rbp
   17647:	48 89 e5             	mov    %rsp,%rbp
   1764a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1764e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17652:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17659:	90                   	nop
   1765a:	5d                   	pop    %rbp
   1765b:	c3                   	ret

000000000001765c <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      Device( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice const &         physicalDevice,
   1765c:	55                   	push   %rbp
   1765d:	48 89 e5             	mov    %rsp,%rbp
   17660:	41 55                	push   %r13
   17662:	41 54                	push   %r12
   17664:	53                   	push   %rbx
   17665:	48 83 ec 48          	sub    $0x48,%rsp
   17669:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1766d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   17671:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   17675:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   17679:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1767d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17684:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17688:	48 89 c7             	mov    %rax,%rdi
   1768b:	e8 b6 ff ff ff       	call   17646 <_ZN2vk6DeviceC1Ev>
   17690:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   17694:	48 89 c7             	mov    %rax,%rdi
   17697:	e8 6e 11 00 00       	call   1880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   1769c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   176a0:	48 89 42 08          	mov    %rax,0x8(%rdx)
   176a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   176a8:	48 83 c0 10          	add    $0x10,%rax
   176ac:	48 89 c7             	mov    %rax,%rdi
   176af:	e8 aa 16 00 00       	call   18d5e <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   176b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   176b8:	48 89 c7             	mov    %rax,%rdi
   176bb:	e8 66 fc ff ff       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   176c0:	4c 8b 68 58          	mov    0x58(%rax),%r13
                                                          reinterpret_cast<VkDevice *>( &m_device ) ) );
   176c4:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
                                                          reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   176c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   176cc:	48 8b 58 08          	mov    0x8(%rax),%rbx
          physicalDevice.getDispatcher()->vkCreateDevice( static_cast<VkPhysicalDevice>( *physicalDevice ),
   176d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   176d4:	48 89 c7             	mov    %rax,%rdi
   176d7:	e8 3c fc ff ff       	call   17318 <_ZNK2vk4raii14PhysicalDevicedeEv>
   176dc:	48 89 c7             	mov    %rax,%rdi
   176df:	e8 ba 79 ff ff       	call   f09e <_ZNK2vk14PhysicalDevicecvP18VkPhysicalDevice_TEv>
   176e4:	48 89 c7             	mov    %rax,%rdi
   176e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   176eb:	4c 89 e1             	mov    %r12,%rcx
   176ee:	48 89 da             	mov    %rbx,%rdx
   176f1:	48 89 c6             	mov    %rax,%rsi
   176f4:	41 ff d5             	call   *%r13
   176f7:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   176fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   176fe:	74 14                	je     17714 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xb8>
          throwResultException( result, "vkCreateDevice" );
   17700:	8b 45 dc             	mov    -0x24(%rbp),%eax
   17703:	48 8d 15 ca b6 00 00 	lea    0xb6ca(%rip),%rdx        # 22dd4 <_ZNSt8__detailL19__atomic_spin_countE+0x118>
   1770a:	48 89 d6             	mov    %rdx,%rsi
   1770d:	89 c7                	mov    %eax,%edi
   1770f:	e8 72 4f ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   17714:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17718:	48 8d 58 10          	lea    0x10(%rax),%rbx
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   1771c:	bf b8 0f 00 00       	mov    $0xfb8,%edi
   17721:	e8 fa da fe ff       	call   5220 <_Znwm@plt>
   17726:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   1772a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   17730:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17734:	48 89 c7             	mov    %rax,%rdi
   17737:	e8 f2 18 ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   1773c:	49 89 c4             	mov    %rax,%r12
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   1773f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17743:	48 89 c7             	mov    %rax,%rdi
   17746:	e8 db fb ff ff       	call   17326 <_ZNK2vk4raii14PhysicalDevice13getDispatcherEv>
   1774b:	48 8b 80 40 03 00 00 	mov    0x340(%rax),%rax
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   17752:	4c 89 e2             	mov    %r12,%rdx
   17755:	48 89 c6             	mov    %rax,%rsi
   17758:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   1775c:	e8 4b 8c ff ff       	call   103ac <_ZN2vk4raii16DeviceDispatcherC1EPFPFvvEP10VkDevice_TPKcES5_>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   17761:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   17765:	48 89 df             	mov    %rbx,%rdi
   17768:	e8 af 2c ff ff       	call   a41c <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EE5resetEPS2_>
      }
   1776d:	eb 36                	jmp    177a5 <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x149>
        m_dispatcher.reset( new VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher( physicalDevice.getDispatcher()->vkGetDeviceProcAddr,
   1776f:	48 89 c3             	mov    %rax,%rbx
   17772:	45 84 ed             	test   %r13b,%r13b
   17775:	74 13                	je     1778a <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
                                                                                                   static_cast<VkDevice>( m_device ) ) );
   17777:	be b8 0f 00 00       	mov    $0xfb8,%esi
   1777c:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
   17780:	e8 ab da fe ff       	call   5230 <_ZdlPvm@plt>
   17785:	eb 03                	jmp    1778a <_ZN2vk4raii6DeviceC1ERKNS0_14PhysicalDeviceERKNS_16DeviceCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0x12e>
      }
   17787:	48 89 c3             	mov    %rax,%rbx
   1778a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1778e:	48 83 c0 10          	add    $0x10,%rax
   17792:	48 89 c7             	mov    %rax,%rdi
   17795:	e8 1e 2c ff ff       	call   a3b8 <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EED1Ev>
   1779a:	48 89 d8             	mov    %rbx,%rax
   1779d:	48 89 c7             	mov    %rax,%rdi
   177a0:	e8 fb db fe ff       	call   53a0 <_Unwind_Resume@plt>
   177a5:	48 83 c4 48          	add    $0x48,%rsp
   177a9:	5b                   	pop    %rbx
   177aa:	41 5c                	pop    %r12
   177ac:	41 5d                	pop    %r13
   177ae:	5d                   	pop    %rbp
   177af:	c3                   	ret

00000000000177b0 <_ZNK2vk4raii6DevicedeEv>:
      VULKAN_HPP_NAMESPACE::Device const & operator*() const VULKAN_HPP_NOEXCEPT
   177b0:	55                   	push   %rbp
   177b1:	48 89 e5             	mov    %rsp,%rbp
   177b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_device;
   177b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   177bc:	5d                   	pop    %rbp
   177bd:	c3                   	ret

00000000000177be <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      CommandPool( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const &                 device,
   177be:	55                   	push   %rbp
   177bf:	48 89 e5             	mov    %rsp,%rbp
   177c2:	41 55                	push   %r13
   177c4:	41 54                	push   %r12
   177c6:	53                   	push   %rbx
   177c7:	48 83 ec 38          	sub    $0x38,%rsp
   177cb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   177cf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   177d3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   177d7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_device( *device )
   177db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   177df:	48 89 c7             	mov    %rax,%rdi
   177e2:	e8 c9 ff ff ff       	call   177b0 <_ZNK2vk4raii6DevicedeEv>
   177e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   177eb:	48 8b 00             	mov    (%rax),%rax
   177ee:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( device.getDispatcher() )
   177f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   177f5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   177fc:	00 
   177fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17801:	48 83 c0 08          	add    $0x8,%rax
   17805:	48 89 c7             	mov    %rax,%rdi
   17808:	e8 a3 78 ff ff       	call   f0b0 <_ZN2vk11CommandPoolC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   1780d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   17811:	48 89 c7             	mov    %rax,%rdi
   17814:	e8 f1 0f 00 00       	call   1880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   17819:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1781d:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( device.getDispatcher() )
   17821:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17825:	48 89 c7             	mov    %rax,%rdi
   17828:	e8 3f 1d ff ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   1782d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17831:	48 89 42 18          	mov    %rax,0x18(%rdx)
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   17835:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17839:	48 89 c7             	mov    %rax,%rdi
   1783c:	e8 2b 1d ff ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   17841:	4c 8b a0 38 02 00 00 	mov    0x238(%rax),%r12
                                                       reinterpret_cast<VkCommandPool *>( &m_commandPool ) ) );
   17848:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1784c:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                       reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   17850:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17854:	48 8b 58 10          	mov    0x10(%rax),%rbx
          device.getDispatcher()->vkCreateCommandPool( static_cast<VkDevice>( *device ),
   17858:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1785c:	48 89 c7             	mov    %rax,%rdi
   1785f:	e8 4c ff ff ff       	call   177b0 <_ZNK2vk4raii6DevicedeEv>
   17864:	48 89 c7             	mov    %rax,%rdi
   17867:	e8 c2 17 ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   1786c:	48 89 c7             	mov    %rax,%rdi
   1786f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17873:	4c 89 e9             	mov    %r13,%rcx
   17876:	48 89 da             	mov    %rbx,%rdx
   17879:	48 89 c6             	mov    %rax,%rsi
   1787c:	41 ff d4             	call   *%r12
   1787f:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   17882:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   17886:	74 14                	je     1789c <_ZN2vk4raii11CommandPoolC1ERKNS0_6DeviceERKNS_21CommandPoolCreateInfoENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateCommandPool" );
   17888:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1788b:	48 8d 15 71 c5 00 00 	lea    0xc571(%rip),%rdx        # 23e03 <_ZNSt8__detailL19__atomic_spin_countE+0x1147>
   17892:	48 89 d6             	mov    %rdx,%rsi
   17895:	89 c7                	mov    %eax,%edi
   17897:	e8 ea 4d ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   1789c:	90                   	nop
   1789d:	48 83 c4 38          	add    $0x38,%rsp
   178a1:	5b                   	pop    %rbx
   178a2:	41 5c                	pop    %r12
   178a4:	41 5d                	pop    %r13
   178a6:	5d                   	pop    %rbp
   178a7:	c3                   	ret

00000000000178a8 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>:
    VULKAN_HPP_CONSTEXPR         DebugUtilsMessengerEXT() = default;
   178a8:	55                   	push   %rbp
   178a9:	48 89 e5             	mov    %rsp,%rbp
   178ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178b4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   178bb:	90                   	nop
   178bc:	5d                   	pop    %rbp
   178bd:	c3                   	ret

00000000000178be <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE>:
      DebugUtilsMessengerEXT( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   178be:	55                   	push   %rbp
   178bf:	48 89 e5             	mov    %rsp,%rbp
   178c2:	41 55                	push   %r13
   178c4:	41 54                	push   %r12
   178c6:	53                   	push   %rbx
   178c7:	48 83 ec 38          	sub    $0x38,%rsp
   178cb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   178cf:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   178d3:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   178d7:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        : m_instance( *instance )
   178db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   178df:	48 89 c7             	mov    %rax,%rdi
   178e2:	e8 0d f9 ff ff       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
   178e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   178eb:	48 8b 00             	mov    (%rax),%rax
   178ee:	48 89 02             	mov    %rax,(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   178f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   178f5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   178fc:	00 
   178fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17901:	48 83 c0 08          	add    $0x8,%rax
   17905:	48 89 c7             	mov    %rax,%rdi
   17908:	e8 9b ff ff ff       	call   178a8 <_ZN2vk22DebugUtilsMessengerEXTC1Ev>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   1790d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   17911:	48 89 c7             	mov    %rax,%rdi
   17914:	e8 f1 0e 00 00       	call   1880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   17919:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1791d:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   17921:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17925:	48 89 c7             	mov    %rax,%rdi
   17928:	e8 dd 1a ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   1792d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   17931:	48 89 42 18          	mov    %rax,0x18(%rdx)
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   17935:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   17939:	48 89 c7             	mov    %rax,%rdi
   1793c:	e8 c9 1a ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   17941:	4c 8b a0 18 01 00 00 	mov    0x118(%rax),%r12
                                                                    reinterpret_cast<VkDebugUtilsMessengerEXT *>( &m_messenger ) ) );
   17948:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1794c:	4c 8d 68 08          	lea    0x8(%rax),%r13
                                                                    reinterpret_cast<const VkAllocationCallbacks *>( m_allocator ),
   17950:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   17954:	48 8b 58 10          	mov    0x10(%rax),%rbx
          instance.getDispatcher()->vkCreateDebugUtilsMessengerEXT( static_cast<VkInstance>( *instance ),
   17958:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1795c:	48 89 c7             	mov    %rax,%rdi
   1795f:	e8 90 f8 ff ff       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
   17964:	48 89 c7             	mov    %rax,%rdi
   17967:	e8 28 17 ff ff       	call   9094 <_ZNK2vk8InstancecvP12VkInstance_TEv>
   1796c:	48 89 c7             	mov    %rax,%rdi
   1796f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   17973:	4c 89 e9             	mov    %r13,%rcx
   17976:	48 89 da             	mov    %rbx,%rdx
   17979:	48 89 c6             	mov    %rax,%rsi
   1797c:	41 ff d4             	call   *%r12
   1797f:	89 45 dc             	mov    %eax,-0x24(%rbp)
        if ( result != VULKAN_HPP_NAMESPACE::Result::eSuccess )
   17982:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   17986:	74 14                	je     1799c <_ZN2vk4raii22DebugUtilsMessengerEXTC1ERKNS0_8InstanceERKNS_32DebugUtilsMessengerCreateInfoEXTENS_8OptionalIKNS_19AllocationCallbacksEEE+0xde>
          throwResultException( result, "vkCreateDebugUtilsMessengerEXT" );
   17988:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1798b:	48 8d 15 7e b7 00 00 	lea    0xb77e(%rip),%rdx        # 23110 <_ZNSt8__detailL19__atomic_spin_countE+0x454>
   17992:	48 89 d6             	mov    %rdx,%rsi
   17995:	89 c7                	mov    %eax,%edi
   17997:	e8 ea 4c ff ff       	call   c686 <_ZN2vk12_GLOBAL__N_120throwResultExceptionENS_6ResultEPKc>
      }
   1799c:	90                   	nop
   1799d:	48 83 c4 38          	add    $0x38,%rsp
   179a1:	5b                   	pop    %rbx
   179a2:	41 5c                	pop    %r12
   179a4:	41 5d                	pop    %r13
   179a6:	5d                   	pop    %rbp
   179a7:	c3                   	ret

00000000000179a8 <_ZN2vk5QueueC1Ev>:
    VULKAN_HPP_CONSTEXPR Queue() = default;
   179a8:	55                   	push   %rbp
   179a9:	48 89 e5             	mov    %rsp,%rbp
   179ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   179b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179b4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   179bb:	90                   	nop
   179bc:	5d                   	pop    %rbp
   179bd:	c3                   	ret

00000000000179be <_ZN2vk4raii5QueueC1ERKNS0_6DeviceEjj>:
      Queue( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Device const & device, uint32_t queueFamilyIndex, uint32_t queueIndex )
   179be:	55                   	push   %rbp
   179bf:	48 89 e5             	mov    %rsp,%rbp
   179c2:	41 54                	push   %r12
   179c4:	53                   	push   %rbx
   179c5:	48 83 ec 20          	sub    $0x20,%rsp
   179c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   179cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   179d1:	89 55 dc             	mov    %edx,-0x24(%rbp)
   179d4:	89 4d d8             	mov    %ecx,-0x28(%rbp)
        : m_dispatcher( device.getDispatcher() )
   179d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   179db:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   179e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   179e6:	48 89 c7             	mov    %rax,%rdi
   179e9:	e8 ba ff ff ff       	call   179a8 <_ZN2vk5QueueC1Ev>
   179ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   179f2:	48 89 c7             	mov    %rax,%rdi
   179f5:	e8 72 1b ff ff       	call   956c <_ZNK2vk4raii6Device13getDispatcherEv>
   179fa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   179fe:	48 89 42 08          	mov    %rax,0x8(%rdx)
        getDispatcher()->vkGetDeviceQueue( static_cast<VkDevice>( *device ), queueFamilyIndex, queueIndex, reinterpret_cast<VkQueue *>( &m_queue ) );
   17a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17a06:	48 89 c7             	mov    %rax,%rdi
   17a09:	e8 66 00 00 00       	call   17a74 <_ZNK2vk4raii5Queue13getDispatcherEv>
   17a0e:	4c 8b 60 20          	mov    0x20(%rax),%r12
   17a12:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   17a16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17a1a:	48 89 c7             	mov    %rax,%rdi
   17a1d:	e8 8e fd ff ff       	call   177b0 <_ZNK2vk4raii6DevicedeEv>
   17a22:	48 89 c7             	mov    %rax,%rdi
   17a25:	e8 04 16 ff ff       	call   902e <_ZNK2vk6DevicecvP10VkDevice_TEv>
   17a2a:	48 89 c7             	mov    %rax,%rdi
   17a2d:	8b 55 d8             	mov    -0x28(%rbp),%edx
   17a30:	8b 45 dc             	mov    -0x24(%rbp),%eax
   17a33:	48 89 d9             	mov    %rbx,%rcx
   17a36:	89 c6                	mov    %eax,%esi
   17a38:	41 ff d4             	call   *%r12
      }
   17a3b:	90                   	nop
   17a3c:	48 83 c4 20          	add    $0x20,%rsp
   17a40:	5b                   	pop    %rbx
   17a41:	41 5c                	pop    %r12
   17a43:	5d                   	pop    %rbp
   17a44:	c3                   	ret
   17a45:	90                   	nop

0000000000017a46 <_ZN2vk4raii5QueueC1ERKS1_>:
      Queue( Queue const & rhs ) : m_queue( rhs.m_queue ), m_dispatcher( rhs.m_dispatcher ) {}
   17a46:	55                   	push   %rbp
   17a47:	48 89 e5             	mov    %rsp,%rbp
   17a4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17a4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17a52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17a5a:	48 8b 12             	mov    (%rdx),%rdx
   17a5d:	48 89 10             	mov    %rdx,(%rax)
   17a60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a64:	48 8b 50 08          	mov    0x8(%rax),%rdx
   17a68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a6c:	48 89 50 08          	mov    %rdx,0x8(%rax)
   17a70:	90                   	nop
   17a71:	5d                   	pop    %rbp
   17a72:	c3                   	ret
   17a73:	90                   	nop

0000000000017a74 <_ZNK2vk4raii5Queue13getDispatcherEv>:
      VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::DeviceDispatcher const * getDispatcher() const
   17a74:	55                   	push   %rbp
   17a75:	48 89 e5             	mov    %rsp,%rbp
   17a78:	48 83 ec 10          	sub    $0x10,%rsp
   17a7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        VULKAN_HPP_ASSERT( m_dispatcher->getVkHeaderVersion() == VK_HEADER_VERSION );
   17a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17a84:	48 8b 40 08          	mov    0x8(%rax),%rax
   17a88:	48 89 c7             	mov    %rax,%rdi
   17a8b:	e8 c2 ea fe ff       	call   6552 <_ZNK2vk18DispatchLoaderBase18getVkHeaderVersionEv>
   17a90:	48 3d e7 00 00 00    	cmp    $0xe7,%rax
   17a96:	74 28                	je     17ac0 <_ZNK2vk4raii5Queue13getDispatcherEv+0x4c>
   17a98:	48 8d 05 21 f2 00 00 	lea    0xf221(%rip),%rax        # 26cc0 <_ZNSt8__detailL19__atomic_spin_countE+0x4004>
   17a9f:	48 89 c1             	mov    %rax,%rcx
   17aa2:	ba c7 23 00 00       	mov    $0x23c7,%edx
   17aa7:	48 8d 05 2a f0 00 00 	lea    0xf02a(%rip),%rax        # 26ad8 <_ZNSt8__detailL19__atomic_spin_countE+0x3e1c>
   17aae:	48 89 c6             	mov    %rax,%rsi
   17ab1:	48 8d 05 48 f0 00 00 	lea    0xf048(%rip),%rax        # 26b00 <_ZNSt8__detailL19__atomic_spin_countE+0x3e44>
   17ab8:	48 89 c7             	mov    %rax,%rdi
   17abb:	e8 50 d6 fe ff       	call   5110 <__assert_fail@plt>
        return m_dispatcher;
   17ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ac4:	48 8b 40 08          	mov    0x8(%rax),%rax
      }
   17ac8:	c9                   	leave
   17ac9:	c3                   	ret

0000000000017aca <_ZN2vk4raii10SurfaceKHRC1ERKNS0_8InstanceEP14VkSurfaceKHR_TNS_8OptionalIKNS_19AllocationCallbacksEEE>:
      SurfaceKHR( VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::Instance const &               instance,
   17aca:	55                   	push   %rbp
   17acb:	48 89 e5             	mov    %rsp,%rbp
   17ace:	48 83 ec 20          	sub    $0x20,%rsp
   17ad2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ad6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17ada:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   17ade:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
        : m_instance( *instance )
   17ae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17ae6:	48 89 c7             	mov    %rax,%rdi
   17ae9:	e8 06 f7 ff ff       	call   171f4 <_ZNK2vk4raii8InstancedeEv>
   17aee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17af2:	48 8b 00             	mov    (%rax),%rax
   17af5:	48 89 02             	mov    %rax,(%rdx)
        , m_surface( surface )
   17af8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17afc:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17b00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17b04:	48 89 c6             	mov    %rax,%rsi
   17b07:	48 89 d7             	mov    %rdx,%rdi
   17b0a:	e8 5b 75 ff ff       	call   f06a <_ZN2vk10SurfaceKHRC1EP14VkSurfaceKHR_T>
        , m_allocator( static_cast<const VULKAN_HPP_NAMESPACE::AllocationCallbacks *>( allocator ) )
   17b0f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   17b13:	48 89 c7             	mov    %rax,%rdi
   17b16:	e8 ef 0c 00 00       	call   1880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>
   17b1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17b1f:	48 89 42 10          	mov    %rax,0x10(%rdx)
        , m_dispatcher( instance.getDispatcher() )
   17b23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b27:	48 89 c7             	mov    %rax,%rdi
   17b2a:	e8 db 18 ff ff       	call   940a <_ZNK2vk4raii8Instance13getDispatcherEv>
   17b2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17b33:	48 89 42 18          	mov    %rax,0x18(%rdx)
      }
   17b37:	90                   	nop
   17b38:	c9                   	leave
   17b39:	c3                   	ret

0000000000017b3a <_ZNK2vk4raii10SurfaceKHRdeEv>:
      VULKAN_HPP_NAMESPACE::SurfaceKHR const & operator*() const VULKAN_HPP_NOEXCEPT
   17b3a:	55                   	push   %rbp
   17b3b:	48 89 e5             	mov    %rsp,%rbp
   17b3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        return m_surface;
   17b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b46:	48 83 c0 08          	add    $0x8,%rax
      }
   17b4a:	5d                   	pop    %rbp
   17b4b:	c3                   	ret

0000000000017b4c <_ZN2vk4raii15PhysicalDevicesD1Ev>:
    class PhysicalDevices : public std::vector<VULKAN_HPP_NAMESPACE::VULKAN_HPP_RAII_NAMESPACE::PhysicalDevice>
   17b4c:	55                   	push   %rbp
   17b4d:	48 89 e5             	mov    %rsp,%rbp
   17b50:	48 83 ec 10          	sub    $0x10,%rsp
   17b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b5c:	48 89 c7             	mov    %rax,%rdi
   17b5f:	e8 98 0d 00 00       	call   188fc <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   17b64:	90                   	nop
   17b65:	c9                   	leave
   17b66:	c3                   	ret
   17b67:	90                   	nop

0000000000017b68 <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>:
    VULKAN_HPP_CONSTEXPR ArrayWrapper1D() VULKAN_HPP_NOEXCEPT : std::array<T, N>() {}
   17b68:	55                   	push   %rbp
   17b69:	48 89 e5             	mov    %rsp,%rbp
   17b6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17b74:	b9 00 01 00 00       	mov    $0x100,%ecx
   17b79:	be 00 00 00 00       	mov    $0x0,%esi
   17b7e:	48 89 30             	mov    %rsi,(%rax)
   17b81:	89 ca                	mov    %ecx,%edx
   17b83:	48 01 c2             	add    %rax,%rdx
   17b86:	48 83 c2 08          	add    $0x8,%rdx
   17b8a:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   17b8e:	48 8d 50 08          	lea    0x8(%rax),%rdx
   17b92:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   17b96:	48 29 d0             	sub    %rdx,%rax
   17b99:	01 c1                	add    %eax,%ecx
   17b9b:	83 e1 f8             	and    $0xfffffff8,%ecx
   17b9e:	89 c8                	mov    %ecx,%eax
   17ba0:	c1 e8 03             	shr    $0x3,%eax
   17ba3:	89 c1                	mov    %eax,%ecx
   17ba5:	48 89 d7             	mov    %rdx,%rdi
   17ba8:	48 89 f0             	mov    %rsi,%rax
   17bab:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   17bae:	90                   	nop
   17baf:	5d                   	pop    %rbp
   17bb0:	c3                   	ret
   17bb1:	90                   	nop

0000000000017bb2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>:
   17bb2:	55                   	push   %rbp
   17bb3:	48 89 e5             	mov    %rsp,%rbp
   17bb6:	48 83 ec 10          	sub    $0x10,%rsp
   17bba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17bc2:	48 89 c7             	mov    %rax,%rdi
   17bc5:	e8 ba 11 00 00       	call   18d84 <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>
   17bca:	90                   	nop
   17bcb:	c9                   	leave
   17bcc:	c3                   	ret
   17bcd:	90                   	nop

0000000000017bce <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>:
   17bce:	55                   	push   %rbp
   17bcf:	48 89 e5             	mov    %rsp,%rbp
   17bd2:	48 83 ec 10          	sub    $0x10,%rsp
   17bd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17bda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17bde:	48 89 c7             	mov    %rax,%rdi
   17be1:	e8 28 13 00 00       	call   18f0e <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>
   17be6:	90                   	nop
   17be7:	c9                   	leave
   17be8:	c3                   	ret
   17be9:	90                   	nop

0000000000017bea <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>:
   17bea:	55                   	push   %rbp
   17beb:	48 89 e5             	mov    %rsp,%rbp
   17bee:	48 83 ec 10          	sub    $0x10,%rsp
   17bf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17bf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17bfa:	48 89 c7             	mov    %rax,%rdi
   17bfd:	e8 c2 14 00 00       	call   190c4 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   17c02:	90                   	nop
   17c03:	c9                   	leave
   17c04:	c3                   	ret
   17c05:	90                   	nop

0000000000017c06 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   17c06:	55                   	push   %rbp
   17c07:	48 89 e5             	mov    %rsp,%rbp
   17c0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   17c0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c12:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17c19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c1d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   17c24:	00 
   17c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c29:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   17c30:	00 
	{ }
   17c31:	90                   	nop
   17c32:	5d                   	pop    %rbp
   17c33:	c3                   	ret

0000000000017c34 <_ZSt3minImERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
   17c34:	55                   	push   %rbp
   17c35:	48 89 e5             	mov    %rsp,%rbp
   17c38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__b < __a)
   17c40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17c44:	48 8b 10             	mov    (%rax),%rdx
   17c47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c4b:	48 8b 00             	mov    (%rax),%rax
   17c4e:	48 39 c2             	cmp    %rax,%rdx
   17c51:	73 06                	jae    17c59 <_ZSt3minImERKT_S2_S2_+0x25>
	return __b;
   17c53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17c57:	eb 04                	jmp    17c5d <_ZSt3minImERKT_S2_S2_+0x29>
      return __a;
   17c59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   17c5d:	5d                   	pop    %rbp
   17c5e:	c3                   	ret
   17c5f:	90                   	nop

0000000000017c60 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
   17c60:	55                   	push   %rbp
   17c61:	48 89 e5             	mov    %rsp,%rbp
   17c64:	48 83 ec 10          	sub    $0x10,%rsp
   17c68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17c6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_len{traits_type::length(__str)},
   17c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17c74:	48 89 c7             	mov    %rax,%rdi
   17c77:	e8 88 e5 fe ff       	call   6204 <_ZNSt11char_traitsIcE6lengthEPKc>
   17c7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17c80:	48 89 02             	mov    %rax,(%rdx)
	_M_str{__str}
   17c83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c87:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17c8b:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   17c8f:	90                   	nop
   17c90:	c9                   	leave
   17c91:	c3                   	ret

0000000000017c92 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
   17c92:	55                   	push   %rbp
   17c93:	48 89 e5             	mov    %rsp,%rbp
   17c96:	48 83 ec 10          	sub    $0x10,%rsp
   17c9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_color = _S_red;
   17c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ca2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
      _M_reset();
   17ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cac:	48 89 c7             	mov    %rax,%rdi
   17caf:	e8 04 00 00 00       	call   17cb8 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
   17cb4:	90                   	nop
   17cb5:	c9                   	leave
   17cb6:	c3                   	ret
   17cb7:	90                   	nop

0000000000017cb8 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
   17cb8:	55                   	push   %rbp
   17cb9:	48 89 e5             	mov    %rsp,%rbp
   17cbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      _M_header._M_parent = 0;
   17cc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cc4:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   17ccb:	00 
      _M_header._M_left = &_M_header;
   17ccc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17cd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17cd4:	48 89 50 10          	mov    %rdx,0x10(%rax)
      _M_header._M_right = &_M_header;
   17cd8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ce0:	48 89 50 18          	mov    %rdx,0x18(%rax)
      _M_node_count = 0;
   17ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ce8:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
   17cef:	00 
    }
   17cf0:	90                   	nop
   17cf1:	5d                   	pop    %rbp
   17cf2:	c3                   	ret
   17cf3:	90                   	nop

0000000000017cf4 <_ZNKSt19bad_optional_access4whatEv>:
  {
  public:
    bad_optional_access() = default;
    virtual ~bad_optional_access() = default;

    const char* what() const noexcept override
   17cf4:	55                   	push   %rbp
   17cf5:	48 89 e5             	mov    %rsp,%rbp
   17cf8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return "bad optional access"; }
   17cfc:	48 8d 05 22 f0 00 00 	lea    0xf022(%rip),%rax        # 26d25 <_ZNSt8__detailL19__atomic_spin_countE+0x4069>
   17d03:	5d                   	pop    %rbp
   17d04:	c3                   	ret
   17d05:	90                   	nop

0000000000017d06 <_ZNSt19bad_optional_accessC1Ev>:
    bad_optional_access() = default;
   17d06:	55                   	push   %rbp
   17d07:	48 89 e5             	mov    %rsp,%rbp
   17d0a:	48 83 ec 10          	sub    $0x10,%rsp
   17d0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17d12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d16:	48 89 c7             	mov    %rax,%rdi
   17d19:	e8 08 72 ff ff       	call   ef26 <_ZNSt9exceptionC1Ev>
   17d1e:	48 8d 15 4b ac 01 00 	lea    0x1ac4b(%rip),%rdx        # 32970 <_ZTVSt19bad_optional_access+0x10>
   17d25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d29:	48 89 10             	mov    %rdx,(%rax)
   17d2c:	90                   	nop
   17d2d:	c9                   	leave
   17d2e:	c3                   	ret

0000000000017d2f <_ZSt27__throw_bad_optional_accessv>:
  };

  // XXX Does not belong here.
  [[__noreturn__]] inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
   17d2f:	55                   	push   %rbp
   17d30:	48 89 e5             	mov    %rsp,%rbp
   17d33:	53                   	push   %rbx
   17d34:	48 83 ec 08          	sub    $0x8,%rsp
   17d38:	bf 08 00 00 00       	mov    $0x8,%edi
   17d3d:	e8 8e d3 fe ff       	call   50d0 <__cxa_allocate_exception@plt>
   17d42:	48 89 c3             	mov    %rax,%rbx
   17d45:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
   17d4c:	48 89 df             	mov    %rbx,%rdi
   17d4f:	e8 b2 ff ff ff       	call   17d06 <_ZNSt19bad_optional_accessC1Ev>
   17d54:	48 8d 05 ff 83 00 00 	lea    0x83ff(%rip),%rax        # 2015a <_ZNSt19bad_optional_accessD1Ev>
   17d5b:	48 89 c2             	mov    %rax,%rdx
   17d5e:	48 8d 05 fb af 01 00 	lea    0x1affb(%rip),%rax        # 32d60 <_ZTVN10__cxxabiv120__si_class_type_infoE@CXXABI_1.3>
   17d65:	48 89 c6             	mov    %rax,%rsi
   17d68:	48 89 df             	mov    %rbx,%rdi
   17d6b:	e8 10 d6 fe ff       	call   5380 <__cxa_throw@plt>

0000000000017d70 <_ZN9__gnu_cxxeqIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   17d70:	55                   	push   %rbp
   17d71:	48 89 e5             	mov    %rsp,%rbp
   17d74:	53                   	push   %rbx
   17d75:	48 83 ec 18          	sub    $0x18,%rsp
   17d79:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17d7d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   17d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17d85:	48 89 c7             	mov    %rax,%rdi
   17d88:	e8 1f 00 00 00       	call   17dac <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   17d8d:	48 8b 18             	mov    (%rax),%rbx
   17d90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   17d94:	48 89 c7             	mov    %rax,%rdi
   17d97:	e8 10 00 00 00       	call   17dac <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   17d9c:	48 8b 00             	mov    (%rax),%rax
   17d9f:	48 39 c3             	cmp    %rax,%rbx
   17da2:	0f 94 c0             	sete   %al
   17da5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17da9:	c9                   	leave
   17daa:	c3                   	ret
   17dab:	90                   	nop

0000000000017dac <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   17dac:	55                   	push   %rbp
   17dad:	48 89 e5             	mov    %rsp,%rbp
   17db0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   17db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17db8:	5d                   	pop    %rbp
   17db9:	c3                   	ret

0000000000017dba <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   17dba:	55                   	push   %rbp
   17dbb:	48 89 e5             	mov    %rsp,%rbp
   17dbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   17dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dc6:	48 8b 00             	mov    (%rax),%rax
   17dc9:	5d                   	pop    %rbp
   17dca:	c3                   	ret
   17dcb:	90                   	nop

0000000000017dcc <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	__glibcxx_assert(this->_M_len > 0);
	return *(this->_M_str + this->_M_len - 1);
      }

      constexpr const_pointer
      data() const noexcept
   17dcc:	55                   	push   %rbp
   17dcd:	48 89 e5             	mov    %rsp,%rbp
   17dd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_str; }
   17dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dd8:	48 8b 40 08          	mov    0x8(%rax),%rax
   17ddc:	5d                   	pop    %rbp
   17ddd:	c3                   	ret

0000000000017dde <_ZNSaIPKcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   17dde:	55                   	push   %rbp
   17ddf:	48 89 e5             	mov    %rsp,%rbp
   17de2:	48 83 ec 10          	sub    $0x10,%rsp
   17de6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17dee:	48 89 c7             	mov    %rax,%rdi
   17df1:	e8 04 00 00 00       	call   17dfa <_ZNSt15__new_allocatorIPKcEC2Ev>
   17df6:	90                   	nop
   17df7:	c9                   	leave
   17df8:	c3                   	ret
   17df9:	90                   	nop

0000000000017dfa <_ZNSt15__new_allocatorIPKcEC2Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17dfa:	55                   	push   %rbp
   17dfb:	48 89 e5             	mov    %rsp,%rbp
   17dfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17e02:	90                   	nop
   17e03:	5d                   	pop    %rbp
   17e04:	c3                   	ret
   17e05:	90                   	nop

0000000000017e06 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      _GLIBCXX20_CONSTEXPR
      vector(initializer_list<value_type> __l,
   17e06:	55                   	push   %rbp
   17e07:	48 89 e5             	mov    %rsp,%rbp
   17e0a:	53                   	push   %rbx
   17e0b:	48 83 ec 38          	sub    $0x38,%rsp
   17e0f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   17e13:	48 89 f0             	mov    %rsi,%rax
   17e16:	48 89 d6             	mov    %rdx,%rsi
   17e19:	48 89 f2             	mov    %rsi,%rdx
   17e1c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   17e20:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   17e24:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
   17e28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e2c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   17e30:	48 89 d6             	mov    %rdx,%rsi
   17e33:	48 89 c7             	mov    %rax,%rdi
   17e36:	e8 6f 00 00 00       	call   17eaa <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
   17e3b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   17e3f:	48 89 c7             	mov    %rax,%rdi
   17e42:	e8 57 01 00 00       	call   17f9e <_ZNKSt16initializer_listIPKcE3endEv>
   17e47:	48 89 c3             	mov    %rax,%rbx
   17e4a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   17e4e:	48 89 c7             	mov    %rax,%rdi
   17e51:	e8 36 01 00 00       	call   17f8c <_ZNKSt16initializer_listIPKcE5beginEv>
   17e56:	48 89 c1             	mov    %rax,%rcx
   17e59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e5d:	48 89 da             	mov    %rbx,%rdx
   17e60:	48 89 ce             	mov    %rcx,%rsi
   17e63:	48 89 c7             	mov    %rax,%rdi
   17e66:	e8 ad 01 00 00       	call   18018 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
   17e6b:	eb 1a                	jmp    17e87 <_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_+0x81>
   17e6d:	48 89 c3             	mov    %rax,%rbx
   17e70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17e74:	48 89 c7             	mov    %rax,%rdi
   17e77:	e8 08 16 00 00       	call   19484 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   17e7c:	48 89 d8             	mov    %rbx,%rax
   17e7f:	48 89 c7             	mov    %rax,%rdi
   17e82:	e8 19 d5 fe ff       	call   53a0 <_Unwind_Resume@plt>
   17e87:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17e8b:	c9                   	leave
   17e8c:	c3                   	ret
   17e8d:	90                   	nop

0000000000017e8e <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
   17e8e:	55                   	push   %rbp
   17e8f:	48 89 e5             	mov    %rsp,%rbp
   17e92:	48 83 ec 10          	sub    $0x10,%rsp
   17e96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17e9e:	48 89 c7             	mov    %rax,%rdi
   17ea1:	e8 0a 03 00 00       	call   181b0 <_ZNSaIPKcED2Ev>
   17ea6:	90                   	nop
   17ea7:	c9                   	leave
   17ea8:	c3                   	ret
   17ea9:	90                   	nop

0000000000017eaa <_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
   17eaa:	55                   	push   %rbp
   17eab:	48 89 e5             	mov    %rsp,%rbp
   17eae:	48 83 ec 10          	sub    $0x10,%rsp
   17eb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17eb6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
   17eba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ebe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17ec2:	48 89 d6             	mov    %rdx,%rsi
   17ec5:	48 89 c7             	mov    %rax,%rdi
   17ec8:	e8 03 00 00 00       	call   17ed0 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
   17ecd:	90                   	nop
   17ece:	c9                   	leave
   17ecf:	c3                   	ret

0000000000017ed0 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   17ed0:	55                   	push   %rbp
   17ed1:	48 89 e5             	mov    %rsp,%rbp
   17ed4:	48 83 ec 10          	sub    $0x10,%rsp
   17ed8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17edc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   17ee0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ee8:	48 89 d6             	mov    %rdx,%rsi
   17eeb:	48 89 c7             	mov    %rax,%rdi
   17eee:	e8 0f 00 00 00       	call   17f02 <_ZNSaIPKcEC2ERKS1_>
   17ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ef7:	48 89 c7             	mov    %rax,%rdi
   17efa:	e8 5f 00 00 00       	call   17f5e <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   17eff:	90                   	nop
   17f00:	c9                   	leave
   17f01:	c3                   	ret

0000000000017f02 <_ZNSaIPKcEC2ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   17f02:	55                   	push   %rbp
   17f03:	48 89 e5             	mov    %rsp,%rbp
   17f06:	48 83 ec 10          	sub    $0x10,%rsp
   17f0a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f0e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   17f12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17f16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f1a:	48 89 d6             	mov    %rdx,%rsi
   17f1d:	48 89 c7             	mov    %rax,%rdi
   17f20:	e8 29 00 00 00       	call   17f4e <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   17f25:	90                   	nop
   17f26:	c9                   	leave
   17f27:	c3                   	ret

0000000000017f28 <_ZNSaIPKcEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   17f28:	55                   	push   %rbp
   17f29:	48 89 e5             	mov    %rsp,%rbp
   17f2c:	48 83 ec 10          	sub    $0x10,%rsp
   17f30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f34:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   17f38:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   17f3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f40:	48 89 d6             	mov    %rdx,%rsi
   17f43:	48 89 c7             	mov    %rax,%rdi
   17f46:	e8 03 00 00 00       	call   17f4e <_ZNSt15__new_allocatorIPKcEC2ERKS2_>
   17f4b:	90                   	nop
   17f4c:	c9                   	leave
   17f4d:	c3                   	ret

0000000000017f4e <_ZNSt15__new_allocatorIPKcEC2ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   17f4e:	55                   	push   %rbp
   17f4f:	48 89 e5             	mov    %rsp,%rbp
   17f52:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f56:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17f5a:	90                   	nop
   17f5b:	5d                   	pop    %rbp
   17f5c:	c3                   	ret
   17f5d:	90                   	nop

0000000000017f5e <_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   17f5e:	55                   	push   %rbp
   17f5f:	48 89 e5             	mov    %rsp,%rbp
   17f62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   17f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f6a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   17f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f75:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   17f7c:	00 
   17f7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f81:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   17f88:	00 
	{ }
   17f89:	90                   	nop
   17f8a:	5d                   	pop    %rbp
   17f8b:	c3                   	ret

0000000000017f8c <_ZNKSt16initializer_listIPKcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   17f8c:	55                   	push   %rbp
   17f8d:	48 89 e5             	mov    %rsp,%rbp
   17f90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f98:	48 8b 00             	mov    (%rax),%rax
   17f9b:	5d                   	pop    %rbp
   17f9c:	c3                   	ret
   17f9d:	90                   	nop

0000000000017f9e <_ZNKSt16initializer_listIPKcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   17f9e:	55                   	push   %rbp
   17f9f:	48 89 e5             	mov    %rsp,%rbp
   17fa2:	53                   	push   %rbx
   17fa3:	48 83 ec 18          	sub    $0x18,%rsp
   17fa7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17fab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17faf:	48 89 c7             	mov    %rax,%rdi
   17fb2:	e8 d5 ff ff ff       	call   17f8c <_ZNKSt16initializer_listIPKcE5beginEv>
   17fb7:	48 89 c3             	mov    %rax,%rbx
   17fba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17fbe:	48 89 c7             	mov    %rax,%rdi
   17fc1:	e8 0e 00 00 00       	call   17fd4 <_ZNKSt16initializer_listIPKcE4sizeEv>
   17fc6:	48 c1 e0 03          	shl    $0x3,%rax
   17fca:	48 01 d8             	add    %rbx,%rax
   17fcd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   17fd1:	c9                   	leave
   17fd2:	c3                   	ret
   17fd3:	90                   	nop

0000000000017fd4 <_ZNKSt16initializer_listIPKcE4sizeEv>:
      size() const noexcept { return _M_len; }
   17fd4:	55                   	push   %rbp
   17fd5:	48 89 e5             	mov    %rsp,%rbp
   17fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17fe0:	48 8b 40 08          	mov    0x8(%rax),%rax
   17fe4:	5d                   	pop    %rbp
   17fe5:	c3                   	ret

0000000000017fe6 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
   17fe6:	55                   	push   %rbp
   17fe7:	48 89 e5             	mov    %rsp,%rbp
   17fea:	48 83 ec 10          	sub    $0x10,%rsp
   17fee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ff2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
			     std::__iterator_category(__first));
   17ff6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   17ffa:	48 89 c7             	mov    %rax,%rdi
   17ffd:	e8 c5 00 00 00       	call   180c7 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
   18002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18006:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1800a:	48 89 d6             	mov    %rdx,%rsi
   1800d:	48 89 c7             	mov    %rax,%rdi
   18010:	e8 bd 00 00 00       	call   180d2 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
    }
   18015:	c9                   	leave
   18016:	c3                   	ret
   18017:	90                   	nop

0000000000018018 <_ZNSt6vectorIPKcSaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
   18018:	55                   	push   %rbp
   18019:	48 89 e5             	mov    %rsp,%rbp
   1801c:	53                   	push   %rbx
   1801d:	48 83 ec 38          	sub    $0x38,%rsp
   18021:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18025:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   18029:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
   1802d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18031:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   18035:	48 89 d6             	mov    %rdx,%rsi
   18038:	48 89 c7             	mov    %rax,%rdi
   1803b:	e8 a6 ff ff ff       	call   17fe6 <_ZSt8distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_>
   18040:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   18044:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   18048:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1804c:	48 89 c7             	mov    %rax,%rdi
   1804f:	e8 98 00 00 00       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   18054:	48 89 c2             	mov    %rax,%rdx
   18057:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1805b:	48 89 d6             	mov    %rdx,%rsi
   1805e:	48 89 c7             	mov    %rax,%rdi
   18061:	e8 94 00 00 00       	call   180fa <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   18066:	48 89 c6             	mov    %rax,%rsi
   18069:	48 89 df             	mov    %rbx,%rdi
   1806c:	e8 57 01 00 00       	call   181c8 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   18071:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   18075:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   18078:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1807c:	48 8b 00             	mov    (%rax),%rax
   1807f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18083:	48 c1 e2 03          	shl    $0x3,%rdx
   18087:	48 01 c2             	add    %rax,%rdx
   1808a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1808e:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
   18092:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18096:	48 89 c7             	mov    %rax,%rdi
   18099:	e8 4e 00 00 00       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1809e:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
   180a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   180a5:	48 8b 10             	mov    (%rax),%rdx
   180a8:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   180ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   180b0:	48 89 c7             	mov    %rax,%rdi
   180b3:	e8 28 02 00 00       	call   182e0 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	  this->_M_impl._M_finish =
   180b8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   180bc:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
   180c0:	90                   	nop
   180c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   180c5:	c9                   	leave
   180c6:	c3                   	ret

00000000000180c7 <_ZSt19__iterator_categoryIPKPKcENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
   180c7:	55                   	push   %rbp
   180c8:	48 89 e5             	mov    %rsp,%rbp
   180cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   180cf:	90                   	nop
   180d0:	5d                   	pop    %rbp
   180d1:	c3                   	ret

00000000000180d2 <_ZSt10__distanceIPKPKcENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
   180d2:	55                   	push   %rbp
   180d3:	48 89 e5             	mov    %rsp,%rbp
   180d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180da:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
   180de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   180e2:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   180e6:	48 c1 f8 03          	sar    $0x3,%rax
    }
   180ea:	5d                   	pop    %rbp
   180eb:	c3                   	ret

00000000000180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   180ec:	55                   	push   %rbp
   180ed:	48 89 e5             	mov    %rsp,%rbp
   180f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   180f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   180f8:	5d                   	pop    %rbp
   180f9:	c3                   	ret

00000000000180fa <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
   180fa:	55                   	push   %rbp
   180fb:	48 89 e5             	mov    %rsp,%rbp
   180fe:	53                   	push   %rbx
   180ff:	48 83 ec 28          	sub    $0x28,%rsp
   18103:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   18107:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1810b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1810f:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18113:	48 89 d6             	mov    %rdx,%rsi
   18116:	48 89 c7             	mov    %rax,%rdi
   18119:	e8 0a fe ff ff       	call   17f28 <_ZNSaIPKcEC1ERKS1_>
   1811e:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18122:	48 89 c7             	mov    %rax,%rdi
   18125:	e8 44 00 00 00       	call   1816e <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   1812a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1812e:	0f 92 c3             	setb   %bl
   18131:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   18135:	48 89 c7             	mov    %rax,%rdi
   18138:	e8 7f 00 00 00       	call   181bc <_ZNSaIPKcED1Ev>
   1813d:	84 db                	test   %bl,%bl
   1813f:	74 0f                	je     18150 <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_+0x56>
	  __throw_length_error(
   18141:	48 8d 05 18 ee 00 00 	lea    0xee18(%rip),%rax        # 26f60 <_ZNSt8__detailL19__atomic_spin_countE+0x42a4>
   18148:	48 89 c7             	mov    %rax,%rdi
   1814b:	e8 90 cf fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
   18150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
   18154:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18158:	c9                   	leave
   18159:	c3                   	ret

000000000001815a <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1815a:	55                   	push   %rbp
   1815b:	48 89 e5             	mov    %rsp,%rbp
   1815e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   18162:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   18169:	ff ff 1f 
      }
   1816c:	5d                   	pop    %rbp
   1816d:	c3                   	ret

000000000001816e <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>:

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1816e:	55                   	push   %rbp
   1816f:	48 89 e5             	mov    %rsp,%rbp
   18172:	48 83 ec 20          	sub    $0x20,%rsp
   18176:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
   1817a:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   18181:	ff ff 0f 
   18184:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   18188:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1818c:	48 89 c7             	mov    %rax,%rdi
   1818f:	e8 c6 ff ff ff       	call   1815a <_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_>
   18194:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   18198:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1819c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   181a0:	48 89 d6             	mov    %rdx,%rsi
   181a3:	48 89 c7             	mov    %rax,%rdi
   181a6:	e8 89 fa ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   181ab:	48 8b 00             	mov    (%rax),%rax
      }
   181ae:	c9                   	leave
   181af:	c3                   	ret

00000000000181b0 <_ZNSaIPKcED2Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   181b0:	55                   	push   %rbp
   181b1:	48 89 e5             	mov    %rsp,%rbp
   181b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181b8:	90                   	nop
   181b9:	5d                   	pop    %rbp
   181ba:	c3                   	ret
   181bb:	90                   	nop

00000000000181bc <_ZNSaIPKcED1Ev>:
   181bc:	55                   	push   %rbp
   181bd:	48 89 e5             	mov    %rsp,%rbp
   181c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181c4:	90                   	nop
   181c5:	5d                   	pop    %rbp
   181c6:	c3                   	ret
   181c7:	90                   	nop

00000000000181c8 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   181c8:	55                   	push   %rbp
   181c9:	48 89 e5             	mov    %rsp,%rbp
   181cc:	48 83 ec 10          	sub    $0x10,%rsp
   181d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   181d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   181d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   181dd:	74 15                	je     181f4 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x2c>
   181df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   181e3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   181e7:	48 89 d6             	mov    %rdx,%rsi
   181ea:	48 89 c7             	mov    %rax,%rdi
   181ed:	e8 09 00 00 00       	call   181fb <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>
   181f2:	eb 05                	jmp    181f9 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm+0x31>
   181f4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   181f9:	c9                   	leave
   181fa:	c3                   	ret

00000000000181fb <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   181fb:	55                   	push   %rbp
   181fc:	48 89 e5             	mov    %rsp,%rbp
   181ff:	48 83 ec 20          	sub    $0x20,%rsp
   18203:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18207:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1820b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1820f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18213:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18217:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1821b:	e8 7e df fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   18220:	84 c0                	test   %al,%al
   18222:	74 43                	je     18267 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   18224:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18228:	b9 00 00 00 00       	mov    $0x0,%ecx
   1822d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18234:	00 
   18235:	48 c1 e8 3d          	shr    $0x3d,%rax
   18239:	48 85 c0             	test   %rax,%rax
   1823c:	74 05                	je     18243 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x48>
   1823e:	b9 01 00 00 00       	mov    $0x1,%ecx
   18243:	48 89 d0             	mov    %rdx,%rax
   18246:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1824a:	48 89 c8             	mov    %rcx,%rax
   1824d:	83 e0 01             	and    $0x1,%eax
   18250:	84 c0                	test   %al,%al
   18252:	74 05                	je     18259 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   18254:	e8 27 cf fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   18259:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1825d:	48 89 c7             	mov    %rax,%rdi
   18260:	e8 bb cf fe ff       	call   5220 <_Znwm@plt>
   18265:	eb 19                	jmp    18280 <_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   18267:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1826b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1826f:	ba 00 00 00 00       	mov    $0x0,%edx
   18274:	48 89 ce             	mov    %rcx,%rsi
   18277:	48 89 c7             	mov    %rax,%rdi
   1827a:	e8 53 12 00 00       	call   194d2 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>
   1827f:	90                   	nop
      { return __a.allocate(__n); }
   18280:	c9                   	leave
   18281:	c3                   	ret

0000000000018282 <_ZN2vk5FlagsINS_36DebugUtilsMessengerCreateFlagBitsEXTEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   18282:	55                   	push   %rbp
   18283:	48 89 e5             	mov    %rsp,%rbp
   18286:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1828a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1828e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   18294:	90                   	nop
   18295:	5d                   	pop    %rbp
   18296:	c3                   	ret
   18297:	90                   	nop

0000000000018298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18298:	55                   	push   %rbp
   18299:	48 89 e5             	mov    %rsp,%rbp
   1829c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   182a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182a4:	48 8b 50 08          	mov    0x8(%rax),%rdx
   182a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182ac:	48 8b 00             	mov    (%rax),%rax
   182af:	48 29 c2             	sub    %rax,%rdx
   182b2:	48 89 d0             	mov    %rdx,%rax
   182b5:	48 c1 f8 03          	sar    $0x3,%rax
   182b9:	5d                   	pop    %rbp
   182ba:	c3                   	ret
   182bb:	90                   	nop

00000000000182bc <_ZNSt6vectorIPKcSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   182bc:	55                   	push   %rbp
   182bd:	48 89 e5             	mov    %rsp,%rbp
   182c0:	48 83 ec 10          	sub    $0x10,%rsp
   182c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   182c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182cc:	48 8b 10             	mov    (%rax),%rdx
   182cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   182d3:	48 89 d6             	mov    %rdx,%rsi
   182d6:	48 89 c7             	mov    %rax,%rdi
   182d9:	e8 88 12 00 00       	call   19566 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   182de:	c9                   	leave
   182df:	c3                   	ret

00000000000182e0 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   182e0:	55                   	push   %rbp
   182e1:	48 89 e5             	mov    %rsp,%rbp
   182e4:	48 83 ec 20          	sub    $0x20,%rsp
   182e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   182ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   182f0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   182f4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
   182f8:	e8 ac de fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   182fd:	84 c0                	test   %al,%al
   182ff:	74 19                	je     1831a <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   18301:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18305:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18309:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1830d:	48 89 ce             	mov    %rcx,%rsi
   18310:	48 89 c7             	mov    %rax,%rdi
   18313:	e8 1c 00 00 00       	call   18334 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>
   18318:	eb 18                	jmp    18332 <_ZSt22__uninitialized_copy_aIPKPKcPS1_S1_ET0_T_S6_S5_RSaIT1_E+0x52>
#endif
      return std::uninitialized_copy(__first, __last, __result);
   1831a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1831e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   18322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18326:	48 89 ce             	mov    %rcx,%rsi
   18329:	48 89 c7             	mov    %rax,%rdi
   1832c:	e8 61 12 00 00       	call   19592 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>
   18331:	90                   	nop
    }
   18332:	c9                   	leave
   18333:	c3                   	ret

0000000000018334 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   18334:	55                   	push   %rbp
   18335:	48 89 e5             	mov    %rsp,%rbp
   18338:	48 83 ec 30          	sub    $0x30,%rsp
   1833c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18340:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18344:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      _ForwardIterator __cur = __result;
   18348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1834c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   18350:	eb 28                	jmp    1837a <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x46>
	    std::_Construct(std::__addressof(*__cur), *__first);
   18352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18356:	48 89 c7             	mov    %rax,%rdi
   18359:	e8 2c 00 00 00       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1835e:	48 89 c2             	mov    %rax,%rdx
   18361:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18365:	48 89 c6             	mov    %rax,%rsi
   18368:	48 89 d7             	mov    %rdx,%rdi
   1836b:	e8 28 00 00 00       	call   18398 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   18370:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   18375:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   1837a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1837e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18382:	75 ce                	jne    18352 <_ZSt16__do_uninit_copyIPKPKcPS1_ET0_T_S6_S5_+0x1e>
	  return __cur;
   18384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   18388:	c9                   	leave
   18389:	c3                   	ret

000000000001838a <_ZSt11__addressofIPKcEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1838a:	55                   	push   %rbp
   1838b:	48 89 e5             	mov    %rsp,%rbp
   1838e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   18392:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18396:	5d                   	pop    %rbp
   18397:	c3                   	ret

0000000000018398 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_>:
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
   18398:	55                   	push   %rbp
   18399:	48 89 e5             	mov    %rsp,%rbp
   1839c:	53                   	push   %rbx
   1839d:	48 83 ec 18          	sub    $0x18,%rsp
   183a1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   183a5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
   183a9:	e8 f0 dd fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   183ae:	84 c0                	test   %al,%al
   183b0:	74 20                	je     183d2 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x3a>
	{
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   183b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   183b6:	48 89 c7             	mov    %rax,%rdi
   183b9:	e8 40 00 00 00       	call   183fe <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   183be:	48 89 c2             	mov    %rax,%rdx
   183c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   183c5:	48 89 d6             	mov    %rdx,%rsi
   183c8:	48 89 c7             	mov    %rax,%rdi
   183cb:	e8 3c 00 00 00       	call   1840c <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   183d0:	eb 26                	jmp    183f8 <_ZSt10_ConstructIPKcJRKS1_EEvPT_DpOT0_+0x60>
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   183d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   183d6:	48 89 c6             	mov    %rax,%rsi
   183d9:	bf 08 00 00 00       	mov    $0x8,%edi
   183de:	e8 d1 dd fe ff       	call   61b4 <_ZnwmPv>
   183e3:	48 89 c3             	mov    %rax,%rbx
   183e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   183ea:	48 89 c7             	mov    %rax,%rdi
   183ed:	e8 0c 00 00 00       	call   183fe <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   183f2:	48 8b 00             	mov    (%rax),%rax
   183f5:	48 89 03             	mov    %rax,(%rbx)
    }
   183f8:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   183fc:	c9                   	leave
   183fd:	c3                   	ret

00000000000183fe <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   183fe:	55                   	push   %rbp
   183ff:	48 89 e5             	mov    %rsp,%rbp
   18402:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   18406:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1840a:	5d                   	pop    %rbp
   1840b:	c3                   	ret

000000000001840c <_ZSt12construct_atIPKcJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1840c:	55                   	push   %rbp
   1840d:	48 89 e5             	mov    %rsp,%rbp
   18410:	53                   	push   %rbx
   18411:	48 83 ec 18          	sub    $0x18,%rsp
   18415:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18419:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1841d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18421:	48 89 c6             	mov    %rax,%rsi
   18424:	bf 08 00 00 00       	mov    $0x8,%edi
   18429:	e8 86 dd fe ff       	call   61b4 <_ZnwmPv>
   1842e:	48 89 c3             	mov    %rax,%rbx
   18431:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18435:	48 89 c7             	mov    %rax,%rdi
   18438:	e8 c1 ff ff ff       	call   183fe <_ZSt7forwardIRKPKcEOT_RNSt16remove_referenceIS4_E4typeE>
   1843d:	48 8b 00             	mov    (%rax),%rax
   18440:	48 89 03             	mov    %rax,(%rbx)
   18443:	48 89 d8             	mov    %rbx,%rax
   18446:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1844a:	c9                   	leave
   1844b:	c3                   	ret

000000000001844c <_ZN9__gnu_cxxeqIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   1844c:	55                   	push   %rbp
   1844d:	48 89 e5             	mov    %rsp,%rbp
   18450:	53                   	push   %rbx
   18451:	48 83 ec 18          	sub    $0x18,%rsp
   18455:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18459:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   1845d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18461:	48 89 c7             	mov    %rax,%rdi
   18464:	e8 1f 00 00 00       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18469:	48 8b 18             	mov    (%rax),%rbx
   1846c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18470:	48 89 c7             	mov    %rax,%rdi
   18473:	e8 10 00 00 00       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   18478:	48 8b 00             	mov    (%rax),%rax
   1847b:	48 39 c3             	cmp    %rax,%rbx
   1847e:	0f 94 c0             	sete   %al
   18481:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18485:	c9                   	leave
   18486:	c3                   	ret
   18487:	90                   	nop

0000000000018488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   18488:	55                   	push   %rbp
   18489:	48 89 e5             	mov    %rsp,%rbp
   1848c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   18490:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18494:	5d                   	pop    %rbp
   18495:	c3                   	ret

0000000000018496 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   18496:	55                   	push   %rbp
   18497:	48 89 e5             	mov    %rsp,%rbp
   1849a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1849e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184a2:	48 8b 00             	mov    (%rax),%rax
   184a5:	5d                   	pop    %rbp
   184a6:	c3                   	ret
   184a7:	90                   	nop

00000000000184a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
   184a8:	55                   	push   %rbp
   184a9:	48 89 e5             	mov    %rsp,%rbp
   184ac:	48 83 ec 10          	sub    $0x10,%rsp
   184b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184b8:	48 89 c7             	mov    %rax,%rdi
   184bb:	e8 0c 12 00 00       	call   196cc <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>
   184c0:	90                   	nop
   184c1:	c9                   	leave
   184c2:	c3                   	ret
   184c3:	90                   	nop

00000000000184c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
   184c4:	55                   	push   %rbp
   184c5:	48 89 e5             	mov    %rsp,%rbp
   184c8:	48 83 ec 10          	sub    $0x10,%rsp
   184cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184d4:	48 89 c7             	mov    %rax,%rdi
   184d7:	e8 b8 11 00 00       	call   19694 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
   184dc:	90                   	nop
   184dd:	c9                   	leave
   184de:	c3                   	ret
   184df:	90                   	nop

00000000000184e0 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
   184e0:	55                   	push   %rbp
   184e1:	48 89 e5             	mov    %rsp,%rbp
   184e4:	48 83 ec 10          	sub    $0x10,%rsp
   184e8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   184ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   184f0:	48 89 c7             	mov    %rax,%rdi
   184f3:	e8 cc ff ff ff       	call   184c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev>
   184f8:	90                   	nop
   184f9:	c9                   	leave
   184fa:	c3                   	ret
   184fb:	90                   	nop

00000000000184fc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
   184fc:	55                   	push   %rbp
   184fd:	48 89 e5             	mov    %rsp,%rbp
   18500:	48 83 ec 10          	sub    $0x10,%rsp
   18504:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1850c:	48 89 c7             	mov    %rax,%rdi
   1850f:	e8 c4 11 00 00       	call   196d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>
   18514:	90                   	nop
   18515:	c9                   	leave
   18516:	c3                   	ret

0000000000018517 <_ZN9__gnu_cxxeqIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   18517:	55                   	push   %rbp
   18518:	48 89 e5             	mov    %rsp,%rbp
   1851b:	53                   	push   %rbx
   1851c:	48 83 ec 18          	sub    $0x18,%rsp
   18520:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18524:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   18528:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1852c:	48 89 c7             	mov    %rax,%rdi
   1852f:	e8 1e 00 00 00       	call   18552 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   18534:	48 8b 18             	mov    (%rax),%rbx
   18537:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1853b:	48 89 c7             	mov    %rax,%rdi
   1853e:	e8 0f 00 00 00       	call   18552 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   18543:	48 8b 00             	mov    (%rax),%rax
   18546:	48 39 c3             	cmp    %rax,%rbx
   18549:	0f 94 c0             	sete   %al
   1854c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18550:	c9                   	leave
   18551:	c3                   	ret

0000000000018552 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   18552:	55                   	push   %rbp
   18553:	48 89 e5             	mov    %rsp,%rbp
   18556:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1855a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1855e:	5d                   	pop    %rbp
   1855f:	c3                   	ret

0000000000018560 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   18560:	55                   	push   %rbp
   18561:	48 89 e5             	mov    %rsp,%rbp
   18564:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   18568:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1856c:	48 8b 00             	mov    (%rax),%rax
   1856f:	5d                   	pop    %rbp
   18570:	c3                   	ret
   18571:	90                   	nop

0000000000018572 <_ZNKSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   18572:	55                   	push   %rbp
   18573:	48 89 e5             	mov    %rsp,%rbp
   18576:	48 83 ec 20          	sub    $0x20,%rsp
   1857a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   1857e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18582:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   18586:	48 89 d6             	mov    %rdx,%rsi
   18589:	48 89 c7             	mov    %rax,%rdi
   1858c:	e8 07 00 00 00       	call   18598 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   18591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18595:	c9                   	leave
   18596:	c3                   	ret
   18597:	90                   	nop

0000000000018598 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   18598:	55                   	push   %rbp
   18599:	48 89 e5             	mov    %rsp,%rbp
   1859c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   185a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   185a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   185a8:	48 8b 10             	mov    (%rax),%rdx
   185ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185af:	48 89 10             	mov    %rdx,(%rax)
   185b2:	90                   	nop
   185b3:	5d                   	pop    %rbp
   185b4:	c3                   	ret
   185b5:	90                   	nop

00000000000185b6 <_ZNKSt6vectorIPKcSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   185b6:	55                   	push   %rbp
   185b7:	48 89 e5             	mov    %rsp,%rbp
   185ba:	48 83 ec 20          	sub    $0x20,%rsp
   185be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   185c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185c6:	48 8d 50 08          	lea    0x8(%rax),%rdx
   185ca:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   185ce:	48 89 d6             	mov    %rdx,%rsi
   185d1:	48 89 c7             	mov    %rax,%rdi
   185d4:	e8 bf ff ff ff       	call   18598 <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEC1ERKS4_>
   185d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185dd:	c9                   	leave
   185de:	c3                   	ret

00000000000185df <_ZN9__gnu_cxxeqIPKPKcSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   185df:	55                   	push   %rbp
   185e0:	48 89 e5             	mov    %rsp,%rbp
   185e3:	53                   	push   %rbx
   185e4:	48 83 ec 18          	sub    $0x18,%rsp
   185e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   185ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   185f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   185f4:	48 89 c7             	mov    %rax,%rdi
   185f7:	e8 1e 00 00 00       	call   1861a <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   185fc:	48 8b 18             	mov    (%rax),%rbx
   185ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18603:	48 89 c7             	mov    %rax,%rdi
   18606:	e8 0f 00 00 00       	call   1861a <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1860b:	48 8b 00             	mov    (%rax),%rax
   1860e:	48 39 c3             	cmp    %rax,%rbx
   18611:	0f 94 c0             	sete   %al
   18614:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   18618:	c9                   	leave
   18619:	c3                   	ret

000000000001861a <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1861a:	55                   	push   %rbp
   1861b:	48 89 e5             	mov    %rsp,%rbp
   1861e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   18622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18626:	5d                   	pop    %rbp
   18627:	c3                   	ret

0000000000018628 <_ZNK9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   18628:	55                   	push   %rbp
   18629:	48 89 e5             	mov    %rsp,%rbp
   1862c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   18630:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18634:	48 8b 00             	mov    (%rax),%rax
   18637:	5d                   	pop    %rbp
   18638:	c3                   	ret
   18639:	90                   	nop

000000000001863a <_ZNKSt8optionalIjE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
   1863a:	55                   	push   %rbp
   1863b:	48 89 e5             	mov    %rsp,%rbp
   1863e:	48 83 ec 10          	sub    $0x10,%rsp
   18642:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_is_engaged(); }
   18646:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1864a:	48 89 c7             	mov    %rax,%rdi
   1864d:	e8 02 00 00 00       	call   18654 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   18652:	c9                   	leave
   18653:	c3                   	ret

0000000000018654 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
   18654:	55                   	push   %rbp
   18655:	48 89 e5             	mov    %rsp,%rbp
   18658:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
   1865c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18660:	0f b6 40 04          	movzbl 0x4(%rax),%eax
   18664:	5d                   	pop    %rbp
   18665:	c3                   	ret

0000000000018666 <_ZNRSt8optionalIjE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
   18666:	55                   	push   %rbp
   18667:	48 89 e5             	mov    %rsp,%rbp
   1866a:	48 83 ec 10          	sub    $0x10,%rsp
   1866e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (this->_M_is_engaged())
   18672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18676:	48 89 c7             	mov    %rax,%rdi
   18679:	e8 d6 ff ff ff       	call   18654 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   1867e:	84 c0                	test   %al,%al
   18680:	74 0e                	je     18690 <_ZNRSt8optionalIjE5valueEv+0x2a>
	  return this->_M_get();
   18682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18686:	48 89 c7             	mov    %rax,%rdi
   18689:	e8 ec 12 00 00       	call   1997a <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>
   1868e:	eb 05                	jmp    18695 <_ZNRSt8optionalIjE5valueEv+0x2f>
	__throw_bad_optional_access();
   18690:	e8 9a f6 ff ff       	call   17d2f <_ZSt27__throw_bad_optional_accessv>
      }
   18695:	c9                   	leave
   18696:	c3                   	ret
   18697:	90                   	nop

0000000000018698 <_ZN2vk5FlagsINS_25DeviceQueueCreateFlagBitsEEC1Ev>:
   18698:	55                   	push   %rbp
   18699:	48 89 e5             	mov    %rsp,%rbp
   1869c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186a4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   186aa:	90                   	nop
   186ab:	5d                   	pop    %rbp
   186ac:	c3                   	ret
   186ad:	90                   	nop

00000000000186ae <_ZNKSt6vectorIPKcSaIS1_EE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   186ae:	55                   	push   %rbp
   186af:	48 89 e5             	mov    %rsp,%rbp
   186b2:	48 83 ec 10          	sub    $0x10,%rsp
   186b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   186ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186be:	48 8b 10             	mov    (%rax),%rdx
   186c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186c5:	48 89 d6             	mov    %rdx,%rsi
   186c8:	48 89 c7             	mov    %rax,%rdi
   186cb:	e8 96 0e 00 00       	call   19566 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   186d0:	c9                   	leave
   186d1:	c3                   	ret

00000000000186d2 <_ZN2vk5FlagsINS_20DeviceCreateFlagBitsEEC1Ev>:
   186d2:	55                   	push   %rbp
   186d3:	48 89 e5             	mov    %rsp,%rbp
   186d6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   186da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186de:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   186e4:	90                   	nop
   186e5:	5d                   	pop    %rbp
   186e6:	c3                   	ret
   186e7:	90                   	nop

00000000000186e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
      data() const _GLIBCXX_NOEXCEPT
   186e8:	55                   	push   %rbp
   186e9:	48 89 e5             	mov    %rsp,%rbp
   186ec:	48 83 ec 10          	sub    $0x10,%rsp
   186f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data(); }
   186f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   186f8:	48 89 c7             	mov    %rax,%rdi
   186fb:	e8 e4 1d ff ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   18700:	c9                   	leave
   18701:	c3                   	ret

0000000000018702 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1ES1_>:
    VULKAN_HPP_CONSTEXPR Flags( BitType bit ) VULKAN_HPP_NOEXCEPT : m_mask( static_cast<MaskType>( bit ) ) {}
   18702:	55                   	push   %rbp
   18703:	48 89 e5             	mov    %rsp,%rbp
   18706:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1870a:	89 75 f4             	mov    %esi,-0xc(%rbp)
   1870d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18711:	8b 55 f4             	mov    -0xc(%rbp),%edx
   18714:	89 10                	mov    %edx,(%rax)
   18716:	90                   	nop
   18717:	5d                   	pop    %rbp
   18718:	c3                   	ret
   18719:	90                   	nop

000000000001871a <_ZNK2vk5FlagsINS_13QueueFlagBitsEEanERKS2_>:
    VULKAN_HPP_CONSTEXPR Flags<BitType> operator&( Flags<BitType> const & rhs ) const VULKAN_HPP_NOEXCEPT
   1871a:	55                   	push   %rbp
   1871b:	48 89 e5             	mov    %rsp,%rbp
   1871e:	48 83 ec 20          	sub    $0x20,%rsp
   18722:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18726:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      return Flags<BitType>( m_mask & rhs.m_mask );
   1872a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1872e:	8b 10                	mov    (%rax),%edx
   18730:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18734:	8b 00                	mov    (%rax),%eax
   18736:	21 c2                	and    %eax,%edx
   18738:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
   1873c:	89 d6                	mov    %edx,%esi
   1873e:	48 89 c7             	mov    %rax,%rdi
   18741:	e8 78 12 00 00       	call   199be <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>
   18746:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
   18749:	c9                   	leave
   1874a:	c3                   	ret
   1874b:	90                   	nop

000000000001874c <_ZNK2vk5FlagsINS_13QueueFlagBitsEEcvbEv>:
    explicit VULKAN_HPP_CONSTEXPR operator bool() const VULKAN_HPP_NOEXCEPT
   1874c:	55                   	push   %rbp
   1874d:	48 89 e5             	mov    %rsp,%rbp
   18750:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_mask;
   18754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18758:	8b 00                	mov    (%rax),%eax
   1875a:	85 c0                	test   %eax,%eax
   1875c:	0f 95 c0             	setne  %al
    }
   1875f:	5d                   	pop    %rbp
   18760:	c3                   	ret

0000000000018761 <_ZN2vk6ignoreINS_6ResultEEEvRKT_>:
  void ignore( T const & ) VULKAN_HPP_NOEXCEPT
   18761:	55                   	push   %rbp
   18762:	48 89 e5             	mov    %rsp,%rbp
   18765:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  }
   18769:	90                   	nop
   1876a:	5d                   	pop    %rbp
   1876b:	c3                   	ret

000000000001876c <_ZN2vk5FlagsINS_25CommandPoolCreateFlagBitsEEC1Ev>:
    VULKAN_HPP_CONSTEXPR Flags() VULKAN_HPP_NOEXCEPT : m_mask( 0 ) {}
   1876c:	55                   	push   %rbp
   1876d:	48 89 e5             	mov    %rsp,%rbp
   18770:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18778:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1877e:	90                   	nop
   1877f:	5d                   	pop    %rbp
   18780:	c3                   	ret
   18781:	90                   	nop

0000000000018782 <_ZN2vk5FlagsINS_22InstanceCreateFlagBitsEEC1Ev>:
   18782:	55                   	push   %rbp
   18783:	48 89 e5             	mov    %rsp,%rbp
   18786:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1878a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1878e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   18794:	90                   	nop
   18795:	5d                   	pop    %rbp
   18796:	c3                   	ret
   18797:	90                   	nop

0000000000018798 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>:
   18798:	55                   	push   %rbp
   18799:	48 89 e5             	mov    %rsp,%rbp
   1879c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   187a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187a4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   187aa:	90                   	nop
   187ab:	5d                   	pop    %rbp
   187ac:	c3                   	ret
   187ad:	90                   	nop

00000000000187ae <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEptEv>:
      operator->() const noexcept
   187ae:	55                   	push   %rbp
   187af:	48 89 e5             	mov    %rsp,%rbp
   187b2:	48 83 ec 10          	sub    $0x10,%rsp
   187b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return get();
   187ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187be:	48 89 c7             	mov    %rax,%rdi
   187c1:	e8 10 12 00 00       	call   199d6 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   187c6:	c9                   	leave
   187c7:	c3                   	ret

00000000000187c8 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv>:
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
   187c8:	55                   	push   %rbp
   187c9:	48 89 e5             	mov    %rsp,%rbp
   187cc:	48 83 ec 10          	sub    $0x10,%rsp
   187d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(get() != pointer());
   187d4:	e8 c5 d9 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   187d9:	84 c0                	test   %al,%al
   187db:	74 18                	je     187f5 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   187dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   187e1:	48 89 c7             	mov    %rax,%rdi
   187e4:	e8 ed 11 00 00       	call   199d6 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
   187e9:	48 85 c0             	test   %rax,%rax
   187ec:	75 07                	jne    187f5 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x2d>
   187ee:	b8 01 00 00 00       	mov    $0x1,%eax
   187f3:	eb 05                	jmp    187fa <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEdeEv+0x32>
   187f5:	b8 00 00 00 00       	mov    $0x0,%eax
   187fa:	84 c0                	test   %al,%al
	return *get();
   187fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18800:	48 89 c7             	mov    %rax,%rdi
   18803:	e8 ce 11 00 00       	call   199d6 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>
      }
   18808:	c9                   	leave
   18809:	c3                   	ret

000000000001880a <_ZNK2vk8OptionalIKNS_19AllocationCallbacksEEcvPS2_Ev>:
    operator RefType *() const VULKAN_HPP_NOEXCEPT
   1880a:	55                   	push   %rbp
   1880b:	48 89 e5             	mov    %rsp,%rbp
   1880e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   18812:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18816:	48 8b 00             	mov    (%rax),%rax
    }
   18819:	5d                   	pop    %rbp
   1881a:	c3                   	ret
   1881b:	90                   	nop

000000000001881c <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   1881c:	55                   	push   %rbp
   1881d:	48 89 e5             	mov    %rsp,%rbp
   18820:	48 83 ec 10          	sub    $0x10,%rsp
   18824:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1882c:	48 89 c7             	mov    %rax,%rdi
   1882f:	e8 bc 11 00 00       	call   199f0 <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   18834:	90                   	nop
   18835:	c9                   	leave
   18836:	c3                   	ret
   18837:	90                   	nop

0000000000018838 <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   18838:	55                   	push   %rbp
   18839:	48 89 e5             	mov    %rsp,%rbp
   1883c:	48 83 ec 10          	sub    $0x10,%rsp
   18840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18844:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18848:	48 89 c7             	mov    %rax,%rdi
   1884b:	e8 cc ff ff ff       	call   1881c <_ZNSt15__uniq_ptr_implIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1Ev>
   18850:	90                   	nop
   18851:	c9                   	leave
   18852:	c3                   	ret
   18853:	90                   	nop

0000000000018854 <_ZNSt10unique_ptrIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   18854:	55                   	push   %rbp
   18855:	48 89 e5             	mov    %rsp,%rbp
   18858:	48 83 ec 10          	sub    $0x10,%rsp
   1885c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   18860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18864:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1886b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1886f:	48 89 c7             	mov    %rax,%rdi
   18872:	e8 c1 ff ff ff       	call   18838 <_ZNSt15__uniq_ptr_dataIN2vk4raii18InstanceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   18877:	90                   	nop
   18878:	c9                   	leave
   18879:	c3                   	ret

000000000001887a <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
   1887a:	55                   	push   %rbp
   1887b:	48 89 e5             	mov    %rsp,%rbp
   1887e:	48 83 ec 10          	sub    $0x10,%rsp
   18882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type()
   18886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1888a:	48 89 c7             	mov    %rax,%rdi
   1888d:	e8 12 12 00 00       	call   19aa4 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>
   18892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18896:	48 89 c7             	mov    %rax,%rdi
   18899:	e8 22 12 00 00       	call   19ac0 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
   1889e:	90                   	nop
   1889f:	c9                   	leave
   188a0:	c3                   	ret
   188a1:	90                   	nop

00000000000188a2 <_ZNSaIN2vk4raii14PhysicalDeviceEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
   188a2:	55                   	push   %rbp
   188a3:	48 89 e5             	mov    %rsp,%rbp
   188a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   188aa:	90                   	nop
   188ab:	5d                   	pop    %rbp
   188ac:	c3                   	ret
   188ad:	90                   	nop

00000000000188ae <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   188ae:	55                   	push   %rbp
   188af:	48 89 e5             	mov    %rsp,%rbp
   188b2:	48 83 ec 10          	sub    $0x10,%rsp
   188b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   188ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188be:	48 8b 50 10          	mov    0x10(%rax),%rdx
   188c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188c6:	48 8b 00             	mov    (%rax),%rax
   188c9:	48 29 c2             	sub    %rax,%rdx
   188cc:	48 89 d0             	mov    %rdx,%rax
   188cf:	48 c1 f8 04          	sar    $0x4,%rax
	_M_deallocate(_M_impl._M_start,
   188d3:	48 89 c2             	mov    %rax,%rdx
   188d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188da:	48 8b 08             	mov    (%rax),%rcx
   188dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188e1:	48 89 ce             	mov    %rcx,%rsi
   188e4:	48 89 c7             	mov    %rax,%rdi
   188e7:	e8 02 12 00 00       	call   19aee <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      }
   188ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188f0:	48 89 c7             	mov    %rax,%rdi
   188f3:	e8 84 ea ff ff       	call   1737c <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE12_Vector_implD1Ev>
   188f8:	90                   	nop
   188f9:	c9                   	leave
   188fa:	c3                   	ret
   188fb:	90                   	nop

00000000000188fc <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   188fc:	55                   	push   %rbp
   188fd:	48 89 e5             	mov    %rsp,%rbp
   18900:	48 83 ec 10          	sub    $0x10,%rsp
   18904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   18908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1890c:	48 89 c7             	mov    %rax,%rdi
   1890f:	e8 10 12 00 00       	call   19b24 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18914:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18917:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1891b:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1891f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18923:	48 8b 00             	mov    (%rax),%rax
   18926:	48 89 ce             	mov    %rcx,%rsi
   18929:	48 89 c7             	mov    %rax,%rdi
   1892c:	e8 01 12 00 00       	call   19b32 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>
      }
   18931:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18935:	48 89 c7             	mov    %rax,%rdi
   18938:	e8 71 ff ff ff       	call   188ae <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EED1Ev>
   1893d:	90                   	nop
   1893e:	c9                   	leave
   1893f:	c3                   	ret

0000000000018940 <_ZNSaIP18VkPhysicalDevice_TED1Ev>:
   18940:	55                   	push   %rbp
   18941:	48 89 e5             	mov    %rsp,%rbp
   18944:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18948:	90                   	nop
   18949:	5d                   	pop    %rbp
   1894a:	c3                   	ret
   1894b:	90                   	nop

000000000001894c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   1894c:	55                   	push   %rbp
   1894d:	48 89 e5             	mov    %rsp,%rbp
   18950:	48 83 ec 10          	sub    $0x10,%rsp
   18954:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   18958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1895c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   18960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18964:	48 8b 00             	mov    (%rax),%rax
   18967:	48 29 c2             	sub    %rax,%rdx
   1896a:	48 89 d0             	mov    %rdx,%rax
   1896d:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   18971:	48 89 c2             	mov    %rax,%rdx
   18974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18978:	48 8b 08             	mov    (%rax),%rcx
   1897b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1897f:	48 89 ce             	mov    %rcx,%rsi
   18982:	48 89 c7             	mov    %rax,%rdi
   18985:	e8 d2 11 00 00       	call   19b5c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
      }
   1898a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1898e:	48 89 c7             	mov    %rax,%rdi
   18991:	e8 3a ea ff ff       	call   173d0 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE12_Vector_implD1Ev>
   18996:	90                   	nop
   18997:	c9                   	leave
   18998:	c3                   	ret
   18999:	90                   	nop

000000000001899a <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   1899a:	55                   	push   %rbp
   1899b:	48 89 e5             	mov    %rsp,%rbp
   1899e:	48 83 ec 10          	sub    $0x10,%rsp
   189a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   189a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   189aa:	48 89 c7             	mov    %rax,%rdi
   189ad:	e8 e0 11 00 00       	call   19b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   189b2:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   189b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   189b9:	48 8b 48 08          	mov    0x8(%rax),%rcx
   189bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   189c1:	48 8b 00             	mov    (%rax),%rax
   189c4:	48 89 ce             	mov    %rcx,%rsi
   189c7:	48 89 c7             	mov    %rax,%rdi
   189ca:	e8 d1 11 00 00       	call   19ba0 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
      }
   189cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   189d3:	48 89 c7             	mov    %rax,%rdi
   189d6:	e8 71 ff ff ff       	call   1894c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EED1Ev>
   189db:	90                   	nop
   189dc:	c9                   	leave
   189dd:	c3                   	ret

00000000000189de <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   189de:	55                   	push   %rbp
   189df:	48 89 e5             	mov    %rsp,%rbp
   189e2:	48 83 ec 10          	sub    $0x10,%rsp
   189e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   189ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   189ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   189f2:	48 89 c7             	mov    %rax,%rdi
   189f5:	e8 8e 00 00 00       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   189fa:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   189fe:	0f 92 c0             	setb   %al
   18a01:	84 c0                	test   %al,%al
   18a03:	74 24                	je     18a29 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   18a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a09:	48 89 c7             	mov    %rax,%rdi
   18a0c:	e8 77 00 00 00       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18a11:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18a15:	48 29 c2             	sub    %rax,%rdx
   18a18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a1c:	48 89 d6             	mov    %rdx,%rsi
   18a1f:	48 89 c7             	mov    %rax,%rdi
   18a22:	e8 6b 12 00 00       	call   19c92 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>
      }
   18a27:	eb 38                	jmp    18a61 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	else if (__new_size < size())
   18a29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a2d:	48 89 c7             	mov    %rax,%rdi
   18a30:	e8 53 00 00 00       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   18a35:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   18a39:	0f 92 c0             	setb   %al
   18a3c:	84 c0                	test   %al,%al
   18a3e:	74 21                	je     18a61 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE6resizeEm+0x83>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   18a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a44:	48 8b 00             	mov    (%rax),%rax
   18a47:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18a4b:	48 c1 e2 03          	shl    $0x3,%rdx
   18a4f:	48 01 c2             	add    %rax,%rdx
   18a52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a56:	48 89 d6             	mov    %rdx,%rsi
   18a59:	48 89 c7             	mov    %rax,%rdi
   18a5c:	e8 3b 14 00 00       	call   19e9c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>
      }
   18a61:	90                   	nop
   18a62:	c9                   	leave
   18a63:	c3                   	ret

0000000000018a64 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   18a64:	55                   	push   %rbp
   18a65:	48 89 e5             	mov    %rsp,%rbp
   18a68:	48 83 ec 10          	sub    $0x10,%rsp
   18a6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   18a70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a74:	48 8b 10             	mov    (%rax),%rdx
   18a77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a7b:	48 89 d6             	mov    %rdx,%rsi
   18a7e:	48 89 c7             	mov    %rax,%rdi
   18a81:	e8 76 14 00 00       	call   19efc <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   18a86:	c9                   	leave
   18a87:	c3                   	ret

0000000000018a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18a88:	55                   	push   %rbp
   18a89:	48 89 e5             	mov    %rsp,%rbp
   18a8c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18a90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a94:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18a9c:	48 8b 00             	mov    (%rax),%rax
   18a9f:	48 29 c2             	sub    %rax,%rdx
   18aa2:	48 89 d0             	mov    %rdx,%rax
   18aa5:	48 c1 f8 03          	sar    $0x3,%rax
   18aa9:	5d                   	pop    %rbp
   18aaa:	c3                   	ret
   18aab:	90                   	nop

0000000000018aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18aac:	55                   	push   %rbp
   18aad:	48 89 e5             	mov    %rsp,%rbp
   18ab0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ab8:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18abc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ac0:	48 8b 00             	mov    (%rax),%rax
   18ac3:	48 29 c2             	sub    %rax,%rdx
   18ac6:	48 89 d0             	mov    %rdx,%rax
   18ac9:	48 c1 f8 04          	sar    $0x4,%rax
   18acd:	5d                   	pop    %rbp
   18ace:	c3                   	ret
   18acf:	90                   	nop

0000000000018ad0 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   18ad0:	55                   	push   %rbp
   18ad1:	48 89 e5             	mov    %rsp,%rbp
   18ad4:	48 83 ec 20          	sub    $0x20,%rsp
   18ad8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18adc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    reserve(size_type __n)
    {
      if (__n > this->max_size())
   18ae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ae4:	48 89 c7             	mov    %rax,%rdi
   18ae7:	e8 22 14 00 00       	call   19f0e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   18aec:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18af0:	0f 92 c0             	setb   %al
   18af3:	84 c0                	test   %al,%al
   18af5:	74 0f                	je     18b06 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x36>
	__throw_length_error(__N("vector::reserve"));
   18af7:	48 8d 05 ac e8 00 00 	lea    0xe8ac(%rip),%rax        # 273aa <_ZNSt8__detailL19__atomic_spin_countE+0x46ee>
   18afe:	48 89 c7             	mov    %rax,%rdi
   18b01:	e8 da c5 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
      if (this->capacity() < __n)
   18b06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b0a:	48 89 c7             	mov    %rax,%rdi
   18b0d:	e8 1e 14 00 00       	call   19f30 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>
   18b12:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   18b16:	0f 92 c0             	setb   %al
   18b19:	84 c0                	test   %al,%al
   18b1b:	0f 84 c5 00 00 00    	je     18be6 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE7reserveEm+0x116>
	{
	  const size_type __old_size = size();
   18b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b25:	48 89 c7             	mov    %rax,%rdi
   18b28:	e8 7f ff ff ff       	call   18aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   18b2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
   18b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18b39:	48 89 d6             	mov    %rdx,%rsi
   18b3c:	48 89 c7             	mov    %rax,%rdi
   18b3f:	e8 10 14 00 00       	call   19f54 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   18b44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
			  __tmp, _M_get_Tp_allocator());
   18b48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b4c:	48 89 c7             	mov    %rax,%rdi
   18b4f:	e8 d0 0f 00 00       	call   19b24 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   18b54:	48 89 c1             	mov    %rax,%rcx
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   18b57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b5b:	48 8b 70 08          	mov    0x8(%rax),%rsi
   18b5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b63:	48 8b 00             	mov    (%rax),%rax
   18b66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18b6a:	48 89 c7             	mov    %rax,%rdi
   18b6d:	e8 15 14 00 00       	call   19f87 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
   18b72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
			this->_M_impl._M_end_of_storage
   18b76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18b7a:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			- this->_M_impl._M_start);
   18b7e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18b82:	48 8b 12             	mov    (%rdx),%rdx
   18b85:	48 29 d1             	sub    %rdx,%rcx
   18b88:	48 c1 f9 04          	sar    $0x4,%rcx
   18b8c:	48 89 ca             	mov    %rcx,%rdx
	  _M_deallocate(this->_M_impl._M_start,
   18b8f:	48 89 d6             	mov    %rdx,%rsi
   18b92:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18b96:	48 8b 0a             	mov    (%rdx),%rcx
   18b99:	48 89 f2             	mov    %rsi,%rdx
   18b9c:	48 89 ce             	mov    %rcx,%rsi
   18b9f:	48 89 c7             	mov    %rax,%rdi
   18ba2:	e8 47 0f 00 00       	call   19aee <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
	  this->_M_impl._M_start = __tmp;
   18ba7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18bab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18baf:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
   18bb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bb6:	48 c1 e0 04          	shl    $0x4,%rax
   18bba:	48 89 c2             	mov    %rax,%rdx
   18bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18bc1:	48 01 c2             	add    %rax,%rdx
   18bc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18bc8:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   18bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18bd0:	48 8b 00             	mov    (%rax),%rax
   18bd3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   18bd7:	48 c1 e2 04          	shl    $0x4,%rdx
   18bdb:	48 01 c2             	add    %rax,%rdx
   18bde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18be2:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
    }
   18be6:	90                   	nop
   18be7:	c9                   	leave
   18be8:	c3                   	ret
   18be9:	90                   	nop

0000000000018bea <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   18bea:	55                   	push   %rbp
   18beb:	48 89 e5             	mov    %rsp,%rbp
   18bee:	48 83 ec 20          	sub    $0x20,%rsp
   18bf2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   18bf6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   18bfa:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   18bfe:	48 89 d6             	mov    %rdx,%rsi
   18c01:	48 89 c7             	mov    %rax,%rdi
   18c04:	e8 b1 13 00 00       	call   19fba <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   18c09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c0d:	c9                   	leave
   18c0e:	c3                   	ret
   18c0f:	90                   	nop

0000000000018c10 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   18c10:	55                   	push   %rbp
   18c11:	48 89 e5             	mov    %rsp,%rbp
   18c14:	48 83 ec 20          	sub    $0x20,%rsp
   18c18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   18c1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c20:	48 8d 50 08          	lea    0x8(%rax),%rdx
   18c24:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   18c28:	48 89 d6             	mov    %rdx,%rsi
   18c2b:	48 89 c7             	mov    %rax,%rdi
   18c2e:	e8 87 13 00 00       	call   19fba <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   18c33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c37:	c9                   	leave
   18c38:	c3                   	ret
   18c39:	90                   	nop

0000000000018c3a <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   18c3a:	55                   	push   %rbp
   18c3b:	48 89 e5             	mov    %rsp,%rbp
   18c3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   18c42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c46:	48 8b 00             	mov    (%rax),%rax
   18c49:	48 8d 50 08          	lea    0x8(%rax),%rdx
   18c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c51:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   18c54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   18c58:	5d                   	pop    %rbp
   18c59:	c3                   	ret

0000000000018c5a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
   18c5a:	55                   	push   %rbp
   18c5b:	48 89 e5             	mov    %rsp,%rbp
   18c5e:	41 54                	push   %r12
   18c60:	53                   	push   %rbx
   18c61:	48 83 ec 20          	sub    $0x20,%rsp
   18c65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18c69:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   18c6d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   18c71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c75:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18c79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18c7d:	48 8b 40 10          	mov    0x10(%rax),%rax
   18c81:	48 39 c2             	cmp    %rax,%rdx
   18c84:	74 4b                	je     18cd1 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0x77>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   18c86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18c8a:	48 89 c7             	mov    %rax,%rdi
   18c8d:	e8 53 13 00 00       	call   19fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   18c92:	48 89 c3             	mov    %rax,%rbx
   18c95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18c99:	48 89 c7             	mov    %rax,%rdi
   18c9c:	e8 36 13 00 00       	call   19fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   18ca1:	48 89 c2             	mov    %rax,%rdx
   18ca4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ca8:	48 8b 70 08          	mov    0x8(%rax),%rsi
   18cac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18cb0:	48 89 d9             	mov    %rbx,%rcx
   18cb3:	48 89 c7             	mov    %rax,%rdi
   18cb6:	e8 38 13 00 00       	call   19ff3 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   18cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18cbf:	48 8b 40 08          	mov    0x8(%rax),%rax
   18cc3:	48 8d 50 10          	lea    0x10(%rax),%rdx
   18cc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ccb:	48 89 50 08          	mov    %rdx,0x8(%rax)
   18ccf:	eb 3f                	jmp    18d10 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12emplace_backIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEERS2_DpOT_+0xb6>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18cd1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18cd5:	48 89 c7             	mov    %rax,%rdi
   18cd8:	e8 08 13 00 00       	call   19fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   18cdd:	49 89 c4             	mov    %rax,%r12
   18ce0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18ce4:	48 89 c7             	mov    %rax,%rdi
   18ce7:	e8 eb 12 00 00       	call   19fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   18cec:	48 89 c3             	mov    %rax,%rbx
   18cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18cf3:	48 89 c7             	mov    %rax,%rdi
   18cf6:	e8 35 09 00 00       	call   19630 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   18cfb:	48 89 c6             	mov    %rax,%rsi
   18cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18d02:	4c 89 e1             	mov    %r12,%rcx
   18d05:	48 89 da             	mov    %rbx,%rdx
   18d08:	48 89 c7             	mov    %rax,%rdi
   18d0b:	e8 3e 14 00 00       	call   1a14e <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
   18d10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18d14:	48 89 c7             	mov    %rax,%rdi
   18d17:	e8 d6 15 00 00       	call   1a2f2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>
#endif
      }
   18d1c:	48 83 c4 20          	add    $0x20,%rsp
   18d20:	5b                   	pop    %rbx
   18d21:	41 5c                	pop    %r12
   18d23:	5d                   	pop    %rbp
   18d24:	c3                   	ret
   18d25:	90                   	nop

0000000000018d26 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>:
      __uniq_ptr_impl() = default;
   18d26:	55                   	push   %rbp
   18d27:	48 89 e5             	mov    %rsp,%rbp
   18d2a:	48 83 ec 10          	sub    $0x10,%rsp
   18d2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d36:	48 89 c7             	mov    %rax,%rdi
   18d39:	e8 f4 15 00 00       	call   1a332 <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>
   18d3e:	90                   	nop
   18d3f:	c9                   	leave
   18d40:	c3                   	ret
   18d41:	90                   	nop

0000000000018d42 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
   18d42:	55                   	push   %rbp
   18d43:	48 89 e5             	mov    %rsp,%rbp
   18d46:	48 83 ec 10          	sub    $0x10,%rsp
   18d4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d52:	48 89 c7             	mov    %rax,%rdi
   18d55:	e8 cc ff ff ff       	call   18d26 <_ZNSt15__uniq_ptr_implIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1Ev>
   18d5a:	90                   	nop
   18d5b:	c9                   	leave
   18d5c:	c3                   	ret
   18d5d:	90                   	nop

0000000000018d5e <_ZNSt10unique_ptrIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEC1IS4_vEEv>:
	constexpr unique_ptr() noexcept
   18d5e:	55                   	push   %rbp
   18d5f:	48 89 e5             	mov    %rsp,%rbp
   18d62:	48 83 ec 10          	sub    $0x10,%rsp
   18d66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_t()
   18d6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d6e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   18d75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18d79:	48 89 c7             	mov    %rax,%rdi
   18d7c:	e8 c1 ff ff ff       	call   18d42 <_ZNSt15__uniq_ptr_dataIN2vk4raii16DeviceDispatcherESt14default_deleteIS2_ELb1ELb1EECI1St15__uniq_ptr_implIS2_S4_EEv>
	{ }
   18d81:	90                   	nop
   18d82:	c9                   	leave
   18d83:	c3                   	ret

0000000000018d84 <_ZNSaIN2vk21QueueFamilyPropertiesEED1Ev>:
   18d84:	55                   	push   %rbp
   18d85:	48 89 e5             	mov    %rsp,%rbp
   18d88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18d8c:	90                   	nop
   18d8d:	5d                   	pop    %rbp
   18d8e:	c3                   	ret
   18d8f:	90                   	nop

0000000000018d90 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   18d90:	55                   	push   %rbp
   18d91:	48 89 e5             	mov    %rsp,%rbp
   18d94:	48 83 ec 10          	sub    $0x10,%rsp
   18d98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   18d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18da0:	48 8b 50 10          	mov    0x10(%rax),%rdx
   18da4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18da8:	48 8b 00             	mov    (%rax),%rax
   18dab:	48 29 c2             	sub    %rax,%rdx
   18dae:	48 c1 fa 03          	sar    $0x3,%rdx
   18db2:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   18db9:	aa aa aa 
   18dbc:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   18dc0:	48 89 c2             	mov    %rax,%rdx
   18dc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18dc7:	48 8b 08             	mov    (%rax),%rcx
   18dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18dce:	48 89 ce             	mov    %rcx,%rsi
   18dd1:	48 89 c7             	mov    %rax,%rdi
   18dd4:	e8 75 15 00 00       	call   1a34e <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   18dd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ddd:	48 89 c7             	mov    %rax,%rdi
   18de0:	e8 cd ed ff ff       	call   17bb2 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE12_Vector_implD1Ev>
   18de5:	90                   	nop
   18de6:	c9                   	leave
   18de7:	c3                   	ret

0000000000018de8 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   18de8:	55                   	push   %rbp
   18de9:	48 89 e5             	mov    %rsp,%rbp
   18dec:	48 83 ec 10          	sub    $0x10,%rsp
   18df0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   18df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18df8:	48 89 c7             	mov    %rax,%rdi
   18dfb:	e8 84 15 00 00       	call   1a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18e00:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18e03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e07:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e0f:	48 8b 00             	mov    (%rax),%rax
   18e12:	48 89 ce             	mov    %rcx,%rsi
   18e15:	48 89 c7             	mov    %rax,%rdi
   18e18:	e8 75 15 00 00       	call   1a392 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
      }
   18e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e21:	48 89 c7             	mov    %rax,%rdi
   18e24:	e8 67 ff ff ff       	call   18d90 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EED1Ev>
   18e29:	90                   	nop
   18e2a:	c9                   	leave
   18e2b:	c3                   	ret

0000000000018e2c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   18e2c:	55                   	push   %rbp
   18e2d:	48 89 e5             	mov    %rsp,%rbp
   18e30:	48 83 ec 10          	sub    $0x10,%rsp
   18e34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18e38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   18e3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e40:	48 89 c7             	mov    %rax,%rdi
   18e43:	e8 98 00 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18e48:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   18e4c:	0f 92 c0             	setb   %al
   18e4f:	84 c0                	test   %al,%al
   18e51:	74 24                	je     18e77 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   18e53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e57:	48 89 c7             	mov    %rax,%rdi
   18e5a:	e8 81 00 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18e5f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18e63:	48 29 c2             	sub    %rax,%rdx
   18e66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e6a:	48 89 d6             	mov    %rdx,%rsi
   18e6d:	48 89 c7             	mov    %rax,%rdi
   18e70:	e8 0f 16 00 00       	call   1a484 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>
      }
   18e75:	eb 42                	jmp    18eb9 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	else if (__new_size < size())
   18e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e7b:	48 89 c7             	mov    %rax,%rdi
   18e7e:	e8 5d 00 00 00       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   18e83:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   18e87:	0f 92 c0             	setb   %al
   18e8a:	84 c0                	test   %al,%al
   18e8c:	74 2b                	je     18eb9 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE6resizeEm+0x8d>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   18e8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18e92:	48 8b 08             	mov    (%rax),%rcx
   18e95:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18e99:	48 89 d0             	mov    %rdx,%rax
   18e9c:	48 01 c0             	add    %rax,%rax
   18e9f:	48 01 d0             	add    %rdx,%rax
   18ea2:	48 c1 e0 03          	shl    $0x3,%rax
   18ea6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   18eaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18eae:	48 89 d6             	mov    %rdx,%rsi
   18eb1:	48 89 c7             	mov    %rax,%rdi
   18eb4:	e8 07 18 00 00       	call   1a6c0 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   18eb9:	90                   	nop
   18eba:	c9                   	leave
   18ebb:	c3                   	ret

0000000000018ebc <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   18ebc:	55                   	push   %rbp
   18ebd:	48 89 e5             	mov    %rsp,%rbp
   18ec0:	48 83 ec 10          	sub    $0x10,%rsp
   18ec4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   18ec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ecc:	48 8b 10             	mov    (%rax),%rdx
   18ecf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ed3:	48 89 d6             	mov    %rdx,%rsi
   18ed6:	48 89 c7             	mov    %rax,%rdi
   18ed9:	e8 54 18 00 00       	call   1a732 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   18ede:	c9                   	leave
   18edf:	c3                   	ret

0000000000018ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   18ee0:	55                   	push   %rbp
   18ee1:	48 89 e5             	mov    %rsp,%rbp
   18ee4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18ee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18eec:	48 8b 50 08          	mov    0x8(%rax),%rdx
   18ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ef4:	48 8b 00             	mov    (%rax),%rax
   18ef7:	48 29 c2             	sub    %rax,%rdx
   18efa:	48 c1 fa 03          	sar    $0x3,%rdx
   18efe:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   18f05:	aa aa aa 
   18f08:	48 0f af c2          	imul   %rdx,%rax
   18f0c:	5d                   	pop    %rbp
   18f0d:	c3                   	ret

0000000000018f0e <_ZNSaIN2vk19ExtensionPropertiesEED1Ev>:
   18f0e:	55                   	push   %rbp
   18f0f:	48 89 e5             	mov    %rsp,%rbp
   18f12:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18f16:	90                   	nop
   18f17:	5d                   	pop    %rbp
   18f18:	c3                   	ret
   18f19:	90                   	nop

0000000000018f1a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   18f1a:	55                   	push   %rbp
   18f1b:	48 89 e5             	mov    %rsp,%rbp
   18f1e:	48 83 ec 10          	sub    $0x10,%rsp
   18f22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   18f26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f2a:	48 8b 50 10          	mov    0x10(%rax),%rdx
   18f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f32:	48 8b 00             	mov    (%rax),%rax
   18f35:	48 29 c2             	sub    %rax,%rdx
   18f38:	48 c1 fa 02          	sar    $0x2,%rdx
   18f3c:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   18f43:	fc c0 0f 
   18f46:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   18f4a:	48 89 c2             	mov    %rax,%rdx
   18f4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f51:	48 8b 08             	mov    (%rax),%rcx
   18f54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f58:	48 89 ce             	mov    %rcx,%rsi
   18f5b:	48 89 c7             	mov    %rax,%rdi
   18f5e:	e8 e1 17 00 00       	call   1a744 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   18f63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f67:	48 89 c7             	mov    %rax,%rdi
   18f6a:	e8 5f ec ff ff       	call   17bce <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE12_Vector_implD1Ev>
   18f6f:	90                   	nop
   18f70:	c9                   	leave
   18f71:	c3                   	ret

0000000000018f72 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   18f72:	55                   	push   %rbp
   18f73:	48 89 e5             	mov    %rsp,%rbp
   18f76:	48 83 ec 10          	sub    $0x10,%rsp
   18f7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   18f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f82:	48 89 c7             	mov    %rax,%rdi
   18f85:	e8 f0 17 00 00       	call   1a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   18f8a:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18f8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f91:	48 8b 48 08          	mov    0x8(%rax),%rcx
   18f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18f99:	48 8b 00             	mov    (%rax),%rax
   18f9c:	48 89 ce             	mov    %rcx,%rsi
   18f9f:	48 89 c7             	mov    %rax,%rdi
   18fa2:	e8 e1 17 00 00       	call   1a788 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
      }
   18fa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18fab:	48 89 c7             	mov    %rax,%rdi
   18fae:	e8 67 ff ff ff       	call   18f1a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EED1Ev>
   18fb3:	90                   	nop
   18fb4:	c9                   	leave
   18fb5:	c3                   	ret

0000000000018fb6 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv>:
    RefType const * operator->() const VULKAN_HPP_NOEXCEPT
   18fb6:	55                   	push   %rbp
   18fb7:	48 89 e5             	mov    %rsp,%rbp
   18fba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return m_ptr;
   18fbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18fc2:	48 8b 00             	mov    (%rax),%rax
    }
   18fc5:	5d                   	pop    %rbp
   18fc6:	c3                   	ret
   18fc7:	90                   	nop

0000000000018fc8 <_ZNK2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvbEv>:
    explicit operator bool() const VULKAN_HPP_NOEXCEPT
   18fc8:	55                   	push   %rbp
   18fc9:	48 89 e5             	mov    %rsp,%rbp
   18fcc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      return !!m_ptr;
   18fd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18fd4:	48 8b 00             	mov    (%rax),%rax
   18fd7:	48 85 c0             	test   %rax,%rax
   18fda:	0f 95 c0             	setne  %al
    }
   18fdd:	5d                   	pop    %rbp
   18fde:	c3                   	ret
   18fdf:	90                   	nop

0000000000018fe0 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   18fe0:	55                   	push   %rbp
   18fe1:	48 89 e5             	mov    %rsp,%rbp
   18fe4:	48 83 ec 10          	sub    $0x10,%rsp
   18fe8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18fec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   18ff0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18ff4:	48 89 c7             	mov    %rax,%rdi
   18ff7:	e8 9a 00 00 00       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   18ffc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   19000:	0f 92 c0             	setb   %al
   19003:	84 c0                	test   %al,%al
   19005:	74 24                	je     1902b <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   19007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1900b:	48 89 c7             	mov    %rax,%rdi
   1900e:	e8 83 00 00 00       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   19013:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19017:	48 29 c2             	sub    %rax,%rdx
   1901a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1901e:	48 89 d6             	mov    %rdx,%rsi
   19021:	48 89 c7             	mov    %rax,%rdi
   19024:	e8 51 18 00 00       	call   1a87a <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>
      }
   19029:	eb 43                	jmp    1906e <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   1902b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1902f:	48 89 c7             	mov    %rax,%rdi
   19032:	e8 5f 00 00 00       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   19037:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   1903b:	0f 92 c0             	setb   %al
   1903e:	84 c0                	test   %al,%al
   19040:	74 2c                	je     1906e <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   19042:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19046:	48 8b 08             	mov    (%rax),%rcx
   19049:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1904d:	48 89 d0             	mov    %rdx,%rax
   19050:	48 c1 e0 06          	shl    $0x6,%rax
   19054:	48 01 d0             	add    %rdx,%rax
   19057:	48 c1 e0 02          	shl    $0x2,%rax
   1905b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   1905f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19063:	48 89 d6             	mov    %rdx,%rsi
   19066:	48 89 c7             	mov    %rax,%rdi
   19069:	e8 4c 1a 00 00       	call   1aaba <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   1906e:	90                   	nop
   1906f:	c9                   	leave
   19070:	c3                   	ret
   19071:	90                   	nop

0000000000019072 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   19072:	55                   	push   %rbp
   19073:	48 89 e5             	mov    %rsp,%rbp
   19076:	48 83 ec 10          	sub    $0x10,%rsp
   1907a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1907e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19082:	48 8b 10             	mov    (%rax),%rdx
   19085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19089:	48 89 d6             	mov    %rdx,%rsi
   1908c:	48 89 c7             	mov    %rax,%rdi
   1908f:	e8 98 1a 00 00       	call   1ab2c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   19094:	c9                   	leave
   19095:	c3                   	ret

0000000000019096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   19096:	55                   	push   %rbp
   19097:	48 89 e5             	mov    %rsp,%rbp
   1909a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1909e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190a2:	48 8b 50 08          	mov    0x8(%rax),%rdx
   190a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190aa:	48 8b 00             	mov    (%rax),%rax
   190ad:	48 29 c2             	sub    %rax,%rdx
   190b0:	48 c1 fa 02          	sar    $0x2,%rdx
   190b4:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   190bb:	fc c0 0f 
   190be:	48 0f af c2          	imul   %rdx,%rax
   190c2:	5d                   	pop    %rbp
   190c3:	c3                   	ret

00000000000190c4 <_ZNSaIN2vk15LayerPropertiesEED1Ev>:
   190c4:	55                   	push   %rbp
   190c5:	48 89 e5             	mov    %rsp,%rbp
   190c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   190cc:	90                   	nop
   190cd:	5d                   	pop    %rbp
   190ce:	c3                   	ret
   190cf:	90                   	nop

00000000000190d0 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   190d0:	55                   	push   %rbp
   190d1:	48 89 e5             	mov    %rsp,%rbp
   190d4:	48 83 ec 10          	sub    $0x10,%rsp
   190d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   190dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190e0:	48 8b 50 10          	mov    0x10(%rax),%rdx
   190e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190e8:	48 8b 00             	mov    (%rax),%rax
   190eb:	48 29 c2             	sub    %rax,%rdx
   190ee:	48 c1 fa 03          	sar    $0x3,%rdx
   190f2:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   190f9:	fc c0 0f 
   190fc:	48 0f af c2          	imul   %rdx,%rax
	_M_deallocate(_M_impl._M_start,
   19100:	48 89 c2             	mov    %rax,%rdx
   19103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19107:	48 8b 08             	mov    (%rax),%rcx
   1910a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1910e:	48 89 ce             	mov    %rcx,%rsi
   19111:	48 89 c7             	mov    %rax,%rdi
   19114:	e8 25 1a 00 00       	call   1ab3e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
      }
   19119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1911d:	48 89 c7             	mov    %rax,%rdi
   19120:	e8 c5 ea ff ff       	call   17bea <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   19125:	90                   	nop
   19126:	c9                   	leave
   19127:	c3                   	ret

0000000000019128 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   19128:	55                   	push   %rbp
   19129:	48 89 e5             	mov    %rsp,%rbp
   1912c:	48 83 ec 10          	sub    $0x10,%rsp
   19130:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   19134:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19138:	48 89 c7             	mov    %rax,%rdi
   1913b:	e8 34 1a 00 00       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   19140:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19143:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19147:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1914b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1914f:	48 8b 00             	mov    (%rax),%rax
   19152:	48 89 ce             	mov    %rcx,%rsi
   19155:	48 89 c7             	mov    %rax,%rdi
   19158:	e8 25 1a 00 00       	call   1ab82 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
      }
   1915d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19161:	48 89 c7             	mov    %rax,%rdi
   19164:	e8 67 ff ff ff       	call   190d0 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   19169:	90                   	nop
   1916a:	c9                   	leave
   1916b:	c3                   	ret

000000000001916c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm>:
      resize(size_type __new_size)
   1916c:	55                   	push   %rbp
   1916d:	48 89 e5             	mov    %rsp,%rbp
   19170:	48 83 ec 10          	sub    $0x10,%rsp
   19174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19178:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	if (__new_size > size())
   1917c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19180:	48 89 c7             	mov    %rax,%rdi
   19183:	e8 9a 00 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   19188:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1918c:	0f 92 c0             	setb   %al
   1918f:	84 c0                	test   %al,%al
   19191:	74 24                	je     191b7 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x4b>
	  _M_default_append(__new_size - size());
   19193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19197:	48 89 c7             	mov    %rax,%rdi
   1919a:	e8 83 00 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1919f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   191a3:	48 29 c2             	sub    %rax,%rdx
   191a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   191aa:	48 89 d6             	mov    %rdx,%rsi
   191ad:	48 89 c7             	mov    %rax,%rdi
   191b0:	e8 bf 1a 00 00       	call   1ac74 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>
      }
   191b5:	eb 43                	jmp    191fa <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	else if (__new_size < size())
   191b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   191bb:	48 89 c7             	mov    %rax,%rdi
   191be:	e8 5f 00 00 00       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   191c3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   191c7:	0f 92 c0             	setb   %al
   191ca:	84 c0                	test   %al,%al
   191cc:	74 2c                	je     191fa <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE6resizeEm+0x8e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   191ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   191d2:	48 8b 08             	mov    (%rax),%rcx
   191d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   191d9:	48 89 d0             	mov    %rdx,%rax
   191dc:	48 c1 e0 06          	shl    $0x6,%rax
   191e0:	48 01 d0             	add    %rdx,%rax
   191e3:	48 c1 e0 03          	shl    $0x3,%rax
   191e7:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   191eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   191ef:	48 89 d6             	mov    %rdx,%rsi
   191f2:	48 89 c7             	mov    %rax,%rdi
   191f5:	e8 ba 1c 00 00       	call   1aeb4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>
      }
   191fa:	90                   	nop
   191fb:	c9                   	leave
   191fc:	c3                   	ret
   191fd:	90                   	nop

00000000000191fe <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
   191fe:	55                   	push   %rbp
   191ff:	48 89 e5             	mov    %rsp,%rbp
   19202:	48 83 ec 10          	sub    $0x10,%rsp
   19206:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
   1920a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1920e:	48 8b 10             	mov    (%rax),%rdx
   19211:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19215:	48 89 d6             	mov    %rdx,%rsi
   19218:	48 89 c7             	mov    %rax,%rdi
   1921b:	e8 06 1d 00 00       	call   1af26 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>
   19220:	c9                   	leave
   19221:	c3                   	ret

0000000000019222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   19222:	55                   	push   %rbp
   19223:	48 89 e5             	mov    %rsp,%rbp
   19226:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1922a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1922e:	48 8b 50 08          	mov    0x8(%rax),%rdx
   19232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19236:	48 8b 00             	mov    (%rax),%rax
   19239:	48 29 c2             	sub    %rax,%rdx
   1923c:	48 c1 fa 03          	sar    $0x3,%rdx
   19240:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   19247:	fc c0 0f 
   1924a:	48 0f af c2          	imul   %rdx,%rax
   1924e:	5d                   	pop    %rbp
   1924f:	c3                   	ret

0000000000019250 <_ZSt3maxImERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
   19250:	55                   	push   %rbp
   19251:	48 89 e5             	mov    %rsp,%rbp
   19254:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19258:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (__a < __b)
   1925c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19260:	48 8b 10             	mov    (%rax),%rdx
   19263:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19267:	48 8b 00             	mov    (%rax),%rax
   1926a:	48 39 c2             	cmp    %rax,%rdx
   1926d:	73 06                	jae    19275 <_ZSt3maxImERKT_S2_S2_+0x25>
	return __b;
   1926f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19273:	eb 04                	jmp    19279 <_ZSt3maxImERKT_S2_S2_+0x29>
      return __a;
   19275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   19279:	5d                   	pop    %rbp
   1927a:	c3                   	ret
   1927b:	90                   	nop

000000000001927c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1927c:	55                   	push   %rbp
   1927d:	48 89 e5             	mov    %rsp,%rbp
   19280:	48 83 ec 20          	sub    $0x20,%rsp
   19284:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   19288:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1928c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19290:	48 89 d6             	mov    %rdx,%rsi
   19293:	48 89 c7             	mov    %rax,%rdi
   19296:	e8 d1 1c 00 00       	call   1af6c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1929b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1929f:	c9                   	leave
   192a0:	c3                   	ret
   192a1:	90                   	nop

00000000000192a2 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   192a2:	55                   	push   %rbp
   192a3:	48 89 e5             	mov    %rsp,%rbp
   192a6:	48 83 ec 20          	sub    $0x20,%rsp
   192aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   192ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   192b2:	48 8d 50 08          	lea    0x8(%rax),%rdx
   192b6:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   192ba:	48 89 d6             	mov    %rdx,%rsi
   192bd:	48 89 c7             	mov    %rax,%rdi
   192c0:	e8 a7 1c 00 00       	call   1af6c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   192c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   192c9:	c9                   	leave
   192ca:	c3                   	ret
   192cb:	90                   	nop

00000000000192cc <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   192cc:	55                   	push   %rbp
   192cd:	48 89 e5             	mov    %rsp,%rbp
   192d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   192d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   192d8:	48 8b 00             	mov    (%rax),%rax
   192db:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   192e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   192e6:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   192e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   192ed:	5d                   	pop    %rbp
   192ee:	c3                   	ret
   192ef:	90                   	nop

00000000000192f0 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvSt17basic_string_viewIcSt11char_traitsIcEEIcLi0EEEv>:
    operator std::string_view() const
   192f0:	55                   	push   %rbp
   192f1:	48 89 e5             	mov    %rsp,%rbp
   192f4:	48 83 ec 20          	sub    $0x20,%rsp
   192f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      return std::string_view( this->data() );
   192fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19300:	48 89 c7             	mov    %rax,%rdi
   19303:	e8 82 1c 00 00       	call   1af8a <_ZNKSt5arrayIcLm256EE4dataEv>
   19308:	48 89 c2             	mov    %rax,%rdx
   1930b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1930f:	48 89 d6             	mov    %rdx,%rsi
   19312:	48 89 c7             	mov    %rax,%rdi
   19315:	e8 46 e9 ff ff       	call   17c60 <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
   1931a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1931e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
   19322:	c9                   	leave
   19323:	c3                   	ret

0000000000019324 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      size() const noexcept
   19324:	55                   	push   %rbp
   19325:	48 89 e5             	mov    %rsp,%rbp
   19328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_len; }
   1932c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19330:	48 8b 00             	mov    (%rax),%rax
   19333:	5d                   	pop    %rbp
   19334:	c3                   	ret

0000000000019335 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE>:
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
   19335:	55                   	push   %rbp
   19336:	48 89 e5             	mov    %rsp,%rbp
   19339:	53                   	push   %rbx
   1933a:	48 83 ec 28          	sub    $0x28,%rsp
   1933e:	48 89 f0             	mov    %rsi,%rax
   19341:	49 89 f8             	mov    %rdi,%r8
   19344:	4c 89 c6             	mov    %r8,%rsi
   19347:	4c 89 cf             	mov    %r9,%rdi
   1934a:	48 89 c7             	mov    %rax,%rdi
   1934d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   19351:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19355:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   19359:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }
   1935d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19361:	48 89 c7             	mov    %rax,%rdi
   19364:	e8 bb ff ff ff       	call   19324 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   19369:	48 89 c3             	mov    %rax,%rbx
   1936c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   19370:	48 89 c7             	mov    %rax,%rdi
   19373:	e8 ac ff ff ff       	call   19324 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
   19378:	48 39 c3             	cmp    %rax,%rbx
   1937b:	75 22                	jne    1939f <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   1937d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19381:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19385:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19389:	48 89 ce             	mov    %rcx,%rsi
   1938c:	48 89 c7             	mov    %rax,%rdi
   1938f:	e8 10 1c 00 00       	call   1afa4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>
   19394:	85 c0                	test   %eax,%eax
   19396:	75 07                	jne    1939f <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6a>
   19398:	b8 01 00 00 00       	mov    $0x1,%eax
   1939d:	eb 05                	jmp    193a4 <_ZSteqIcSt11char_traitsIcEEbSt17basic_string_viewIT_T0_ENSt15__type_identityIS5_E4typeE+0x6f>
   1939f:	b8 00 00 00 00       	mov    $0x0,%eax
   193a4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   193a8:	c9                   	leave
   193a9:	c3                   	ret

00000000000193aa <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   193aa:	55                   	push   %rbp
   193ab:	48 89 e5             	mov    %rsp,%rbp
   193ae:	53                   	push   %rbx
   193af:	48 83 ec 28          	sub    $0x28,%rsp
   193b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   193b7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   193bb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _Base(_S_check_init_len(__n, __a), __a)
   193bf:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   193c3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   193c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   193cb:	48 89 d6             	mov    %rdx,%rsi
   193ce:	48 89 c7             	mov    %rax,%rdi
   193d1:	e8 24 ed ff ff       	call   180fa <_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_>
   193d6:	48 89 c1             	mov    %rax,%rcx
   193d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   193dd:	48 89 c2             	mov    %rax,%rdx
   193e0:	48 89 ce             	mov    %rcx,%rsi
   193e3:	48 89 df             	mov    %rbx,%rdi
   193e6:	e8 35 1c 00 00       	call   1b020 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>
      { _M_default_initialize(__n); }
   193eb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   193ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   193f3:	48 89 d6             	mov    %rdx,%rsi
   193f6:	48 89 c7             	mov    %rax,%rdi
   193f9:	e8 80 1c 00 00       	call   1b07e <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>
   193fe:	eb 1a                	jmp    1941a <_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_+0x70>
   19400:	48 89 c3             	mov    %rax,%rbx
   19403:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19407:	48 89 c7             	mov    %rax,%rdi
   1940a:	e8 75 00 00 00       	call   19484 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   1940f:	48 89 d8             	mov    %rbx,%rax
   19412:	48 89 c7             	mov    %rax,%rdi
   19415:	e8 86 bf fe ff       	call   53a0 <_Unwind_Resume@plt>
   1941a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1941e:	c9                   	leave
   1941f:	c3                   	ret

0000000000019420 <_ZNSt6vectorIPKcSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   19420:	55                   	push   %rbp
   19421:	48 89 e5             	mov    %rsp,%rbp
   19424:	48 83 ec 10          	sub    $0x10,%rsp
   19428:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_get_Tp_allocator());
   1942c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19430:	48 89 c7             	mov    %rax,%rdi
   19433:	e8 b4 ec ff ff       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   19438:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1943b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1943f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19443:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19447:	48 8b 00             	mov    (%rax),%rax
   1944a:	48 89 ce             	mov    %rcx,%rsi
   1944d:	48 89 c7             	mov    %rax,%rdi
   19450:	e8 69 1c 00 00       	call   1b0be <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>
      }
   19455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19459:	48 89 c7             	mov    %rax,%rdi
   1945c:	e8 23 00 00 00       	call   19484 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>
   19461:	90                   	nop
   19462:	c9                   	leave
   19463:	c3                   	ret

0000000000019464 <_ZNSt6vectorIPKcSaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   19464:	55                   	push   %rbp
   19465:	48 89 e5             	mov    %rsp,%rbp
   19468:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1946c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   19470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19474:	48 8b 00             	mov    (%rax),%rax
   19477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1947b:	48 c1 e2 03          	shl    $0x3,%rdx
   1947f:	48 01 d0             	add    %rdx,%rax
      }
   19482:	5d                   	pop    %rbp
   19483:	c3                   	ret

0000000000019484 <_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   19484:	55                   	push   %rbp
   19485:	48 89 e5             	mov    %rsp,%rbp
   19488:	48 83 ec 10          	sub    $0x10,%rsp
   1948c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   19490:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19494:	48 8b 50 10          	mov    0x10(%rax),%rdx
   19498:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1949c:	48 8b 00             	mov    (%rax),%rax
   1949f:	48 29 c2             	sub    %rax,%rdx
   194a2:	48 89 d0             	mov    %rdx,%rax
   194a5:	48 c1 f8 03          	sar    $0x3,%rax
	_M_deallocate(_M_impl._M_start,
   194a9:	48 89 c2             	mov    %rax,%rdx
   194ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194b0:	48 8b 08             	mov    (%rax),%rcx
   194b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194b7:	48 89 ce             	mov    %rcx,%rsi
   194ba:	48 89 c7             	mov    %rax,%rdi
   194bd:	e8 26 1c 00 00       	call   1b0e8 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      }
   194c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194c6:	48 89 c7             	mov    %rax,%rdi
   194c9:	e8 c0 e9 ff ff       	call   17e8e <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   194ce:	90                   	nop
   194cf:	c9                   	leave
   194d0:	c3                   	ret
   194d1:	90                   	nop

00000000000194d2 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   194d2:	55                   	push   %rbp
   194d3:	48 89 e5             	mov    %rsp,%rbp
   194d6:	48 83 ec 20          	sub    $0x20,%rsp
   194da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   194de:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   194e2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   194e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   194ea:	48 89 c7             	mov    %rax,%rdi
   194ed:	e8 2c 1c 00 00       	call   1b11e <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>
   194f2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   194f6:	0f 92 c0             	setb   %al
   194f9:	0f b6 c0             	movzbl %al,%eax
   194fc:	48 85 c0             	test   %rax,%rax
   194ff:	0f 95 c0             	setne  %al
   19502:	84 c0                	test   %al,%al
   19504:	74 1a                	je     19520 <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   19506:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1950d:	ff ff 1f 
   19510:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   19514:	73 05                	jae    1951b <_ZNSt15__new_allocatorIPKcE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   19516:	e8 65 bc fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1951b:	e8 60 bb fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   19520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19524:	48 c1 e0 03          	shl    $0x3,%rax
   19528:	48 89 c7             	mov    %rax,%rdi
   1952b:	e8 f0 bc fe ff       	call   5220 <_Znwm@plt>
   19530:	90                   	nop
      }
   19531:	c9                   	leave
   19532:	c3                   	ret
   19533:	90                   	nop

0000000000019534 <_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
   19534:	55                   	push   %rbp
   19535:	48 89 e5             	mov    %rsp,%rbp
   19538:	48 83 ec 10          	sub    $0x10,%rsp
   1953c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19540:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
   19544:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19548:	48 89 c7             	mov    %rax,%rdi
   1954b:	e8 e2 1b 00 00       	call   1b132 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   19550:	48 89 c2             	mov    %rax,%rdx
   19553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19557:	48 89 d6             	mov    %rdx,%rsi
   1955a:	48 89 c7             	mov    %rax,%rdi
   1955d:	e8 de 1b 00 00       	call   1b140 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
   19562:	90                   	nop
   19563:	c9                   	leave
   19564:	c3                   	ret
   19565:	90                   	nop

0000000000019566 <_ZNKSt6vectorIPKcSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19566:	55                   	push   %rbp
   19567:	48 89 e5             	mov    %rsp,%rbp
   1956a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1956e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19576:	5d                   	pop    %rbp
   19577:	c3                   	ret

0000000000019578 <_ZN2vk8OptionalIKNS_19AllocationCallbacksEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   19578:	55                   	push   %rbp
   19579:	48 89 e5             	mov    %rsp,%rbp
   1957c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19580:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   19584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19588:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1958f:	90                   	nop
   19590:	5d                   	pop    %rbp
   19591:	c3                   	ret

0000000000019592 <_ZSt18uninitialized_copyIPKPKcPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   19592:	55                   	push   %rbp
   19593:	48 89 e5             	mov    %rsp,%rbp
   19596:	48 83 ec 30          	sub    $0x30,%rsp
   1959a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1959e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   195a2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   195a6:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
      const bool __assignable
   195aa:	c6 45 fe 01          	movb   $0x1,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   195ae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   195b2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   195b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   195ba:	48 89 ce             	mov    %rcx,%rsi
   195bd:	48 89 c7             	mov    %rax,%rdi
   195c0:	e8 1f 1c 00 00       	call   1b1e4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>
    }
   195c5:	c9                   	leave
   195c6:	c3                   	ret

00000000000195c7 <_ZSt8_DestroyIPPKcEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   195c7:	55                   	push   %rbp
   195c8:	48 89 e5             	mov    %rsp,%rbp
   195cb:	48 83 ec 10          	sub    $0x10,%rsp
   195cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   195d3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
   195d7:	e8 c2 cb fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   195dc:	84 c0                	test   %al,%al
   195de:	74 15                	je     195f5 <_ZSt8_DestroyIPPKcEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   195e0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   195e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   195e8:	48 89 d6             	mov    %rdx,%rsi
   195eb:	48 89 c7             	mov    %rax,%rdi
   195ee:	e8 1e 1c 00 00       	call   1b211 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>
   195f3:	eb 13                	jmp    19608 <_ZSt8_DestroyIPPKcEvT_S3_+0x41>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   195f5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   195f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   195fd:	48 89 d6             	mov    %rdx,%rsi
   19600:	48 89 c7             	mov    %rax,%rdi
   19603:	e8 42 1c 00 00       	call   1b24a <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>
    }
   19608:	c9                   	leave
   19609:	c3                   	ret

000000000001960a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1960a:	55                   	push   %rbp
   1960b:	48 89 e5             	mov    %rsp,%rbp
   1960e:	48 83 ec 20          	sub    $0x20,%rsp
   19612:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   19616:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1961a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1961e:	48 89 d6             	mov    %rdx,%rsi
   19621:	48 89 c7             	mov    %rax,%rdi
   19624:	e8 31 1c 00 00       	call   1b25a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   19629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1962d:	c9                   	leave
   1962e:	c3                   	ret
   1962f:	90                   	nop

0000000000019630 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   19630:	55                   	push   %rbp
   19631:	48 89 e5             	mov    %rsp,%rbp
   19634:	48 83 ec 20          	sub    $0x20,%rsp
   19638:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   1963c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19640:	48 8d 50 08          	lea    0x8(%rax),%rdx
   19644:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19648:	48 89 d6             	mov    %rdx,%rsi
   1964b:	48 89 c7             	mov    %rax,%rdi
   1964e:	e8 07 1c 00 00       	call   1b25a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   19653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19657:	c9                   	leave
   19658:	c3                   	ret
   19659:	90                   	nop

000000000001965a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1965a:	55                   	push   %rbp
   1965b:	48 89 e5             	mov    %rsp,%rbp
   1965e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   19662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19666:	48 8b 00             	mov    (%rax),%rax
   19669:	48 8d 50 10          	lea    0x10(%rax),%rdx
   1966d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19671:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   19674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   19678:	5d                   	pop    %rbp
   19679:	c3                   	ret

000000000001967a <_ZN2vk8OptionalIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EDn>:
    Optional( std::nullptr_t ) VULKAN_HPP_NOEXCEPT
   1967a:	55                   	push   %rbp
   1967b:	48 89 e5             	mov    %rsp,%rbp
   1967e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19682:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      m_ptr = nullptr;
   19686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1968a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   19691:	90                   	nop
   19692:	5d                   	pop    %rbp
   19693:	c3                   	ret

0000000000019694 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
   19694:	55                   	push   %rbp
   19695:	48 89 e5             	mov    %rsp,%rbp
   19698:	48 83 ec 10          	sub    $0x10,%rsp
   1969c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator()
   196a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196a4:	48 89 c7             	mov    %rax,%rdi
   196a7:	e8 cc 1b 00 00       	call   1b278 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   196ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196b0:	48 89 c7             	mov    %rax,%rdi
   196b3:	e8 dc 1b 00 00       	call   1b294 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
   196b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196bc:	48 83 c0 08          	add    $0x8,%rax
   196c0:	48 89 c7             	mov    %rax,%rdi
   196c3:	e8 ca e5 ff ff       	call   17c92 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
   196c8:	90                   	nop
   196c9:	c9                   	leave
   196ca:	c3                   	ret
   196cb:	90                   	nop

00000000000196cc <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEED1Ev>:
   196cc:	55                   	push   %rbp
   196cd:	48 89 e5             	mov    %rsp,%rbp
   196d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   196d4:	90                   	nop
   196d5:	5d                   	pop    %rbp
   196d6:	c3                   	ret
   196d7:	90                   	nop

00000000000196d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
   196d8:	55                   	push   %rbp
   196d9:	48 89 e5             	mov    %rsp,%rbp
   196dc:	48 83 ec 10          	sub    $0x10,%rsp
   196e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
   196e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196e8:	48 89 c7             	mov    %rax,%rdi
   196eb:	e8 16 1c 00 00       	call   1b306 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   196f0:	48 89 c2             	mov    %rax,%rdx
   196f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   196f7:	48 89 d6             	mov    %rdx,%rsi
   196fa:	48 89 c7             	mov    %rax,%rdi
   196fd:	e8 9e 1b 00 00       	call   1b2a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
   19702:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19706:	48 89 c7             	mov    %rax,%rdi
   19709:	e8 9a ed ff ff       	call   184a8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
   1970e:	90                   	nop
   1970f:	c9                   	leave
   19710:	c3                   	ret
   19711:	90                   	nop

0000000000019712 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   19712:	55                   	push   %rbp
   19713:	48 89 e5             	mov    %rsp,%rbp
   19716:	48 83 ec 20          	sub    $0x20,%rsp
   1971a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   1971e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19722:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19726:	48 89 d6             	mov    %rdx,%rsi
   19729:	48 89 c7             	mov    %rax,%rdi
   1972c:	e8 ef 1b 00 00       	call   1b320 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   19731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19735:	c9                   	leave
   19736:	c3                   	ret
   19737:	90                   	nop

0000000000019738 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   19738:	55                   	push   %rbp
   19739:	48 89 e5             	mov    %rsp,%rbp
   1973c:	48 83 ec 20          	sub    $0x20,%rsp
   19740:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   19744:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19748:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1974c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   19750:	48 89 d6             	mov    %rdx,%rsi
   19753:	48 89 c7             	mov    %rax,%rdi
   19756:	e8 c5 1b 00 00       	call   1b320 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1975b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1975f:	c9                   	leave
   19760:	c3                   	ret
   19761:	90                   	nop

0000000000019762 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   19762:	55                   	push   %rbp
   19763:	48 89 e5             	mov    %rsp,%rbp
   19766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1976a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1976e:	48 8b 00             	mov    (%rax),%rax
   19771:	48 8d 90 04 01 00 00 	lea    0x104(%rax),%rdx
   19778:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1977c:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1977f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   19783:	5d                   	pop    %rbp
   19784:	c3                   	ret
   19785:	90                   	nop

0000000000019786 <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv>:
    operator std::string() const
   19786:	55                   	push   %rbp
   19787:	48 89 e5             	mov    %rsp,%rbp
   1978a:	53                   	push   %rbx
   1978b:	48 83 ec 28          	sub    $0x28,%rsp
   1978f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19793:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      return std::string( this->data() );
   19797:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1979b:	48 89 c7             	mov    %rax,%rdi
   1979e:	e8 0d bc fe ff       	call   53b0 <_ZNSaIcEC1Ev@plt>
   197a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   197a7:	48 89 c7             	mov    %rax,%rdi
   197aa:	e8 db 17 00 00       	call   1af8a <_ZNKSt5arrayIcLm256EE4dataEv>
   197af:	48 89 c1             	mov    %rax,%rcx
   197b2:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   197b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   197ba:	48 89 ce             	mov    %rcx,%rsi
   197bd:	48 89 c7             	mov    %rax,%rdi
   197c0:	e8 a9 08 ff ff       	call   a06e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
   197c5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   197c9:	48 89 c7             	mov    %rax,%rdi
   197cc:	e8 9f ba fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   197d1:	eb 1a                	jmp    197ed <_ZNK2vk14ArrayWrapper1DIcLm256EEcvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEIcLi0EEEv+0x67>
   197d3:	48 89 c3             	mov    %rax,%rbx
   197d6:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   197da:	48 89 c7             	mov    %rax,%rdi
   197dd:	e8 8e ba fe ff       	call   5270 <_ZNSaIcED1Ev@plt>
   197e2:	48 89 d8             	mov    %rbx,%rax
   197e5:	48 89 c7             	mov    %rax,%rdi
   197e8:	e8 b3 bb fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   197ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   197f1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   197f5:	c9                   	leave
   197f6:	c3                   	ret
   197f7:	90                   	nop

00000000000197f8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   197f8:	55                   	push   %rbp
   197f9:	48 89 e5             	mov    %rsp,%rbp
   197fc:	53                   	push   %rbx
   197fd:	48 83 ec 48          	sub    $0x48,%rsp
   19801:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   19805:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
   19809:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1980d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   19811:	48 89 d6             	mov    %rdx,%rsi
   19814:	48 89 c7             	mov    %rax,%rdi
   19817:	e8 22 1b 00 00       	call   1b33e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>
   1981c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   19820:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   19824:	48 89 c7             	mov    %rax,%rdi
   19827:	e8 38 1b 00 00       	call   1b364 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>
   1982c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19830:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   19834:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   19838:	48 89 d6             	mov    %rdx,%rsi
   1983b:	48 89 c7             	mov    %rax,%rdi
   1983e:	e8 3b 1b 00 00       	call   1b37e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   19843:	84 c0                	test   %al,%al
   19845:	75 32                	jne    19879 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x81>
   19847:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1984b:	48 89 c7             	mov    %rax,%rdi
   1984e:	e8 4d 1b 00 00       	call   1b3a0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>
   19853:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   19857:	48 89 c7             	mov    %rax,%rdi
   1985a:	e8 5d 1b 00 00       	call   1b3bc <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   1985f:	48 89 c2             	mov    %rax,%rdx
   19862:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   19866:	48 8d 45 de          	lea    -0x22(%rbp),%rax
   1986a:	48 89 ce             	mov    %rcx,%rsi
   1986d:	48 89 c7             	mov    %rax,%rdi
   19870:	e8 8b 1b 00 00       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   19875:	84 c0                	test   %al,%al
   19877:	74 07                	je     19880 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x88>
   19879:	b8 01 00 00 00       	mov    $0x1,%eax
   1987e:	eb 05                	jmp    19885 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0x8d>
   19880:	b8 00 00 00 00       	mov    $0x0,%eax
   19885:	84 c0                	test   %al,%al
   19887:	74 5d                	je     198e6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEEixEOS5_+0xee>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   19889:	48 8b 5d b8          	mov    -0x48(%rbp),%rbx
					std::forward_as_tuple(std::move(__k)),
   1988d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   19891:	48 89 c7             	mov    %rax,%rdi
   19894:	e8 58 0f ff ff       	call   a7f1 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
   19899:	48 89 c2             	mov    %rax,%rdx
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   1989c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   198a0:	48 89 d6             	mov    %rdx,%rsi
   198a3:	48 89 c7             	mov    %rax,%rdi
   198a6:	e8 96 1b 00 00       	call   1b441 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>
   198ab:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
   198af:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   198b3:	48 89 d6             	mov    %rdx,%rsi
   198b6:	48 89 c7             	mov    %rax,%rdi
   198b9:	e8 b8 1b 00 00       	call   1b476 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>
   198be:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
   198c2:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   198c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   198ca:	49 89 c8             	mov    %rcx,%r8
   198cd:	48 89 d1             	mov    %rdx,%rcx
   198d0:	48 8d 15 c2 89 00 00 	lea    0x89c2(%rip),%rdx        # 22299 <_ZSt19piecewise_construct>
   198d7:	48 89 c6             	mov    %rax,%rsi
   198da:	48 89 df             	mov    %rbx,%rdi
   198dd:	e8 b2 1b 00 00       	call   1b494 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   198e2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
					std::tuple<>());
	return (*__i).second;
   198e6:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   198ea:	48 89 c7             	mov    %rax,%rdi
   198ed:	e8 ca 1a 00 00       	call   1b3bc <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>
   198f2:	48 83 c0 20          	add    $0x20,%rax
      }
   198f6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   198fa:	c9                   	leave
   198fb:	c3                   	ret

00000000000198fc <_ZN9__gnu_cxx17__normal_iteratorIPKPKcSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   198fc:	55                   	push   %rbp
   198fd:	48 89 e5             	mov    %rsp,%rbp
   19900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   19904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19908:	48 8b 00             	mov    (%rax),%rax
   1990b:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1990f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19913:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   19916:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1991a:	5d                   	pop    %rbp
   1991b:	c3                   	ret

000000000001991c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   1991c:	55                   	push   %rbp
   1991d:	48 89 e5             	mov    %rsp,%rbp
   19920:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19924:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
   19928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1992c:	48 8b 08             	mov    (%rax),%rcx
   1992f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19933:	48 89 d0             	mov    %rdx,%rax
   19936:	48 01 c0             	add    %rax,%rax
   19939:	48 01 d0             	add    %rdx,%rax
   1993c:	48 c1 e0 03          	shl    $0x3,%rax
   19940:	48 01 c8             	add    %rcx,%rax
      }
   19943:	5d                   	pop    %rbp
   19944:	c3                   	ret
   19945:	90                   	nop

0000000000019946 <_ZNSt8optionalIjEC1IjLb1EEEOT_>:
	optional(_Up&& __t)
   19946:	55                   	push   %rbp
   19947:	48 89 e5             	mov    %rsp,%rbp
   1994a:	53                   	push   %rbx
   1994b:	48 83 ec 18          	sub    $0x18,%rsp
   1994f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19953:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
   19957:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1995b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1995f:	48 89 c7             	mov    %rax,%rdi
   19962:	e8 f7 15 00 00       	call   1af5e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   19967:	48 89 c6             	mov    %rax,%rsi
   1996a:	48 89 df             	mov    %rbx,%rdi
   1996d:	e8 44 1c 00 00       	call   1b5b6 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>
   19972:	90                   	nop
   19973:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19977:	c9                   	leave
   19978:	c3                   	ret
   19979:	90                   	nop

000000000001997a <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
   1997a:	55                   	push   %rbp
   1997b:	48 89 e5             	mov    %rsp,%rbp
   1997e:	48 83 ec 10          	sub    $0x10,%rsp
   19982:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__glibcxx_assert(this->_M_is_engaged());
   19986:	e8 13 c8 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1998b:	84 c0                	test   %al,%al
   1998d:	74 1a                	je     199a9 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   1998f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19993:	48 89 c7             	mov    %rax,%rdi
   19996:	e8 b9 ec ff ff       	call   18654 <_ZNKSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE13_M_is_engagedEv>
   1999b:	83 f0 01             	xor    $0x1,%eax
   1999e:	84 c0                	test   %al,%al
   199a0:	74 07                	je     199a9 <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x2f>
   199a2:	b8 01 00 00 00       	mov    $0x1,%eax
   199a7:	eb 05                	jmp    199ae <_ZNSt19_Optional_base_implIjSt14_Optional_baseIjLb1ELb1EEE6_M_getEv+0x34>
   199a9:	b8 00 00 00 00       	mov    $0x0,%eax
   199ae:	84 c0                	test   %al,%al
	return static_cast<_Dp*>(this)->_M_payload._M_get();
   199b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199b4:	48 89 c7             	mov    %rax,%rdi
   199b7:	e8 2e 1c 00 00       	call   1b5ea <_ZNSt22_Optional_payload_baseIjE6_M_getEv>
      }
   199bc:	c9                   	leave
   199bd:	c3                   	ret

00000000000199be <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ej>:
    VULKAN_HPP_CONSTEXPR explicit Flags( MaskType flags ) VULKAN_HPP_NOEXCEPT : m_mask( flags ) {}
   199be:	55                   	push   %rbp
   199bf:	48 89 e5             	mov    %rsp,%rbp
   199c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   199c6:	89 75 f4             	mov    %esi,-0xc(%rbp)
   199c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199cd:	8b 55 f4             	mov    -0xc(%rbp),%edx
   199d0:	89 10                	mov    %edx,(%rax)
   199d2:	90                   	nop
   199d3:	5d                   	pop    %rbp
   199d4:	c3                   	ret
   199d5:	90                   	nop

00000000000199d6 <_ZNKSt10unique_ptrIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE3getEv>:
      get() const noexcept
   199d6:	55                   	push   %rbp
   199d7:	48 89 e5             	mov    %rsp,%rbp
   199da:	48 83 ec 10          	sub    $0x10,%rsp
   199de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t._M_ptr(); }
   199e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   199e6:	48 89 c7             	mov    %rax,%rdi
   199e9:	e8 0a 1c 00 00       	call   1b5f8 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>
   199ee:	c9                   	leave
   199ef:	c3                   	ret

00000000000199f0 <_ZNSt5tupleIJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   199f0:	55                   	push   %rbp
   199f1:	48 89 e5             	mov    %rsp,%rbp
   199f4:	48 83 ec 10          	sub    $0x10,%rsp
   199f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   199fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a00:	48 89 c7             	mov    %rax,%rdi
   19a03:	e8 0e 1c 00 00       	call   1b616 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>
   19a08:	90                   	nop
   19a09:	c9                   	leave
   19a0a:	c3                   	ret

0000000000019a0b <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19a0b:	55                   	push   %rbp
   19a0c:	48 89 e5             	mov    %rsp,%rbp
   19a0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   19a13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a17:	5d                   	pop    %rbp
   19a18:	c3                   	ret

0000000000019a19 <_ZSt8exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  /// Assign @p __new_val to @p __obj and return its previous value.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
   19a19:	55                   	push   %rbp
   19a1a:	48 89 e5             	mov    %rsp,%rbp
   19a1d:	48 83 ec 10          	sub    $0x10,%rsp
   19a21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19a25:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
		    is_nothrow_assignable<_Tp&, _Up>>::value)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   19a29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19a2d:	48 89 c7             	mov    %rax,%rdi
   19a30:	e8 d6 ff ff ff       	call   19a0b <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   19a35:	48 89 c2             	mov    %rax,%rdx
   19a38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a3c:	48 89 d6             	mov    %rdx,%rsi
   19a3f:	48 89 c7             	mov    %rax,%rdi
   19a42:	e8 f6 1b 00 00       	call   1b63d <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>
   19a47:	c9                   	leave
   19a48:	c3                   	ret

0000000000019a49 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19a49:	55                   	push   %rbp
   19a4a:	48 89 e5             	mov    %rsp,%rbp
   19a4d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   19a51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a55:	5d                   	pop    %rbp
   19a56:	c3                   	ret

0000000000019a57 <_ZSt8exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    exchange(_Tp& __obj, _Up&& __new_val)
   19a57:	55                   	push   %rbp
   19a58:	48 89 e5             	mov    %rsp,%rbp
   19a5b:	48 83 ec 10          	sub    $0x10,%rsp
   19a5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19a63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }
   19a67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19a6b:	48 89 c7             	mov    %rax,%rdi
   19a6e:	e8 d6 ff ff ff       	call   19a49 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   19a73:	48 89 c2             	mov    %rax,%rdx
   19a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a7a:	48 89 d6             	mov    %rdx,%rsi
   19a7d:	48 89 c7             	mov    %rax,%rdi
   19a80:	e8 f7 1b 00 00       	call   1b67c <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>
   19a85:	c9                   	leave
   19a86:	c3                   	ret

0000000000019a87 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   19a87:	55                   	push   %rbp
   19a88:	48 89 e5             	mov    %rsp,%rbp
   19a8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   19a8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19a93:	5d                   	pop    %rbp
   19a94:	c3                   	ret

0000000000019a95 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
   19a95:	55                   	push   %rbp
   19a96:	48 89 e5             	mov    %rsp,%rbp
   19a99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   19a9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19aa1:	5d                   	pop    %rbp
   19aa2:	c3                   	ret
   19aa3:	90                   	nop

0000000000019aa4 <_ZNSaIN2vk4raii14PhysicalDeviceEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   19aa4:	55                   	push   %rbp
   19aa5:	48 89 e5             	mov    %rsp,%rbp
   19aa8:	48 83 ec 10          	sub    $0x10,%rsp
   19aac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19ab0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ab4:	48 89 c7             	mov    %rax,%rdi
   19ab7:	e8 00 1c 00 00       	call   1b6bc <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>
   19abc:	90                   	nop
   19abd:	c9                   	leave
   19abe:	c3                   	ret
   19abf:	90                   	nop

0000000000019ac0 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   19ac0:	55                   	push   %rbp
   19ac1:	48 89 e5             	mov    %rsp,%rbp
   19ac4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
   19ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19acc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   19ad3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ad7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   19ade:	00 
   19adf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ae3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   19aea:	00 
	{ }
   19aeb:	90                   	nop
   19aec:	5d                   	pop    %rbp
   19aed:	c3                   	ret

0000000000019aee <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>:
      _M_deallocate(pointer __p, size_t __n)
   19aee:	55                   	push   %rbp
   19aef:	48 89 e5             	mov    %rsp,%rbp
   19af2:	48 83 ec 20          	sub    $0x20,%rsp
   19af6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19afa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19afe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19b02:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19b07:	74 17                	je     19b20 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b0d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19b11:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19b15:	48 89 ce             	mov    %rcx,%rsi
   19b18:	48 89 c7             	mov    %rax,%rdi
   19b1b:	e8 a7 1b 00 00       	call   1b6c7 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>
      }
   19b20:	90                   	nop
   19b21:	c9                   	leave
   19b22:	c3                   	ret
   19b23:	90                   	nop

0000000000019b24 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19b24:	55                   	push   %rbp
   19b25:	48 89 e5             	mov    %rsp,%rbp
   19b28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b30:	5d                   	pop    %rbp
   19b31:	c3                   	ret

0000000000019b32 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19b32:	55                   	push   %rbp
   19b33:	48 89 e5             	mov    %rsp,%rbp
   19b36:	48 83 ec 20          	sub    $0x20,%rsp
   19b3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b3e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19b42:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
   19b46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19b4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b4e:	48 89 d6             	mov    %rdx,%rsi
   19b51:	48 89 c7             	mov    %rax,%rdi
   19b54:	e8 cc 1b 00 00       	call   1b725 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>
    }
   19b59:	90                   	nop
   19b5a:	c9                   	leave
   19b5b:	c3                   	ret

0000000000019b5c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   19b5c:	55                   	push   %rbp
   19b5d:	48 89 e5             	mov    %rsp,%rbp
   19b60:	48 83 ec 20          	sub    $0x20,%rsp
   19b64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19b68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19b6c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   19b70:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19b75:	74 17                	je     19b8e <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   19b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19b7f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   19b83:	48 89 ce             	mov    %rcx,%rsi
   19b86:	48 89 c7             	mov    %rax,%rdi
   19b89:	e8 da 1b 00 00       	call   1b768 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>
      }
   19b8e:	90                   	nop
   19b8f:	c9                   	leave
   19b90:	c3                   	ret
   19b91:	90                   	nop

0000000000019b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   19b92:	55                   	push   %rbp
   19b93:	48 89 e5             	mov    %rsp,%rbp
   19b96:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   19b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19b9e:	5d                   	pop    %rbp
   19b9f:	c3                   	ret

0000000000019ba0 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   19ba0:	55                   	push   %rbp
   19ba1:	48 89 e5             	mov    %rsp,%rbp
   19ba4:	48 83 ec 20          	sub    $0x20,%rsp
   19ba8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19bac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19bb0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   19bb4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19bb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19bbc:	48 89 d6             	mov    %rdx,%rsi
   19bbf:	48 89 c7             	mov    %rax,%rdi
   19bc2:	e8 ff 1b 00 00       	call   1b7c6 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>
    }
   19bc7:	90                   	nop
   19bc8:	c9                   	leave
   19bc9:	c3                   	ret

0000000000019bca <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   19bca:	55                   	push   %rbp
   19bcb:	48 89 e5             	mov    %rsp,%rbp
   19bce:	53                   	push   %rbx
   19bcf:	48 83 ec 38          	sub    $0x38,%rsp
   19bd3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   19bd7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   19bdb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   19bdf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19be3:	48 89 c7             	mov    %rax,%rdi
   19be6:	e8 1f 1c 00 00       	call   1b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   19beb:	48 89 c3             	mov    %rax,%rbx
   19bee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19bf2:	48 89 c7             	mov    %rax,%rdi
   19bf5:	e8 8e ee ff ff       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   19bfa:	48 29 c3             	sub    %rax,%rbx
   19bfd:	48 89 da             	mov    %rbx,%rdx
   19c00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19c04:	48 39 c2             	cmp    %rax,%rdx
   19c07:	0f 92 c0             	setb   %al
   19c0a:	84 c0                	test   %al,%al
   19c0c:	74 0c                	je     19c1a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   19c0e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19c12:	48 89 c7             	mov    %rax,%rdi
   19c15:	e8 c6 b4 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   19c1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c1e:	48 89 c7             	mov    %rax,%rdi
   19c21:	e8 62 ee ff ff       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   19c26:	48 89 c3             	mov    %rax,%rbx
   19c29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c2d:	48 89 c7             	mov    %rax,%rdi
   19c30:	e8 53 ee ff ff       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   19c35:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19c39:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   19c3d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19c41:	48 89 d6             	mov    %rdx,%rsi
   19c44:	48 89 c7             	mov    %rax,%rdi
   19c47:	e8 04 f6 ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   19c4c:	48 8b 00             	mov    (%rax),%rax
   19c4f:	48 01 d8             	add    %rbx,%rax
   19c52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   19c56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c5a:	48 89 c7             	mov    %rax,%rdi
   19c5d:	e8 26 ee ff ff       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   19c62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   19c66:	72 12                	jb     19c7a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xb0>
   19c68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c6c:	48 89 c7             	mov    %rax,%rdi
   19c6f:	e8 96 1b 00 00       	call   1b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   19c74:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19c78:	73 0e                	jae    19c88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xbe>
   19c7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19c7e:	48 89 c7             	mov    %rax,%rdi
   19c81:	e8 84 1b 00 00       	call   1b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   19c86:	eb 04                	jmp    19c8c <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc+0xc2>
   19c88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   19c8c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19c90:	c9                   	leave
   19c91:	c3                   	ret

0000000000019c92 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
   19c92:	55                   	push   %rbp
   19c93:	48 89 e5             	mov    %rsp,%rbp
   19c96:	53                   	push   %rbx
   19c97:	48 83 ec 38          	sub    $0x38,%rsp
   19c9b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   19c9f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   19ca3:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19ca8:	0f 84 e7 01 00 00    	je     19e95 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
	{
	  const size_type __size = size();
   19cae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19cb2:	48 89 c7             	mov    %rax,%rdi
   19cb5:	e8 ce ed ff ff       	call   18a88 <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE4sizeEv>
   19cba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19cbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19cc2:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   19cc6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19cca:	48 8b 40 08          	mov    0x8(%rax),%rax
   19cce:	48 29 c2             	sub    %rax,%rdx
   19cd1:	48 89 d0             	mov    %rdx,%rax
   19cd4:	48 c1 f8 03          	sar    $0x3,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   19cd8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	  if (__size > max_size() || __navail > max_size() - __size)
   19cdc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19ce0:	48 89 c7             	mov    %rax,%rdi
   19ce3:	e8 22 1b 00 00       	call   1b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   19ce8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   19cec:	72 16                	jb     19d04 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x72>
   19cee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19cf2:	48 89 c7             	mov    %rax,%rdi
   19cf5:	e8 10 1b 00 00       	call   1b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>
   19cfa:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   19cfe:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   19d02:	73 07                	jae    19d0b <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x79>
   19d04:	b8 01 00 00 00       	mov    $0x1,%eax
   19d09:	eb 05                	jmp    19d10 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x7e>
   19d0b:	b8 00 00 00 00       	mov    $0x0,%eax
   19d10:	84 c0                	test   %al,%al
	    __builtin_unreachable();

	  if (__navail >= __n)
   19d12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19d16:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   19d1a:	72 33                	jb     19d4f <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0xbd>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
						 __n, _M_get_Tp_allocator());
   19d1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19d20:	48 89 c7             	mov    %rax,%rdi
   19d23:	e8 6a fe ff ff       	call   19b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19d28:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   19d2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19d2f:	48 8b 40 08          	mov    0x8(%rax),%rax
   19d33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19d37:	48 89 ce             	mov    %rcx,%rsi
   19d3a:	48 89 c7             	mov    %rax,%rdi
   19d3d:	e8 ea 1a 00 00       	call   1b82c <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   19d42:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19d46:	48 89 42 08          	mov    %rax,0x8(%rdx)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   19d4a:	e9 46 01 00 00       	jmp    19e95 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		_M_check_len(__n, "vector::_M_default_append");
   19d4f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   19d53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19d57:	48 8d 15 a9 d6 00 00 	lea    0xd6a9(%rip),%rdx        # 27407 <_ZNSt8__detailL19__atomic_spin_countE+0x474b>
   19d5e:	48 89 ce             	mov    %rcx,%rsi
   19d61:	48 89 c7             	mov    %rax,%rdi
   19d64:	e8 61 fe ff ff       	call   19bca <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE12_M_check_lenEmPKc>
   19d69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   19d6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19d71:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19d75:	48 89 d6             	mov    %rdx,%rsi
   19d78:	48 89 c7             	mov    %rax,%rdi
   19d7b:	e8 d6 1a 00 00       	call   1b856 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>
   19d80:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   19d84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19d88:	48 89 c7             	mov    %rax,%rdi
   19d8b:	e8 02 fe ff ff       	call   19b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19d90:	48 89 c2             	mov    %rax,%rdx
		      std::__uninitialized_default_n_a(__new_start + __size,
   19d93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19d97:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   19d9e:	00 
   19d9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19da3:	48 01 c1             	add    %rax,%rcx
   19da6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19daa:	48 89 c6             	mov    %rax,%rsi
   19dad:	48 89 cf             	mov    %rcx,%rdi
   19db0:	e8 77 1a 00 00       	call   1b82c <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   19db5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19db9:	48 89 c7             	mov    %rax,%rdi
   19dbc:	e8 d1 fd ff ff       	call   19b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19dc1:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   19dc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19dc8:	48 8b 70 08          	mov    0x8(%rax),%rsi
   19dcc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19dd0:	48 8b 00             	mov    (%rax),%rax
   19dd3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19dd7:	48 89 c7             	mov    %rax,%rdi
   19dda:	e8 aa 1a 00 00       	call   1b889 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   19ddf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   19de3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19de7:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   19deb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19def:	48 8b 12             	mov    (%rdx),%rdx
   19df2:	48 29 d1             	sub    %rdx,%rcx
   19df5:	48 c1 f9 03          	sar    $0x3,%rcx
   19df9:	48 89 ca             	mov    %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   19dfc:	48 89 d6             	mov    %rdx,%rsi
   19dff:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19e03:	48 8b 0a             	mov    (%rdx),%rcx
   19e06:	48 89 f2             	mov    %rsi,%rdx
   19e09:	48 89 ce             	mov    %rcx,%rsi
   19e0c:	48 89 c7             	mov    %rax,%rdi
   19e0f:	e8 48 fd ff ff       	call   19b5c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   19e14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19e18:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19e1c:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   19e1f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19e23:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19e27:	48 01 d0             	add    %rdx,%rax
   19e2a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   19e31:	00 
   19e32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19e36:	48 01 c2             	add    %rax,%rdx
   19e39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19e3d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   19e41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   19e45:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   19e4c:	00 
   19e4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19e51:	48 01 c2             	add    %rax,%rdx
   19e54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19e58:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   19e5c:	eb 37                	jmp    19e95 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE17_M_default_appendEm+0x203>
		  __catch(...)
   19e5e:	48 89 c7             	mov    %rax,%rdi
   19e61:	e8 3a b2 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   19e66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19e6a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   19e6e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19e72:	48 89 ce             	mov    %rcx,%rsi
   19e75:	48 89 c7             	mov    %rax,%rdi
   19e78:	e8 df fc ff ff       	call   19b5c <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   19e7d:	e8 8e b4 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   19e82:	48 89 c3             	mov    %rax,%rbx
   19e85:	e8 e6 b4 fe ff       	call   5370 <__cxa_end_catch@plt>
   19e8a:	48 89 d8             	mov    %rbx,%rax
   19e8d:	48 89 c7             	mov    %rax,%rdi
   19e90:	e8 0b b5 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   19e95:	90                   	nop
   19e96:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   19e9a:	c9                   	leave
   19e9b:	c3                   	ret

0000000000019e9c <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   19e9c:	55                   	push   %rbp
   19e9d:	48 89 e5             	mov    %rsp,%rbp
   19ea0:	48 83 ec 20          	sub    $0x20,%rsp
   19ea4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   19ea8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19eb0:	48 8b 40 08          	mov    0x8(%rax),%rax
   19eb4:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   19eb8:	48 c1 f8 03          	sar    $0x3,%rax
   19ebc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19ec0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19ec5:	74 32                	je     19ef9 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE15_M_erase_at_endEPS1_+0x5d>
			  _M_get_Tp_allocator());
   19ec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19ecb:	48 89 c7             	mov    %rax,%rdi
   19ece:	e8 bf fc ff ff       	call   19b92 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   19ed3:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   19ed6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19eda:	48 8b 48 08          	mov    0x8(%rax),%rcx
   19ede:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19ee2:	48 89 ce             	mov    %rcx,%rsi
   19ee5:	48 89 c7             	mov    %rax,%rdi
   19ee8:	e8 b3 fc ff ff       	call   19ba0 <_ZSt8_DestroyIPP18VkPhysicalDevice_TS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   19eed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19ef1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   19ef5:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   19ef9:	90                   	nop
   19efa:	c9                   	leave
   19efb:	c3                   	ret

0000000000019efc <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   19efc:	55                   	push   %rbp
   19efd:	48 89 e5             	mov    %rsp,%rbp
   19f00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f04:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   19f08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19f0c:	5d                   	pop    %rbp
   19f0d:	c3                   	ret

0000000000019f0e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   19f0e:	55                   	push   %rbp
   19f0f:	48 89 e5             	mov    %rsp,%rbp
   19f12:	48 83 ec 10          	sub    $0x10,%rsp
   19f16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   19f1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f1e:	48 89 c7             	mov    %rax,%rdi
   19f21:	e8 ec 19 00 00       	call   1b912 <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   19f26:	48 89 c7             	mov    %rax,%rdi
   19f29:	e8 a1 19 00 00       	call   1b8cf <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>
   19f2e:	c9                   	leave
   19f2f:	c3                   	ret

0000000000019f30 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
   19f30:	55                   	push   %rbp
   19f31:	48 89 e5             	mov    %rsp,%rbp
   19f34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
   19f38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f3c:	48 8b 50 10          	mov    0x10(%rax),%rdx
			 - this->_M_impl._M_start); }
   19f40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f44:	48 8b 00             	mov    (%rax),%rax
   19f47:	48 29 c2             	sub    %rax,%rdx
   19f4a:	48 89 d0             	mov    %rdx,%rax
   19f4d:	48 c1 f8 04          	sar    $0x4,%rax
   19f51:	5d                   	pop    %rbp
   19f52:	c3                   	ret
   19f53:	90                   	nop

0000000000019f54 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   19f54:	55                   	push   %rbp
   19f55:	48 89 e5             	mov    %rsp,%rbp
   19f58:	48 83 ec 10          	sub    $0x10,%rsp
   19f5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   19f64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19f69:	74 15                	je     19f80 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x2c>
   19f6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19f6f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19f73:	48 89 d6             	mov    %rdx,%rsi
   19f76:	48 89 c7             	mov    %rax,%rdi
   19f79:	e8 a2 19 00 00       	call   1b920 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>
   19f7e:	eb 05                	jmp    19f85 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm+0x31>
   19f80:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   19f85:	c9                   	leave
   19f86:	c3                   	ret

0000000000019f87 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   19f87:	55                   	push   %rbp
   19f88:	48 89 e5             	mov    %rsp,%rbp
   19f8b:	48 83 ec 20          	sub    $0x20,%rsp
   19f8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19f93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   19f97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   19f9b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   19f9f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   19fa3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   19fa7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19faf:	48 89 c7             	mov    %rax,%rdi
   19fb2:	e8 ef 19 00 00       	call   1b9a6 <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
      }
   19fb7:	c9                   	leave
   19fb8:	c3                   	ret
   19fb9:	90                   	nop

0000000000019fba <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   19fba:	55                   	push   %rbp
   19fbb:	48 89 e5             	mov    %rsp,%rbp
   19fbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   19fc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   19fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19fca:	48 8b 10             	mov    (%rax),%rdx
   19fcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fd1:	48 89 10             	mov    %rdx,(%rax)
   19fd4:	90                   	nop
   19fd5:	5d                   	pop    %rbp
   19fd6:	c3                   	ret

0000000000019fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19fd7:	55                   	push   %rbp
   19fd8:	48 89 e5             	mov    %rsp,%rbp
   19fdb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   19fdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19fe3:	5d                   	pop    %rbp
   19fe4:	c3                   	ret

0000000000019fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   19fe5:	55                   	push   %rbp
   19fe6:	48 89 e5             	mov    %rsp,%rbp
   19fe9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   19fed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19ff1:	5d                   	pop    %rbp
   19ff2:	c3                   	ret

0000000000019ff3 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   19ff3:	55                   	push   %rbp
   19ff4:	48 89 e5             	mov    %rsp,%rbp
   19ff7:	53                   	push   %rbx
   19ff8:	48 83 ec 28          	sub    $0x28,%rsp
   19ffc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a000:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1a004:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1a008:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1a00c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a010:	48 89 c7             	mov    %rax,%rdi
   1a013:	e8 cd ff ff ff       	call   19fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   1a018:	48 89 c3             	mov    %rax,%rbx
   1a01b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a01f:	48 89 c7             	mov    %rax,%rdi
   1a022:	e8 b0 ff ff ff       	call   19fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   1a027:	48 89 c1             	mov    %rax,%rcx
   1a02a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a02e:	48 89 da             	mov    %rbx,%rdx
   1a031:	48 89 ce             	mov    %rcx,%rsi
   1a034:	48 89 c7             	mov    %rax,%rdi
   1a037:	e8 cd 19 00 00       	call   1ba09 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>
	}
   1a03c:	90                   	nop
   1a03d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a041:	c9                   	leave
   1a042:	c3                   	ret
   1a043:	90                   	nop

000000000001a044 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1a044:	55                   	push   %rbp
   1a045:	48 89 e5             	mov    %rsp,%rbp
   1a048:	53                   	push   %rbx
   1a049:	48 83 ec 38          	sub    $0x38,%rsp
   1a04d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a051:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a055:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1a059:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a05d:	48 89 c7             	mov    %rax,%rdi
   1a060:	e8 a9 fe ff ff       	call   19f0e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   1a065:	48 89 c3             	mov    %rax,%rbx
   1a068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a06c:	48 89 c7             	mov    %rax,%rdi
   1a06f:	e8 38 ea ff ff       	call   18aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   1a074:	48 29 c3             	sub    %rax,%rbx
   1a077:	48 89 da             	mov    %rbx,%rdx
   1a07a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a07e:	48 39 c2             	cmp    %rax,%rdx
   1a081:	0f 92 c0             	setb   %al
   1a084:	84 c0                	test   %al,%al
   1a086:	74 0c                	je     1a094 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1a088:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a08c:	48 89 c7             	mov    %rax,%rdi
   1a08f:	e8 4c b0 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1a094:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a098:	48 89 c7             	mov    %rax,%rdi
   1a09b:	e8 0c ea ff ff       	call   18aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   1a0a0:	48 89 c3             	mov    %rax,%rbx
   1a0a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a0a7:	48 89 c7             	mov    %rax,%rdi
   1a0aa:	e8 fd e9 ff ff       	call   18aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   1a0af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1a0b3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1a0b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1a0bb:	48 89 d6             	mov    %rdx,%rsi
   1a0be:	48 89 c7             	mov    %rax,%rdi
   1a0c1:	e8 8a f1 ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   1a0c6:	48 8b 00             	mov    (%rax),%rax
   1a0c9:	48 01 d8             	add    %rbx,%rax
   1a0cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a0d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a0d4:	48 89 c7             	mov    %rax,%rdi
   1a0d7:	e8 d0 e9 ff ff       	call   18aac <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4sizeEv>
   1a0dc:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1a0e0:	72 12                	jb     1a0f4 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xb0>
   1a0e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a0e6:	48 89 c7             	mov    %rax,%rdi
   1a0e9:	e8 20 fe ff ff       	call   19f0e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   1a0ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a0f2:	73 0e                	jae    1a102 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xbe>
   1a0f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a0f8:	48 89 c7             	mov    %rax,%rdi
   1a0fb:	e8 0e fe ff ff       	call   19f0e <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE8max_sizeEv>
   1a100:	eb 04                	jmp    1a106 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc+0xc2>
   1a102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1a106:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a10a:	c9                   	leave
   1a10b:	c3                   	ret

000000000001a10c <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   1a10c:	55                   	push   %rbp
   1a10d:	48 89 e5             	mov    %rsp,%rbp
   1a110:	53                   	push   %rbx
   1a111:	48 83 ec 18          	sub    $0x18,%rsp
   1a115:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a119:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1a11d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a121:	48 89 c7             	mov    %rax,%rdi
   1a124:	e8 5f e3 ff ff       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   1a129:	48 8b 18             	mov    (%rax),%rbx
   1a12c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a130:	48 89 c7             	mov    %rax,%rdi
   1a133:	e8 50 e3 ff ff       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   1a138:	48 8b 00             	mov    (%rax),%rax
   1a13b:	48 89 da             	mov    %rbx,%rdx
   1a13e:	48 29 c2             	sub    %rax,%rdx
   1a141:	48 89 d0             	mov    %rdx,%rax
   1a144:	48 c1 f8 04          	sar    $0x4,%rax
   1a148:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a14c:	c9                   	leave
   1a14d:	c3                   	ret

000000000001a14e <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE17_M_realloc_insertIJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   1a14e:	55                   	push   %rbp
   1a14f:	48 89 e5             	mov    %rsp,%rbp
   1a152:	53                   	push   %rbx
   1a153:	48 83 ec 68          	sub    $0x68,%rsp
   1a157:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1a15b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   1a15f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   1a163:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   1a167:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a16b:	48 8d 15 af d2 00 00 	lea    0xd2af(%rip),%rdx        # 27421 <_ZNSt8__detailL19__atomic_spin_countE+0x4765>
   1a172:	be 01 00 00 00       	mov    $0x1,%esi
   1a177:	48 89 c7             	mov    %rax,%rdi
   1a17a:	e8 c5 fe ff ff       	call   1a044 <_ZNKSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE12_M_check_lenEmPKc>
   1a17f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   1a183:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a187:	48 8b 00             	mov    (%rax),%rax
   1a18a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   1a18e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a192:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a196:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   1a19a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a19e:	48 89 c7             	mov    %rax,%rdi
   1a1a1:	e8 64 f4 ff ff       	call   1960a <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE5beginEv>
   1a1a6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1a1aa:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   1a1ae:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1a1b2:	48 89 d6             	mov    %rdx,%rsi
   1a1b5:	48 89 c7             	mov    %rax,%rdi
   1a1b8:	e8 4f ff ff ff       	call   1a10c <_ZN9__gnu_cxxmiIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
   1a1bd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   1a1c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a1c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a1c9:	48 89 d6             	mov    %rdx,%rsi
   1a1cc:	48 89 c7             	mov    %rax,%rdi
   1a1cf:	e8 80 fd ff ff       	call   19f54 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE11_M_allocateEm>
   1a1d4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   1a1d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a1dc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   1a1e0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1a1e4:	48 89 c7             	mov    %rax,%rdi
   1a1e7:	e8 f9 fd ff ff       	call   19fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   1a1ec:	48 89 c3             	mov    %rax,%rbx
   1a1ef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1a1f3:	48 89 c7             	mov    %rax,%rdi
   1a1f6:	e8 dc fd ff ff       	call   19fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   1a1fb:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   1a1fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a202:	48 c1 e0 04          	shl    $0x4,%rax
   1a206:	48 89 c1             	mov    %rax,%rcx
	  _Alloc_traits::construct(this->_M_impl,
   1a209:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a20d:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
   1a211:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a215:	48 89 d9             	mov    %rbx,%rcx
   1a218:	48 89 c7             	mov    %rax,%rdi
   1a21b:	e8 d3 fd ff ff       	call   19ff3 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JRKNS1_8InstanceERKP18VkPhysicalDevice_TEEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
   1a220:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   1a227:	00 
					 __new_start, _M_get_Tp_allocator());
   1a228:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a22c:	48 89 c7             	mov    %rax,%rdi
   1a22f:	e8 f0 f8 ff ff       	call   19b24 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   1a234:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   1a237:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1a23b:	48 89 c7             	mov    %rax,%rdi
   1a23e:	e8 45 e2 ff ff       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   1a243:	48 8b 30             	mov    (%rax),%rsi
   1a246:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a24a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a24e:	48 89 d9             	mov    %rbx,%rcx
   1a251:	48 89 c7             	mov    %rax,%rdi
   1a254:	e8 2e fd ff ff       	call   19f87 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   1a259:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   1a25d:	48 83 45 c0 10       	addq   $0x10,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   1a262:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a266:	48 89 c7             	mov    %rax,%rdi
   1a269:	e8 b6 f8 ff ff       	call   19b24 <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>
   1a26e:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   1a271:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1a275:	48 89 c7             	mov    %rax,%rdi
   1a278:	e8 0b e2 ff ff       	call   18488 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEE4baseEv>
   1a27d:	48 8b 00             	mov    (%rax),%rax
   1a280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1a284:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1a288:	48 89 d9             	mov    %rbx,%rcx
   1a28b:	48 89 c7             	mov    %rax,%rdi
   1a28e:	e8 f4 fc ff ff       	call   19f87 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
   1a293:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   1a297:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   1a29b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1a29f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   1a2a3:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   1a2a7:	48 c1 fa 04          	sar    $0x4,%rdx
      _M_deallocate(__old_start,
   1a2ab:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1a2af:	48 89 ce             	mov    %rcx,%rsi
   1a2b2:	48 89 c7             	mov    %rax,%rdi
   1a2b5:	e8 34 f8 ff ff       	call   19aee <_ZNSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE13_M_deallocateEPS2_m>
      this->_M_impl._M_start = __new_start;
   1a2ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a2be:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a2c2:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   1a2c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a2c9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1a2cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a2d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a2d5:	48 c1 e0 04          	shl    $0x4,%rax
   1a2d9:	48 89 c2             	mov    %rax,%rdx
   1a2dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a2e0:	48 01 c2             	add    %rax,%rdx
   1a2e3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1a2e7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1a2eb:	90                   	nop
   1a2ec:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a2f0:	c9                   	leave
   1a2f1:	c3                   	ret

000000000001a2f2 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   1a2f2:	55                   	push   %rbp
   1a2f3:	48 89 e5             	mov    %rsp,%rbp
   1a2f6:	48 83 ec 20          	sub    $0x20,%rsp
   1a2fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   1a2fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a302:	48 89 c7             	mov    %rax,%rdi
   1a305:	e8 26 f3 ff ff       	call   19630 <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE3endEv>
   1a30a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a30e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1a312:	be 01 00 00 00       	mov    $0x1,%esi
   1a317:	48 89 c7             	mov    %rax,%rdi
   1a31a:	e8 69 17 00 00       	call   1ba88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>
   1a31f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a323:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1a327:	48 89 c7             	mov    %rax,%rdi
   1a32a:	e8 67 e1 ff ff       	call   18496 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEdeEv>
      }
   1a32f:	c9                   	leave
   1a330:	c3                   	ret
   1a331:	90                   	nop

000000000001a332 <_ZNSt5tupleIJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1ILb1ELb1EEEv>:
	tuple()
   1a332:	55                   	push   %rbp
   1a333:	48 89 e5             	mov    %rsp,%rbp
   1a336:	48 83 ec 10          	sub    $0x10,%rsp
   1a33a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Inherited() { }
   1a33e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a342:	48 89 c7             	mov    %rax,%rdi
   1a345:	e8 80 17 00 00       	call   1baca <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>
   1a34a:	90                   	nop
   1a34b:	c9                   	leave
   1a34c:	c3                   	ret
   1a34d:	90                   	nop

000000000001a34e <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1a34e:	55                   	push   %rbp
   1a34f:	48 89 e5             	mov    %rsp,%rbp
   1a352:	48 83 ec 20          	sub    $0x20,%rsp
   1a356:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a35a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a35e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1a362:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a367:	74 17                	je     1a380 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1a369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a36d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a371:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a375:	48 89 ce             	mov    %rcx,%rsi
   1a378:	48 89 c7             	mov    %rax,%rdi
   1a37b:	e8 71 17 00 00       	call   1baf1 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>
      }
   1a380:	90                   	nop
   1a381:	c9                   	leave
   1a382:	c3                   	ret
   1a383:	90                   	nop

000000000001a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1a384:	55                   	push   %rbp
   1a385:	48 89 e5             	mov    %rsp,%rbp
   1a388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1a38c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a390:	5d                   	pop    %rbp
   1a391:	c3                   	ret

000000000001a392 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1a392:	55                   	push   %rbp
   1a393:	48 89 e5             	mov    %rsp,%rbp
   1a396:	48 83 ec 20          	sub    $0x20,%rsp
   1a39a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a39e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a3a2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1a3a6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3ae:	48 89 d6             	mov    %rdx,%rsi
   1a3b1:	48 89 c7             	mov    %rax,%rdi
   1a3b4:	e8 96 17 00 00       	call   1bb4f <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>
    }
   1a3b9:	90                   	nop
   1a3ba:	c9                   	leave
   1a3bb:	c3                   	ret

000000000001a3bc <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1a3bc:	55                   	push   %rbp
   1a3bd:	48 89 e5             	mov    %rsp,%rbp
   1a3c0:	53                   	push   %rbx
   1a3c1:	48 83 ec 38          	sub    $0x38,%rsp
   1a3c5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a3c9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a3cd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1a3d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a3d5:	48 89 c7             	mov    %rax,%rdi
   1a3d8:	e8 b5 17 00 00       	call   1bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1a3dd:	48 89 c3             	mov    %rax,%rbx
   1a3e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a3e4:	48 89 c7             	mov    %rax,%rdi
   1a3e7:	e8 f4 ea ff ff       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1a3ec:	48 29 c3             	sub    %rax,%rbx
   1a3ef:	48 89 da             	mov    %rbx,%rdx
   1a3f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a3f6:	48 39 c2             	cmp    %rax,%rdx
   1a3f9:	0f 92 c0             	setb   %al
   1a3fc:	84 c0                	test   %al,%al
   1a3fe:	74 0c                	je     1a40c <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1a400:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a404:	48 89 c7             	mov    %rax,%rdi
   1a407:	e8 d4 ac fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1a40c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a410:	48 89 c7             	mov    %rax,%rdi
   1a413:	e8 c8 ea ff ff       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1a418:	48 89 c3             	mov    %rax,%rbx
   1a41b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a41f:	48 89 c7             	mov    %rax,%rdi
   1a422:	e8 b9 ea ff ff       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1a427:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1a42b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1a42f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1a433:	48 89 d6             	mov    %rdx,%rsi
   1a436:	48 89 c7             	mov    %rax,%rdi
   1a439:	e8 12 ee ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   1a43e:	48 8b 00             	mov    (%rax),%rax
   1a441:	48 01 d8             	add    %rbx,%rax
   1a444:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a448:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a44c:	48 89 c7             	mov    %rax,%rdi
   1a44f:	e8 8c ea ff ff       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1a454:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1a458:	72 12                	jb     1a46c <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1a45a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a45e:	48 89 c7             	mov    %rax,%rdi
   1a461:	e8 2c 17 00 00       	call   1bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1a466:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a46a:	73 0e                	jae    1a47a <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1a46c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a470:	48 89 c7             	mov    %rax,%rdi
   1a473:	e8 1a 17 00 00       	call   1bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1a478:	eb 04                	jmp    1a47e <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   1a47a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1a47e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a482:	c9                   	leave
   1a483:	c3                   	ret

000000000001a484 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1a484:	55                   	push   %rbp
   1a485:	48 89 e5             	mov    %rsp,%rbp
   1a488:	53                   	push   %rbx
   1a489:	48 83 ec 38          	sub    $0x38,%rsp
   1a48d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1a491:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1a495:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1a49a:	0f 84 19 02 00 00    	je     1a6b9 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
	  const size_type __size = size();
   1a4a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a4a4:	48 89 c7             	mov    %rax,%rdi
   1a4a7:	e8 34 ea ff ff       	call   18ee0 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE4sizeEv>
   1a4ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1a4b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a4b4:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1a4b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a4bc:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a4c0:	48 29 c2             	sub    %rax,%rdx
   1a4c3:	48 c1 fa 03          	sar    $0x3,%rdx
   1a4c7:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   1a4ce:	aa aa aa 
   1a4d1:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1a4d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1a4d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a4dd:	48 89 c7             	mov    %rax,%rdi
   1a4e0:	e8 ad 16 00 00       	call   1bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1a4e5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a4e9:	72 16                	jb     1a501 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   1a4eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a4ef:	48 89 c7             	mov    %rax,%rdi
   1a4f2:	e8 9b 16 00 00       	call   1bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>
   1a4f7:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1a4fb:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1a4ff:	73 07                	jae    1a508 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   1a501:	b8 01 00 00 00       	mov    $0x1,%eax
   1a506:	eb 05                	jmp    1a50d <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   1a508:	b8 00 00 00 00       	mov    $0x0,%eax
   1a50d:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1a50f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a513:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1a517:	72 33                	jb     1a54c <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   1a519:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a51d:	48 89 c7             	mov    %rax,%rdi
   1a520:	e8 5f fe ff ff       	call   1a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a525:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1a528:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a52c:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a530:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1a534:	48 89 ce             	mov    %rcx,%rsi
   1a537:	48 89 c7             	mov    %rax,%rdi
   1a53a:	e8 75 16 00 00       	call   1bbb4 <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1a53f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a543:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1a547:	e9 6d 01 00 00       	jmp    1a6b9 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		_M_check_len(__n, "vector::_M_default_append");
   1a54c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1a550:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a554:	48 8d 15 ac ce 00 00 	lea    0xceac(%rip),%rdx        # 27407 <_ZNSt8__detailL19__atomic_spin_countE+0x474b>
   1a55b:	48 89 ce             	mov    %rcx,%rsi
   1a55e:	48 89 c7             	mov    %rax,%rdi
   1a561:	e8 56 fe ff ff       	call   1a3bc <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE12_M_check_lenEmPKc>
   1a566:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1a56a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a56e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1a572:	48 89 d6             	mov    %rdx,%rsi
   1a575:	48 89 c7             	mov    %rax,%rdi
   1a578:	e8 61 16 00 00       	call   1bbde <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>
   1a57d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1a581:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a585:	48 89 c7             	mov    %rax,%rdi
   1a588:	e8 f7 fd ff ff       	call   1a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a58d:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   1a590:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a594:	48 89 d0             	mov    %rdx,%rax
   1a597:	48 01 c0             	add    %rax,%rax
   1a59a:	48 01 d0             	add    %rdx,%rax
   1a59d:	48 c1 e0 03          	shl    $0x3,%rax
   1a5a1:	48 89 c2             	mov    %rax,%rdx
   1a5a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a5a8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1a5ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1a5b0:	48 89 f2             	mov    %rsi,%rdx
   1a5b3:	48 89 c6             	mov    %rax,%rsi
   1a5b6:	48 89 cf             	mov    %rcx,%rdi
   1a5b9:	e8 f6 15 00 00       	call   1bbb4 <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1a5be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a5c2:	48 89 c7             	mov    %rax,%rdi
   1a5c5:	e8 ba fd ff ff       	call   1a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a5ca:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a5cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a5d1:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1a5d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a5d9:	48 8b 00             	mov    (%rax),%rax
   1a5dc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1a5e0:	48 89 c7             	mov    %rax,%rdi
   1a5e3:	e8 29 16 00 00       	call   1bc11 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1a5e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1a5ec:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a5f0:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   1a5f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a5f8:	48 8b 12             	mov    (%rdx),%rdx
   1a5fb:	48 29 d1             	sub    %rdx,%rcx
   1a5fe:	48 c1 f9 03          	sar    $0x3,%rcx
   1a602:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
   1a609:	aa aa aa 
   1a60c:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1a610:	48 89 d6             	mov    %rdx,%rsi
   1a613:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a617:	48 8b 0a             	mov    (%rdx),%rcx
   1a61a:	48 89 f2             	mov    %rsi,%rdx
   1a61d:	48 89 ce             	mov    %rcx,%rsi
   1a620:	48 89 c7             	mov    %rax,%rdi
   1a623:	e8 26 fd ff ff       	call   1a34e <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1a628:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a62c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1a630:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1a633:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a637:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1a63b:	48 01 c2             	add    %rax,%rdx
   1a63e:	48 89 d0             	mov    %rdx,%rax
   1a641:	48 01 c0             	add    %rax,%rax
   1a644:	48 01 d0             	add    %rdx,%rax
   1a647:	48 c1 e0 03          	shl    $0x3,%rax
   1a64b:	48 89 c2             	mov    %rax,%rdx
   1a64e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a652:	48 01 c2             	add    %rax,%rdx
   1a655:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a659:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a65d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1a661:	48 89 d0             	mov    %rdx,%rax
   1a664:	48 01 c0             	add    %rax,%rax
   1a667:	48 01 d0             	add    %rdx,%rax
   1a66a:	48 c1 e0 03          	shl    $0x3,%rax
   1a66e:	48 89 c2             	mov    %rax,%rdx
   1a671:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a675:	48 01 c2             	add    %rax,%rdx
   1a678:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a67c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1a680:	eb 37                	jmp    1a6b9 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE17_M_default_appendEm+0x235>
		  __catch(...)
   1a682:	48 89 c7             	mov    %rax,%rdi
   1a685:	e8 16 aa fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1a68a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a68e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1a692:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1a696:	48 89 ce             	mov    %rcx,%rsi
   1a699:	48 89 c7             	mov    %rax,%rdi
   1a69c:	e8 ad fc ff ff       	call   1a34e <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1a6a1:	e8 6a ac fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1a6a6:	48 89 c3             	mov    %rax,%rbx
   1a6a9:	e8 c2 ac fe ff       	call   5370 <__cxa_end_catch@plt>
   1a6ae:	48 89 d8             	mov    %rbx,%rax
   1a6b1:	48 89 c7             	mov    %rax,%rdi
   1a6b4:	e8 e7 ac fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   1a6b9:	90                   	nop
   1a6ba:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a6be:	c9                   	leave
   1a6bf:	c3                   	ret

000000000001a6c0 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1a6c0:	55                   	push   %rbp
   1a6c1:	48 89 e5             	mov    %rsp,%rbp
   1a6c4:	48 83 ec 20          	sub    $0x20,%rsp
   1a6c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a6cc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1a6d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a6d4:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a6d8:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1a6dc:	48 c1 f8 03          	sar    $0x3,%rax
   1a6e0:	48 89 c2             	mov    %rax,%rdx
   1a6e3:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
   1a6ea:	aa aa aa 
   1a6ed:	48 0f af c2          	imul   %rdx,%rax
   1a6f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a6f5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1a6fa:	74 32                	je     1a72e <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   1a6fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a700:	48 89 c7             	mov    %rax,%rdi
   1a703:	e8 7c fc ff ff       	call   1a384 <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a708:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1a70b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a70f:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1a713:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a717:	48 89 ce             	mov    %rcx,%rsi
   1a71a:	48 89 c7             	mov    %rax,%rdi
   1a71d:	e8 70 fc ff ff       	call   1a392 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1a722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a726:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1a72a:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1a72e:	90                   	nop
   1a72f:	c9                   	leave
   1a730:	c3                   	ret
   1a731:	90                   	nop

000000000001a732 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1a732:	55                   	push   %rbp
   1a733:	48 89 e5             	mov    %rsp,%rbp
   1a736:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a73a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1a73e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a742:	5d                   	pop    %rbp
   1a743:	c3                   	ret

000000000001a744 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1a744:	55                   	push   %rbp
   1a745:	48 89 e5             	mov    %rsp,%rbp
   1a748:	48 83 ec 20          	sub    $0x20,%rsp
   1a74c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a750:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a754:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1a758:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a75d:	74 17                	je     1a776 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1a75f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a763:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a767:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1a76b:	48 89 ce             	mov    %rcx,%rsi
   1a76e:	48 89 c7             	mov    %rax,%rdi
   1a771:	e8 cd 14 00 00       	call   1bc43 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>
      }
   1a776:	90                   	nop
   1a777:	c9                   	leave
   1a778:	c3                   	ret
   1a779:	90                   	nop

000000000001a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1a77a:	55                   	push   %rbp
   1a77b:	48 89 e5             	mov    %rsp,%rbp
   1a77e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1a782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a786:	5d                   	pop    %rbp
   1a787:	c3                   	ret

000000000001a788 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1a788:	55                   	push   %rbp
   1a789:	48 89 e5             	mov    %rsp,%rbp
   1a78c:	48 83 ec 20          	sub    $0x20,%rsp
   1a790:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a794:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1a798:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1a79c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1a7a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a7a4:	48 89 d6             	mov    %rdx,%rsi
   1a7a7:	48 89 c7             	mov    %rax,%rdi
   1a7aa:	e8 f2 14 00 00       	call   1bca1 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>
    }
   1a7af:	90                   	nop
   1a7b0:	c9                   	leave
   1a7b1:	c3                   	ret

000000000001a7b2 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1a7b2:	55                   	push   %rbp
   1a7b3:	48 89 e5             	mov    %rsp,%rbp
   1a7b6:	53                   	push   %rbx
   1a7b7:	48 83 ec 38          	sub    $0x38,%rsp
   1a7bb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a7bf:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1a7c3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1a7c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a7cb:	48 89 c7             	mov    %rax,%rdi
   1a7ce:	e8 11 15 00 00       	call   1bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1a7d3:	48 89 c3             	mov    %rax,%rbx
   1a7d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a7da:	48 89 c7             	mov    %rax,%rdi
   1a7dd:	e8 b4 e8 ff ff       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1a7e2:	48 29 c3             	sub    %rax,%rbx
   1a7e5:	48 89 da             	mov    %rbx,%rdx
   1a7e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a7ec:	48 39 c2             	cmp    %rax,%rdx
   1a7ef:	0f 92 c0             	setb   %al
   1a7f2:	84 c0                	test   %al,%al
   1a7f4:	74 0c                	je     1a802 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1a7f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a7fa:	48 89 c7             	mov    %rax,%rdi
   1a7fd:	e8 de a8 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1a802:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a806:	48 89 c7             	mov    %rax,%rdi
   1a809:	e8 88 e8 ff ff       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1a80e:	48 89 c3             	mov    %rax,%rbx
   1a811:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a815:	48 89 c7             	mov    %rax,%rdi
   1a818:	e8 79 e8 ff ff       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1a81d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1a821:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1a825:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1a829:	48 89 d6             	mov    %rdx,%rsi
   1a82c:	48 89 c7             	mov    %rax,%rdi
   1a82f:	e8 1c ea ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   1a834:	48 8b 00             	mov    (%rax),%rax
   1a837:	48 01 d8             	add    %rbx,%rax
   1a83a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a83e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a842:	48 89 c7             	mov    %rax,%rdi
   1a845:	e8 4c e8 ff ff       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1a84a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1a84e:	72 12                	jb     1a862 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1a850:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a854:	48 89 c7             	mov    %rax,%rdi
   1a857:	e8 88 14 00 00       	call   1bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1a85c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a860:	73 0e                	jae    1a870 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1a862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a866:	48 89 c7             	mov    %rax,%rdi
   1a869:	e8 76 14 00 00       	call   1bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1a86e:	eb 04                	jmp    1a874 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   1a870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1a874:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1a878:	c9                   	leave
   1a879:	c3                   	ret

000000000001a87a <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1a87a:	55                   	push   %rbp
   1a87b:	48 89 e5             	mov    %rsp,%rbp
   1a87e:	53                   	push   %rbx
   1a87f:	48 83 ec 38          	sub    $0x38,%rsp
   1a883:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1a887:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1a88b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1a890:	0f 84 1c 02 00 00    	je     1aab2 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   1a896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a89a:	48 89 c7             	mov    %rax,%rdi
   1a89d:	e8 f4 e7 ff ff       	call   19096 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE4sizeEv>
   1a8a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1a8a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a8aa:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1a8ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a8b2:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a8b6:	48 29 c2             	sub    %rax,%rdx
   1a8b9:	48 c1 fa 02          	sar    $0x2,%rdx
   1a8bd:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1a8c4:	fc c0 0f 
   1a8c7:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1a8cb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1a8cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a8d3:	48 89 c7             	mov    %rax,%rdi
   1a8d6:	e8 09 14 00 00       	call   1bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1a8db:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1a8df:	72 16                	jb     1a8f7 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   1a8e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a8e5:	48 89 c7             	mov    %rax,%rdi
   1a8e8:	e8 f7 13 00 00       	call   1bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>
   1a8ed:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1a8f1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1a8f5:	73 07                	jae    1a8fe <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   1a8f7:	b8 01 00 00 00       	mov    $0x1,%eax
   1a8fc:	eb 05                	jmp    1a903 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   1a8fe:	b8 00 00 00 00       	mov    $0x0,%eax
   1a903:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1a905:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1a909:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1a90d:	72 33                	jb     1a942 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   1a90f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a913:	48 89 c7             	mov    %rax,%rdi
   1a916:	e8 5f fe ff ff       	call   1a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a91b:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1a91e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a922:	48 8b 40 08          	mov    0x8(%rax),%rax
   1a926:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1a92a:	48 89 ce             	mov    %rcx,%rsi
   1a92d:	48 89 c7             	mov    %rax,%rdi
   1a930:	e8 d1 13 00 00       	call   1bd06 <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1a935:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a939:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1a93d:	e9 70 01 00 00       	jmp    1aab2 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   1a942:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1a946:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a94a:	48 8d 15 b6 ca 00 00 	lea    0xcab6(%rip),%rdx        # 27407 <_ZNSt8__detailL19__atomic_spin_countE+0x474b>
   1a951:	48 89 ce             	mov    %rcx,%rsi
   1a954:	48 89 c7             	mov    %rax,%rdi
   1a957:	e8 56 fe ff ff       	call   1a7b2 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE12_M_check_lenEmPKc>
   1a95c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1a960:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a964:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1a968:	48 89 d6             	mov    %rdx,%rsi
   1a96b:	48 89 c7             	mov    %rax,%rdi
   1a96e:	e8 bd 13 00 00       	call   1bd30 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>
   1a973:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1a977:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a97b:	48 89 c7             	mov    %rax,%rdi
   1a97e:	e8 f7 fd ff ff       	call   1a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a983:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   1a986:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1a98a:	48 89 d0             	mov    %rdx,%rax
   1a98d:	48 c1 e0 06          	shl    $0x6,%rax
   1a991:	48 01 d0             	add    %rdx,%rax
   1a994:	48 c1 e0 02          	shl    $0x2,%rax
   1a998:	48 89 c2             	mov    %rax,%rdx
   1a99b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1a99f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1a9a3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1a9a7:	48 89 f2             	mov    %rsi,%rdx
   1a9aa:	48 89 c6             	mov    %rax,%rsi
   1a9ad:	48 89 cf             	mov    %rcx,%rdi
   1a9b0:	e8 51 13 00 00       	call   1bd06 <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1a9b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a9b9:	48 89 c7             	mov    %rax,%rdi
   1a9bc:	e8 b9 fd ff ff       	call   1a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1a9c1:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a9c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a9c8:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1a9cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1a9d0:	48 8b 00             	mov    (%rax),%rax
   1a9d3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1a9d7:	48 89 c7             	mov    %rax,%rdi
   1a9da:	e8 84 13 00 00       	call   1bd63 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1a9df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1a9e3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a9e7:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   1a9eb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1a9ef:	48 8b 12             	mov    (%rdx),%rdx
   1a9f2:	48 29 d1             	sub    %rdx,%rcx
   1a9f5:	48 c1 f9 02          	sar    $0x2,%rcx
   1a9f9:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   1aa00:	fc c0 0f 
   1aa03:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1aa07:	48 89 d6             	mov    %rdx,%rsi
   1aa0a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1aa0e:	48 8b 0a             	mov    (%rdx),%rcx
   1aa11:	48 89 f2             	mov    %rsi,%rdx
   1aa14:	48 89 ce             	mov    %rcx,%rsi
   1aa17:	48 89 c7             	mov    %rax,%rdi
   1aa1a:	e8 25 fd ff ff       	call   1a744 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1aa1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aa23:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1aa27:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1aa2a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1aa2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1aa32:	48 01 c2             	add    %rax,%rdx
   1aa35:	48 89 d0             	mov    %rdx,%rax
   1aa38:	48 c1 e0 06          	shl    $0x6,%rax
   1aa3c:	48 01 d0             	add    %rdx,%rax
   1aa3f:	48 c1 e0 02          	shl    $0x2,%rax
   1aa43:	48 89 c2             	mov    %rax,%rdx
   1aa46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1aa4a:	48 01 c2             	add    %rax,%rdx
   1aa4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aa51:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1aa55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1aa59:	48 89 d0             	mov    %rdx,%rax
   1aa5c:	48 c1 e0 06          	shl    $0x6,%rax
   1aa60:	48 01 d0             	add    %rdx,%rax
   1aa63:	48 c1 e0 02          	shl    $0x2,%rax
   1aa67:	48 89 c2             	mov    %rax,%rdx
   1aa6a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1aa6e:	48 01 c2             	add    %rax,%rdx
   1aa71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aa75:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1aa79:	eb 37                	jmp    1aab2 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   1aa7b:	48 89 c7             	mov    %rax,%rdi
   1aa7e:	e8 1d a6 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1aa83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aa87:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1aa8b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1aa8f:	48 89 ce             	mov    %rcx,%rsi
   1aa92:	48 89 c7             	mov    %rax,%rdi
   1aa95:	e8 aa fc ff ff       	call   1a744 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1aa9a:	e8 71 a8 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1aa9f:	48 89 c3             	mov    %rax,%rbx
   1aaa2:	e8 c9 a8 fe ff       	call   5370 <__cxa_end_catch@plt>
   1aaa7:	48 89 d8             	mov    %rbx,%rax
   1aaaa:	48 89 c7             	mov    %rax,%rdi
   1aaad:	e8 ee a8 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   1aab2:	90                   	nop
   1aab3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1aab7:	c9                   	leave
   1aab8:	c3                   	ret
   1aab9:	90                   	nop

000000000001aaba <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1aaba:	55                   	push   %rbp
   1aabb:	48 89 e5             	mov    %rsp,%rbp
   1aabe:	48 83 ec 20          	sub    $0x20,%rsp
   1aac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1aac6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1aaca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aace:	48 8b 40 08          	mov    0x8(%rax),%rax
   1aad2:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1aad6:	48 c1 f8 02          	sar    $0x2,%rax
   1aada:	48 89 c2             	mov    %rax,%rdx
   1aadd:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1aae4:	fc c0 0f 
   1aae7:	48 0f af c2          	imul   %rdx,%rax
   1aaeb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1aaef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1aaf4:	74 32                	je     1ab28 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   1aaf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aafa:	48 89 c7             	mov    %rax,%rdi
   1aafd:	e8 78 fc ff ff       	call   1a77a <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1ab02:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1ab05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab09:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1ab0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ab11:	48 89 ce             	mov    %rcx,%rsi
   1ab14:	48 89 c7             	mov    %rax,%rdi
   1ab17:	e8 6c fc ff ff       	call   1a788 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1ab1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ab20:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ab24:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1ab28:	90                   	nop
   1ab29:	c9                   	leave
   1ab2a:	c3                   	ret
   1ab2b:	90                   	nop

000000000001ab2c <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1ab2c:	55                   	push   %rbp
   1ab2d:	48 89 e5             	mov    %rsp,%rbp
   1ab30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ab34:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1ab38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ab3c:	5d                   	pop    %rbp
   1ab3d:	c3                   	ret

000000000001ab3e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1ab3e:	55                   	push   %rbp
   1ab3f:	48 89 e5             	mov    %rsp,%rbp
   1ab42:	48 83 ec 20          	sub    $0x20,%rsp
   1ab46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ab4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ab4e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1ab52:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1ab57:	74 17                	je     1ab70 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1ab59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab5d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ab61:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1ab65:	48 89 ce             	mov    %rcx,%rsi
   1ab68:	48 89 c7             	mov    %rax,%rdi
   1ab6b:	e8 25 12 00 00       	call   1bd95 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>
      }
   1ab70:	90                   	nop
   1ab71:	c9                   	leave
   1ab72:	c3                   	ret
   1ab73:	90                   	nop

000000000001ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   1ab74:	55                   	push   %rbp
   1ab75:	48 89 e5             	mov    %rsp,%rbp
   1ab78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1ab7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab80:	5d                   	pop    %rbp
   1ab81:	c3                   	ret

000000000001ab82 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1ab82:	55                   	push   %rbp
   1ab83:	48 89 e5             	mov    %rsp,%rbp
   1ab86:	48 83 ec 20          	sub    $0x20,%rsp
   1ab8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ab8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ab92:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1ab96:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ab9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ab9e:	48 89 d6             	mov    %rdx,%rsi
   1aba1:	48 89 c7             	mov    %rax,%rdi
   1aba4:	e8 4a 12 00 00       	call   1bdf3 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>
    }
   1aba9:	90                   	nop
   1abaa:	c9                   	leave
   1abab:	c3                   	ret

000000000001abac <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>:
      _M_check_len(size_type __n, const char* __s) const
   1abac:	55                   	push   %rbp
   1abad:	48 89 e5             	mov    %rsp,%rbp
   1abb0:	53                   	push   %rbx
   1abb1:	48 83 ec 38          	sub    $0x38,%rsp
   1abb5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1abb9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1abbd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1abc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abc5:	48 89 c7             	mov    %rax,%rdi
   1abc8:	e8 69 12 00 00       	call   1be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1abcd:	48 89 c3             	mov    %rax,%rbx
   1abd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1abd4:	48 89 c7             	mov    %rax,%rdi
   1abd7:	e8 46 e6 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1abdc:	48 29 c3             	sub    %rax,%rbx
   1abdf:	48 89 da             	mov    %rbx,%rdx
   1abe2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1abe6:	48 39 c2             	cmp    %rax,%rdx
   1abe9:	0f 92 c0             	setb   %al
   1abec:	84 c0                	test   %al,%al
   1abee:	74 0c                	je     1abfc <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0x50>
	  __throw_length_error(__N(__s));
   1abf0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1abf4:	48 89 c7             	mov    %rax,%rdi
   1abf7:	e8 e4 a4 fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1abfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac00:	48 89 c7             	mov    %rax,%rdi
   1ac03:	e8 1a e6 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ac08:	48 89 c3             	mov    %rax,%rbx
   1ac0b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac0f:	48 89 c7             	mov    %rax,%rdi
   1ac12:	e8 0b e6 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ac17:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ac1b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1ac1f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1ac23:	48 89 d6             	mov    %rdx,%rsi
   1ac26:	48 89 c7             	mov    %rax,%rdi
   1ac29:	e8 22 e6 ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   1ac2e:	48 8b 00             	mov    (%rax),%rax
   1ac31:	48 01 d8             	add    %rbx,%rax
   1ac34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ac38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac3c:	48 89 c7             	mov    %rax,%rdi
   1ac3f:	e8 de e5 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ac44:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1ac48:	72 12                	jb     1ac5c <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xb0>
   1ac4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac4e:	48 89 c7             	mov    %rax,%rdi
   1ac51:	e8 e0 11 00 00       	call   1be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1ac56:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1ac5a:	73 0e                	jae    1ac6a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xbe>
   1ac5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ac60:	48 89 c7             	mov    %rax,%rdi
   1ac63:	e8 ce 11 00 00       	call   1be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1ac68:	eb 04                	jmp    1ac6e <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc+0xc2>
   1ac6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1ac6e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ac72:	c9                   	leave
   1ac73:	c3                   	ret

000000000001ac74 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm>:
    vector<_Tp, _Alloc>::
   1ac74:	55                   	push   %rbp
   1ac75:	48 89 e5             	mov    %rsp,%rbp
   1ac78:	53                   	push   %rbx
   1ac79:	48 83 ec 38          	sub    $0x38,%rsp
   1ac7d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1ac81:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      if (__n != 0)
   1ac85:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1ac8a:	0f 84 1c 02 00 00    	je     1aeac <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
	  const size_type __size = size();
   1ac90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ac94:	48 89 c7             	mov    %rax,%rdi
   1ac97:	e8 86 e5 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1ac9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1aca0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1aca4:	48 8b 50 10          	mov    0x10(%rax),%rdx
					 - this->_M_impl._M_finish);
   1aca8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1acac:	48 8b 40 08          	mov    0x8(%rax),%rax
   1acb0:	48 29 c2             	sub    %rax,%rdx
   1acb3:	48 c1 fa 03          	sar    $0x3,%rdx
   1acb7:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1acbe:	fc c0 0f 
   1acc1:	48 0f af c2          	imul   %rdx,%rax
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
   1acc5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  if (__size > max_size() || __navail > max_size() - __size)
   1acc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1accd:	48 89 c7             	mov    %rax,%rdi
   1acd0:	e8 61 11 00 00       	call   1be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1acd5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1acd9:	72 16                	jb     1acf1 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x7d>
   1acdb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1acdf:	48 89 c7             	mov    %rax,%rdi
   1ace2:	e8 4f 11 00 00       	call   1be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>
   1ace7:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1aceb:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1acef:	73 07                	jae    1acf8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x84>
   1acf1:	b8 01 00 00 00       	mov    $0x1,%eax
   1acf6:	eb 05                	jmp    1acfd <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x89>
   1acf8:	b8 00 00 00 00       	mov    $0x0,%eax
   1acfd:	84 c0                	test   %al,%al
	  if (__navail >= __n)
   1acff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ad03:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1ad07:	72 33                	jb     1ad3c <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0xc8>
						 __n, _M_get_Tp_allocator());
   1ad09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ad0d:	48 89 c7             	mov    %rax,%rdi
   1ad10:	e8 5f fe ff ff       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1ad15:	48 89 c2             	mov    %rax,%rdx
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
   1ad18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ad1c:	48 8b 40 08          	mov    0x8(%rax),%rax
   1ad20:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1ad24:	48 89 ce             	mov    %rcx,%rsi
   1ad27:	48 89 c7             	mov    %rax,%rdi
   1ad2a:	e8 29 11 00 00       	call   1be58 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
	      this->_M_impl._M_finish =
   1ad2f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ad33:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
   1ad37:	e9 70 01 00 00       	jmp    1aeac <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		_M_check_len(__n, "vector::_M_default_append");
   1ad3c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1ad40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ad44:	48 8d 15 bc c6 00 00 	lea    0xc6bc(%rip),%rdx        # 27407 <_ZNSt8__detailL19__atomic_spin_countE+0x474b>
   1ad4b:	48 89 ce             	mov    %rcx,%rsi
   1ad4e:	48 89 c7             	mov    %rax,%rdi
   1ad51:	e8 56 fe ff ff       	call   1abac <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE12_M_check_lenEmPKc>
   1ad56:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      pointer __new_start(this->_M_allocate(__len));
   1ad5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ad5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ad62:	48 89 d6             	mov    %rdx,%rsi
   1ad65:	48 89 c7             	mov    %rax,%rdi
   1ad68:	e8 15 11 00 00       	call   1be82 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   1ad6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			      __n, _M_get_Tp_allocator());
   1ad71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ad75:	48 89 c7             	mov    %rax,%rdi
   1ad78:	e8 f7 fd ff ff       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1ad7d:	48 89 c6             	mov    %rax,%rsi
		      std::__uninitialized_default_n_a(__new_start + __size,
   1ad80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ad84:	48 89 d0             	mov    %rdx,%rax
   1ad87:	48 c1 e0 06          	shl    $0x6,%rax
   1ad8b:	48 01 d0             	add    %rdx,%rax
   1ad8e:	48 c1 e0 03          	shl    $0x3,%rax
   1ad92:	48 89 c2             	mov    %rax,%rdx
   1ad95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ad99:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1ad9d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ada1:	48 89 f2             	mov    %rsi,%rdx
   1ada4:	48 89 c6             	mov    %rax,%rsi
   1ada7:	48 89 cf             	mov    %rcx,%rdi
   1adaa:	e8 a9 10 00 00       	call   1be58 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>
			      __new_start, _M_get_Tp_allocator());
   1adaf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1adb3:	48 89 c7             	mov    %rax,%rdi
   1adb6:	e8 b9 fd ff ff       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1adbb:	48 89 c1             	mov    %rax,%rcx
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1adbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1adc2:	48 8b 70 08          	mov    0x8(%rax),%rsi
   1adc6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1adca:	48 8b 00             	mov    (%rax),%rax
   1adcd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1add1:	48 89 c7             	mov    %rax,%rdi
   1add4:	e8 dc 10 00 00       	call   1beb5 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
	      _M_deallocate(this->_M_impl._M_start,
   1add9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
			    this->_M_impl._M_end_of_storage
   1addd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ade1:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
			    - this->_M_impl._M_start);
   1ade5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ade9:	48 8b 12             	mov    (%rdx),%rdx
   1adec:	48 29 d1             	sub    %rdx,%rcx
   1adef:	48 c1 f9 03          	sar    $0x3,%rcx
   1adf3:	48 ba c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rdx
   1adfa:	fc c0 0f 
   1adfd:	48 0f af d1          	imul   %rcx,%rdx
	      _M_deallocate(this->_M_impl._M_start,
   1ae01:	48 89 d6             	mov    %rdx,%rsi
   1ae04:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1ae08:	48 8b 0a             	mov    (%rdx),%rcx
   1ae0b:	48 89 f2             	mov    %rsi,%rdx
   1ae0e:	48 89 ce             	mov    %rcx,%rsi
   1ae11:	48 89 c7             	mov    %rax,%rdi
   1ae14:	e8 25 fd ff ff       	call   1ab3e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
	      this->_M_impl._M_start = __new_start;
   1ae19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ae1d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1ae21:	48 89 10             	mov    %rdx,(%rax)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1ae24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1ae28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ae2c:	48 01 c2             	add    %rax,%rdx
   1ae2f:	48 89 d0             	mov    %rdx,%rax
   1ae32:	48 c1 e0 06          	shl    $0x6,%rax
   1ae36:	48 01 d0             	add    %rdx,%rax
   1ae39:	48 c1 e0 03          	shl    $0x3,%rax
   1ae3d:	48 89 c2             	mov    %rax,%rdx
   1ae40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ae44:	48 01 c2             	add    %rax,%rdx
   1ae47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ae4b:	48 89 50 08          	mov    %rdx,0x8(%rax)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ae4f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ae53:	48 89 d0             	mov    %rdx,%rax
   1ae56:	48 c1 e0 06          	shl    $0x6,%rax
   1ae5a:	48 01 d0             	add    %rdx,%rax
   1ae5d:	48 c1 e0 03          	shl    $0x3,%rax
   1ae61:	48 89 c2             	mov    %rax,%rdx
   1ae64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ae68:	48 01 c2             	add    %rax,%rdx
   1ae6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ae6f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1ae73:	eb 37                	jmp    1aeac <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE17_M_default_appendEm+0x238>
		  __catch(...)
   1ae75:	48 89 c7             	mov    %rax,%rdi
   1ae78:	e8 23 a2 fe ff       	call   50a0 <__cxa_begin_catch@plt>
		      _M_deallocate(__new_start, __len);
   1ae7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1ae81:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ae85:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1ae89:	48 89 ce             	mov    %rcx,%rsi
   1ae8c:	48 89 c7             	mov    %rax,%rdi
   1ae8f:	e8 aa fc ff ff       	call   1ab3e <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE13_M_deallocateEPS1_m>
		      __throw_exception_again;
   1ae94:	e8 77 a4 fe ff       	call   5310 <__cxa_rethrow@plt>
		  __catch(...)
   1ae99:	48 89 c3             	mov    %rax,%rbx
   1ae9c:	e8 cf a4 fe ff       	call   5370 <__cxa_end_catch@plt>
   1aea1:	48 89 d8             	mov    %rbx,%rax
   1aea4:	48 89 c7             	mov    %rax,%rdi
   1aea7:	e8 f4 a4 fe ff       	call   53a0 <_Unwind_Resume@plt>
    }
   1aeac:	90                   	nop
   1aead:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1aeb1:	c9                   	leave
   1aeb2:	c3                   	ret
   1aeb3:	90                   	nop

000000000001aeb4 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
   1aeb4:	55                   	push   %rbp
   1aeb5:	48 89 e5             	mov    %rsp,%rbp
   1aeb8:	48 83 ec 20          	sub    $0x20,%rsp
   1aebc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1aec0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1aec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aec8:	48 8b 40 08          	mov    0x8(%rax),%rax
   1aecc:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1aed0:	48 c1 f8 03          	sar    $0x3,%rax
   1aed4:	48 89 c2             	mov    %rax,%rdx
   1aed7:	48 b8 c1 0f fc c0 0f 	movabs $0xfc0fc0fc0fc0fc1,%rax
   1aede:	fc c0 0f 
   1aee1:	48 0f af c2          	imul   %rdx,%rax
   1aee5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1aee9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1aeee:	74 32                	je     1af22 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE15_M_erase_at_endEPS1_+0x6e>
			  _M_get_Tp_allocator());
   1aef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aef4:	48 89 c7             	mov    %rax,%rdi
   1aef7:	e8 78 fc ff ff       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1aefc:	48 89 c2             	mov    %rax,%rdx
	    std::_Destroy(__pos, this->_M_impl._M_finish,
   1aeff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af03:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1af07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1af0b:	48 89 ce             	mov    %rcx,%rsi
   1af0e:	48 89 c7             	mov    %rax,%rdi
   1af11:	e8 6c fc ff ff       	call   1ab82 <_ZSt8_DestroyIPN2vk15LayerPropertiesES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
   1af16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af1a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1af1e:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
   1af22:	90                   	nop
   1af23:	c9                   	leave
   1af24:	c3                   	ret
   1af25:	90                   	nop

000000000001af26 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_M_data_ptrIS1_EEPT_S6_>:
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
   1af26:	55                   	push   %rbp
   1af27:	48 89 e5             	mov    %rsp,%rbp
   1af2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af2e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
   1af32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1af36:	5d                   	pop    %rbp
   1af37:	c3                   	ret

000000000001af38 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
   1af38:	55                   	push   %rbp
   1af39:	48 89 e5             	mov    %rsp,%rbp
   1af3c:	48 83 ec 10          	sub    $0x10,%rsp
   1af40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
   1af48:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1af4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af50:	48 89 d6             	mov    %rdx,%rsi
   1af53:	48 89 c7             	mov    %rax,%rdi
   1af56:	e8 8d 0f 00 00       	call   1bee8 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>
   1af5b:	90                   	nop
   1af5c:	c9                   	leave
   1af5d:	c3                   	ret

000000000001af5e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1af5e:	55                   	push   %rbp
   1af5f:	48 89 e5             	mov    %rsp,%rbp
   1af62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1af66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af6a:	5d                   	pop    %rbp
   1af6b:	c3                   	ret

000000000001af6c <_ZN9__gnu_cxx17__normal_iteratorIPN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1af6c:	55                   	push   %rbp
   1af6d:	48 89 e5             	mov    %rsp,%rbp
   1af70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1af74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1af78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1af7c:	48 8b 10             	mov    (%rax),%rdx
   1af7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af83:	48 89 10             	mov    %rdx,(%rax)
   1af86:	90                   	nop
   1af87:	5d                   	pop    %rbp
   1af88:	c3                   	ret
   1af89:	90                   	nop

000000000001af8a <_ZNKSt5arrayIcLm256EE4dataEv>:
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
   1af8a:	55                   	push   %rbp
   1af8b:	48 89 e5             	mov    %rsp,%rbp
   1af8e:	48 83 ec 10          	sub    $0x10,%rsp
   1af92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _AT_Type::_S_ptr(_M_elems); }
   1af96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1af9a:	48 89 c7             	mov    %rax,%rdi
   1af9d:	e8 45 10 00 00       	call   1bfe7 <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>
   1afa2:	c9                   	leave
   1afa3:	c3                   	ret

000000000001afa4 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_>:
      compare(basic_string_view __str) const noexcept
   1afa4:	55                   	push   %rbp
   1afa5:	48 89 e5             	mov    %rsp,%rbp
   1afa8:	48 83 ec 30          	sub    $0x30,%rsp
   1afac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1afb0:	48 89 d1             	mov    %rdx,%rcx
   1afb3:	48 89 f0             	mov    %rsi,%rax
   1afb6:	48 89 fa             	mov    %rdi,%rdx
   1afb9:	48 89 ca             	mov    %rcx,%rdx
   1afbc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1afc0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	const size_type __rlen = std::min(this->_M_len, __str._M_len);
   1afc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1afc8:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1afcc:	48 89 d6             	mov    %rdx,%rsi
   1afcf:	48 89 c7             	mov    %rax,%rdi
   1afd2:	e8 5d cc ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1afd7:	48 8b 00             	mov    (%rax),%rax
   1afda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
   1afde:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1afe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1afe6:	48 8b 40 08          	mov    0x8(%rax),%rax
   1afea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1afee:	48 89 ce             	mov    %rcx,%rsi
   1aff1:	48 89 c7             	mov    %rax,%rdi
   1aff4:	e8 86 3f ff ff       	call   ef7f <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   1aff9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (__ret == 0)
   1affc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   1b000:	75 19                	jne    1b01b <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE7compareES2_+0x77>
	  __ret = _S_compare(this->_M_len, __str._M_len);
   1b002:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1b006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b00a:	48 8b 00             	mov    (%rax),%rax
   1b00d:	48 89 d6             	mov    %rdx,%rsi
   1b010:	48 89 c7             	mov    %rax,%rdi
   1b013:	e8 dd 0f 00 00       	call   1bff5 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>
   1b018:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return __ret;
   1b01b:	8b 45 fc             	mov    -0x4(%rbp),%eax
      }
   1b01e:	c9                   	leave
   1b01f:	c3                   	ret

000000000001b020 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   1b020:	55                   	push   %rbp
   1b021:	48 89 e5             	mov    %rsp,%rbp
   1b024:	53                   	push   %rbx
   1b025:	48 83 ec 28          	sub    $0x28,%rsp
   1b029:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b02d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b031:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   1b035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b039:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b03d:	48 89 d6             	mov    %rdx,%rsi
   1b040:	48 89 c7             	mov    %rax,%rdi
   1b043:	e8 88 ce ff ff       	call   17ed0 <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   1b048:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b04c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b050:	48 89 d6             	mov    %rdx,%rsi
   1b053:	48 89 c7             	mov    %rax,%rdi
   1b056:	e8 e1 0f 00 00       	call   1c03c <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>
   1b05b:	eb 1a                	jmp    1b077 <_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_+0x57>
   1b05d:	48 89 c3             	mov    %rax,%rbx
   1b060:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b064:	48 89 c7             	mov    %rax,%rdi
   1b067:	e8 22 ce ff ff       	call   17e8e <_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implD1Ev>
   1b06c:	48 89 d8             	mov    %rbx,%rax
   1b06f:	48 89 c7             	mov    %rax,%rdi
   1b072:	e8 29 a3 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1b077:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b07b:	c9                   	leave
   1b07c:	c3                   	ret
   1b07d:	90                   	nop

000000000001b07e <_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm>:
      _M_default_initialize(size_type __n)
   1b07e:	55                   	push   %rbp
   1b07f:	48 89 e5             	mov    %rsp,%rbp
   1b082:	48 83 ec 10          	sub    $0x10,%rsp
   1b086:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b08a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
					   _M_get_Tp_allocator());
   1b08e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b092:	48 89 c7             	mov    %rax,%rdi
   1b095:	e8 52 d0 ff ff       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1b09a:	48 89 c2             	mov    %rax,%rdx
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   1b09d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b0a1:	48 8b 00             	mov    (%rax),%rax
   1b0a4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b0a8:	48 89 ce             	mov    %rcx,%rsi
   1b0ab:	48 89 c7             	mov    %rax,%rdi
   1b0ae:	e8 df 0f 00 00       	call   1c092 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>
	this->_M_impl._M_finish =
   1b0b3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1b0b7:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   1b0bb:	90                   	nop
   1b0bc:	c9                   	leave
   1b0bd:	c3                   	ret

000000000001b0be <_ZSt8_DestroyIPPKcS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   1b0be:	55                   	push   %rbp
   1b0bf:	48 89 e5             	mov    %rsp,%rbp
   1b0c2:	48 83 ec 20          	sub    $0x20,%rsp
   1b0c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b0ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b0ce:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      _Destroy(__first, __last);
   1b0d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b0d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b0da:	48 89 d6             	mov    %rdx,%rsi
   1b0dd:	48 89 c7             	mov    %rax,%rdi
   1b0e0:	e8 e2 e4 ff ff       	call   195c7 <_ZSt8_DestroyIPPKcEvT_S3_>
    }
   1b0e5:	90                   	nop
   1b0e6:	c9                   	leave
   1b0e7:	c3                   	ret

000000000001b0e8 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>:
      _M_deallocate(pointer __p, size_t __n)
   1b0e8:	55                   	push   %rbp
   1b0e9:	48 89 e5             	mov    %rsp,%rbp
   1b0ec:	48 83 ec 20          	sub    $0x20,%rsp
   1b0f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b0f4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b0f8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
   1b0fc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b101:	74 17                	je     1b11a <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
   1b103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b107:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b10b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b10f:	48 89 ce             	mov    %rcx,%rsi
   1b112:	48 89 c7             	mov    %rax,%rdi
   1b115:	e8 a1 0f 00 00       	call   1c0bb <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>
      }
   1b11a:	90                   	nop
   1b11b:	c9                   	leave
   1b11c:	c3                   	ret
   1b11d:	90                   	nop

000000000001b11e <_ZNKSt15__new_allocatorIPKcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1b11e:	55                   	push   %rbp
   1b11f:	48 89 e5             	mov    %rsp,%rbp
   1b122:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1b126:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1b12d:	ff ff 0f 
      }
   1b130:	5d                   	pop    %rbp
   1b131:	c3                   	ret

000000000001b132 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1b132:	55                   	push   %rbp
   1b133:	48 89 e5             	mov    %rsp,%rbp
   1b136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1b13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b13e:	5d                   	pop    %rbp
   1b13f:	c3                   	ret

000000000001b140 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
   1b140:	55                   	push   %rbp
   1b141:	48 89 e5             	mov    %rsp,%rbp
   1b144:	53                   	push   %rbx
   1b145:	48 83 ec 18          	sub    $0x18,%rsp
   1b149:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b14d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1b151:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b155:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1b159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b15d:	48 8b 40 10          	mov    0x10(%rax),%rax
   1b161:	48 39 c2             	cmp    %rax,%rdx
   1b164:	74 3c                	je     1b1a2 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x62>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
   1b166:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b16a:	48 89 c7             	mov    %rax,%rdi
   1b16d:	e8 a7 0f 00 00       	call   1c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   1b172:	48 89 c2             	mov    %rax,%rdx
   1b175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b179:	48 8b 48 08          	mov    0x8(%rax),%rcx
   1b17d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b181:	48 89 ce             	mov    %rcx,%rsi
   1b184:	48 89 c7             	mov    %rax,%rdi
   1b187:	e8 9b 0f 00 00       	call   1c127 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
   1b18c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b190:	48 8b 40 08          	mov    0x8(%rax),%rax
   1b194:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1b198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b19c:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1b1a0:	eb 30                	jmp    1b1d2 <_ZNSt6vectorIPKcSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x92>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1b1a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b1a6:	48 89 c7             	mov    %rax,%rdi
   1b1a9:	e8 6b 0f 00 00       	call   1c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   1b1ae:	48 89 c3             	mov    %rax,%rbx
   1b1b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1b5:	48 89 c7             	mov    %rax,%rdi
   1b1b8:	e8 9f 0f 00 00       	call   1c15c <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   1b1bd:	48 89 c1             	mov    %rax,%rcx
   1b1c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1c4:	48 89 da             	mov    %rbx,%rdx
   1b1c7:	48 89 ce             	mov    %rcx,%rsi
   1b1ca:	48 89 c7             	mov    %rax,%rdi
   1b1cd:	e8 e4 10 00 00       	call   1c2b6 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
   1b1d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b1d6:	48 89 c7             	mov    %rax,%rdi
   1b1d9:	e8 6a 12 00 00       	call   1c448 <_ZNSt6vectorIPKcSaIS1_EE4backEv>
      }
   1b1de:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b1e2:	c9                   	leave
   1b1e3:	c3                   	ret

000000000001b1e4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPKcPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1b1e4:	55                   	push   %rbp
   1b1e5:	48 89 e5             	mov    %rsp,%rbp
   1b1e8:	48 83 ec 20          	sub    $0x20,%rsp
   1b1ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b1f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b1f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
   1b1f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b1fc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b200:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b204:	48 89 ce             	mov    %rcx,%rsi
   1b207:	48 89 c7             	mov    %rax,%rdi
   1b20a:	e8 78 12 00 00       	call   1c487 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>
   1b20f:	c9                   	leave
   1b210:	c3                   	ret

000000000001b211 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b211:	55                   	push   %rbp
   1b212:	48 89 e5             	mov    %rsp,%rbp
   1b215:	48 83 ec 10          	sub    $0x10,%rsp
   1b219:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b21d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1b221:	eb 19                	jmp    1b23c <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1b223:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b227:	48 89 c7             	mov    %rax,%rdi
   1b22a:	e8 5b d1 ff ff       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1b22f:	48 89 c7             	mov    %rax,%rdi
   1b232:	e8 9b 12 00 00       	call   1c4d2 <_ZSt8_DestroyIPKcEvPT_>
	  for (; __first != __last; ++__first)
   1b237:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   1b23c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b240:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1b244:	75 dd                	jne    1b223 <_ZNSt12_Destroy_auxILb0EE9__destroyIPPKcEEvT_S5_+0x12>
	}
   1b246:	90                   	nop
   1b247:	90                   	nop
   1b248:	c9                   	leave
   1b249:	c3                   	ret

000000000001b24a <_ZNSt12_Destroy_auxILb1EE9__destroyIPPKcEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1b24a:	55                   	push   %rbp
   1b24b:	48 89 e5             	mov    %rsp,%rbp
   1b24e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b252:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b256:	90                   	nop
   1b257:	5d                   	pop    %rbp
   1b258:	c3                   	ret
   1b259:	90                   	nop

000000000001b25a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1b25a:	55                   	push   %rbp
   1b25b:	48 89 e5             	mov    %rsp,%rbp
   1b25e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b262:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1b266:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b26a:	48 8b 10             	mov    (%rax),%rdx
   1b26d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b271:	48 89 10             	mov    %rdx,(%rax)
   1b274:	90                   	nop
   1b275:	5d                   	pop    %rbp
   1b276:	c3                   	ret
   1b277:	90                   	nop

000000000001b278 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
   1b278:	55                   	push   %rbp
   1b279:	48 89 e5             	mov    %rsp,%rbp
   1b27c:	48 83 ec 10          	sub    $0x10,%rsp
   1b280:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b284:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b288:	48 89 c7             	mov    %rax,%rdi
   1b28b:	e8 5e 12 00 00       	call   1c4ee <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>
   1b290:	90                   	nop
   1b291:	c9                   	leave
   1b292:	c3                   	ret
   1b293:	90                   	nop

000000000001b294 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
   1b294:	55                   	push   %rbp
   1b295:	48 89 e5             	mov    %rsp,%rbp
   1b298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
   1b29c:	90                   	nop
   1b29d:	5d                   	pop    %rbp
   1b29e:	c3                   	ret
   1b29f:	90                   	nop

000000000001b2a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b2a0:	55                   	push   %rbp
   1b2a1:	48 89 e5             	mov    %rsp,%rbp
   1b2a4:	48 83 ec 20          	sub    $0x20,%rsp
   1b2a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b2ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   1b2b0:	eb 49                	jmp    1b2fb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x5b>
	{
	  _M_erase(_S_right(__x));
   1b2b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b2b6:	48 89 c7             	mov    %rax,%rdi
   1b2b9:	e8 3b 12 00 00       	call   1c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1b2be:	48 89 c2             	mov    %rax,%rdx
   1b2c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2c5:	48 89 d6             	mov    %rdx,%rsi
   1b2c8:	48 89 c7             	mov    %rax,%rdi
   1b2cb:	e8 d0 ff ff ff       	call   1b2a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
   1b2d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b2d4:	48 89 c7             	mov    %rax,%rdi
   1b2d7:	e8 2f 12 00 00       	call   1c50b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1b2dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_drop_node(__x);
   1b2e0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1b2e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b2e8:	48 89 d6             	mov    %rdx,%rsi
   1b2eb:	48 89 c7             	mov    %rax,%rdi
   1b2ee:	e8 2b 12 00 00       	call   1c51e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
   1b2f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b2f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (__x != 0)
   1b2fb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1b300:	75 b0                	jne    1b2b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	}
    }
   1b302:	90                   	nop
   1b303:	90                   	nop
   1b304:	c9                   	leave
   1b305:	c3                   	ret

000000000001b306 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
   1b306:	55                   	push   %rbp
   1b307:	48 89 e5             	mov    %rsp,%rbp
   1b30a:	48 83 ec 10          	sub    $0x10,%rsp
   1b30e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_mbegin(); }
   1b312:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b316:	48 89 c7             	mov    %rax,%rdi
   1b319:	e8 3a 12 00 00       	call   1c558 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>
   1b31e:	c9                   	leave
   1b31f:	c3                   	ret

000000000001b320 <_ZN9__gnu_cxx17__normal_iteratorIPN2vk19ExtensionPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1b320:	55                   	push   %rbp
   1b321:	48 89 e5             	mov    %rsp,%rbp
   1b324:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b328:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1b32c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b330:	48 8b 10             	mov    (%rax),%rdx
   1b333:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b337:	48 89 10             	mov    %rdx,(%rax)
   1b33a:	90                   	nop
   1b33b:	5d                   	pop    %rbp
   1b33c:	c3                   	ret
   1b33d:	90                   	nop

000000000001b33e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
   1b33e:	55                   	push   %rbp
   1b33f:	48 89 e5             	mov    %rsp,%rbp
   1b342:	48 83 ec 10          	sub    $0x10,%rsp
   1b346:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b34a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.lower_bound(__x); }
   1b34e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b352:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b356:	48 89 d6             	mov    %rdx,%rsi
   1b359:	48 89 c7             	mov    %rax,%rdi
   1b35c:	e8 09 12 00 00       	call   1c56a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>
   1b361:	c9                   	leave
   1b362:	c3                   	ret
   1b363:	90                   	nop

000000000001b364 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1b364:	55                   	push   %rbp
   1b365:	48 89 e5             	mov    %rsp,%rbp
   1b368:	48 83 ec 10          	sub    $0x10,%rsp
   1b36c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
   1b370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b374:	48 89 c7             	mov    %rax,%rdi
   1b377:	e8 3a 12 00 00       	call   1c5b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>
   1b37c:	c9                   	leave
   1b37d:	c3                   	ret

000000000001b37e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
   1b37e:	55                   	push   %rbp
   1b37f:	48 89 e5             	mov    %rsp,%rbp
   1b382:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b386:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x._M_node == __y._M_node; }
   1b38a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b38e:	48 8b 10             	mov    (%rax),%rdx
   1b391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b395:	48 8b 00             	mov    (%rax),%rax
   1b398:	48 39 c2             	cmp    %rax,%rdx
   1b39b:	0f 94 c0             	sete   %al
   1b39e:	5d                   	pop    %rbp
   1b39f:	c3                   	ret

000000000001b3a0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjSt4lessIS5_ESaISt4pairIKS5_jEEE8key_compEv>:
      key_comp() const
   1b3a0:	55                   	push   %rbp
   1b3a1:	48 89 e5             	mov    %rsp,%rbp
   1b3a4:	48 83 ec 10          	sub    $0x10,%rsp
   1b3a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.key_comp(); }
   1b3ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3b0:	48 89 c7             	mov    %rax,%rdi
   1b3b3:	e8 28 12 00 00       	call   1c5e0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>
   1b3b8:	90                   	nop
   1b3b9:	c9                   	leave
   1b3ba:	c3                   	ret
   1b3bb:	90                   	nop

000000000001b3bc <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1b3bc:	55                   	push   %rbp
   1b3bd:	48 89 e5             	mov    %rsp,%rbp
   1b3c0:	48 83 ec 10          	sub    $0x10,%rsp
   1b3c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
   1b3c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b3cc:	48 8b 00             	mov    (%rax),%rax
   1b3cf:	48 89 c7             	mov    %rax,%rdi
   1b3d2:	e8 15 12 00 00       	call   1c5ec <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1b3d7:	c9                   	leave
   1b3d8:	c3                   	ret

000000000001b3d9 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>:
#if __cpp_lib_three_way_comparison
  namespace __detail
  {
    template<typename _ChTraits>
      constexpr auto
      __char_traits_cmp_cat(int __cmp) noexcept
   1b3d9:	55                   	push   %rbp
   1b3da:	48 89 e5             	mov    %rsp,%rbp
   1b3dd:	89 7d fc             	mov    %edi,-0x4(%rbp)
      {
	if constexpr (requires { typename _ChTraits::comparison_category; })
	  {
	    using _Cat = typename _ChTraits::comparison_category;
	    static_assert( !is_void_v<common_comparison_category_t<_Cat>> );
	    return static_cast<_Cat>(__cmp <=> 0);
   1b3e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b3e3:	85 c0                	test   %eax,%eax
   1b3e5:	74 12                	je     1b3f9 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x20>
   1b3e7:	85 c0                	test   %eax,%eax
   1b3e9:	79 07                	jns    1b3f2 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x19>
   1b3eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1b3f0:	eb 0c                	jmp    1b3fe <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   1b3f2:	b8 01 00 00 00       	mov    $0x1,%eax
   1b3f7:	eb 05                	jmp    1b3fe <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai+0x25>
   1b3f9:	b8 00 00 00 00       	mov    $0x0,%eax
	  }
	else
	  return static_cast<weak_ordering>(__cmp <=> 0);
      }
   1b3fe:	5d                   	pop    %rbp
   1b3ff:	c3                   	ret

000000000001b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
      operator()(const _Tp& __x, const _Tp& __y) const
   1b400:	55                   	push   %rbp
   1b401:	48 89 e5             	mov    %rsp,%rbp
   1b404:	48 83 ec 30          	sub    $0x30,%rsp
   1b408:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b40c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b410:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      { return __x < __y; }
   1b414:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   1b418:	be 00 00 00 00       	mov    $0x0,%esi
   1b41d:	48 89 c7             	mov    %rax,%rdi
   1b420:	e8 e1 3a ff ff       	call   ef06 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
   1b425:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1b429:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b42d:	48 89 d6             	mov    %rdx,%rsi
   1b430:	48 89 c7             	mov    %rax,%rdi
   1b433:	e8 d2 11 00 00       	call   1c60a <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>
   1b438:	89 c7                	mov    %eax,%edi
   1b43a:	e8 d6 3a ff ff       	call   ef15 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
   1b43f:	c9                   	leave
   1b440:	c3                   	ret

000000000001b441 <_ZSt16forward_as_tupleIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt5tupleIJDpOT_EES9_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
   1b441:	55                   	push   %rbp
   1b442:	48 89 e5             	mov    %rsp,%rbp
   1b445:	48 83 ec 10          	sub    $0x10,%rsp
   1b449:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b44d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
   1b451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b455:	48 89 c7             	mov    %rax,%rdi
   1b458:	e8 d9 11 00 00       	call   1c636 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1b45d:	48 89 c2             	mov    %rax,%rdx
   1b460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b464:	48 89 d6             	mov    %rdx,%rsi
   1b467:	48 89 c7             	mov    %rax,%rdi
   1b46a:	e8 d5 11 00 00       	call   1c644 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>
   1b46f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b473:	c9                   	leave
   1b474:	c3                   	ret
   1b475:	90                   	nop

000000000001b476 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
   1b476:	55                   	push   %rbp
   1b477:	48 89 e5             	mov    %rsp,%rbp
   1b47a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b47e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__it._M_node) { }
   1b482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b486:	48 8b 10             	mov    (%rax),%rdx
   1b489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b48d:	48 89 10             	mov    %rdx,(%rax)
   1b490:	90                   	nop
   1b491:	5d                   	pop    %rbp
   1b492:	c3                   	ret
   1b493:	90                   	nop

000000000001b494 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b494:	55                   	push   %rbp
   1b495:	48 89 e5             	mov    %rsp,%rbp
   1b498:	41 54                	push   %r12
   1b49a:	53                   	push   %rbx
   1b49b:	48 83 ec 60          	sub    $0x60,%rsp
   1b49f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1b4a3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   1b4a7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   1b4ab:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   1b4af:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
   1b4b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1b4b7:	48 89 c7             	mov    %rax,%rdi
   1b4ba:	e8 d4 11 00 00       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1b4bf:	49 89 c4             	mov    %rax,%r12
   1b4c2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1b4c6:	48 89 c7             	mov    %rax,%rdi
   1b4c9:	e8 b7 11 00 00       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1b4ce:	48 89 c3             	mov    %rax,%rbx
   1b4d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1b4d5:	48 89 c7             	mov    %rax,%rdi
   1b4d8:	e8 9a 11 00 00       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1b4dd:	48 89 c2             	mov    %rax,%rdx
   1b4e0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1b4e4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b4e8:	4d 89 e0             	mov    %r12,%r8
   1b4eb:	48 89 d9             	mov    %rbx,%rcx
   1b4ee:	48 89 c7             	mov    %rax,%rdi
   1b4f1:	e8 ac 11 00 00       	call   1c6a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1b4f6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b4fa:	48 89 c7             	mov    %rax,%rdi
   1b4fd:	e8 a0 16 00 00       	call   1cba2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>
   1b502:	48 89 c2             	mov    %rax,%rdx
   1b505:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1b509:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1b50d:	48 89 ce             	mov    %rcx,%rsi
   1b510:	48 89 c7             	mov    %rax,%rdi
   1b513:	e8 3c 12 00 00       	call   1c754 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
   1b518:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1b51c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (__res.second)
   1b520:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b524:	48 85 c0             	test   %rax,%rax
   1b527:	74 1c                	je     1b545 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb1>
	  return __z._M_insert(__res);
   1b529:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   1b52d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1b531:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b535:	48 89 ce             	mov    %rcx,%rsi
   1b538:	48 89 c7             	mov    %rax,%rdi
   1b53b:	e8 80 16 00 00       	call   1cbc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>
   1b540:	48 89 c3             	mov    %rax,%rbx
   1b543:	eb 17                	jmp    1b55c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc8>
	return iterator(__res.first);
   1b545:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1b549:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1b54d:	48 89 d6             	mov    %rdx,%rsi
   1b550:	48 89 c7             	mov    %rax,%rdi
   1b553:	e8 be 16 00 00       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1b558:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
      }
   1b55c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b560:	48 89 c7             	mov    %rax,%rdi
   1b563:	e8 b6 11 00 00       	call   1c71e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   1b568:	48 89 d8             	mov    %rbx,%rax
   1b56b:	eb 1a                	jmp    1b587 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xf3>
   1b56d:	48 89 c3             	mov    %rax,%rbx
   1b570:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1b574:	48 89 c7             	mov    %rax,%rdi
   1b577:	e8 a2 11 00 00       	call   1c71e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>
   1b57c:	48 89 d8             	mov    %rbx,%rax
   1b57f:	48 89 c7             	mov    %rax,%rdi
   1b582:	e8 19 9e fe ff       	call   53a0 <_Unwind_Resume@plt>
   1b587:	48 83 c4 60          	add    $0x60,%rsp
   1b58b:	5b                   	pop    %rbx
   1b58c:	41 5c                	pop    %r12
   1b58e:	5d                   	pop    %rbp
   1b58f:	c3                   	ret

000000000001b590 <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
   1b590:	55                   	push   %rbp
   1b591:	48 89 e5             	mov    %rsp,%rbp
   1b594:	48 83 ec 20          	sub    $0x20,%rsp
   1b598:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b59c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
   1b5a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5a4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b5a8:	48 89 d6             	mov    %rdx,%rsi
   1b5ab:	48 89 c7             	mov    %rax,%rdi
   1b5ae:	e8 7d 16 00 00       	call   1cc30 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>
   1b5b3:	90                   	nop
   1b5b4:	c9                   	leave
   1b5b5:	c3                   	ret

000000000001b5b6 <_ZNSt14_Optional_baseIjLb1ELb1EEC1IJjELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
   1b5b6:	55                   	push   %rbp
   1b5b7:	48 89 e5             	mov    %rsp,%rbp
   1b5ba:	53                   	push   %rbx
   1b5bb:	48 83 ec 18          	sub    $0x18,%rsp
   1b5bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b5c3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _M_payload(in_place, std::forward<_Args>(__args)...)
   1b5c7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1b5cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b5cf:	48 89 c7             	mov    %rax,%rdi
   1b5d2:	e8 87 f9 ff ff       	call   1af5e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1b5d7:	48 89 c6             	mov    %rax,%rsi
   1b5da:	48 89 df             	mov    %rbx,%rdi
   1b5dd:	e8 ae ff ff ff       	call   1b590 <_ZNSt17_Optional_payloadIjLb1ELb1ELb1EECI1St22_Optional_payload_baseIjEIJjEEESt10in_place_tDpOT_>
	{ }
   1b5e2:	90                   	nop
   1b5e3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1b5e7:	c9                   	leave
   1b5e8:	c3                   	ret
   1b5e9:	90                   	nop

000000000001b5ea <_ZNSt22_Optional_payload_baseIjE6_M_getEv>:
      _M_get() noexcept
   1b5ea:	55                   	push   %rbp
   1b5eb:	48 89 e5             	mov    %rsp,%rbp
   1b5ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_payload._M_value; }
   1b5f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b5f6:	5d                   	pop    %rbp
   1b5f7:	c3                   	ret

000000000001b5f8 <_ZNKSt15__uniq_ptr_implIN2vk4raii17ContextDispatcherESt14default_deleteIS2_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
   1b5f8:	55                   	push   %rbp
   1b5f9:	48 89 e5             	mov    %rsp,%rbp
   1b5fc:	48 83 ec 10          	sub    $0x10,%rsp
   1b600:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b608:	48 89 c7             	mov    %rax,%rdi
   1b60b:	e8 5b 16 00 00       	call   1cc6b <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
   1b610:	48 8b 00             	mov    (%rax),%rax
   1b613:	c9                   	leave
   1b614:	c3                   	ret
   1b615:	90                   	nop

000000000001b616 <_ZNSt11_Tuple_implILm0EJPN2vk4raii18InstanceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   1b616:	55                   	push   %rbp
   1b617:	48 89 e5             	mov    %rsp,%rbp
   1b61a:	48 83 ec 10          	sub    $0x10,%rsp
   1b61e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   1b622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b626:	48 89 c7             	mov    %rax,%rdi
   1b629:	e8 58 16 00 00       	call   1cc86 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>
   1b62e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b632:	48 89 c7             	mov    %rax,%rdi
   1b635:	e8 68 16 00 00       	call   1cca2 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>
   1b63a:	90                   	nop
   1b63b:	c9                   	leave
   1b63c:	c3                   	ret

000000000001b63d <_ZSt10__exchangeIN2vk14PhysicalDeviceES1_ET_RS2_OT0_>:

  // C++11 version of std::exchange for internal use.
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
   1b63d:	55                   	push   %rbp
   1b63e:	48 89 e5             	mov    %rsp,%rbp
   1b641:	48 83 ec 20          	sub    $0x20,%rsp
   1b645:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b649:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      _Tp __old_val = std::move(__obj);
   1b64d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b651:	48 89 c7             	mov    %rax,%rdi
   1b654:	e8 2e e4 ff ff       	call   19a87 <_ZSt4moveIRN2vk14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS4_>
   1b659:	48 8b 00             	mov    (%rax),%rax
   1b65c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   1b660:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b664:	48 89 c7             	mov    %rax,%rdi
   1b667:	e8 9f e3 ff ff       	call   19a0b <_ZSt7forwardIN2vk14PhysicalDeviceEEOT_RNSt16remove_referenceIS2_E4typeE>
   1b66c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b670:	48 8b 00             	mov    (%rax),%rax
   1b673:	48 89 02             	mov    %rax,(%rdx)
      return __old_val;
   1b676:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1b67a:	c9                   	leave
   1b67b:	c3                   	ret

000000000001b67c <_ZSt10__exchangeIPKN2vk4raii18InstanceDispatcherEDnET_RS5_OT0_>:
    __exchange(_Tp& __obj, _Up&& __new_val)
   1b67c:	55                   	push   %rbp
   1b67d:	48 89 e5             	mov    %rsp,%rbp
   1b680:	48 83 ec 20          	sub    $0x20,%rsp
   1b684:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b688:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      _Tp __old_val = std::move(__obj);
   1b68c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b690:	48 89 c7             	mov    %rax,%rdi
   1b693:	e8 fd e3 ff ff       	call   19a95 <_ZSt4moveIRPKN2vk4raii18InstanceDispatcherEEONSt16remove_referenceIT_E4typeEOS7_>
   1b698:	48 8b 00             	mov    (%rax),%rax
   1b69b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __obj = std::forward<_Up>(__new_val);
   1b69f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b6a3:	48 89 c7             	mov    %rax,%rdi
   1b6a6:	e8 9e e3 ff ff       	call   19a49 <_ZSt7forwardIDnEOT_RNSt16remove_referenceIS0_E4typeE>
   1b6ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b6af:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      return __old_val;
   1b6b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
   1b6ba:	c9                   	leave
   1b6bb:	c3                   	ret

000000000001b6bc <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1b6bc:	55                   	push   %rbp
   1b6bd:	48 89 e5             	mov    %rsp,%rbp
   1b6c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b6c4:	90                   	nop
   1b6c5:	5d                   	pop    %rbp
   1b6c6:	c3                   	ret

000000000001b6c7 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1b6c7:	55                   	push   %rbp
   1b6c8:	48 89 e5             	mov    %rsp,%rbp
   1b6cb:	48 83 ec 40          	sub    $0x40,%rsp
   1b6cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b6d3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b6d7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b6db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b6df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b6e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b6e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b6eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b6ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1b6f3:	e8 a6 aa fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b6f8:	84 c0                	test   %al,%al
   1b6fa:	74 0e                	je     1b70a <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x43>
	    ::operator delete(__p);
   1b6fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b700:	48 89 c7             	mov    %rax,%rdi
   1b703:	e8 e8 9a fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1b708:	eb 18                	jmp    1b722 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE10deallocateERS3_PS2_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1b70a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b70e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b716:	48 89 ce             	mov    %rcx,%rsi
   1b719:	48 89 c7             	mov    %rax,%rdi
   1b71c:	e8 05 27 00 00       	call   1de26 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>
      { __a.deallocate(__p, __n); }
   1b721:	90                   	nop
   1b722:	90                   	nop
   1b723:	c9                   	leave
   1b724:	c3                   	ret

000000000001b725 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b725:	55                   	push   %rbp
   1b726:	48 89 e5             	mov    %rsp,%rbp
   1b729:	48 83 ec 10          	sub    $0x10,%rsp
   1b72d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b731:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1b735:	e8 64 aa fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b73a:	84 c0                	test   %al,%al
   1b73c:	74 15                	je     1b753 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1b73e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b746:	48 89 d6             	mov    %rdx,%rsi
   1b749:	48 89 c7             	mov    %rax,%rdi
   1b74c:	e8 67 15 00 00       	call   1ccb8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
   1b751:	eb 13                	jmp    1b766 <_ZSt8_DestroyIPN2vk4raii14PhysicalDeviceEEvT_S4_+0x41>
	__destroy(__first, __last);
   1b753:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b75b:	48 89 d6             	mov    %rdx,%rsi
   1b75e:	48 89 c7             	mov    %rax,%rdi
   1b761:	e8 52 15 00 00       	call   1ccb8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>
    }
   1b766:	c9                   	leave
   1b767:	c3                   	ret

000000000001b768 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1b768:	55                   	push   %rbp
   1b769:	48 89 e5             	mov    %rsp,%rbp
   1b76c:	48 83 ec 40          	sub    $0x40,%rsp
   1b770:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b774:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1b778:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1b77c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b784:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b788:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b78c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1b790:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1b794:	e8 05 aa fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b799:	84 c0                	test   %al,%al
   1b79b:	74 0e                	je     1b7ab <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1b79d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b7a1:	48 89 c7             	mov    %rax,%rdi
   1b7a4:	e8 47 9a fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1b7a9:	eb 18                	jmp    1b7c3 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1b7ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b7af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b7b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b7b7:	48 89 ce             	mov    %rcx,%rsi
   1b7ba:	48 89 c7             	mov    %rax,%rdi
   1b7bd:	e8 be 26 00 00       	call   1de80 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1b7c2:	90                   	nop
   1b7c3:	90                   	nop
   1b7c4:	c9                   	leave
   1b7c5:	c3                   	ret

000000000001b7c6 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1b7c6:	55                   	push   %rbp
   1b7c7:	48 89 e5             	mov    %rsp,%rbp
   1b7ca:	48 83 ec 10          	sub    $0x10,%rsp
   1b7ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b7d2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1b7d6:	e8 c3 a9 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b7db:	84 c0                	test   %al,%al
   1b7dd:	74 15                	je     1b7f4 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1b7df:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b7e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b7e7:	48 89 d6             	mov    %rdx,%rsi
   1b7ea:	48 89 c7             	mov    %rax,%rdi
   1b7ed:	e8 ff 14 00 00       	call   1ccf1 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
   1b7f2:	eb 13                	jmp    1b807 <_ZSt8_DestroyIPP18VkPhysicalDevice_TEvT_S3_+0x41>
	__destroy(__first, __last);
   1b7f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b7f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b7fc:	48 89 d6             	mov    %rdx,%rsi
   1b7ff:	48 89 c7             	mov    %rax,%rdi
   1b802:	e8 23 15 00 00       	call   1cd2a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>
    }
   1b807:	c9                   	leave
   1b808:	c3                   	ret
   1b809:	90                   	nop

000000000001b80a <_ZNKSt6vectorIP18VkPhysicalDevice_TSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1b80a:	55                   	push   %rbp
   1b80b:	48 89 e5             	mov    %rsp,%rbp
   1b80e:	48 83 ec 10          	sub    $0x10,%rsp
   1b812:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1b816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b81a:	48 89 c7             	mov    %rax,%rdi
   1b81d:	e8 6e 15 00 00       	call   1cd90 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>
   1b822:	48 89 c7             	mov    %rax,%rdi
   1b825:	e8 23 15 00 00       	call   1cd4d <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>
   1b82a:	c9                   	leave
   1b82b:	c3                   	ret

000000000001b82c <_ZSt27__uninitialized_default_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RSaIT1_E>:
  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1b82c:	55                   	push   %rbp
   1b82d:	48 89 e5             	mov    %rsp,%rbp
   1b830:	48 83 ec 20          	sub    $0x20,%rsp
   1b834:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b838:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b83c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
   1b840:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b844:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b848:	48 89 d6             	mov    %rdx,%rsi
   1b84b:	48 89 c7             	mov    %rax,%rdi
   1b84e:	e8 4b 15 00 00       	call   1cd9e <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>
   1b853:	c9                   	leave
   1b854:	c3                   	ret
   1b855:	90                   	nop

000000000001b856 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1b856:	55                   	push   %rbp
   1b857:	48 89 e5             	mov    %rsp,%rbp
   1b85a:	48 83 ec 10          	sub    $0x10,%rsp
   1b85e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b862:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b866:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b86b:	74 15                	je     1b882 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x2c>
   1b86d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b871:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1b875:	48 89 d6             	mov    %rdx,%rsi
   1b878:	48 89 c7             	mov    %rax,%rdi
   1b87b:	e8 47 15 00 00       	call   1cdc7 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>
   1b880:	eb 05                	jmp    1b887 <_ZNSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE11_M_allocateEm+0x31>
   1b882:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1b887:	c9                   	leave
   1b888:	c3                   	ret

000000000001b889 <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1b889:	55                   	push   %rbp
   1b88a:	48 89 e5             	mov    %rsp,%rbp
   1b88d:	48 83 ec 20          	sub    $0x20,%rsp
   1b891:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1b895:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1b899:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1b89d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1b8a1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1b8a5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1b8a9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1b8ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b8b1:	48 89 c7             	mov    %rax,%rdi
   1b8b4:	e8 95 15 00 00       	call   1ce4e <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1b8b9:	c9                   	leave
   1b8ba:	c3                   	ret

000000000001b8bb <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1b8bb:	55                   	push   %rbp
   1b8bc:	48 89 e5             	mov    %rsp,%rbp
   1b8bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1b8c3:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1b8ca:	ff ff 0f 
      }
   1b8cd:	5d                   	pop    %rbp
   1b8ce:	c3                   	ret

000000000001b8cf <_ZNSt6vectorIN2vk4raii14PhysicalDeviceESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1b8cf:	55                   	push   %rbp
   1b8d0:	48 89 e5             	mov    %rsp,%rbp
   1b8d3:	48 83 ec 20          	sub    $0x20,%rsp
   1b8d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1b8db:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   1b8e2:	ff ff 07 
   1b8e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1b8e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b8ed:	48 89 c7             	mov    %rax,%rdi
   1b8f0:	e8 c6 ff ff ff       	call   1b8bb <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8max_sizeERKS3_>
   1b8f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1b8f9:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1b8fd:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1b901:	48 89 d6             	mov    %rdx,%rsi
   1b904:	48 89 c7             	mov    %rax,%rdi
   1b907:	e8 28 c3 ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1b90c:	48 8b 00             	mov    (%rax),%rax
      }
   1b90f:	c9                   	leave
   1b910:	c3                   	ret
   1b911:	90                   	nop

000000000001b912 <_ZNKSt12_Vector_baseIN2vk4raii14PhysicalDeviceESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1b912:	55                   	push   %rbp
   1b913:	48 89 e5             	mov    %rsp,%rbp
   1b916:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1b91a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b91e:	5d                   	pop    %rbp
   1b91f:	c3                   	ret

000000000001b920 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m>:
      allocate(allocator_type& __a, size_type __n)
   1b920:	55                   	push   %rbp
   1b921:	48 89 e5             	mov    %rsp,%rbp
   1b924:	48 83 ec 20          	sub    $0x20,%rsp
   1b928:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b92c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b930:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b934:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b938:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b93c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1b940:	e8 59 a8 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1b945:	84 c0                	test   %al,%al
   1b947:	74 42                	je     1b98b <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x6b>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1b949:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b94d:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b952:	48 89 c2             	mov    %rax,%rdx
   1b955:	48 c1 e2 04          	shl    $0x4,%rdx
   1b959:	48 c1 e8 3c          	shr    $0x3c,%rax
   1b95d:	48 85 c0             	test   %rax,%rax
   1b960:	74 05                	je     1b967 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x47>
   1b962:	b9 01 00 00 00       	mov    $0x1,%ecx
   1b967:	48 89 d0             	mov    %rdx,%rax
   1b96a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b96e:	48 89 c8             	mov    %rcx,%rax
   1b971:	83 e0 01             	and    $0x1,%eax
   1b974:	84 c0                	test   %al,%al
   1b976:	74 05                	je     1b97d <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x5d>
	      std::__throw_bad_array_new_length();
   1b978:	e8 03 98 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1b97d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b981:	48 89 c7             	mov    %rax,%rdi
   1b984:	e8 97 98 fe ff       	call   5220 <_Znwm@plt>
   1b989:	eb 19                	jmp    1b9a4 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE8allocateERS3_m+0x84>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1b98b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1b98f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b993:	ba 00 00 00 00       	mov    $0x0,%edx
   1b998:	48 89 ce             	mov    %rcx,%rsi
   1b99b:	48 89 c7             	mov    %rax,%rdi
   1b99e:	e8 69 26 00 00       	call   1e00c <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>
   1b9a3:	90                   	nop
      { return __a.allocate(__n); }
   1b9a4:	c9                   	leave
   1b9a5:	c3                   	ret

000000000001b9a6 <_ZSt12__relocate_aIPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1b9a6:	55                   	push   %rbp
   1b9a7:	48 89 e5             	mov    %rsp,%rbp
   1b9aa:	41 54                	push   %r12
   1b9ac:	53                   	push   %rbx
   1b9ad:	48 83 ec 20          	sub    $0x20,%rsp
   1b9b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1b9b5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1b9b9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1b9bd:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
   1b9c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9c5:	48 89 c7             	mov    %rax,%rdi
   1b9c8:	e8 e4 14 00 00       	call   1ceb1 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1b9cd:	49 89 c4             	mov    %rax,%r12
   1b9d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b9d4:	48 89 c7             	mov    %rax,%rdi
   1b9d7:	e8 d5 14 00 00       	call   1ceb1 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1b9dc:	48 89 c3             	mov    %rax,%rbx
   1b9df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b9e3:	48 89 c7             	mov    %rax,%rdi
   1b9e6:	e8 c6 14 00 00       	call   1ceb1 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>
   1b9eb:	48 89 c7             	mov    %rax,%rdi
   1b9ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1b9f2:	48 89 c1             	mov    %rax,%rcx
   1b9f5:	4c 89 e2             	mov    %r12,%rdx
   1b9f8:	48 89 de             	mov    %rbx,%rsi
   1b9fb:	e8 bf 14 00 00       	call   1cebf <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
   1ba00:	48 83 c4 20          	add    $0x20,%rsp
   1ba04:	5b                   	pop    %rbx
   1ba05:	41 5c                	pop    %r12
   1ba07:	5d                   	pop    %rbp
   1ba08:	c3                   	ret

000000000001ba09 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJRKNS1_8InstanceERKP18VkPhysicalDevice_TEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1ba09:	55                   	push   %rbp
   1ba0a:	48 89 e5             	mov    %rsp,%rbp
   1ba0d:	41 54                	push   %r12
   1ba0f:	53                   	push   %rbx
   1ba10:	48 83 ec 20          	sub    $0x20,%rsp
   1ba14:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ba18:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ba1c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1ba20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba24:	48 89 c6             	mov    %rax,%rsi
   1ba27:	bf 10 00 00 00       	mov    $0x10,%edi
   1ba2c:	e8 83 a7 fe ff       	call   61b4 <_ZnwmPv>
   1ba31:	48 89 c3             	mov    %rax,%rbx
   1ba34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba38:	48 89 c7             	mov    %rax,%rdi
   1ba3b:	e8 a5 e5 ff ff       	call   19fe5 <_ZSt7forwardIRKP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS4_E4typeE>
   1ba40:	4c 8b 20             	mov    (%rax),%r12
   1ba43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ba47:	48 89 c7             	mov    %rax,%rdi
   1ba4a:	e8 88 e5 ff ff       	call   19fd7 <_ZSt7forwardIRKN2vk4raii8InstanceEEOT_RNSt16remove_referenceIS5_E4typeE>
   1ba4f:	4c 89 e2             	mov    %r12,%rdx
   1ba52:	48 89 c6             	mov    %rax,%rsi
   1ba55:	48 89 df             	mov    %rbx,%rdi
   1ba58:	e8 bb b7 ff ff       	call   17218 <_ZN2vk4raii14PhysicalDeviceC1ERKNS0_8InstanceEP18VkPhysicalDevice_T>
   1ba5d:	48 89 d8             	mov    %rbx,%rax
   1ba60:	48 83 c4 20          	add    $0x20,%rsp
   1ba64:	5b                   	pop    %rbx
   1ba65:	41 5c                	pop    %r12
   1ba67:	5d                   	pop    %rbp
   1ba68:	c3                   	ret

000000000001ba69 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1ba69:	55                   	push   %rbp
   1ba6a:	48 89 e5             	mov    %rsp,%rbp
   1ba6d:	48 83 ec 10          	sub    $0x10,%rsp
   1ba71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ba75:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1ba79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ba7d:	48 89 c7             	mov    %rax,%rdi
   1ba80:	e8 ab 14 00 00       	call   1cf30 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
	}
   1ba85:	90                   	nop
   1ba86:	c9                   	leave
   1ba87:	c3                   	ret

000000000001ba88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   1ba88:	55                   	push   %rbp
   1ba89:	48 89 e5             	mov    %rsp,%rbp
   1ba8c:	48 83 ec 20          	sub    $0x20,%rsp
   1ba90:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ba94:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   1ba98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba9c:	48 8b 00             	mov    (%rax),%rax
   1ba9f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1baa3:	48 c1 e2 04          	shl    $0x4,%rdx
   1baa7:	48 f7 da             	neg    %rdx
   1baaa:	48 01 d0             	add    %rdx,%rax
   1baad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bab1:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   1bab5:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1bab9:	48 89 d6             	mov    %rdx,%rsi
   1babc:	48 89 c7             	mov    %rax,%rdi
   1babf:	e8 96 f7 ff ff       	call   1b25a <_ZN9__gnu_cxx17__normal_iteratorIPN2vk4raii14PhysicalDeviceESt6vectorIS3_SaIS3_EEEC1ERKS4_>
   1bac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bac8:	c9                   	leave
   1bac9:	c3                   	ret

000000000001baca <_ZNSt11_Tuple_implILm0EJPN2vk4raii16DeviceDispatcherESt14default_deleteIS2_EEEC1Ev>:
      constexpr _Tuple_impl()
   1baca:	55                   	push   %rbp
   1bacb:	48 89 e5             	mov    %rsp,%rbp
   1bace:	48 83 ec 10          	sub    $0x10,%rsp
   1bad2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
   1bad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bada:	48 89 c7             	mov    %rax,%rdi
   1badd:	e8 6a 14 00 00       	call   1cf4c <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>
   1bae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bae6:	48 89 c7             	mov    %rax,%rdi
   1bae9:	e8 7a 14 00 00       	call   1cf68 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>
   1baee:	90                   	nop
   1baef:	c9                   	leave
   1baf0:	c3                   	ret

000000000001baf1 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1baf1:	55                   	push   %rbp
   1baf2:	48 89 e5             	mov    %rsp,%rbp
   1baf5:	48 83 ec 40          	sub    $0x40,%rsp
   1baf9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bafd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bb01:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bb05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bb09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bb0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bb11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1bb15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bb19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1bb1d:	e8 7c a6 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1bb22:	84 c0                	test   %al,%al
   1bb24:	74 0e                	je     1bb34 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1bb26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bb2a:	48 89 c7             	mov    %rax,%rdi
   1bb2d:	e8 be 96 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1bb32:	eb 18                	jmp    1bb4c <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1bb34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bb38:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1bb3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb40:	48 89 ce             	mov    %rcx,%rsi
   1bb43:	48 89 c7             	mov    %rax,%rdi
   1bb46:	e8 85 25 00 00       	call   1e0d0 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1bb4b:	90                   	nop
   1bb4c:	90                   	nop
   1bb4d:	c9                   	leave
   1bb4e:	c3                   	ret

000000000001bb4f <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1bb4f:	55                   	push   %rbp
   1bb50:	48 89 e5             	mov    %rsp,%rbp
   1bb53:	48 83 ec 10          	sub    $0x10,%rsp
   1bb57:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bb5b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1bb5f:	e8 3a a6 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1bb64:	84 c0                	test   %al,%al
   1bb66:	74 15                	je     1bb7d <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1bb68:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bb6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb70:	48 89 d6             	mov    %rdx,%rsi
   1bb73:	48 89 c7             	mov    %rax,%rdi
   1bb76:	e8 03 14 00 00       	call   1cf7e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
   1bb7b:	eb 13                	jmp    1bb90 <_ZSt8_DestroyIPN2vk21QueueFamilyPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1bb7d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bb81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bb85:	48 89 d6             	mov    %rdx,%rsi
   1bb88:	48 89 c7             	mov    %rax,%rdi
   1bb8b:	e8 27 14 00 00       	call   1cfb7 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>
    }
   1bb90:	c9                   	leave
   1bb91:	c3                   	ret

000000000001bb92 <_ZNKSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1bb92:	55                   	push   %rbp
   1bb93:	48 89 e5             	mov    %rsp,%rbp
   1bb96:	48 83 ec 10          	sub    $0x10,%rsp
   1bb9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1bb9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bba2:	48 89 c7             	mov    %rax,%rdi
   1bba5:	e8 72 14 00 00       	call   1d01c <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1bbaa:	48 89 c7             	mov    %rax,%rdi
   1bbad:	e8 28 14 00 00       	call   1cfda <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1bbb2:	c9                   	leave
   1bbb3:	c3                   	ret

000000000001bbb4 <_ZSt27__uninitialized_default_n_aIPN2vk21QueueFamilyPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1bbb4:	55                   	push   %rbp
   1bbb5:	48 89 e5             	mov    %rsp,%rbp
   1bbb8:	48 83 ec 20          	sub    $0x20,%rsp
   1bbbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bbc0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bbc4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1bbc8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bbcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbd0:	48 89 d6             	mov    %rdx,%rsi
   1bbd3:	48 89 c7             	mov    %rax,%rdi
   1bbd6:	e8 4f 14 00 00       	call   1d02a <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>
   1bbdb:	c9                   	leave
   1bbdc:	c3                   	ret
   1bbdd:	90                   	nop

000000000001bbde <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1bbde:	55                   	push   %rbp
   1bbdf:	48 89 e5             	mov    %rsp,%rbp
   1bbe2:	48 83 ec 10          	sub    $0x10,%rsp
   1bbe6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bbea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bbee:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bbf3:	74 15                	je     1bc0a <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1bbf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bbf9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bbfd:	48 89 d6             	mov    %rdx,%rsi
   1bc00:	48 89 c7             	mov    %rax,%rdi
   1bc03:	e8 4b 14 00 00       	call   1d053 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>
   1bc08:	eb 05                	jmp    1bc0f <_ZNSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1bc0a:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1bc0f:	c9                   	leave
   1bc10:	c3                   	ret

000000000001bc11 <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1bc11:	55                   	push   %rbp
   1bc12:	48 89 e5             	mov    %rsp,%rbp
   1bc15:	48 83 ec 20          	sub    $0x20,%rsp
   1bc19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bc1d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bc21:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bc25:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1bc29:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1bc2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bc31:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1bc35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc39:	48 89 c7             	mov    %rax,%rdi
   1bc3c:	e8 8f 14 00 00       	call   1d0d0 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1bc41:	c9                   	leave
   1bc42:	c3                   	ret

000000000001bc43 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1bc43:	55                   	push   %rbp
   1bc44:	48 89 e5             	mov    %rsp,%rbp
   1bc47:	48 83 ec 40          	sub    $0x40,%rsp
   1bc4b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bc4f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bc53:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bc57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bc5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bc63:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1bc67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bc6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1bc6f:	e8 2a a5 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1bc74:	84 c0                	test   %al,%al
   1bc76:	74 0e                	je     1bc86 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1bc78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bc7c:	48 89 c7             	mov    %rax,%rdi
   1bc7f:	e8 6c 95 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1bc84:	eb 18                	jmp    1bc9e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1bc86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bc8a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1bc8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bc92:	48 89 ce             	mov    %rcx,%rsi
   1bc95:	48 89 c7             	mov    %rax,%rdi
   1bc98:	e8 59 25 00 00       	call   1e1f6 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1bc9d:	90                   	nop
   1bc9e:	90                   	nop
   1bc9f:	c9                   	leave
   1bca0:	c3                   	ret

000000000001bca1 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1bca1:	55                   	push   %rbp
   1bca2:	48 89 e5             	mov    %rsp,%rbp
   1bca5:	48 83 ec 10          	sub    $0x10,%rsp
   1bca9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bcad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1bcb1:	e8 e8 a4 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1bcb6:	84 c0                	test   %al,%al
   1bcb8:	74 15                	je     1bccf <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1bcba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bcbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bcc2:	48 89 d6             	mov    %rdx,%rsi
   1bcc5:	48 89 c7             	mov    %rax,%rdi
   1bcc8:	e8 66 14 00 00       	call   1d133 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
   1bccd:	eb 13                	jmp    1bce2 <_ZSt8_DestroyIPN2vk19ExtensionPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1bccf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bcd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bcd7:	48 89 d6             	mov    %rdx,%rsi
   1bcda:	48 89 c7             	mov    %rax,%rdi
   1bcdd:	e8 8d 14 00 00       	call   1d16f <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>
    }
   1bce2:	c9                   	leave
   1bce3:	c3                   	ret

000000000001bce4 <_ZNKSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1bce4:	55                   	push   %rbp
   1bce5:	48 89 e5             	mov    %rsp,%rbp
   1bce8:	48 83 ec 10          	sub    $0x10,%rsp
   1bcec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1bcf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bcf4:	48 89 c7             	mov    %rax,%rdi
   1bcf7:	e8 d8 14 00 00       	call   1d1d4 <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1bcfc:	48 89 c7             	mov    %rax,%rdi
   1bcff:	e8 8e 14 00 00       	call   1d192 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1bd04:	c9                   	leave
   1bd05:	c3                   	ret

000000000001bd06 <_ZSt27__uninitialized_default_n_aIPN2vk19ExtensionPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1bd06:	55                   	push   %rbp
   1bd07:	48 89 e5             	mov    %rsp,%rbp
   1bd0a:	48 83 ec 20          	sub    $0x20,%rsp
   1bd0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd12:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bd16:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1bd1a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bd1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd22:	48 89 d6             	mov    %rdx,%rsi
   1bd25:	48 89 c7             	mov    %rax,%rdi
   1bd28:	e8 b5 14 00 00       	call   1d1e2 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>
   1bd2d:	c9                   	leave
   1bd2e:	c3                   	ret
   1bd2f:	90                   	nop

000000000001bd30 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1bd30:	55                   	push   %rbp
   1bd31:	48 89 e5             	mov    %rsp,%rbp
   1bd34:	48 83 ec 10          	sub    $0x10,%rsp
   1bd38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bd40:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1bd45:	74 15                	je     1bd5c <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1bd47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bd4f:	48 89 d6             	mov    %rdx,%rsi
   1bd52:	48 89 c7             	mov    %rax,%rdi
   1bd55:	e8 b1 14 00 00       	call   1d20b <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>
   1bd5a:	eb 05                	jmp    1bd61 <_ZNSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1bd5c:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1bd61:	c9                   	leave
   1bd62:	c3                   	ret

000000000001bd63 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1bd63:	55                   	push   %rbp
   1bd64:	48 89 e5             	mov    %rsp,%rbp
   1bd67:	48 83 ec 20          	sub    $0x20,%rsp
   1bd6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bd6f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bd73:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bd77:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1bd7b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1bd7f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bd83:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1bd87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bd8b:	48 89 c7             	mov    %rax,%rdi
   1bd8e:	e8 f5 14 00 00       	call   1d288 <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1bd93:	c9                   	leave
   1bd94:	c3                   	ret

000000000001bd95 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1bd95:	55                   	push   %rbp
   1bd96:	48 89 e5             	mov    %rsp,%rbp
   1bd99:	48 83 ec 40          	sub    $0x40,%rsp
   1bd9d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1bda1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1bda5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1bda9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bdad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bdb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1bdb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1bdb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bdbd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1bdc1:	e8 d8 a3 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1bdc6:	84 c0                	test   %al,%al
   1bdc8:	74 0e                	je     1bdd8 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1bdca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bdce:	48 89 c7             	mov    %rax,%rdi
   1bdd1:	e8 1a 94 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1bdd6:	eb 18                	jmp    1bdf0 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1bdd8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bddc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1bde0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bde4:	48 89 ce             	mov    %rcx,%rsi
   1bde7:	48 89 c7             	mov    %rax,%rdi
   1bdea:	e8 37 25 00 00       	call   1e326 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1bdef:	90                   	nop
   1bdf0:	90                   	nop
   1bdf1:	c9                   	leave
   1bdf2:	c3                   	ret

000000000001bdf3 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   1bdf3:	55                   	push   %rbp
   1bdf4:	48 89 e5             	mov    %rsp,%rbp
   1bdf7:	48 83 ec 10          	sub    $0x10,%rsp
   1bdfb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bdff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      if (std::__is_constant_evaluated())
   1be03:	e8 96 a3 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1be08:	84 c0                	test   %al,%al
   1be0a:	74 15                	je     1be21 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x2e>
	return _Destroy_aux<false>::__destroy(__first, __last);
   1be0c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1be10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be14:	48 89 d6             	mov    %rdx,%rsi
   1be17:	48 89 c7             	mov    %rax,%rdi
   1be1a:	e8 cc 14 00 00       	call   1d2eb <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
   1be1f:	eb 13                	jmp    1be34 <_ZSt8_DestroyIPN2vk15LayerPropertiesEEvT_S3_+0x41>
	__destroy(__first, __last);
   1be21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1be25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be29:	48 89 d6             	mov    %rdx,%rsi
   1be2c:	48 89 c7             	mov    %rax,%rdi
   1be2f:	e8 f3 14 00 00       	call   1d327 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>
    }
   1be34:	c9                   	leave
   1be35:	c3                   	ret

000000000001be36 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1be36:	55                   	push   %rbp
   1be37:	48 89 e5             	mov    %rsp,%rbp
   1be3a:	48 83 ec 10          	sub    $0x10,%rsp
   1be3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1be42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be46:	48 89 c7             	mov    %rax,%rdi
   1be49:	e8 3e 15 00 00       	call   1d38c <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1be4e:	48 89 c7             	mov    %rax,%rdi
   1be51:	e8 f4 14 00 00       	call   1d34a <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>
   1be56:	c9                   	leave
   1be57:	c3                   	ret

000000000001be58 <_ZSt27__uninitialized_default_n_aIPN2vk15LayerPropertiesEmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1be58:	55                   	push   %rbp
   1be59:	48 89 e5             	mov    %rsp,%rbp
   1be5c:	48 83 ec 20          	sub    $0x20,%rsp
   1be60:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1be64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1be68:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1be6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1be70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be74:	48 89 d6             	mov    %rdx,%rsi
   1be77:	48 89 c7             	mov    %rax,%rdi
   1be7a:	e8 1b 15 00 00       	call   1d39a <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>
   1be7f:	c9                   	leave
   1be80:	c3                   	ret
   1be81:	90                   	nop

000000000001be82 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>:
      _M_allocate(size_t __n)
   1be82:	55                   	push   %rbp
   1be83:	48 89 e5             	mov    %rsp,%rbp
   1be86:	48 83 ec 10          	sub    $0x10,%rsp
   1be8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1be8e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1be92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1be97:	74 15                	je     1beae <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x2c>
   1be99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1be9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bea1:	48 89 d6             	mov    %rdx,%rsi
   1bea4:	48 89 c7             	mov    %rax,%rdi
   1bea7:	e8 17 15 00 00       	call   1d3c3 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>
   1beac:	eb 05                	jmp    1beb3 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm+0x31>
   1beae:	b8 00 00 00 00       	mov    $0x0,%eax
      }
   1beb3:	c9                   	leave
   1beb4:	c3                   	ret

000000000001beb5 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1beb5:	55                   	push   %rbp
   1beb6:	48 89 e5             	mov    %rsp,%rbp
   1beb9:	48 83 ec 20          	sub    $0x20,%rsp
   1bebd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bec1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bec5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1bec9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1becd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1bed1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1bed5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1bed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bedd:	48 89 c7             	mov    %rax,%rdi
   1bee0:	e8 5b 15 00 00       	call   1d440 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1bee5:	c9                   	leave
   1bee6:	c3                   	ret
   1bee7:	90                   	nop

000000000001bee8 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEEC1ERKS2_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   1bee8:	55                   	push   %rbp
   1bee9:	48 89 e5             	mov    %rsp,%rbp
   1beec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1bef0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1bef4:	90                   	nop
   1bef5:	5d                   	pop    %rbp
   1bef6:	c3                   	ret
   1bef7:	90                   	nop

000000000001bef8 <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
   1bef8:	55                   	push   %rbp
   1bef9:	48 89 e5             	mov    %rsp,%rbp
   1befc:	41 55                	push   %r13
   1befe:	41 54                	push   %r12
   1bf00:	53                   	push   %rbx
   1bf01:	48 83 ec 28          	sub    $0x28,%rsp
   1bf05:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1bf09:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   1bf0d:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
   1bf11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf15:	48 89 c7             	mov    %rax,%rdi
   1bf18:	e8 6f 14 00 00       	call   1d38c <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1bf1d:	48 89 c2             	mov    %rax,%rdx
   1bf20:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   1bf24:	48 89 d6             	mov    %rdx,%rsi
   1bf27:	48 89 c7             	mov    %rax,%rdi
   1bf2a:	e8 74 15 00 00       	call   1d4a3 <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>
   1bf2f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf33:	48 89 c7             	mov    %rax,%rdi
   1bf36:	e8 e7 d2 ff ff       	call   19222 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE4sizeEv>
   1bf3b:	48 89 c1             	mov    %rax,%rcx
   1bf3e:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   1bf42:	48 89 c2             	mov    %rax,%rdx
   1bf45:	48 89 ce             	mov    %rcx,%rsi
   1bf48:	48 89 df             	mov    %rbx,%rdi
   1bf4b:	e8 7c 15 00 00       	call   1d4cc <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>
   1bf50:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   1bf54:	48 89 c7             	mov    %rax,%rdi
   1bf57:	e8 68 d1 ff ff       	call   190c4 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
				      _M_get_Tp_allocator());
   1bf5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bf60:	48 89 c7             	mov    %rax,%rdi
   1bf63:	e8 0c ec ff ff       	call   1ab74 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>
   1bf68:	49 89 c5             	mov    %rax,%r13
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   1bf6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bf6f:	48 8b 18             	mov    (%rax),%rbx
   1bf72:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf76:	48 89 c7             	mov    %rax,%rdi
   1bf79:	e8 d2 15 00 00       	call   1d550 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>
   1bf7e:	49 89 c4             	mov    %rax,%r12
   1bf81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1bf85:	48 89 c7             	mov    %rax,%rdi
   1bf88:	e8 9d 15 00 00       	call   1d52a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>
   1bf8d:	4c 89 e9             	mov    %r13,%rcx
   1bf90:	48 89 da             	mov    %rbx,%rdx
   1bf93:	4c 89 e6             	mov    %r12,%rsi
   1bf96:	48 89 c7             	mov    %rax,%rdi
   1bf99:	e8 db 15 00 00       	call   1d579 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	this->_M_impl._M_finish =
   1bf9e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1bfa2:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
   1bfa6:	eb 34                	jmp    1bfdc <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EEC1ERKS3_+0xe4>
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
   1bfa8:	48 89 c3             	mov    %rax,%rbx
   1bfab:	48 8d 45 df          	lea    -0x21(%rbp),%rax
   1bfaf:	48 89 c7             	mov    %rax,%rdi
   1bfb2:	e8 0d d1 ff ff       	call   190c4 <_ZNSaIN2vk15LayerPropertiesEED1Ev>
   1bfb7:	48 89 d8             	mov    %rbx,%rax
   1bfba:	48 89 c7             	mov    %rax,%rdi
   1bfbd:	e8 de 93 fe ff       	call   53a0 <_Unwind_Resume@plt>
      }
   1bfc2:	48 89 c3             	mov    %rax,%rbx
   1bfc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1bfc9:	48 89 c7             	mov    %rax,%rdi
   1bfcc:	e8 ff d0 ff ff       	call   190d0 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EED1Ev>
   1bfd1:	48 89 d8             	mov    %rbx,%rax
   1bfd4:	48 89 c7             	mov    %rax,%rdi
   1bfd7:	e8 c4 93 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1bfdc:	48 83 c4 28          	add    $0x28,%rsp
   1bfe0:	5b                   	pop    %rbx
   1bfe1:	41 5c                	pop    %r12
   1bfe3:	41 5d                	pop    %r13
   1bfe5:	5d                   	pop    %rbp
   1bfe6:	c3                   	ret

000000000001bfe7 <_ZNSt14__array_traitsIcLm256EE6_S_ptrERA256_Kc>:
      _S_ptr(const _Type& __t) noexcept
   1bfe7:	55                   	push   %rbp
   1bfe8:	48 89 e5             	mov    %rsp,%rbp
   1bfeb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return const_cast<_Tp*>(__t); }
   1bfef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bff3:	5d                   	pop    %rbp
   1bff4:	c3                   	ret

000000000001bff5 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) noexcept
   1bff5:	55                   	push   %rbp
   1bff6:	48 89 e5             	mov    %rsp,%rbp
   1bff9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1bffd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __diff = __n1 - __n2;
   1c001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c005:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1c009:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__diff > __limits::__max)
   1c00d:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c012:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c016:	7c 07                	jl     1c01f <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x2a>
	  return __limits::__max;
   1c018:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1c01d:	eb 1b                	jmp    1c03a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	if (__diff < __limits::__min)
   1c01f:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   1c026:	ff ff ff 
   1c029:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1c02d:	7f 07                	jg     1c036 <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x41>
	  return __limits::__min;
   1c02f:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1c034:	eb 04                	jmp    1c03a <_ZNSt17basic_string_viewIcSt11char_traitsIcEE10_S_compareEmm+0x45>
	return static_cast<int>(__diff);
   1c036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1c03a:	5d                   	pop    %rbp
   1c03b:	c3                   	ret

000000000001c03c <_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   1c03c:	55                   	push   %rbp
   1c03d:	48 89 e5             	mov    %rsp,%rbp
   1c040:	48 83 ec 10          	sub    $0x10,%rsp
   1c044:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c048:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   1c04c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c054:	48 89 d6             	mov    %rdx,%rsi
   1c057:	48 89 c7             	mov    %rax,%rdi
   1c05a:	e8 69 c1 ff ff       	call   181c8 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   1c05f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c063:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   1c066:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c06a:	48 8b 10             	mov    (%rax),%rdx
   1c06d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c071:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1c075:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c079:	48 8b 00             	mov    (%rax),%rax
   1c07c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c080:	48 c1 e2 03          	shl    $0x3,%rdx
   1c084:	48 01 c2             	add    %rax,%rdx
   1c087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c08b:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   1c08f:	90                   	nop
   1c090:	c9                   	leave
   1c091:	c3                   	ret

000000000001c092 <_ZSt27__uninitialized_default_n_aIPPKcmS1_ET_S3_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
   1c092:	55                   	push   %rbp
   1c093:	48 89 e5             	mov    %rsp,%rbp
   1c096:	48 83 ec 20          	sub    $0x20,%rsp
   1c09a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c09e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c0a2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__uninitialized_default_n(__first, __n); }
   1c0a6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c0aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c0ae:	48 89 d6             	mov    %rdx,%rsi
   1c0b1:	48 89 c7             	mov    %rax,%rdi
   1c0b4:	e8 14 15 00 00       	call   1d5cd <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>
   1c0b9:	c9                   	leave
   1c0ba:	c3                   	ret

000000000001c0bb <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1c0bb:	55                   	push   %rbp
   1c0bc:	48 89 e5             	mov    %rsp,%rbp
   1c0bf:	48 83 ec 40          	sub    $0x40,%rsp
   1c0c3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c0c7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c0cb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1c0cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c0d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c0d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c0db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c0df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c0e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1c0e7:	e8 b2 a0 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1c0ec:	84 c0                	test   %al,%al
   1c0ee:	74 0e                	je     1c0fe <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x43>
	    ::operator delete(__p);
   1c0f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c0f4:	48 89 c7             	mov    %rax,%rdi
   1c0f7:	e8 f4 90 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1c0fc:	eb 18                	jmp    1c116 <_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1c0fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c102:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1c106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c10a:	48 89 ce             	mov    %rcx,%rsi
   1c10d:	48 89 c7             	mov    %rax,%rdi
   1c110:	e8 75 25 00 00       	call   1e68a <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>
      { __a.deallocate(__p, __n); }
   1c115:	90                   	nop
   1c116:	90                   	nop
   1c117:	c9                   	leave
   1c118:	c3                   	ret

000000000001c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c119:	55                   	push   %rbp
   1c11a:	48 89 e5             	mov    %rsp,%rbp
   1c11d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c125:	5d                   	pop    %rbp
   1c126:	c3                   	ret

000000000001c127 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1c127:	55                   	push   %rbp
   1c128:	48 89 e5             	mov    %rsp,%rbp
   1c12b:	48 83 ec 20          	sub    $0x20,%rsp
   1c12f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c133:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1c137:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1c13b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c13f:	48 89 c7             	mov    %rax,%rdi
   1c142:	e8 d2 ff ff ff       	call   1c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   1c147:	48 89 c2             	mov    %rax,%rdx
   1c14a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c14e:	48 89 d6             	mov    %rdx,%rsi
   1c151:	48 89 c7             	mov    %rax,%rdi
   1c154:	e8 9d 14 00 00       	call   1d5f6 <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1c159:	90                   	nop
   1c15a:	c9                   	leave
   1c15b:	c3                   	ret

000000000001c15c <_ZNSt6vectorIPKcSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1c15c:	55                   	push   %rbp
   1c15d:	48 89 e5             	mov    %rsp,%rbp
   1c160:	48 83 ec 20          	sub    $0x20,%rsp
   1c164:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
   1c168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c16c:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1c170:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c174:	48 89 d6             	mov    %rdx,%rsi
   1c177:	48 89 c7             	mov    %rax,%rdi
   1c17a:	e8 b7 14 00 00       	call   1d636 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1c17f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c183:	c9                   	leave
   1c184:	c3                   	ret
   1c185:	90                   	nop

000000000001c186 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>:
      _M_check_len(size_type __n, const char* __s) const
   1c186:	55                   	push   %rbp
   1c187:	48 89 e5             	mov    %rsp,%rbp
   1c18a:	53                   	push   %rbx
   1c18b:	48 83 ec 38          	sub    $0x38,%rsp
   1c18f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c193:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1c197:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	if (max_size() - size() < __n)
   1c19b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c19f:	48 89 c7             	mov    %rax,%rdi
   1c1a2:	e8 ad 14 00 00       	call   1d654 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1c1a7:	48 89 c3             	mov    %rax,%rbx
   1c1aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c1ae:	48 89 c7             	mov    %rax,%rdi
   1c1b1:	e8 e2 c0 ff ff       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1c1b6:	48 29 c3             	sub    %rax,%rbx
   1c1b9:	48 89 da             	mov    %rbx,%rdx
   1c1bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c1c0:	48 39 c2             	cmp    %rax,%rdx
   1c1c3:	0f 92 c0             	setb   %al
   1c1c6:	84 c0                	test   %al,%al
   1c1c8:	74 0c                	je     1c1d6 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0x50>
	  __throw_length_error(__N(__s));
   1c1ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c1ce:	48 89 c7             	mov    %rax,%rdi
   1c1d1:	e8 0a 8f fe ff       	call   50e0 <_ZSt20__throw_length_errorPKc@plt>
	const size_type __len = size() + (std::max)(size(), __n);
   1c1d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c1da:	48 89 c7             	mov    %rax,%rdi
   1c1dd:	e8 b6 c0 ff ff       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1c1e2:	48 89 c3             	mov    %rax,%rbx
   1c1e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c1e9:	48 89 c7             	mov    %rax,%rdi
   1c1ec:	e8 a7 c0 ff ff       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1c1f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1c1f5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1c1f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1c1fd:	48 89 d6             	mov    %rdx,%rsi
   1c200:	48 89 c7             	mov    %rax,%rdi
   1c203:	e8 48 d0 ff ff       	call   19250 <_ZSt3maxImERKT_S2_S2_>
   1c208:	48 8b 00             	mov    (%rax),%rax
   1c20b:	48 01 d8             	add    %rbx,%rax
   1c20e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1c212:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c216:	48 89 c7             	mov    %rax,%rdi
   1c219:	e8 7a c0 ff ff       	call   18298 <_ZNKSt6vectorIPKcSaIS1_EE4sizeEv>
   1c21e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1c222:	72 12                	jb     1c236 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xb0>
   1c224:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c228:	48 89 c7             	mov    %rax,%rdi
   1c22b:	e8 24 14 00 00       	call   1d654 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1c230:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1c234:	73 0e                	jae    1c244 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xbe>
   1c236:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c23a:	48 89 c7             	mov    %rax,%rdi
   1c23d:	e8 12 14 00 00       	call   1d654 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>
   1c242:	eb 04                	jmp    1c248 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_+0xc2>
   1c244:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
   1c248:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c24c:	c9                   	leave
   1c24d:	c3                   	ret

000000000001c24e <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
   1c24e:	55                   	push   %rbp
   1c24f:	48 89 e5             	mov    %rsp,%rbp
   1c252:	53                   	push   %rbx
   1c253:	48 83 ec 18          	sub    $0x18,%rsp
   1c257:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c25b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() - __rhs.base(); }
   1c25f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c263:	48 89 c7             	mov    %rax,%rdi
   1c266:	e8 0b 14 00 00       	call   1d676 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1c26b:	48 8b 18             	mov    (%rax),%rbx
   1c26e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c272:	48 89 c7             	mov    %rax,%rdi
   1c275:	e8 fc 13 00 00       	call   1d676 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1c27a:	48 8b 00             	mov    (%rax),%rax
   1c27d:	48 89 da             	mov    %rbx,%rdx
   1c280:	48 29 c2             	sub    %rax,%rdx
   1c283:	48 89 d0             	mov    %rdx,%rax
   1c286:	48 c1 f8 03          	sar    $0x3,%rax
   1c28a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c28e:	c9                   	leave
   1c28f:	c3                   	ret

000000000001c290 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1c290:	55                   	push   %rbp
   1c291:	48 89 e5             	mov    %rsp,%rbp
   1c294:	48 83 ec 20          	sub    $0x20,%rsp
   1c298:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
   1c29c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c2a0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c2a4:	48 89 d6             	mov    %rdx,%rsi
   1c2a7:	48 89 c7             	mov    %rax,%rdi
   1c2aa:	e8 87 13 00 00       	call   1d636 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1c2af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c2b3:	c9                   	leave
   1c2b4:	c3                   	ret
   1c2b5:	90                   	nop

000000000001c2b6 <_ZNSt6vectorIPKcSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   1c2b6:	55                   	push   %rbp
   1c2b7:	48 89 e5             	mov    %rsp,%rbp
   1c2ba:	53                   	push   %rbx
   1c2bb:	48 83 ec 68          	sub    $0x68,%rsp
   1c2bf:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1c2c3:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   1c2c7:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   1c2cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c2cf:	48 8d 15 4b b1 00 00 	lea    0xb14b(%rip),%rdx        # 27421 <_ZNSt8__detailL19__atomic_spin_countE+0x4765>
   1c2d6:	be 01 00 00 00       	mov    $0x1,%esi
   1c2db:	48 89 c7             	mov    %rax,%rdi
   1c2de:	e8 a3 fe ff ff       	call   1c186 <_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_>
   1c2e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      pointer __old_start = this->_M_impl._M_start;
   1c2e7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c2eb:	48 8b 00             	mov    (%rax),%rax
   1c2ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pointer __old_finish = this->_M_impl._M_finish;
   1c2f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c2f6:	48 8b 40 08          	mov    0x8(%rax),%rax
   1c2fa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      const size_type __elems_before = __position - begin();
   1c2fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c302:	48 89 c7             	mov    %rax,%rdi
   1c305:	e8 86 ff ff ff       	call   1c290 <_ZNSt6vectorIPKcSaIS1_EE5beginEv>
   1c30a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1c30e:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
   1c312:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1c316:	48 89 d6             	mov    %rdx,%rsi
   1c319:	48 89 c7             	mov    %rax,%rdi
   1c31c:	e8 2d ff ff ff       	call   1c24e <_ZN9__gnu_cxxmiIPPKcSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
   1c321:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      pointer __new_start(this->_M_allocate(__len));
   1c325:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c329:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c32d:	48 89 d6             	mov    %rdx,%rsi
   1c330:	48 89 c7             	mov    %rax,%rdi
   1c333:	e8 90 be ff ff       	call   181c8 <_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm>
   1c338:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      pointer __new_finish(__new_start);
   1c33c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c340:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	  _Alloc_traits::construct(this->_M_impl,
   1c344:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1c348:	48 89 c7             	mov    %rax,%rdi
   1c34b:	e8 c9 fd ff ff       	call   1c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   1c350:	48 89 c2             	mov    %rax,%rdx
				   __new_start + __elems_before,
   1c353:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c357:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1c35e:	00 
	  _Alloc_traits::construct(this->_M_impl,
   1c35f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c363:	48 01 c1             	add    %rax,%rcx
   1c366:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c36a:	48 89 ce             	mov    %rcx,%rsi
   1c36d:	48 89 c7             	mov    %rax,%rdi
   1c370:	e8 b2 fd ff ff       	call   1c127 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
   1c375:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   1c37c:	00 
					 __new_start, _M_get_Tp_allocator());
   1c37d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c381:	48 89 c7             	mov    %rax,%rdi
   1c384:	e8 63 bd ff ff       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1c389:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__old_start, __position.base(),
   1c38c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1c390:	48 89 c7             	mov    %rax,%rdi
   1c393:	e8 de 12 00 00       	call   1d676 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1c398:	48 8b 30             	mov    (%rax),%rsi
   1c39b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c39f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c3a3:	48 89 d9             	mov    %rbx,%rcx
   1c3a6:	48 89 c7             	mov    %rax,%rdi
   1c3a9:	e8 d6 12 00 00       	call   1d684 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   1c3ae:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	      ++__new_finish;
   1c3b2:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
					 __new_finish, _M_get_Tp_allocator());
   1c3b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c3bb:	48 89 c7             	mov    %rax,%rdi
   1c3be:	e8 29 bd ff ff       	call   180ec <_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1c3c3:	48 89 c3             	mov    %rax,%rbx
	      __new_finish = _S_relocate(__position.base(), __old_finish,
   1c3c6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1c3ca:	48 89 c7             	mov    %rax,%rdi
   1c3cd:	e8 a4 12 00 00       	call   1d676 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>
   1c3d2:	48 8b 00             	mov    (%rax),%rax
   1c3d5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1c3d9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   1c3dd:	48 89 d9             	mov    %rbx,%rcx
   1c3e0:	48 89 c7             	mov    %rax,%rdi
   1c3e3:	e8 9c 12 00 00       	call   1d684 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
   1c3e8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      _M_deallocate(__old_start,
   1c3ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
		    this->_M_impl._M_end_of_storage - __old_start);
   1c3f0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1c3f4:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   1c3f8:	48 2b 55 e0          	sub    -0x20(%rbp),%rdx
   1c3fc:	48 c1 fa 03          	sar    $0x3,%rdx
      _M_deallocate(__old_start,
   1c400:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1c404:	48 89 ce             	mov    %rcx,%rsi
   1c407:	48 89 c7             	mov    %rax,%rdi
   1c40a:	e8 d9 ec ff ff       	call   1b0e8 <_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m>
      this->_M_impl._M_start = __new_start;
   1c40f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c413:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1c417:	48 89 10             	mov    %rdx,(%rax)
      this->_M_impl._M_finish = __new_finish;
   1c41a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c41e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1c422:	48 89 50 08          	mov    %rdx,0x8(%rax)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1c426:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c42a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1c431:	00 
   1c432:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c436:	48 01 c2             	add    %rax,%rdx
   1c439:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1c43d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
   1c441:	90                   	nop
   1c442:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c446:	c9                   	leave
   1c447:	c3                   	ret

000000000001c448 <_ZNSt6vectorIPKcSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
   1c448:	55                   	push   %rbp
   1c449:	48 89 e5             	mov    %rsp,%rbp
   1c44c:	48 83 ec 20          	sub    $0x20,%rsp
   1c450:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return *(end() - 1);
   1c454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c458:	48 89 c7             	mov    %rax,%rdi
   1c45b:	e8 fc fc ff ff       	call   1c15c <_ZNSt6vectorIPKcSaIS1_EE3endEv>
   1c460:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c464:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c468:	be 01 00 00 00       	mov    $0x1,%esi
   1c46d:	48 89 c7             	mov    %rax,%rdi
   1c470:	e8 61 12 00 00       	call   1d6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>
   1c475:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c479:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1c47d:	48 89 c7             	mov    %rax,%rdi
   1c480:	e8 93 12 00 00       	call   1d718 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>
      }
   1c485:	c9                   	leave
   1c486:	c3                   	ret

000000000001c487 <_ZSt4copyIPKPKcPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
   1c487:	55                   	push   %rbp
   1c488:	48 89 e5             	mov    %rsp,%rbp
   1c48b:	53                   	push   %rbx
   1c48c:	48 83 ec 28          	sub    $0x28,%rsp
   1c490:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c494:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c498:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1c49c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c4a0:	48 89 c7             	mov    %rax,%rdi
   1c4a3:	e8 81 12 00 00       	call   1d729 <_ZSt12__miter_baseIPKPKcET_S4_>
   1c4a8:	48 89 c3             	mov    %rax,%rbx
   1c4ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c4af:	48 89 c7             	mov    %rax,%rdi
   1c4b2:	e8 72 12 00 00       	call   1d729 <_ZSt12__miter_baseIPKPKcET_S4_>
   1c4b7:	48 89 c1             	mov    %rax,%rcx
   1c4ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c4be:	48 89 c2             	mov    %rax,%rdx
   1c4c1:	48 89 de             	mov    %rbx,%rsi
   1c4c4:	48 89 cf             	mov    %rcx,%rdi
   1c4c7:	e8 6b 12 00 00       	call   1d737 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>
    }
   1c4cc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c4d0:	c9                   	leave
   1c4d1:	c3                   	ret

000000000001c4d2 <_ZSt8_DestroyIPKcEvPT_>:
    _Destroy(_Tp* __pointer)
   1c4d2:	55                   	push   %rbp
   1c4d3:	48 89 e5             	mov    %rsp,%rbp
   1c4d6:	48 83 ec 10          	sub    $0x10,%rsp
   1c4da:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1c4de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c4e2:	48 89 c7             	mov    %rax,%rdi
   1c4e5:	e8 b7 12 00 00       	call   1d7a1 <_ZSt10destroy_atIPKcEvPT_>
    }
   1c4ea:	90                   	nop
   1c4eb:	c9                   	leave
   1c4ec:	c3                   	ret
   1c4ed:	90                   	nop

000000000001c4ee <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1c4ee:	55                   	push   %rbp
   1c4ef:	48 89 e5             	mov    %rsp,%rbp
   1c4f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c4f6:	90                   	nop
   1c4f7:	5d                   	pop    %rbp
   1c4f8:	c3                   	ret

000000000001c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1c4f9:	55                   	push   %rbp
   1c4fa:	48 89 e5             	mov    %rsp,%rbp
   1c4fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
   1c501:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c505:	48 8b 40 18          	mov    0x18(%rax),%rax
   1c509:	5d                   	pop    %rbp
   1c50a:	c3                   	ret

000000000001c50b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1c50b:	55                   	push   %rbp
   1c50c:	48 89 e5             	mov    %rsp,%rbp
   1c50f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
   1c513:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c517:	48 8b 40 10          	mov    0x10(%rax),%rax
   1c51b:	5d                   	pop    %rbp
   1c51c:	c3                   	ret
   1c51d:	90                   	nop

000000000001c51e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1c51e:	55                   	push   %rbp
   1c51f:	48 89 e5             	mov    %rsp,%rbp
   1c522:	48 83 ec 10          	sub    $0x10,%rsp
   1c526:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c52a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	_M_destroy_node(__p);
   1c52e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c532:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c536:	48 89 d6             	mov    %rdx,%rsi
   1c539:	48 89 c7             	mov    %rax,%rdi
   1c53c:	e8 6b 12 00 00       	call   1d7ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
   1c541:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c545:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c549:	48 89 d6             	mov    %rdx,%rsi
   1c54c:	48 89 c7             	mov    %rax,%rdi
   1c54f:	e8 96 12 00 00       	call   1d7ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
   1c554:	90                   	nop
   1c555:	c9                   	leave
   1c556:	c3                   	ret
   1c557:	90                   	nop

000000000001c558 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
   1c558:	55                   	push   %rbp
   1c559:	48 89 e5             	mov    %rsp,%rbp
   1c55c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1c560:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c564:	48 8b 40 10          	mov    0x10(%rax),%rax
   1c568:	5d                   	pop    %rbp
   1c569:	c3                   	ret

000000000001c56a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11lower_boundERS7_>:
      lower_bound(const key_type& __k)
   1c56a:	55                   	push   %rbp
   1c56b:	48 89 e5             	mov    %rsp,%rbp
   1c56e:	53                   	push   %rbx
   1c56f:	48 83 ec 18          	sub    $0x18,%rsp
   1c573:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c577:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   1c57b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c57f:	48 89 c7             	mov    %rax,%rdi
   1c582:	e8 99 12 00 00       	call   1d820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1c587:	48 89 c3             	mov    %rax,%rbx
   1c58a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c58e:	48 89 c7             	mov    %rax,%rdi
   1c591:	e8 70 ed ff ff       	call   1b306 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1c596:	48 89 c6             	mov    %rax,%rsi
   1c599:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1c59d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c5a1:	48 89 d1             	mov    %rdx,%rcx
   1c5a4:	48 89 da             	mov    %rbx,%rdx
   1c5a7:	48 89 c7             	mov    %rax,%rdi
   1c5aa:	e8 83 12 00 00       	call   1d832 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>
   1c5af:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c5b3:	c9                   	leave
   1c5b4:	c3                   	ret
   1c5b5:	90                   	nop

000000000001c5b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
   1c5b6:	55                   	push   %rbp
   1c5b7:	48 89 e5             	mov    %rsp,%rbp
   1c5ba:	48 83 ec 20          	sub    $0x20,%rsp
   1c5be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(&this->_M_impl._M_header); }
   1c5c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c5c6:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1c5ca:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1c5ce:	48 89 d6             	mov    %rdx,%rsi
   1c5d1:	48 89 c7             	mov    %rax,%rdi
   1c5d4:	e8 3d 06 00 00       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1c5d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c5dd:	c9                   	leave
   1c5de:	c3                   	ret
   1c5df:	90                   	nop

000000000001c5e0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8key_compEv>:
      key_comp() const
   1c5e0:	55                   	push   %rbp
   1c5e1:	48 89 e5             	mov    %rsp,%rbp
   1c5e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_key_compare; }
   1c5e8:	90                   	nop
   1c5e9:	5d                   	pop    %rbp
   1c5ea:	c3                   	ret
   1c5eb:	90                   	nop

000000000001c5ec <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr()
   1c5ec:	55                   	push   %rbp
   1c5ed:	48 89 e5             	mov    %rsp,%rbp
   1c5f0:	48 83 ec 10          	sub    $0x10,%rsp
   1c5f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1c5f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c5fc:	48 83 c0 20          	add    $0x20,%rax
   1c600:	48 89 c7             	mov    %rax,%rdi
   1c603:	e8 c0 12 00 00       	call   1d8c8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1c608:	c9                   	leave
   1c609:	c3                   	ret

000000000001c60a <_ZStssIcSt11char_traitsIcESaIcEEDTcl21__char_traits_cmp_catIT0_ELi0EEERKNSt7__cxx1112basic_stringIT_S3_T1_EESB_>:
   *  @return  A value indicating whether `__lhs` is less than, equal to,
   *	       greater than, or incomparable with `__rhs`.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    constexpr auto
    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   1c60a:	55                   	push   %rbp
   1c60b:	48 89 e5             	mov    %rsp,%rbp
   1c60e:	48 83 ec 10          	sub    $0x10,%rsp
   1c612:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c616:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
		const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
    -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))
    { return __detail::__char_traits_cmp_cat<_Traits>(__lhs.compare(__rhs)); }
   1c61a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c61e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c622:	48 89 d6             	mov    %rdx,%rsi
   1c625:	48 89 c7             	mov    %rax,%rdi
   1c628:	e8 b5 12 00 00       	call   1d8e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
   1c62d:	89 c7                	mov    %eax,%edi
   1c62f:	e8 a5 ed ff ff       	call   1b3d9 <_ZNSt8__detail21__char_traits_cmp_catISt11char_traitsIcEEEDai>
   1c634:	c9                   	leave
   1c635:	c3                   	ret

000000000001c636 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c636:	55                   	push   %rbp
   1c637:	48 89 e5             	mov    %rsp,%rbp
   1c63a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c63e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c642:	5d                   	pop    %rbp
   1c643:	c3                   	ret

000000000001c644 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IJS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
   1c644:	55                   	push   %rbp
   1c645:	48 89 e5             	mov    %rsp,%rbp
   1c648:	53                   	push   %rbx
   1c649:	48 83 ec 18          	sub    $0x18,%rsp
   1c64d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c651:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) { }
   1c655:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1c659:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c65d:	48 89 c7             	mov    %rax,%rdi
   1c660:	e8 d1 ff ff ff       	call   1c636 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1c665:	48 89 c6             	mov    %rax,%rsi
   1c668:	48 89 df             	mov    %rbx,%rdi
   1c66b:	e8 16 13 00 00       	call   1d986 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>
   1c670:	90                   	nop
   1c671:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1c675:	c9                   	leave
   1c676:	c3                   	ret

000000000001c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c677:	55                   	push   %rbp
   1c678:	48 89 e5             	mov    %rsp,%rbp
   1c67b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c67f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c683:	5d                   	pop    %rbp
   1c684:	c3                   	ret

000000000001c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c685:	55                   	push   %rbp
   1c686:	48 89 e5             	mov    %rsp,%rbp
   1c689:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c68d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c691:	5d                   	pop    %rbp
   1c692:	c3                   	ret

000000000001c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1c693:	55                   	push   %rbp
   1c694:	48 89 e5             	mov    %rsp,%rbp
   1c697:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1c69b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c69f:	5d                   	pop    %rbp
   1c6a0:	c3                   	ret
   1c6a1:	90                   	nop

000000000001c6a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS5_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
   1c6a2:	55                   	push   %rbp
   1c6a3:	48 89 e5             	mov    %rsp,%rbp
   1c6a6:	41 54                	push   %r12
   1c6a8:	53                   	push   %rbx
   1c6a9:	48 83 ec 30          	sub    $0x30,%rsp
   1c6ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c6b1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1c6b5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1c6b9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1c6bd:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  : _M_t(__t),
   1c6c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1c6c5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1c6c9:	48 89 10             	mov    %rdx,(%rax)
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   1c6cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1c6d0:	48 89 c7             	mov    %rax,%rdi
   1c6d3:	e8 bb ff ff ff       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1c6d8:	49 89 c4             	mov    %rax,%r12
   1c6db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1c6df:	48 89 c7             	mov    %rax,%rdi
   1c6e2:	e8 9e ff ff ff       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1c6e7:	48 89 c3             	mov    %rax,%rbx
   1c6ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1c6ee:	48 89 c7             	mov    %rax,%rdi
   1c6f1:	e8 81 ff ff ff       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1c6f6:	48 89 c6             	mov    %rax,%rsi
   1c6f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1c6fd:	4c 89 e1             	mov    %r12,%rcx
   1c700:	48 89 da             	mov    %rbx,%rdx
   1c703:	48 89 c7             	mov    %rax,%rdi
   1c706:	e8 af 12 00 00       	call   1d9ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
   1c70b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c70f:	48 89 42 08          	mov    %rax,0x8(%rdx)
	  { }
   1c713:	90                   	nop
   1c714:	48 83 c4 30          	add    $0x30,%rsp
   1c718:	5b                   	pop    %rbx
   1c719:	41 5c                	pop    %r12
   1c71b:	5d                   	pop    %rbp
   1c71c:	c3                   	ret
   1c71d:	90                   	nop

000000000001c71e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
   1c71e:	55                   	push   %rbp
   1c71f:	48 89 e5             	mov    %rsp,%rbp
   1c722:	48 83 ec 10          	sub    $0x10,%rsp
   1c726:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  if (_M_node)
   1c72a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c72e:	48 8b 40 08          	mov    0x8(%rax),%rax
   1c732:	48 85 c0             	test   %rax,%rax
   1c735:	74 1a                	je     1c751 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_nodeD1Ev+0x33>
	    _M_t._M_drop_node(_M_node);
   1c737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c73b:	48 8b 00             	mov    (%rax),%rax
   1c73e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c742:	48 8b 52 08          	mov    0x8(%rdx),%rdx
   1c746:	48 89 d6             	mov    %rdx,%rsi
   1c749:	48 89 c7             	mov    %rax,%rdi
   1c74c:	e8 cd fd ff ff       	call   1c51e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
   1c751:	90                   	nop
   1c752:	c9                   	leave
   1c753:	c3                   	ret

000000000001c754 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1c754:	55                   	push   %rbp
   1c755:	48 89 e5             	mov    %rsp,%rbp
   1c758:	53                   	push   %rbx
   1c759:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
   1c760:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
   1c767:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
   1c76e:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
      iterator __pos = __position._M_const_cast();
   1c775:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
   1c77c:	48 89 c7             	mov    %rax,%rdi
   1c77f:	e8 b2 12 00 00       	call   1da36 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>
   1c784:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
      if (__pos._M_node == _M_end())
   1c78b:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1c792:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c799:	48 89 c7             	mov    %rax,%rdi
   1c79c:	e8 7f 10 00 00       	call   1d820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1c7a1:	48 39 c3             	cmp    %rax,%rbx
   1c7a4:	0f 94 c0             	sete   %al
   1c7a7:	84 c0                	test   %al,%al
   1c7a9:	0f 84 c8 00 00 00    	je     1c877 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x123>
	  if (size() > 0
   1c7af:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c7b6:	48 89 c7             	mov    %rax,%rdi
   1c7b9:	e8 a0 12 00 00       	call   1da5e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1c7be:	48 85 c0             	test   %rax,%rax
   1c7c1:	74 44                	je     1c807 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1c7c3:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1c7ca:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c7d1:	48 89 c7             	mov    %rax,%rdi
   1c7d4:	e8 97 12 00 00       	call   1da70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1c7d9:	48 8b 00             	mov    (%rax),%rax
   1c7dc:	48 89 c7             	mov    %rax,%rdi
   1c7df:	e8 9e 12 00 00       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c7e4:	48 89 c1             	mov    %rax,%rcx
   1c7e7:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1c7ee:	48 89 c2             	mov    %rax,%rdx
   1c7f1:	48 89 ce             	mov    %rcx,%rsi
   1c7f4:	48 89 df             	mov    %rbx,%rdi
   1c7f7:	e8 04 ec ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c7fc:	84 c0                	test   %al,%al
   1c7fe:	74 07                	je     1c807 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb3>
   1c800:	b8 01 00 00 00       	mov    $0x1,%eax
   1c805:	eb 05                	jmp    1c80c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xb8>
   1c807:	b8 00 00 00 00       	mov    $0x0,%eax
	  if (size() > 0
   1c80c:	84 c0                	test   %al,%al
   1c80e:	74 49                	je     1c859 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x105>
	    return _Res(0, _M_rightmost());
   1c810:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c817:	48 89 c7             	mov    %rax,%rdi
   1c81a:	e8 51 12 00 00       	call   1da70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1c81f:	48 89 c2             	mov    %rax,%rdx
   1c822:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
   1c829:	00 00 00 00 
   1c82d:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
   1c834:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   1c83b:	48 89 ce             	mov    %rcx,%rsi
   1c83e:	48 89 c7             	mov    %rax,%rdi
   1c841:	e8 56 12 00 00       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1c846:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   1c84d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
   1c854:	e9 43 03 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1c859:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1c860:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c867:	48 89 d6             	mov    %rdx,%rsi
   1c86a:	48 89 c7             	mov    %rax,%rdi
   1c86d:	e8 5a 12 00 00       	call   1dacc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1c872:	e9 25 03 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1c877:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1c87e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1c885:	48 89 c7             	mov    %rax,%rdi
   1c888:	e8 f5 11 00 00       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c88d:	48 89 c2             	mov    %rax,%rdx
   1c890:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1c897:	48 89 c6             	mov    %rax,%rsi
   1c89a:	48 89 df             	mov    %rbx,%rdi
   1c89d:	e8 5e eb ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c8a2:	84 c0                	test   %al,%al
   1c8a4:	0f 84 66 01 00 00    	je     1ca10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x2bc>
	  iterator __before = __pos;
   1c8aa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1c8b1:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
	  if (__pos._M_node == _M_leftmost()) // begin()
   1c8b8:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1c8bf:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c8c6:	48 89 c7             	mov    %rax,%rdi
   1c8c9:	e8 74 13 00 00       	call   1dc42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1c8ce:	48 8b 00             	mov    (%rax),%rax
   1c8d1:	48 39 c3             	cmp    %rax,%rbx
   1c8d4:	0f 94 c0             	sete   %al
   1c8d7:	84 c0                	test   %al,%al
   1c8d9:	74 4c                	je     1c927 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x1d3>
	    return _Res(_M_leftmost(), _M_leftmost());
   1c8db:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c8e2:	48 89 c7             	mov    %rax,%rdi
   1c8e5:	e8 58 13 00 00       	call   1dc42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1c8ea:	48 89 c3             	mov    %rax,%rbx
   1c8ed:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1c8f4:	48 89 c7             	mov    %rax,%rdi
   1c8f7:	e8 46 13 00 00       	call   1dc42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>
   1c8fc:	48 89 c1             	mov    %rax,%rcx
   1c8ff:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1c906:	48 89 da             	mov    %rbx,%rdx
   1c909:	48 89 ce             	mov    %rcx,%rsi
   1c90c:	48 89 c7             	mov    %rax,%rdi
   1c90f:	e8 40 13 00 00       	call   1dc54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1c914:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1c91b:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
   1c922:	e9 75 02 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1c927:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1c92e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
   1c935:	48 89 c7             	mov    %rax,%rdi
   1c938:	e8 5b 13 00 00       	call   1dc98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
   1c93d:	48 8b 00             	mov    (%rax),%rax
   1c940:	48 89 c7             	mov    %rax,%rdi
   1c943:	e8 3a 11 00 00       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1c948:	48 89 c1             	mov    %rax,%rcx
   1c94b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1c952:	48 89 c2             	mov    %rax,%rdx
   1c955:	48 89 ce             	mov    %rcx,%rsi
   1c958:	48 89 df             	mov    %rbx,%rdi
   1c95b:	e8 a0 ea ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1c960:	84 c0                	test   %al,%al
   1c962:	0f 84 8a 00 00 00    	je     1c9f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x29e>
	      if (_S_right(__before._M_node) == 0)
   1c968:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   1c96f:	48 89 c7             	mov    %rax,%rdi
   1c972:	e8 82 fb ff ff       	call   1c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1c977:	48 85 c0             	test   %rax,%rax
   1c97a:	0f 94 c0             	sete   %al
   1c97d:	84 c0                	test   %al,%al
   1c97f:	74 3e                	je     1c9bf <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x26b>
		return _Res(0, __before._M_node);
   1c981:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1c988:	00 00 00 00 
   1c98c:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
   1c993:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
   1c99a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1c9a1:	48 89 ce             	mov    %rcx,%rsi
   1c9a4:	48 89 c7             	mov    %rax,%rdi
   1c9a7:	e8 f0 10 00 00       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1c9ac:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
   1c9b3:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
   1c9ba:	e9 dd 01 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__pos._M_node, __pos._M_node);
   1c9bf:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1c9c6:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1c9cd:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   1c9d4:	48 89 ce             	mov    %rcx,%rsi
   1c9d7:	48 89 c7             	mov    %rax,%rdi
   1c9da:	e8 75 12 00 00       	call   1dc54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1c9df:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1c9e6:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   1c9ed:	e9 aa 01 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1c9f2:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1c9f9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ca00:	48 89 d6             	mov    %rdx,%rsi
   1ca03:	48 89 c7             	mov    %rax,%rdi
   1ca06:	e8 c1 10 00 00       	call   1dacc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1ca0b:	e9 8c 01 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1ca10:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1ca17:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1ca1e:	48 89 c7             	mov    %rax,%rdi
   1ca21:	e8 5c 10 00 00       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1ca26:	48 89 c1             	mov    %rax,%rcx
   1ca29:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1ca30:	48 89 c2             	mov    %rax,%rdx
   1ca33:	48 89 ce             	mov    %rcx,%rsi
   1ca36:	48 89 df             	mov    %rbx,%rdi
   1ca39:	e8 c2 e9 ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1ca3e:	84 c0                	test   %al,%al
   1ca40:	0f 84 2c 01 00 00    	je     1cb72 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x41e>
	  iterator __after = __pos;
   1ca46:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1ca4d:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	  if (__pos._M_node == _M_rightmost())
   1ca54:	48 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%rbx
   1ca5b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ca62:	48 89 c7             	mov    %rax,%rdi
   1ca65:	e8 06 10 00 00       	call   1da70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1ca6a:	48 8b 00             	mov    (%rax),%rax
   1ca6d:	48 39 c3             	cmp    %rax,%rbx
   1ca70:	0f 94 c0             	sete   %al
   1ca73:	84 c0                	test   %al,%al
   1ca75:	74 3a                	je     1cab1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x35d>
	    return _Res(0, _M_rightmost());
   1ca77:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1ca7e:	48 89 c7             	mov    %rax,%rdi
   1ca81:	e8 ea 0f 00 00       	call   1da70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>
   1ca86:	48 89 c2             	mov    %rax,%rdx
   1ca89:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   1ca90:	00 
   1ca91:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
   1ca95:	48 8d 45 80          	lea    -0x80(%rbp),%rax
   1ca99:	48 89 ce             	mov    %rcx,%rsi
   1ca9c:	48 89 c7             	mov    %rax,%rdi
   1ca9f:	e8 f8 0f 00 00       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1caa4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1caa8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1caac:	e9 eb 00 00 00       	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1cab1:	48 8b 9d f8 fe ff ff 	mov    -0x108(%rbp),%rbx
   1cab8:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
   1cabf:	48 89 c7             	mov    %rax,%rdi
   1cac2:	e8 f9 11 00 00       	call   1dcc0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>
   1cac7:	48 8b 00             	mov    (%rax),%rax
   1caca:	48 89 c7             	mov    %rax,%rdi
   1cacd:	e8 b0 0f 00 00       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1cad2:	48 89 c2             	mov    %rax,%rdx
   1cad5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   1cadc:	48 89 c6             	mov    %rax,%rsi
   1cadf:	48 89 df             	mov    %rbx,%rdi
   1cae2:	e8 19 e9 ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1cae7:	84 c0                	test   %al,%al
   1cae9:	74 6c                	je     1cb57 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x403>
	      if (_S_right(__pos._M_node) == 0)
   1caeb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   1caf2:	48 89 c7             	mov    %rax,%rdi
   1caf5:	e8 ff f9 ff ff       	call   1c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1cafa:	48 85 c0             	test   %rax,%rax
   1cafd:	0f 94 c0             	sete   %al
   1cb00:	84 c0                	test   %al,%al
   1cb02:	74 2c                	je     1cb30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x3dc>
		return _Res(0, __pos._M_node);
   1cb04:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1cb0b:	00 
   1cb0c:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
   1cb13:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
   1cb17:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1cb1b:	48 89 ce             	mov    %rcx,%rsi
   1cb1e:	48 89 c7             	mov    %rax,%rdi
   1cb21:	e8 76 0f 00 00       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1cb26:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1cb2a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1cb2e:	eb 6c                	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
		return _Res(__after._M_node, __after._M_node);
   1cb30:	48 8d 95 08 ff ff ff 	lea    -0xf8(%rbp),%rdx
   1cb37:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
   1cb3e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1cb42:	48 89 ce             	mov    %rcx,%rsi
   1cb45:	48 89 c7             	mov    %rax,%rdi
   1cb48:	e8 07 11 00 00       	call   1dc54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>
   1cb4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1cb51:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1cb55:	eb 45                	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	    return _M_get_insert_unique_pos(__k);
   1cb57:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
   1cb5e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   1cb65:	48 89 d6             	mov    %rdx,%rsi
   1cb68:	48 89 c7             	mov    %rax,%rdi
   1cb6b:	e8 5c 0f 00 00       	call   1dacc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
   1cb70:	eb 2a                	jmp    1cb9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x448>
	return _Res(__pos._M_node, 0);
   1cb72:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1cb79:	00 
   1cb7a:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1cb7e:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
   1cb85:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1cb89:	48 89 ce             	mov    %rcx,%rsi
   1cb8c:	48 89 c7             	mov    %rax,%rdi
   1cb8f:	e8 08 0f 00 00       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1cb94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1cb98:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1cb9c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cba0:	c9                   	leave
   1cba1:	c3                   	ret

000000000001cba2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
   1cba2:	55                   	push   %rbp
   1cba3:	48 89 e5             	mov    %rsp,%rbp
   1cba6:	48 83 ec 10          	sub    $0x10,%rsp
   1cbaa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return _S_key(_M_node); }
   1cbae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cbb2:	48 8b 40 08          	mov    0x8(%rax),%rax
   1cbb6:	48 89 c7             	mov    %rax,%rdi
   1cbb9:	e8 2a 11 00 00       	call   1dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1cbbe:	c9                   	leave
   1cbbf:	c3                   	ret

000000000001cbc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_Auto_node9_M_insertES6_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
   1cbc0:	55                   	push   %rbp
   1cbc1:	48 89 e5             	mov    %rsp,%rbp
   1cbc4:	48 83 ec 30          	sub    $0x30,%rsp
   1cbc8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cbcc:	48 89 d1             	mov    %rdx,%rcx
   1cbcf:	48 89 f0             	mov    %rsi,%rax
   1cbd2:	48 89 fa             	mov    %rdi,%rdx
   1cbd5:	48 89 ca             	mov    %rcx,%rdx
   1cbd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1cbdc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   1cbe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cbe4:	48 8b 00             	mov    (%rax),%rax
   1cbe7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1cbeb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
   1cbef:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1cbf3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1cbf7:	48 89 c7             	mov    %rax,%rdi
   1cbfa:	e8 15 11 00 00       	call   1dd14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
   1cbff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_node = nullptr;
   1cc03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cc07:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
   1cc0e:	00 
	  return __it;
   1cc0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1cc13:	c9                   	leave
   1cc14:	c3                   	ret
   1cc15:	90                   	nop

000000000001cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1cc16:	55                   	push   %rbp
   1cc17:	48 89 e5             	mov    %rsp,%rbp
   1cc1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cc1e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
   1cc22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc26:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cc2a:	48 89 10             	mov    %rdx,(%rax)
   1cc2d:	90                   	nop
   1cc2e:	5d                   	pop    %rbp
   1cc2f:	c3                   	ret

000000000001cc30 <_ZNSt22_Optional_payload_baseIjEC1IJjEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
   1cc30:	55                   	push   %rbp
   1cc31:	48 89 e5             	mov    %rsp,%rbp
   1cc34:	53                   	push   %rbx
   1cc35:	48 83 ec 28          	sub    $0x28,%rsp
   1cc39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cc3d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
   1cc41:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1cc45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cc49:	48 89 c7             	mov    %rax,%rdi
   1cc4c:	e8 0d e3 ff ff       	call   1af5e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1cc51:	48 89 c6             	mov    %rax,%rsi
   1cc54:	48 89 df             	mov    %rbx,%rdi
   1cc57:	e8 7c 11 00 00       	call   1ddd8 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>
	  _M_engaged(true)
   1cc5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cc60:	c6 40 04 01          	movb   $0x1,0x4(%rax)
	{ }
   1cc64:	90                   	nop
   1cc65:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cc69:	c9                   	leave
   1cc6a:	c3                   	ret

000000000001cc6b <_ZSt3getILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
   1cc6b:	55                   	push   %rbp
   1cc6c:	48 89 e5             	mov    %rsp,%rbp
   1cc6f:	48 83 ec 10          	sub    $0x10,%rsp
   1cc73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   1cc77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc7b:	48 89 c7             	mov    %rax,%rdi
   1cc7e:	e8 7c 11 00 00       	call   1ddff <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
   1cc83:	c9                   	leave
   1cc84:	c3                   	ret
   1cc85:	90                   	nop

000000000001cc86 <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii18InstanceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   1cc86:	55                   	push   %rbp
   1cc87:	48 89 e5             	mov    %rsp,%rbp
   1cc8a:	48 83 ec 10          	sub    $0x10,%rsp
   1cc8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   1cc92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc96:	48 89 c7             	mov    %rax,%rdi
   1cc99:	e8 7c 11 00 00       	call   1de1a <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>
   1cc9e:	90                   	nop
   1cc9f:	c9                   	leave
   1cca0:	c3                   	ret
   1cca1:	90                   	nop

000000000001cca2 <_ZNSt10_Head_baseILm0EPN2vk4raii18InstanceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   1cca2:	55                   	push   %rbp
   1cca3:	48 89 e5             	mov    %rsp,%rbp
   1cca6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1ccaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1ccb5:	90                   	nop
   1ccb6:	5d                   	pop    %rbp
   1ccb7:	c3                   	ret

000000000001ccb8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1ccb8:	55                   	push   %rbp
   1ccb9:	48 89 e5             	mov    %rsp,%rbp
   1ccbc:	48 83 ec 10          	sub    $0x10,%rsp
   1ccc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ccc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1ccc8:	eb 19                	jmp    1cce3 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1ccca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ccce:	48 89 c7             	mov    %rax,%rdi
   1ccd1:	e8 80 11 00 00       	call   1de56 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1ccd6:	48 89 c7             	mov    %rax,%rdi
   1ccd9:	e8 86 11 00 00       	call   1de64 <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>
	  for (; __first != __last; ++__first)
   1ccde:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
   1cce3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cce7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cceb:	75 dd                	jne    1ccca <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk4raii14PhysicalDeviceEEEvT_S6_+0x12>
	}
   1cced:	90                   	nop
   1ccee:	90                   	nop
   1ccef:	c9                   	leave
   1ccf0:	c3                   	ret

000000000001ccf1 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1ccf1:	55                   	push   %rbp
   1ccf2:	48 89 e5             	mov    %rsp,%rbp
   1ccf5:	48 83 ec 10          	sub    $0x10,%rsp
   1ccf9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ccfd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1cd01:	eb 19                	jmp    1cd1c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1cd03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd07:	48 89 c7             	mov    %rax,%rdi
   1cd0a:	e8 a2 11 00 00       	call   1deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1cd0f:	48 89 c7             	mov    %rax,%rdi
   1cd12:	e8 a8 11 00 00       	call   1debf <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>
	  for (; __first != __last; ++__first)
   1cd17:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
   1cd1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd20:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cd24:	75 dd                	jne    1cd03 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_+0x12>
	}
   1cd26:	90                   	nop
   1cd27:	90                   	nop
   1cd28:	c9                   	leave
   1cd29:	c3                   	ret

000000000001cd2a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP18VkPhysicalDevice_TEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1cd2a:	55                   	push   %rbp
   1cd2b:	48 89 e5             	mov    %rsp,%rbp
   1cd2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cd32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cd36:	90                   	nop
   1cd37:	5d                   	pop    %rbp
   1cd38:	c3                   	ret

000000000001cd39 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1cd39:	55                   	push   %rbp
   1cd3a:	48 89 e5             	mov    %rsp,%rbp
   1cd3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1cd41:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1cd48:	ff ff 1f 
      }
   1cd4b:	5d                   	pop    %rbp
   1cd4c:	c3                   	ret

000000000001cd4d <_ZNSt6vectorIP18VkPhysicalDevice_TSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cd4d:	55                   	push   %rbp
   1cd4e:	48 89 e5             	mov    %rsp,%rbp
   1cd51:	48 83 ec 20          	sub    $0x20,%rsp
   1cd55:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cd59:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1cd60:	ff ff 0f 
   1cd63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cd67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cd6b:	48 89 c7             	mov    %rax,%rdi
   1cd6e:	e8 c6 ff ff ff       	call   1cd39 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8max_sizeERKS2_>
   1cd73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1cd77:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1cd7b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1cd7f:	48 89 d6             	mov    %rdx,%rsi
   1cd82:	48 89 c7             	mov    %rax,%rdi
   1cd85:	e8 aa ae ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1cd8a:	48 8b 00             	mov    (%rax),%rax
      }
   1cd8d:	c9                   	leave
   1cd8e:	c3                   	ret
   1cd8f:	90                   	nop

000000000001cd90 <_ZNKSt12_Vector_baseIP18VkPhysicalDevice_TSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1cd90:	55                   	push   %rbp
   1cd91:	48 89 e5             	mov    %rsp,%rbp
   1cd94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1cd98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cd9c:	5d                   	pop    %rbp
   1cd9d:	c3                   	ret

000000000001cd9e <_ZSt25__uninitialized_default_nIPP18VkPhysicalDevice_TmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1cd9e:	55                   	push   %rbp
   1cd9f:	48 89 e5             	mov    %rsp,%rbp
   1cda2:	48 83 ec 20          	sub    $0x20,%rsp
   1cda6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cdaa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1cdae:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1cdb2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1cdb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cdba:	48 89 d6             	mov    %rdx,%rsi
   1cdbd:	48 89 c7             	mov    %rax,%rdi
   1cdc0:	e8 15 11 00 00       	call   1deda <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>
    }
   1cdc5:	c9                   	leave
   1cdc6:	c3                   	ret

000000000001cdc7 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1cdc7:	55                   	push   %rbp
   1cdc8:	48 89 e5             	mov    %rsp,%rbp
   1cdcb:	48 83 ec 20          	sub    $0x20,%rsp
   1cdcf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1cdd3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1cdd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cddb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cddf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1cde3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1cde7:	e8 b2 93 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1cdec:	84 c0                	test   %al,%al
   1cdee:	74 43                	je     1ce33 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x6c>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1cdf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cdf4:	b9 00 00 00 00       	mov    $0x0,%ecx
   1cdf9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1ce00:	00 
   1ce01:	48 c1 e8 3d          	shr    $0x3d,%rax
   1ce05:	48 85 c0             	test   %rax,%rax
   1ce08:	74 05                	je     1ce0f <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x48>
   1ce0a:	b9 01 00 00 00       	mov    $0x1,%ecx
   1ce0f:	48 89 d0             	mov    %rdx,%rax
   1ce12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1ce16:	48 89 c8             	mov    %rcx,%rax
   1ce19:	83 e0 01             	and    $0x1,%eax
   1ce1c:	84 c0                	test   %al,%al
   1ce1e:	74 05                	je     1ce25 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x5e>
	      std::__throw_bad_array_new_length();
   1ce20:	e8 5b 83 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1ce25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ce29:	48 89 c7             	mov    %rax,%rdi
   1ce2c:	e8 ef 83 fe ff       	call   5220 <_Znwm@plt>
   1ce31:	eb 19                	jmp    1ce4c <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE8allocateERS2_m+0x85>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1ce33:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1ce37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce3b:	ba 00 00 00 00       	mov    $0x0,%edx
   1ce40:	48 89 ce             	mov    %rcx,%rsi
   1ce43:	48 89 c7             	mov    %rax,%rdi
   1ce46:	e8 91 1c 00 00       	call   1eadc <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>
   1ce4b:	90                   	nop
      { return __a.allocate(__n); }
   1ce4c:	c9                   	leave
   1ce4d:	c3                   	ret

000000000001ce4e <_ZSt12__relocate_aIPP18VkPhysicalDevice_TS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1ce4e:	55                   	push   %rbp
   1ce4f:	48 89 e5             	mov    %rsp,%rbp
   1ce52:	41 54                	push   %r12
   1ce54:	53                   	push   %rbx
   1ce55:	48 83 ec 20          	sub    $0x20,%rsp
   1ce59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ce5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ce61:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1ce65:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1ce69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ce6d:	48 89 c7             	mov    %rax,%rdi
   1ce70:	e8 c2 10 00 00       	call   1df37 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1ce75:	49 89 c4             	mov    %rax,%r12
   1ce78:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ce7c:	48 89 c7             	mov    %rax,%rdi
   1ce7f:	e8 b3 10 00 00       	call   1df37 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1ce84:	48 89 c3             	mov    %rax,%rbx
   1ce87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ce8b:	48 89 c7             	mov    %rax,%rdi
   1ce8e:	e8 a4 10 00 00       	call   1df37 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>
   1ce93:	48 89 c7             	mov    %rax,%rdi
   1ce96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1ce9a:	48 89 c1             	mov    %rax,%rcx
   1ce9d:	4c 89 e2             	mov    %r12,%rdx
   1cea0:	48 89 de             	mov    %rbx,%rsi
   1cea3:	e8 bb 10 00 00       	call   1df63 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1cea8:	48 83 c4 20          	add    $0x20,%rsp
   1ceac:	5b                   	pop    %rbx
   1cead:	41 5c                	pop    %r12
   1ceaf:	5d                   	pop    %rbp
   1ceb0:	c3                   	ret

000000000001ceb1 <_ZSt12__niter_baseIPN2vk4raii14PhysicalDeviceEET_S4_>:
    __niter_base(_Iterator __it)
   1ceb1:	55                   	push   %rbp
   1ceb2:	48 89 e5             	mov    %rsp,%rbp
   1ceb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1ceb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cebd:	5d                   	pop    %rbp
   1cebe:	c3                   	ret

000000000001cebf <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1cebf:	55                   	push   %rbp
   1cec0:	48 89 e5             	mov    %rsp,%rbp
   1cec3:	53                   	push   %rbx
   1cec4:	48 83 ec 38          	sub    $0x38,%rsp
   1cec8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1cecc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1ced0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1ced4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1ced8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1cedc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1cee0:	eb 3a                	jmp    1cf1c <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1cee2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cee6:	48 89 c7             	mov    %rax,%rdi
   1cee9:	e8 68 0f 00 00       	call   1de56 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1ceee:	48 89 c3             	mov    %rax,%rbx
   1cef1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cef5:	48 89 c7             	mov    %rax,%rdi
   1cef8:	e8 59 0f 00 00       	call   1de56 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1cefd:	48 89 c1             	mov    %rax,%rcx
   1cf00:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1cf04:	48 89 c2             	mov    %rax,%rdx
   1cf07:	48 89 de             	mov    %rbx,%rsi
   1cf0a:	48 89 cf             	mov    %rcx,%rdi
   1cf0d:	e8 5b 11 00 00       	call   1e06d <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1cf12:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
   1cf17:	48 83 45 e8 10       	addq   $0x10,-0x18(%rbp)
   1cf1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1cf20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1cf24:	75 bc                	jne    1cee2 <_ZSt14__relocate_a_1IPN2vk4raii14PhysicalDeviceES3_SaIS2_EET0_T_S6_S5_RT1_+0x23>
      return __cur;
   1cf26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1cf2a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1cf2e:	c9                   	leave
   1cf2f:	c3                   	ret

000000000001cf30 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>:
    destroy_at(_Tp* __location)
   1cf30:	55                   	push   %rbp
   1cf31:	48 89 e5             	mov    %rsp,%rbp
   1cf34:	48 83 ec 10          	sub    $0x10,%rsp
   1cf38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1cf3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf40:	48 89 c7             	mov    %rax,%rdi
   1cf43:	e8 28 c5 fe ff       	call   9470 <_ZN2vk4raii14PhysicalDeviceD1Ev>
    }
   1cf48:	90                   	nop
   1cf49:	c9                   	leave
   1cf4a:	c3                   	ret
   1cf4b:	90                   	nop

000000000001cf4c <_ZNSt11_Tuple_implILm1EJSt14default_deleteIN2vk4raii16DeviceDispatcherEEEEC1Ev>:
      _Tuple_impl()
   1cf4c:	55                   	push   %rbp
   1cf4d:	48 89 e5             	mov    %rsp,%rbp
   1cf50:	48 83 ec 10          	sub    $0x10,%rsp
   1cf54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
   1cf58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf5c:	48 89 c7             	mov    %rax,%rdi
   1cf5f:	e8 60 11 00 00       	call   1e0c4 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>
   1cf64:	90                   	nop
   1cf65:	c9                   	leave
   1cf66:	c3                   	ret
   1cf67:	90                   	nop

000000000001cf68 <_ZNSt10_Head_baseILm0EPN2vk4raii16DeviceDispatcherELb0EEC1Ev>:
      constexpr _Head_base()
   1cf68:	55                   	push   %rbp
   1cf69:	48 89 e5             	mov    %rsp,%rbp
   1cf6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1cf70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf74:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1cf7b:	90                   	nop
   1cf7c:	5d                   	pop    %rbp
   1cf7d:	c3                   	ret

000000000001cf7e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1cf7e:	55                   	push   %rbp
   1cf7f:	48 89 e5             	mov    %rsp,%rbp
   1cf82:	48 83 ec 10          	sub    $0x10,%rsp
   1cf86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cf8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1cf8e:	eb 19                	jmp    1cfa9 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x2b>
	    std::_Destroy(std::__addressof(*__first));
   1cf90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf94:	48 89 c7             	mov    %rax,%rdi
   1cf97:	e8 6d 11 00 00       	call   1e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1cf9c:	48 89 c7             	mov    %rax,%rdi
   1cf9f:	e8 73 11 00 00       	call   1e117 <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1cfa4:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1cfa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfad:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1cfb1:	75 dd                	jne    1cf90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_+0x12>
	}
   1cfb3:	90                   	nop
   1cfb4:	90                   	nop
   1cfb5:	c9                   	leave
   1cfb6:	c3                   	ret

000000000001cfb7 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk21QueueFamilyPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1cfb7:	55                   	push   %rbp
   1cfb8:	48 89 e5             	mov    %rsp,%rbp
   1cfbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1cfbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1cfc3:	90                   	nop
   1cfc4:	5d                   	pop    %rbp
   1cfc5:	c3                   	ret

000000000001cfc6 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1cfc6:	55                   	push   %rbp
   1cfc7:	48 89 e5             	mov    %rsp,%rbp
   1cfca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1cfce:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1cfd5:	aa aa 0a 
      }
   1cfd8:	5d                   	pop    %rbp
   1cfd9:	c3                   	ret

000000000001cfda <_ZNSt6vectorIN2vk21QueueFamilyPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1cfda:	55                   	push   %rbp
   1cfdb:	48 89 e5             	mov    %rsp,%rbp
   1cfde:	48 83 ec 20          	sub    $0x20,%rsp
   1cfe2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1cfe6:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1cfed:	55 55 05 
   1cff0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1cff4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1cff8:	48 89 c7             	mov    %rax,%rdi
   1cffb:	e8 c6 ff ff ff       	call   1cfc6 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8max_sizeERKS2_>
   1d000:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d004:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d008:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d00c:	48 89 d6             	mov    %rdx,%rsi
   1d00f:	48 89 c7             	mov    %rax,%rdi
   1d012:	e8 1d ac ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1d017:	48 8b 00             	mov    (%rax),%rax
      }
   1d01a:	c9                   	leave
   1d01b:	c3                   	ret

000000000001d01c <_ZNKSt12_Vector_baseIN2vk21QueueFamilyPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d01c:	55                   	push   %rbp
   1d01d:	48 89 e5             	mov    %rsp,%rbp
   1d020:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d028:	5d                   	pop    %rbp
   1d029:	c3                   	ret

000000000001d02a <_ZSt25__uninitialized_default_nIPN2vk21QueueFamilyPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d02a:	55                   	push   %rbp
   1d02b:	48 89 e5             	mov    %rsp,%rbp
   1d02e:	48 83 ec 20          	sub    $0x20,%rsp
   1d032:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d036:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d03a:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d03e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d042:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d046:	48 89 d6             	mov    %rdx,%rsi
   1d049:	48 89 c7             	mov    %rax,%rdi
   1d04c:	e8 e1 10 00 00       	call   1e132 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>
    }
   1d051:	c9                   	leave
   1d052:	c3                   	ret

000000000001d053 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d053:	55                   	push   %rbp
   1d054:	48 89 e5             	mov    %rsp,%rbp
   1d057:	48 83 ec 20          	sub    $0x20,%rsp
   1d05b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d05f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d067:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d06b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d06f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1d073:	e8 26 91 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1d078:	84 c0                	test   %al,%al
   1d07a:	74 39                	je     1d0b5 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1d07c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d080:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d085:	ba 18 00 00 00       	mov    $0x18,%edx
   1d08a:	48 f7 e2             	mul    %rdx
   1d08d:	71 05                	jno    1d094 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x41>
   1d08f:	b9 01 00 00 00       	mov    $0x1,%ecx
   1d094:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d098:	48 89 c8             	mov    %rcx,%rax
   1d09b:	83 e0 01             	and    $0x1,%eax
   1d09e:	84 c0                	test   %al,%al
   1d0a0:	74 05                	je     1d0a7 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1d0a2:	e8 d9 80 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1d0a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d0ab:	48 89 c7             	mov    %rax,%rdi
   1d0ae:	e8 6d 81 fe ff       	call   5220 <_Znwm@plt>
   1d0b3:	eb 19                	jmp    1d0ce <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1d0b5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d0b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d0bd:	ba 00 00 00 00       	mov    $0x0,%edx
   1d0c2:	48 89 ce             	mov    %rcx,%rsi
   1d0c5:	48 89 c7             	mov    %rax,%rdi
   1d0c8:	e8 1b 1c 00 00       	call   1ece8 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>
   1d0cd:	90                   	nop
      { return __a.allocate(__n); }
   1d0ce:	c9                   	leave
   1d0cf:	c3                   	ret

000000000001d0d0 <_ZSt12__relocate_aIPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d0d0:	55                   	push   %rbp
   1d0d1:	48 89 e5             	mov    %rsp,%rbp
   1d0d4:	41 54                	push   %r12
   1d0d6:	53                   	push   %rbx
   1d0d7:	48 83 ec 20          	sub    $0x20,%rsp
   1d0db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d0df:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d0e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d0e7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d0eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d0ef:	48 89 c7             	mov    %rax,%rdi
   1d0f2:	e8 80 10 00 00       	call   1e177 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1d0f7:	49 89 c4             	mov    %rax,%r12
   1d0fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d0fe:	48 89 c7             	mov    %rax,%rdi
   1d101:	e8 71 10 00 00       	call   1e177 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1d106:	48 89 c3             	mov    %rax,%rbx
   1d109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d10d:	48 89 c7             	mov    %rax,%rdi
   1d110:	e8 62 10 00 00       	call   1e177 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>
   1d115:	48 89 c7             	mov    %rax,%rdi
   1d118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d11c:	48 89 c1             	mov    %rax,%rcx
   1d11f:	4c 89 e2             	mov    %r12,%rdx
   1d122:	48 89 de             	mov    %rbx,%rsi
   1d125:	e8 5b 10 00 00       	call   1e185 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1d12a:	48 83 c4 20          	add    $0x20,%rsp
   1d12e:	5b                   	pop    %rbx
   1d12f:	41 5c                	pop    %r12
   1d131:	5d                   	pop    %rbp
   1d132:	c3                   	ret

000000000001d133 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1d133:	55                   	push   %rbp
   1d134:	48 89 e5             	mov    %rsp,%rbp
   1d137:	48 83 ec 10          	sub    $0x10,%rsp
   1d13b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d13f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1d143:	eb 1c                	jmp    1d161 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1d145:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d149:	48 89 c7             	mov    %rax,%rdi
   1d14c:	e8 df 10 00 00       	call   1e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1d151:	48 89 c7             	mov    %rax,%rdi
   1d154:	e8 e5 10 00 00       	call   1e23e <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1d159:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1d160:	00 
   1d161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d165:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d169:	75 da                	jne    1d145 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_+0x12>
	}
   1d16b:	90                   	nop
   1d16c:	90                   	nop
   1d16d:	c9                   	leave
   1d16e:	c3                   	ret

000000000001d16f <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk19ExtensionPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1d16f:	55                   	push   %rbp
   1d170:	48 89 e5             	mov    %rsp,%rbp
   1d173:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d177:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d17b:	90                   	nop
   1d17c:	5d                   	pop    %rbp
   1d17d:	c3                   	ret

000000000001d17e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1d17e:	55                   	push   %rbp
   1d17f:	48 89 e5             	mov    %rsp,%rbp
   1d182:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1d186:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1d18d:	0f fc 00 
      }
   1d190:	5d                   	pop    %rbp
   1d191:	c3                   	ret

000000000001d192 <_ZNSt6vectorIN2vk19ExtensionPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d192:	55                   	push   %rbp
   1d193:	48 89 e5             	mov    %rsp,%rbp
   1d196:	48 83 ec 20          	sub    $0x20,%rsp
   1d19a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d19e:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1d1a5:	07 7e 00 
   1d1a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d1ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d1b0:	48 89 c7             	mov    %rax,%rdi
   1d1b3:	e8 c6 ff ff ff       	call   1d17e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8max_sizeERKS2_>
   1d1b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d1bc:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d1c0:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d1c4:	48 89 d6             	mov    %rdx,%rsi
   1d1c7:	48 89 c7             	mov    %rax,%rdi
   1d1ca:	e8 65 aa ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1d1cf:	48 8b 00             	mov    (%rax),%rax
      }
   1d1d2:	c9                   	leave
   1d1d3:	c3                   	ret

000000000001d1d4 <_ZNKSt12_Vector_baseIN2vk19ExtensionPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d1d4:	55                   	push   %rbp
   1d1d5:	48 89 e5             	mov    %rsp,%rbp
   1d1d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d1dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d1e0:	5d                   	pop    %rbp
   1d1e1:	c3                   	ret

000000000001d1e2 <_ZSt25__uninitialized_default_nIPN2vk19ExtensionPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d1e2:	55                   	push   %rbp
   1d1e3:	48 89 e5             	mov    %rsp,%rbp
   1d1e6:	48 83 ec 20          	sub    $0x20,%rsp
   1d1ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d1ee:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d1f2:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d1f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d1fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d1fe:	48 89 d6             	mov    %rdx,%rsi
   1d201:	48 89 c7             	mov    %rax,%rdi
   1d204:	e8 50 10 00 00       	call   1e259 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>
    }
   1d209:	c9                   	leave
   1d20a:	c3                   	ret

000000000001d20b <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d20b:	55                   	push   %rbp
   1d20c:	48 89 e5             	mov    %rsp,%rbp
   1d20f:	48 83 ec 20          	sub    $0x20,%rsp
   1d213:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d217:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d21b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d21f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d223:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d227:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1d22b:	e8 6e 8f fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1d230:	84 c0                	test   %al,%al
   1d232:	74 39                	je     1d26d <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1d234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d238:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d23d:	ba 04 01 00 00       	mov    $0x104,%edx
   1d242:	48 f7 e2             	mul    %rdx
   1d245:	71 05                	jno    1d24c <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x41>
   1d247:	b9 01 00 00 00       	mov    $0x1,%ecx
   1d24c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d250:	48 89 c8             	mov    %rcx,%rax
   1d253:	83 e0 01             	and    $0x1,%eax
   1d256:	84 c0                	test   %al,%al
   1d258:	74 05                	je     1d25f <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1d25a:	e8 21 7f fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1d25f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d263:	48 89 c7             	mov    %rax,%rdi
   1d266:	e8 b5 7f fe ff       	call   5220 <_Znwm@plt>
   1d26b:	eb 19                	jmp    1d286 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1d26d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d275:	ba 00 00 00 00       	mov    $0x0,%edx
   1d27a:	48 89 ce             	mov    %rcx,%rsi
   1d27d:	48 89 c7             	mov    %rax,%rdi
   1d280:	e8 d7 1b 00 00       	call   1ee5c <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>
   1d285:	90                   	nop
      { return __a.allocate(__n); }
   1d286:	c9                   	leave
   1d287:	c3                   	ret

000000000001d288 <_ZSt12__relocate_aIPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d288:	55                   	push   %rbp
   1d289:	48 89 e5             	mov    %rsp,%rbp
   1d28c:	41 54                	push   %r12
   1d28e:	53                   	push   %rbx
   1d28f:	48 83 ec 20          	sub    $0x20,%rsp
   1d293:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d297:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d29b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d29f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d2a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d2a7:	48 89 c7             	mov    %rax,%rdi
   1d2aa:	e8 f2 0f 00 00       	call   1e2a1 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1d2af:	49 89 c4             	mov    %rax,%r12
   1d2b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d2b6:	48 89 c7             	mov    %rax,%rdi
   1d2b9:	e8 e3 0f 00 00       	call   1e2a1 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1d2be:	48 89 c3             	mov    %rax,%rbx
   1d2c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d2c5:	48 89 c7             	mov    %rax,%rdi
   1d2c8:	e8 d4 0f 00 00       	call   1e2a1 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>
   1d2cd:	48 89 c7             	mov    %rax,%rdi
   1d2d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d2d4:	48 89 c1             	mov    %rax,%rcx
   1d2d7:	4c 89 e2             	mov    %r12,%rdx
   1d2da:	48 89 de             	mov    %rbx,%rsi
   1d2dd:	e8 cd 0f 00 00       	call   1e2af <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1d2e2:	48 83 c4 20          	add    $0x20,%rsp
   1d2e6:	5b                   	pop    %rbx
   1d2e7:	41 5c                	pop    %r12
   1d2e9:	5d                   	pop    %rbp
   1d2ea:	c3                   	ret

000000000001d2eb <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   1d2eb:	55                   	push   %rbp
   1d2ec:	48 89 e5             	mov    %rsp,%rbp
   1d2ef:	48 83 ec 10          	sub    $0x10,%rsp
   1d2f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d2f7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
   1d2fb:	eb 1c                	jmp    1d319 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x2e>
	    std::_Destroy(std::__addressof(*__first));
   1d2fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d301:	48 89 c7             	mov    %rax,%rdi
   1d304:	e8 57 10 00 00       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1d309:	48 89 c7             	mov    %rax,%rdi
   1d30c:	e8 5d 10 00 00       	call   1e36e <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>
	  for (; __first != __last; ++__first)
   1d311:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1d318:	00 
   1d319:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d31d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d321:	75 da                	jne    1d2fd <_ZNSt12_Destroy_auxILb0EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_+0x12>
	}
   1d323:	90                   	nop
   1d324:	90                   	nop
   1d325:	c9                   	leave
   1d326:	c3                   	ret

000000000001d327 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2vk15LayerPropertiesEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
   1d327:	55                   	push   %rbp
   1d328:	48 89 e5             	mov    %rsp,%rbp
   1d32b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d32f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d333:	90                   	nop
   1d334:	5d                   	pop    %rbp
   1d335:	c3                   	ret

000000000001d336 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
   1d336:	55                   	push   %rbp
   1d337:	48 89 e5             	mov    %rsp,%rbp
   1d33a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
   1d33e:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1d345:	07 7e 00 
      }
   1d348:	5d                   	pop    %rbp
   1d349:	c3                   	ret

000000000001d34a <_ZNSt6vectorIN2vk15LayerPropertiesESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
   1d34a:	55                   	push   %rbp
   1d34b:	48 89 e5             	mov    %rsp,%rbp
   1d34e:	48 83 ec 20          	sub    $0x20,%rsp
   1d352:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	const size_t __diffmax
   1d356:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1d35d:	03 3f 00 
   1d360:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
   1d364:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d368:	48 89 c7             	mov    %rax,%rdi
   1d36b:	e8 c6 ff ff ff       	call   1d336 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8max_sizeERKS2_>
   1d370:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
   1d374:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1d378:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d37c:	48 89 d6             	mov    %rdx,%rsi
   1d37f:	48 89 c7             	mov    %rax,%rdi
   1d382:	e8 ad a8 ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1d387:	48 8b 00             	mov    (%rax),%rax
      }
   1d38a:	c9                   	leave
   1d38b:	c3                   	ret

000000000001d38c <_ZNKSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1d38c:	55                   	push   %rbp
   1d38d:	48 89 e5             	mov    %rsp,%rbp
   1d390:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1d394:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d398:	5d                   	pop    %rbp
   1d399:	c3                   	ret

000000000001d39a <_ZSt25__uninitialized_default_nIPN2vk15LayerPropertiesEmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d39a:	55                   	push   %rbp
   1d39b:	48 89 e5             	mov    %rsp,%rbp
   1d39e:	48 83 ec 20          	sub    $0x20,%rsp
   1d3a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d3a6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d3aa:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d3ae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d3b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3b6:	48 89 d6             	mov    %rdx,%rsi
   1d3b9:	48 89 c7             	mov    %rax,%rdi
   1d3bc:	e8 c8 0f 00 00       	call   1e389 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>
    }
   1d3c1:	c9                   	leave
   1d3c2:	c3                   	ret

000000000001d3c3 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m>:
      allocate(allocator_type& __a, size_type __n)
   1d3c3:	55                   	push   %rbp
   1d3c4:	48 89 e5             	mov    %rsp,%rbp
   1d3c7:	48 83 ec 20          	sub    $0x20,%rsp
   1d3cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d3cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d3d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d3d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d3db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d3df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1d3e3:	e8 b6 8d fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1d3e8:	84 c0                	test   %al,%al
   1d3ea:	74 39                	je     1d425 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1d3ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d3f0:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d3f5:	ba 08 02 00 00       	mov    $0x208,%edx
   1d3fa:	48 f7 e2             	mul    %rdx
   1d3fd:	71 05                	jno    1d404 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x41>
   1d3ff:	b9 01 00 00 00       	mov    $0x1,%ecx
   1d404:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d408:	48 89 c8             	mov    %rcx,%rax
   1d40b:	83 e0 01             	and    $0x1,%eax
   1d40e:	84 c0                	test   %al,%al
   1d410:	74 05                	je     1d417 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x54>
	      std::__throw_bad_array_new_length();
   1d412:	e8 69 7d fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1d417:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d41b:	48 89 c7             	mov    %rax,%rdi
   1d41e:	e8 fd 7d fe ff       	call   5220 <_Znwm@plt>
   1d423:	eb 19                	jmp    1d43e <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE8allocateERS2_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1d425:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d429:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d42d:	ba 00 00 00 00       	mov    $0x0,%edx
   1d432:	48 89 ce             	mov    %rcx,%rsi
   1d435:	48 89 c7             	mov    %rax,%rdi
   1d438:	e8 b5 1b 00 00       	call   1eff2 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>
   1d43d:	90                   	nop
      { return __a.allocate(__n); }
   1d43e:	c9                   	leave
   1d43f:	c3                   	ret

000000000001d440 <_ZSt12__relocate_aIPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1d440:	55                   	push   %rbp
   1d441:	48 89 e5             	mov    %rsp,%rbp
   1d444:	41 54                	push   %r12
   1d446:	53                   	push   %rbx
   1d447:	48 83 ec 20          	sub    $0x20,%rsp
   1d44b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d44f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d453:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1d457:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1d45b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d45f:	48 89 c7             	mov    %rax,%rdi
   1d462:	e8 6a 0f 00 00       	call   1e3d1 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1d467:	49 89 c4             	mov    %rax,%r12
   1d46a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d46e:	48 89 c7             	mov    %rax,%rdi
   1d471:	e8 5b 0f 00 00       	call   1e3d1 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1d476:	48 89 c3             	mov    %rax,%rbx
   1d479:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d47d:	48 89 c7             	mov    %rax,%rdi
   1d480:	e8 4c 0f 00 00       	call   1e3d1 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>
   1d485:	48 89 c7             	mov    %rax,%rdi
   1d488:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d48c:	48 89 c1             	mov    %rax,%rcx
   1d48f:	4c 89 e2             	mov    %r12,%rdx
   1d492:	48 89 de             	mov    %rbx,%rsi
   1d495:	e8 45 0f 00 00       	call   1e3df <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>
    }
   1d49a:	48 83 c4 20          	add    $0x20,%rsp
   1d49e:	5b                   	pop    %rbx
   1d49f:	41 5c                	pop    %r12
   1d4a1:	5d                   	pop    %rbp
   1d4a2:	c3                   	ret

000000000001d4a3 <_ZN9__gnu_cxx14__alloc_traitsISaIN2vk15LayerPropertiesEES2_E17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
   1d4a3:	55                   	push   %rbp
   1d4a4:	48 89 e5             	mov    %rsp,%rbp
   1d4a7:	48 83 ec 10          	sub    $0x10,%rsp
   1d4ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d4af:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
   1d4b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d4b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d4bb:	48 89 d6             	mov    %rdx,%rsi
   1d4be:	48 89 c7             	mov    %rax,%rdi
   1d4c1:	e8 90 0f 00 00       	call   1e456 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>
   1d4c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d4ca:	c9                   	leave
   1d4cb:	c3                   	ret

000000000001d4cc <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
   1d4cc:	55                   	push   %rbp
   1d4cd:	48 89 e5             	mov    %rsp,%rbp
   1d4d0:	53                   	push   %rbx
   1d4d1:	48 83 ec 28          	sub    $0x28,%rsp
   1d4d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d4d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d4dd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
   1d4e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4e5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1d4e9:	48 89 d6             	mov    %rdx,%rsi
   1d4ec:	48 89 c7             	mov    %rax,%rdi
   1d4ef:	e8 8c 0f 00 00       	call   1e480 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
   1d4f4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d4f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d4fc:	48 89 d6             	mov    %rdx,%rsi
   1d4ff:	48 89 c7             	mov    %rax,%rdi
   1d502:	e8 ab 0f 00 00       	call   1e4b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>
   1d507:	eb 1a                	jmp    1d523 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EEC1EmRKS2_+0x57>
   1d509:	48 89 c3             	mov    %rax,%rbx
   1d50c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d510:	48 89 c7             	mov    %rax,%rdi
   1d513:	e8 d2 a6 ff ff       	call   17bea <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implD1Ev>
   1d518:	48 89 d8             	mov    %rbx,%rax
   1d51b:	48 89 c7             	mov    %rax,%rdi
   1d51e:	e8 7d 7e fe ff       	call   53a0 <_Unwind_Resume@plt>
   1d523:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d527:	c9                   	leave
   1d528:	c3                   	ret
   1d529:	90                   	nop

000000000001d52a <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
   1d52a:	55                   	push   %rbp
   1d52b:	48 89 e5             	mov    %rsp,%rbp
   1d52e:	48 83 ec 20          	sub    $0x20,%rsp
   1d532:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
   1d536:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d53a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d53e:	48 89 d6             	mov    %rdx,%rsi
   1d541:	48 89 c7             	mov    %rax,%rdi
   1d544:	e8 cb 0f 00 00       	call   1e514 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   1d549:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d54d:	c9                   	leave
   1d54e:	c3                   	ret
   1d54f:	90                   	nop

000000000001d550 <_ZNKSt6vectorIN2vk15LayerPropertiesESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
   1d550:	55                   	push   %rbp
   1d551:	48 89 e5             	mov    %rsp,%rbp
   1d554:	48 83 ec 20          	sub    $0x20,%rsp
   1d558:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
   1d55c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d560:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1d564:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1d568:	48 89 d6             	mov    %rdx,%rsi
   1d56b:	48 89 c7             	mov    %rax,%rdi
   1d56e:	e8 a1 0f 00 00       	call   1e514 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>
   1d573:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d577:	c9                   	leave
   1d578:	c3                   	ret

000000000001d579 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   1d579:	55                   	push   %rbp
   1d57a:	48 89 e5             	mov    %rsp,%rbp
   1d57d:	48 83 ec 20          	sub    $0x20,%rsp
   1d581:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d585:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d589:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1d58d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
      if (std::is_constant_evaluated())
   1d591:	e8 13 8c fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1d596:	84 c0                	test   %al,%al
   1d598:	74 19                	je     1d5b3 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x3a>
	return std::__do_uninit_copy(__first, __last, __result);
   1d59a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d59e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d5a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5a6:	48 89 ce             	mov    %rcx,%rsi
   1d5a9:	48 89 c7             	mov    %rax,%rdi
   1d5ac:	e8 c9 0f 00 00       	call   1e57a <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   1d5b1:	eb 18                	jmp    1d5cb <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E+0x52>
      return std::uninitialized_copy(__first, __last, __result);
   1d5b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d5b7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1d5bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5bf:	48 89 ce             	mov    %rcx,%rsi
   1d5c2:	48 89 c7             	mov    %rax,%rdi
   1d5c5:	e8 2d 10 00 00       	call   1e5f7 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   1d5ca:	90                   	nop
    }
   1d5cb:	c9                   	leave
   1d5cc:	c3                   	ret

000000000001d5cd <_ZSt25__uninitialized_default_nIPPKcmET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
   1d5cd:	55                   	push   %rbp
   1d5ce:	48 89 e5             	mov    %rsp,%rbp
   1d5d1:	48 83 ec 20          	sub    $0x20,%rsp
   1d5d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d5d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      constexpr bool __can_fill
   1d5dd:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_default_n(__first, __n);
   1d5e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d5e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d5e9:	48 89 d6             	mov    %rdx,%rsi
   1d5ec:	48 89 c7             	mov    %rax,%rdi
   1d5ef:	e8 38 10 00 00       	call   1e62c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>
    }
   1d5f4:	c9                   	leave
   1d5f5:	c3                   	ret

000000000001d5f6 <_ZSt12construct_atIPKcJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1d5f6:	55                   	push   %rbp
   1d5f7:	48 89 e5             	mov    %rsp,%rbp
   1d5fa:	53                   	push   %rbx
   1d5fb:	48 83 ec 18          	sub    $0x18,%rsp
   1d5ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d603:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1d607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d60b:	48 89 c6             	mov    %rax,%rsi
   1d60e:	bf 08 00 00 00       	mov    $0x8,%edi
   1d613:	e8 9c 8b fe ff       	call   61b4 <_ZnwmPv>
   1d618:	48 89 c3             	mov    %rax,%rbx
   1d61b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d61f:	48 89 c7             	mov    %rax,%rdi
   1d622:	e8 f2 ea ff ff       	call   1c119 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
   1d627:	48 8b 00             	mov    (%rax),%rax
   1d62a:	48 89 03             	mov    %rax,(%rbx)
   1d62d:	48 89 d8             	mov    %rbx,%rax
   1d630:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d634:	c9                   	leave
   1d635:	c3                   	ret

000000000001d636 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1d636:	55                   	push   %rbp
   1d637:	48 89 e5             	mov    %rsp,%rbp
   1d63a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d63e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1d642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d646:	48 8b 10             	mov    (%rax),%rdx
   1d649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d64d:	48 89 10             	mov    %rdx,(%rax)
   1d650:	90                   	nop
   1d651:	5d                   	pop    %rbp
   1d652:	c3                   	ret
   1d653:	90                   	nop

000000000001d654 <_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
   1d654:	55                   	push   %rbp
   1d655:	48 89 e5             	mov    %rsp,%rbp
   1d658:	48 83 ec 10          	sub    $0x10,%rsp
   1d65c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(_M_get_Tp_allocator()); }
   1d660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d664:	48 89 c7             	mov    %rax,%rdi
   1d667:	e8 50 10 00 00       	call   1e6bc <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>
   1d66c:	48 89 c7             	mov    %rax,%rdi
   1d66f:	e8 fa aa ff ff       	call   1816e <_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_>
   1d674:	c9                   	leave
   1d675:	c3                   	ret

000000000001d676 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1d676:	55                   	push   %rbp
   1d677:	48 89 e5             	mov    %rsp,%rbp
   1d67a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1d67e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d682:	5d                   	pop    %rbp
   1d683:	c3                   	ret

000000000001d684 <_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
   1d684:	55                   	push   %rbp
   1d685:	48 89 e5             	mov    %rsp,%rbp
   1d688:	48 83 ec 20          	sub    $0x20,%rsp
   1d68c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d690:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1d694:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1d698:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return std::__relocate_a(__first, __last, __result, __alloc);
   1d69c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1d6a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d6a4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1d6a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d6ac:	48 89 c7             	mov    %rax,%rdi
   1d6af:	e8 16 10 00 00       	call   1e6ca <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>
      }
   1d6b4:	c9                   	leave
   1d6b5:	c3                   	ret

000000000001d6b6 <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1d6b6:	55                   	push   %rbp
   1d6b7:	48 89 e5             	mov    %rsp,%rbp
   1d6ba:	48 83 ec 10          	sub    $0x10,%rsp
   1d6be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d6c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1d6c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d6ca:	48 89 c7             	mov    %rax,%rdi
   1d6cd:	e8 cf 00 00 00       	call   1d7a1 <_ZSt10destroy_atIPKcEvPT_>
	}
   1d6d2:	90                   	nop
   1d6d3:	c9                   	leave
   1d6d4:	c3                   	ret
   1d6d5:	90                   	nop

000000000001d6d6 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEmiEl>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
   1d6d6:	55                   	push   %rbp
   1d6d7:	48 89 e5             	mov    %rsp,%rbp
   1d6da:	48 83 ec 20          	sub    $0x20,%rsp
   1d6de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d6e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __normal_iterator(_M_current - __n); }
   1d6e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d6ea:	48 8b 00             	mov    (%rax),%rax
   1d6ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1d6f1:	48 c1 e2 03          	shl    $0x3,%rdx
   1d6f5:	48 f7 da             	neg    %rdx
   1d6f8:	48 01 d0             	add    %rdx,%rax
   1d6fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d6ff:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
   1d703:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1d707:	48 89 d6             	mov    %rdx,%rsi
   1d70a:	48 89 c7             	mov    %rax,%rdi
   1d70d:	e8 24 ff ff ff       	call   1d636 <_ZN9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEC1ERKS3_>
   1d712:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d716:	c9                   	leave
   1d717:	c3                   	ret

000000000001d718 <_ZNK9__gnu_cxx17__normal_iteratorIPPKcSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1d718:	55                   	push   %rbp
   1d719:	48 89 e5             	mov    %rsp,%rbp
   1d71c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1d720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d724:	48 8b 00             	mov    (%rax),%rax
   1d727:	5d                   	pop    %rbp
   1d728:	c3                   	ret

000000000001d729 <_ZSt12__miter_baseIPKPKcET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   1d729:	55                   	push   %rbp
   1d72a:	48 89 e5             	mov    %rsp,%rbp
   1d72d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1d731:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d735:	5d                   	pop    %rbp
   1d736:	c3                   	ret

000000000001d737 <_ZSt13__copy_move_aILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1d737:	55                   	push   %rbp
   1d738:	48 89 e5             	mov    %rsp,%rbp
   1d73b:	41 54                	push   %r12
   1d73d:	53                   	push   %rbx
   1d73e:	48 83 ec 20          	sub    $0x20,%rsp
   1d742:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d746:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1d74a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
   1d74e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d752:	48 89 c7             	mov    %rax,%rdi
   1d755:	e8 e1 0f 00 00       	call   1e73b <_ZSt12__niter_baseIPPKcET_S3_>
   1d75a:	49 89 c4             	mov    %rax,%r12
   1d75d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d761:	48 89 c7             	mov    %rax,%rdi
   1d764:	e8 c4 0f 00 00       	call   1e72d <_ZSt12__niter_baseIPKPKcET_S4_>
   1d769:	48 89 c3             	mov    %rax,%rbx
   1d76c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d770:	48 89 c7             	mov    %rax,%rdi
   1d773:	e8 b5 0f 00 00       	call   1e72d <_ZSt12__niter_baseIPKPKcET_S4_>
   1d778:	4c 89 e2             	mov    %r12,%rdx
   1d77b:	48 89 de             	mov    %rbx,%rsi
   1d77e:	48 89 c7             	mov    %rax,%rdi
   1d781:	e8 c3 0f 00 00       	call   1e749 <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1d786:	48 89 c2             	mov    %rax,%rdx
   1d789:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d78d:	48 89 d6             	mov    %rdx,%rsi
   1d790:	48 89 c7             	mov    %rax,%rdi
   1d793:	e8 de 0f 00 00       	call   1e776 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>
    }
   1d798:	48 83 c4 20          	add    $0x20,%rsp
   1d79c:	5b                   	pop    %rbx
   1d79d:	41 5c                	pop    %r12
   1d79f:	5d                   	pop    %rbp
   1d7a0:	c3                   	ret

000000000001d7a1 <_ZSt10destroy_atIPKcEvPT_>:
    destroy_at(_Tp* __location)
   1d7a1:	55                   	push   %rbp
   1d7a2:	48 89 e5             	mov    %rsp,%rbp
   1d7a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1d7a9:	90                   	nop
   1d7aa:	5d                   	pop    %rbp
   1d7ab:	c3                   	ret

000000000001d7ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1d7ac:	55                   	push   %rbp
   1d7ad:	48 89 e5             	mov    %rsp,%rbp
   1d7b0:	53                   	push   %rbx
   1d7b1:	48 83 ec 18          	sub    $0x18,%rsp
   1d7b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d7b9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
   1d7bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d7c1:	48 89 c7             	mov    %rax,%rdi
   1d7c4:	e8 23 ee ff ff       	call   1c5ec <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1d7c9:	48 89 c3             	mov    %rax,%rbx
   1d7cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d7d0:	48 89 c7             	mov    %rax,%rdi
   1d7d3:	e8 b0 0f 00 00       	call   1e788 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1d7d8:	48 89 de             	mov    %rbx,%rsi
   1d7db:	48 89 c7             	mov    %rax,%rdi
   1d7de:	e8 b3 0f 00 00       	call   1e796 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>
      }
   1d7e3:	90                   	nop
   1d7e4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d7e8:	c9                   	leave
   1d7e9:	c3                   	ret

000000000001d7ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
   1d7ea:	55                   	push   %rbp
   1d7eb:	48 89 e5             	mov    %rsp,%rbp
   1d7ee:	48 83 ec 10          	sub    $0x10,%rsp
   1d7f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d7f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
   1d7fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d7fe:	48 89 c7             	mov    %rax,%rdi
   1d801:	e8 82 0f 00 00       	call   1e788 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1d806:	48 89 c1             	mov    %rax,%rcx
   1d809:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d80d:	ba 01 00 00 00       	mov    $0x1,%edx
   1d812:	48 89 c6             	mov    %rax,%rsi
   1d815:	48 89 cf             	mov    %rcx,%rdi
   1d818:	e8 98 0f 00 00       	call   1e7b5 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>
   1d81d:	90                   	nop
   1d81e:	c9                   	leave
   1d81f:	c3                   	ret

000000000001d820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
   1d820:	55                   	push   %rbp
   1d821:	48 89 e5             	mov    %rsp,%rbp
   1d824:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &this->_M_impl._M_header; }
   1d828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d82c:	48 83 c0 08          	add    $0x8,%rax
   1d830:	5d                   	pop    %rbp
   1d831:	c3                   	ret

000000000001d832 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1d832:	55                   	push   %rbp
   1d833:	48 89 e5             	mov    %rsp,%rbp
   1d836:	53                   	push   %rbx
   1d837:	48 83 ec 38          	sub    $0x38,%rsp
   1d83b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d83f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1d843:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1d847:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      while (__x != 0)
   1d84b:	eb 56                	jmp    1d8a3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1d84d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1d851:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d855:	48 89 c7             	mov    %rax,%rdi
   1d858:	e8 8b 04 00 00       	call   1dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1d85d:	48 89 c1             	mov    %rax,%rcx
   1d860:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d864:	48 89 c2             	mov    %rax,%rdx
   1d867:	48 89 ce             	mov    %rcx,%rsi
   1d86a:	48 89 df             	mov    %rbx,%rdi
   1d86d:	e8 8e db ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1d872:	83 f0 01             	xor    $0x1,%eax
   1d875:	84 c0                	test   %al,%al
   1d877:	74 1a                	je     1d893 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x61>
	  __y = __x, __x = _S_left(__x);
   1d879:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d87d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1d881:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d885:	48 89 c7             	mov    %rax,%rdi
   1d888:	e8 7e ec ff ff       	call   1c50b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1d88d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1d891:	eb 10                	jmp    1d8a3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x71>
	  __x = _S_right(__x);
   1d893:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1d897:	48 89 c7             	mov    %rax,%rdi
   1d89a:	e8 5a ec ff ff       	call   1c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1d89f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      while (__x != 0)
   1d8a3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1d8a8:	75 a3                	jne    1d84d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS7_+0x1b>
      return iterator(__y);
   1d8aa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1d8ae:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1d8b2:	48 89 d6             	mov    %rdx,%rsi
   1d8b5:	48 89 c7             	mov    %rax,%rdi
   1d8b8:	e8 59 f3 ff ff       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1d8bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1d8c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d8c5:	c9                   	leave
   1d8c6:	c3                   	ret
   1d8c7:	90                   	nop

000000000001d8c8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
   1d8c8:	55                   	push   %rbp
   1d8c9:	48 89 e5             	mov    %rsp,%rbp
   1d8cc:	48 83 ec 10          	sub    $0x10,%rsp
   1d8d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
   1d8d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d8d8:	48 89 c7             	mov    %rax,%rdi
   1d8db:	e8 34 0f 00 00       	call   1e814 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1d8e0:	c9                   	leave
   1d8e1:	c3                   	ret

000000000001d8e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
      compare(const basic_string& __str) const
   1d8e2:	55                   	push   %rbp
   1d8e3:	48 89 e5             	mov    %rsp,%rbp
   1d8e6:	53                   	push   %rbx
   1d8e7:	48 83 ec 38          	sub    $0x38,%rsp
   1d8eb:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1d8ef:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	const size_type __size = this->size();
   1d8f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1d8f7:	48 89 c7             	mov    %rax,%rdi
   1d8fa:	e8 f7 89 fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1d8ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	const size_type __osize = __str.size();
   1d903:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d907:	48 89 c7             	mov    %rax,%rdi
   1d90a:	e8 e7 89 fe ff       	call   62f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
   1d90f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	const size_type __len = std::min(__size, __osize);
   1d913:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1d917:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1d91b:	48 89 d6             	mov    %rdx,%rsi
   1d91e:	48 89 c7             	mov    %rax,%rdi
   1d921:	e8 0e a3 ff ff       	call   17c34 <_ZSt3minImERKT_S2_S2_>
   1d926:	48 8b 00             	mov    (%rax),%rax
   1d929:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int __r = traits_type::compare(_M_data(), __str.data(), __len);
   1d92d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d931:	48 89 c7             	mov    %rax,%rdi
   1d934:	e8 af ad ff ff       	call   186e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
   1d939:	48 89 c3             	mov    %rax,%rbx
   1d93c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1d940:	48 89 c7             	mov    %rax,%rdi
   1d943:	e8 9c cb fe ff       	call   a4e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
   1d948:	48 89 c1             	mov    %rax,%rcx
   1d94b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d94f:	48 89 c2             	mov    %rax,%rdx
   1d952:	48 89 de             	mov    %rbx,%rsi
   1d955:	48 89 cf             	mov    %rcx,%rdi
   1d958:	e8 22 16 ff ff       	call   ef7f <_ZNSt11char_traitsIcE7compareEPKcS2_m>
   1d95d:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if (!__r)
   1d960:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1d964:	75 16                	jne    1d97c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x9a>
	  __r = _S_compare(__size, __osize);
   1d966:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1d96a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d96e:	48 89 d6             	mov    %rdx,%rsi
   1d971:	48 89 c7             	mov    %rax,%rdi
   1d974:	e8 a9 0e 00 00       	call   1e822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>
   1d979:	89 45 ec             	mov    %eax,-0x14(%rbp)
	return __r;
   1d97c:	8b 45 ec             	mov    -0x14(%rbp),%eax
      }
   1d97f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d983:	c9                   	leave
   1d984:	c3                   	ret
   1d985:	90                   	nop

000000000001d986 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1IS5_EEOT_>:
	_Tuple_impl(_UHead&& __head)
   1d986:	55                   	push   %rbp
   1d987:	48 89 e5             	mov    %rsp,%rbp
   1d98a:	53                   	push   %rbx
   1d98b:	48 83 ec 18          	sub    $0x18,%rsp
   1d98f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d993:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: _Base(std::forward<_UHead>(__head))
   1d997:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1d99b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d99f:	48 89 c7             	mov    %rax,%rdi
   1d9a2:	e8 8f ec ff ff       	call   1c636 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1d9a7:	48 89 c6             	mov    %rax,%rsi
   1d9aa:	48 89 df             	mov    %rbx,%rdi
   1d9ad:	e8 b8 0e 00 00       	call   1e86a <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>
	{ }
   1d9b2:	90                   	nop
   1d9b3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1d9b7:	c9                   	leave
   1d9b8:	c3                   	ret
   1d9b9:	90                   	nop

000000000001d9ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
   1d9ba:	55                   	push   %rbp
   1d9bb:	48 89 e5             	mov    %rsp,%rbp
   1d9be:	41 54                	push   %r12
   1d9c0:	53                   	push   %rbx
   1d9c1:	48 83 ec 30          	sub    $0x30,%rsp
   1d9c5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d9c9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1d9cd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1d9d1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	  _Link_type __tmp = _M_get_node();
   1d9d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d9d9:	48 89 c7             	mov    %rax,%rdi
   1d9dc:	e8 af 0e 00 00       	call   1e890 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>
   1d9e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   1d9e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1d9e9:	48 89 c7             	mov    %rax,%rdi
   1d9ec:	e8 a2 ec ff ff       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1d9f1:	49 89 c4             	mov    %rax,%r12
   1d9f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1d9f8:	48 89 c7             	mov    %rax,%rdi
   1d9fb:	e8 85 ec ff ff       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1da00:	48 89 c3             	mov    %rax,%rbx
   1da03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1da07:	48 89 c7             	mov    %rax,%rdi
   1da0a:	e8 68 ec ff ff       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1da0f:	48 89 c2             	mov    %rax,%rdx
   1da12:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1da16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1da1a:	4d 89 e0             	mov    %r12,%r8
   1da1d:	48 89 d9             	mov    %rbx,%rcx
   1da20:	48 89 c7             	mov    %rax,%rdi
   1da23:	e8 90 0e 00 00       	call   1e8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
   1da28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1da2c:	48 83 c4 30          	add    $0x30,%rsp
   1da30:	5b                   	pop    %rbx
   1da31:	41 5c                	pop    %r12
   1da33:	5d                   	pop    %rbp
   1da34:	c3                   	ret
   1da35:	90                   	nop

000000000001da36 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
   1da36:	55                   	push   %rbp
   1da37:	48 89 e5             	mov    %rsp,%rbp
   1da3a:	48 83 ec 20          	sub    $0x20,%rsp
   1da3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
   1da42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1da46:	48 8b 10             	mov    (%rax),%rdx
   1da49:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1da4d:	48 89 d6             	mov    %rdx,%rsi
   1da50:	48 89 c7             	mov    %rax,%rdi
   1da53:	e8 be f1 ff ff       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1da58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da5c:	c9                   	leave
   1da5d:	c3                   	ret

000000000001da5e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
   1da5e:	55                   	push   %rbp
   1da5f:	48 89 e5             	mov    %rsp,%rbp
   1da62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
   1da66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da6a:	48 8b 40 28          	mov    0x28(%rax),%rax
   1da6e:	5d                   	pop    %rbp
   1da6f:	c3                   	ret

000000000001da70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
   1da70:	55                   	push   %rbp
   1da71:	48 89 e5             	mov    %rsp,%rbp
   1da74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
   1da78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da7c:	48 83 c0 20          	add    $0x20,%rax
   1da80:	5d                   	pop    %rbp
   1da81:	c3                   	ret

000000000001da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
   1da82:	55                   	push   %rbp
   1da83:	48 89 e5             	mov    %rsp,%rbp
   1da86:	48 83 ec 10          	sub    $0x10,%rsp
   1da8a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
   1da8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1da92:	48 89 c7             	mov    %rax,%rdi
   1da95:	e8 4e 02 00 00       	call   1dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1da9a:	c9                   	leave
   1da9b:	c3                   	ret

000000000001da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>:

    public:

      /// Constructor accepting lvalues of `first_type` and `second_type`
      constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
      pair(const _T1& __x, const _T2& __y)
   1da9c:	55                   	push   %rbp
   1da9d:	48 89 e5             	mov    %rsp,%rbp
   1daa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1daa4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1daa8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
      requires (_S_constructible<const _T1&, const _T2&>())
      : first(__x), second(__y)
   1daac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dab0:	48 8b 10             	mov    (%rax),%rdx
   1dab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dab7:	48 89 10             	mov    %rdx,(%rax)
   1daba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dabe:	48 8b 10             	mov    (%rax),%rdx
   1dac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dac5:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { }
   1dac9:	90                   	nop
   1daca:	5d                   	pop    %rbp
   1dacb:	c3                   	ret

000000000001dacc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1dacc:	55                   	push   %rbp
   1dacd:	48 89 e5             	mov    %rsp,%rbp
   1dad0:	53                   	push   %rbx
   1dad1:	48 83 ec 78          	sub    $0x78,%rsp
   1dad5:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1dad9:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
      _Link_type __x = _M_begin();
   1dadd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1dae1:	48 89 c7             	mov    %rax,%rdi
   1dae4:	e8 1d d8 ff ff       	call   1b306 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv>
   1dae9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      _Base_ptr __y = _M_end();
   1daed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1daf1:	48 89 c7             	mov    %rax,%rdi
   1daf4:	e8 27 fd ff ff       	call   1d820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1daf9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      bool __comp = true;
   1dafd:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
      while (__x != 0)
   1db01:	eb 51                	jmp    1db54 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x88>
	  __y = __x;
   1db03:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1db07:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   1db0b:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1db0f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1db13:	48 89 c7             	mov    %rax,%rdi
   1db16:	e8 cd 01 00 00       	call   1dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1db1b:	48 89 c2             	mov    %rax,%rdx
   1db1e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1db22:	48 89 c6             	mov    %rax,%rsi
   1db25:	48 89 df             	mov    %rbx,%rdi
   1db28:	e8 d3 d8 ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1db2d:	88 45 ef             	mov    %al,-0x11(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1db30:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1db34:	74 0e                	je     1db44 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x78>
   1db36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1db3a:	48 89 c7             	mov    %rax,%rdi
   1db3d:	e8 c9 e9 ff ff       	call   1c50b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
   1db42:	eb 0c                	jmp    1db50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x84>
   1db44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1db48:	48 89 c7             	mov    %rax,%rdi
   1db4b:	e8 a9 e9 ff ff       	call   1c4f9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
   1db50:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      while (__x != 0)
   1db54:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1db58:	48 85 c0             	test   %rax,%rax
   1db5b:	75 a6                	jne    1db03 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x37>
      iterator __j = iterator(__y);
   1db5d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1db61:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1db65:	48 89 d6             	mov    %rdx,%rsi
   1db68:	48 89 c7             	mov    %rax,%rdi
   1db6b:	e8 a6 f0 ff ff       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
   1db70:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1db74:	74 54                	je     1dbca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xfe>
	  if (__j == begin())
   1db76:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1db7a:	48 89 c7             	mov    %rax,%rdi
   1db7d:	e8 08 0e 00 00       	call   1e98a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>
   1db82:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1db86:	48 8d 55 a8          	lea    -0x58(%rbp),%rdx
   1db8a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1db8e:	48 89 d6             	mov    %rdx,%rsi
   1db91:	48 89 c7             	mov    %rax,%rdi
   1db94:	e8 e5 d7 ff ff       	call   1b37e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEESB_>
   1db99:	84 c0                	test   %al,%al
   1db9b:	74 21                	je     1dbbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf2>
	    return _Res(__x, __y);
   1db9d:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1dba1:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1dba5:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1dba9:	48 89 ce             	mov    %rcx,%rsi
   1dbac:	48 89 c7             	mov    %rax,%rdi
   1dbaf:	e8 00 0e 00 00       	call   1e9b4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1dbb4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1dbb8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1dbbc:	eb 7d                	jmp    1dc3b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
	    --__j;
   1dbbe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   1dbc2:	48 89 c7             	mov    %rax,%rdi
   1dbc5:	e8 ce 00 00 00       	call   1dc98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1dbca:	48 8b 5d 88          	mov    -0x78(%rbp),%rbx
   1dbce:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1dbd2:	48 89 c7             	mov    %rax,%rdi
   1dbd5:	e8 a8 fe ff ff       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1dbda:	48 89 c1             	mov    %rax,%rcx
   1dbdd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1dbe1:	48 89 c2             	mov    %rax,%rdx
   1dbe4:	48 89 ce             	mov    %rcx,%rsi
   1dbe7:	48 89 df             	mov    %rbx,%rdi
   1dbea:	e8 11 d8 ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1dbef:	84 c0                	test   %al,%al
   1dbf1:	74 21                	je     1dc14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x148>
	return _Res(__x, __y);
   1dbf3:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
   1dbf7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1dbfb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   1dbff:	48 89 ce             	mov    %rcx,%rsi
   1dc02:	48 89 c7             	mov    %rax,%rdi
   1dc05:	e8 aa 0d 00 00       	call   1e9b4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>
   1dc0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dc0e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1dc12:	eb 27                	jmp    1dc3b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x16f>
      return _Res(__j._M_node, 0);
   1dc14:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1dc1b:	00 
   1dc1c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   1dc20:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
   1dc24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1dc28:	48 89 ce             	mov    %rcx,%rsi
   1dc2b:	48 89 c7             	mov    %rax,%rdi
   1dc2e:	e8 69 fe ff ff       	call   1da9c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1ERKS1_S4_>
   1dc33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1dc37:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    }
   1dc3b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1dc3f:	c9                   	leave
   1dc40:	c3                   	ret
   1dc41:	90                   	nop

000000000001dc42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
   1dc42:	55                   	push   %rbp
   1dc43:	48 89 e5             	mov    %rsp,%rbp
   1dc46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
   1dc4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc4e:	48 83 c0 18          	add    $0x18,%rax
   1dc52:	5d                   	pop    %rbp
   1dc53:	c3                   	ret

000000000001dc54 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_EEOT_OT0_>:

      /// Constructor accepting two values of arbitrary types
      template<typename _U1, typename _U2>
	requires (_S_constructible<_U1, _U2>())
	constexpr explicit(!_S_convertible<_U1, _U2>())
	pair(_U1&& __x, _U2&& __y)
   1dc54:	55                   	push   %rbp
   1dc55:	48 89 e5             	mov    %rsp,%rbp
   1dc58:	48 83 ec 20          	sub    $0x20,%rsp
   1dc5c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dc60:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1dc64:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	noexcept(_S_nothrow_constructible<_U1, _U2>())
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1dc68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dc6c:	48 89 c7             	mov    %rax,%rdi
   1dc6f:	e8 84 0d 00 00       	call   1e9f8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1dc74:	48 8b 10             	mov    (%rax),%rdx
   1dc77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc7b:	48 89 10             	mov    %rdx,(%rax)
   1dc7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dc82:	48 89 c7             	mov    %rax,%rdi
   1dc85:	e8 6e 0d 00 00       	call   1e9f8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1dc8a:	48 8b 10             	mov    (%rax),%rdx
   1dc8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc91:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1dc95:	90                   	nop
   1dc96:	c9                   	leave
   1dc97:	c3                   	ret

000000000001dc98 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
   1dc98:	55                   	push   %rbp
   1dc99:	48 89 e5             	mov    %rsp,%rbp
   1dc9c:	48 83 ec 10          	sub    $0x10,%rsp
   1dca0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_decrement(_M_node);
   1dca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dca8:	48 8b 00             	mov    (%rax),%rax
   1dcab:	48 89 c7             	mov    %rax,%rdi
   1dcae:	e8 9d 75 fe ff       	call   5250 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>
   1dcb3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1dcb7:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1dcba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1dcbe:	c9                   	leave
   1dcbf:	c3                   	ret

000000000001dcc0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1dcc0:	55                   	push   %rbp
   1dcc1:	48 89 e5             	mov    %rsp,%rbp
   1dcc4:	48 83 ec 10          	sub    $0x10,%rsp
   1dcc8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
   1dccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dcd0:	48 8b 00             	mov    (%rax),%rax
   1dcd3:	48 89 c7             	mov    %rax,%rdi
   1dcd6:	e8 45 74 fe ff       	call   5120 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>
   1dcdb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1dcdf:	48 89 02             	mov    %rax,(%rdx)
	return *this;
   1dce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1dce6:	c9                   	leave
   1dce7:	c3                   	ret

000000000001dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
   1dce8:	55                   	push   %rbp
   1dce9:	48 89 e5             	mov    %rsp,%rbp
   1dcec:	48 83 ec 20          	sub    $0x20,%rsp
   1dcf0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	return _KeyOfValue()(*__x->_M_valptr());
   1dcf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dcf8:	48 89 c7             	mov    %rax,%rdi
   1dcfb:	e8 06 0d 00 00       	call   1ea06 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1dd00:	48 89 c2             	mov    %rax,%rdx
   1dd03:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
   1dd07:	48 89 d6             	mov    %rdx,%rsi
   1dd0a:	48 89 c7             	mov    %rax,%rdi
   1dd0d:	e8 12 0d 00 00       	call   1ea24 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>
      }
   1dd12:	c9                   	leave
   1dd13:	c3                   	ret

000000000001dd14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1dd14:	55                   	push   %rbp
   1dd15:	48 89 e5             	mov    %rsp,%rbp
   1dd18:	41 54                	push   %r12
   1dd1a:	53                   	push   %rbx
   1dd1b:	48 83 ec 30          	sub    $0x30,%rsp
   1dd1f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1dd23:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1dd27:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1dd2b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
			    || _M_impl._M_key_compare(_S_key(__z),
   1dd2f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   1dd34:	75 43                	jne    1dd79 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
      bool __insert_left = (__x != 0 || __p == _M_end()
   1dd36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dd3a:	48 89 c7             	mov    %rax,%rdi
   1dd3d:	e8 de fa ff ff       	call   1d820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_M_endEv>
   1dd42:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
   1dd46:	74 31                	je     1dd79 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x65>
			    || _M_impl._M_key_compare(_S_key(__z),
   1dd48:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   1dd4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1dd50:	48 89 c7             	mov    %rax,%rdi
   1dd53:	e8 2a fd ff ff       	call   1da82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
   1dd58:	49 89 c4             	mov    %rax,%r12
   1dd5b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1dd5f:	48 89 c7             	mov    %rax,%rdi
   1dd62:	e8 81 ff ff ff       	call   1dce8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
   1dd67:	4c 89 e2             	mov    %r12,%rdx
   1dd6a:	48 89 c6             	mov    %rax,%rsi
   1dd6d:	48 89 df             	mov    %rbx,%rdi
   1dd70:	e8 8b d6 ff ff       	call   1b400 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
   1dd75:	84 c0                	test   %al,%al
   1dd77:	74 07                	je     1dd80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x6c>
   1dd79:	b8 01 00 00 00       	mov    $0x1,%eax
   1dd7e:	eb 05                	jmp    1dd85 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x71>
   1dd80:	b8 00 00 00 00       	mov    $0x0,%eax
      bool __insert_left = (__x != 0 || __p == _M_end()
   1dd85:	88 45 ef             	mov    %al,-0x11(%rbp)
				    this->_M_impl._M_header);
   1dd88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dd8c:	48 8d 48 08          	lea    0x8(%rax),%rcx
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1dd90:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1dd94:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   1dd98:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1dd9c:	89 c7                	mov    %eax,%edi
   1dd9e:	e8 9d 72 fe ff       	call   5040 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>
      ++_M_impl._M_node_count;
   1dda3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dda7:	48 8b 40 28          	mov    0x28(%rax),%rax
   1ddab:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1ddaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ddb3:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
   1ddb7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1ddbb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1ddbf:	48 89 d6             	mov    %rdx,%rsi
   1ddc2:	48 89 c7             	mov    %rax,%rdi
   1ddc5:	e8 4c ee ff ff       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1ddca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
   1ddce:	48 83 c4 30          	add    $0x30,%rsp
   1ddd2:	5b                   	pop    %rbx
   1ddd3:	41 5c                	pop    %r12
   1ddd5:	5d                   	pop    %rbp
   1ddd6:	c3                   	ret
   1ddd7:	90                   	nop

000000000001ddd8 <_ZNSt22_Optional_payload_baseIjE8_StorageIjLb1EEC1IJjEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
   1ddd8:	55                   	push   %rbp
   1ddd9:	48 89 e5             	mov    %rsp,%rbp
   1dddc:	48 83 ec 10          	sub    $0x10,%rsp
   1dde0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1dde4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    : _M_value(std::forward<_Args>(__args)...)
   1dde8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ddec:	48 89 c7             	mov    %rax,%rdi
   1ddef:	e8 6a d1 ff ff       	call   1af5e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
   1ddf4:	8b 10                	mov    (%rax),%edx
   1ddf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ddfa:	89 10                	mov    %edx,(%rax)
	    { }
   1ddfc:	90                   	nop
   1ddfd:	c9                   	leave
   1ddfe:	c3                   	ret

000000000001ddff <_ZSt12__get_helperILm0EPN2vk4raii17ContextDispatcherEJSt14default_deleteIS2_EEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   1ddff:	55                   	push   %rbp
   1de00:	48 89 e5             	mov    %rsp,%rbp
   1de03:	48 83 ec 10          	sub    $0x10,%rsp
   1de07:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   1de0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de0f:	48 89 c7             	mov    %rax,%rdi
   1de12:	e8 1f 0c 00 00       	call   1ea36 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>
   1de17:	c9                   	leave
   1de18:	c3                   	ret
   1de19:	90                   	nop

000000000001de1a <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii18InstanceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   1de1a:	55                   	push   %rbp
   1de1b:	48 89 e5             	mov    %rsp,%rbp
   1de1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1de22:	90                   	nop
   1de23:	5d                   	pop    %rbp
   1de24:	c3                   	ret
   1de25:	90                   	nop

000000000001de26 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE10deallocateEPS2_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1de26:	55                   	push   %rbp
   1de27:	48 89 e5             	mov    %rsp,%rbp
   1de2a:	48 83 ec 20          	sub    $0x20,%rsp
   1de2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1de32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1de36:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1de3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1de3e:	48 c1 e0 04          	shl    $0x4,%rax
   1de42:	48 89 c2             	mov    %rax,%rdx
   1de45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1de49:	48 89 d6             	mov    %rdx,%rsi
   1de4c:	48 89 c7             	mov    %rax,%rdi
   1de4f:	e8 dc 73 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1de54:	c9                   	leave
   1de55:	c3                   	ret

000000000001de56 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1de56:	55                   	push   %rbp
   1de57:	48 89 e5             	mov    %rsp,%rbp
   1de5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1de5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de62:	5d                   	pop    %rbp
   1de63:	c3                   	ret

000000000001de64 <_ZSt8_DestroyIN2vk4raii14PhysicalDeviceEEvPT_>:
    _Destroy(_Tp* __pointer)
   1de64:	55                   	push   %rbp
   1de65:	48 89 e5             	mov    %rsp,%rbp
   1de68:	48 83 ec 10          	sub    $0x10,%rsp
   1de6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1de70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de74:	48 89 c7             	mov    %rax,%rdi
   1de77:	e8 b4 f0 ff ff       	call   1cf30 <_ZSt10destroy_atIN2vk4raii14PhysicalDeviceEEvPT_>
    }
   1de7c:	90                   	nop
   1de7d:	c9                   	leave
   1de7e:	c3                   	ret
   1de7f:	90                   	nop

000000000001de80 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1de80:	55                   	push   %rbp
   1de81:	48 89 e5             	mov    %rsp,%rbp
   1de84:	48 83 ec 20          	sub    $0x20,%rsp
   1de88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1de8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1de90:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1de94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1de98:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1de9f:	00 
   1dea0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1dea4:	48 89 d6             	mov    %rdx,%rsi
   1dea7:	48 89 c7             	mov    %rax,%rdi
   1deaa:	e8 81 73 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1deaf:	c9                   	leave
   1deb0:	c3                   	ret

000000000001deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1deb1:	55                   	push   %rbp
   1deb2:	48 89 e5             	mov    %rsp,%rbp
   1deb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1deb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1debd:	5d                   	pop    %rbp
   1debe:	c3                   	ret

000000000001debf <_ZSt8_DestroyIP18VkPhysicalDevice_TEvPT_>:
    _Destroy(_Tp* __pointer)
   1debf:	55                   	push   %rbp
   1dec0:	48 89 e5             	mov    %rsp,%rbp
   1dec3:	48 83 ec 10          	sub    $0x10,%rsp
   1dec7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1decb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1decf:	48 89 c7             	mov    %rax,%rdi
   1ded2:	e8 79 0b 00 00       	call   1ea50 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
    }
   1ded7:	90                   	nop
   1ded8:	c9                   	leave
   1ded9:	c3                   	ret

000000000001deda <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1deda:	55                   	push   %rbp
   1dedb:	48 89 e5             	mov    %rsp,%rbp
   1dede:	48 83 ec 20          	sub    $0x20,%rsp
   1dee2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1dee6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1deea:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1deef:	74 40                	je     1df31 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPP18VkPhysicalDevice_TmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1def1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1def5:	48 89 c7             	mov    %rax,%rdi
   1def8:	e8 b4 ff ff ff       	call   1deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1defd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1df01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1df05:	48 89 c7             	mov    %rax,%rdi
   1df08:	e8 4e 0b 00 00       	call   1ea5b <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>
	      ++__first;
   1df0d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1df12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1df16:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1df1a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1df1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1df22:	48 89 ce             	mov    %rcx,%rsi
   1df25:	48 89 c7             	mov    %rax,%rdi
   1df28:	e8 6b 0b 00 00       	call   1ea98 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>
   1df2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1df31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1df35:	c9                   	leave
   1df36:	c3                   	ret

000000000001df37 <_ZSt12__niter_baseIPP18VkPhysicalDevice_TET_S3_>:
    __niter_base(_Iterator __it)
   1df37:	55                   	push   %rbp
   1df38:	48 89 e5             	mov    %rsp,%rbp
   1df3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1df3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1df43:	5d                   	pop    %rbp
   1df44:	c3                   	ret
   1df45:	90                   	nop

000000000001df46 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1df46:	55                   	push   %rbp
   1df47:	48 89 e5             	mov    %rsp,%rbp
   1df4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1df4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1df52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1df56:	48 8b 10             	mov    (%rax),%rdx
   1df59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1df5d:	48 89 10             	mov    %rdx,(%rax)
   1df60:	90                   	nop
   1df61:	5d                   	pop    %rbp
   1df62:	c3                   	ret

000000000001df63 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1df63:	55                   	push   %rbp
   1df64:	48 89 e5             	mov    %rsp,%rbp
   1df67:	48 83 ec 30          	sub    $0x30,%rsp
   1df6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1df6f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1df73:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1df77:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1df7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1df7f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1df83:	48 c1 f8 03          	sar    $0x3,%rax
   1df87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1df8b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1df90:	7e 68                	jle    1dffa <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   1df92:	e8 12 82 fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1df97:	84 c0                	test   %al,%al
   1df99:	74 40                	je     1dfdb <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   1df9b:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   1df9f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1dfa3:	48 89 d6             	mov    %rdx,%rsi
   1dfa6:	48 89 c7             	mov    %rax,%rdi
   1dfa9:	e8 98 ff ff ff       	call   1df46 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   1dfae:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1dfb2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1dfb6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1dfba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dfbe:	48 89 c7             	mov    %rax,%rdi
   1dfc1:	e8 77 0b 00 00       	call   1eb3d <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   1dfc6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   1dfca:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1dfce:	48 89 c7             	mov    %rax,%rdi
   1dfd1:	e8 e8 0b 00 00       	call   1ebbe <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>
   1dfd6:	48 8b 00             	mov    (%rax),%rax
   1dfd9:	eb 2e                	jmp    1e009 <_ZSt14__relocate_a_1IP18VkPhysicalDevice_TS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1dfdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dfdf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1dfe6:	00 
   1dfe7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dfeb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1dfef:	48 89 ce             	mov    %rcx,%rsi
   1dff2:	48 89 c7             	mov    %rax,%rdi
   1dff5:	e8 66 73 fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   1dffa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dffe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e002:	48 c1 e2 03          	shl    $0x3,%rdx
   1e006:	48 01 d0             	add    %rdx,%rax
    }
   1e009:	c9                   	leave
   1e00a:	c3                   	ret
   1e00b:	90                   	nop

000000000001e00c <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1e00c:	55                   	push   %rbp
   1e00d:	48 89 e5             	mov    %rsp,%rbp
   1e010:	48 83 ec 20          	sub    $0x20,%rsp
   1e014:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e01c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1e020:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e024:	48 89 c7             	mov    %rax,%rdi
   1e027:	e8 a0 0b 00 00       	call   1ebcc <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>
   1e02c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e030:	0f 92 c0             	setb   %al
   1e033:	0f b6 c0             	movzbl %al,%eax
   1e036:	48 85 c0             	test   %rax,%rax
   1e039:	0f 95 c0             	setne  %al
   1e03c:	84 c0                	test   %al,%al
   1e03e:	74 1a                	je     1e05a <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1e040:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1e047:	ff ff 0f 
   1e04a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1e04e:	73 05                	jae    1e055 <_ZNSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1e050:	e8 2b 71 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1e055:	e8 26 70 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e05a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e05e:	48 c1 e0 04          	shl    $0x4,%rax
   1e062:	48 89 c7             	mov    %rax,%rdi
   1e065:	e8 b6 71 fe ff       	call   5220 <_Znwm@plt>
   1e06a:	90                   	nop
      }
   1e06b:	c9                   	leave
   1e06c:	c3                   	ret

000000000001e06d <_ZSt19__relocate_object_aIN2vk4raii14PhysicalDeviceES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1e06d:	55                   	push   %rbp
   1e06e:	48 89 e5             	mov    %rsp,%rbp
   1e071:	48 83 ec 20          	sub    $0x20,%rsp
   1e075:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e079:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e07d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1e081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e085:	48 89 c7             	mov    %rax,%rdi
   1e088:	e8 53 0b 00 00       	call   1ebe0 <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>
   1e08d:	48 89 c2             	mov    %rax,%rdx
   1e090:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1e094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e098:	48 89 ce             	mov    %rcx,%rsi
   1e09b:	48 89 c7             	mov    %rax,%rdi
   1e09e:	e8 4b 0b 00 00       	call   1ebee <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1e0a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e0a7:	48 89 c7             	mov    %rax,%rdi
   1e0aa:	e8 a7 fd ff ff       	call   1de56 <_ZSt11__addressofIN2vk4raii14PhysicalDeviceEEPT_RS3_>
   1e0af:	48 89 c2             	mov    %rax,%rdx
   1e0b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e0b6:	48 89 d6             	mov    %rdx,%rsi
   1e0b9:	48 89 c7             	mov    %rax,%rdi
   1e0bc:	e8 a8 d9 ff ff       	call   1ba69 <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE7destroyIS2_EEvRS3_PT_>
    }
   1e0c1:	90                   	nop
   1e0c2:	c9                   	leave
   1e0c3:	c3                   	ret

000000000001e0c4 <_ZNSt10_Head_baseILm1ESt14default_deleteIN2vk4raii16DeviceDispatcherEELb1EEC1Ev>:
      constexpr _Head_base()
   1e0c4:	55                   	push   %rbp
   1e0c5:	48 89 e5             	mov    %rsp,%rbp
   1e0c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
   1e0cc:	90                   	nop
   1e0cd:	5d                   	pop    %rbp
   1e0ce:	c3                   	ret
   1e0cf:	90                   	nop

000000000001e0d0 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e0d0:	55                   	push   %rbp
   1e0d1:	48 89 e5             	mov    %rsp,%rbp
   1e0d4:	48 83 ec 20          	sub    $0x20,%rsp
   1e0d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e0dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e0e0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e0e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e0e8:	48 89 d0             	mov    %rdx,%rax
   1e0eb:	48 01 c0             	add    %rax,%rax
   1e0ee:	48 01 d0             	add    %rdx,%rax
   1e0f1:	48 c1 e0 03          	shl    $0x3,%rax
   1e0f5:	48 89 c2             	mov    %rax,%rdx
   1e0f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e0fc:	48 89 d6             	mov    %rdx,%rsi
   1e0ff:	48 89 c7             	mov    %rax,%rdi
   1e102:	e8 29 71 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1e107:	c9                   	leave
   1e108:	c3                   	ret

000000000001e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1e109:	55                   	push   %rbp
   1e10a:	48 89 e5             	mov    %rsp,%rbp
   1e10d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1e111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e115:	5d                   	pop    %rbp
   1e116:	c3                   	ret

000000000001e117 <_ZSt8_DestroyIN2vk21QueueFamilyPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1e117:	55                   	push   %rbp
   1e118:	48 89 e5             	mov    %rsp,%rbp
   1e11b:	48 83 ec 10          	sub    $0x10,%rsp
   1e11f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1e123:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e127:	48 89 c7             	mov    %rax,%rdi
   1e12a:	e8 f4 0a 00 00       	call   1ec23 <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
    }
   1e12f:	90                   	nop
   1e130:	c9                   	leave
   1e131:	c3                   	ret

000000000001e132 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e132:	55                   	push   %rbp
   1e133:	48 89 e5             	mov    %rsp,%rbp
   1e136:	48 83 ec 20          	sub    $0x20,%rsp
   1e13a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e13e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1e142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e146:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1e14a:	eb 1e                	jmp    1e16a <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x38>
		std::_Construct(std::__addressof(*__cur));
   1e14c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e150:	48 89 c7             	mov    %rax,%rdi
   1e153:	e8 b1 ff ff ff       	call   1e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1e158:	48 89 c7             	mov    %rax,%rdi
   1e15b:	e8 20 0b 00 00       	call   1ec80 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1e160:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1e165:	48 83 45 f8 18       	addq   $0x18,-0x8(%rbp)
   1e16a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e16f:	75 db                	jne    1e14c <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk21QueueFamilyPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1e171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1e175:	c9                   	leave
   1e176:	c3                   	ret

000000000001e177 <_ZSt12__niter_baseIPN2vk21QueueFamilyPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1e177:	55                   	push   %rbp
   1e178:	48 89 e5             	mov    %rsp,%rbp
   1e17b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e17f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e183:	5d                   	pop    %rbp
   1e184:	c3                   	ret

000000000001e185 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1e185:	55                   	push   %rbp
   1e186:	48 89 e5             	mov    %rsp,%rbp
   1e189:	53                   	push   %rbx
   1e18a:	48 83 ec 38          	sub    $0x38,%rsp
   1e18e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e192:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e196:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1e19a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1e19e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e1a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1e1a6:	eb 3a                	jmp    1e1e2 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
   1e1a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e1ac:	48 89 c7             	mov    %rax,%rdi
   1e1af:	e8 55 ff ff ff       	call   1e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1e1b4:	48 89 c3             	mov    %rax,%rbx
   1e1b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e1bb:	48 89 c7             	mov    %rax,%rdi
   1e1be:	e8 46 ff ff ff       	call   1e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1e1c3:	48 89 c1             	mov    %rax,%rcx
   1e1c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e1ca:	48 89 c2             	mov    %rax,%rdx
   1e1cd:	48 89 de             	mov    %rbx,%rsi
   1e1d0:	48 89 cf             	mov    %rcx,%rdi
   1e1d3:	e8 7a 0b 00 00       	call   1ed52 <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1e1d8:	48 83 45 d8 18       	addq   $0x18,-0x28(%rbp)
   1e1dd:	48 83 45 e8 18       	addq   $0x18,-0x18(%rbp)
   1e1e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e1e6:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e1ea:	75 bc                	jne    1e1a8 <_ZSt14__relocate_a_1IPN2vk21QueueFamilyPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1e1ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1e1f0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e1f4:	c9                   	leave
   1e1f5:	c3                   	ret

000000000001e1f6 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e1f6:	55                   	push   %rbp
   1e1f7:	48 89 e5             	mov    %rsp,%rbp
   1e1fa:	48 83 ec 20          	sub    $0x20,%rsp
   1e1fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e202:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e206:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e20a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e20e:	48 89 d0             	mov    %rdx,%rax
   1e211:	48 c1 e0 06          	shl    $0x6,%rax
   1e215:	48 01 d0             	add    %rdx,%rax
   1e218:	48 c1 e0 02          	shl    $0x2,%rax
   1e21c:	48 89 c2             	mov    %rax,%rdx
   1e21f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e223:	48 89 d6             	mov    %rdx,%rsi
   1e226:	48 89 c7             	mov    %rax,%rdi
   1e229:	e8 02 70 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1e22e:	c9                   	leave
   1e22f:	c3                   	ret

000000000001e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1e230:	55                   	push   %rbp
   1e231:	48 89 e5             	mov    %rsp,%rbp
   1e234:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1e238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e23c:	5d                   	pop    %rbp
   1e23d:	c3                   	ret

000000000001e23e <_ZSt8_DestroyIN2vk19ExtensionPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1e23e:	55                   	push   %rbp
   1e23f:	48 89 e5             	mov    %rsp,%rbp
   1e242:	48 83 ec 10          	sub    $0x10,%rsp
   1e246:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1e24a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e24e:	48 89 c7             	mov    %rax,%rdi
   1e251:	e8 53 0b 00 00       	call   1eda9 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
    }
   1e256:	90                   	nop
   1e257:	c9                   	leave
   1e258:	c3                   	ret

000000000001e259 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e259:	55                   	push   %rbp
   1e25a:	48 89 e5             	mov    %rsp,%rbp
   1e25d:	48 83 ec 20          	sub    $0x20,%rsp
   1e261:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e265:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1e269:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e26d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1e271:	eb 21                	jmp    1e294 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1e273:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e277:	48 89 c7             	mov    %rax,%rdi
   1e27a:	e8 b1 ff ff ff       	call   1e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1e27f:	48 89 c7             	mov    %rax,%rdi
   1e282:	e8 56 0b 00 00       	call   1eddd <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1e287:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1e28c:	48 81 45 f8 04 01 00 	addq   $0x104,-0x8(%rbp)
   1e293:	00 
   1e294:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e299:	75 d8                	jne    1e273 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk19ExtensionPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1e29b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1e29f:	c9                   	leave
   1e2a0:	c3                   	ret

000000000001e2a1 <_ZSt12__niter_baseIPN2vk19ExtensionPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1e2a1:	55                   	push   %rbp
   1e2a2:	48 89 e5             	mov    %rsp,%rbp
   1e2a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e2a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e2ad:	5d                   	pop    %rbp
   1e2ae:	c3                   	ret

000000000001e2af <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1e2af:	55                   	push   %rbp
   1e2b0:	48 89 e5             	mov    %rsp,%rbp
   1e2b3:	53                   	push   %rbx
   1e2b4:	48 83 ec 38          	sub    $0x38,%rsp
   1e2b8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e2bc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e2c0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1e2c4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1e2c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e2cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1e2d0:	eb 40                	jmp    1e312 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1e2d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e2d6:	48 89 c7             	mov    %rax,%rdi
   1e2d9:	e8 52 ff ff ff       	call   1e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1e2de:	48 89 c3             	mov    %rax,%rbx
   1e2e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e2e5:	48 89 c7             	mov    %rax,%rdi
   1e2e8:	e8 43 ff ff ff       	call   1e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1e2ed:	48 89 c1             	mov    %rax,%rcx
   1e2f0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e2f4:	48 89 c2             	mov    %rax,%rdx
   1e2f7:	48 89 de             	mov    %rbx,%rsi
   1e2fa:	48 89 cf             	mov    %rcx,%rdi
   1e2fd:	e8 c5 0b 00 00       	call   1eec7 <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1e302:	48 81 45 d8 04 01 00 	addq   $0x104,-0x28(%rbp)
   1e309:	00 
   1e30a:	48 81 45 e8 04 01 00 	addq   $0x104,-0x18(%rbp)
   1e311:	00 
   1e312:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e316:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e31a:	75 b6                	jne    1e2d2 <_ZSt14__relocate_a_1IPN2vk19ExtensionPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1e31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1e320:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e324:	c9                   	leave
   1e325:	c3                   	ret

000000000001e326 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e326:	55                   	push   %rbp
   1e327:	48 89 e5             	mov    %rsp,%rbp
   1e32a:	48 83 ec 20          	sub    $0x20,%rsp
   1e32e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e332:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e336:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e33a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e33e:	48 89 d0             	mov    %rdx,%rax
   1e341:	48 c1 e0 06          	shl    $0x6,%rax
   1e345:	48 01 d0             	add    %rdx,%rax
   1e348:	48 c1 e0 03          	shl    $0x3,%rax
   1e34c:	48 89 c2             	mov    %rax,%rdx
   1e34f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e353:	48 89 d6             	mov    %rdx,%rsi
   1e356:	48 89 c7             	mov    %rax,%rdi
   1e359:	e8 d2 6e fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1e35e:	c9                   	leave
   1e35f:	c3                   	ret

000000000001e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   1e360:	55                   	push   %rbp
   1e361:	48 89 e5             	mov    %rsp,%rbp
   1e364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
   1e368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e36c:	5d                   	pop    %rbp
   1e36d:	c3                   	ret

000000000001e36e <_ZSt8_DestroyIN2vk15LayerPropertiesEEvPT_>:
    _Destroy(_Tp* __pointer)
   1e36e:	55                   	push   %rbp
   1e36f:	48 89 e5             	mov    %rsp,%rbp
   1e372:	48 83 ec 10          	sub    $0x10,%rsp
   1e376:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
   1e37a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e37e:	48 89 c7             	mov    %rax,%rdi
   1e381:	e8 98 0b 00 00       	call   1ef1e <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
    }
   1e386:	90                   	nop
   1e387:	c9                   	leave
   1e388:	c3                   	ret

000000000001e389 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e389:	55                   	push   %rbp
   1e38a:	48 89 e5             	mov    %rsp,%rbp
   1e38d:	48 83 ec 20          	sub    $0x20,%rsp
   1e391:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e395:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  _ForwardIterator __cur = __first;
   1e399:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e39d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      for (; __n > 0; --__n, (void) ++__cur)
   1e3a1:	eb 21                	jmp    1e3c4 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x3b>
		std::_Construct(std::__addressof(*__cur));
   1e3a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e3a7:	48 89 c7             	mov    %rax,%rdi
   1e3aa:	e8 b1 ff ff ff       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1e3af:	48 89 c7             	mov    %rax,%rdi
   1e3b2:	e8 bc 0b 00 00       	call   1ef73 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
   1e3b7:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   1e3bc:	48 81 45 f8 08 02 00 	addq   $0x208,-0x8(%rbp)
   1e3c3:	00 
   1e3c4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e3c9:	75 d8                	jne    1e3a3 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN2vk15LayerPropertiesEmEET_S5_T0_+0x1a>
	      return __cur;
   1e3cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   1e3cf:	c9                   	leave
   1e3d0:	c3                   	ret

000000000001e3d1 <_ZSt12__niter_baseIPN2vk15LayerPropertiesEET_S3_>:
    __niter_base(_Iterator __it)
   1e3d1:	55                   	push   %rbp
   1e3d2:	48 89 e5             	mov    %rsp,%rbp
   1e3d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e3d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e3dd:	5d                   	pop    %rbp
   1e3de:	c3                   	ret

000000000001e3df <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1e3df:	55                   	push   %rbp
   1e3e0:	48 89 e5             	mov    %rsp,%rbp
   1e3e3:	53                   	push   %rbx
   1e3e4:	48 83 ec 38          	sub    $0x38,%rsp
   1e3e8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e3ec:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e3f0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1e3f4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1e3f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e3fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1e400:	eb 40                	jmp    1e442 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x63>
	std::__relocate_object_a(std::__addressof(*__cur),
   1e402:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e406:	48 89 c7             	mov    %rax,%rdi
   1e409:	e8 52 ff ff ff       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1e40e:	48 89 c3             	mov    %rax,%rbx
   1e411:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e415:	48 89 c7             	mov    %rax,%rdi
   1e418:	e8 43 ff ff ff       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1e41d:	48 89 c1             	mov    %rax,%rcx
   1e420:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e424:	48 89 c2             	mov    %rax,%rdx
   1e427:	48 89 de             	mov    %rbx,%rsi
   1e42a:	48 89 cf             	mov    %rcx,%rdi
   1e42d:	e8 2b 0c 00 00       	call   1f05d <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1e432:	48 81 45 d8 08 02 00 	addq   $0x208,-0x28(%rbp)
   1e439:	00 
   1e43a:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   1e441:	00 
   1e442:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e446:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e44a:	75 b6                	jne    1e402 <_ZSt14__relocate_a_1IPN2vk15LayerPropertiesES2_SaIS1_EET0_T_S5_S4_RT1_+0x23>
      return __cur;
   1e44c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1e450:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e454:	c9                   	leave
   1e455:	c3                   	ret

000000000001e456 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
   1e456:	55                   	push   %rbp
   1e457:	48 89 e5             	mov    %rsp,%rbp
   1e45a:	48 83 ec 10          	sub    $0x10,%rsp
   1e45e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e462:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
   1e466:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1e46a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e46e:	48 89 d6             	mov    %rdx,%rsi
   1e471:	48 89 c7             	mov    %rax,%rdi
   1e474:	e8 bf ca ff ff       	call   1af38 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   1e479:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e47d:	c9                   	leave
   1e47e:	c3                   	ret
   1e47f:	90                   	nop

000000000001e480 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
   1e480:	55                   	push   %rbp
   1e481:	48 89 e5             	mov    %rsp,%rbp
   1e484:	48 83 ec 10          	sub    $0x10,%rsp
   1e488:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e48c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
   1e490:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1e494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e498:	48 89 d6             	mov    %rdx,%rsi
   1e49b:	48 89 c7             	mov    %rax,%rdi
   1e49e:	e8 95 ca ff ff       	call   1af38 <_ZNSaIN2vk15LayerPropertiesEEC1ERKS1_>
   1e4a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4a7:	48 89 c7             	mov    %rax,%rdi
   1e4aa:	e8 57 97 ff ff       	call   17c06 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
   1e4af:	90                   	nop
   1e4b0:	c9                   	leave
   1e4b1:	c3                   	ret

000000000001e4b2 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
   1e4b2:	55                   	push   %rbp
   1e4b3:	48 89 e5             	mov    %rsp,%rbp
   1e4b6:	48 83 ec 10          	sub    $0x10,%rsp
   1e4ba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e4be:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
   1e4c2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1e4c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4ca:	48 89 d6             	mov    %rdx,%rsi
   1e4cd:	48 89 c7             	mov    %rax,%rdi
   1e4d0:	e8 ad d9 ff ff       	call   1be82 <_ZNSt12_Vector_baseIN2vk15LayerPropertiesESaIS1_EE11_M_allocateEm>
   1e4d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e4d9:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
   1e4dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4e0:	48 8b 10             	mov    (%rax),%rdx
   1e4e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4e7:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1e4eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e4ef:	48 8b 08             	mov    (%rax),%rcx
   1e4f2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1e4f6:	48 89 d0             	mov    %rdx,%rax
   1e4f9:	48 c1 e0 06          	shl    $0x6,%rax
   1e4fd:	48 01 d0             	add    %rdx,%rax
   1e500:	48 c1 e0 03          	shl    $0x3,%rax
   1e504:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
   1e508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e50c:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
   1e510:	90                   	nop
   1e511:	c9                   	leave
   1e512:	c3                   	ret
   1e513:	90                   	nop

000000000001e514 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1e514:	55                   	push   %rbp
   1e515:	48 89 e5             	mov    %rsp,%rbp
   1e518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e51c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1e520:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e524:	48 8b 10             	mov    (%rax),%rdx
   1e527:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e52b:	48 89 10             	mov    %rdx,(%rax)
   1e52e:	90                   	nop
   1e52f:	5d                   	pop    %rbp
   1e530:	c3                   	ret

000000000001e531 <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
   1e531:	55                   	push   %rbp
   1e532:	48 89 e5             	mov    %rsp,%rbp
   1e535:	53                   	push   %rbx
   1e536:	48 83 ec 18          	sub    $0x18,%rsp
   1e53a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e53e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return __lhs.base() == __rhs.base(); }
   1e542:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e546:	48 89 c7             	mov    %rax,%rdi
   1e549:	e8 1e 00 00 00       	call   1e56c <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   1e54e:	48 8b 18             	mov    (%rax),%rbx
   1e551:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e555:	48 89 c7             	mov    %rax,%rdi
   1e558:	e8 0f 00 00 00       	call   1e56c <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>
   1e55d:	48 8b 00             	mov    (%rax),%rax
   1e560:	48 39 c3             	cmp    %rax,%rbx
   1e563:	0f 94 c0             	sete   %al
   1e566:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e56a:	c9                   	leave
   1e56b:	c3                   	ret

000000000001e56c <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1e56c:	55                   	push   %rbp
   1e56d:	48 89 e5             	mov    %rsp,%rbp
   1e570:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1e574:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e578:	5d                   	pop    %rbp
   1e579:	c3                   	ret

000000000001e57a <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
   1e57a:	55                   	push   %rbp
   1e57b:	48 89 e5             	mov    %rsp,%rbp
   1e57e:	53                   	push   %rbx
   1e57f:	48 83 ec 38          	sub    $0x38,%rsp
   1e583:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e587:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e58b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      _ForwardIterator __cur = __result;
   1e58f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e593:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  for (; __first != __last; ++__first, (void)++__cur)
   1e597:	eb 3a                	jmp    1e5d3 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x59>
	    std::_Construct(std::__addressof(*__cur), *__first);
   1e599:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1e59d:	48 89 c7             	mov    %rax,%rdi
   1e5a0:	e8 33 0b 00 00       	call   1f0d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>
   1e5a5:	48 89 c3             	mov    %rax,%rbx
   1e5a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e5ac:	48 89 c7             	mov    %rax,%rdi
   1e5af:	e8 ac fd ff ff       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1e5b4:	48 89 de             	mov    %rbx,%rsi
   1e5b7:	48 89 c7             	mov    %rax,%rdi
   1e5ba:	e8 2a 0b 00 00       	call   1f0e9 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
   1e5bf:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1e5c3:	48 89 c7             	mov    %rax,%rdi
   1e5c6:	e8 e9 0a 00 00       	call   1f0b4 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>
   1e5cb:	48 81 45 e8 08 02 00 	addq   $0x208,-0x18(%rbp)
   1e5d2:	00 
   1e5d3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   1e5d7:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1e5db:	48 89 d6             	mov    %rdx,%rsi
   1e5de:	48 89 c7             	mov    %rax,%rdi
   1e5e1:	e8 4b ff ff ff       	call   1e531 <_ZN9__gnu_cxxeqIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
   1e5e6:	83 f0 01             	xor    $0x1,%eax
   1e5e9:	84 c0                	test   %al,%al
   1e5eb:	75 ac                	jne    1e599 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_+0x1f>
	  return __cur;
   1e5ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1e5f1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1e5f5:	c9                   	leave
   1e5f6:	c3                   	ret

000000000001e5f7 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   1e5f7:	55                   	push   %rbp
   1e5f8:	48 89 e5             	mov    %rsp,%rbp
   1e5fb:	48 83 ec 30          	sub    $0x30,%rsp
   1e5ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e603:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e607:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __can_memmove = __is_trivial(_ValueType1);
   1e60b:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
      const bool __assignable
   1e60f:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
	__uninit_copy(__first, __last, __result);
   1e613:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1e617:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1e61b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e61f:	48 89 ce             	mov    %rcx,%rsi
   1e622:	48 89 c7             	mov    %rax,%rdi
   1e625:	e8 6d 0b 00 00       	call   1f197 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
    }
   1e62a:	c9                   	leave
   1e62b:	c3                   	ret

000000000001e62c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
   1e62c:	55                   	push   %rbp
   1e62d:	48 89 e5             	mov    %rsp,%rbp
   1e630:	48 83 ec 20          	sub    $0x20,%rsp
   1e634:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e638:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	  if (__n > 0)
   1e63c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e641:	74 40                	je     1e683 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPKcmEET_S5_T0_+0x57>
		= std::__addressof(*__first);
   1e643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e647:	48 89 c7             	mov    %rax,%rdi
   1e64a:	e8 3b 9d ff ff       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1e64f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	      std::_Construct(__val);
   1e653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e657:	48 89 c7             	mov    %rax,%rdi
   1e65a:	e8 65 0b 00 00       	call   1f1c4 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>
	      ++__first;
   1e65f:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      __first = std::fill_n(__first, __n - 1, *__val);
   1e664:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e668:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
   1e66c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e670:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e674:	48 89 ce             	mov    %rcx,%rsi
   1e677:	48 89 c7             	mov    %rax,%rdi
   1e67a:	e8 82 0b 00 00       	call   1f201 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>
   1e67f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  return __first;
   1e683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   1e687:	c9                   	leave
   1e688:	c3                   	ret
   1e689:	90                   	nop

000000000001e68a <_ZNSt15__new_allocatorIPKcE10deallocateEPS1_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1e68a:	55                   	push   %rbp
   1e68b:	48 89 e5             	mov    %rsp,%rbp
   1e68e:	48 83 ec 20          	sub    $0x20,%rsp
   1e692:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e696:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e69a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e69e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e6a2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1e6a9:	00 
   1e6aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e6ae:	48 89 d6             	mov    %rdx,%rsi
   1e6b1:	48 89 c7             	mov    %rax,%rdi
   1e6b4:	e8 77 6b fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1e6b9:	c9                   	leave
   1e6ba:	c3                   	ret
   1e6bb:	90                   	nop

000000000001e6bc <_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   1e6bc:	55                   	push   %rbp
   1e6bd:	48 89 e5             	mov    %rsp,%rbp
   1e6c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1e6c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e6c8:	5d                   	pop    %rbp
   1e6c9:	c3                   	ret

000000000001e6ca <_ZSt12__relocate_aIPPKcS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
   1e6ca:	55                   	push   %rbp
   1e6cb:	48 89 e5             	mov    %rsp,%rbp
   1e6ce:	41 54                	push   %r12
   1e6d0:	53                   	push   %rbx
   1e6d1:	48 83 ec 20          	sub    $0x20,%rsp
   1e6d5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e6d9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1e6dd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1e6e1:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      return std::__relocate_a_1(std::__niter_base(__first),
   1e6e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e6e9:	48 89 c7             	mov    %rax,%rdi
   1e6ec:	e8 4a 00 00 00       	call   1e73b <_ZSt12__niter_baseIPPKcET_S3_>
   1e6f1:	49 89 c4             	mov    %rax,%r12
   1e6f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e6f8:	48 89 c7             	mov    %rax,%rdi
   1e6fb:	e8 3b 00 00 00       	call   1e73b <_ZSt12__niter_baseIPPKcET_S3_>
   1e700:	48 89 c3             	mov    %rax,%rbx
   1e703:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e707:	48 89 c7             	mov    %rax,%rdi
   1e70a:	e8 2c 00 00 00       	call   1e73b <_ZSt12__niter_baseIPPKcET_S3_>
   1e70f:	48 89 c7             	mov    %rax,%rdi
   1e712:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e716:	48 89 c1             	mov    %rax,%rcx
   1e719:	4c 89 e2             	mov    %r12,%rdx
   1e71c:	48 89 de             	mov    %rbx,%rsi
   1e71f:	e8 3f 0b 00 00       	call   1f263 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
    }
   1e724:	48 83 c4 20          	add    $0x20,%rsp
   1e728:	5b                   	pop    %rbx
   1e729:	41 5c                	pop    %r12
   1e72b:	5d                   	pop    %rbp
   1e72c:	c3                   	ret

000000000001e72d <_ZSt12__niter_baseIPKPKcET_S4_>:
    __niter_base(_Iterator __it)
   1e72d:	55                   	push   %rbp
   1e72e:	48 89 e5             	mov    %rsp,%rbp
   1e731:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e739:	5d                   	pop    %rbp
   1e73a:	c3                   	ret

000000000001e73b <_ZSt12__niter_baseIPPKcET_S3_>:
    __niter_base(_Iterator __it)
   1e73b:	55                   	push   %rbp
   1e73c:	48 89 e5             	mov    %rsp,%rbp
   1e73f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
   1e743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e747:	5d                   	pop    %rbp
   1e748:	c3                   	ret

000000000001e749 <_ZSt14__copy_move_a1ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   1e749:	55                   	push   %rbp
   1e74a:	48 89 e5             	mov    %rsp,%rbp
   1e74d:	48 83 ec 20          	sub    $0x20,%rsp
   1e751:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e755:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e759:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   1e75d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e761:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e765:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e769:	48 89 ce             	mov    %rcx,%rsi
   1e76c:	48 89 c7             	mov    %rax,%rdi
   1e76f:	e8 97 0b 00 00       	call   1f30b <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>
   1e774:	c9                   	leave
   1e775:	c3                   	ret

000000000001e776 <_ZSt12__niter_wrapIPPKcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   1e776:	55                   	push   %rbp
   1e777:	48 89 e5             	mov    %rsp,%rbp
   1e77a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e77e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
   1e782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e786:	5d                   	pop    %rbp
   1e787:	c3                   	ret

000000000001e788 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   1e788:	55                   	push   %rbp
   1e789:	48 89 e5             	mov    %rsp,%rbp
   1e78c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
   1e790:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e794:	5d                   	pop    %rbp
   1e795:	c3                   	ret

000000000001e796 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1e796:	55                   	push   %rbp
   1e797:	48 89 e5             	mov    %rsp,%rbp
   1e79a:	48 83 ec 10          	sub    $0x10,%rsp
   1e79e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e7a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1e7a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e7aa:	48 89 c7             	mov    %rax,%rdi
   1e7ad:	e8 c5 0b 00 00       	call   1f377 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>
	}
   1e7b2:	90                   	nop
   1e7b3:	c9                   	leave
   1e7b4:	c3                   	ret

000000000001e7b5 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
   1e7b5:	55                   	push   %rbp
   1e7b6:	48 89 e5             	mov    %rsp,%rbp
   1e7b9:	48 83 ec 40          	sub    $0x40,%rsp
   1e7bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e7c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e7c5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1e7c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e7cd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e7d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e7d5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e7d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e7dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (std::__is_constant_evaluated())
   1e7e1:	e8 b8 79 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1e7e6:	84 c0                	test   %al,%al
   1e7e8:	74 0e                	je     1e7f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x43>
	    ::operator delete(__p);
   1e7ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e7ee:	48 89 c7             	mov    %rax,%rdi
   1e7f1:	e8 fa 69 fe ff       	call   51f0 <_ZdlPv@plt>
	    return;
   1e7f6:	eb 18                	jmp    1e810 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE10deallocateERSB_PSA_m+0x5b>
	__allocator_base<_Tp>::deallocate(__p, __n);
   1e7f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1e7fc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1e800:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e804:	48 89 ce             	mov    %rcx,%rsi
   1e807:	48 89 c7             	mov    %rax,%rdi
   1e80a:	e8 17 13 00 00       	call   1fb26 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>
      { __a.deallocate(__p, __n); }
   1e80f:	90                   	nop
   1e810:	90                   	nop
   1e811:	c9                   	leave
   1e812:	c3                   	ret
   1e813:	90                   	nop

000000000001e814 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() noexcept
   1e814:	55                   	push   %rbp
   1e815:	48 89 e5             	mov    %rsp,%rbp
   1e818:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
   1e81c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e820:	5d                   	pop    %rbp
   1e821:	c3                   	ret

000000000001e822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm>:
      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
   1e822:	55                   	push   %rbp
   1e823:	48 89 e5             	mov    %rsp,%rbp
   1e826:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1e82a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const difference_type __d = difference_type(__n1 - __n2);
   1e82e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e832:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   1e836:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   1e83a:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1e83f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1e843:	7c 07                	jl     1e84c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x2a>
	  return __gnu_cxx::__numeric_traits<int>::__max;
   1e845:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1e84a:	eb 1b                	jmp    1e867 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   1e84c:	48 b8 ff ff ff 7f ff 	movabs $0xffffffff7fffffff,%rax
   1e853:	ff ff ff 
   1e856:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1e85a:	7f 07                	jg     1e863 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x41>
	  return __gnu_cxx::__numeric_traits<int>::__min;
   1e85c:	b8 00 00 00 80       	mov    $0x80000000,%eax
   1e861:	eb 04                	jmp    1e867 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm+0x45>
	  return int(__d);
   1e863:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1e867:	5d                   	pop    %rbp
   1e868:	c3                   	ret
   1e869:	90                   	nop

000000000001e86a <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EEC1IS5_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
   1e86a:	55                   	push   %rbp
   1e86b:	48 89 e5             	mov    %rsp,%rbp
   1e86e:	48 83 ec 10          	sub    $0x10,%rsp
   1e872:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e876:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   1e87a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e87e:	48 89 c7             	mov    %rax,%rdi
   1e881:	e8 b0 dd ff ff       	call   1c636 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
   1e886:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1e88a:	48 89 02             	mov    %rax,(%rdx)
   1e88d:	90                   	nop
   1e88e:	c9                   	leave
   1e88f:	c3                   	ret

000000000001e890 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
   1e890:	55                   	push   %rbp
   1e891:	48 89 e5             	mov    %rsp,%rbp
   1e894:	48 83 ec 10          	sub    $0x10,%rsp
   1e898:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
   1e89c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e8a0:	48 89 c7             	mov    %rax,%rdi
   1e8a3:	e8 e0 fe ff ff       	call   1e788 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1e8a8:	be 01 00 00 00       	mov    $0x1,%esi
   1e8ad:	48 89 c7             	mov    %rax,%rdi
   1e8b0:	e8 dd 0a 00 00       	call   1f392 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>
   1e8b5:	c9                   	leave
   1e8b6:	c3                   	ret
   1e8b7:	90                   	nop

000000000001e8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
   1e8b8:	55                   	push   %rbp
   1e8b9:	48 89 e5             	mov    %rsp,%rbp
   1e8bc:	41 56                	push   %r14
   1e8be:	41 55                	push   %r13
   1e8c0:	41 54                	push   %r12
   1e8c2:	53                   	push   %rbx
   1e8c3:	48 83 ec 30          	sub    $0x30,%rsp
   1e8c7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1e8cb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1e8cf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1e8d3:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   1e8d7:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	      ::new(__node) _Rb_tree_node<_Val>;
   1e8db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e8df:	48 89 c6             	mov    %rax,%rsi
   1e8e2:	bf 48 00 00 00       	mov    $0x48,%edi
   1e8e7:	e8 c8 78 fe ff       	call   61b4 <_ZnwmPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
   1e8ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1e8f0:	48 89 c7             	mov    %rax,%rdi
   1e8f3:	e8 9b dd ff ff       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1e8f8:	49 89 c6             	mov    %rax,%r14
   1e8fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e8ff:	48 89 c7             	mov    %rax,%rdi
   1e902:	e8 7e dd ff ff       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1e907:	49 89 c5             	mov    %rax,%r13
   1e90a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1e90e:	48 89 c7             	mov    %rax,%rdi
   1e911:	e8 61 dd ff ff       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1e916:	49 89 c4             	mov    %rax,%r12
   1e919:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1e91d:	48 89 c7             	mov    %rax,%rdi
   1e920:	e8 c7 dc ff ff       	call   1c5ec <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>
   1e925:	48 89 c3             	mov    %rax,%rbx
   1e928:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e92c:	48 89 c7             	mov    %rax,%rdi
   1e92f:	e8 54 fe ff ff       	call   1e788 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv>
   1e934:	4d 89 f0             	mov    %r14,%r8
   1e937:	4c 89 e9             	mov    %r13,%rcx
   1e93a:	4c 89 e2             	mov    %r12,%rdx
   1e93d:	48 89 de             	mov    %rbx,%rsi
   1e940:	48 89 c7             	mov    %rax,%rdi
   1e943:	e8 c7 0a 00 00       	call   1f40f <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
   1e948:	eb 33                	jmp    1e97d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_+0xc5>
	  __catch(...)
   1e94a:	48 89 c7             	mov    %rax,%rdi
   1e94d:	e8 4e 67 fe ff       	call   50a0 <__cxa_begin_catch@plt>
	      _M_put_node(__node);
   1e952:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1e956:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1e95a:	48 89 d6             	mov    %rdx,%rsi
   1e95d:	48 89 c7             	mov    %rax,%rdi
   1e960:	e8 85 ee ff ff       	call   1d7ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
	      __throw_exception_again;
   1e965:	e8 a6 69 fe ff       	call   5310 <__cxa_rethrow@plt>
	  __catch(...)
   1e96a:	48 89 c3             	mov    %rax,%rbx
   1e96d:	e8 fe 69 fe ff       	call   5370 <__cxa_end_catch@plt>
   1e972:	48 89 d8             	mov    %rbx,%rax
   1e975:	48 89 c7             	mov    %rax,%rdi
   1e978:	e8 23 6a fe ff       	call   53a0 <_Unwind_Resume@plt>
	}
   1e97d:	48 83 c4 30          	add    $0x30,%rsp
   1e981:	5b                   	pop    %rbx
   1e982:	41 5c                	pop    %r12
   1e984:	41 5d                	pop    %r13
   1e986:	41 5e                	pop    %r14
   1e988:	5d                   	pop    %rbp
   1e989:	c3                   	ret

000000000001e98a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_jESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
   1e98a:	55                   	push   %rbp
   1e98b:	48 89 e5             	mov    %rsp,%rbp
   1e98e:	48 83 ec 20          	sub    $0x20,%rsp
   1e992:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_header._M_left); }
   1e996:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e99a:	48 8b 50 18          	mov    0x18(%rax),%rdx
   1e99e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1e9a2:	48 89 d6             	mov    %rdx,%rsi
   1e9a5:	48 89 c7             	mov    %rax,%rdi
   1e9a8:	e8 69 e2 ff ff       	call   1cc16 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEC1EPSt18_Rb_tree_node_base>
   1e9ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e9b1:	c9                   	leave
   1e9b2:	c3                   	ret
   1e9b3:	90                   	nop

000000000001e9b4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEERS1_EEOT_OT0_>:
	pair(_U1&& __x, _U2&& __y)
   1e9b4:	55                   	push   %rbp
   1e9b5:	48 89 e5             	mov    %rsp,%rbp
   1e9b8:	48 83 ec 20          	sub    $0x20,%rsp
   1e9bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1e9c0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1e9c4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
   1e9c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1e9cc:	48 89 c7             	mov    %rax,%rdi
   1e9cf:	e8 a3 0a 00 00       	call   1f477 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>
   1e9d4:	48 8b 10             	mov    (%rax),%rdx
   1e9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e9db:	48 89 10             	mov    %rdx,(%rax)
   1e9de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e9e2:	48 89 c7             	mov    %rax,%rdi
   1e9e5:	e8 0e 00 00 00       	call   1e9f8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
   1e9ea:	48 8b 10             	mov    (%rax),%rdx
   1e9ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e9f1:	48 89 50 08          	mov    %rdx,0x8(%rax)
	{ }
   1e9f5:	90                   	nop
   1e9f6:	c9                   	leave
   1e9f7:	c3                   	ret

000000000001e9f8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1e9f8:	55                   	push   %rbp
   1e9f9:	48 89 e5             	mov    %rsp,%rbp
   1e9fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1ea00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea04:	5d                   	pop    %rbp
   1ea05:	c3                   	ret

000000000001ea06 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE9_M_valptrEv>:
      _M_valptr() const
   1ea06:	55                   	push   %rbp
   1ea07:	48 89 e5             	mov    %rsp,%rbp
   1ea0a:	48 83 ec 10          	sub    $0x10,%rsp
   1ea0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_storage._M_ptr(); }
   1ea12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea16:	48 83 c0 20          	add    $0x20,%rax
   1ea1a:	48 89 c7             	mov    %rax,%rdi
   1ea1d:	e8 64 0a 00 00       	call   1f486 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>
   1ea22:	c9                   	leave
   1ea23:	c3                   	ret

000000000001ea24 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   1ea24:	55                   	push   %rbp
   1ea25:	48 89 e5             	mov    %rsp,%rbp
   1ea28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ea2c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
   1ea30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ea34:	5d                   	pop    %rbp
   1ea35:	c3                   	ret

000000000001ea36 <_ZNSt11_Tuple_implILm0EJPN2vk4raii17ContextDispatcherESt14default_deleteIS2_EEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   1ea36:	55                   	push   %rbp
   1ea37:	48 89 e5             	mov    %rsp,%rbp
   1ea3a:	48 83 ec 10          	sub    $0x10,%rsp
   1ea3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ea42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea46:	48 89 c7             	mov    %rax,%rdi
   1ea49:	e8 52 0a 00 00       	call   1f4a0 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>
   1ea4e:	c9                   	leave
   1ea4f:	c3                   	ret

000000000001ea50 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>:
    destroy_at(_Tp* __location)
   1ea50:	55                   	push   %rbp
   1ea51:	48 89 e5             	mov    %rsp,%rbp
   1ea54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1ea58:	90                   	nop
   1ea59:	5d                   	pop    %rbp
   1ea5a:	c3                   	ret

000000000001ea5b <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ea5b:	55                   	push   %rbp
   1ea5c:	48 89 e5             	mov    %rsp,%rbp
   1ea5f:	48 83 ec 10          	sub    $0x10,%rsp
   1ea63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ea67:	e8 32 77 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ea6c:	84 c0                	test   %al,%al
   1ea6e:	74 0e                	je     1ea7e <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ea70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea74:	48 89 c7             	mov    %rax,%rdi
   1ea77:	e8 32 0a 00 00       	call   1f4ae <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1ea7c:	eb 18                	jmp    1ea96 <_ZSt10_ConstructIP18VkPhysicalDevice_TJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ea7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ea82:	48 89 c6             	mov    %rax,%rsi
   1ea85:	bf 08 00 00 00       	mov    $0x8,%edi
   1ea8a:	e8 25 77 fe ff       	call   61b4 <_ZnwmPv>
   1ea8f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1ea96:	c9                   	leave
   1ea97:	c3                   	ret

000000000001ea98 <_ZSt6fill_nIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1ea98:	55                   	push   %rbp
   1ea99:	48 89 e5             	mov    %rsp,%rbp
   1ea9c:	48 83 ec 20          	sub    $0x20,%rsp
   1eaa0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eaa4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1eaa8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
			       std::__iterator_category(__first));
   1eaac:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1eab0:	48 89 c7             	mov    %rax,%rdi
   1eab3:	e8 1c 0a 00 00       	call   1f4d4 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1eab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1eabc:	48 89 c7             	mov    %rax,%rdi
   1eabf:	e8 8a 04 ff ff       	call   ef4e <_ZSt17__size_to_integerm>
   1eac4:	48 89 c1             	mov    %rax,%rcx
   1eac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eacb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1eacf:	48 89 ce             	mov    %rcx,%rsi
   1ead2:	48 89 c7             	mov    %rax,%rdi
   1ead5:	e8 05 0a 00 00       	call   1f4df <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1eada:	c9                   	leave
   1eadb:	c3                   	ret

000000000001eadc <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1eadc:	55                   	push   %rbp
   1eadd:	48 89 e5             	mov    %rsp,%rbp
   1eae0:	48 83 ec 20          	sub    $0x20,%rsp
   1eae4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eae8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1eaec:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1eaf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eaf4:	48 89 c7             	mov    %rax,%rdi
   1eaf7:	e8 40 0a 00 00       	call   1f53c <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>
   1eafc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1eb00:	0f 92 c0             	setb   %al
   1eb03:	0f b6 c0             	movzbl %al,%eax
   1eb06:	48 85 c0             	test   %rax,%rax
   1eb09:	0f 95 c0             	setne  %al
   1eb0c:	84 c0                	test   %al,%al
   1eb0e:	74 1a                	je     1eb2a <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1eb10:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
   1eb17:	ff ff 1f 
   1eb1a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1eb1e:	73 05                	jae    1eb25 <_ZNSt15__new_allocatorIP18VkPhysicalDevice_TE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1eb20:	e8 5b 66 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1eb25:	e8 56 65 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1eb2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1eb2e:	48 c1 e0 03          	shl    $0x3,%rax
   1eb32:	48 89 c7             	mov    %rax,%rdi
   1eb35:	e8 e6 66 fe ff       	call   5220 <_Znwm@plt>
   1eb3a:	90                   	nop
      }
   1eb3b:	c9                   	leave
   1eb3c:	c3                   	ret

000000000001eb3d <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1eb3d:	55                   	push   %rbp
   1eb3e:	48 89 e5             	mov    %rsp,%rbp
   1eb41:	53                   	push   %rbx
   1eb42:	48 83 ec 38          	sub    $0x38,%rsp
   1eb46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1eb4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1eb4e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1eb52:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1eb56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1eb5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1eb5e:	eb 49                	jmp    1eba9 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   1eb60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1eb64:	48 89 c7             	mov    %rax,%rdi
   1eb67:	e8 45 f3 ff ff       	call   1deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1eb6c:	48 89 c3             	mov    %rax,%rbx
   1eb6f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1eb73:	48 89 c7             	mov    %rax,%rdi
   1eb76:	e8 f5 09 00 00       	call   1f570 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>
   1eb7b:	48 89 c7             	mov    %rax,%rdi
   1eb7e:	e8 2e f3 ff ff       	call   1deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1eb83:	48 89 c1             	mov    %rax,%rcx
   1eb86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1eb8a:	48 89 c2             	mov    %rax,%rdx
   1eb8d:	48 89 de             	mov    %rbx,%rsi
   1eb90:	48 89 cf             	mov    %rcx,%rdi
   1eb93:	e8 e9 09 00 00       	call   1f581 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1eb98:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   1eb9d:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1eba1:	48 89 c7             	mov    %rax,%rdi
   1eba4:	e8 a7 09 00 00       	call   1f550 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>
   1eba9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ebad:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1ebb1:	75 ad                	jne    1eb60 <_ZSt14__relocate_a_1IPP18VkPhysicalDevice_TN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   1ebb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1ebb7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1ebbb:	c9                   	leave
   1ebbc:	c3                   	ret
   1ebbd:	90                   	nop

000000000001ebbe <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1ebbe:	55                   	push   %rbp
   1ebbf:	48 89 e5             	mov    %rsp,%rbp
   1ebc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1ebc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ebca:	5d                   	pop    %rbp
   1ebcb:	c3                   	ret

000000000001ebcc <_ZNKSt15__new_allocatorIN2vk4raii14PhysicalDeviceEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1ebcc:	55                   	push   %rbp
   1ebcd:	48 89 e5             	mov    %rsp,%rbp
   1ebd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1ebd4:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
   1ebdb:	ff ff 07 
      }
   1ebde:	5d                   	pop    %rbp
   1ebdf:	c3                   	ret

000000000001ebe0 <_ZSt4moveIRN2vk4raii14PhysicalDeviceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
   1ebe0:	55                   	push   %rbp
   1ebe1:	48 89 e5             	mov    %rsp,%rbp
   1ebe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1ebe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ebec:	5d                   	pop    %rbp
   1ebed:	c3                   	ret

000000000001ebee <_ZNSt16allocator_traitsISaIN2vk4raii14PhysicalDeviceEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1ebee:	55                   	push   %rbp
   1ebef:	48 89 e5             	mov    %rsp,%rbp
   1ebf2:	48 83 ec 20          	sub    $0x20,%rsp
   1ebf6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ebfa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ebfe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ec02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ec06:	48 89 c7             	mov    %rax,%rdi
   1ec09:	e8 ca 09 00 00       	call   1f5d8 <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1ec0e:	48 89 c2             	mov    %rax,%rdx
   1ec11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ec15:	48 89 d6             	mov    %rdx,%rsi
   1ec18:	48 89 c7             	mov    %rax,%rdi
   1ec1b:	e8 c6 09 00 00       	call   1f5e6 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
   1ec20:	90                   	nop
   1ec21:	c9                   	leave
   1ec22:	c3                   	ret

000000000001ec23 <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1ec23:	55                   	push   %rbp
   1ec24:	48 89 e5             	mov    %rsp,%rbp
   1ec27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1ec2b:	90                   	nop
   1ec2c:	5d                   	pop    %rbp
   1ec2d:	c3                   	ret

000000000001ec2e <_ZN2vk21QueueFamilyPropertiesC1Ev>:
  {
    using Type = QueueFamilyGlobalPriorityPropertiesKHR;
  };
  using QueueFamilyGlobalPriorityPropertiesEXT = QueueFamilyGlobalPriorityPropertiesKHR;

  struct QueueFamilyProperties
   1ec2e:	55                   	push   %rbp
   1ec2f:	48 89 e5             	mov    %rsp,%rbp
   1ec32:	48 83 ec 10          	sub    $0x10,%rsp
   1ec36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ec3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec3e:	48 89 c7             	mov    %rax,%rdi
   1ec41:	e8 52 9b ff ff       	call   18798 <_ZN2vk5FlagsINS_13QueueFlagBitsEEC1Ev>
   1ec46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec4a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1ec51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec55:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1ec5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec60:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1ec67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec6b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1ec72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec76:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1ec7d:	90                   	nop
   1ec7e:	c9                   	leave
   1ec7f:	c3                   	ret

000000000001ec80 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ec80:	55                   	push   %rbp
   1ec81:	48 89 e5             	mov    %rsp,%rbp
   1ec84:	48 83 ec 10          	sub    $0x10,%rsp
   1ec88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ec8c:	e8 0d 75 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ec91:	84 c0                	test   %al,%al
   1ec93:	74 0e                	je     1eca3 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ec95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ec99:	48 89 c7             	mov    %rax,%rdi
   1ec9c:	e8 8a 09 00 00       	call   1f62b <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1eca1:	eb 42                	jmp    1ece5 <_ZSt10_ConstructIN2vk21QueueFamilyPropertiesEJEEvPT_DpOT0_+0x65>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1eca3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eca7:	48 89 c6             	mov    %rax,%rsi
   1ecaa:	bf 18 00 00 00       	mov    $0x18,%edi
   1ecaf:	e8 00 75 fe ff       	call   61b4 <_ZnwmPv>
   1ecb4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
   1ecba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
   1ecc1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
   1ecc8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
   1eccf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
   1ecd6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   1ecdd:	48 89 c7             	mov    %rax,%rdi
   1ece0:	e8 49 ff ff ff       	call   1ec2e <_ZN2vk21QueueFamilyPropertiesC1Ev>
    }
   1ece5:	c9                   	leave
   1ece6:	c3                   	ret
   1ece7:	90                   	nop

000000000001ece8 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1ece8:	55                   	push   %rbp
   1ece9:	48 89 e5             	mov    %rsp,%rbp
   1ecec:	48 83 ec 20          	sub    $0x20,%rsp
   1ecf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ecf4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ecf8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1ecfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ed00:	48 89 c7             	mov    %rax,%rdi
   1ed03:	e8 7e 09 00 00       	call   1f686 <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>
   1ed08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ed0c:	0f 92 c0             	setb   %al
   1ed0f:	0f b6 c0             	movzbl %al,%eax
   1ed12:	48 85 c0             	test   %rax,%rax
   1ed15:	0f 95 c0             	setne  %al
   1ed18:	84 c0                	test   %al,%al
   1ed1a:	74 1a                	je     1ed36 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1ed1c:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
   1ed23:	aa aa 0a 
   1ed26:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ed2a:	73 05                	jae    1ed31 <_ZNSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1ed2c:	e8 4f 64 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1ed31:	e8 4a 63 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ed36:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ed3a:	48 89 d0             	mov    %rdx,%rax
   1ed3d:	48 01 c0             	add    %rax,%rax
   1ed40:	48 01 d0             	add    %rdx,%rax
   1ed43:	48 c1 e0 03          	shl    $0x3,%rax
   1ed47:	48 89 c7             	mov    %rax,%rdi
   1ed4a:	e8 d1 64 fe ff       	call   5220 <_Znwm@plt>
   1ed4f:	90                   	nop
      }
   1ed50:	c9                   	leave
   1ed51:	c3                   	ret

000000000001ed52 <_ZSt19__relocate_object_aIN2vk21QueueFamilyPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1ed52:	55                   	push   %rbp
   1ed53:	48 89 e5             	mov    %rsp,%rbp
   1ed56:	48 83 ec 20          	sub    $0x20,%rsp
   1ed5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ed5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ed62:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1ed66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ed6a:	48 89 c7             	mov    %rax,%rdi
   1ed6d:	e8 28 09 00 00       	call   1f69a <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1ed72:	48 89 c2             	mov    %rax,%rdx
   1ed75:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1ed79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ed7d:	48 89 ce             	mov    %rcx,%rsi
   1ed80:	48 89 c7             	mov    %rax,%rdi
   1ed83:	e8 20 09 00 00       	call   1f6a8 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1ed88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ed8c:	48 89 c7             	mov    %rax,%rdi
   1ed8f:	e8 75 f3 ff ff       	call   1e109 <_ZSt11__addressofIN2vk21QueueFamilyPropertiesEEPT_RS2_>
   1ed94:	48 89 c2             	mov    %rax,%rdx
   1ed97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ed9b:	48 89 d6             	mov    %rdx,%rsi
   1ed9e:	48 89 c7             	mov    %rax,%rdi
   1eda1:	e8 37 09 00 00       	call   1f6dd <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1eda6:	90                   	nop
   1eda7:	c9                   	leave
   1eda8:	c3                   	ret

000000000001eda9 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1eda9:	55                   	push   %rbp
   1edaa:	48 89 e5             	mov    %rsp,%rbp
   1edad:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1edb1:	90                   	nop
   1edb2:	5d                   	pop    %rbp
   1edb3:	c3                   	ret

000000000001edb4 <_ZN2vk19ExtensionPropertiesC1Ev>:
  struct ExtensionProperties
   1edb4:	55                   	push   %rbp
   1edb5:	48 89 e5             	mov    %rsp,%rbp
   1edb8:	48 83 ec 10          	sub    $0x10,%rsp
   1edbc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1edc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1edc4:	48 89 c7             	mov    %rax,%rdi
   1edc7:	e8 9c 8d ff ff       	call   17b68 <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1edcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1edd0:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1edd7:	00 00 00 
   1edda:	90                   	nop
   1eddb:	c9                   	leave
   1eddc:	c3                   	ret

000000000001eddd <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1eddd:	55                   	push   %rbp
   1edde:	48 89 e5             	mov    %rsp,%rbp
   1ede1:	48 83 ec 10          	sub    $0x10,%rsp
   1ede5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ede9:	e8 b0 73 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1edee:	84 c0                	test   %al,%al
   1edf0:	74 0e                	je     1ee00 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1edf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1edf6:	48 89 c7             	mov    %rax,%rdi
   1edf9:	e8 fe 08 00 00       	call   1f6fc <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1edfe:	eb 59                	jmp    1ee59 <_ZSt10_ConstructIN2vk19ExtensionPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ee00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ee04:	48 89 c6             	mov    %rax,%rsi
   1ee07:	bf 04 01 00 00       	mov    $0x104,%edi
   1ee0c:	e8 a3 73 fe ff       	call   61b4 <_ZnwmPv>
   1ee11:	49 89 c0             	mov    %rax,%r8
   1ee14:	4c 89 c0             	mov    %r8,%rax
   1ee17:	b9 04 01 00 00       	mov    $0x104,%ecx
   1ee1c:	be 00 00 00 00       	mov    $0x0,%esi
   1ee21:	48 89 30             	mov    %rsi,(%rax)
   1ee24:	89 ca                	mov    %ecx,%edx
   1ee26:	48 01 c2             	add    %rax,%rdx
   1ee29:	48 83 c2 08          	add    $0x8,%rdx
   1ee2d:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1ee31:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1ee35:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1ee39:	48 29 d0             	sub    %rdx,%rax
   1ee3c:	01 c1                	add    %eax,%ecx
   1ee3e:	83 e1 f8             	and    $0xfffffff8,%ecx
   1ee41:	89 c8                	mov    %ecx,%eax
   1ee43:	c1 e8 03             	shr    $0x3,%eax
   1ee46:	89 c1                	mov    %eax,%ecx
   1ee48:	48 89 d7             	mov    %rdx,%rdi
   1ee4b:	48 89 f0             	mov    %rsi,%rax
   1ee4e:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1ee51:	4c 89 c7             	mov    %r8,%rdi
   1ee54:	e8 5b ff ff ff       	call   1edb4 <_ZN2vk19ExtensionPropertiesC1Ev>
    }
   1ee59:	c9                   	leave
   1ee5a:	c3                   	ret
   1ee5b:	90                   	nop

000000000001ee5c <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1ee5c:	55                   	push   %rbp
   1ee5d:	48 89 e5             	mov    %rsp,%rbp
   1ee60:	48 83 ec 20          	sub    $0x20,%rsp
   1ee64:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ee68:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ee6c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1ee70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ee74:	48 89 c7             	mov    %rax,%rdi
   1ee77:	e8 f0 08 00 00       	call   1f76c <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>
   1ee7c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ee80:	0f 92 c0             	setb   %al
   1ee83:	0f b6 c0             	movzbl %al,%eax
   1ee86:	48 85 c0             	test   %rax,%rax
   1ee89:	0f 95 c0             	setne  %al
   1ee8c:	84 c0                	test   %al,%al
   1ee8e:	74 1a                	je     1eeaa <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1ee90:	48 b8 fc c0 0f fc c0 	movabs $0xfc0fc0fc0fc0fc,%rax
   1ee97:	0f fc 00 
   1ee9a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ee9e:	73 05                	jae    1eea5 <_ZNSt15__new_allocatorIN2vk19ExtensionPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1eea0:	e8 db 62 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1eea5:	e8 d6 61 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1eeaa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1eeae:	48 89 d0             	mov    %rdx,%rax
   1eeb1:	48 c1 e0 06          	shl    $0x6,%rax
   1eeb5:	48 01 d0             	add    %rdx,%rax
   1eeb8:	48 c1 e0 02          	shl    $0x2,%rax
   1eebc:	48 89 c7             	mov    %rax,%rdi
   1eebf:	e8 5c 63 fe ff       	call   5220 <_Znwm@plt>
   1eec4:	90                   	nop
      }
   1eec5:	c9                   	leave
   1eec6:	c3                   	ret

000000000001eec7 <_ZSt19__relocate_object_aIN2vk19ExtensionPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1eec7:	55                   	push   %rbp
   1eec8:	48 89 e5             	mov    %rsp,%rbp
   1eecb:	48 83 ec 20          	sub    $0x20,%rsp
   1eecf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1eed3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1eed7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1eedb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1eedf:	48 89 c7             	mov    %rax,%rdi
   1eee2:	e8 99 08 00 00       	call   1f780 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1eee7:	48 89 c2             	mov    %rax,%rdx
   1eeea:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1eeee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eef2:	48 89 ce             	mov    %rcx,%rsi
   1eef5:	48 89 c7             	mov    %rax,%rdi
   1eef8:	e8 91 08 00 00       	call   1f78e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1eefd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ef01:	48 89 c7             	mov    %rax,%rdi
   1ef04:	e8 27 f3 ff ff       	call   1e230 <_ZSt11__addressofIN2vk19ExtensionPropertiesEEPT_RS2_>
   1ef09:	48 89 c2             	mov    %rax,%rdx
   1ef0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ef10:	48 89 d6             	mov    %rdx,%rsi
   1ef13:	48 89 c7             	mov    %rax,%rdi
   1ef16:	e8 a8 08 00 00       	call   1f7c3 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1ef1b:	90                   	nop
   1ef1c:	c9                   	leave
   1ef1d:	c3                   	ret

000000000001ef1e <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>:
    destroy_at(_Tp* __location)
   1ef1e:	55                   	push   %rbp
   1ef1f:	48 89 e5             	mov    %rsp,%rbp
   1ef22:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
   1ef26:	90                   	nop
   1ef27:	5d                   	pop    %rbp
   1ef28:	c3                   	ret
   1ef29:	90                   	nop

000000000001ef2a <_ZN2vk15LayerPropertiesC1Ev>:
  struct LayerProperties
   1ef2a:	55                   	push   %rbp
   1ef2b:	48 89 e5             	mov    %rsp,%rbp
   1ef2e:	48 83 ec 10          	sub    $0x10,%rsp
   1ef32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ef36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef3a:	48 89 c7             	mov    %rax,%rdi
   1ef3d:	e8 26 8c ff ff       	call   17b68 <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1ef42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef46:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
   1ef4d:	00 00 00 
   1ef50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef54:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%rax)
   1ef5b:	00 00 00 
   1ef5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef62:	48 05 08 01 00 00    	add    $0x108,%rax
   1ef68:	48 89 c7             	mov    %rax,%rdi
   1ef6b:	e8 f8 8b ff ff       	call   17b68 <_ZN2vk14ArrayWrapper1DIcLm256EEC1Ev>
   1ef70:	90                   	nop
   1ef71:	c9                   	leave
   1ef72:	c3                   	ret

000000000001ef73 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1ef73:	55                   	push   %rbp
   1ef74:	48 89 e5             	mov    %rsp,%rbp
   1ef77:	48 83 ec 10          	sub    $0x10,%rsp
   1ef7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1ef7f:	e8 1a 72 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1ef84:	84 c0                	test   %al,%al
   1ef86:	74 0e                	je     1ef96 <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1ef88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef8c:	48 89 c7             	mov    %rax,%rdi
   1ef8f:	e8 4e 08 00 00       	call   1f7e2 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1ef94:	eb 59                	jmp    1efef <_ZSt10_ConstructIN2vk15LayerPropertiesEJEEvPT_DpOT0_+0x7c>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ef96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ef9a:	48 89 c6             	mov    %rax,%rsi
   1ef9d:	bf 08 02 00 00       	mov    $0x208,%edi
   1efa2:	e8 0d 72 fe ff       	call   61b4 <_ZnwmPv>
   1efa7:	49 89 c0             	mov    %rax,%r8
   1efaa:	4c 89 c0             	mov    %r8,%rax
   1efad:	b9 08 02 00 00       	mov    $0x208,%ecx
   1efb2:	be 00 00 00 00       	mov    $0x0,%esi
   1efb7:	48 89 30             	mov    %rsi,(%rax)
   1efba:	89 ca                	mov    %ecx,%edx
   1efbc:	48 01 c2             	add    %rax,%rdx
   1efbf:	48 83 c2 08          	add    $0x8,%rdx
   1efc3:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1efc7:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1efcb:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1efcf:	48 29 d0             	sub    %rdx,%rax
   1efd2:	01 c1                	add    %eax,%ecx
   1efd4:	83 e1 f8             	and    $0xfffffff8,%ecx
   1efd7:	89 c8                	mov    %ecx,%eax
   1efd9:	c1 e8 03             	shr    $0x3,%eax
   1efdc:	89 c1                	mov    %eax,%ecx
   1efde:	48 89 d7             	mov    %rdx,%rdi
   1efe1:	48 89 f0             	mov    %rsi,%rax
   1efe4:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1efe7:	4c 89 c7             	mov    %r8,%rdi
   1efea:	e8 3b ff ff ff       	call   1ef2a <_ZN2vk15LayerPropertiesC1Ev>
    }
   1efef:	c9                   	leave
   1eff0:	c3                   	ret
   1eff1:	90                   	nop

000000000001eff2 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1eff2:	55                   	push   %rbp
   1eff3:	48 89 e5             	mov    %rsp,%rbp
   1eff6:	48 83 ec 20          	sub    $0x20,%rsp
   1effa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1effe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f002:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1f006:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f00a:	48 89 c7             	mov    %rax,%rdi
   1f00d:	e8 40 08 00 00       	call   1f852 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>
   1f012:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f016:	0f 92 c0             	setb   %al
   1f019:	0f b6 c0             	movzbl %al,%eax
   1f01c:	48 85 c0             	test   %rax,%rax
   1f01f:	0f 95 c0             	setne  %al
   1f022:	84 c0                	test   %al,%al
   1f024:	74 1a                	je     1f040 <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1f026:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1f02d:	07 7e 00 
   1f030:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f034:	73 05                	jae    1f03b <_ZNSt15__new_allocatorIN2vk15LayerPropertiesEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1f036:	e8 45 61 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1f03b:	e8 40 60 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f040:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f044:	48 89 d0             	mov    %rdx,%rax
   1f047:	48 c1 e0 06          	shl    $0x6,%rax
   1f04b:	48 01 d0             	add    %rdx,%rax
   1f04e:	48 c1 e0 03          	shl    $0x3,%rax
   1f052:	48 89 c7             	mov    %rax,%rdi
   1f055:	e8 c6 61 fe ff       	call   5220 <_Znwm@plt>
   1f05a:	90                   	nop
      }
   1f05b:	c9                   	leave
   1f05c:	c3                   	ret

000000000001f05d <_ZSt19__relocate_object_aIN2vk15LayerPropertiesES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1f05d:	55                   	push   %rbp
   1f05e:	48 89 e5             	mov    %rsp,%rbp
   1f061:	48 83 ec 20          	sub    $0x20,%rsp
   1f065:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f069:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f06d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1f071:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f075:	48 89 c7             	mov    %rax,%rdi
   1f078:	e8 e9 07 00 00       	call   1f866 <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>
   1f07d:	48 89 c2             	mov    %rax,%rdx
   1f080:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1f084:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f088:	48 89 ce             	mov    %rcx,%rsi
   1f08b:	48 89 c7             	mov    %rax,%rdi
   1f08e:	e8 e1 07 00 00       	call   1f874 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1f093:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f097:	48 89 c7             	mov    %rax,%rdi
   1f09a:	e8 c1 f2 ff ff       	call   1e360 <_ZSt11__addressofIN2vk15LayerPropertiesEEPT_RS2_>
   1f09f:	48 89 c2             	mov    %rax,%rdx
   1f0a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f0a6:	48 89 d6             	mov    %rdx,%rsi
   1f0a9:	48 89 c7             	mov    %rax,%rdi
   1f0ac:	e8 f8 07 00 00       	call   1f8a9 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>
    }
   1f0b1:	90                   	nop
   1f0b2:	c9                   	leave
   1f0b3:	c3                   	ret

000000000001f0b4 <_ZN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1f0b4:	55                   	push   %rbp
   1f0b5:	48 89 e5             	mov    %rsp,%rbp
   1f0b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1f0bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f0c0:	48 8b 00             	mov    (%rax),%rax
   1f0c3:	48 8d 90 08 02 00 00 	lea    0x208(%rax),%rdx
   1f0ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f0ce:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1f0d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1f0d5:	5d                   	pop    %rbp
   1f0d6:	c3                   	ret
   1f0d7:	90                   	nop

000000000001f0d8 <_ZNK9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1f0d8:	55                   	push   %rbp
   1f0d9:	48 89 e5             	mov    %rsp,%rbp
   1f0dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1f0e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f0e4:	48 8b 00             	mov    (%rax),%rax
   1f0e7:	5d                   	pop    %rbp
   1f0e8:	c3                   	ret

000000000001f0e9 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1f0e9:	55                   	push   %rbp
   1f0ea:	48 89 e5             	mov    %rsp,%rbp
   1f0ed:	53                   	push   %rbx
   1f0ee:	48 83 ec 18          	sub    $0x18,%rsp
   1f0f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f0f6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      if (std::__is_constant_evaluated())
   1f0fa:	e8 9f 70 fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1f0ff:	84 c0                	test   %al,%al
   1f101:	74 20                	je     1f123 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0x3a>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f103:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f107:	48 89 c7             	mov    %rax,%rdi
   1f10a:	e8 b9 07 00 00       	call   1f8c8 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   1f10f:	48 89 c2             	mov    %rax,%rdx
   1f112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f116:	48 89 d6             	mov    %rdx,%rsi
   1f119:	48 89 c7             	mov    %rax,%rdi
   1f11c:	e8 b5 07 00 00       	call   1f8d6 <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	  return;
   1f121:	eb 6e                	jmp    1f191 <_ZSt10_ConstructIN2vk15LayerPropertiesEJRKS1_EEvPT_DpOT0_+0xa8>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1f123:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f127:	48 89 c6             	mov    %rax,%rsi
   1f12a:	bf 08 02 00 00       	mov    $0x208,%edi
   1f12f:	e8 80 70 fe ff       	call   61b4 <_ZnwmPv>
   1f134:	48 89 c3             	mov    %rax,%rbx
   1f137:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f13b:	48 89 c7             	mov    %rax,%rdi
   1f13e:	e8 85 07 00 00       	call   1f8c8 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   1f143:	48 89 c2             	mov    %rax,%rdx
   1f146:	48 89 d8             	mov    %rbx,%rax
   1f149:	b9 08 02 00 00       	mov    $0x208,%ecx
   1f14e:	48 8b 32             	mov    (%rdx),%rsi
   1f151:	48 89 30             	mov    %rsi,(%rax)
   1f154:	89 ce                	mov    %ecx,%esi
   1f156:	48 01 c6             	add    %rax,%rsi
   1f159:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1f15d:	89 ce                	mov    %ecx,%esi
   1f15f:	48 01 d6             	add    %rdx,%rsi
   1f162:	48 83 c6 08          	add    $0x8,%rsi
   1f166:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1f16a:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1f16e:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1f172:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1f176:	48 29 f8             	sub    %rdi,%rax
   1f179:	48 29 c2             	sub    %rax,%rdx
   1f17c:	01 c1                	add    %eax,%ecx
   1f17e:	83 e1 f8             	and    $0xfffffff8,%ecx
   1f181:	89 c8                	mov    %ecx,%eax
   1f183:	c1 e8 03             	shr    $0x3,%eax
   1f186:	89 c0                	mov    %eax,%eax
   1f188:	48 89 d6             	mov    %rdx,%rsi
   1f18b:	48 89 c1             	mov    %rax,%rcx
   1f18e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    }
   1f191:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f195:	c9                   	leave
   1f196:	c3                   	ret

000000000001f197 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   1f197:	55                   	push   %rbp
   1f198:	48 89 e5             	mov    %rsp,%rbp
   1f19b:	48 83 ec 20          	sub    $0x20,%rsp
   1f19f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f1a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f1a7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ return std::__do_uninit_copy(__first, __last, __result); }
   1f1ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f1af:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f1b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1b7:	48 89 ce             	mov    %rcx,%rsi
   1f1ba:	48 89 c7             	mov    %rax,%rdi
   1f1bd:	e8 b8 f3 ff ff       	call   1e57a <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN2vk15LayerPropertiesESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
   1f1c2:	c9                   	leave
   1f1c3:	c3                   	ret

000000000001f1c4 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
   1f1c4:	55                   	push   %rbp
   1f1c5:	48 89 e5             	mov    %rsp,%rbp
   1f1c8:	48 83 ec 10          	sub    $0x10,%rsp
   1f1cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      if (std::__is_constant_evaluated())
   1f1d0:	e8 c9 6f fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1f1d5:	84 c0                	test   %al,%al
   1f1d7:	74 0e                	je     1f1e7 <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x23>
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f1d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1dd:	48 89 c7             	mov    %rax,%rdi
   1f1e0:	e8 79 07 00 00       	call   1f95e <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  return;
   1f1e5:	eb 18                	jmp    1f1ff <_ZSt10_ConstructIPKcJEEvPT_DpOT0_+0x3b>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1f1e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f1eb:	48 89 c6             	mov    %rax,%rsi
   1f1ee:	bf 08 00 00 00       	mov    $0x8,%edi
   1f1f3:	e8 bc 6f fe ff       	call   61b4 <_ZnwmPv>
   1f1f8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    }
   1f1ff:	c9                   	leave
   1f200:	c3                   	ret

000000000001f201 <_ZSt6fill_nIPPKcmS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
   1f201:	55                   	push   %rbp
   1f202:	48 89 e5             	mov    %rsp,%rbp
   1f205:	48 83 ec 20          	sub    $0x20,%rsp
   1f209:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f20d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f211:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
			       std::__iterator_category(__first));
   1f215:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
   1f219:	48 89 c7             	mov    %rax,%rdi
   1f21c:	e8 63 07 00 00       	call   1f984 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
   1f221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f225:	48 89 c7             	mov    %rax,%rdi
   1f228:	e8 21 fd fe ff       	call   ef4e <_ZSt17__size_to_integerm>
   1f22d:	48 89 c1             	mov    %rax,%rcx
   1f230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f234:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f238:	48 89 ce             	mov    %rcx,%rsi
   1f23b:	48 89 c7             	mov    %rax,%rdi
   1f23e:	e8 4c 07 00 00       	call   1f98f <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
    }
   1f243:	c9                   	leave
   1f244:	c3                   	ret
   1f245:	90                   	nop

000000000001f246 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   1f246:	55                   	push   %rbp
   1f247:	48 89 e5             	mov    %rsp,%rbp
   1f24a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f24e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
   1f252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f256:	48 8b 10             	mov    (%rax),%rdx
   1f259:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f25d:	48 89 10             	mov    %rdx,(%rax)
   1f260:	90                   	nop
   1f261:	5d                   	pop    %rbp
   1f262:	c3                   	ret

000000000001f263 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
   1f263:	55                   	push   %rbp
   1f264:	48 89 e5             	mov    %rsp,%rbp
   1f267:	48 83 ec 30          	sub    $0x30,%rsp
   1f26b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f26f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f273:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1f277:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
      ptrdiff_t __count = __last - __first;
   1f27b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f27f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1f283:	48 c1 f8 03          	sar    $0x3,%rax
   1f287:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (__count > 0)
   1f28b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1f290:	7e 68                	jle    1f2fa <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x97>
	  if (std::is_constant_evaluated())
   1f292:	e8 12 6f fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1f297:	84 c0                	test   %al,%al
   1f299:	74 40                	je     1f2db <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x78>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
   1f29b:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
   1f29f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1f2a3:	48 89 d6             	mov    %rdx,%rsi
   1f2a6:	48 89 c7             	mov    %rax,%rdi
   1f2a9:	e8 98 ff ff ff       	call   1f246 <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEC1ERKS3_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
   1f2ae:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1f2b2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f2b6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   1f2ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f2be:	48 89 c7             	mov    %rax,%rdi
   1f2c1:	e8 26 07 00 00       	call   1f9ec <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>
   1f2c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	      return __out.base();
   1f2ca:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   1f2ce:	48 89 c7             	mov    %rax,%rdi
   1f2d1:	e8 96 07 00 00       	call   1fa6c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>
   1f2d6:	48 8b 00             	mov    (%rax),%rax
   1f2d9:	eb 2e                	jmp    1f309 <_ZSt14__relocate_a_1IPKcS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0xa6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1f2db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f2df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f2e6:	00 
   1f2e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f2eb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1f2ef:	48 89 ce             	mov    %rcx,%rsi
   1f2f2:	48 89 c7             	mov    %rax,%rdi
   1f2f5:	e8 66 60 fe ff       	call   5360 <memmove@plt>
      return __result + __count;
   1f2fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f2fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1f302:	48 c1 e2 03          	shl    $0x3,%rdx
   1f306:	48 01 d0             	add    %rdx,%rax
    }
   1f309:	c9                   	leave
   1f30a:	c3                   	ret

000000000001f30b <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   1f30b:	55                   	push   %rbp
   1f30c:	48 89 e5             	mov    %rsp,%rbp
   1f30f:	48 83 ec 20          	sub    $0x20,%rsp
   1f313:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f317:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f31b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (std::is_constant_evaluated())
   1f31f:	e8 85 6e fe ff       	call   61a9 <_ZSt21is_constant_evaluatedv>
   1f324:	84 c0                	test   %al,%al
   1f326:	74 19                	je     1f341 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x36>
	  __copy_m(__first, __last, __result);
   1f328:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f32c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f334:	48 89 ce             	mov    %rcx,%rsi
   1f337:	48 89 c7             	mov    %rax,%rdi
   1f33a:	e8 3b 07 00 00       	call   1fa7a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>
   1f33f:	eb 18                	jmp    1f359 <_ZSt14__copy_move_a2ILb0EPKPKcPS1_ET1_T0_S6_S5_+0x4e>
			      _Category>::__copy_m(__first, __last, __result);
   1f341:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f345:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f349:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f34d:	48 89 ce             	mov    %rcx,%rsi
   1f350:	48 89 c7             	mov    %rax,%rdi
   1f353:	e8 6e 07 00 00       	call   1fac6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>
   1f358:	90                   	nop
    }
   1f359:	c9                   	leave
   1f35a:	c3                   	ret
   1f35b:	90                   	nop

000000000001f35c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>:
    struct pair
   1f35c:	55                   	push   %rbp
   1f35d:	48 89 e5             	mov    %rsp,%rbp
   1f360:	48 83 ec 10          	sub    $0x10,%rsp
   1f364:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f36c:	48 89 c7             	mov    %rax,%rdi
   1f36f:	e8 64 ab fe ff       	call   9ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
   1f374:	90                   	nop
   1f375:	c9                   	leave
   1f376:	c3                   	ret

000000000001f377 <_ZSt10destroy_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEvPT_>:
    destroy_at(_Tp* __location)
   1f377:	55                   	push   %rbp
   1f378:	48 89 e5             	mov    %rsp,%rbp
   1f37b:	48 83 ec 10          	sub    $0x10,%rsp
   1f37f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	__location->~_Tp();
   1f383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f387:	48 89 c7             	mov    %rax,%rdi
   1f38a:	e8 cd ff ff ff       	call   1f35c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjED1Ev>
    }
   1f38f:	90                   	nop
   1f390:	c9                   	leave
   1f391:	c3                   	ret

000000000001f392 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m>:
      allocate(allocator_type& __a, size_type __n)
   1f392:	55                   	push   %rbp
   1f393:	48 89 e5             	mov    %rsp,%rbp
   1f396:	48 83 ec 20          	sub    $0x20,%rsp
   1f39a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f39e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f3a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f3a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f3aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f3ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (std::__is_constant_evaluated())
   1f3b2:	e8 e7 6d fe ff       	call   619e <_ZSt23__is_constant_evaluatedv>
   1f3b7:	84 c0                	test   %al,%al
   1f3b9:	74 39                	je     1f3f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x62>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
   1f3bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f3bf:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f3c4:	ba 48 00 00 00       	mov    $0x48,%edx
   1f3c9:	48 f7 e2             	mul    %rdx
   1f3cc:	71 05                	jno    1f3d3 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x41>
   1f3ce:	b9 01 00 00 00       	mov    $0x1,%ecx
   1f3d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1f3d7:	48 89 c8             	mov    %rcx,%rax
   1f3da:	83 e0 01             	and    $0x1,%eax
   1f3dd:	84 c0                	test   %al,%al
   1f3df:	74 05                	je     1f3e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x54>
	      std::__throw_bad_array_new_length();
   1f3e1:	e8 9a 5d fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    return static_cast<_Tp*>(::operator new(__n));
   1f3e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f3ea:	48 89 c7             	mov    %rax,%rdi
   1f3ed:	e8 2e 5e fe ff       	call   5220 <_Znwm@plt>
   1f3f2:	eb 19                	jmp    1f40d <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE8allocateERSB_m+0x7b>
	return __allocator_base<_Tp>::allocate(__n, 0);
   1f3f4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1f3f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f3fc:	ba 00 00 00 00       	mov    $0x0,%edx
   1f401:	48 89 ce             	mov    %rcx,%rsi
   1f404:	48 89 c7             	mov    %rax,%rdi
   1f407:	e8 0a 0b 00 00       	call   1ff16 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>
   1f40c:	90                   	nop
      { return __a.allocate(__n); }
   1f40d:	c9                   	leave
   1f40e:	c3                   	ret

000000000001f40f <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJOS7_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1f40f:	55                   	push   %rbp
   1f410:	48 89 e5             	mov    %rsp,%rbp
   1f413:	41 54                	push   %r12
   1f415:	53                   	push   %rbx
   1f416:	48 83 ec 30          	sub    $0x30,%rsp
   1f41a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f41e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1f422:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1f426:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1f42a:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f42e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f432:	48 89 c7             	mov    %rax,%rdi
   1f435:	e8 59 d2 ff ff       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1f43a:	49 89 c4             	mov    %rax,%r12
   1f43d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f441:	48 89 c7             	mov    %rax,%rdi
   1f444:	e8 3c d2 ff ff       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1f449:	48 89 c3             	mov    %rax,%rbx
   1f44c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f450:	48 89 c7             	mov    %rax,%rdi
   1f453:	e8 1f d2 ff ff       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1f458:	48 89 c6             	mov    %rax,%rsi
   1f45b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f45f:	4c 89 e1             	mov    %r12,%rcx
   1f462:	48 89 da             	mov    %rbx,%rdx
   1f465:	48 89 c7             	mov    %rax,%rdi
   1f468:	e8 19 07 00 00       	call   1fb86 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>
	}
   1f46d:	90                   	nop
   1f46e:	48 83 c4 30          	add    $0x30,%rsp
   1f472:	5b                   	pop    %rbx
   1f473:	41 5c                	pop    %r12
   1f475:	5d                   	pop    %rbp
   1f476:	c3                   	ret

000000000001f477 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1f477:	55                   	push   %rbp
   1f478:	48 89 e5             	mov    %rsp,%rbp
   1f47b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1f47f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f483:	5d                   	pop    %rbp
   1f484:	c3                   	ret
   1f485:	90                   	nop

000000000001f486 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
   1f486:	55                   	push   %rbp
   1f487:	48 89 e5             	mov    %rsp,%rbp
   1f48a:	48 83 ec 10          	sub    $0x10,%rsp
   1f48e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const _Tp*>(_M_addr()); }
   1f492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f496:	48 89 c7             	mov    %rax,%rdi
   1f499:	e8 96 07 00 00       	call   1fc34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>
   1f49e:	c9                   	leave
   1f49f:	c3                   	ret

000000000001f4a0 <_ZNSt10_Head_baseILm0EPN2vk4raii17ContextDispatcherELb0EE7_M_headERKS4_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
   1f4a0:	55                   	push   %rbp
   1f4a1:	48 89 e5             	mov    %rsp,%rbp
   1f4a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f4a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4ac:	5d                   	pop    %rbp
   1f4ad:	c3                   	ret

000000000001f4ae <_ZSt12construct_atIP18VkPhysicalDevice_TJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f4ae:	55                   	push   %rbp
   1f4af:	48 89 e5             	mov    %rsp,%rbp
   1f4b2:	48 83 ec 10          	sub    $0x10,%rsp
   1f4b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f4ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4be:	48 89 c6             	mov    %rax,%rsi
   1f4c1:	bf 08 00 00 00       	mov    $0x8,%edi
   1f4c6:	e8 e9 6c fe ff       	call   61b4 <_ZnwmPv>
   1f4cb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1f4d2:	c9                   	leave
   1f4d3:	c3                   	ret

000000000001f4d4 <_ZSt19__iterator_categoryIPP18VkPhysicalDevice_TENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f4d4:	55                   	push   %rbp
   1f4d5:	48 89 e5             	mov    %rsp,%rbp
   1f4d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f4dc:	90                   	nop
   1f4dd:	5d                   	pop    %rbp
   1f4de:	c3                   	ret

000000000001f4df <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f4df:	55                   	push   %rbp
   1f4e0:	48 89 e5             	mov    %rsp,%rbp
   1f4e3:	48 83 ec 20          	sub    $0x20,%rsp
   1f4e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f4eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f4ef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f4f3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f4f8:	75 06                	jne    1f500 <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f4fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f4fe:	eb 3a                	jmp    1f53a <_ZSt10__fill_n_aIPP18VkPhysicalDevice_TmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f504:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f50b:	00 
   1f50c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f510:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f514:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f51c:	48 89 ce             	mov    %rcx,%rsi
   1f51f:	48 89 c7             	mov    %rax,%rdi
   1f522:	e8 1b 07 00 00       	call   1fc42 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>
      return __first + __n;
   1f527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f52b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f532:	00 
   1f533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f537:	48 01 d0             	add    %rdx,%rax
    }
   1f53a:	c9                   	leave
   1f53b:	c3                   	ret

000000000001f53c <_ZNKSt15__new_allocatorIP18VkPhysicalDevice_TE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f53c:	55                   	push   %rbp
   1f53d:	48 89 e5             	mov    %rsp,%rbp
   1f540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f544:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rax
   1f54b:	ff ff 0f 
      }
   1f54e:	5d                   	pop    %rbp
   1f54f:	c3                   	ret

000000000001f550 <_ZN9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1f550:	55                   	push   %rbp
   1f551:	48 89 e5             	mov    %rsp,%rbp
   1f554:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1f558:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f55c:	48 8b 00             	mov    (%rax),%rax
   1f55f:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1f563:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f567:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1f56a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1f56e:	5d                   	pop    %rbp
   1f56f:	c3                   	ret

000000000001f570 <_ZNK9__gnu_cxx17__normal_iteratorIPP18VkPhysicalDevice_TvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1f570:	55                   	push   %rbp
   1f571:	48 89 e5             	mov    %rsp,%rbp
   1f574:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1f578:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f57c:	48 8b 00             	mov    (%rax),%rax
   1f57f:	5d                   	pop    %rbp
   1f580:	c3                   	ret

000000000001f581 <_ZSt19__relocate_object_aIP18VkPhysicalDevice_TS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1f581:	55                   	push   %rbp
   1f582:	48 89 e5             	mov    %rsp,%rbp
   1f585:	48 83 ec 20          	sub    $0x20,%rsp
   1f589:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f58d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f591:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1f595:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f599:	48 89 c7             	mov    %rax,%rdi
   1f59c:	e8 cf 06 00 00       	call   1fc70 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>
   1f5a1:	48 89 c2             	mov    %rax,%rdx
   1f5a4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1f5a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f5ac:	48 89 ce             	mov    %rcx,%rsi
   1f5af:	48 89 c7             	mov    %rax,%rdi
   1f5b2:	e8 c7 06 00 00       	call   1fc7e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1f5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f5bb:	48 89 c7             	mov    %rax,%rdi
   1f5be:	e8 ee e8 ff ff       	call   1deb1 <_ZSt11__addressofIP18VkPhysicalDevice_TEPT_RS2_>
   1f5c3:	48 89 c2             	mov    %rax,%rdx
   1f5c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f5ca:	48 89 d6             	mov    %rdx,%rsi
   1f5cd:	48 89 c7             	mov    %rax,%rdi
   1f5d0:	e8 de 06 00 00       	call   1fcb3 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>
    }
   1f5d5:	90                   	nop
   1f5d6:	c9                   	leave
   1f5d7:	c3                   	ret

000000000001f5d8 <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1f5d8:	55                   	push   %rbp
   1f5d9:	48 89 e5             	mov    %rsp,%rbp
   1f5dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1f5e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f5e4:	5d                   	pop    %rbp
   1f5e5:	c3                   	ret

000000000001f5e6 <_ZSt12construct_atIN2vk4raii14PhysicalDeviceEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f5e6:	55                   	push   %rbp
   1f5e7:	48 89 e5             	mov    %rsp,%rbp
   1f5ea:	53                   	push   %rbx
   1f5eb:	48 83 ec 18          	sub    $0x18,%rsp
   1f5ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f5f3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f5f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f5fb:	48 89 c6             	mov    %rax,%rsi
   1f5fe:	bf 10 00 00 00       	mov    $0x10,%edi
   1f603:	e8 ac 6b fe ff       	call   61b4 <_ZnwmPv>
   1f608:	48 89 c3             	mov    %rax,%rbx
   1f60b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f60f:	48 89 c7             	mov    %rax,%rdi
   1f612:	e8 c1 ff ff ff       	call   1f5d8 <_ZSt7forwardIN2vk4raii14PhysicalDeviceEEOT_RNSt16remove_referenceIS3_E4typeE>
   1f617:	48 89 c6             	mov    %rax,%rsi
   1f61a:	48 89 df             	mov    %rbx,%rdi
   1f61d:	e8 62 7c ff ff       	call   17284 <_ZN2vk4raii14PhysicalDeviceC1EOS1_>
   1f622:	48 89 d8             	mov    %rbx,%rax
   1f625:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f629:	c9                   	leave
   1f62a:	c3                   	ret

000000000001f62b <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f62b:	55                   	push   %rbp
   1f62c:	48 89 e5             	mov    %rsp,%rbp
   1f62f:	53                   	push   %rbx
   1f630:	48 83 ec 18          	sub    $0x18,%rsp
   1f634:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f638:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f63c:	48 89 c6             	mov    %rax,%rsi
   1f63f:	bf 18 00 00 00       	mov    $0x18,%edi
   1f644:	e8 6b 6b fe ff       	call   61b4 <_ZnwmPv>
   1f649:	48 89 c3             	mov    %rax,%rbx
   1f64c:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
   1f652:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%rbx)
   1f659:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
   1f660:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
   1f667:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
   1f66e:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
   1f675:	48 89 df             	mov    %rbx,%rdi
   1f678:	e8 b1 f5 ff ff       	call   1ec2e <_ZN2vk21QueueFamilyPropertiesC1Ev>
   1f67d:	48 89 d8             	mov    %rbx,%rax
   1f680:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f684:	c9                   	leave
   1f685:	c3                   	ret

000000000001f686 <_ZNKSt15__new_allocatorIN2vk21QueueFamilyPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f686:	55                   	push   %rbp
   1f687:	48 89 e5             	mov    %rsp,%rbp
   1f68a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f68e:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   1f695:	55 55 05 
      }
   1f698:	5d                   	pop    %rbp
   1f699:	c3                   	ret

000000000001f69a <_ZSt4moveIRN2vk21QueueFamilyPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1f69a:	55                   	push   %rbp
   1f69b:	48 89 e5             	mov    %rsp,%rbp
   1f69e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1f6a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6a6:	5d                   	pop    %rbp
   1f6a7:	c3                   	ret

000000000001f6a8 <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1f6a8:	55                   	push   %rbp
   1f6a9:	48 89 e5             	mov    %rsp,%rbp
   1f6ac:	48 83 ec 20          	sub    $0x20,%rsp
   1f6b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f6b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f6b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f6bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f6c0:	48 89 c7             	mov    %rax,%rdi
   1f6c3:	e8 0a 06 00 00       	call   1fcd2 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1f6c8:	48 89 c2             	mov    %rax,%rdx
   1f6cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f6cf:	48 89 d6             	mov    %rdx,%rsi
   1f6d2:	48 89 c7             	mov    %rax,%rdi
   1f6d5:	e8 06 06 00 00       	call   1fce0 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1f6da:	90                   	nop
   1f6db:	c9                   	leave
   1f6dc:	c3                   	ret

000000000001f6dd <_ZNSt16allocator_traitsISaIN2vk21QueueFamilyPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1f6dd:	55                   	push   %rbp
   1f6de:	48 89 e5             	mov    %rsp,%rbp
   1f6e1:	48 83 ec 10          	sub    $0x10,%rsp
   1f6e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f6e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1f6ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f6f1:	48 89 c7             	mov    %rax,%rdi
   1f6f4:	e8 2a f5 ff ff       	call   1ec23 <_ZSt10destroy_atIN2vk21QueueFamilyPropertiesEEvPT_>
	}
   1f6f9:	90                   	nop
   1f6fa:	c9                   	leave
   1f6fb:	c3                   	ret

000000000001f6fc <_ZSt12construct_atIN2vk19ExtensionPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f6fc:	55                   	push   %rbp
   1f6fd:	48 89 e5             	mov    %rsp,%rbp
   1f700:	53                   	push   %rbx
   1f701:	48 83 ec 18          	sub    $0x18,%rsp
   1f705:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f70d:	48 89 c6             	mov    %rax,%rsi
   1f710:	bf 04 01 00 00       	mov    $0x104,%edi
   1f715:	e8 9a 6a fe ff       	call   61b4 <_ZnwmPv>
   1f71a:	48 89 c3             	mov    %rax,%rbx
   1f71d:	48 89 d8             	mov    %rbx,%rax
   1f720:	b9 04 01 00 00       	mov    $0x104,%ecx
   1f725:	be 00 00 00 00       	mov    $0x0,%esi
   1f72a:	48 89 30             	mov    %rsi,(%rax)
   1f72d:	89 ca                	mov    %ecx,%edx
   1f72f:	48 01 c2             	add    %rax,%rdx
   1f732:	48 83 c2 08          	add    $0x8,%rdx
   1f736:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1f73a:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1f73e:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1f742:	48 29 d0             	sub    %rdx,%rax
   1f745:	01 c1                	add    %eax,%ecx
   1f747:	83 e1 f8             	and    $0xfffffff8,%ecx
   1f74a:	89 c8                	mov    %ecx,%eax
   1f74c:	c1 e8 03             	shr    $0x3,%eax
   1f74f:	89 c1                	mov    %eax,%ecx
   1f751:	48 89 d7             	mov    %rdx,%rdi
   1f754:	48 89 f0             	mov    %rsi,%rax
   1f757:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1f75a:	48 89 df             	mov    %rbx,%rdi
   1f75d:	e8 52 f6 ff ff       	call   1edb4 <_ZN2vk19ExtensionPropertiesC1Ev>
   1f762:	48 89 d8             	mov    %rbx,%rax
   1f765:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f769:	c9                   	leave
   1f76a:	c3                   	ret
   1f76b:	90                   	nop

000000000001f76c <_ZNKSt15__new_allocatorIN2vk19ExtensionPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f76c:	55                   	push   %rbp
   1f76d:	48 89 e5             	mov    %rsp,%rbp
   1f770:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f774:	48 b8 7e e0 07 7e e0 	movabs $0x7e07e07e07e07e,%rax
   1f77b:	07 7e 00 
      }
   1f77e:	5d                   	pop    %rbp
   1f77f:	c3                   	ret

000000000001f780 <_ZSt4moveIRN2vk19ExtensionPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1f780:	55                   	push   %rbp
   1f781:	48 89 e5             	mov    %rsp,%rbp
   1f784:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1f788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f78c:	5d                   	pop    %rbp
   1f78d:	c3                   	ret

000000000001f78e <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1f78e:	55                   	push   %rbp
   1f78f:	48 89 e5             	mov    %rsp,%rbp
   1f792:	48 83 ec 20          	sub    $0x20,%rsp
   1f796:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f79a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f79e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f7a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f7a6:	48 89 c7             	mov    %rax,%rdi
   1f7a9:	e8 85 05 00 00       	call   1fd33 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1f7ae:	48 89 c2             	mov    %rax,%rdx
   1f7b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f7b5:	48 89 d6             	mov    %rdx,%rsi
   1f7b8:	48 89 c7             	mov    %rax,%rdi
   1f7bb:	e8 81 05 00 00       	call   1fd41 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1f7c0:	90                   	nop
   1f7c1:	c9                   	leave
   1f7c2:	c3                   	ret

000000000001f7c3 <_ZNSt16allocator_traitsISaIN2vk19ExtensionPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1f7c3:	55                   	push   %rbp
   1f7c4:	48 89 e5             	mov    %rsp,%rbp
   1f7c7:	48 83 ec 10          	sub    $0x10,%rsp
   1f7cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7cf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1f7d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f7d7:	48 89 c7             	mov    %rax,%rdi
   1f7da:	e8 ca f5 ff ff       	call   1eda9 <_ZSt10destroy_atIN2vk19ExtensionPropertiesEEvPT_>
	}
   1f7df:	90                   	nop
   1f7e0:	c9                   	leave
   1f7e1:	c3                   	ret

000000000001f7e2 <_ZSt12construct_atIN2vk15LayerPropertiesEJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f7e2:	55                   	push   %rbp
   1f7e3:	48 89 e5             	mov    %rsp,%rbp
   1f7e6:	53                   	push   %rbx
   1f7e7:	48 83 ec 18          	sub    $0x18,%rsp
   1f7eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f7ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f7f3:	48 89 c6             	mov    %rax,%rsi
   1f7f6:	bf 08 02 00 00       	mov    $0x208,%edi
   1f7fb:	e8 b4 69 fe ff       	call   61b4 <_ZnwmPv>
   1f800:	48 89 c3             	mov    %rax,%rbx
   1f803:	48 89 d8             	mov    %rbx,%rax
   1f806:	b9 08 02 00 00       	mov    $0x208,%ecx
   1f80b:	be 00 00 00 00       	mov    $0x0,%esi
   1f810:	48 89 30             	mov    %rsi,(%rax)
   1f813:	89 ca                	mov    %ecx,%edx
   1f815:	48 01 c2             	add    %rax,%rdx
   1f818:	48 83 c2 08          	add    $0x8,%rdx
   1f81c:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
   1f820:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1f824:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
   1f828:	48 29 d0             	sub    %rdx,%rax
   1f82b:	01 c1                	add    %eax,%ecx
   1f82d:	83 e1 f8             	and    $0xfffffff8,%ecx
   1f830:	89 c8                	mov    %ecx,%eax
   1f832:	c1 e8 03             	shr    $0x3,%eax
   1f835:	89 c1                	mov    %eax,%ecx
   1f837:	48 89 d7             	mov    %rdx,%rdi
   1f83a:	48 89 f0             	mov    %rsi,%rax
   1f83d:	f3 48 ab             	rep stos %rax,%es:(%rdi)
   1f840:	48 89 df             	mov    %rbx,%rdi
   1f843:	e8 e2 f6 ff ff       	call   1ef2a <_ZN2vk15LayerPropertiesC1Ev>
   1f848:	48 89 d8             	mov    %rbx,%rax
   1f84b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f84f:	c9                   	leave
   1f850:	c3                   	ret
   1f851:	90                   	nop

000000000001f852 <_ZNKSt15__new_allocatorIN2vk15LayerPropertiesEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   1f852:	55                   	push   %rbp
   1f853:	48 89 e5             	mov    %rsp,%rbp
   1f856:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   1f85a:	48 b8 3f f0 03 3f f0 	movabs $0x3f03f03f03f03f,%rax
   1f861:	03 3f 00 
      }
   1f864:	5d                   	pop    %rbp
   1f865:	c3                   	ret

000000000001f866 <_ZSt4moveIRN2vk15LayerPropertiesEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1f866:	55                   	push   %rbp
   1f867:	48 89 e5             	mov    %rsp,%rbp
   1f86a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1f86e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f872:	5d                   	pop    %rbp
   1f873:	c3                   	ret

000000000001f874 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1f874:	55                   	push   %rbp
   1f875:	48 89 e5             	mov    %rsp,%rbp
   1f878:	48 83 ec 20          	sub    $0x20,%rsp
   1f87c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f880:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f884:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1f888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f88c:	48 89 c7             	mov    %rax,%rdi
   1f88f:	e8 35 05 00 00       	call   1fdc9 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1f894:	48 89 c2             	mov    %rax,%rdx
   1f897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f89b:	48 89 d6             	mov    %rdx,%rsi
   1f89e:	48 89 c7             	mov    %rax,%rdi
   1f8a1:	e8 31 05 00 00       	call   1fdd7 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1f8a6:	90                   	nop
   1f8a7:	c9                   	leave
   1f8a8:	c3                   	ret

000000000001f8a9 <_ZNSt16allocator_traitsISaIN2vk15LayerPropertiesEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1f8a9:	55                   	push   %rbp
   1f8aa:	48 89 e5             	mov    %rsp,%rbp
   1f8ad:	48 83 ec 10          	sub    $0x10,%rsp
   1f8b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f8b5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1f8b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f8bd:	48 89 c7             	mov    %rax,%rdi
   1f8c0:	e8 59 f6 ff ff       	call   1ef1e <_ZSt10destroy_atIN2vk15LayerPropertiesEEvPT_>
	}
   1f8c5:	90                   	nop
   1f8c6:	c9                   	leave
   1f8c7:	c3                   	ret

000000000001f8c8 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1f8c8:	55                   	push   %rbp
   1f8c9:	48 89 e5             	mov    %rsp,%rbp
   1f8cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1f8d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8d4:	5d                   	pop    %rbp
   1f8d5:	c3                   	ret

000000000001f8d6 <_ZSt12construct_atIN2vk15LayerPropertiesEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f8d6:	55                   	push   %rbp
   1f8d7:	48 89 e5             	mov    %rsp,%rbp
   1f8da:	53                   	push   %rbx
   1f8db:	48 83 ec 18          	sub    $0x18,%rsp
   1f8df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f8e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f8e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f8eb:	48 89 c6             	mov    %rax,%rsi
   1f8ee:	bf 08 02 00 00       	mov    $0x208,%edi
   1f8f3:	e8 bc 68 fe ff       	call   61b4 <_ZnwmPv>
   1f8f8:	48 89 c3             	mov    %rax,%rbx
   1f8fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f8ff:	48 89 c7             	mov    %rax,%rdi
   1f902:	e8 c1 ff ff ff       	call   1f8c8 <_ZSt7forwardIRKN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS4_E4typeE>
   1f907:	48 89 c2             	mov    %rax,%rdx
   1f90a:	48 89 d8             	mov    %rbx,%rax
   1f90d:	b9 08 02 00 00       	mov    $0x208,%ecx
   1f912:	48 8b 32             	mov    (%rdx),%rsi
   1f915:	48 89 30             	mov    %rsi,(%rax)
   1f918:	89 ce                	mov    %ecx,%esi
   1f91a:	48 01 c6             	add    %rax,%rsi
   1f91d:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1f921:	89 ce                	mov    %ecx,%esi
   1f923:	48 01 d6             	add    %rdx,%rsi
   1f926:	48 83 c6 08          	add    $0x8,%rsi
   1f92a:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1f92e:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1f932:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1f936:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1f93a:	48 29 f8             	sub    %rdi,%rax
   1f93d:	48 29 c2             	sub    %rax,%rdx
   1f940:	01 c1                	add    %eax,%ecx
   1f942:	83 e1 f8             	and    $0xfffffff8,%ecx
   1f945:	89 c8                	mov    %ecx,%eax
   1f947:	c1 e8 03             	shr    $0x3,%eax
   1f94a:	89 c0                	mov    %eax,%eax
   1f94c:	48 89 d6             	mov    %rdx,%rsi
   1f94f:	48 89 c1             	mov    %rax,%rcx
   1f952:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1f955:	48 89 d8             	mov    %rbx,%rax
   1f958:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1f95c:	c9                   	leave
   1f95d:	c3                   	ret

000000000001f95e <_ZSt12construct_atIPKcJEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1f95e:	55                   	push   %rbp
   1f95f:	48 89 e5             	mov    %rsp,%rbp
   1f962:	48 83 ec 10          	sub    $0x10,%rsp
   1f966:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1f96a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f96e:	48 89 c6             	mov    %rax,%rsi
   1f971:	bf 08 00 00 00       	mov    $0x8,%edi
   1f976:	e8 39 68 fe ff       	call   61b4 <_ZnwmPv>
   1f97b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   1f982:	c9                   	leave
   1f983:	c3                   	ret

000000000001f984 <_ZSt19__iterator_categoryIPPKcENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
   1f984:	55                   	push   %rbp
   1f985:	48 89 e5             	mov    %rsp,%rbp
   1f988:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
   1f98c:	90                   	nop
   1f98d:	5d                   	pop    %rbp
   1f98e:	c3                   	ret

000000000001f98f <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
   1f98f:	55                   	push   %rbp
   1f990:	48 89 e5             	mov    %rsp,%rbp
   1f993:	48 83 ec 20          	sub    $0x20,%rsp
   1f997:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f99b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1f99f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (__n <= 0)
   1f9a3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f9a8:	75 06                	jne    1f9b0 <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x21>
	return __first;
   1f9aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9ae:	eb 3a                	jmp    1f9ea <_ZSt10__fill_n_aIPPKcmS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x5b>
      std::__fill_a(__first, __first + __n, __value);
   1f9b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f9b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f9bb:	00 
   1f9bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9c0:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f9c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f9c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9cc:	48 89 ce             	mov    %rcx,%rsi
   1f9cf:	48 89 c7             	mov    %rax,%rdi
   1f9d2:	e8 88 04 00 00       	call   1fe5f <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>
      return __first + __n;
   1f9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f9db:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1f9e2:	00 
   1f9e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9e7:	48 01 d0             	add    %rdx,%rax
    }
   1f9ea:	c9                   	leave
   1f9eb:	c3                   	ret

000000000001f9ec <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   1f9ec:	55                   	push   %rbp
   1f9ed:	48 89 e5             	mov    %rsp,%rbp
   1f9f0:	53                   	push   %rbx
   1f9f1:	48 83 ec 38          	sub    $0x38,%rsp
   1f9f5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f9f9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1f9fd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1fa01:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
      _ForwardIterator __cur = __result;
   1fa05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fa09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      for (; __first != __last; ++__first, (void)++__cur)
   1fa0d:	eb 49                	jmp    1fa58 <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x6c>
	std::__relocate_object_a(std::__addressof(*__cur),
   1fa0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fa13:	48 89 c7             	mov    %rax,%rdi
   1fa16:	e8 6f 89 ff ff       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1fa1b:	48 89 c3             	mov    %rax,%rbx
   1fa1e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1fa22:	48 89 c7             	mov    %rax,%rdi
   1fa25:	e8 84 04 00 00       	call   1feae <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>
   1fa2a:	48 89 c7             	mov    %rax,%rdi
   1fa2d:	e8 58 89 ff ff       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1fa32:	48 89 c1             	mov    %rax,%rcx
   1fa35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fa39:	48 89 c2             	mov    %rax,%rdx
   1fa3c:	48 89 de             	mov    %rbx,%rsi
   1fa3f:	48 89 cf             	mov    %rcx,%rdi
   1fa42:	e8 78 04 00 00       	call   1febf <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
   1fa47:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
   1fa4c:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   1fa50:	48 89 c7             	mov    %rax,%rdi
   1fa53:	e8 36 04 00 00       	call   1fe8e <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>
   1fa58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fa5c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1fa60:	75 ad                	jne    1fa0f <_ZSt14__relocate_a_1IPPKcN9__gnu_cxx17__normal_iteratorIS2_vEESaIS1_EET0_T_S8_S7_RT1_+0x23>
      return __cur;
   1fa62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
   1fa66:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fa6a:	c9                   	leave
   1fa6b:	c3                   	ret

000000000001fa6c <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
   1fa6c:	55                   	push   %rbp
   1fa6d:	48 89 e5             	mov    %rsp,%rbp
   1fa70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
   1fa74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa78:	5d                   	pop    %rbp
   1fa79:	c3                   	ret

000000000001fa7a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_>:
	__copy_m(_II __first, _II __last, _OI __result)
   1fa7a:	55                   	push   %rbp
   1fa7b:	48 89 e5             	mov    %rsp,%rbp
   1fa7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fa82:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fa86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1fa8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fa8e:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fa92:	48 c1 f8 03          	sar    $0x3,%rax
   1fa96:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fa9a:	eb 1d                	jmp    1fab9 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x3f>
	      *__result = *__first;
   1fa9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1faa0:	48 8b 10             	mov    (%rax),%rdx
   1faa3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1faa7:	48 89 10             	mov    %rdx,(%rax)
	      ++__first;
   1faaa:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
	      ++__result;
   1faaf:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   1fab4:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   1fab9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1fabe:	7f dc                	jg     1fa9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKPKcPS4_EET0_T_S9_S8_+0x22>
	  return __result;
   1fac0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
   1fac4:	5d                   	pop    %rbp
   1fac5:	c3                   	ret

000000000001fac6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   1fac6:	55                   	push   %rbp
   1fac7:	48 89 e5             	mov    %rsp,%rbp
   1faca:	48 83 ec 30          	sub    $0x30,%rsp
   1face:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fad2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1fad6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
   1fada:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fade:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   1fae2:	48 c1 f8 03          	sar    $0x3,%rax
   1fae6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
   1faea:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1faef:	74 1f                	je     1fb10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPKcEEPT_PKS5_S8_S6_+0x4a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1faf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1faf5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fafc:	00 
   1fafd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   1fb01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fb05:	48 89 ce             	mov    %rcx,%rsi
   1fb08:	48 89 c7             	mov    %rax,%rdi
   1fb0b:	e8 50 58 fe ff       	call   5360 <memmove@plt>
	  return __result + _Num;
   1fb10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb14:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1fb1b:	00 
   1fb1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fb20:	48 01 d0             	add    %rdx,%rax
	}
   1fb23:	c9                   	leave
   1fb24:	c3                   	ret
   1fb25:	90                   	nop

000000000001fb26 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE10deallocateEPSA_m>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
   1fb26:	55                   	push   %rbp
   1fb27:	48 89 e5             	mov    %rsp,%rbp
   1fb2a:	48 83 ec 20          	sub    $0x20,%rsp
   1fb2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fb32:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fb36:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1fb3a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fb3e:	48 89 d0             	mov    %rdx,%rax
   1fb41:	48 c1 e0 03          	shl    $0x3,%rax
   1fb45:	48 01 d0             	add    %rdx,%rax
   1fb48:	48 c1 e0 03          	shl    $0x3,%rax
   1fb4c:	48 89 c2             	mov    %rax,%rdx
   1fb4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fb53:	48 89 d6             	mov    %rdx,%rsi
   1fb56:	48 89 c7             	mov    %rax,%rdi
   1fb59:	e8 d2 56 fe ff       	call   5230 <_ZdlPvm@plt>
      }
   1fb5e:	c9                   	leave
   1fb5f:	c3                   	ret

000000000001fb60 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      constexpr tuple(tuple&&) = default;
   1fb60:	55                   	push   %rbp
   1fb61:	48 89 e5             	mov    %rsp,%rbp
   1fb64:	48 83 ec 10          	sub    $0x10,%rsp
   1fb68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fb6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fb70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fb74:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1fb78:	48 89 d6             	mov    %rdx,%rsi
   1fb7b:	48 89 c7             	mov    %rax,%rdi
   1fb7e:	e8 ff 03 00 00       	call   1ff82 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1fb83:	90                   	nop
   1fb84:	c9                   	leave
   1fb85:	c3                   	ret

000000000001fb86 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1fb86:	55                   	push   %rbp
   1fb87:	48 89 e5             	mov    %rsp,%rbp
   1fb8a:	41 56                	push   %r14
   1fb8c:	41 55                	push   %r13
   1fb8e:	41 54                	push   %r12
   1fb90:	53                   	push   %rbx
   1fb91:	48 83 ec 30          	sub    $0x30,%rsp
   1fb95:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1fb99:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   1fb9d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   1fba1:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1fba5:	4c 8b 65 c8          	mov    -0x38(%rbp),%r12
   1fba9:	4c 89 e6             	mov    %r12,%rsi
   1fbac:	bf 28 00 00 00       	mov    $0x28,%edi
   1fbb1:	e8 fe 65 fe ff       	call   61b4 <_ZnwmPv>
   1fbb6:	48 89 c3             	mov    %rax,%rbx
   1fbb9:	41 be 01 00 00 00    	mov    $0x1,%r14d
   1fbbf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1fbc3:	48 89 c7             	mov    %rax,%rdi
   1fbc6:	e8 c8 ca ff ff       	call   1c693 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
   1fbcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1fbcf:	48 89 c7             	mov    %rax,%rdi
   1fbd2:	e8 ae ca ff ff       	call   1c685 <_ZSt7forwardISt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceIS9_E4typeE>
   1fbd7:	48 89 c2             	mov    %rax,%rdx
   1fbda:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1fbde:	48 89 d6             	mov    %rdx,%rsi
   1fbe1:	48 89 c7             	mov    %rax,%rdi
   1fbe4:	e8 77 ff ff ff       	call   1fb60 <_ZNSt5tupleIJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>
   1fbe9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fbed:	48 89 c7             	mov    %rax,%rdi
   1fbf0:	e8 82 ca ff ff       	call   1c677 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
   1fbf5:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   1fbf9:	48 89 c6             	mov    %rax,%rsi
   1fbfc:	48 89 df             	mov    %rbx,%rdi
   1fbff:	e8 9c 03 00 00       	call   1ffa0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
   1fc04:	48 89 d8             	mov    %rbx,%rax
   1fc07:	eb 1e                	jmp    1fc27 <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0xa1>
   1fc09:	49 89 c5             	mov    %rax,%r13
   1fc0c:	45 84 f6             	test   %r14b,%r14b
   1fc0f:	74 0b                	je     1fc1c <_ZSt12construct_atISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEJRKSt21piecewise_construct_tSt5tupleIJOS6_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_+0x96>
   1fc11:	4c 89 e6             	mov    %r12,%rsi
   1fc14:	48 89 df             	mov    %rbx,%rdi
   1fc17:	e8 23 f3 fe ff       	call   ef3f <_ZdlPvS_>
   1fc1c:	4c 89 e8             	mov    %r13,%rax
   1fc1f:	48 89 c7             	mov    %rax,%rdi
   1fc22:	e8 79 57 fe ff       	call   53a0 <_Unwind_Resume@plt>
   1fc27:	48 83 c4 30          	add    $0x30,%rsp
   1fc2b:	5b                   	pop    %rbx
   1fc2c:	41 5c                	pop    %r12
   1fc2e:	41 5d                	pop    %r13
   1fc30:	41 5e                	pop    %r14
   1fc32:	5d                   	pop    %rbp
   1fc33:	c3                   	ret

000000000001fc34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEE7_M_addrEv>:
      _M_addr() const noexcept
   1fc34:	55                   	push   %rbp
   1fc35:	48 89 e5             	mov    %rsp,%rbp
   1fc38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<const void*>(&_M_storage); }
   1fc3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc40:	5d                   	pop    %rbp
   1fc41:	c3                   	ret

000000000001fc42 <_ZSt8__fill_aIPP18VkPhysicalDevice_TS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1fc42:	55                   	push   %rbp
   1fc43:	48 89 e5             	mov    %rsp,%rbp
   1fc46:	48 83 ec 20          	sub    $0x20,%rsp
   1fc4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fc4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fc52:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1fc56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fc5a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fc5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc62:	48 89 ce             	mov    %rcx,%rsi
   1fc65:	48 89 c7             	mov    %rax,%rdi
   1fc68:	e8 5d 03 00 00       	call   1ffca <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1fc6d:	90                   	nop
   1fc6e:	c9                   	leave
   1fc6f:	c3                   	ret

000000000001fc70 <_ZSt4moveIRP18VkPhysicalDevice_TEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
   1fc70:	55                   	push   %rbp
   1fc71:	48 89 e5             	mov    %rsp,%rbp
   1fc74:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   1fc78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fc7c:	5d                   	pop    %rbp
   1fc7d:	c3                   	ret

000000000001fc7e <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
   1fc7e:	55                   	push   %rbp
   1fc7f:	48 89 e5             	mov    %rsp,%rbp
   1fc82:	48 83 ec 20          	sub    $0x20,%rsp
   1fc86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fc8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fc8e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  std::construct_at(__p, std::forward<_Args>(__args)...);
   1fc92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc96:	48 89 c7             	mov    %rax,%rdi
   1fc99:	e8 67 03 00 00       	call   20005 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   1fc9e:	48 89 c2             	mov    %rax,%rdx
   1fca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fca5:	48 89 d6             	mov    %rdx,%rsi
   1fca8:	48 89 c7             	mov    %rax,%rdi
   1fcab:	e8 63 03 00 00       	call   20013 <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
   1fcb0:	90                   	nop
   1fcb1:	c9                   	leave
   1fcb2:	c3                   	ret

000000000001fcb3 <_ZNSt16allocator_traitsISaIP18VkPhysicalDevice_TEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
   1fcb3:	55                   	push   %rbp
   1fcb4:	48 89 e5             	mov    %rsp,%rbp
   1fcb7:	48 83 ec 10          	sub    $0x10,%rsp
   1fcbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fcbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  std::destroy_at(__p);
   1fcc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fcc7:	48 89 c7             	mov    %rax,%rdi
   1fcca:	e8 81 ed ff ff       	call   1ea50 <_ZSt10destroy_atIP18VkPhysicalDevice_TEvPT_>
	}
   1fccf:	90                   	nop
   1fcd0:	c9                   	leave
   1fcd1:	c3                   	ret

000000000001fcd2 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1fcd2:	55                   	push   %rbp
   1fcd3:	48 89 e5             	mov    %rsp,%rbp
   1fcd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1fcda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fcde:	5d                   	pop    %rbp
   1fcdf:	c3                   	ret

000000000001fce0 <_ZSt12construct_atIN2vk21QueueFamilyPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1fce0:	55                   	push   %rbp
   1fce1:	48 89 e5             	mov    %rsp,%rbp
   1fce4:	53                   	push   %rbx
   1fce5:	48 83 ec 18          	sub    $0x18,%rsp
   1fce9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fced:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1fcf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fcf5:	48 89 c6             	mov    %rax,%rsi
   1fcf8:	bf 18 00 00 00       	mov    $0x18,%edi
   1fcfd:	e8 b2 64 fe ff       	call   61b4 <_ZnwmPv>
   1fd02:	48 89 c3             	mov    %rax,%rbx
   1fd05:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fd09:	48 89 c7             	mov    %rax,%rdi
   1fd0c:	e8 c1 ff ff ff       	call   1fcd2 <_ZSt7forwardIN2vk21QueueFamilyPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1fd11:	48 89 c1             	mov    %rax,%rcx
   1fd14:	48 8b 01             	mov    (%rcx),%rax
   1fd17:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   1fd1b:	48 89 03             	mov    %rax,(%rbx)
   1fd1e:	48 89 53 08          	mov    %rdx,0x8(%rbx)
   1fd22:	48 8b 41 10          	mov    0x10(%rcx),%rax
   1fd26:	48 89 43 10          	mov    %rax,0x10(%rbx)
   1fd2a:	48 89 d8             	mov    %rbx,%rax
   1fd2d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fd31:	c9                   	leave
   1fd32:	c3                   	ret

000000000001fd33 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1fd33:	55                   	push   %rbp
   1fd34:	48 89 e5             	mov    %rsp,%rbp
   1fd37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1fd3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd3f:	5d                   	pop    %rbp
   1fd40:	c3                   	ret

000000000001fd41 <_ZSt12construct_atIN2vk19ExtensionPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1fd41:	55                   	push   %rbp
   1fd42:	48 89 e5             	mov    %rsp,%rbp
   1fd45:	53                   	push   %rbx
   1fd46:	48 83 ec 18          	sub    $0x18,%rsp
   1fd4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fd4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1fd52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fd56:	48 89 c6             	mov    %rax,%rsi
   1fd59:	bf 04 01 00 00       	mov    $0x104,%edi
   1fd5e:	e8 51 64 fe ff       	call   61b4 <_ZnwmPv>
   1fd63:	48 89 c3             	mov    %rax,%rbx
   1fd66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fd6a:	48 89 c7             	mov    %rax,%rdi
   1fd6d:	e8 c1 ff ff ff       	call   1fd33 <_ZSt7forwardIN2vk19ExtensionPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1fd72:	48 89 c2             	mov    %rax,%rdx
   1fd75:	48 89 d8             	mov    %rbx,%rax
   1fd78:	b9 04 01 00 00       	mov    $0x104,%ecx
   1fd7d:	48 8b 32             	mov    (%rdx),%rsi
   1fd80:	48 89 30             	mov    %rsi,(%rax)
   1fd83:	89 ce                	mov    %ecx,%esi
   1fd85:	48 01 c6             	add    %rax,%rsi
   1fd88:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1fd8c:	89 ce                	mov    %ecx,%esi
   1fd8e:	48 01 d6             	add    %rdx,%rsi
   1fd91:	48 83 c6 08          	add    $0x8,%rsi
   1fd95:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1fd99:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1fd9d:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1fda1:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1fda5:	48 29 f8             	sub    %rdi,%rax
   1fda8:	48 29 c2             	sub    %rax,%rdx
   1fdab:	01 c1                	add    %eax,%ecx
   1fdad:	83 e1 f8             	and    $0xfffffff8,%ecx
   1fdb0:	89 c8                	mov    %ecx,%eax
   1fdb2:	c1 e8 03             	shr    $0x3,%eax
   1fdb5:	89 c0                	mov    %eax,%eax
   1fdb7:	48 89 d6             	mov    %rdx,%rsi
   1fdba:	48 89 c1             	mov    %rax,%rcx
   1fdbd:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1fdc0:	48 89 d8             	mov    %rbx,%rax
   1fdc3:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fdc7:	c9                   	leave
   1fdc8:	c3                   	ret

000000000001fdc9 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   1fdc9:	55                   	push   %rbp
   1fdca:	48 89 e5             	mov    %rsp,%rbp
   1fdcd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   1fdd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fdd5:	5d                   	pop    %rbp
   1fdd6:	c3                   	ret

000000000001fdd7 <_ZSt12construct_atIN2vk15LayerPropertiesEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   1fdd7:	55                   	push   %rbp
   1fdd8:	48 89 e5             	mov    %rsp,%rbp
   1fddb:	53                   	push   %rbx
   1fddc:	48 83 ec 18          	sub    $0x18,%rsp
   1fde0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1fde4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   1fde8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fdec:	48 89 c6             	mov    %rax,%rsi
   1fdef:	bf 08 02 00 00       	mov    $0x208,%edi
   1fdf4:	e8 bb 63 fe ff       	call   61b4 <_ZnwmPv>
   1fdf9:	48 89 c3             	mov    %rax,%rbx
   1fdfc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fe00:	48 89 c7             	mov    %rax,%rdi
   1fe03:	e8 c1 ff ff ff       	call   1fdc9 <_ZSt7forwardIN2vk15LayerPropertiesEEOT_RNSt16remove_referenceIS2_E4typeE>
   1fe08:	48 89 c2             	mov    %rax,%rdx
   1fe0b:	48 89 d8             	mov    %rbx,%rax
   1fe0e:	b9 08 02 00 00       	mov    $0x208,%ecx
   1fe13:	48 8b 32             	mov    (%rdx),%rsi
   1fe16:	48 89 30             	mov    %rsi,(%rax)
   1fe19:	89 ce                	mov    %ecx,%esi
   1fe1b:	48 01 c6             	add    %rax,%rsi
   1fe1e:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
   1fe22:	89 ce                	mov    %ecx,%esi
   1fe24:	48 01 d6             	add    %rdx,%rsi
   1fe27:	48 83 c6 08          	add    $0x8,%rsi
   1fe2b:	48 8b 76 f0          	mov    -0x10(%rsi),%rsi
   1fe2f:	48 89 77 f0          	mov    %rsi,-0x10(%rdi)
   1fe33:	48 8d 78 08          	lea    0x8(%rax),%rdi
   1fe37:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
   1fe3b:	48 29 f8             	sub    %rdi,%rax
   1fe3e:	48 29 c2             	sub    %rax,%rdx
   1fe41:	01 c1                	add    %eax,%ecx
   1fe43:	83 e1 f8             	and    $0xfffffff8,%ecx
   1fe46:	89 c8                	mov    %ecx,%eax
   1fe48:	c1 e8 03             	shr    $0x3,%eax
   1fe4b:	89 c0                	mov    %eax,%eax
   1fe4d:	48 89 d6             	mov    %rdx,%rsi
   1fe50:	48 89 c1             	mov    %rax,%rcx
   1fe53:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
   1fe56:	48 89 d8             	mov    %rbx,%rax
   1fe59:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1fe5d:	c9                   	leave
   1fe5e:	c3                   	ret

000000000001fe5f <_ZSt8__fill_aIPPKcS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   1fe5f:	55                   	push   %rbp
   1fe60:	48 89 e5             	mov    %rsp,%rbp
   1fe63:	48 83 ec 20          	sub    $0x20,%rsp
   1fe67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fe6b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fe6f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { std::__fill_a1(__first, __last, __value); }
   1fe73:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1fe77:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1fe7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe7f:	48 89 ce             	mov    %rcx,%rsi
   1fe82:	48 89 c7             	mov    %rax,%rdi
   1fe85:	e8 c9 01 00 00       	call   20053 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
   1fe8a:	90                   	nop
   1fe8b:	c9                   	leave
   1fe8c:	c3                   	ret
   1fe8d:	90                   	nop

000000000001fe8e <_ZN9__gnu_cxx17__normal_iteratorIPPKcvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
   1fe8e:	55                   	push   %rbp
   1fe8f:	48 89 e5             	mov    %rsp,%rbp
   1fe92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
   1fe96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fe9a:	48 8b 00             	mov    (%rax),%rax
   1fe9d:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1fea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fea5:	48 89 10             	mov    %rdx,(%rax)
	return *this;
   1fea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
   1feac:	5d                   	pop    %rbp
   1fead:	c3                   	ret

000000000001feae <_ZNK9__gnu_cxx17__normal_iteratorIPPKcvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
   1feae:	55                   	push   %rbp
   1feaf:	48 89 e5             	mov    %rsp,%rbp
   1feb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
   1feb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1feba:	48 8b 00             	mov    (%rax),%rax
   1febd:	5d                   	pop    %rbp
   1febe:	c3                   	ret

000000000001febf <_ZSt19__relocate_object_aIPKcS1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   1febf:	55                   	push   %rbp
   1fec0:	48 89 e5             	mov    %rsp,%rbp
   1fec3:	48 83 ec 20          	sub    $0x20,%rsp
   1fec7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1fecb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1fecf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __traits::construct(__alloc, __dest, std::move(*__orig));
   1fed3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fed7:	48 89 c7             	mov    %rax,%rdi
   1feda:	e8 53 b2 ff ff       	call   1b132 <_ZSt4moveIRPKcEONSt16remove_referenceIT_E4typeEOS4_>
   1fedf:	48 89 c2             	mov    %rax,%rdx
   1fee2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1fee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1feea:	48 89 ce             	mov    %rcx,%rsi
   1feed:	48 89 c7             	mov    %rax,%rdi
   1fef0:	e8 32 c2 ff ff       	call   1c127 <_ZNSt16allocator_traitsISaIPKcEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
   1fef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fef9:	48 89 c7             	mov    %rax,%rdi
   1fefc:	e8 89 84 ff ff       	call   1838a <_ZSt11__addressofIPKcEPT_RS2_>
   1ff01:	48 89 c2             	mov    %rax,%rdx
   1ff04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ff08:	48 89 d6             	mov    %rdx,%rsi
   1ff0b:	48 89 c7             	mov    %rax,%rdi
   1ff0e:	e8 a3 d7 ff ff       	call   1d6b6 <_ZNSt16allocator_traitsISaIPKcEE7destroyIS1_EEvRS2_PT_>
    }
   1ff13:	90                   	nop
   1ff14:	c9                   	leave
   1ff15:	c3                   	ret

000000000001ff16 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   1ff16:	55                   	push   %rbp
   1ff17:	48 89 e5             	mov    %rsp,%rbp
   1ff1a:	48 83 ec 20          	sub    $0x20,%rsp
   1ff1e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff22:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   1ff26:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1ff2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff2e:	48 89 c7             	mov    %rax,%rdi
   1ff31:	e8 58 01 00 00       	call   2008e <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>
   1ff36:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ff3a:	0f 92 c0             	setb   %al
   1ff3d:	0f b6 c0             	movzbl %al,%eax
   1ff40:	48 85 c0             	test   %rax,%rax
   1ff43:	0f 95 c0             	setne  %al
   1ff46:	84 c0                	test   %al,%al
   1ff48:	74 1a                	je     1ff64 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1ff4a:	48 b8 8e e3 38 8e e3 	movabs $0x38e38e38e38e38e,%rax
   1ff51:	38 8e 03 
   1ff54:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1ff58:	73 05                	jae    1ff5f <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE8allocateEmPKv+0x49>
	      std::__throw_bad_array_new_length();
   1ff5a:	e8 21 52 fe ff       	call   5180 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
   1ff5f:	e8 1c 51 fe ff       	call   5080 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ff64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ff68:	48 89 d0             	mov    %rdx,%rax
   1ff6b:	48 c1 e0 03          	shl    $0x3,%rax
   1ff6f:	48 01 d0             	add    %rdx,%rax
   1ff72:	48 c1 e0 03          	shl    $0x3,%rax
   1ff76:	48 89 c7             	mov    %rax,%rdi
   1ff79:	e8 a2 52 fe ff       	call   5220 <_Znwm@plt>
   1ff7e:	90                   	nop
      }
   1ff7f:	c9                   	leave
   1ff80:	c3                   	ret
   1ff81:	90                   	nop

000000000001ff82 <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EOS7_>:
      _Tuple_impl(_Tuple_impl&& __in)
   1ff82:	55                   	push   %rbp
   1ff83:	48 89 e5             	mov    %rsp,%rbp
   1ff86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ff8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(static_cast<_Base&&>(__in))
   1ff8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff92:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1ff96:	48 8b 12             	mov    (%rdx),%rdx
   1ff99:	48 89 10             	mov    %rdx,(%rax)
      { }
   1ff9c:	90                   	nop
   1ff9d:	5d                   	pop    %rbp
   1ff9e:	c3                   	ret
   1ff9f:	90                   	nop

000000000001ffa0 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
   1ffa0:	55                   	push   %rbp
   1ffa1:	48 89 e5             	mov    %rsp,%rbp
   1ffa4:	48 83 ec 20          	sub    $0x20,%rsp
   1ffa8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ffac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
   1ffb0:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
   1ffb4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1ffb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffbc:	48 89 ce             	mov    %rcx,%rsi
   1ffbf:	48 89 c7             	mov    %rax,%rdi
   1ffc2:	e8 db 00 00 00       	call   200a2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
   1ffc7:	90                   	nop
   1ffc8:	c9                   	leave
   1ffc9:	c3                   	ret

000000000001ffca <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   1ffca:	55                   	push   %rbp
   1ffcb:	48 89 e5             	mov    %rsp,%rbp
   1ffce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1ffd2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1ffd6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   1ffda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ffde:	48 8b 00             	mov    (%rax),%rax
   1ffe1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   1ffe5:	eb 10                	jmp    1fff7 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   1ffe7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ffeb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ffef:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   1fff2:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   1fff7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fffb:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1ffff:	75 e6                	jne    1ffe7 <_ZSt9__fill_a1IPP18VkPhysicalDevice_TS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   20001:	90                   	nop
   20002:	90                   	nop
   20003:	5d                   	pop    %rbp
   20004:	c3                   	ret

0000000000020005 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   20005:	55                   	push   %rbp
   20006:	48 89 e5             	mov    %rsp,%rbp
   20009:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   2000d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20011:	5d                   	pop    %rbp
   20012:	c3                   	ret

0000000000020013 <_ZSt12construct_atIP18VkPhysicalDevice_TJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
   20013:	55                   	push   %rbp
   20014:	48 89 e5             	mov    %rsp,%rbp
   20017:	53                   	push   %rbx
   20018:	48 83 ec 18          	sub    $0x18,%rsp
   2001c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   20020:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
   20024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20028:	48 89 c6             	mov    %rax,%rsi
   2002b:	bf 08 00 00 00       	mov    $0x8,%edi
   20030:	e8 7f 61 fe ff       	call   61b4 <_ZnwmPv>
   20035:	48 89 c3             	mov    %rax,%rbx
   20038:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2003c:	48 89 c7             	mov    %rax,%rdi
   2003f:	e8 c1 ff ff ff       	call   20005 <_ZSt7forwardIP18VkPhysicalDevice_TEOT_RNSt16remove_referenceIS2_E4typeE>
   20044:	48 8b 00             	mov    (%rax),%rax
   20047:	48 89 03             	mov    %rax,(%rbx)
   2004a:	48 89 d8             	mov    %rbx,%rax
   2004d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   20051:	c9                   	leave
   20052:	c3                   	ret

0000000000020053 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
   20053:	55                   	push   %rbp
   20054:	48 89 e5             	mov    %rsp,%rbp
   20057:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2005b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2005f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const _Tp __tmp = __value;
   20063:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20067:	48 8b 00             	mov    (%rax),%rax
   2006a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      for (; __first != __last; ++__first)
   2006e:	eb 10                	jmp    20080 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x2d>
	*__first = __tmp;
   20070:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20074:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   20078:	48 89 10             	mov    %rdx,(%rax)
      for (; __first != __last; ++__first)
   2007b:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   20080:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   20084:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   20088:	75 e6                	jne    20070 <_ZSt9__fill_a1IPPKcS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x1d>
    }
   2008a:	90                   	nop
   2008b:	90                   	nop
   2008c:	5d                   	pop    %rbp
   2008d:	c3                   	ret

000000000002008e <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
   2008e:	55                   	push   %rbp
   2008f:	48 89 e5             	mov    %rsp,%rbp
   20092:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
   20096:	48 b8 c7 71 1c c7 71 	movabs $0x1c71c71c71c71c7,%rax
   2009d:	1c c7 01 
      }
   200a0:	5d                   	pop    %rbp
   200a1:	c3                   	ret

00000000000200a2 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjEC1IJOS5_EJLm0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
   200a2:	55                   	push   %rbp
   200a3:	48 89 e5             	mov    %rsp,%rbp
   200a6:	53                   	push   %rbx
   200a7:	48 83 ec 28          	sub    $0x28,%rsp
   200ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   200af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   200b3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   200b7:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   200bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   200bf:	48 89 c7             	mov    %rax,%rdi
   200c2:	e8 25 00 00 00       	call   200ec <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>
   200c7:	48 89 c7             	mov    %rax,%rdi
   200ca:	e8 37 00 00 00       	call   20106 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
   200cf:	48 89 c6             	mov    %rax,%rsi
   200d2:	48 89 df             	mov    %rbx,%rdi
   200d5:	e8 26 9e fe ff       	call   9f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   200da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   200de:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
      { }
   200e5:	90                   	nop
   200e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   200ea:	c9                   	leave
   200eb:	c3                   	ret

00000000000200ec <_ZSt3getILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_>:
    get(tuple<_Elements...>& __t) noexcept
   200ec:	55                   	push   %rbp
   200ed:	48 89 e5             	mov    %rsp,%rbp
   200f0:	48 83 ec 10          	sub    $0x10,%rsp
   200f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
   200f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   200fc:	48 89 c7             	mov    %rax,%rdi
   200ff:	e8 10 00 00 00       	call   20114 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>
   20104:	c9                   	leave
   20105:	c3                   	ret

0000000000020106 <_ZSt7forwardIONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   20106:	55                   	push   %rbp
   20107:	48 89 e5             	mov    %rsp,%rbp
   2010a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
   2010e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20112:	5d                   	pop    %rbp
   20113:	c3                   	ret

0000000000020114 <_ZSt12__get_helperILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   20114:	55                   	push   %rbp
   20115:	48 89 e5             	mov    %rsp,%rbp
   20118:	48 83 ec 10          	sub    $0x10,%rsp
   2011c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
   20120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20124:	48 89 c7             	mov    %rax,%rdi
   20127:	e8 02 00 00 00       	call   2012e <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>
   2012c:	c9                   	leave
   2012d:	c3                   	ret

000000000002012e <_ZNSt11_Tuple_implILm0EJONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_headERS7_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   2012e:	55                   	push   %rbp
   2012f:	48 89 e5             	mov    %rsp,%rbp
   20132:	48 83 ec 10          	sub    $0x10,%rsp
   20136:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2013a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2013e:	48 89 c7             	mov    %rax,%rdi
   20141:	e8 02 00 00 00       	call   20148 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>
   20146:	c9                   	leave
   20147:	c3                   	ret

0000000000020148 <_ZNSt10_Head_baseILm0EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE7_M_headERS7_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   20148:	55                   	push   %rbp
   20149:	48 89 e5             	mov    %rsp,%rbp
   2014c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20154:	48 8b 00             	mov    (%rax),%rax
   20157:	5d                   	pop    %rbp
   20158:	c3                   	ret
   20159:	90                   	nop

000000000002015a <_ZNSt19bad_optional_accessD1Ev>:
    virtual ~bad_optional_access() = default;
   2015a:	55                   	push   %rbp
   2015b:	48 89 e5             	mov    %rsp,%rbp
   2015e:	48 83 ec 10          	sub    $0x10,%rsp
   20162:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20166:	48 8d 15 03 28 01 00 	lea    0x12803(%rip),%rdx        # 32970 <_ZTVSt19bad_optional_access+0x10>
   2016d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20171:	48 89 10             	mov    %rdx,(%rax)
   20174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20178:	48 89 c7             	mov    %rax,%rdi
   2017b:	e8 60 52 fe ff       	call   53e0 <_ZNSt9exceptionD2Ev@plt>
   20180:	90                   	nop
   20181:	c9                   	leave
   20182:	c3                   	ret
   20183:	90                   	nop

0000000000020184 <_ZNSt19bad_optional_accessD0Ev>:
   20184:	55                   	push   %rbp
   20185:	48 89 e5             	mov    %rsp,%rbp
   20188:	48 83 ec 10          	sub    $0x10,%rsp
   2018c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20190:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20194:	48 89 c7             	mov    %rax,%rdi
   20197:	e8 be ff ff ff       	call   2015a <_ZNSt19bad_optional_accessD1Ev>
   2019c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   201a0:	be 08 00 00 00       	mov    $0x8,%esi
   201a5:	48 89 c7             	mov    %rax,%rdi
   201a8:	e8 83 50 fe ff       	call   5230 <_ZdlPvm@plt>
   201ad:	c9                   	leave
   201ae:	c3                   	ret

Disassembly of section .fini:

00000000000201b0 <_fini>:
   201b0:	48 83 ec 08          	sub    $0x8,%rsp
   201b4:	48 83 c4 08          	add    $0x8,%rsp
   201b8:	c3                   	ret
